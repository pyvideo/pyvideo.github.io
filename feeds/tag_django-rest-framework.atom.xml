<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/tag_django-rest-framework.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2019-05-05T00:00:00+00:00</updated><entry><title>Decoupling Django with Django REST (and a sprinkle of React)</title><link href="https://pyvideo.org/pycon-italia-2019/decoupling-django-with-django-rest-and-a-sprinkle-of-react.html" rel="alternate"></link><published>2019-05-05T00:00:00+00:00</published><updated>2019-05-05T00:00:00+00:00</updated><author><name>Valentino Gagliardi</name></author><id>tag:pyvideo.org,2019-05-05:pycon-italia-2019/decoupling-django-with-django-rest-and-a-sprinkle-of-react.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;div class="section" id="abstract"&gt;
&lt;h4&gt;Abstract&lt;/h4&gt;
&lt;p&gt;With the rise of JavaScript as the lingua-franca of the web and the
steady growth of libraries like React, today’s web developers can build
rich and well structured frontend experiences. Pair that with Django and
Django REST framework and you get the perfect combination. But it’s not
all bells and whistles. What challenges are we going to face when
decoupling Django with Django REST? What are the best practices? How to
structure such a project? In this talk I’ll guide Django developers
(both beginners and intermediate) from 0 to structuring a decoupled
Django project.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="description"&gt;
&lt;h4&gt;Description&lt;/h4&gt;
&lt;p&gt;The goal of this talk is to give Django developers an overview of a
Django REST project, paired with React, as well as the tradeoffs of the
decoupled approach. By the end of the talk the developer should be able
to configure a new Django REST project and use a frontend library for
interacting with the API.&lt;/p&gt;
&lt;div class="section" id="why-and-when-to-decouple-django"&gt;
&lt;h5&gt;1. Why and when to decouple Django&lt;/h5&gt;
&lt;p&gt;There are many ways for decoupling a Django application and each one
depends on the use case. In this section we’ll outline what decoupling
is, why decoupling is a great approach and why sometimes it is not the
right thing to do. We’ll see what the challenges of such approach are
and how to deal with authentication in a decoupled context.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="django-rest-fundamentals"&gt;
&lt;h5&gt;2. Django REST fundamentals&lt;/h5&gt;
&lt;p&gt;Django REST framework is a Django application for exposing API endpoints
from a Django project. It this section we’ll see the building blocks of
a Django API app: the model, the serializer and the view. Models should
not be a surprise for the audience, they come from Django. Serializers
instead are provided by Django REST. We’ll also see how a Django REST
view looks like and how to leverage both function based views and
generic views within the project.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="setting-up-the-frontend"&gt;
&lt;h5&gt;3. Setting up the frontend&lt;/h5&gt;
&lt;p&gt;The key for a truly decoupled experience is a frontend for consuming and
interacting with the API. In this section we’ll see how to structure a
Django REST project alongside with React. We will explore two
approaches: fully decoupled frontend and mixed frontend.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="a-note-on-testing-and-closing-words"&gt;
&lt;h5&gt;4. A note on testing and closing words&lt;/h5&gt;
&lt;p&gt;In the context of a decoupled Django site we move from the typical
Django tests to testing the API’s response instead. We will see how a
simple API test looks like. And for the JavaScript frontend we’ll take a
look at the current available tooling for functional testing.&lt;/p&gt;
&lt;p&gt;Questions?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Feedback form:&lt;/strong&gt; &lt;a class="reference external" href="https://python.it/feedback-1735"&gt;https://python.it/feedback-1735&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;Sunday 5 May&lt;/strong&gt; at 10:15 &lt;a class="reference external" href="/en/sprints/schedule/pycon10/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary><category term="javascript"></category><category term="django-rest-framework"></category><category term="REST"></category><category term="django"></category></entry><entry><title>Quando la tua applicazione Django non va abbastanza veloce</title><link href="https://pyvideo.org/pycon-italia-2019/quando-la-tua-applicazione-django-non-va-abbastanza-veloce.html" rel="alternate"></link><published>2019-05-04T00:00:00+00:00</published><updated>2019-05-04T00:00:00+00:00</updated><author><name>Riccardo Magliocchetti</name></author><id>tag:pyvideo.org,2019-05-04:pycon-italia-2019/quando-la-tua-applicazione-django-non-va-abbastanza-veloce.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Django mette molta enfasi nel creare applicazioni velocemente. Questo è
grandioso! Sviluppare applicazioni velocemente però non sempre significa
sviluppare applicazioni veloci.&lt;/p&gt;
&lt;p&gt;In questo talk mostrerò alcuni problemi di performance che ho incontrato
(o introdotto) nella mia esperienza di sviluppatore. Vedremo esempi in
diversi punti dell’applicazione: dai modelli, passando per le viste fino
ai serializzatori. Alcuni di questi si sono rivelati facili da trovare e
risolvere, altri subdoli o addirittura imbarazzanti. Tutti
fortunatamente risolti.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Feedback form:&lt;/strong&gt; &lt;a class="reference external" href="https://python.it/feedback-1611"&gt;https://python.it/feedback-1611&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;Saturday 4 May&lt;/strong&gt; at 10:45 &lt;a class="reference external" href="/en/sprints/schedule/pycon10/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</summary><category term="performance"></category><category term="django"></category><category term="django-rest-framework"></category><category term="databases"></category></entry><entry><title>Django-freeradius</title><link href="https://pyvideo.org/pycon-italia-2018/django-freeradius.html" rel="alternate"></link><published>2018-04-22T00:00:00+00:00</published><updated>2018-04-22T00:00:00+00:00</updated><author><name>Fiorella De Luca</name></author><id>tag:pyvideo.org,2018-04-22:pycon-italia-2018/django-freeradius.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;a class="reference external" href="https://freeradius.org/"&gt;Freeradius&lt;/a&gt; è il server Radius open source
più popolare e diffuso al mondo e supporta tutti i protocolli di
autenticazione più comuni. Per renderne più agevole l’utilizzo,
all’interno della comunità OpenWISP è stato deciso di sviluppare
django-freeradius. Si tratta di un’interfaccia web per gestire i
database Freeradius basata su Django che si avvale delle RESTful API per
gestire l’autorizzazione, la post autenticazione e l’accounting di
freeradius. Django-freeradius è un’ app riutilizzabile ed estensibile.
In questo talk vi parlerò di come ho implementato questo primo nucleo di
django-freeradius durante il Google Summer of Code 2017.&lt;/p&gt;
&lt;p&gt;Lo scopo di questo talk è di presentare le potenzialità di
django-freeradius, inoltre verrà mostrato un caso d’uso e le
informazioni necessarie per poterlo installare e utilizzare nella vostra
infrastruttura.&lt;/p&gt;
&lt;p&gt;Il talk è rivolto a sviluppatori web con esperienza in django e/o a
programmatori con conoscenze di freeradius.&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;domenica 22 aprile&lt;/strong&gt; at 12:45 &lt;a class="reference external" href="/p3/schedule/pycon9/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</summary><category term="Python"></category><category term="web"></category><category term="radius"></category><category term="django-rest-framework"></category><category term="django"></category></entry><entry><title>Designing fast and scalable Python MicroServices with django</title><link href="https://pyvideo.org/pycon-sk-2018/designing-fast-and-scalable-python-microservices-with-django.html" rel="alternate"></link><published>2018-03-10T00:00:00+00:00</published><updated>2018-03-10T00:00:00+00:00</updated><author><name>Dinesh Joshi</name></author><id>tag:pyvideo.org,2018-03-10:pycon-sk-2018/designing-fast-and-scalable-python-microservices-with-django.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;django, combined with the django REST framework, makes it very easy to
build RESTful MicroServices. However, django is perceived to have some
overhead making it hard to build fast and scalable MicroServices. This
talk shows you how to squeeze the last bit of performance from django.
We will focus on django’s key architectural components and the right way
to use them. Using profiling, we will identify bottlenecks and fix them
enabling you to build scalable RESTful services that play to django’s
strengths. At the end of the talk you will have a good handle on
building scalable MicroServices with django.&lt;/p&gt;
</summary><category term="Django"></category><category term="Django REST framework"></category><category term="MicroServices"></category><category term="PyCon SK"></category><category term="Python"></category><category term="RESTful services"></category></entry><entry><title>Digital Analytics Data Aggregation: un case study dal mondo reale utilizzando SQL, NoSQL e Pandas</title><link href="https://pyvideo.org/pycon-italia-2017/digital-analytics-data-aggregation-un-case-study-dal-mondo-reale-utilizzando-sql-nosql-e-pandas.html" rel="alternate"></link><published>2017-04-08T00:00:00+00:00</published><updated>2017-04-08T00:00:00+00:00</updated><author><name>Alessandro Pelliciari</name></author><id>tag:pyvideo.org,2017-04-08:pycon-italia-2017/digital-analytics-data-aggregation-un-case-study-dal-mondo-reale-utilizzando-sql-nosql-e-pandas.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;I clienti enterprise si trovano sempre più spesso ad avere difficoltà
nel recuperare informazioni essenziali per capire nel complesso dove il
brand sta funzionando e dove invece serve un intervento tempestivo,
perchè sono inondati di dati di dettaglio che spesso non sono facilmente
aggregabili e visualizzabili insieme con frequenza giornaliera.&lt;/p&gt;
&lt;p&gt;Per rispondere a questa esigenza, in azienda, nel nostro reparto R&amp;amp;D,
abbiamo sviluppato una dashboard che permette a clienti con diversi
brand e properties (siti) di aggregare i principali KPI da monitorare
(sia KPI standard che KPI personalizzati). I KPI sono i key performance
indicators, ovvero metriche che aiutano a valutare le performance).&lt;/p&gt;
&lt;p&gt;Ma i dati da visualizzare e aggregare, provenienti da diverse fonti
(Google Analytics, Adobe Analytics, tools SEO), hanno strutture diverse
e non è possibile a priori prevedere quali sono le strutture
disponibili.&lt;/p&gt;
&lt;p&gt;Perciò, in questo talk vedremo insieme come abbiamo gestito questo caso
reale attraverso un mix di tecnologie SQL (MySQL attraverso Django) e
NoSQL (MongoDb), utilizzando i dataframe di Pandas come layer intermedio
attraverso il quale lavorare il dato velocemente.&lt;/p&gt;
&lt;p&gt;La soluzione realizzata ci ha permesso di integrare rapidamente nuove
fonti e nuovi KPI, e di gestire volumi elevati di dati (attualmente 200+
siti contemporaneamente) con ottime performance.&lt;/p&gt;
&lt;p&gt;Vedremo poi (se rimane tempo) come questi dati vengono forniti
attraverso API Rest (grazie a Django Rest Framework) e consumati
attraverso AngularJS sul client.&lt;/p&gt;
&lt;p&gt;Vorremmo infine coinvolgervi chiedendovi come avreste gestito questa
difficoltà - non è assolutamente detto che la nostra soluzione sia per
forza quella ottimale!&lt;/p&gt;
</summary><category term="django-rest-framework"></category><category term="mongodb"></category><category term="django"></category><category term="API Design"></category><category term="web-development"></category><category term="angularjs"></category><category term="mysql"></category><category term="google-analytics"></category><category term="pandas"></category></entry><entry><title>Django Rest Framework - Tips&amp;Tricks</title><link href="https://pyvideo.org/pycon-italia-2017/django-rest-framework-tipstricks.html" rel="alternate"></link><published>2017-04-08T00:00:00+00:00</published><updated>2017-04-08T00:00:00+00:00</updated><author><name>Luca Zacchetti</name></author><id>tag:pyvideo.org,2017-04-08:pycon-italia-2017/django-rest-framework-tipstricks.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Developing Web APIs for Django websites have never been so easy.
Starting from a real world use case, I’ll explain why DRF became our
weapon of choice to develop in a fast and easy way all the APIs we need
at Cloud Academy.&lt;/p&gt;
&lt;p&gt;We’ll start talking about the main benefits that DRF brings to Django
projects, then we’ll use our real world use case to describe the best
practices we use to build fast, secure and maintainable APIs diving into
DRF main features and functionalities.&lt;/p&gt;
&lt;p&gt;The scope of this talk is to explain in a very practical way how DRF can
be integrated into Django projects to build beautiful web APIs. We’ll
use a lot of code examples and performance benchmarks to describe the
various features explored during the talk. No prior experience on DRF is
required but at least some basic knowledge of Django is suggested for
attendees.&lt;/p&gt;
</summary><category term="django-rest-framework"></category><category term="REST API Frameworks"></category><category term="API Design"></category><category term="REST"></category><category term="django"></category><category term="optimization"></category><category term="performance"></category></entry><entry><title>Presenting pysftpserver: OpenSSH SFTP service with Python</title><link href="https://pyvideo.org/pycon-italia-2017/presenting-pysftpserver-openssh-sftp-service-with-python.html" rel="alternate"></link><published>2017-04-07T00:00:00+00:00</published><updated>2017-04-07T00:00:00+00:00</updated><author><name>Filippo Morelli</name></author><id>tag:pyvideo.org,2017-04-07:pycon-italia-2017/presenting-pysftpserver-openssh-sftp-service-with-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Have you ever needed to connect to an OpenSSH SFTP server and keep track
of the user activities? Or maybe limit user permissions? Or define
specific callbacks to react to user actions?&lt;/p&gt;
&lt;p&gt;&lt;em&gt;pysftpserver&lt;/em&gt; is an OpenSSH SFTP wrapper, written purely in Python. It
is yet another cool example of what you might already know: how powerful
Python can be while staying extremely simple.&lt;/p&gt;
&lt;p&gt;This talk aims at presenting the tool and a few use cases in which it
was harnessed, including one with Django and Django REST Framework. It
requires a good knowledge of Python and Django and understanding the
basics of a SFTP service.&lt;/p&gt;
</summary><category term="SFTP"></category><category term="command-line"></category><category term="django-rest-framework"></category><category term="storage"></category><category term="django"></category><category term="ssh"></category><category term="servers"></category></entry></feed>