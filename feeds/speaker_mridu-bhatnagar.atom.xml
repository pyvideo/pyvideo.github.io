<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org - Mridu Bhatnagar</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_mridu-bhatnagar.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2020-07-23T00:00:00+00:00</updated><subtitle></subtitle><entry><title>Object Internals</title><link href="https://pyvideo.org/europython-2020/object-internals.html" rel="alternate"></link><published>2020-07-23T00:00:00+00:00</published><updated>2020-07-23T00:00:00+00:00</updated><author><name>Mridu Bhatnagar</name></author><id>tag:pyvideo.org,2020-07-23:/europython-2020/object-internals.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Memory address in Python&lt;/p&gt;
&lt;p&gt;This talk is intended to explain to participants what is happening under the hood when they are playing around with different python built-in data structures. Explain the concepts such that they are not surprised by the behavior of Python.&lt;/p&gt;
&lt;p&gt;Pre-requisites:
Anyone who knows built-in python …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Memory address in Python&lt;/p&gt;
&lt;p&gt;This talk is intended to explain to participants what is happening under the hood when they are playing around with different python built-in data structures. Explain the concepts such that they are not surprised by the behavior of Python.&lt;/p&gt;
&lt;p&gt;Pre-requisites:
Anyone who knows built-in python data structures like List, Dictionaries, set, etc.&lt;/p&gt;
&lt;p&gt;Curiosity questions that the talk answers:
1. What happens to the memory address when * operator is used?
2. When does python create a new object in memory?
3. What does it refer to the mutability and immutability of objects in Python?
4. If the outer object is immutable but the reference objects are mutable. Can the elements be added?
5. What is the difference at the memory level when we refer to deep copy and shallow copy in lists?
6. Operations like List.sort and sorted in python? What to use, when to use? What happens at the memory level?
7. What is the difference between is vs ==? When should it be used?
8. Lots and lots of interesting examples.
9. How do we determine the memory reference id associated with the object?
10. Meaning of assigning a value to a variable in Python.&lt;/p&gt;
&lt;p&gt;The existing slides use screenshots. But, I'll be including more interesting examples and would replace the screenshots with GIFs. So, that folks get a feeling of live coding and remain interested in the presentation. Along with the visual representation of what is happening at the memory level.&lt;/p&gt;
</content><category term="EuroPython 2020"></category><category term="europython"></category><category term="europython-2020"></category><category term="europython-online"></category><category term="Data-Structures"></category><category term="Development"></category><category term="Python 3"></category></entry><entry><title>Automating Data Pipeline using Apache Airflow</title><link href="https://pyvideo.org/pydata-delhi-2019/automating-data-pipeline-using-apache-airflow.html" rel="alternate"></link><published>2019-08-03T00:00:00+00:00</published><updated>2019-08-03T00:00:00+00:00</updated><author><name>Mridu Bhatnagar</name></author><id>tag:pyvideo.org,2019-08-03:/pydata-delhi-2019/automating-data-pipeline-using-apache-airflow.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Manually running scripts to extract, transform and load data is a
trade-off with time, is tedious and cumbersome. The process of building
a data pipeline can be automated. Scripts to extract data can be
scheduled using crontab. However, using crontab has its own drawbacks.
One major challenge is monitoring …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Manually running scripts to extract, transform and load data is a
trade-off with time, is tedious and cumbersome. The process of building
a data pipeline can be automated. Scripts to extract data can be
scheduled using crontab. However, using crontab has its own drawbacks.
One major challenge is monitoring. Airflow is a platform to
programmatically author, schedule and monitor workflows.&lt;/p&gt;
&lt;p&gt;Today, we are moving towards machine learning. Making predictions,
finding out insights based on data. For the same purpose, the initial
step is to have efficient processes in place which help us in collecting
data from various different data sources. Using traditional ways to
collect data is tedious and cumbersome. Manually running scripts to
extract, transform and load data is a trade-off with time.&lt;/p&gt;
&lt;p&gt;To make the process efficient. The data pipeline can be automated.
Scripts to extract data can be auto-scheduled using crontab. However,
using crontab has its own drawbacks. One major challenge comes in
monitoring. This is where an open source tool built by AirBnB
engineering team - Apache airflow helps. Airflow is a platform to
programmatically author, schedule and monitor workflows.&lt;/p&gt;
&lt;p&gt;The talk aims at introducing the attendees to.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Airflow - overview of the tool. Advantages, disadvantages&lt;/li&gt;
&lt;li&gt;Directed acyclic graph - Examples of directed acyclic graph and
directed cyclic graphs&lt;/li&gt;
&lt;li&gt;Operators a. Bash Operator b. Python Operator c. Email Operator&lt;/li&gt;
&lt;li&gt;Python context manager&lt;/li&gt;
&lt;li&gt;Examples&lt;/li&gt;
&lt;li&gt;Demo&lt;/li&gt;
&lt;/ol&gt;
</content><category term="PyData Delhi 2019"></category></entry></feed>