<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_ryan-f-kelly.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2011-08-22T00:00:00+00:00</updated><entry><title>PyConAU 2010: Esky: keep your frozen apps fresh</title><link href="https://pyvideo.org/pycon-au-2010/pyconau-2010--esky--keep-your-frozen-apps-fresh.html" rel="alternate"></link><published>2010-06-26T00:00:00+00:00</published><updated>2010-06-26T00:00:00+00:00</updated><author><name>Ryan F Kelly</name></author><id>tag:pyvideo.org,2010-06-26:pycon-au-2010/pyconau-2010--esky--keep-your-frozen-apps-fresh.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Esky: keep your frozen apps fresh&lt;/p&gt;
&lt;p&gt;Presented by Ryan F Kelly&lt;/p&gt;
&lt;p&gt;Esky (&lt;a class="reference external" href="http://pypi.python.org/pypi/esky/"&gt;http://pypi.python.org/pypi/esky/&lt;/a&gt;) is an auto-update framework for
frozen Python applications, designed to be simple to use while
guaranteeing the safety of your app in case of failed or partial
updates. It provides easy support for differential updates and is
compatible with py2exe, py2app, cx-freeze and bbfreeze.&lt;/p&gt;
&lt;p&gt;This talk will give an overview of esky's features, and show how to
extend an existing frozen application with auto-update support.&lt;/p&gt;
</summary><category term="esky"></category><category term="packaging"></category><category term="pyconau"></category><category term="pyconau2010"></category></entry><entry><title>Bytecode: What, Why, and How to Hack it</title><link href="https://pyvideo.org/pycon-au-2011/bytecode-what-why-and-how-to-hack-it.html" rel="alternate"></link><published>2011-08-22T00:00:00+00:00</published><updated>2011-08-22T00:00:00+00:00</updated><author><name>Ryan F Kelly</name></author><id>tag:pyvideo.org,2011-08-22:pycon-au-2011/bytecode-what-why-and-how-to-hack-it.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;What's python really doing when it runs your scripts, and what's with
all these .pyc files? Get inside the head of python.exe, learn how it
sees your code, and then twist it to your own evil ends. This talk will
discuss the basics of python's bytecode format, why and how it is used,
and how you can dive into the bytecode of your running program - either
to better understand its behaviour, or to make it do things to was never
supposed to do....&lt;/p&gt;
</summary><category term="bytecode"></category></entry><entry><title>Say What You Mean: Meta-Programming a Declarative API</title><link href="https://pyvideo.org/pycon-au-2011/say-what-you-mean-meta-programming-a-declarative.html" rel="alternate"></link><published>2011-08-22T00:00:00+00:00</published><updated>2011-08-22T00:00:00+00:00</updated><author><name>Ryan F Kelly</name></author><id>tag:pyvideo.org,2011-08-22:pycon-au-2011/say-what-you-mean-meta-programming-a-declarative.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;This talk will explore the use of python's meta-programming facilities
to create a simple declarative API so that you can &lt;em&gt;say what you mean&lt;/em&gt; -
write code that focuses on the what and the why without being cluttered
by the how. If you've ever wondered how the Django ORM or SQLObject work
their magic, this is the talk for you.&lt;/p&gt;
</summary><category term="api"></category><category term="django"></category><category term="orm"></category></entry></feed>