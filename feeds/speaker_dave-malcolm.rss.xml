<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Fri, 09 Mar 2012 00:00:00 +0000</lastBuildDate><item><title>Plenary: Friday Evening Lightning Talks</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--plenary--friday-evening-lightning-tal.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Plenary: Friday Evening Lightning Talks&lt;/p&gt;
&lt;p&gt;(00:00) Jacob Kaplan-Moss - lightning talk about lightning talks&lt;/p&gt;
&lt;p&gt;(03:50) Van Lindberg - What an Open Source Lawyer Actually Does&lt;/p&gt;
&lt;p&gt;(09:40) Greg Wilson - The Next Big Programming Book and How You Can Make
it Happen (&lt;a class="reference external" href="http://www.third-bit.com/"&gt;http://www.third-bit.com/&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;(14:25) Moshe Zadka - Don't Write Big Applications (more info
&lt;a class="reference external" href="http://moshez.wordpress.com/2010/02/17/dont-write-big-applications-a%20-lightning-talk/"&gt;here&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;(19:35) Ned Batchelder - What's new in coverage.py
(&lt;a class="reference external" href="http://nedbatchelder.com/"&gt;http://nedbatchelder.com/&lt;/a&gt;,
&lt;a class="reference external" href="http://nedbatchelder.com/code/coverage/"&gt;coverage.py&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;(25:10) Mike Maccana - Python Docx
(&lt;a class="reference external" href="http://github.com/mikemaccana/python-docx/"&gt;http://github.com/mikemaccana/python-
docx/&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;(29:25) Trent Mick - ActiveState Code v3/Python Cookbook v3
(&lt;a class="reference external" href="http://code.activestate.com/"&gt;http://code.activestate.com/&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;(34:40) Daniel Holth - Writing a SQLAlchemy Dialect&lt;/p&gt;
&lt;p&gt;(37:30) Dave Malcolm - Better Ways of Debugging the CPython Runtime&lt;/p&gt;
&lt;p&gt;(43:00) David Huggins-Daines - Recognizing Speech With Python
(&lt;a class="reference external" href="http://cmusphinx.sourceforge.net/"&gt;http://cmusphinx.sourceforge.net/&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;(48:00) Lucio Torre - Ubuntu One and Windows&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jacob Kaplan-Moss</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--plenary--friday-evening-lightning-tal.html</guid><category>lightning talks</category><category>activestate</category><category>bigapps</category><category>cmusphinx</category><category>coverage.py</category><category>cpython</category><category>lawyers</category><category>programmingbook</category><category>pycon</category><category>pycon2010</category><category>python-cookbook</category><category>sqlalchemy</category><category>ubuntuone</category></item><item><title>"Dude, Where's My RAM?" - A deep dive into how Python uses memory</title><link>https://pyvideo.org/pycon-us-2011/pycon-2011---quot-dude--where--39-s-my-ram--quot-.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&amp;quot;Dude, Where's My RAM?&amp;quot; - A deep dive into how Python uses memory&lt;/p&gt;
&lt;p&gt;Presented by Dave Malcolm&lt;/p&gt;
&lt;p&gt;This talk will give a deep dive into how CPython uses memory. I'll be
demonstrating a new tool I've written that analyses CPython's memory
usage, and offer hints and tips on how you can reduce the memory
footprint of your Python programs.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;Is your Python program using too much memory? This talk will give a deep
dive into how CPython uses memory - starting from objects in your Python
code, down through the various implementations layers, eventually
reaching actual hardware.&lt;/p&gt;
&lt;p&gt;In particular, I'll be demonstrating a new tool I've written that can
track CPython's memory usage down to the level of individual bytes, and
offer hints and tips on how you can reduce the memory footprint of your
Python programs.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dave Malcolm</dc:creator><pubDate>Fri, 11 Mar 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011---quot-dude--where--39-s-my-ram--quot-.html</guid><category>cpython</category><category>memory</category><category>pycon</category><category>pycon2011</category></item><item><title>Static analysis of Python extension modules using GCC</title><link>https://pyvideo.org/pycon-us-2012/static-analysis-of-python-extension-modules-using.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Want to analyse C/C++ code using Python? I've written a plugin for GCC
that embeds Python inside the compiler, allowing you to write new C/C++
compilation passes in Python. I've used this to build a static analysis
tool that understands the CPython extension API, and can automatically
detect reference- counting bugs, and other errors.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dave Malcolm</dc:creator><pubDate>Fri, 09 Mar 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-03-09:pycon-us-2012/static-analysis-of-python-extension-modules-using.html</guid></item></channel></rss>