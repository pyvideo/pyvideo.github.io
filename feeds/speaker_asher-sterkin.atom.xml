<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org - Asher Sterkin</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_asher-sterkin.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2023-03-19T00:00:00+00:00</updated><subtitle></subtitle><entry><title>Cloud Infrastructure From Python Code: How Far Could We Go?</title><link href="https://pyvideo.org/pycascades-2023/cloud-infrastructure-from-python-code-how-far-could-we-go.html" rel="alternate"></link><published>2023-03-19T00:00:00+00:00</published><updated>2023-03-19T00:00:00+00:00</updated><author><name>Asher Sterkin</name></author><id>tag:pyvideo.org,2023-03-19:/pycascades-2023/cloud-infrastructure-from-python-code-how-far-could-we-go.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Infrastructure From Code (IfC) is a relatively new trend in Cloud DevOps automation aiming at the automatic generation of cloud deployment templates directly from the application code. There are already several solutions primarily focused on the TypeScript programming language. This talk is about what could be done for the …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Infrastructure From Code (IfC) is a relatively new trend in Cloud DevOps automation aiming at the automatic generation of cloud deployment templates directly from the application code. There are already several solutions primarily focused on the TypeScript programming language. This talk is about what could be done for the Python ecosystem.&lt;/p&gt;
</content><category term="PyCascades 2023"></category></entry><entry><title>Cloud infrastructure from Python code: how far could we go?</title><link href="https://pyvideo.org/pycon-fr-2023/cloud-infrastructure-from-python-code-how-far-could-we-go.html" rel="alternate"></link><published>2023-02-18T00:00:00+00:00</published><updated>2023-02-18T00:00:00+00:00</updated><author><name>Asher Sterkin</name></author><id>tag:pyvideo.org,2023-02-18:/pycon-fr-2023/cloud-infrastructure-from-python-code-how-far-could-we-go.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk, I'm going to clarify the Infrastructure As Code (IaC) paradigm and its limitations, analyze the exact problems that Infrastructure From Code (IfC) is supposed to solve, compare recent IfC offerings, and propose what could and, in my opinion, should be done for the Python ecosystem. I …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk, I'm going to clarify the Infrastructure As Code (IaC) paradigm and its limitations, analyze the exact problems that Infrastructure From Code (IfC) is supposed to solve, compare recent IfC offerings, and propose what could and, in my opinion, should be done for the Python ecosystem. I will also share my personal experience of implementing such a system, code-named Cloud AI Operating System (CAIOS): what went well, what still needs to be resolved, and where, in my view, the Python community could contribute in making Python as the number one choice for cloud programming language.&lt;/p&gt;
&lt;p&gt;Infrastructure as Code - the use of repeatable scripts or SDKs to configure the cloud environment for an application - has expanded the possibilities of Serverless with Continuous Delivery. However, there are fundamental issues with IaC: it is a time-consuming and tedious process to prepare the scripts, the activity requires the involvement of DevSecOps experts, and the scripts are only loosely related to the application code. For any non-trivial application, these scripts grow very quickly in complexity and size. Applying IaC to optimize the configuration of the test, staging, and production environments only exacerbates these issues.&lt;/p&gt;
&lt;p&gt;Infrastructure from Code is a recent advancement over IaC that addresses these obstacles. IfC interprets a mainstream programming language code and automatically generates the specifications needed to configure a cloud environment. So far, the most advanced solutions, such as ServerlessCloud, Ampt, or Nitric, were proposed for the TypeScript ecosystem. While, for Python, AWS Chalice is a cloud-vendor-specific solution and offers a relatively limited feature set.&lt;/p&gt;
</content><category term="PyCon FR 2023"></category></entry><entry><title>Developing Cloud Serverless Components in Python</title><link href="https://pyvideo.org/pycon-israel-2018/developing-cloud-serverless-components-in-python.html" rel="alternate"></link><published>2018-06-04T00:00:00+00:00</published><updated>2018-06-04T00:00:00+00:00</updated><author><name>Asher Sterkin</name></author><id>tag:pyvideo.org,2018-06-04:/pycon-israel-2018/developing-cloud-serverless-components-in-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Serverless cloud architectures gain momentum.The number of completely managed services and serverless computation environments (Function As a Service) is already large and growing at substantial pace. For computation services (aka Function as a Service) Python is usually supported out of the box and at least in some environments …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Serverless cloud architectures gain momentum.The number of completely managed services and serverless computation environments (Function As a Service) is already large and growing at substantial pace. For computation services (aka Function as a Service) Python is usually supported out of the box and at least in some environments (AWS) yields superior performance. However the same is for JavaScript with a strong argument in favor of full-stack development. In this talk I will demonstrate how by applying Domain-Driven Design patterns front-end services where JavaScript might be more suitable could be delineated from core domain services where Python has a number of clear advantages.&lt;/p&gt;
</content><category term="PyCon Israel 2018"></category><category term="serverless"></category></entry></feed>