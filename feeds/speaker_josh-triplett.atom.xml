<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_josh-triplett.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2016-05-31T00:00:00+00:00</updated><entry><title>Networking without an OS</title><link href="https://pyvideo.org/pycon-us-2016/josh-triplett-networking-without-an-os-pycon-2016.html" rel="alternate"></link><published>2016-05-31T00:00:00+00:00</published><updated>2016-05-31T00:00:00+00:00</updated><author><name>Josh Triplett</name></author><id>tag:pyvideo.org,2016-05-31:pycon-us-2016/josh-triplett-networking-without-an-os-pycon-2016.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Speaker: Josh Triplett&lt;/p&gt;
&lt;p&gt;Many Python modules, such as socket and select, wrap low-level functionality written in C and provided by the OS. But what if you don't have an OS, and don't want any C code? We implemented client and server networking in Python itself, for a bare-metal environment running without an OS.&lt;/p&gt;
&lt;p&gt;Our socket and select implementations support Python HTTP server and client modules, which we'll demo live.&lt;/p&gt;
&lt;p&gt;Slides can be found at: &lt;a class="reference external" href="https://speakerdeck.com/pycon2016"&gt;https://speakerdeck.com/pycon2016&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/PyCon/2016-slides"&gt;https://github.com/PyCon/2016-slides&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Porting Python to run without an OS</title><link href="https://pyvideo.org/pycon-us-2015/porting-python-to-run-without-an-os.html" rel="alternate"></link><published>2015-04-11T00:00:00+00:00</published><updated>2015-04-11T00:00:00+00:00</updated><author><name>Josh Triplett</name></author><id>tag:pyvideo.org,2015-04-11:pycon-us-2015/porting-python-to-run-without-an-os.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;We've ported Python to run directly on hardware, without an OS, as a
testing and exploration environment for firmware, ACPI, and UEFI. This
talk will explore porting Python to a new platform, embedding Python,
recreating enough of libc and POSIX to run Python without an OS, and
binding to platform-specific services. Includes live demo of bare-metal
Python, directly driving hardware.&lt;/p&gt;
</summary></entry></feed>