<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org - Brett Slatkin</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Sat, 27 Sep 2025 00:00:00 +0000</lastBuildDate><item><title>Patterns and Anti-patterns in Python's Structural Pattern Matching</title><link>https://pyvideo.org/pybeach-2025/patterns-and-anti-patterns-in-pythons-structural-pattern-matching.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Have you used Python's &lt;cite&gt;match&lt;/cite&gt; statement? How do you decide when to use &lt;cite&gt;match&lt;/cite&gt; instead of a typical &lt;cite&gt;if&lt;/cite&gt;/&lt;cite&gt;elif&lt;/cite&gt;/&lt;cite&gt;else&lt;/cite&gt; statement? Although structural pattern matching functionality has been available in Python for years, many Python developers still aren't sure about the best way to employ &lt;cite&gt;match&lt;/cite&gt; in their own programs.&lt;/p&gt;
&lt;p&gt;This talk will explore effective patterns that work well with the new &lt;cite&gt;match&lt;/cite&gt; statement, and common pitfalls to avoid. It will highlight when &lt;cite&gt;if&lt;/cite&gt;/&lt;cite&gt;elif&lt;/cite&gt;/&lt;cite&gt;else&lt;/cite&gt; constructs are a better fit, and how to judge when it's time to consider moving from one style to another. The talk will also cover other approaches to matching patterns, including look-up tables for performance and unpacking for sequences.&lt;/p&gt;
&lt;p&gt;After attending this talk, you'll be able to confidently use the &lt;cite&gt;match&lt;/cite&gt; statement to enhance your programs and discern when &lt;cite&gt;match&lt;/cite&gt; will harm the readability of your code.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Brett Slatkin</dc:creator><pubDate>Sat, 27 Sep 2025 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2025-09-27:/pybeach-2025/patterns-and-anti-patterns-in-pythons-structural-pattern-matching.html</guid><category>PyBeach 2025</category></item><item><title>Powering the real-time web with Python: PubSubHubbub on App Engine (#173)</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--powering-the-real-time-web-with-pytho.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Powering the real-time web with Python: PubSubHubbub on App Engine&lt;/p&gt;
&lt;p&gt;Presented by Brett Slatkin&lt;/p&gt;
&lt;p&gt;PubSubHubbub is an open protocol that turns Atom and RSS feeds into
real-time streams. I built the reference Hub run by Google using Python
and App Engine. In this talk you will learn how I made the real-time
system work: An intro to the protocol, asynchronous processing on App
Engine, fault-tolerance, and scalability.&lt;/p&gt;
&lt;p&gt;For details on PubSubHubbub and the Hub's source code, see
&lt;a class="reference external" href="http://code.google.com/p/pubsubhubbub/"&gt;http://code.google
.com/p/pubsubhubbub/&lt;/a&gt;.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Brett Slatkin</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:/pycon-us-2010/pycon-2010--powering-the-real-time-web-with-pytho.html</guid><category>PyCon US 2010</category><category>pubsubhubbub</category><category>pycon</category><category>pycon2010</category></item><item><title>Fan-in and Fan-out: The crucial components of concurrency</title><link>https://pyvideo.org/pycon-us-2014/fan-in-and-fan-out-the-crucial-components-of-con.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;The most important yet underappreciated parts of concurrent APIs are
good constructs for fan-out (one thread spawns others) and fan-in (many
threads join together). This talk will show examples of fan-in and
fan-out. It will cover the successes and shortcomings of APIs that
provide concurrency. Finally, we'll discuss how the async model of
Tulip/PEP3156 is the ultimate API. The future is bright!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Brett Slatkin</dc:creator><pubDate>Sat, 12 Apr 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-04-12:/pycon-us-2014/fan-in-and-fan-out-the-crucial-components-of-con.html</guid><category>PyCon US 2014</category></item><item><title>How to Be More Effective with Functions</title><link>https://pyvideo.org/pycon-us-2015/how-to-be-more-effective-with-functions.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Functions improve readability, encourage reuse, and facilitate
refactoring. Python has many unique features that make functions
significantly more powerful. This talk will show you the best ways to
use functions in Python: when *args is helpful and when it'll crash
your programs; how to use generators for arguments and return values;
the value of keyword vs. keyword-only arguments; and more!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Brett Slatkin</dc:creator><pubDate>Sat, 11 Apr 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-04-11:/pycon-us-2015/how-to-be-more-effective-with-functions.html</guid><category>PyCon US 2015</category></item><item><title>Refactoring Python: Why and how to restructure your code</title><link>https://pyvideo.org/pycon-us-2016/brett-slatkin-refactoring-python-why-and-how-to-restructure-your-code-pycon-2016.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Speaker: Brett Slatkin&lt;/p&gt;
&lt;p&gt;As programs gain complexity, it becomes harder to add features and fix bugs. Reorganizing code is an effective way to make programs more manageable. This talk will show you Pythonic ways to do the most imporant &amp;quot;&amp;quot;refactorings&amp;quot;&amp;quot;: Extract variables with __nonzero__; Change signatures with *args and **kwargs; Extract fields and classes with &amp;#64;property; Create stateful closures with __call__; and more!&lt;/p&gt;
&lt;p&gt;Slides can be found at: &lt;a class="reference external" href="https://speakerdeck.com/pycon2016"&gt;https://speakerdeck.com/pycon2016&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/PyCon/2016-slides"&gt;https://github.com/PyCon/2016-slides&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Brett Slatkin</dc:creator><pubDate>Thu, 09 Jun 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-06-09:/pycon-us-2016/brett-slatkin-refactoring-python-why-and-how-to-restructure-your-code-pycon-2016.html</guid><category>PyCon US 2016</category></item><item><title>The Zen of Polymorphism: Choosing between isinstance(), methods, and @singledispatch</title><link>https://pyvideo.org/pycon-us-2025/the-zen-of-polymorphism-choosing-between-isinstance-methods-and-singledispatch.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python is a multi-paradigm language that embraces both functional programming and object-oriented programming (OOP) approaches to writing code. OOP is especially popular, in large part due to how it enables polymorphism (for example, calling speak() on a Dog object returns &amp;quot;woof&amp;quot;, while a Cat object's method returns &amp;quot;meow&amp;quot;.) However, OOP has many downsides that are often not understood until it's too late in the lifecycle of building a program. Fortunately, Python also enables developers to achieve similar behavior to polymorphism while using simple functions and plain data objects instead of classes.&lt;/p&gt;
&lt;p&gt;This talk will detail three different approaches provided by Python to achieve polymorphism behavior in a realistic program. It will compare and contrast their relative strengths and weaknesses. It will show how the most naive approach, which relies on isinstance() checks, leads to severe code duplication. It will show how OOP method polymorphism leads to code being organized along the wrong axis, which hurts understandability, debugging, and maintainability in practice. It will also demonstrate a less commonly known part of the built-in functools library called &amp;#64;singledispatch that strikes a perfect balance between functional and OOP programming styles.&lt;/p&gt;
&lt;p&gt;Finally, you'll learn how &amp;#64;singledispatch works under the covers, and how to build or integrate similar functionality into your own programs so you can realize the benefits of polymorphism while avoiding the pitfalls.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Brett Slatkin</dc:creator><pubDate>Sat, 17 May 2025 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2025-05-17:/pycon-us-2025/the-zen-of-polymorphism-choosing-between-isinstance-methods-and-singledispatch.html</guid><category>PyCon US 2025</category></item></channel></rss>