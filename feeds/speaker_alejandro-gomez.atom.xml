<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_alejandro-gomez.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2016-10-08T00:00:00+00:00</updated><entry><title>QA 4 Python</title><link href="https://pyvideo.org/pycon-es-2016/qa-4-python.html" rel="alternate"></link><published>2016-10-08T00:00:00+00:00</published><updated>2016-10-08T00:00:00+00:00</updated><author><name>Alejandro Gómez</name></author><id>tag:pyvideo.org,2016-10-08:pycon-es-2016/qa-4-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk we will cover how we apply QA in Emergya for Python projects, covering from the inception phase to the delivery phase.&lt;/p&gt;
&lt;p&gt;We will see a showcase of a real python project to learn by examples (code guidelines definition, Continuous Integration system, Continuous Unit and Functional testing, Performance testing and Continuous Delivery.&lt;/p&gt;
&lt;p&gt;We will focus the talk in how a team should manage a Python project from the QA side, showing how a team of developers and QA build a real team.&lt;/p&gt;
&lt;p&gt;Slides available at &lt;a class="reference external" href="https://es.slideshare.net/bedjango/qa-4-python"&gt;https://es.slideshare.net/bedjango/qa-4-python&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://2016.es.pycon.org/"&gt;http://2016.es.pycon.org/&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Gradual Typing in Python</title><link href="https://pyvideo.org/pycon-italia-2015/gradual-typing-in-python.html" rel="alternate"></link><published>2015-05-29T00:00:00+00:00</published><updated>2015-05-29T00:00:00+00:00</updated><author><name>Alejandro Gómez</name></author><id>tag:pyvideo.org,2015-05-29:pycon-italia-2015/gradual-typing-in-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Gradual typing in dynamic languages is becoming popular. The
implementations for Python, Lua, Clojure and Racket show how a dynamic
language can be retrofitted with static type checking. This makes
possible to combine the flexibility of these languages with the
guarantees of a type checker and can be done in a gradual, non-invasive
manner. In this talk we’ll understand what gradual typing is and the
benefits it yields, explore the existing implementations for Python and
talk about Guido’s plans for the usage of function annotations
introduced in Python 3.&lt;/p&gt;
</summary></entry></feed>