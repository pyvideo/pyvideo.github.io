<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org - Tyler Riccio</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Sun, 27 Jul 2025 00:00:00 +0000</lastBuildDate><item><title>Why Python Loops Are "Slow": A Gentle Introduction to Interpretation, Bytecode, and Fast Code</title><link>https://pyvideo.org/pyohio-2025/why-python-loops-are-slow-a-gentle-introduction-to-interpretation-bytecode-and-fast-code.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python loops are &amp;quot;slow&amp;quot;, is a phrase every python programmer has heard.
For better or worse, it is partially true. This talk breaks down how
Python executes code and why that creates overhead, especially in tight
loops. I'll also explore how tools like NumPy, SIMD, and JIT compilation
achieve massive speedups by working with the CPU instead of against it.&lt;/p&gt;
&lt;p&gt;You should walk away from this talk with more insight into why loops are
slow, how python code is executed at a high level, and what you should
do about it if anything.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Tyler Riccio</dc:creator><pubDate>Sun, 27 Jul 2025 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2025-07-27:/pyohio-2025/why-python-loops-are-slow-a-gentle-introduction-to-interpretation-bytecode-and-fast-code.html</guid><category>PyOhio 2025</category></item></channel></rss>