<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org - PyCascades 2022</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Sun, 06 Feb 2022 00:00:00 +0000</lastBuildDate><item><title>Building Elegant API Contracts: From Zero to Hero</title><link>https://pyvideo.org/pycascades-2022/building-elegant-api-contracts-from-zero-to-hero.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Learn how one can write efficient APIs with high-quality API specifications using Open API and RAML specs to create API contracts and achieve a better experience using the API with more reliable unit tests and increased response consistency.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Neeraj Pandey</dc:creator><pubDate>Sun, 06 Feb 2022 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2022-02-06:/pycascades-2022/building-elegant-api-contracts-from-zero-to-hero.html</guid><category>PyCascades 2022</category></item><item><title>Closing Remarks Day 1</title><link>https://pyvideo.org/pycascades-2022/closing-remarks-day-1.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Wrapping up an exciting weekend of talks and activities.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Britt Gresham</dc:creator><pubDate>Sun, 06 Feb 2022 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2022-02-06:/pycascades-2022/closing-remarks-day-1.html</guid><category>PyCascades 2022</category></item><item><title>Closing Remarks Day 2</title><link>https://pyvideo.org/pycascades-2022/closing-remarks-day-2.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A final thank you for all attendees, before sprints begin&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Britt Gresham</dc:creator><pubDate>Sun, 06 Feb 2022 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2022-02-06:/pycascades-2022/closing-remarks-day-2.html</guid><category>PyCascades 2022</category></item><item><title>Council Data Project: Infrastructure-as-code for civic transparency and accessibility</title><link>https://pyvideo.org/pycascades-2022/council-data-project-infrastructure-as-code-for-civic-transparency-and-accessibility.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Council Data Project (CDP) is an open source project that provides tools for making city council transcripts, legislation, and voting records searchable through a single website. This is achieved through a Python-powered Infrastructure-as-code architecture. CDP provides an entire backend and frontend that can be easily deployed for a governing body of any size or location. As long as the deployer provides data for events in a pre-defined yet flexible structure, CDP provides a database, file storage, speech-to-text transcription, and natural language search.&lt;/p&gt;
&lt;p&gt;During this session, we will cover CDP’s backend, primarily focusing on how we created ETL pipelines and an Infrastructure-as-code setup to be as low cost and easily forkable as possible. Because of this, backend-focused developers may get the most out of this talk. Additionally, this session is intended for people of all levels of Python experience. Instead of covering in-depth features or niches of the language itself, we will showcase some neat tools and open-source projects in the Python ecosystem that we use to build our infrastructure!&lt;/p&gt;
&lt;p&gt;And this session is especially for anyone interested in civic tech or generally just making democracy more transparent!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Isaac Na</dc:creator><pubDate>Sun, 06 Feb 2022 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2022-02-06:/pycascades-2022/council-data-project-infrastructure-as-code-for-civic-transparency-and-accessibility.html</guid><category>PyCascades 2022</category></item><item><title>Cyber Security Investigations with Jupyter Notebooks</title><link>https://pyvideo.org/pycascades-2022/cyber-security-investigations-with-jupyter-notebooks.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Jupyter notebooks&lt;/strong&gt; are growing in popularity among CyberSec analysts. For threat hunting and incident investigations, notebooks give you flexibility not found in most &lt;em&gt;Security Operations Center&lt;/em&gt; (SOC) toolsets.&lt;/p&gt;
&lt;p&gt;However, threat hunting requires specialized tools, analytics and visualizations that aren't part of the typical data science libraries. We'll show some of the features of the &lt;strong&gt;MSTICPy&lt;/strong&gt; CyberTools library that we built to address these gaps.&lt;/p&gt;
&lt;p&gt;The focus of the talk will be on Python techniques (incl code examples) that we used to build extensible and discoverable tools for large-scale CyberSec operations. The techniques are applicable to many fields - no previous cybersecurity knowledge is required to watch the talk or use the techniques.&lt;/p&gt;
&lt;p&gt;Overview:
- What's the appeal of notebooks in SOCs? and what is missing?
- Making data querying/acquisition simple - creating dynamic functions from config.
- Data enrichment: getting more context on IP Address, Hosts, etc. - using decorators to create a consistent API.
- Visualizations - quick tour of MSTICPy visualizations using &lt;em&gt;pandas&lt;/em&gt; accessors and &lt;strong&gt;Bokeh&lt;/strong&gt;.
- Composability - assembling multiple operations into a &lt;em&gt;pandas&lt;/em&gt; execution pipeline.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ian Hellen</dc:creator><pubDate>Sun, 06 Feb 2022 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2022-02-06:/pycascades-2022/cyber-security-investigations-with-jupyter-notebooks.html</guid><category>PyCascades 2022</category></item><item><title>Diversity in Neurodiversity: Help for Underrepresented Folks in Tech and Allies with New Mental Heal</title><link>https://pyvideo.org/pycascades-2022/diversity-in-neurodiversity-help-for-underrepresented-folks-in-tech-and-allies-with-new-mental-heal.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Many people from underrepresented backgrounds are being diagnosed for the first time or getting treatment well into their careers.&lt;/p&gt;
&lt;p&gt;This talk aims to be a resource for folks learning to work with their neurodiversities and their colleagues.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jay Miller</dc:creator><pubDate>Sun, 06 Feb 2022 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2022-02-06:/pycascades-2022/diversity-in-neurodiversity-help-for-underrepresented-folks-in-tech-and-allies-with-new-mental-heal.html</guid><category>PyCascades 2022</category></item><item><title>Fifty shades of `sign`</title><link>https://pyvideo.org/pycascades-2022/fifty-shades-of-sign.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;(Rodrigo Girão Serrão) The Zen of Python says &amp;quot;there should be one -- and preferably only one -- obvious way to do it&amp;quot;, but what if there's a dozen obvious ways to do it?&lt;/p&gt;
&lt;p&gt;In this talk we take a look at over a dozen implementations of a &lt;em&gt;very&lt;/em&gt; simple function: the &lt;cite&gt;sign&lt;/cite&gt; function.
The &lt;cite&gt;sign&lt;/cite&gt; function should return -1 for negative numbers, 1 for positive numbers, and 0 if the input is 0. Simple, right?
And it is, but there are multiple implementations that we can look at.&lt;/p&gt;
&lt;p&gt;As we do so, we try to decide which alternative is the best and we even explore a couple of more intricate Python subtleties!
As an example of some of those subtleties, we'll look at Boolean arithmetic, Boolean to integer conversion, and (chained) conditional expressions.&lt;/p&gt;
&lt;p&gt;As we look at different implementations, we try to decide which one is the best. We will do some profiling, but we'll also realise that that's hardly the most important metric to use!&lt;/p&gt;
&lt;p&gt;Which implementation will be the best?&lt;/p&gt;
&lt;p&gt;You can find the talk slides [on GitHub][1] and a written version of the talk [on my blog][2].&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Rodrigo Girão Serrão</dc:creator><pubDate>Sun, 06 Feb 2022 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2022-02-06:/pycascades-2022/fifty-shades-of-sign.html</guid><category>PyCascades 2022</category></item><item><title>How (Not) to Start a Python User Group</title><link>https://pyvideo.org/pycascades-2022/how-not-to-start-a-python-user-group.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Starting a local Python User Group is hard. Keeping it running month after month is even harder. As a Python User Group organizer, I've had my fair share of mess ups.&lt;/p&gt;
&lt;p&gt;In this talk, we'll examine some ways _not_ to run your own Python User Group based on my own experiences as an organizer. By looking back at my own missteps, we'll determine some best practices for getting your own User Group off the ground. By the end of the talk, you'll be well equipped to run your User Group long-term. Come laugh and learn as we journey through my meetup misadventures and prepare you for your own.&lt;/p&gt;
&lt;p&gt;All levels of Python experience are welcome.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Joseph Riddle</dc:creator><pubDate>Sun, 06 Feb 2022 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2022-02-06:/pycascades-2022/how-not-to-start-a-python-user-group.html</guid><category>PyCascades 2022</category></item><item><title>Invisible Walls: Isolating Your Python</title><link>https://pyvideo.org/pycascades-2022/invisible-walls-isolating-your-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Stop building projects that only &amp;quot;work on my machine&amp;quot;, Learn how to isolate your python application by executing in an isolated, reproducible environment that extends beyond the code you write.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jeremiah Paige</dc:creator><pubDate>Sun, 06 Feb 2022 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2022-02-06:/pycascades-2022/invisible-walls-isolating-your-python.html</guid><category>PyCascades 2022</category></item><item><title>Literature Text Translation and Audio Synthesis using AI Services</title><link>https://pyvideo.org/pycascades-2022/literature-text-translation-and-audio-synthesis-using-ai-services.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Ever wanted to read your favourite literature book or poetry but language is a barrier? Worry not! Enjoy the world literature in your preferred language along with audio book with just a click of a button. &amp;quot;Literature Love&amp;quot; uses AI services to translate and generate audio format for literature texts&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Vivek Raja P S</dc:creator><pubDate>Sun, 06 Feb 2022 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2022-02-06:/pycascades-2022/literature-text-translation-and-audio-synthesis-using-ai-services.html</guid><category>PyCascades 2022</category></item><item><title>Meet &amp; Greet with PSF D&amp;I workgroup</title><link>https://pyvideo.org/pycascades-2022/meet-greet-with-psf-di-workgroup.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;(Tereza Iofciu, Marlene Mhangami, Débora Azevedo, Sayantika Banik, Georgi Ker) Python has become one of the most popular programming languages in the world, meaning that along with this growth the Python community has continued to expand, in every continent around the globe. While this growth has been exciting, it has also brought new challenges and opportunities to improve our global community. Through this panel, we would like to address those challenges and understand our community better.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Tereza Iofciu</dc:creator><pubDate>Sun, 06 Feb 2022 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2022-02-06:/pycascades-2022/meet-greet-with-psf-di-workgroup.html</guid><category>PyCascades 2022</category></item><item><title>Opening Remarks Day 2</title><link>https://pyvideo.org/pycascades-2022/opening-remarks-day-2.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A grand welcome to the second day of talks and sprints&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Britt Gresham</dc:creator><pubDate>Sun, 06 Feb 2022 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2022-02-06:/pycascades-2022/opening-remarks-day-2.html</guid><category>PyCascades 2022</category></item><item><title>Programming Your Way up a Skyscraper - Python in the Built World</title><link>https://pyvideo.org/pycascades-2022/programming-your-way-up-a-skyscraper-python-in-the-built-world.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;When I started working on the latest high rise for San Francisco a challenge stood before me: How am I going to do this without losing my mind? Thankfully Python coding came to the rescue. This talk will showcase all the tools built around Python that can make architecture dreams come true!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Tadeh Hakopian</dc:creator><pubDate>Sun, 06 Feb 2022 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2022-02-06:/pycascades-2022/programming-your-way-up-a-skyscraper-python-in-the-built-world.html</guid><category>PyCascades 2022</category></item><item><title>Python’s tale of concurrency</title><link>https://pyvideo.org/pycascades-2022/pythons-tale-of-concurrency.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python is underrated when it comes to concurrency. The main aim of the talk would focus on exploring the general concept of concurrency and how we can utilise those concepts to write Python programs that are more scalable and more efficient in terms of I/0 bound operations. From the threading module and its limitations, to the asyncio module with its async and await keywords. We will look into different types of concurrent programming techniques available in Python though the major focus would be on the asyncio module, exploring best practises and common pitfalls while using asyncio.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Pradhvan Bisht</dc:creator><pubDate>Sun, 06 Feb 2022 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2022-02-06:/pycascades-2022/pythons-tale-of-concurrency.html</guid><category>PyCascades 2022</category></item><item><title>Security considerations in Python Packaging</title><link>https://pyvideo.org/pycascades-2022/security-considerations-in-python-packaging.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Popular programming language index websites (TIOBE index) and developer surveys (Stack Overflow) place Python as one of the fastest-growing programming languages. However, this popularity also puts in the target range of attackers. The attackers perform malicious dependency attacks and use misconfiguration tools to reveal confidential information. Jukka Ruohonen, Kalle Hjerppe, and Kalle Rindell in their research paper “A Large-Scale Security-Oriented Static Analysis of Python Packages in PyPI” claimed that they scanned PyPI for security issues in Python packages and found the presence of at least one security issue in about 46% of the Python packages. In addition, security vulnerabilities can be present in the source code of the package. In this talk, we will address the security issues related to python packaging and possible solutions to make python packages secure.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Gajendra Deshpande</dc:creator><pubDate>Sun, 06 Feb 2022 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2022-02-06:/pycascades-2022/security-considerations-in-python-packaging.html</guid><category>PyCascades 2022</category></item><item><title>Supporting the George Floyd Protests in Portland: Demonstrations, Legal Support, and Django Apps</title><link>https://pyvideo.org/pycascades-2022/supporting-the-george-floyd-protests-in-portland-demonstrations-legal-support-and-django-apps.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Portland’s protests following the murder of George Floyd involved thousands of people. Providing bail and legal support to those arrested at the protests required a massive amount of volunteers, resources, and an incredibly hard-working Django app.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Thursday Bram</dc:creator><pubDate>Sun, 06 Feb 2022 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2022-02-06:/pycascades-2022/supporting-the-george-floyd-protests-in-portland-demonstrations-legal-support-and-django-apps.html</guid><category>PyCascades 2022</category></item><item><title>Tests as Classifiers</title><link>https://pyvideo.org/pycascades-2022/tests-as-classifiers.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The reason to write, and run, tests on the code is to detect bugs before the code is being used by the customer. Too often, this purpose is forgotten when deciding how, and what, to test. What makes a good test? What makes a good test-suite? How can you measure it?&lt;/p&gt;
&lt;p&gt;By modeling tests as a &amp;quot;classifier&amp;quot;, where the label is &amp;quot;buggy&amp;quot; or &amp;quot;not buggy&amp;quot;, the general theory of classification can be applied. The basics of the theory, such as precision, recall, and F-score, will be explored, as well as how it applies to test suites. Specific techniques for measuring test quality, using tools such as mutation testing, tracing, and CI systems, will be presented.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Moshe Zadka</dc:creator><pubDate>Sun, 06 Feb 2022 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2022-02-06:/pycascades-2022/tests-as-classifiers.html</guid><category>PyCascades 2022</category></item><item><title>Welcome to PyCascades 2022</title><link>https://pyvideo.org/pycascades-2022/welcome-to-pycascades-2022.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A huge welcome to everyone leading into our morning talks.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Britt Gresham</dc:creator><pubDate>Sun, 06 Feb 2022 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2022-02-06:/pycascades-2022/welcome-to-pycascades-2022.html</guid><category>PyCascades 2022</category></item></channel></rss>