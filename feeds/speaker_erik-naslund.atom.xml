<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_erik-naslund.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2016-08-01T00:00:00+00:00</updated><entry><title>Building a reasonably popular web application for the first time.</title><link href="https://pyvideo.org/europython-2016/building-a-reasonably-popular-web-application-for-the-first-time.html" rel="alternate"></link><published>2016-08-01T00:00:00+00:00</published><updated>2016-08-01T00:00:00+00:00</updated><author><name>Erik Näslund</name></author><id>tag:pyvideo.org,2016-08-01:europython-2016/building-a-reasonably-popular-web-application-for-the-first-time.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Erik Näslund - Building a reasonably popular web application for the first time.
[EuroPython 2016]
[20 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/building-a-reasonably-popular-web-application-for-the-first-time"&gt;https://ep2016.europython.eu//conference/talks/building-a-reasonably-popular-web-application-for-the-first-time&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;These are the lessons learned when scaling a SaaS web application
which grew much faster than any one us could have ever expected.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Log and monitor from day one.&lt;/li&gt;
&lt;li&gt;Things will fail, be sure you know when they do.&lt;/li&gt;
&lt;li&gt;Choose components which allow language interoperability.&lt;/li&gt;
&lt;li&gt;Horizontally scalable everything.&lt;/li&gt;
&lt;li&gt;Plan for database downtime.&lt;/li&gt;
&lt;li&gt;Have a way to share settings between backend and frontend.&lt;/li&gt;
&lt;li&gt;Have a way to enter maintenance mode.&lt;/li&gt;
&lt;li&gt;And more...&lt;/li&gt;
&lt;/ul&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;My name is Erik Näslund - I’m the co-founder and Head of Engineering at Hotjar.&lt;/p&gt;
&lt;p&gt;I'd love to share the lessons learned when scaling a SaaS web
application which grew much faster than any one us could have ever
expected.&lt;/p&gt;
&lt;p&gt;Words like “big” and “popular” carry very little meaning, so let me
define how big Hotjar is right now using some numbers.&lt;/p&gt;
&lt;p&gt;We onboard about 500 new users on a daily basis.
We process around 250 000 API requests every minute.
Our CDN delivers about 10 TB of data per day.
We have roughly 3 TB of data in our primary data store (PostgreSQL),
another 1 TB in our Elasticsearch cluster, and a LOT more on Amazon
S3.&lt;/p&gt;
&lt;p&gt;These are the key things we wish we knew when we started. They would
have made our life so much easier!&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Log and monitor from day one.&lt;/li&gt;
&lt;li&gt;Have a way to profile your API calls.&lt;/li&gt;
&lt;li&gt;Things will fail, be sure you know when they do.&lt;/li&gt;
&lt;li&gt;Have a way to keep secrets.&lt;/li&gt;
&lt;li&gt;Everything needs a limit (even if it's really big).&lt;/li&gt;
&lt;li&gt;Be wary of hitting data type limits.&lt;/li&gt;
&lt;li&gt;Don't get too attached to a framework.&lt;/li&gt;
&lt;li&gt;Choose components which allow language interoperability.&lt;/li&gt;
&lt;li&gt;Horizontally scalable everything.&lt;/li&gt;
&lt;li&gt;Plan for database downtime.&lt;/li&gt;
&lt;li&gt;Features are a great way to test things out before launching them to the public.&lt;/li&gt;
&lt;li&gt;Have a way to share settings between back end and front end.&lt;/li&gt;
&lt;li&gt;Have a way to enter maintenance mode.&lt;/li&gt;
&lt;li&gt;Require different quality of code for different parts of your application.&lt;/li&gt;
&lt;/ul&gt;
</summary></entry></feed>