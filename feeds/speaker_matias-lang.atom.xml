<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_matias-lang.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2018-11-24T00:00:00+00:00</updated><entry><title>Sobreviviendo al síndrome del segundo sistema con Python</title><link href="https://pyvideo.org/pycon-ar-2018/sobreviviendo-al-sindrome-del-segundo-sistema-con-python.html" rel="alternate"></link><published>2018-11-24T00:00:00+00:00</published><updated>2018-11-24T00:00:00+00:00</updated><author><name>Matias Lang</name></author><id>tag:pyvideo.org,2018-11-24:pycon-ar-2018/sobreviviendo-al-sindrome-del-segundo-sistema-con-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Reescribir una gran parte de un proyecto para saldar una deuda técnica puede ser un trabajo muy cansador y arriesgado, que muchas veces puede terminar en la nada. Vamos a contar los aciertos y errores que experimentamos haciendo un cambio de este tipo en nuestro proyecto de software libre. En particular, cómo nos movimos de una base de datos NoSQL a una SQL, desarrollamos un framework propio para APIs RESTful e hicimos uso intensivo de unit tests.&lt;/p&gt;
&lt;p&gt;Faraday es un proyecto open source que originalmente usaba CouchDB con una gran cantidad de usuarios. A lo largo del tiempo la aplicacion se hizo cada vez mas dificil mantener y CouchDB estaba pronto a deprecar la version que utilizabamos. En esta charla te contamos como encaramos y que herramientas de ingeniería utilizamos para sobrevivir a un viaje que parecia no terminar nunca. Tambien contaremos cuando conviene utilizar una base de datos relacional y cuando una NoSQL. Mostraremos como hicimos una API Rest al estilo DjangoRestful framework usando Flask (codigo en &lt;a class="reference external" href="https://github.com/infobyte/faraday"&gt;https://github.com/infobyte/faraday&lt;/a&gt;).&lt;/p&gt;
</summary></entry></feed>