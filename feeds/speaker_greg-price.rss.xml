<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Sat, 18 Aug 2018 00:00:00 +0000</lastBuildDate><item><title>Clearer Code at Scale - Static Types at Zulip and Dropbox</title><link>https://pyvideo.org/pybay-2018/clearer-code-at-scale-static-types-at-zulip-and-dropbox.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Greg Price</dc:creator><pubDate>Sat, 18 Aug 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-08-18:pybay-2018/clearer-code-at-scale-static-types-at-zulip-and-dropbox.html</guid></item><item><title>Clearer Code at Scale: Static Types at Zulip and Dropbox</title><link>https://pyvideo.org/pycon-us-2018/clearer-code-at-scale-static-types-at-zulip-and-dropbox.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python now offers static types! Companies like Dropbox and Facebook, and open-source projects like Zulip, use static types (with &lt;a class="reference external" href="https://www.python.org/dev/peps/pep-0484/"&gt;PEP 484&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/python/mypy"&gt;mypy&lt;/a&gt;) to make Python more productive and fun to work with — in existing codebases from 40k lines to 4 million, in Python 2 and 3, and while preserving the conciseness and flexibility that make Python a great language in the first place. I’ll describe how.&lt;/p&gt;
&lt;p&gt;Reading and understanding code is a huge part of what we do as software developers. If we make it easier to understand our codebases, we make everyone more productive, help each other write fewer bugs, and lower barriers for new contributors. That's why Python now features optional static types, and why Dropbox, &lt;a class="reference external" href="https://engineering.instagram.com/let-your-code-type-hint-itself-introducing-open-source-monkeytype-a855c7284881"&gt;Facebook&lt;/a&gt;, and &lt;a class="reference external" href="https://blog.zulip.org/2016/10/13/static-types-in-python-oh-mypy/"&gt;Zulip&lt;/a&gt; use them on part or all of their Python code.&lt;/p&gt;
&lt;p&gt;In this talk, I’ll share lessons from Zulip’s and Dropbox’s experience — having led the mypy team at Dropbox and working now on the Zulip core team — for how you can start using static types in your own codebases, large or small. We’ll discuss how to make it a seamless part of your project’s tooling; what order to approach things in; and powerful new tools that make it even easier today to add static types to your Python codebase than ever before.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Greg Price</dc:creator><pubDate>Sun, 13 May 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-05-13:pycon-us-2018/clearer-code-at-scale-static-types-at-zulip-and-dropbox.html</guid></item><item><title>Dec 2016 BayPiggies Talk at LinkedIn: Introducing Type Annotations for Python</title><link>https://pyvideo.org/bay-piggies/dec-2016-baypiggies-talk-at-linkedin-introducing-type-annotations-for-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Speakers: Guido Van Rossum, Greg Price, and David Fisher&lt;/p&gt;
&lt;p&gt;Dropbox has several million lines of production code written in Python 2.7. As a first step towards migrating to Python 3, as well as to generally make our code more navigable, we are annotating our code with type annotations using the PEP 484 standard and type-checking the annotated code with mypy. In this talk we will discuss lessons learned and show how you too can start type-checking your legacy Python 2.7 code, one file at a time. We will also describe some of the many improvements we’ve made to mypy in the process, as well as some other tools that come in handy.&lt;/p&gt;
&lt;p&gt;Mypy is an open-source type-checker for Python. It was originally created by one of the speakers, Jukka Lehtosalo, in support of his PhD thesis, before he joined Dropbox. Mypy supports the PEP 484 standard for gradual typing in Python. It supports Python 3.2 and higher, as well as Python 2.7 (using function signatures in type comments, per a recent update to PEP 484).&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Guido van Rossum</dc:creator><pubDate>Thu, 15 Dec 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-12-15:bay-piggies/dec-2016-baypiggies-talk-at-linkedin-introducing-type-annotations-for-python.html</guid></item></channel></rss>