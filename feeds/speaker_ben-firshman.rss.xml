<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Thu, 09 Sep 2010 00:00:00 +0000</lastBuildDate><item><title>Alternative views</title><link>https://pyvideo.org/djangocon-us-2010/djangocon-2010--alternative-views.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Exploring the power of class-based views, their current status and how
the concepts behind them can be applied to other areas.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;Generic views are quickly outgrown for all but the most simple of
applications. They are often rewritten from scratch just to make small
changes to functionality.&lt;/p&gt;
&lt;p&gt;If you use class-based views, code can be reused by inheriting from more
abstract views. They are provided with many reusable applications, but
all implemented in slightly different ways. It has been suggested a set
of views be supplied with Django to standardise the API.&lt;/p&gt;
&lt;p&gt;I will present some of the advantages and disadvantages of using
class-based views, and how they can help you develop more flexible
applications in less time.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ben Firshman</dc:creator><pubDate>Thu, 09 Sep 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-09-09:djangocon-us-2010/djangocon-2010--alternative-views.html</guid><category>djangocon</category><category>djangocon2010</category><category>views</category></item></channel></rss>