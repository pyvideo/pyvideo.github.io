<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org - Jim Pivarski</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_jim-pivarski.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2022-07-11T00:00:00+00:00</updated><subtitle></subtitle><entry><title>Awkward Array: Manipulating JSON like Data with NumPy like Idioms</title><link href="https://pyvideo.org/scipy-2020/awkward-array-manipulating-json-like-data-with-numpy-like-idioms.html" rel="alternate"></link><published>2020-07-06T00:00:00+00:00</published><updated>2020-07-06T00:00:00+00:00</updated><author><name>Jim Pivarski</name></author><id>tag:pyvideo.org,2020-07-06:/scipy-2020/awkward-array-manipulating-json-like-data-with-numpy-like-idioms.html</id><content type="html"></content><category term="SciPy 2020"></category></entry><entry><title>SciPy Tools Plenary Day 1</title><link href="https://pyvideo.org/scipy-2021/scipy-tools-plenary-day-1.html" rel="alternate"></link><published>2021-07-12T00:00:00+00:00</published><updated>2021-07-12T00:00:00+00:00</updated><author><name>K. Jarrod Millman</name></author><id>tag:pyvideo.org,2021-07-12:/scipy-2021/scipy-tools-plenary-day-1.html</id><content type="html"></content><category term="SciPy 2021"></category></entry><entry><title>Loopy and Unloopy Programming Techniques</title><link href="https://pyvideo.org/scipy-2022/loopy-and-unloopy-programming-techniques.html" rel="alternate"></link><published>2022-07-11T00:00:00+00:00</published><updated>2022-07-11T00:00:00+00:00</updated><author><name>Jim Pivarski</name></author><id>tag:pyvideo.org,2022-07-11:/scipy-2022/loopy-and-unloopy-programming-techniques.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;It's curious that Python is now the leading language for scientific computing, since pure Python code is not fast and slow code × big data = long wait times. However, most number-crunching in Python is performed by optimized, precompiled libraries: Python only directs the computation, steering it toward the user's intent …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;It's curious that Python is now the leading language for scientific computing, since pure Python code is not fast and slow code × big data = long wait times. However, most number-crunching in Python is performed by optimized, precompiled libraries: Python only directs the computation, steering it toward the user's intent. As a consequence, the most basic syntax you might learn in an introductory programming class—&lt;cite&gt;if&lt;/cite&gt;, &lt;cite&gt;for&lt;/cite&gt;, and &lt;cite&gt;while&lt;/cite&gt; loops—is not what you should use when dealing with big data. You should use &amp;quot;&amp;quot;vectorized&amp;quot;&amp;quot; expressions, like slices, broadcasting, and reducers.&lt;/p&gt;
&lt;p&gt;This tutorial is an introduction to vectorized array programming. Python beginners are welcome—unfamiliar syntax will be minimized and explained as necessary—because the focus is on _techniques_, rather than language or library features. It is a guided tour through problems with loopy and unloopy solutions, using NumPy and Awkward Array for concreteness, but the techniques can be adapted to any array-oriented setting, such as GPU programming (demo included).&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/jpivarski-talks/2022-07-11-scipy-loopy-tutorial"&gt;https://github.com/jpivarski-talks/2022-07-11-scipy-loopy-tutorial&lt;/a&gt;&lt;/p&gt;
</content><category term="SciPy 2022"></category></entry></feed>