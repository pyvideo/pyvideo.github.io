<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/event_pycon-ukraine-2018.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2018-04-28T00:00:00+00:00</updated><entry><title>An Introduction to Time Series Forecasting with Python</title><link href="https://pyvideo.org/pycon-ukraine-2018/an-introduction-to-time-series-forecasting-with-python.html" rel="alternate"></link><published>2018-04-28T00:00:00+00:00</published><updated>2018-04-28T00:00:00+00:00</updated><author><name>Andrii Gakhov</name></author><id>tag:pyvideo.org,2018-04-28:pycon-ukraine-2018/an-introduction-to-time-series-forecasting-with-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Time series is an important instrument to model, analyze and predict
data collected over time. In this talk, we learn the basic theoretical
concepts without going deep into mathematical aspects, study different
models, and try them in practice using StatsModels, Prophet,
scikit-learn, and keras.&amp;quot;&lt;/p&gt;
</summary></entry><entry><title>Automating banner generation using Python and the popular graphic editor</title><link href="https://pyvideo.org/pycon-ukraine-2018/automating-banner-generation-using-python-and-the-popular-graphic-editor.html" rel="alternate"></link><published>2018-04-28T00:00:00+00:00</published><updated>2018-04-28T00:00:00+00:00</updated><author><name>Arkadiusz Adamski</name></author><id>tag:pyvideo.org,2018-04-28:pycon-ukraine-2018/automating-banner-generation-using-python-and-the-popular-graphic-editor.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Operating a big e-commerce platform requires to create and update ads,
banners and other marketing materials. Using manual labour can be
inefficient in these circumstances. We managed to automate this process
and to keep native environment for graphic designers, using Python and
its ecosystem.&lt;/p&gt;
</summary></entry><entry><title>Binary data in Python with a bit of C spice on top.</title><link href="https://pyvideo.org/pycon-ukraine-2018/binary-data-in-python-with-a-bit-of-c-spice-on-top.html" rel="alternate"></link><published>2018-04-28T00:00:00+00:00</published><updated>2018-04-28T00:00:00+00:00</updated><author><name>Taras Voinarovskyi</name></author><id>tag:pyvideo.org,2018-04-28:pycon-ukraine-2018/binary-data-in-python-with-a-bit-of-c-spice-on-top.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;You have that annoying C++ client that refuses to send you JSON data no
matter what? Well, not a big problem, as long as we keep the mind calm
and use correct data types, modules, and tricks in Python. We can even
dive a bit deeper into C world ourselves to get the secret spice of
efficiency..&amp;quot;&lt;/p&gt;
</summary></entry><entry><title>From beta to a world-class SaaS</title><link href="https://pyvideo.org/pycon-ukraine-2018/from-beta-to-a-world-class-saas.html" rel="alternate"></link><published>2018-04-28T00:00:00+00:00</published><updated>2018-04-28T00:00:00+00:00</updated><author><name>Ulises Reyes</name></author><id>tag:pyvideo.org,2018-04-28:pycon-ukraine-2018/from-beta-to-a-world-class-saas.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Have you ever taken an application from zero to a Production-grade cloud
with paid customers? In this talk I'll share our story of how we moved
from a beta web app with no users to a world-class SaaS. I'll talk about
our culture, the organizational changes we went through, the tooling we
used, the mistakes we made, the bullets we dodged, our zero-bugs
culture, postmortem process, bugs that caused outages and some other
good stuff. All levels of experience are welcome.&lt;/p&gt;
</summary></entry><entry><title>Goodbye cron, hello Airflow</title><link href="https://pyvideo.org/pycon-ukraine-2018/goodbye-cron-hello-airflow.html" rel="alternate"></link><published>2018-04-28T00:00:00+00:00</published><updated>2018-04-28T00:00:00+00:00</updated><author><name>Yuriy Senko</name></author><id>tag:pyvideo.org,2018-04-28:pycon-ukraine-2018/goodbye-cron-hello-airflow.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk is about our experience with replacing of a legacy ETL system
written in bash, python, and cron with a new system built on top of
Apache Airflow. I want to concentrate on - Airflow typical use cases -
design, implementation, and testing of Airflow pipelines - CI/CD and
Kubernetes deployment&lt;/p&gt;
</summary></entry><entry><title>How to separate frontend from a highload python project with no problems.</title><link href="https://pyvideo.org/pycon-ukraine-2018/how-to-separate-frontend-from-a-highload-python-project-with-no-problems.html" rel="alternate"></link><published>2018-04-28T00:00:00+00:00</published><updated>2018-04-28T00:00:00+00:00</updated><author><name>Oleksandr Tarasenko</name></author><id>tag:pyvideo.org,2018-04-28:pycon-ukraine-2018/how-to-separate-frontend-from-a-highload-python-project-with-no-problems.html</id><summary type="html"></summary></entry><entry><title>Load distribution in heterogeneous microservice environments</title><link href="https://pyvideo.org/pycon-ukraine-2018/load-distribution-in-heterogeneous-microservice-environments.html" rel="alternate"></link><published>2018-04-28T00:00:00+00:00</published><updated>2018-04-28T00:00:00+00:00</updated><author><name>Roman Prykhodchenko</name></author><id>tag:pyvideo.org,2018-04-28:pycon-ukraine-2018/load-distribution-in-heterogeneous-microservice-environments.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Proper load distribution is one of the keys to ensure smooth, safe and
cost- effective operation. However, heterogeneous environments turn this
easy at first sight task into a challenge that becomes more complicated
in cases of microservice architectures. There is a way to solve it with
asyncio.&lt;/p&gt;
</summary></entry><entry><title>mypy: static types in Python</title><link href="https://pyvideo.org/pycon-ukraine-2018/mypy-static-types-in-python.html" rel="alternate"></link><published>2018-04-28T00:00:00+00:00</published><updated>2018-04-28T00:00:00+00:00</updated><author><name>Ivan Levkivskyi</name></author><id>tag:pyvideo.org,2018-04-28:pycon-ukraine-2018/mypy-static-types-in-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Large Python code bases can be hard to maintain. Static types is one of
remedies that can improve readability, stability, and maintainability in
such situations. I will discuss how to use this tool efficiently and
without problems.&lt;/p&gt;
</summary></entry><entry><title>Nim for Python Programmers</title><link href="https://pyvideo.org/pycon-ukraine-2018/nim-for-python-programmers.html" rel="alternate"></link><published>2018-04-28T00:00:00+00:00</published><updated>2018-04-28T00:00:00+00:00</updated><author><name>Abhishek Kapatkar</name></author><id>tag:pyvideo.org,2018-04-28:pycon-ukraine-2018/nim-for-python-programmers.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Ever wondered if there existed a language as expressive as Python and as
efficient as C/C++? Look no further then. Nim is a statically typed,
compiled language with a focus on efficiency. It is versatile and
borrows much of its constructs and standard library design from Python
&lt;a class="reference external" href="https://nim-lang.org"&gt;https://nim-lang.org&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Peer to peer file synchronization for your apps</title><link href="https://pyvideo.org/pycon-ukraine-2018/peer-to-peer-file-synchronization-for-your-apps.html" rel="alternate"></link><published>2018-04-28T00:00:00+00:00</published><updated>2018-04-28T00:00:00+00:00</updated><author><name>Paul Colomiets</name></author><id>tag:pyvideo.org,2018-04-28:pycon-ukraine-2018/peer-to-peer-file-synchronization-for-your-apps.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Everybody knows there are three data tiers: source code, database, and
cache. In this talk, I’m going to introduce a fourth data tier in
between a database and source code. I.e. it’s cheap to read and always
available like source code but can contain dynamic data, like a
database.&lt;/p&gt;
</summary></entry><entry><title>Practical cases of using NLP.</title><link href="https://pyvideo.org/pycon-ukraine-2018/practical-cases-of-using-nlp.html" rel="alternate"></link><published>2018-04-28T00:00:00+00:00</published><updated>2018-04-28T00:00:00+00:00</updated><author><name>Dmitry Chaplinsky</name></author><id>tag:pyvideo.org,2018-04-28:pycon-ukraine-2018/practical-cases-of-using-nlp.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A couple of practical and very Ukranian cases of using modern buzzwords
in real life + small postscriptum to inspire (or not).&lt;/p&gt;
</summary></entry><entry><title>Property-based tests: why I was so wrong about testing</title><link href="https://pyvideo.org/pycon-ukraine-2018/property-based-tests-why-i-was-so-wrong-about-testing.html" rel="alternate"></link><published>2018-04-28T00:00:00+00:00</published><updated>2018-04-28T00:00:00+00:00</updated><author><name>Max Klymyshyn</name></author><id>tag:pyvideo.org,2018-04-28:pycon-ukraine-2018/property-based-tests-why-i-was-so-wrong-about-testing.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Unit-tests, TDD, BDD just a subset of property-based testing approach
and how property-based testing will make our software more correct and
stable.&lt;/p&gt;
</summary></entry><entry><title>Python Blockchain development</title><link href="https://pyvideo.org/pycon-ukraine-2018/python-blockchain-development.html" rel="alternate"></link><published>2018-04-28T00:00:00+00:00</published><updated>2018-04-28T00:00:00+00:00</updated><author><name>Mikhail Kashkin</name></author><id>tag:pyvideo.org,2018-04-28:pycon-ukraine-2018/python-blockchain-development.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk, I want to show that Python is a first class citizen in the
world of blockchains. What basic concepts you need to know to make your
own first smart contract in Etherium blockchain. And maybe, will show
how to run your own first ICO in full python.&lt;/p&gt;
</summary></entry><entry><title>Python loves your contributions</title><link href="https://pyvideo.org/pycon-ukraine-2018/python-loves-your-contributions.html" rel="alternate"></link><published>2018-04-28T00:00:00+00:00</published><updated>2018-04-28T00:00:00+00:00</updated><author><name>Stéphane Wirtel</name></author><id>tag:pyvideo.org,2018-04-28:pycon-ukraine-2018/python-loves-your-contributions.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;How can I contribute to Python? This is the first question when I
discuss with people and for this question, there is several answers. Of
course, you can contribute by code, or by documentation or with meetups,
but I will show you how you can contribute to Python. This talk is for
you if you wants to contribute to this awesome language, ecosystem
because the community is fun, we come for the Language and we stay for
the Community. So, What Can I Do For Python ?&lt;/p&gt;
</summary></entry><entry><title>The current state and future of asyncio</title><link href="https://pyvideo.org/pycon-ukraine-2018/the-current-state-and-future-of-asyncio.html" rel="alternate"></link><published>2018-04-28T00:00:00+00:00</published><updated>2018-04-28T00:00:00+00:00</updated><author><name>Andrew Svetlov</name></author><id>tag:pyvideo.org,2018-04-28:pycon-ukraine-2018/the-current-state-and-future-of-asyncio.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Asyncio has proved its vitality, the library's popularity grows very
fast. The talk draws out the result of 5 years of working in the area:
the current state of the art of development asyncio-based programs, best
practices and found pitfalls. A secret bonus is disclosing our plans for
future asyncio features and the main evolvement line.&lt;/p&gt;
</summary></entry><entry><title>The hell and the paradise of microservices in a SaaS system.</title><link href="https://pyvideo.org/pycon-ukraine-2018/the-hell-and-the-paradise-of-microservices-in-a-saas-system.html" rel="alternate"></link><published>2018-04-28T00:00:00+00:00</published><updated>2018-04-28T00:00:00+00:00</updated><author><name>Vitaliy Androsenko</name></author><id>tag:pyvideo.org,2018-04-28:pycon-ukraine-2018/the-hell-and-the-paradise-of-microservices-in-a-saas-system.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Comparison between the Monolithic and Microservice architecture. REST vs
RPC and why REST cannot solve all the issues. Comparison between popular
Zato, Pyro, Thrift, gRPC, jsonRPC. Specific problems and its solutions
if there are any. The package of extensions developed for building
jsonRPC microservices.&lt;/p&gt;
</summary></entry><entry><title>Ur/web: web development with one language or what to expect from mypy</title><link href="https://pyvideo.org/pycon-ukraine-2018/urweb-web-development-with-one-language-or-what-to-expect-from-mypy.html" rel="alternate"></link><published>2018-04-28T00:00:00+00:00</published><updated>2018-04-28T00:00:00+00:00</updated><author><name>Vladimir Kirillov</name></author><id>tag:pyvideo.org,2018-04-28:pycon-ukraine-2018/urweb-web-development-with-one-language-or-what-to-expect-from-mypy.html</id><summary type="html"></summary></entry><entry><title>Verification of Concurrent and Distributed Systems</title><link href="https://pyvideo.org/pycon-ukraine-2018/verification-of-concurrent-and-distributed-systems.html" rel="alternate"></link><published>2018-04-28T00:00:00+00:00</published><updated>2018-04-28T00:00:00+00:00</updated><author><name>Nikolay Novik</name></author><id>tag:pyvideo.org,2018-04-28:pycon-ukraine-2018/verification-of-concurrent-and-distributed-systems.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Building correct concurrent or distributed systems is hard and very
challenging task. In my talk I will show how model checking tools can
help to ensure correctness of algorithms used in such systems.&lt;/p&gt;
</summary></entry></feed>