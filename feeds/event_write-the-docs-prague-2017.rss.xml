<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org - Write the Docs Prague 2017</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Tue, 12 Sep 2017 00:00:00 +0000</lastBuildDate><item><title>Lightning Talks Day 2</title><link>https://pyvideo.org/write-the-docs-prague-2017/lightning-talks-day-2.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Various speakers</dc:creator><pubDate>Tue, 12 Sep 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-09-12:/write-the-docs-prague-2017/lightning-talks-day-2.html</guid><category>Write the Docs Prague 2017</category></item><item><title>A content manager's guide to crowdsourcing the docs</title><link>https://pyvideo.org/write-the-docs-prague-2017/a-content-managers-guide-to-crowdsourcing-the-docs.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Crowdsourcing is an increasingly attractive practice that is being used
to develop documentation. When well designed, this approach increases
documentation velocity and reduces bottlenecks. However, there are (at
least) two huge challenges:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Keeping documentation quality high&lt;/li&gt;
&lt;li&gt;Ensuring that content gets developed in line with the products and
services it supports&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;While no doc set will ever be perfect, there is hope for overcoming
these challenges. In this talk, I'll share lessons learned from working
through these challenges at companies of various sizes. We'll walk
through content management best practices, including:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Setting occasional authors up for success&lt;/li&gt;
&lt;li&gt;Building an effective writing toolkit&lt;/li&gt;
&lt;li&gt;Defining content management strategies for globally distributed teams&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Becky Todd</dc:creator><pubDate>Mon, 11 Sep 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-09-11:/write-the-docs-prague-2017/a-content-managers-guide-to-crowdsourcing-the-docs.html</guid><category>Write the Docs Prague 2017</category></item><item><title>An Alien Looking From the Outside In: Main Takeaways After One Year in Documentation</title><link>https://pyvideo.org/write-the-docs-prague-2017/an-alien-looking-from-the-outside-in-main-takeaways-after-one-year-in-documentation.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;For 22+ years, I am working in IT – most of this time in the “business-
related” part of the game. Roughly a year ago, I decided to change
something. Well – still working in IT, and still working in the same
company … But I moved from a Product Marketing role (which I hold for
about 17 years) to R&amp;amp;D, because the documentation team “made me an offer
I couldn’t refuse”.&lt;/p&gt;
&lt;p&gt;Of course I interacted with many of our engineers before, and of course
I also knew most of the documentation team members before. But in
retrospective, I can say that I somehow lived on “another planet”
before, and that my first year as documentarian in an open source
software company was definitely deeply eye-opening for me.&lt;/p&gt;
&lt;p&gt;If you are curious now, join the talk and hear more about my main
takeaways regarding documentation in general and the experiences with my
team in particular.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Meike Chabowski</dc:creator><pubDate>Mon, 11 Sep 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-09-11:/write-the-docs-prague-2017/an-alien-looking-from-the-outside-in-main-takeaways-after-one-year-in-documentation.html</guid><category>Write the Docs Prague 2017</category></item><item><title>Aw Snap! The Docs, They Are A-Changin’ (with apologies to Bob Dylan)</title><link>https://pyvideo.org/write-the-docs-prague-2017/aw-snap-the-docs-they-are-a-changin-with-apologies-to-bob-dylan.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This presentation explores the evolution of language in technical
documentation.&lt;/p&gt;
&lt;p&gt;The reign of the long-form narrative in tech docs is long gone. Nobody
wants to read a 600 page user manual cover to cover before using an
application or API. Users crave bite-size chunks of information, and
they want them exactly at the point of need. They want just enough
information to complete their task and not one conjunction more. In
other words, users want high-calorie nutrient-dense documentation, and
they want it fast.&lt;/p&gt;
&lt;p&gt;To satisfy users, we documentarians embrace minimalism and topic-based
architectures such as DITA. We organize content by type: task, concept,
reference, etc. We use active voice. We keep sentences short. And
consciously or not, we’ve begun to challenge time-honored tech writing
traditions, such as prohibitions on future tense, contractions, idioms,
and colloquialisms – at least in American English documentation.&lt;/p&gt;
&lt;p&gt;What’s more, it’s no longer enough for docs to be technically accurate.
They must also use contemporary themes familiar to users and, whenever
possible, humor. Exhibit one is this Google Chrome error:&lt;/p&gt;
&lt;p&gt;“Aw Snap! Something went wrong while displaying this webpage.”&lt;/p&gt;
&lt;p&gt;And the folks at ReadMe.io used this line to describe a Delete button in
their interface (from the 2007 film, Juno):&lt;/p&gt;
&lt;p&gt;“This is one doodle that can’t be undid, homeskillet.”&lt;/p&gt;
&lt;p&gt;Without question, the language we use in technical documentation is
changing. Contractions, idioms, and colloquialisms, which were once
banned as potentially confusing to translators, are now commonplace, and
we use them to make our docs sound friendlier. Jargon abounds, the word
“please” is no longer taboo, and exclamation points are not only
allowed, they’re encouraged! They show enthusiasm for the subject!!&lt;/p&gt;
&lt;p&gt;In this presentation, we’ll mine the docosphere for current trends,
innovations, and answers to these questions: • How has the language in
tech docs evolved over the past decade, and where is it headed? • What
are the minimum daily requirements for language in this brave new world:
Correct grammar, complete sentences, parallel construction, proper word
choice, clarity, brevity? • What is the role of humor in tech docs? • Is
it OK for tech docs to use colloquialisms, idioms, contractions, and
even emojis? • What are the implications of this evolution on
localization?&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kate Wilcox</dc:creator><pubDate>Mon, 11 Sep 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-09-11:/write-the-docs-prague-2017/aw-snap-the-docs-they-are-a-changin-with-apologies-to-bob-dylan.html</guid><category>Write the Docs Prague 2017</category></item><item><title>Deprecate and destroy: documenting your software’s last days</title><link>https://pyvideo.org/write-the-docs-prague-2017/deprecate-and-destroy-documenting-your-softwares-last-days.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;It could happen to you: your project is canceled, your team is
“reorganized”, or your company is closing its doors. Some or all of your
software, service, or API may not be long for this world. What will you
say to the people using your software? In this talk, you’ll learn how to
avoid a communications disaster when it’s time to break bad news to your
users.&lt;/p&gt;
&lt;p&gt;Whether you’re deprecating significant features or shutting down
entirely, you still have a chance to make life better—or at least a
little less worse—for the people who have come to rely on your work. In
this talk, you’ll learn how to:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;plan your shutdown communications to make sure no users get left
behind&lt;/li&gt;
&lt;li&gt;let your users down easy with the appropriate voice, tone, and
content&lt;/li&gt;
&lt;li&gt;cope with a stressful situation&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;From your initial announcement to your service’s last day, you’ll learn
how to say goodbye in a way that’s good for you and your
soon-to-be-former users.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Daniel D. Beck</dc:creator><pubDate>Mon, 11 Sep 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-09-11:/write-the-docs-prague-2017/deprecate-and-destroy-documenting-your-softwares-last-days.html</guid><category>Write the Docs Prague 2017</category></item><item><title>Documentation beyond words</title><link>https://pyvideo.org/write-the-docs-prague-2017/documentation-beyond-words.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this presentation I will explore other ways to communicate concepts
beyond words to show that documentation needn't just be about technical
writing.&lt;/p&gt;
&lt;p&gt;In the first part of the presentation I will briefly cover theories and
principles behind forms of communication and what documentarians can
learn from them. Topics such as:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Portraying meaning in images: Iconography, maps, manuals&lt;/li&gt;
&lt;li&gt;Non-verbal conversation: Body language, ways of speaking&lt;/li&gt;
&lt;li&gt;Fidelity: Sketch notes, simplicity, style&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;During each of these topics I will present in the style of the topic, so
expect something a little different.&lt;/p&gt;
&lt;p&gt;In the second practical part of the presentation I will take elements of
the theory and applying them practically. I will start by looking at
screenshots and diagrams. When and how to use them, what they should
show, and how to manage them.&lt;/p&gt;
&lt;p&gt;Then I'll cover taking screenshots to the next level with animated gifs
and screen recordings that show clear user flows and expected results.&lt;/p&gt;
&lt;p&gt;Finally in this part of the presentation I will cover interactive
documentation, and the options for allowing readers to directly
manipulate and experiment with documentation and directly see inputs and
outputs.&lt;/p&gt;
&lt;p&gt;In summary, our work typically appears on one of the most dynamic
platforms (the web) that has ever existed, let's all do more with it!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Ward</dc:creator><pubDate>Mon, 11 Sep 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-09-11:/write-the-docs-prague-2017/documentation-beyond-words.html</guid><category>Write the Docs Prague 2017</category></item><item><title>Even Naming This Talk Is Hard</title><link>https://pyvideo.org/write-the-docs-prague-2017/even-naming-this-talk-is-hard.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Writers of software and writers of documentation practice a shared art:
we bestow abstractions with names. We know weve succeeded when our names
illuminate concepts, elicit a-ha moments, and empower users to put our
product to work. We know we've failed when the names we've chosen
confuse, frustrate, misguide, or offend.&lt;/p&gt;
&lt;p&gt;Naming things well matters. Too often, though, good names are hard to
come by, and bad names are hard to change.&lt;/p&gt;
&lt;p&gt;Using a lengthy and ever-growing list of Terrible, Horrible, No Good,
Very Bad names encountered during my career as an engineer, this talk
will address:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Why is it so hard to name things well in software?&lt;/li&gt;
&lt;li&gt;Why do bad names persist?&lt;/li&gt;
&lt;li&gt;What are some heuristics for assessing how good or bad a name is?&lt;/li&gt;
&lt;li&gt;How has technology hampered efforts to name things well?&lt;/li&gt;
&lt;li&gt;How can technology help our efforts to name things well?&lt;/li&gt;
&lt;li&gt;How can documentarians and developers work together to name things
better?&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ruthie BenDor</dc:creator><pubDate>Mon, 11 Sep 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-09-11:/write-the-docs-prague-2017/even-naming-this-talk-is-hard.html</guid><category>Write the Docs Prague 2017</category></item><item><title>Finally! Trustworthy and Sensible API Documentation with GraphQL</title><link>https://pyvideo.org/write-the-docs-prague-2017/finally-trustworthy-and-sensible-api-documentation-with-graphql.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;GitHub is migrating its public API system from REST to GraphQL. In this
talk, I'd like to go over my personal experiences writing API
documentation for ten years, and why GraphQL's &amp;quot;everything needs
documentation&amp;quot; approach is a much needed improvement. I'd go over past
API tooling and methodologies, current best practices to make &amp;quot;sane&amp;quot;
autogenerated API documentation, and why I think that GraphQL is a boon
for technical writers, developers, and end users.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Garen Torikian</dc:creator><pubDate>Mon, 11 Sep 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-09-11:/write-the-docs-prague-2017/finally-trustworthy-and-sensible-api-documentation-with-graphql.html</guid><category>Write the Docs Prague 2017</category></item><item><title>Hi, my name is README!</title><link>https://pyvideo.org/write-the-docs-prague-2017/hi-my-name-is-readme.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;When starting a new project, developers, myself included, usually get
right into hacking things, like tinkering with libraries, that we would
like to learn or solving a particular problem as quickly a possible.
Occasionally we also decide to publish the resulting project to a
software repository such as PyPI for Python or NPM for Node.js etc., so
that others can use our nifty code, submit a pull request and maybe even
form a community around the project.&lt;/p&gt;
&lt;p&gt;As the creator, you might be lucky and someone will find your project on
the front-page of GitHub or maybe eben Hacker News or Reddit. What
happens next is on you really. But what does that mean?&lt;/p&gt;
&lt;p&gt;Before jumping right to the command line and installing your package,
those who are interested usually try to find out what problems the
project is solving and how it can help them with their own. That's what
your README file is for - it's most likely the first thing potential
users read, that you control.&lt;/p&gt;
&lt;p&gt;A good README briefly and concisely explains what your software does,
how it can be installed and what API it exposes. You also want to
provide information on the requirements, the license it uses and how the
project is managed. Who are you? How to get in touch to report problems
and give feedback? Where can potential users find the Code of Conduct
for your project?&lt;/p&gt;
&lt;p&gt;This talk is for everyone who is interested in working on open source
projects and wants to know how documentation can help newcomers and more
experienced users use your code and to encourage them to engage in the
community.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Raphael Pierzina</dc:creator><pubDate>Mon, 11 Sep 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-09-11:/write-the-docs-prague-2017/hi-my-name-is-readme.html</guid><category>Write the Docs Prague 2017</category></item><item><title>Lightning Talks Day 1</title><link>https://pyvideo.org/write-the-docs-prague-2017/lightning-talks-day-1.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Various speakers</dc:creator><pubDate>Mon, 11 Sep 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-09-11:/write-the-docs-prague-2017/lightning-talks-day-1.html</guid><category>Write the Docs Prague 2017</category></item><item><title>Requirements that you didn't know were there</title><link>https://pyvideo.org/write-the-docs-prague-2017/requirements-that-you-didnt-know-were-there.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Any doc - every doc - that you deliver, it's only as useful as the
requirements it satisfies. Typical requirements revolve around target
audience, method of delivery, technical limitations. But after the doc
is done, then come unexpected expectations.&lt;/p&gt;
&lt;p&gt;Suddenly, your docs should not only make users happy, but also help your
stakeholders achieve their aims - move up a career ladder, impress the
boss, get a bigger paycheck.&lt;/p&gt;
&lt;p&gt;The success of your docs depends on things you are never told. This talk
is about reading your stakeholders and deducing the ultimate
requirements.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lesia Zasadna</dc:creator><pubDate>Mon, 11 Sep 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-09-11:/write-the-docs-prague-2017/requirements-that-you-didnt-know-were-there.html</guid><category>Write the Docs Prague 2017</category></item><item><title>Sticks &amp; Stones... Microaggressions &amp; Inclusive Language at Work</title><link>https://pyvideo.org/write-the-docs-prague-2017/sticks-stones-microaggressions-inclusive-language-at-work.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;You've heard about diversity problems in tech, right? We know the
problem exists at every point in the process: education, internship
opportunities, hiring. We don't talk much about what happens to the
people we &lt;em&gt;do&lt;/em&gt; work with.&lt;/p&gt;
&lt;p&gt;As documentarians, we spend a lot of time thinking about the best words
to use for our products, tutorials, manuals. We know that words matter.
&amp;quot;Microaggressions&amp;quot; are the small indignities that people of color,
non-cis- gendered folks, women, and others experience on a daily basis.
Microaggressions at work tell us, over and over, that we don't really
belong in that workplace. So let's talk about the words we use with our
coworkers. Let's talk about how we can all make diversity a daily
practice at work, not just a hiring problem.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Cory Williamson-Cardneau</dc:creator><pubDate>Mon, 11 Sep 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-09-11:/write-the-docs-prague-2017/sticks-stones-microaggressions-inclusive-language-at-work.html</guid><category>Write the Docs Prague 2017</category></item><item><title>Tech Writers Without Borders: Making the world a better place, one (numbered) step at a time</title><link>https://pyvideo.org/write-the-docs-prague-2017/tech-writers-without-borders-making-the-world-a-better-place-one-numbered-step-at-a-time.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Created in 2016, Tech Writers Without Borders aims to connect technical
communicators with nonprofits seeking help with their documentation and
training materials.&lt;/p&gt;
&lt;p&gt;Using examples from our work with iNERDE, a social enterprise seeking to
empower West African youth with Science, Technology, Engineering and
Math education, I will describe the many ways in which technical
communicators can make a real difference to the operational
effectiveness of nonprofits and the lives of those they serve.&lt;/p&gt;
&lt;p&gt;If you, too, are interested in volunteering your skills for social
impact, this session will hopefully inspire you to action, or, at the
very least encourage you to view the value of your craft in a new light.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Stuart Culshaw</dc:creator><pubDate>Mon, 11 Sep 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-09-11:/write-the-docs-prague-2017/tech-writers-without-borders-making-the-world-a-better-place-one-numbered-step-at-a-time.html</guid><category>Write the Docs Prague 2017</category></item><item><title>Telling a Great Story on GitHub</title><link>https://pyvideo.org/write-the-docs-prague-2017/telling-a-great-story-on-github.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;As a former journalist, I tend to think in terms of storytelling. As an
open source evangelist, I invite you to do the same. What you share on
GitHub tells a story about you, your development practices, and your
openness to others in the open source community. If you're motivated to
gain users, contributors, and positive feedback about your projects,
then building a compelling, coherent narrative is essential.&lt;/p&gt;
&lt;p&gt;In this presentation, I'll share insights gained from curating Zalando's
GitHub repository so we can tell a better story. I'll describe how we've
used GitHub and other tools to create guidelines and processes that
bring sanity to our storytelling. And I'll talk about how focusing on
higher-quality docs has helped us to instill a stronger product mindset
in our development teams. Writing a README, for example, offers an
opportunity to tell the world why a project exists, how it works (and
why), what makes it unique, and how it might evolve over time. I'll
discuss how this process not only empowers developers, but also those of
us who are technical writers and storytellers—offering several real-life
examples to (hopefully) inspire you.&lt;/p&gt;
&lt;p&gt;From 400+ projects of widely differing quality, reliability and
maintenance levels, we've winnowed our OSS offerings at Zalando to make
our highest- quality work more discoverable and user-friendly. If your
organization is facing GitHub-bloat challenges, looking for ways to
manage your repos more effectively, or wondering how better docs can
help your OSS efforts succeed, you might find some help here.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lauri Apple</dc:creator><pubDate>Mon, 11 Sep 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-09-11:/write-the-docs-prague-2017/telling-a-great-story-on-github.html</guid><category>Write the Docs Prague 2017</category></item><item><title>The four kinds of documentation, and why you need to understand what they are</title><link>https://pyvideo.org/write-the-docs-prague-2017/the-four-kinds-of-documentation-and-why-you-need-to-understand-what-they-are.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Nearly everyone agrees that good documentation is important to the
success of software projects, and yet very few projects actually have
good documentation. Even successful projects often have barely adequate
documentation.&lt;/p&gt;
&lt;p&gt;Often, it’s not for want of effort - the project’s developers have
worked hard on it - nor for lack of documentation - the authors have
produced a lot of it.&lt;/p&gt;
&lt;p&gt;It simply turns out to be not very good - not helpful enough for the
users who should be able to rely on it, and a depressing chore for the
authors who have to maintain it.&lt;/p&gt;
&lt;p&gt;The good news is that both these problems can be solved by understanding
how documentation works, and that there are four distinct kinds of
documentation - with four distinct functions. The four kinds of
documentation are:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;learning-oriented tutorials&lt;/li&gt;
&lt;li&gt;goal-oriented how-to guides&lt;/li&gt;
&lt;li&gt;understanding-oriented discussions&lt;/li&gt;
&lt;li&gt;information-oriented reference material&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Structuring documentation according to its four distinct functions helps
ensure that each of them is adequately served. It also makes it far
easier to write and maintain.&lt;/p&gt;
&lt;p&gt;Using real-life examples I’ll draw out the key functions of
documentation, and how they map onto different ways of writing it.
Putting this into practice is simple when armed with some basic
guidelines. The benefits are huge, and available with a minimum of
effort.&lt;/p&gt;
&lt;p&gt;I won’t be discussing documentation tools or software or other topics
that have been covered amply elsewhere, but some neglected and
poorly-understood aspects of documentation that will make your software
projects and teams more successful.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Daniele Procida</dc:creator><pubDate>Mon, 11 Sep 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-09-11:/write-the-docs-prague-2017/the-four-kinds-of-documentation-and-why-you-need-to-understand-what-they-are.html</guid><category>Write the Docs Prague 2017</category></item><item><title>Writing a book in 2017</title><link>https://pyvideo.org/write-the-docs-prague-2017/writing-a-book-in-2017.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The usual way of writing a technical book is to open the Word or
LibreOffice application, to write some content, to make a backup, to
send it by email to the publisher and to deal with the feedbacks. And
repeat.&lt;/p&gt;
&lt;p&gt;However in 2017 we can do differently by using open formats like
Asciidoc, by using version control to propagate changes, by using
collaborative platforms like GitHub or GitLab to collate feedbacks in
any form as well as transforming text and code into readable and
interactive artefacts.&lt;/p&gt;
&lt;p&gt;It gives us a unique opportunity to approach the whole process of
writing in term of &amp;quot;content experience&amp;quot;, of &amp;quot;toolchain&amp;quot; and of
&amp;quot;distribution&amp;quot;.&lt;/p&gt;
&lt;p&gt;In the end, a &amp;quot;book&amp;quot; becomes a &amp;quot;writing format&amp;quot; as we can reuse the same
pattern to manage any kind of &amp;quot;content&amp;quot; — articles, publications,
essays, documentation — that we can transform in physical books,
e-books, interactive web pages etc.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Thomas Parisot</dc:creator><pubDate>Mon, 11 Sep 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-09-11:/write-the-docs-prague-2017/writing-a-book-in-2017.html</guid><category>Write the Docs Prague 2017</category></item><item><title>You have already succeeded: Design critique guidelines make feedback easier 2.0</title><link>https://pyvideo.org/write-the-docs-prague-2017/you-have-already-succeeded-design-critique-guidelines-make-feedback-easier-20.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Getting feedback on your work is a necessary part of any project, and it
makes your output stronger and more diverse. But it can be hard when
your work is being evaluated. Sometimes, it feels like your reviewers
have a deep and abiding interest in pain. You’ll never succeed! Well,
you have already succeeded just by asking for feedback. Together, we’ll
discuss how to build up your tolerance for taking that feedback.&lt;/p&gt;
&lt;p&gt;Feedback became so much easier for me when I learned design critique
guidelines from a co-worker and UX Designer. Design critique guidelines
are a set of rules and practices that can make getting and giving
feedback easier. After presenting this speech at the Write the Docs
Portland 2017 conference, I received a ton of great feedback on it. Now,
I have even more strategies to share so that you can implement design
critique guidelines into your own review process to make feedback
painless.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Christy Lutz</dc:creator><pubDate>Mon, 11 Sep 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-09-11:/write-the-docs-prague-2017/you-have-already-succeeded-design-critique-guidelines-make-feedback-easier-20.html</guid><category>Write the Docs Prague 2017</category></item><item><title>"You never get a second chance to make a first impression": writing great "getting started" documentation</title><link>https://pyvideo.org/write-the-docs-prague-2017/you-never-get-a-second-chance-to-make-a-first-impression-writing-great-getting-started-documentation.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;As the old saying goes, “you never get a second chance to make a first
impression”. When you first meet someone new (not least at a conference
for documentarians!), those first few moments set the tone. In exactly
the same way, the experience your user has when they first “meet” your
product and get to grips with it will set the tone for your entire
relationship with them.&lt;/p&gt;
&lt;p&gt;As documentarians, we so often focus on building detailed and exhaustive
“reference” documentation, but in doing that, we forget to provide the
right kind of “getting started” experience for a user brand new to our
product.&lt;/p&gt;
&lt;p&gt;At GoCardless, we spent the first years of the life of our platform
focused on building high-quality reference documentation. But in Summer
2016, we kicked off a big piece of work on a new set of resources: a
“getting started” guide for our API, getting the user from
nought-to-sixty on our developer platform.&lt;/p&gt;
&lt;p&gt;To make the right first impression, we had to turn things on their head
and think from the reader’s perspective. From this perspective, what
we’ll write and build looks very different to our “reference”
documentation, seeking not only to teach the user how to use our
product, but also to explain the fundamental concepts behind it and to
bring the user to the all-important “aha!” moment where they see the
value in what we’re offering.&lt;/p&gt;
&lt;p&gt;In this talk, I’ll go through:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;the fundamental differences between “reference” and “getting started”
documentation&lt;/li&gt;
&lt;li&gt;the lessons we learnt on the way as we experimented and spent
extensive time with end users&lt;/li&gt;
&lt;li&gt;what we built&lt;/li&gt;
&lt;li&gt;the results — from our users’ perspective, and in terms of how we
build demand within the company for further “getting started” content&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Tim Rogers</dc:creator><pubDate>Mon, 11 Sep 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-09-11:/write-the-docs-prague-2017/you-never-get-a-second-chance-to-make-a-first-impression-writing-great-getting-started-documentation.html</guid><category>Write the Docs Prague 2017</category></item></channel></rss>