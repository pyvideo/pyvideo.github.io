<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Tue, 20 Sep 2016 00:00:00 +0000</lastBuildDate><item><title>Wrestling Python into LLVM Intermediate Representation</title><link>https://pyvideo.org/pycon-israel-2016/wrestling-python-into-llvm-intermediate-representation.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;What is LLVM-IR? The LLVM Compiler Infrastructure Project provides a transportable intermediate representation (LLVM-IR) that can be compiled and linked into multiple types of assembly code. LLVM-IR is great because you can take any language and distill it into a form that can be run on many different machines. Once the code gets into IR it doesn’t matter what platform it was originally written on, and it doesn’t matter that Python can be slow. It doesn’t matter if you have weird CPUs - if they are supported by LLVM it will run. What is Tupleware? TupleWare is an analytical framework built at Brown University that allows users to compile functions into distributed programs that are automatically deployed. TupleWare is unique because it uses LLVM-IR to be language and platform independent. What is PyLLVM? This is the heart of the talk. PyLLVM is a simple, easy to extend, one-pass static compiler that takes in the subset of Python most likely to be used by Tupleware. PyLLVM is based on an existing project called py2llvm (&lt;a class="reference external" href="https://code.google.com/archive/p/py2llvm"&gt;https://code.google.com/archive/p/py2llvm&lt;/a&gt;) that was abandoned around 2011. This talk will go through some basic compiler design and talk about how some LLVM-IR features make our lives easier, and some much harder. It will cover types, scoping, memory management, and other implementation details. To conclude, it will compare PyLLVM to Numba, a Python-to-LLVM compiler from Continuum Analytics and touch on what the future has in store for PyLLVM. Talk Objective Attendees will learn what LLVM-IR is and how it can be leveraged to allow data scientists to write their algorithms in Python. They will leave with a high-level understanding of the design process and considerations of writing a simple compiler. Last, they will know all about how PyLLVM coaxes Python code into LLVM-IR. It will become evident how cool LLVM and Python can be when they work together!&lt;/p&gt;
&lt;p&gt;Slides available here: &lt;a class="reference external" href="http://il.pycon.org/2016/static/sessions/anna-herlihy.pdf"&gt;http://il.pycon.org/2016/static/sessions/anna-herlihy.pdf&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Anna Herlihy</dc:creator><pubDate>Tue, 20 Sep 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-09-20:pycon-israel-2016/wrestling-python-into-llvm-intermediate-representation.html</guid></item><item><title>Wrestling Python into LLVM Intermediate Representation</title><link>https://pyvideo.org/europython-2016/wrestling-python-into-llvm-intermediate-representation.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Anna Herlihy - Wrestling Python into LLVM Intermediate Representation
[EuroPython 2016]
[22 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/wrestling-python-into-llvm-intermediate-representation"&gt;https://ep2016.europython.eu//conference/talks/wrestling-python-into-llvm-intermediate-representation&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;The LLVM Project provides an intermediate representation (LLVM-IR)
that can be compiled on many platforms. LLVM-IR is used by analytical
frameworks to achieve language and platform independence. What if we
could add Python to the long list of languages that can be translated
to LLVM-IR? This talk will go through the steps of wrestling Python
into LLVM-IR with a simple, static one-pass compiler.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;What is LLVM-IR?&lt;/p&gt;
&lt;p&gt;The LLVM Compiler Infrastructure Project provides a transportable
intermediate representation (LLVM-IR) that can be compiled and linked
into multiple types of assembly code. What is great about LLVM-IR is
that you can take any language and distill it into a form that can be
run on many different machines. Once the code gets into IR it doesn’t
matter what platform it was originally written on, and it doesn’t
matter that Python can be slow. It doesn’t matter if you have weird
CPUs - if they’re supported by LLVM it will run.&lt;/p&gt;
&lt;p&gt;What is Tupleware?&lt;/p&gt;
&lt;p&gt;TupleWare is an analytical framework built at Brown University that
allows users to compile functions into distributed programs that are
automatically deployed. TupleWare is unique because it uses LLVM-IR to
be language and platform independent.&lt;/p&gt;
&lt;p&gt;What is PyLLVM?&lt;/p&gt;
&lt;p&gt;This is the heart of the talk. PyLLVM is a simple, easy to extend,
one-pass static compiler that takes in the subset of Python most
likely to be used by Tupleware. PyLLVM is based on an existing project
called py2llvm that was abandoned around 2011.&lt;/p&gt;
&lt;p&gt;This talk will go through some basic compiler design and talk about
how some LLVM-IR features make our lives easier, and some much harder.
It will cover types, scoping, memory management, and other
implementation details. To conclude, it will compare PyLLVM to Numba,
a Python-to-LLVM compiler from Continuum Analytics and touch on what
the future has in store for PyLLVM.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Anna Herlihy</dc:creator><pubDate>Fri, 05 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-05:europython-2016/wrestling-python-into-llvm-intermediate-representation.html</guid></item><item><title>Wrestling Python into LLVM Intermediate Representation</title><link>https://pyvideo.org/pycon-us-2016/anna-herlihy-wrestling-python-into-llvm-intermediate-representation-pycon-2016.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Speaker: Anna Herlihy&lt;/p&gt;
&lt;p&gt;The LLVM Project provides an intermediate representation (LLVM-IR) that can be compiled on many platforms. LLVM-IR is used by analytical frameworks to achieve language and platform independence. What if we could add Python to the long list of languages that can be translated to LLVM-IR? This talk will go through the steps of wrestling Python into LLVM-IR with a simple, static one-pass compiler.&lt;/p&gt;
&lt;p&gt;Slides can be found at: &lt;a class="reference external" href="https://speakerdeck.com/pycon2016"&gt;https://speakerdeck.com/pycon2016&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/PyCon/2016-slides"&gt;https://github.com/PyCon/2016-slides&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Anna Herlihy</dc:creator><pubDate>Tue, 31 May 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-05-31:pycon-us-2016/anna-herlihy-wrestling-python-into-llvm-intermediate-representation-pycon-2016.html</guid></item><item><title>PyLLVM: A compiler from Python to LLVM-IR</title><link>https://pyvideo.org/pygotham-2015/pyllvm-a-compiler-from-python-to-llvm-ir.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The LLVM Compiler Infrastructure Project provides a convenient,
transportable intermediate representation (LLVM-IR) which can be
compiled and linked into multiple types of machine-dependent assembly
code. TupleWare is a new analytical framework built at Brown University
that allows users to compile functions into distributed programs that
are automatically deployed. TupleWare compiles user functions to
LLVM-IR, and C++ code is generated and applied to the data through the
distributed framework. This talk will go through the steps of writing a
comprehensive Python front-end for TupleWare with a focus on the
construction of a compiler from a limited subset of Python to LLVM-IR.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Anna Herlihy</dc:creator><pubDate>Sat, 15 Aug 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-08-15:pygotham-2015/pyllvm-a-compiler-from-python-to-llvm-ir.html</guid></item></channel></rss>