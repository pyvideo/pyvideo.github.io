<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Sun, 28 Jul 2019 12:45:00 +0000</lastBuildDate><item><title>gRPC and What, Why, How?</title><link>https://pyvideo.org/pyohio-2019/grpc-and-what-why-how.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;You might have overheard yet another acronym &amp;quot;gRPC&amp;quot; getting thrown when
talking about a replacement of REST or when mentioning microservices. In
this talk, we will be looking into what gRPC is, the reasons why you
would use it, how you would use it with Python and talk about
considerations for running gRPC services in production.&lt;/p&gt;
&lt;div class="section" id="grpc-and-what-why-how"&gt;
&lt;h4&gt;gRPC and what, why, how?&lt;/h4&gt;
&lt;p&gt;In this talk, we will be covering the following topics:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;What is gRPC?&lt;/strong&gt; We will be talking about serialization and what RPC
is in general. We will quickly skim over the history of previous
similar protocols for example: SOAP and CORBA. We will be talking
about the problem space these protocols tried to resolve and why it
slowly lost popularity.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We will be giving a quick overview of RESTful services and what has been
done so far to support RESTful services.&lt;/p&gt;
&lt;p&gt;We will look into the history of gRPC and how it came to be.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;Why use gRPC?&lt;/strong&gt; With a segway from the first topic we will be
looking into what gRPC is doing differently than the previous
generation RPC solutions and pros/cons against using REST.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;How can we use gRPC with Python?&lt;/strong&gt; Will showcase via live coding(or
code samples for backup) the creation of a 'Hello World' application.
We will write a simple proto file, generate code from it and start it
as a service and query the service using an open source tool. We will
also demonstrate how quick someone might create a client for the gRPC
service.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Production Considerations:&lt;/strong&gt; We will go over the most important
considerations when deciding to use gRPC in production. Such as build
tooling, testing, deployment and load management considerations.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Q &amp;amp;A:&lt;/strong&gt; Time allowing will open the floor to questions that people
might have&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">John Roach</dc:creator><pubDate>Sun, 28 Jul 2019 12:45:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-07-28:pyohio-2019/grpc-and-what-why-how.html</guid></item><item><title>Integration Contract Testing and its potentials for API development and maintenance</title><link>https://pyvideo.org/pyohio-2017/integration-contract-testing-and-its-potentials-for-api-development-and-maintenance.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;You just finished a patch for your API. Your unit tests pass. You have some end to end tests that cover most of the user facing features. You merge in your code and after a smooth deployment, all hell breaks loose. The microservice that the other team was developing doesn't understand what your new patch is sending as a response! What went wrong? This is a quick talk about contract based testing.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">John Roach</dc:creator><pubDate>Sat, 29 Jul 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-07-29:pyohio-2017/integration-contract-testing-and-its-potentials-for-api-development-and-maintenance.html</guid></item></channel></rss>