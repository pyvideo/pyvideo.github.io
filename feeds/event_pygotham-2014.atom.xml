<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/event_pygotham-2014.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2014-10-22T00:00:00+00:00</updated><entry><title>Weather of The Century</title><link href="https://pyvideo.org/pygotham-2014/weather-of-the-century.html" rel="alternate"></link><published>2014-10-22T00:00:00+00:00</published><updated>2014-10-22T00:00:00+00:00</updated><author><name>J. Randall Hunt</name></author><id>tag:pyvideo.org,2014-10-22:pygotham-2014/weather-of-the-century.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The weather is everywhere and always. That makes for a lot of data. This
talk will walk you through how you can use MongoDB to store and analyze
worldwide weather data from the entire 20th century in a graphical
application. You'll learn how to ask and answer questions about capacity
planning and scaling for both real-time and ad-hoc operations when
dealing with huge datasets.&lt;/p&gt;
</summary></entry><entry><title>How To Shut Down Tolkien</title><link href="https://pyvideo.org/pygotham-2014/how-to-shut-down-tolkien.html" rel="alternate"></link><published>2014-10-20T00:00:00+00:00</published><updated>2014-10-20T00:00:00+00:00</updated><author><name>Brandon Rhodes</name></author><id>tag:pyvideo.org,2014-10-20:pygotham-2014/how-to-shut-down-tolkien.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;While Tolkien had friends who could devise ingenious ways to critique
his work without sounding critical, he had others whose remarks were
merciless and direct — to the point that Tolkien simply stopped sharing
new chapters as he wrote The Lord of the Rings. As programmers we share
many of the struggles of writers and artists, and we often react just as
badly to critique of our code. From Tolkien’s experience we will draw
lessons about how to make critique generous instead of damaging, and
actionable instead of personal.&lt;/p&gt;
</summary></entry><entry><title>Architectural evolution in startups</title><link href="https://pyvideo.org/pygotham-2014/architectural-evolution-in-startups.html" rel="alternate"></link><published>2014-09-17T00:00:00+00:00</published><updated>2014-09-17T00:00:00+00:00</updated><author><name>Martin Melin</name></author><id>tag:pyvideo.org,2014-09-17:pygotham-2014/architectural-evolution-in-startups.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Software architecture can be an intimidating topic, and a cause of
pre-launch angst for anyone who has tried building something from
scratch.&lt;/p&gt;
&lt;p&gt;We’ll go through the last three years of technical evolution at Tictail
as an example of where and when to introduce more complexity, along with
some lessons learnt from bad calls over the years.&lt;/p&gt;
</summary></entry><entry><title>*args, **kwargs</title><link href="https://pyvideo.org/pygotham-2014/args-kwargs.html" rel="alternate"></link><published>2014-09-17T00:00:00+00:00</published><updated>2014-09-17T00:00:00+00:00</updated><author><name>Brian Faherty</name></author><id>tag:pyvideo.org,2014-09-17:pygotham-2014/args-kwargs.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;*args and **kwargs are all over my code, but what do they really
mean?&lt;/p&gt;
</summary></entry><entry><title>Customizable and SaaSy REST APIs</title><link href="https://pyvideo.org/pygotham-2014/customizable-and-saasy-rest-apis.html" rel="alternate"></link><published>2014-09-17T00:00:00+00:00</published><updated>2014-09-17T00:00:00+00:00</updated><author><name>Juan Gutierrez</name></author><id>tag:pyvideo.org,2014-09-17:pygotham-2014/customizable-and-saasy-rest-apis.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A solution to keep your code base clean in a SaaS environment that is
predominantly driven by API web services, which has occasion for minor
customization of core web services, based on the needs of your clients.&lt;/p&gt;
</summary></entry><entry><title>Finding your "Teaching Stack": tools for teaching Python from beginners to experts</title><link href="https://pyvideo.org/pygotham-2014/finding-your-teaching-stack-tools-for-teaching.html" rel="alternate"></link><published>2014-09-17T00:00:00+00:00</published><updated>2014-09-17T00:00:00+00:00</updated><author><name>Elliott Hauser</name></author><id>tag:pyvideo.org,2014-09-17:pygotham-2014/finding-your-teaching-stack-tools-for-teaching.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Tools are often a big influence on success or failure teaching Python in
person. The dreaded install and compatibility problems can leave many
students convinced that Python isn't for them. I’ll describe my
zero-install teaching stack: Python's turtle module for beginners,
IPython notebooks for academics, and cloud-based IDE Nitrous for
intermediate and advanced Web development.&lt;/p&gt;
</summary></entry><entry><title>Games with Pygame</title><link href="https://pyvideo.org/pygotham-2014/games-with-pygame.html" rel="alternate"></link><published>2014-09-17T00:00:00+00:00</published><updated>2014-09-17T00:00:00+00:00</updated><author><name>Patrick Thunstrom</name></author><id>tag:pyvideo.org,2014-09-17:pygotham-2014/games-with-pygame.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Follow through three example game projects to learn the most helpful
elements of the PyGame library.&lt;/p&gt;
</summary></entry><entry><title>Getting Rich with Comparison Methods</title><link href="https://pyvideo.org/pygotham-2014/getting-rich-with-comparison-methods.html" rel="alternate"></link><published>2014-09-17T00:00:00+00:00</published><updated>2014-09-17T00:00:00+00:00</updated><author><name>Matt Story</name></author><id>tag:pyvideo.org,2014-09-17:pygotham-2014/getting-rich-with-comparison-methods.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Matt's obsession with Python's rich comparison methods started about 6
years ago with a gnarly bug and some bad assumptions. A few long nights
and a lot of reading later, the docs corrected my assumption:&lt;/p&gt;
&lt;p&gt;There are no implied relationships among the comparison operators. The
truth of x==y does not imply that x!=y is false. Mind == blown and mind
!= blown. In Getting Rich with Comparison Methods we'll start by
learning how to avoid common and costly bugs in your rich comparison
methods, learn a bit about which methods are executed in comparisons and
why, and then go beyond symmetrical comparisons exploring some of the
ways we can take full advantage of asymmetrical comparison methods.&lt;/p&gt;
</summary></entry><entry><title>How I Taught a 10-year-old to Love Python and Programming</title><link href="https://pyvideo.org/pygotham-2014/how-i-taught-a-10-year-old-to-love-python-and-pro.html" rel="alternate"></link><published>2014-09-17T00:00:00+00:00</published><updated>2014-09-17T00:00:00+00:00</updated><author><name>Eric Matzner</name></author><id>tag:pyvideo.org,2014-09-17:pygotham-2014/how-i-taught-a-10-year-old-to-love-python-and-pro.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;After many trails and tribulations, a few months ago I finally got my
10-year-old brother hooked on programming with Python. I posted a brief
snippet on reddit's /r/learnpython about it and the post went over very
well, with many people asking me for more in-depth instructions of and a
sort of curriculum they could use. I have created that material and
would like to expand upon it with this talk.&lt;/p&gt;
</summary></entry><entry><title>How I use Python to Fight human trafficking</title><link href="https://pyvideo.org/pygotham-2014/how-i-use-python-to-fight-human-trafficking.html" rel="alternate"></link><published>2014-09-17T00:00:00+00:00</published><updated>2014-09-17T00:00:00+00:00</updated><author><name>Eric Schles</name></author><id>tag:pyvideo.org,2014-09-17:pygotham-2014/how-i-use-python-to-fight-human-trafficking.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Human trafficking is still a huge issue in the world today. The industry
commands 32 billion dollars in annual revenue a year (source: polaris
project). As a professor and researcher at NYU I am developing tools to
fight this horrible problem. Come learn about the work I've done so far
and where my research is going. I will be showing you how recreate some
of the tools I've made and used in python. I will be covering web
scraping, text processing, and image processing.&lt;/p&gt;
&lt;p&gt;I will be taking folks through a number of web scraping tools that I use
to find instances of human trafficking. We will then go through
classification algorithms I use to determine genuine instances of
trafficking. Finally I will discuss image processing and facial
recognition.&lt;/p&gt;
</summary></entry><entry><title>How to write actually object-oriented python</title><link href="https://pyvideo.org/pygotham-2014/how-to-write-actually-object-oriented-python.html" rel="alternate"></link><published>2014-09-17T00:00:00+00:00</published><updated>2014-09-17T00:00:00+00:00</updated><author><name>Per Fagrell</name></author><id>tag:pyvideo.org,2014-09-17:pygotham-2014/how-to-write-actually-object-oriented-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The multi-paradigm flexibility of Python can bite developers new to
Python or object-orientation, since self-restraint and design know-how
is needed to keep code style paradigm-consistent. Learn about OO
principles like SOLID and Tell-Don't-Ask and how they apply in Python
for more uniform, testable, and working OO code.&lt;/p&gt;
</summary></entry><entry><title>Insight into the anatomy of a huge Python project</title><link href="https://pyvideo.org/pygotham-2014/insight-into-the-anatomy-of-a-huge-python-project.html" rel="alternate"></link><published>2014-09-17T00:00:00+00:00</published><updated>2014-09-17T00:00:00+00:00</updated><author><name>Thomas Hatch</name></author><id>tag:pyvideo.org,2014-09-17:pygotham-2014/insight-into-the-anatomy-of-a-huge-python-project.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk will provide the backstory of Salt, one of the biggest
Python-based projects ever, with a focus on how to successfully create
an enthusiastic community in support of an active and friendly project.&lt;/p&gt;
</summary></entry><entry><title>Lightning Talks</title><link href="https://pyvideo.org/pygotham-2014/lightning-talks-13.html" rel="alternate"></link><published>2014-09-17T00:00:00+00:00</published><updated>2014-09-17T00:00:00+00:00</updated><author><name>Various speakers</name></author><id>tag:pyvideo.org,2014-09-17:pygotham-2014/lightning-talks-13.html</id><summary type="html"></summary><category term="lightning talks"></category></entry><entry><title>Macro Scaling via Microservices</title><link href="https://pyvideo.org/pygotham-2014/macro-scaling-via-microservices.html" rel="alternate"></link><published>2014-09-17T00:00:00+00:00</published><updated>2014-09-17T00:00:00+00:00</updated><author><name>Peter Herndon</name></author><id>tag:pyvideo.org,2014-09-17:pygotham-2014/macro-scaling-via-microservices.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Bitly provides functionality in our API and clients by implementing
microservices, a trendy new word that describes a service-oriented
architecture built using some common-sense guidelines. We use the
Tornado web framework to implement these services, along with a liberal
sprinkling of other languages and tools. I will illustrate our system
architecture, our patterns and best practices for building a service,
and show how to create a scalable application using these techniques.&lt;/p&gt;
</summary></entry><entry><title>Monary: Really fast analysis with MongoDB and NumPyKyle Suarez and Matt Cotter</title><link href="https://pyvideo.org/pygotham-2014/monary-really-fast-analysis-with-mongodb-and-num.html" rel="alternate"></link><published>2014-09-17T00:00:00+00:00</published><updated>2014-09-17T00:00:00+00:00</updated><author><name>Kyle Suarez</name></author><id>tag:pyvideo.org,2014-09-17:pygotham-2014/monary-really-fast-analysis-with-mongodb-and-num.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;NumPy arrays combine the speed of C with the convenience of Python. It
is the fundamental package for scientific and statistical computing in
Python. MongoDB’s scale, speed, and flexibility make it ideal for
storing large amounts of data. However, the official MongoDB driver is
not optimized for loading MongoDB documents into NumPy arrays. Enter
“Monary”, which allows you to easily examine and manipulate data using
NumPy arrays. We will explore how Monary can accelerate your scientific
analysis while providing you with the scale and flexibility of MongoDB
and the ease of Python.&lt;/p&gt;
</summary></entry><entry><title>PyParallel</title><link href="https://pyvideo.org/pygotham-2014/pyparallel.html" rel="alternate"></link><published>2014-09-17T00:00:00+00:00</published><updated>2014-09-17T00:00:00+00:00</updated><author><name>Trent Nelson</name></author><id>tag:pyvideo.org,2014-09-17:pygotham-2014/pyparallel.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The talk will cover that, but also give some real-life performance
examples of where PyParallel shines in comparison to the existing
options (e.g. against asyncio, Twisted, tornado etc). This will
typically be web-server based stuff, as, well you know, that's actually
something that works properly in PyParallel :-)&lt;/p&gt;
</summary></entry><entry><title>Python as uniting programming language across computer graphics packages</title><link href="https://pyvideo.org/pygotham-2014/python-as-uniting-programming-language-across-com.html" rel="alternate"></link><published>2014-09-17T00:00:00+00:00</published><updated>2014-09-17T00:00:00+00:00</updated><author><name>Rainer Schmidt</name></author><id>tag:pyvideo.org,2014-09-17:pygotham-2014/python-as-uniting-programming-language-across-com.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;If you heard about 3D Printing and you are curious about it... Then you
will know how to make things using computer controlled tools and which
software tools to use ,and where Python fits in, after this talk.&lt;/p&gt;
</summary></entry><entry><title>Python for Curious People who Like Natural Language a Lot</title><link href="https://pyvideo.org/pygotham-2014/python-for-curious-people-who-like-natural-langua.html" rel="alternate"></link><published>2014-09-17T00:00:00+00:00</published><updated>2014-09-17T00:00:00+00:00</updated><author><name>Jackie Cohen</name></author><id>tag:pyvideo.org,2014-09-17:pygotham-2014/python-for-curious-people-who-like-natural-langua.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk will be an introductory discussion of why Python is an awesome
programming language for analyzing, and playing with, natural language.
(It’s not the only one, but especially for people just diving in to
using a programming language for language play or research, it’s great.)
Rather than going into details of algorithms, I'm going to give some
simple, easy-to-build-upon examples of how Python and open source Python
packages can be used to quickly dive into some really awesome aspects of
research/investigation in linguistics, and bring them together to
explain, at a high level, why I believe Python is an excellent bridge
between linguists interested in programming, beginning programmers
interested in linguistics, and any curious people who like figuring
stuff out about languages all along a spectrum of formality.&lt;/p&gt;
</summary></entry><entry><title>Python in the Video Game Industry</title><link href="https://pyvideo.org/pygotham-2014/python-in-the-video-game-industry.html" rel="alternate"></link><published>2014-09-17T00:00:00+00:00</published><updated>2014-09-17T00:00:00+00:00</updated><author><name>Steve Lang</name></author><id>tag:pyvideo.org,2014-09-17:pygotham-2014/python-in-the-video-game-industry.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python is used extensively in the video game industry at many levels.
This talk is specifically about how Python based analytics can be
integrated operationally into an organization at two levels: in ad hoc
investigations and in production analytic services. This is about best
practices in documented, reproducible and archived data investigations
as well as production development with Python. A case study of an
analytic service for cheating detection in Call of Duty Ghosts will make
this real and provide some fun. This talk is rated PG-13 for some
awesome video game violence.&lt;/p&gt;
</summary></entry><entry><title>Sparkling Pandas - using Apache Spark to scale Pandas</title><link href="https://pyvideo.org/pygotham-2014/sparkling-pandas-using-apache-spark-to-scale-pa.html" rel="alternate"></link><published>2014-09-17T00:00:00+00:00</published><updated>2014-09-17T00:00:00+00:00</updated><author><name>Holden Karau</name></author><id>tag:pyvideo.org,2014-09-17:pygotham-2014/sparkling-pandas-using-apache-spark-to-scale-pa.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Pandas is a fast and expressive library for data analysis that doesn’t
naturally scale to more data than can fit in memory. PySpark is the
Python API for Apache Spark that is designed to scale to huge amounts of
data but lacks the natural expressiveness of Pandas. We will introduce
Sparkling Pandas, a new library that brings together the best features
of Pandas and PySpark; Expressiveness, speed, and scalability.&lt;/p&gt;
</summary></entry><entry><title>SQLAlchemy and Race Conditions! Implementing `get_one_or_create()`</title><link href="https://pyvideo.org/pygotham-2014/sqlalchemy-and-race-conditions-implementing-get.html" rel="alternate"></link><published>2014-09-17T00:00:00+00:00</published><updated>2014-09-17T00:00:00+00:00</updated><author><name>Erik Taubeneck</name></author><id>tag:pyvideo.org,2014-09-17:pygotham-2014/sqlalchemy-and-race-conditions-implementing-get.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Implementing get_one_or_create() for SQLAlchemy.&lt;/p&gt;
</summary></entry><entry><title>TSAR (the TimeSeries AggregatoR)</title><link href="https://pyvideo.org/pygotham-2014/tsar-the-timeseries-aggregator.html" rel="alternate"></link><published>2014-09-17T00:00:00+00:00</published><updated>2014-09-17T00:00:00+00:00</updated><author><name>Anirudh Todi</name></author><id>tag:pyvideo.org,2014-09-17:pygotham-2014/tsar-the-timeseries-aggregator.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Twitter depends heavily on real-time event aggregation. Classic
timeseries applications include site traffic, service health, and user
engagement monitoring; these are increasingly complemented by a range of
products and features that surface aggregated timeseries data directly
to end users. Services that power such features need to be resilient
enough to ensure a consistent user experience, flexible enough to
accommodate a rapidly changing product roadmap, and able to scale to
tens of billions of events per day.&lt;/p&gt;
&lt;p&gt;Experience has shown that truly robust real-time aggregation services
are hard to build; scaling and evolving them gracefully is even harder;
and, moreover, many timeseries applications call for essentially the
same architecture, with slight variations in the data model. Solving
this broad class of problems at Twitter has been a multiyear effort. In
previous talks we have introduced Summingbird, a high-level abstraction
library for generalized distributed computation, which provides an
elegant descriptive framework for complex aggregation problems. In this
talk, I will describe how we built a flexible, reusable, end-to-end
service architecture on top of Summingbird, called TSAR (the TimeSeries
AggregatoR).&lt;/p&gt;
&lt;p&gt;TSAR uses Python to provide an service toolkit that integrates with
essential services that provide data processing, data warehousing, query
capability, observability, and alerting, automatically configuring and
orchestrating its components.&lt;/p&gt;
</summary></entry><entry><title>Using Python with an Ordered Key-Value Store</title><link href="https://pyvideo.org/pygotham-2014/using-python-with-an-ordered-key-value-store.html" rel="alternate"></link><published>2014-09-17T00:00:00+00:00</published><updated>2014-09-17T00:00:00+00:00</updated><author><name>Stephen Pimentel</name></author><id>tag:pyvideo.org,2014-09-17:pygotham-2014/using-python-with-an-ordered-key-value-store.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk will present an approach to querying data that directly uses
some of Python’s most powerful language features, rather than a separate
query language like SQL. We’ll show how to persist data in an ordered
key-value store and use generators, itertools, and comprehensions to
formulate queries. Examples will given using FoundationDB, which
implements an ordered key-value store on distributed clusters.&lt;/p&gt;
</summary></entry><entry><title>Web Scraping is BS</title><link href="https://pyvideo.org/pygotham-2014/web-scraping-is-bs.html" rel="alternate"></link><published>2014-09-17T00:00:00+00:00</published><updated>2014-09-17T00:00:00+00:00</updated><author><name>John Downs</name></author><id>tag:pyvideo.org,2014-09-17:pygotham-2014/web-scraping-is-bs.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Learn to read unstructured data from web pages and put them into a
useful format&lt;/p&gt;
</summary></entry><entry><title>Building flexible tools to store sums and report on CSV data</title><link href="https://pyvideo.org/pygotham-2014/building-flexible-tools-to-store-sums-and-report.html" rel="alternate"></link><published>2014-09-16T00:00:00+00:00</published><updated>2014-09-16T00:00:00+00:00</updated><author><name>Margery Harrison</name></author><id>tag:pyvideo.org,2014-09-16:pygotham-2014/building-flexible-tools-to-store-sums-and-report.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;If you're new to Python, you might find that you're using Python as if
it were C. This talk will demonstrate how to take advantage of Python's
special data structures to build tools for analyzing and creating
nicely-formatted reports from CSV data. (&amp;quot;CSV&amp;quot; stands for &amp;quot;Comma
Separated Values&amp;quot; although the term describes flat files where the
fields in each row are delimited by commas, or tabs, or pipe characters,
or whatever. )&lt;/p&gt;
</summary></entry><entry><title>Caching up and down the stack in Django</title><link href="https://pyvideo.org/pygotham-2014/caching-up-and-down-the-stack-in-django.html" rel="alternate"></link><published>2014-09-16T00:00:00+00:00</published><updated>2014-09-16T00:00:00+00:00</updated><author><name>James Meickle</name></author><id>tag:pyvideo.org,2014-09-16:pygotham-2014/caching-up-and-down-the-stack-in-django.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Whether you're looking to make your web app run faster or scale better,
one great way to achieve both is to simply do less work. How? By using
caches, the data hidey-holes which generations of engineers have
thoughtfully left at key junctures in computing infrastructure from your
CPU to the backbone of the internet.&lt;/p&gt;
</summary></entry><entry><title>Confidence in the Lasso</title><link href="https://pyvideo.org/pygotham-2014/confidence-in-the-lasso.html" rel="alternate"></link><published>2014-09-16T00:00:00+00:00</published><updated>2014-09-16T00:00:00+00:00</updated><author><name>Jared Lander</name></author><id>tag:pyvideo.org,2014-09-16:pygotham-2014/confidence-in-the-lasso.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The lasso is one of the most significant machine learning algorithms
from the past 15 years. Conceived by Hastie, Tibshirani and Friedman
from Stanford, the lasso performs dimension reduction and variable
selection making it well suited for the high dimensionality of today's
datasets. In this talk we will go over some of the math behind the lasso
and discuss some recent advancements in performing inference on
lasso-fitted models.&lt;/p&gt;
</summary></entry><entry><title>Decorators 101: A Gentle Introduction to Functional Programming</title><link href="https://pyvideo.org/pygotham-2014/decorators-101-a-gentle-introduction-to-function.html" rel="alternate"></link><published>2014-09-16T00:00:00+00:00</published><updated>2014-09-16T00:00:00+00:00</updated><author><name>Jillian Munson</name></author><id>tag:pyvideo.org,2014-09-16:pygotham-2014/decorators-101-a-gentle-introduction-to-function.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&amp;quot;Functions are first-class objects in Python.&amp;quot; This talk will discuss
what we mean by first-class objects and how we can use this language
feature to build more efficient, less redundant code with decorators
without fear.&lt;/p&gt;
</summary></entry><entry><title>Failing With Grace</title><link href="https://pyvideo.org/pygotham-2014/failing-with-grace.html" rel="alternate"></link><published>2014-09-16T00:00:00+00:00</published><updated>2014-09-16T00:00:00+00:00</updated><author><name>Sean O'Connor</name></author><id>tag:pyvideo.org,2014-09-16:pygotham-2014/failing-with-grace.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;One of the biggest challenges of building distributed systems is dealing
with failure. In this talk we'll cover a number of approaches and tools
to help you build systems that deal with failure as gracefully as
possible.&lt;/p&gt;
</summary></entry><entry><title>Intro to SQLAlchemy</title><link href="https://pyvideo.org/pygotham-2014/intro-to-sqlalchemy.html" rel="alternate"></link><published>2014-09-16T00:00:00+00:00</published><updated>2014-09-16T00:00:00+00:00</updated><author><name>Mike Bayer</name></author><id>tag:pyvideo.org,2014-09-16:pygotham-2014/intro-to-sqlalchemy.html</id><summary type="html"></summary></entry><entry><title>Practical Approaches to Problems in the Financial Industry using Python</title><link href="https://pyvideo.org/pygotham-2014/practical-approaches-to-problems-in-the-financial.html" rel="alternate"></link><published>2014-09-16T00:00:00+00:00</published><updated>2014-09-16T00:00:00+00:00</updated><author><name>Andy Fundinger</name></author><id>tag:pyvideo.org,2014-09-16:pygotham-2014/practical-approaches-to-problems-in-the-financial.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this lecture we will show an applied case with Ipython notebook as a
quant explores a typical financial problem with the help of various
Python libraries and software engineering. The specific case is a small
scale market risk platform using historical simulation to calculate
value at risk.&lt;/p&gt;
</summary></entry><entry><title>Pretty Pictures Please</title><link href="https://pyvideo.org/pygotham-2014/pretty-pictures-please.html" rel="alternate"></link><published>2014-09-16T00:00:00+00:00</published><updated>2014-09-16T00:00:00+00:00</updated><author><name>Hannah Aizenmann</name></author><id>tag:pyvideo.org,2014-09-16:pygotham-2014/pretty-pictures-please.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The Python visualization landscape has a couple of really great
libraries for doing data visualization, but most everyone defaults to
always using the same library for all their pictures. This talk will
give an overview of the philosophies underpinning matplotlib, chaco,
bokeh, vispy, vincent, and d3py and discuss what sort of applications
each library is best suited for.&lt;/p&gt;
</summary></entry><entry><title>Python and Julia. Why do we need another language?</title><link href="https://pyvideo.org/pygotham-2014/python-and-julia-why-do-we-need-another-language.html" rel="alternate"></link><published>2014-09-16T00:00:00+00:00</published><updated>2014-09-16T00:00:00+00:00</updated><author><name>Dwight J. Browne</name></author><id>tag:pyvideo.org,2014-09-16:pygotham-2014/python-and-julia-why-do-we-need-another-language.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Integration of Ipython notebook and Julia&lt;/p&gt;
</summary></entry><entry><title>Python Apps and Docker</title><link href="https://pyvideo.org/pygotham-2014/python-apps-and-docker.html" rel="alternate"></link><published>2014-09-16T00:00:00+00:00</published><updated>2014-09-16T00:00:00+00:00</updated><author><name>Matt Wright</name></author><id>tag:pyvideo.org,2014-09-16:pygotham-2014/python-apps-and-docker.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;An overview of why and how one might use Docker for Python applications&lt;/p&gt;
</summary></entry><entry><title>Service Oriented Flask</title><link href="https://pyvideo.org/pygotham-2014/service-oriented-flask.html" rel="alternate"></link><published>2014-09-16T00:00:00+00:00</published><updated>2014-09-16T00:00:00+00:00</updated><author><name>Randall Degges</name></author><id>tag:pyvideo.org,2014-09-16:pygotham-2014/service-oriented-flask.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Building service oriented web apps is a great way to separate concerns,
parallelize development, and scale high traffic apps. One of the
downsides of service oriented web applications, however, is managing the
high overhead of communication between services, and handling the
additional complexities that come along with service driven development.&lt;/p&gt;
&lt;p&gt;In this presentation, Randall Degges, Stormpath Developer Evangelist and
OpenCNAM co-founder, will share all of the best practices he learned
while building OpenCNAM, supporting billions of API requests.&lt;/p&gt;
</summary></entry><entry><title>Setting up your Python development environment in IPython</title><link href="https://pyvideo.org/pygotham-2014/setting-up-your-python-development-environment-in.html" rel="alternate"></link><published>2014-09-16T00:00:00+00:00</published><updated>2014-09-16T00:00:00+00:00</updated><author><name>Daniel Kronovet</name></author><id>tag:pyvideo.org,2014-09-16:pygotham-2014/setting-up-your-python-development-environment-in.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A walkthrough of the process of creating a good development workflow in
Python (with a focus on IPython). This includes organizing the files in
your project (and setting up relative imports through packages and
modules), writing tests with Unittest, and debugging with pdb. This
tutorial will also include a section on the extra features of IPython.&lt;/p&gt;
</summary></entry><entry><title>The Pathetic Fallacy, or, an Engineering Approach to Programming</title><link href="https://pyvideo.org/pygotham-2014/the-pathetic-fallacy-or-an-engineering-approach.html" rel="alternate"></link><published>2014-09-16T00:00:00+00:00</published><updated>2014-09-16T00:00:00+00:00</updated><author><name>James Powell</name></author><id>tag:pyvideo.org,2014-09-16:pygotham-2014/the-pathetic-fallacy-or-an-engineering-approach.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Software programming is a young discipline, placed somewhere between the
rigorous world of mathematics and the pragmatic world of engineering. As
evidence of its immaturity as a discipline, consider how frequently the
same problems arise in the practice of writing a programme, and how
these problems are unaccompanied by widely-disseminated
conceptualisations or a commonly agreed-upon pathology or even a
well-defined guiding philosophy and epistemology. In other words, we
keep running into the same problems, and we often lack even a basis for
discussing them (much less avoiding them)!&lt;/p&gt;
</summary></entry><entry><title>Video, Python and FFmpeg: What you can do!</title><link href="https://pyvideo.org/pygotham-2014/video-python-and-ffmpeg-what-you-can-do.html" rel="alternate"></link><published>2014-09-16T00:00:00+00:00</published><updated>2014-09-16T00:00:00+00:00</updated><author><name>Dean Silfen</name></author><id>tag:pyvideo.org,2014-09-16:pygotham-2014/video-python-and-ffmpeg-what-you-can-do.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;An introduction to the video processing libraries available in Python.&lt;/p&gt;
</summary></entry><entry><title>What Problem Are You Trying to Solve, Anyway?</title><link href="https://pyvideo.org/pygotham-2014/what-problem-are-you-trying-to-solve-anyway.html" rel="alternate"></link><published>2014-09-16T00:00:00+00:00</published><updated>2014-09-16T00:00:00+00:00</updated><author><name>Alfred Lee</name></author><id>tag:pyvideo.org,2014-09-16:pygotham-2014/what-problem-are-you-trying-to-solve-anyway.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;If you're changing careers into programming, or especially data science,
don't be intimidated by the stars and the experts. You may know more
than you think you know.&lt;/p&gt;
</summary></entry><entry><title>Why is Python So Fast?</title><link href="https://pyvideo.org/pygotham-2014/why-is-python-so-fast.html" rel="alternate"></link><published>2014-09-16T00:00:00+00:00</published><updated>2014-09-16T00:00:00+00:00</updated><author><name>Eric Chiang</name></author><id>tag:pyvideo.org,2014-09-16:pygotham-2014/why-is-python-so-fast.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A peek under the hood of all your favorite scientific Python packages.&lt;/p&gt;
</summary></entry><entry><title>Enough Machine Learning to Make Hacker News Readable Again</title><link href="https://pyvideo.org/pygotham-2014/enough-machine-learning-make-hacker-news-readable-.html" rel="alternate"></link><published>2014-08-14T00:00:00+00:00</published><updated>2014-08-14T00:00:00+00:00</updated><author><name>Ned Jackson Lovely</name></author><id>tag:pyvideo.org,2014-08-14:pygotham-2014/enough-machine-learning-make-hacker-news-readable-.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;It's inevitable that online communities will change, and that we'll
remember the community with a fondness that likely doesn't accurately
reflect the former reality. We'll explore how we can take a set of
articles from an online community and winnow out the stuff we feel is
unworthy. We'll explore some of the machine learning tools that are just
a &amp;quot;pip install&amp;quot; away, such as scikit-learn and nltk.&lt;/p&gt;
</summary></entry></feed>