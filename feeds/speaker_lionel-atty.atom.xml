<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_lionel-atty.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2019-11-02T00:00:00+00:00</updated><entry><title>gRPC/Python : Exemple pratique d'utilisation de micro-services pour une (mini) application d'analyse sémantique de textes (NPL)</title><link href="https://pyvideo.org/pycon-fr-2019/grpcpython-exemple-pratique-dutilisation-de-micro-services-pour-une-mini-application-danalyse-semantique-de-textes-npl.html" rel="alternate"></link><published>2019-11-02T00:00:00+00:00</published><updated>2019-11-02T00:00:00+00:00</updated><author><name>Lionel Atty</name></author><id>tag:pyvideo.org,2019-11-02:pycon-fr-2019/grpcpython-exemple-pratique-dutilisation-de-micro-services-pour-une-mini-application-danalyse-semantique-de-textes-npl.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;mots clés: Python gRPC micro-services NPL Spacy packaging architecture Docker&lt;/p&gt;
&lt;p&gt;Après une (courte) présentation du framework Google gRPC (paradigmes, protocoles, API de communications, ...), on s'intéressera à son binding spécifique Python.
On présentera une utilisation (concrète) des outils du framework gRPC (Python) via le développement d'une (mini) application Python.
L'application permet d'analyser des contenus textes (texte associé à des tweets).
Cette analyse (sémantique) s'appuie sur des outils (python) de NPL (Natural Processing Langage).
L'étude (du développement) de cette application nous offre un cadre de (semi)production,
à travers lequel on pourra aborder des considérations de production (ou mise en production) d'applications python.
On s'intéressera particulièrement à des notions d'architecture et (un peu) d'infras:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;propositions de stratégie de packaging/structuration/versionnement de projets python avec micros-services&lt;/li&gt;
&lt;li&gt;tests unitaires: comment tester des micro-services gRPC ? (framework de tests: PyTest)&lt;/li&gt;
&lt;li&gt;docker: outils de dev, containeurs de production, stratégie de releases&lt;/li&gt;
&lt;li&gt;CI/CD: CircleCI, TravisCI&lt;/li&gt;
&lt;/ul&gt;
</summary></entry></feed>