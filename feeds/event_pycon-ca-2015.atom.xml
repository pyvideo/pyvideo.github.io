<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/event_pycon-ca-2015.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2015-11-08T00:00:00+00:00</updated><entry><title>An example of scikit-learn and SciPy used for the analysis of extreme weather</title><link href="https://pyvideo.org/pycon-ca-2015/an-example-of-scikit-learn-and-scipy-used-for-the.html" rel="alternate"></link><published>2015-11-08T00:00:00+00:00</published><updated>2015-11-08T00:00:00+00:00</updated><author><name>Andre R. Erler</name></author><id>tag:pyvideo.org,2015-11-08:pycon-ca-2015/an-example-of-scikit-learn-and-scipy-used-for-the.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;There is considerable interest in the effect of climate change on extreme weather in the scientific community and in the public. However, detecting changes in extreme weather events in the observational record is extremely difficult, because extreme events are by definition rare and the instrumental record is not long enough to establish robust statistics for a single station record.&lt;/p&gt;
&lt;p&gt;In this talk I show how tools from the scientific Python software stack can be used to analyze precipitation (rainfall) data and overcome this problem and detect changes in the observational record.&lt;/p&gt;
&lt;p&gt;The analysis proceeds in two stages: first a k-means clustering algorithm (sklearn.cluster) is used to aggregate data from different stations that have similar climatological characteristics, and then a theoretical distribution function is fitted to the data (scipy.stats).
The first step increases the number of data points to constrain the fit in the second step, assuming all stations in the same cluster have the same underlying distribution. The second step serves to further reduce noise and extrapolate the distribution to the most extreme quantiles.
Finally a statistical test (scipy.stats) can be used to detect changes and asses statistical significance.&lt;/p&gt;
&lt;p&gt;I will introduce the analysis algorithm using historical data from meteorological stations (Environment Canada), but I will also show how this technique can be applied to climate model projections of future climate change.&lt;/p&gt;
&lt;p&gt;The analysis was conducted using the GeoPy analysis package, which is described in a separate talk. The package is available on GitHub: &lt;a class="reference external" href="https://github.com/aerler/GeoPy"&gt;https://github.com/aerler/GeoPy&lt;/a&gt;
An extended abstract submitted to the Climate Informatics workshop in Boulder (September 24-25, 2015; 2 pages) is available here: &lt;a class="reference external" href="http://www.physics.utoronto.ca/~aerler/files/presentations/ci2015.pdf"&gt;http://www.physics.utoronto.ca/~aerler/files/presentations/ci2015.pdf&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Bioacoustics in Python</title><link href="https://pyvideo.org/pycon-ca-2015/bioacoustics-in-python-kent-english.html" rel="alternate"></link><published>2015-11-08T00:00:00+00:00</published><updated>2015-11-08T00:00:00+00:00</updated><author><name>Kent English</name></author><id>tag:pyvideo.org,2015-11-08:pycon-ca-2015/bioacoustics-in-python-kent-english.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Certain species of bark beetle, such as the mountain pine beetle, have a devastating effect on forests across North America. They have been called “the greatest tree killers known” and their economic impact is measured in the billions. Not all bark beetles are destructive, though, and research is currently being done on using their acoustic signals to identify their species.&lt;/p&gt;
&lt;p&gt;Python provides an excellent platform for exploring this costly ecological problem. This talk will look at:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;how libraries such as LibROSA can be used to analyze the audio recordings;&lt;/li&gt;
&lt;li&gt;how numpy, scipy and pandas can be used to extract features;&lt;/li&gt;
&lt;li&gt;and how machine learning algorithms from scikit-learn can then be applied to build a classifier.&lt;/li&gt;
&lt;/ul&gt;
</summary></entry><entry><title>Building a Django app with Viewflow</title><link href="https://pyvideo.org/pycon-ca-2015/building-a-django-app-with-viewflow-martin-hill.html" rel="alternate"></link><published>2015-11-08T00:00:00+00:00</published><updated>2015-11-08T00:00:00+00:00</updated><author><name>Martin Hill</name></author><id>tag:pyvideo.org,2015-11-08:pycon-ca-2015/building-a-django-app-with-viewflow-martin-hill.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Some applications, particularity those used in enterprise, have use cases the involve a workflow. Most web frameworks, Django included, don't address this specific need. Developers can build their own, but an ad-hoc approach can be hard to maintain. I'd like to share our experience solving this challenge using the Viewflow library.&lt;/p&gt;
</summary></entry><entry><title>Closing Ceremonies</title><link href="https://pyvideo.org/pycon-ca-2015/closing-ceremonies-peter-mccormick.html" rel="alternate"></link><published>2015-11-08T00:00:00+00:00</published><updated>2015-11-08T00:00:00+00:00</updated><author><name>Peter McCormick</name></author><id>tag:pyvideo.org,2015-11-08:pycon-ca-2015/closing-ceremonies-peter-mccormick.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Chair Peter McCormick wraps up PyCon Canada 2015 by expressing thanks to all the sponsors, speakers, volunteers, organizers and attendees that made the conference possible!&lt;/p&gt;
</summary></entry><entry><title>Django and the joys and benefits of live coding</title><link href="https://pyvideo.org/pycon-ca-2015/django-and-the-joys-and-benefits-of-live-coding.html" rel="alternate"></link><published>2015-11-08T00:00:00+00:00</published><updated>2015-11-08T00:00:00+00:00</updated><author><name>Wesley Stratton</name></author><id>tag:pyvideo.org,2015-11-08:pycon-ca-2015/django-and-the-joys-and-benefits-of-live-coding.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;With the rise of live video streaming, such as Periscope for social and Twitch/Youtube for gaming, there has been a rise in the interest in sharing what you're currently doing with the world as well as also interacting with those people who choose to watch what you're streaming. One of the biggest problems with learning and/or improving your programming abilities is not always being able to get instant feedback on demand or having others provide helpful suggestions instantly. Bring forth a platform that allows programmers to share their projects live and interact with those viewing their stream, LiveCoding.tv.&lt;/p&gt;
&lt;p&gt;Django and the joys and benefits of live coding seeks to cover Wesley's most recent Bitcoin project that was built solely while streaming with LiveCoding.tv. Django and the joys and benefits of live coding will cover the basics of Wesley's project as well as the trials, tribulations, pros and cons of building a project live in front of people from all over the globe, all walks of life, all programming backgrounds and skill levels.&lt;/p&gt;
&lt;p&gt;If you're looking for a platform where you can help others, get help from other, watch other create projects or just socialize in real time with other programmers Django and the joys and benefits of live coding is a talk for you.&lt;/p&gt;
</summary></entry><entry><title>Django REST framework: the good &amp; the bad</title><link href="https://pyvideo.org/pycon-ca-2015/django-rest-framework-the-good-the-bad-jordi-rory.html" rel="alternate"></link><published>2015-11-08T00:00:00+00:00</published><updated>2015-11-08T00:00:00+00:00</updated><author><name>Jordi Gutiérrez Hermoso</name></author><id>tag:pyvideo.org,2015-11-08:pycon-ca-2015/django-rest-framework-the-good-the-bad-jordi-rory.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Have you ever spent way too much time writing an API, and hoped there was a better way? Well, there is! The Django REST Framework (DRF) is a very generic framework for simplifying the creation of your API. In this talk, we will present how the DRF puts together serializers, validators, views, and everything else together into a flexible tool for creating any kind of REST API you may want. Like any framework, there are certain things it makes difficult to do, and we will talk about the problems we faced and solved while making our API do just what we wanted it to do.&lt;/p&gt;
</summary></entry><entry><title>Embrace the Singularity</title><link href="https://pyvideo.org/pycon-ca-2015/embrace-the-singularity-mike-fletcher.html" rel="alternate"></link><published>2015-11-08T00:00:00+00:00</published><updated>2015-11-08T00:00:00+00:00</updated><author><name>Mike Fletcher</name></author><id>tag:pyvideo.org,2015-11-08:pycon-ca-2015/embrace-the-singularity-mike-fletcher.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Machine Learning has been making fantastic advances lately. Problems of classification, recognition, modelling and prediction are currently being optimized to almost-human-level accuracy. Python is used in many research groups to explore Machine Learning approaches, and provides many libraries that allow novices to code non-trivial networks with minimal work. Large corporations have moved from research to deployment. Machine Learning has proven itself useful, and we seem to be getting tantalisingly close to something that could be a “true” strong A.I.&lt;/p&gt;
&lt;p&gt;But shadowing these achievements there is a rising fear in society that we will open Pandora’s box, that our creation will decide that we need to be eliminated. We cannot dismiss those concerns out-of-hand as our track-record as a profession is littered with cases where we have lacked foresight. We should address the concerns now, before the box is sitting in our hands.&lt;/p&gt;
&lt;p&gt;Where are we on the road to creating a strong A.I.? How would we recognize a strong A.I.? What can we currently do with Machine Learning, what are the approaches we currently use, and where are they likely to lead over the next few years?&lt;/p&gt;
&lt;p&gt;Are there fundamental missing pieces that prevent a “human-like” strong A.I. from developing? Are there scale or resources standing in the way? What are the (moral) considerations in developing a strong A.I.? What about in shutting one down? What are the threat models involved in “standing up” a strong A.I.? What can be done to mitigate those threats?&lt;/p&gt;
&lt;p&gt;This talk may include code samples, for which a passing familiarity with Numpy or Theano might be helpful, but the focus for the discussion will be on the algorithms,  epistemology and how we as programmers should approach our attempt to develop an artificial mind.&lt;/p&gt;
</summary></entry><entry><title>Fabric-less deployments for WSGI apps</title><link href="https://pyvideo.org/pycon-ca-2015/fabric-less-deployments-for-wsgi-apps-dorian-pula.html" rel="alternate"></link><published>2015-11-08T00:00:00+00:00</published><updated>2015-11-08T00:00:00+00:00</updated><author><name>Dorian Pula</name></author><id>tag:pyvideo.org,2015-11-08:pycon-ca-2015/fabric-less-deployments-for-wsgi-apps-dorian-pula.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Intermediate level talk about migrating a Fabric deployment to a more flexible setup using using Ansible and Invoke. Follows the journey of changing the deployment of a Flask based blogging app from a Fabric script and pre-provisioned server to a modular system with Invoke tasks and provisioning using Ansible. Discusses the advantages and cons of moving to a declarative system versus direct shell commands. Touches upon on Ansible Roles, Ansible Galaxy and Invoke.&lt;/p&gt;
</summary></entry><entry><title>From Flying Circus to Holy Grail: migrating the Twilio REST API from PHP to Python</title><link href="https://pyvideo.org/pycon-ca-2015/from-flying-circus-to-holy-grail-migrating-the-api.html" rel="alternate"></link><published>2015-11-08T00:00:00+00:00</published><updated>2015-11-08T00:00:00+00:00</updated><author><name>Sam Kitajima-Kimbrel</name></author><id>tag:pyvideo.org,2015-11-08:pycon-ca-2015/from-flying-circus-to-holy-grail-migrating-the-api.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Almost every software project of meaningful scale eventually runs into architectural problems. One of the larger issues we’ve dealt with at Twilio is an increasingly-brittle and hard-to-manage PHP codebase, originally responsible for running a website and public REST API. Over time, core business logic has been extracted from the legacy codebase into internal services fronted by a public REST API. This talk will explore how Python and Flask were used to build a simple proxying HTTP layer to handle all of Twilio’s API traffic and direct it to the appropriate internal systems. Along the way, we’ll cover why Python is well-suited to this application, ways to test code that’s replacing existing services, deployment strategies, and all of the benefits that came from migrating to more modern systems.&lt;/p&gt;
</summary></entry><entry><title>Full-stack Django application monitoring with django-watchman</title><link href="https://pyvideo.org/pycon-ca-2015/full-stack-django-application-monitoring-with.html" rel="alternate"></link><published>2015-11-08T00:00:00+00:00</published><updated>2015-11-08T00:00:00+00:00</updated><author><name>Michael Warkentin</name></author><id>tag:pyvideo.org,2015-11-08:pycon-ca-2015/full-stack-django-application-monitoring-with.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Monitoring your websites can be tricky. Many people set up a Pingdom endpoint on their home page, and call it a day; however this doesn't guarantee that all of the back end systems required for a functioning site are actually working.&lt;/p&gt;
&lt;p&gt;This talk will dive into how to use django-watchman to enhance your monitoring coverage. Topics include:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;How to install and configure django-watchman&lt;/li&gt;
&lt;li&gt;What monitoring checks it provides out of the box&lt;/li&gt;
&lt;li&gt;How authentication works&lt;/li&gt;
&lt;li&gt;The three ways to use django-watchman: API, dashboard, and management command&lt;/li&gt;
&lt;li&gt;How to integrate django-watchman with automated tools like Pingdom&lt;/li&gt;
&lt;li&gt;How to write your own custom django-watchman checks&lt;/li&gt;
&lt;/ul&gt;
</summary></entry><entry><title>Learning to code... better!</title><link href="https://pyvideo.org/pycon-ca-2015/learning-to-code-better-roux-buciu.html" rel="alternate"></link><published>2015-11-08T00:00:00+00:00</published><updated>2015-11-08T00:00:00+00:00</updated><author><name>Roux Buciu</name></author><id>tag:pyvideo.org,2015-11-08:pycon-ca-2015/learning-to-code-better-roux-buciu.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;I came to coding by a circuitous route that started with studying logic within philosophy. Along the way, I've tackled a number of subjects related to learning and skill development - from a philosophical, practical, sociological and educational standpoint - and I thought, what better way to test the things I've come away with in action than to put them to work for me as I start to learn how to code.&lt;/p&gt;
&lt;p&gt;I’ll be providing a brief summary of the what and why of things that worked and things that didn't work to help me learn and become a better coder as I started teaching myself, and continue leaning, Python. Rather than focusing on issues that are aimed at beginners, I want to zero in on a few points that I want to take into my late coding career and so will be helpful to a broader audience as they are picking up newer technologies. I'll quickly move through things like mapping out code before writing it, being efficient and descriptive, how to deal with failure when it inevitably happens, contrarianism in the coding community, how to &amp;quot;&amp;quot;stick to it&amp;quot;&amp;quot;, Googling, dealing with the peaks and valleys of daily coding, ego and code, pacing yourself, taking 'productive' breaks, and how to gauge improvement.&lt;/p&gt;
</summary></entry><entry><title>Networks and innovation: a lot of programming inside</title><link href="https://pyvideo.org/pycon-ca-2015/networks-and-innovation-a-lot-of-programming-icaro.html" rel="alternate"></link><published>2015-11-08T00:00:00+00:00</published><updated>2015-11-08T00:00:00+00:00</updated><author><name>Icaro Camelo</name></author><id>tag:pyvideo.org,2015-11-08:pycon-ca-2015/networks-and-innovation-a-lot-of-programming-icaro.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Current networks don't have the ability to provision network services quickly and easily.
We need rapid provisioning of network services to virtual machines in a data center environment and improve network visibility and reduced operational costs.&lt;/p&gt;
&lt;p&gt;Software-Defined Networking is a way to start building a more open and dynamic network. It means a network can ramp up or ramp down network resources and adapt to sharp, unpredictable spikes in demand much easier than traditional networks.&lt;/p&gt;
&lt;p&gt;To implement SDN, we use Opendaylight and Mininet (a python library) to rapidly prototype our network and create proof of concepts capable of being demonstrated and proved easily.&lt;/p&gt;
</summary></entry><entry><title>Python for command line tools: the ups and downs of Mercurial's language choice</title><link href="https://pyvideo.org/pycon-ca-2015/python-for-command-line-tools-the-ups-and-downs-of.html" rel="alternate"></link><published>2015-11-08T00:00:00+00:00</published><updated>2015-11-08T00:00:00+00:00</updated><author><name>Pierre-Yves David</name></author><id>tag:pyvideo.org,2015-11-08:pycon-ca-2015/python-for-command-line-tools-the-ups-and-downs-of.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;In 2005, Matt Mackall picked Python to implement a new version control system: Mercurial. Ten years later, the project is a success! Thanks to python? Lets see what shinning advantages met us and what issues we, developers, had to work around. We'll also take a detour to the place were python outcrop to the users, the extensions system.&lt;/p&gt;
&lt;p&gt;In 2005, Matt Mackall picked Python to implement a new version control system: Mercurial. Ten years later, the project is a success! Thanks to python?&lt;/p&gt;
&lt;p&gt;In this Talk, we'll go over on the advantages of Python that helped the project both in its early life when so much feature needs to be implemented, but also nowaday when major companies like Facebook bet on Mercurial for scaling. We'll also point at the drawback of choosing python and how some work-arounds had to be found. Finally, we'll look at how the choice of python have an impact on the user too with a demonstration of the extensions system.&lt;/p&gt;
</summary></entry><entry><title>Python for reliable delivery of cross platform developer products</title><link href="https://pyvideo.org/pycon-ca-2015/python-for-reliable-delivery-of-cross-platform-avi.html" rel="alternate"></link><published>2015-11-08T00:00:00+00:00</published><updated>2015-11-08T00:00:00+00:00</updated><author><name>Avi Das</name></author><id>tag:pyvideo.org,2015-11-08:pycon-ca-2015/python-for-reliable-delivery-of-cross-platform-avi.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Are you part of a team responsible for delivering cross platform products? End to end automated testing and communicating effectively are important when your project depends on multiple teams spread across functional domains. At Braintree/PayPal, we built a framework to reliably ship developer facing products such as One Touch. In this talk, we will go over using BDD with Behave to describe test scenarios that speaks to both product and engineering, using Appium for mobile automation, and Elasicsearch and Kibana for storage and visualization of test results. You will see how the breadth of packages available on PyPI, the flexibility and ease of Python helped a team of developers whose core competencies were not in Python to collaborate on a common ground.&lt;/p&gt;
&lt;p&gt;Only beginner Python knowledge is necessary but an appreciation for the breadth of possibilities with Python is highly encouraged.&lt;/p&gt;
</summary><category term="Science &amp; Technology"></category><category term="Python (Programming Language)"></category></entry><entry><title>Python GUI tools for editing initial and boundary conditions for climate simulations</title><link href="https://pyvideo.org/pycon-ca-2015/python-gui-tools-for-editing-initial-and-boundary.html" rel="alternate"></link><published>2015-11-08T00:00:00+00:00</published><updated>2015-11-08T00:00:00+00:00</updated><author><name>Deepak Chandan</name></author><id>tag:pyvideo.org,2015-11-08:pycon-ca-2015/python-gui-tools-for-editing-initial-and-boundary.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Researchers working in the fields of atmospheric sciences and earth sciences often have to modify gridded data at select points as part of their research workflow. This could be because they want to manually fix spurious artifacts, or more commonly because they want to generate custom initial and boundary conditions for climate simulations. The typical researcher would accomplish making the changes by specifying the grid points to change within a script (shell script, python script, NCL script etc.) and then repeat this iteratively until all the changes have been made. This process is not only time consuming and inefficient, but it is also prone to errors that might be introduced if the wrong grid points are accidentally specified. In this talk, we describe a collection of open source graphical programs written in python and built upon the PyQt and matplotlib libraries that expose a very efficient and informative interface to modifying boundary conditions for climate simulations to be performed with the widely used Community Earth System Model (CESM). With these portable programs the effort required by a researcher to modify boundary conditions for a new simulation is greatly reduced. The visual editing also ensures that the researcher is always sure that she is editing the grid points she intends to change. Finally, although the programs were created for a specific purpose, for a specific climate model, they can be nevertheless readily adapted to suit the needs of other researchers.&lt;/p&gt;
</summary></entry><entry><title>Take a Stroll in the Bazaar</title><link href="https://pyvideo.org/pycon-ca-2015/take-a-stroll-in-the-bazaar-myles-braithwaite.html" rel="alternate"></link><published>2015-11-08T00:00:00+00:00</published><updated>2015-11-08T00:00:00+00:00</updated><author><name>Myles Braithwaite</name></author><id>tag:pyvideo.org,2015-11-08:pycon-ca-2015/take-a-stroll-in-the-bazaar-myles-braithwaite.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;How to Turn a Pile of Python Files Into an Open Source Project.&lt;/p&gt;
&lt;p&gt;You have written some Python code, you think it would be useful to the world, and you would like to give back to the open source world. But where do you start? This talk will give you some guidance on how you can release your project.&lt;/p&gt;
</summary></entry><entry><title>Using Python for real-time signal analysis</title><link href="https://pyvideo.org/pycon-ca-2015/using-python-for-real-time-signal-analysis-farhan.html" rel="alternate"></link><published>2015-11-08T00:00:00+00:00</published><updated>2015-11-08T00:00:00+00:00</updated><author><name>Mohammad Farhan</name></author><id>tag:pyvideo.org,2015-11-08:pycon-ca-2015/using-python-for-real-time-signal-analysis-farhan.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;The main subject of this talk is how Python can be used as an alternative to the more commonly used high-level languages used in the scientific data analysis industry.&lt;/p&gt;
&lt;p&gt;This talk will focus on PyRF, an open-source library developed by ThinkRF, and how it has been used to provide the same functionality in terms of instrumentation control, data acquisition, digital signal processing, automated testing, production testing, as well as application development.&lt;/p&gt;
</summary></entry><entry><title>Wax on, wax off: the tough love guide to mentoring</title><link href="https://pyvideo.org/pycon-ca-2015/wax-on-wax-off-the-tough-love-guide-to-mentoring.html" rel="alternate"></link><published>2015-11-08T00:00:00+00:00</published><updated>2015-11-08T00:00:00+00:00</updated><author><name>Anita Kuno</name></author><id>tag:pyvideo.org,2015-11-08:pycon-ca-2015/wax-on-wax-off-the-tough-love-guide-to-mentoring.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Everyone has more bugs than they can fix, more features they would like than time to write them. Wouldn't it be great to have some help? The problem is who knows enough about what you know to actually provide help the way you need?&lt;/p&gt;
&lt;p&gt;Open Source has lots of fans and supporters, but many newcomers need the warmth of a person caring about their existence to actually turn them into a contributor.&lt;/p&gt;
&lt;p&gt;Someone sees you working, is enamoured of what you do and wants to learn. You could break down the steps of what you are doing and get them to follow those steps, that is teaching.&lt;/p&gt;
&lt;p&gt;You could recognize the deep inner understanding the is the foundation of your behaviour. You could decide to help someone build such a foundation for themselves. That is mentoring.&lt;/p&gt;
&lt;p&gt;Mentoring is helping someone to fail and learn from it. Mentoring is about witnessing someone else's journey, whereever they go, whereever it takes them and saying I'm here, I'm with you, I'm watching. Mentoring is 99% listening.&lt;/p&gt;
&lt;p&gt;Mentoring is much more time consuming than teaching. Teaching helps someone learn a skill, mentoring helps someone learn themselves.&lt;/p&gt;
&lt;p&gt;Now don't get me wrong, teaching is great and we need teachers and to be taught plus many great teachers can also be mentors. Teaching and mentoring are different.&lt;/p&gt;
&lt;p&gt;This talk will discuss mentoring.&lt;/p&gt;
&lt;p&gt;Anita will endeavour to share what she has learned about mentoring. She hopes you will take away the ability to recognize the difference between teaching and mentoring. She also hopes that should you decide to mentor you have some resources to help you strengthen your mentoring skills.&lt;/p&gt;
</summary></entry><entry><title>Welcome &amp; Morning Keynote</title><link href="https://pyvideo.org/pycon-ca-2015/welcome-morning-keynote-cameron-davidson-pilon.html" rel="alternate"></link><published>2015-11-08T00:00:00+00:00</published><updated>2015-11-08T00:00:00+00:00</updated><author><name>Cameron Davidson-Pilon</name></author><id>tag:pyvideo.org,2015-11-08:pycon-ca-2015/welcome-morning-keynote-cameron-davidson-pilon.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Python developers are commonly using Python as a tool to explore datasets - but what if we reverse that analysis lens back on to the developer? In this talk, Cam will use Python as a data analysis tool to explore Python developers and code. With millions of data points, mostly scraped from Github and Stackoverflow, we'll reexamine who the Python developer is, and how Python developers write code.&lt;/p&gt;
</summary></entry><entry><title>Working effectively with legacy code - Python edition</title><link href="https://pyvideo.org/pycon-ca-2015/working-effectively-with-legacy-code-python-scott.html" rel="alternate"></link><published>2015-11-08T00:00:00+00:00</published><updated>2015-11-08T00:00:00+00:00</updated><author><name>Scott Triglia</name></author><id>tag:pyvideo.org,2015-11-08:pycon-ca-2015/working-effectively-with-legacy-code-python-scott.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Legacy code is that terrifying monster lurking in almost every long-lived codebase. You may not understand it, you may wonder how it works at all! It is the type of code most developers do their best to stay away from, and for good reason. So what is there to do when you inherit such a system for the first time? How can you take it from unknown mess to gleaming example of excellent engineering? What is unique about legacy systems written in Python?&lt;/p&gt;
&lt;p&gt;This talk will present a series of tools, both technical and social, for rehabilitating unknown, untested, and maybe even unloved systems. Approaches to improving these systems will primarily focus on refactoring and testing, with sidebars on engineering culture and personal motivation. We will reference Michael Feathers's excellent book on the topic, but also depart significantly to discuss particular challenges and opportunities presented by the Python language. After all, much of the written literature on this topic assumes a fairly Java-centric view of the world, and offers little support when you realize that object you thought was a dict is actually an ORM model that just happens to support getattr lookup.&lt;/p&gt;
&lt;p&gt;The intended audience is someone relatively new to professional programming, who is encountering their first legacy codebase. This talk will be a crash course in how to handle your unknown adversary.&lt;/p&gt;
</summary></entry><entry><title>500 Lines or Less</title><link href="https://pyvideo.org/pycon-ca-2015/500-lines-or-less-michael-dibernardo.html" rel="alternate"></link><published>2015-11-07T00:00:00+00:00</published><updated>2015-11-07T00:00:00+00:00</updated><author><name>Michael DiBernardo</name></author><id>tag:pyvideo.org,2015-11-07:pycon-ca-2015/500-lines-or-less-michael-dibernardo.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Architects look at thousands of buildings during their training, and study critiques of those buildings written by masters. In contrast, most software developers only ever get to know a handful of large programs well—usually programs they wrote themselves—and never study the great programs of history. As a result, they repeat one another's mistakes rather than building on one another's successes.&lt;/p&gt;
&lt;p&gt;The Architecture of Open Source Applications (aosabook.org) is a book series that aims to change this. The fourth volume (&amp;quot;&amp;quot;500 Lines or Less&amp;quot;&amp;quot;, github.com/aosabook/500lines/) contains 20 short examples of canonical programs written and explained by experienced software developers. This talk will give a brief overview of the book, and will explore the most surprising lessons we learned by producing it.&lt;/p&gt;
</summary></entry><entry><title>Beyond Configuration Management with SaltStack for event-driven infrastructure</title><link href="https://pyvideo.org/pycon-ca-2015/beyond-configuration-management-with-saltstack-for.html" rel="alternate"></link><published>2015-11-07T00:00:00+00:00</published><updated>2015-11-07T00:00:00+00:00</updated><author><name>David Boucha</name></author><id>tag:pyvideo.org,2015-11-07:pycon-ca-2015/beyond-configuration-management-with-saltstack-for.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Congratulations, you've mastered configuration management. So now what? SaltStack is not just configuration management. Intelligent orchestration and automation will help to optimize your infrastructure allowing the dynamic adjustment of infrastructure resources based on monitored changes and events. Dave will provide an overview and demonstration of SaltStack Beacons to monitor systems and the SaltStack Reactor to orchestrate automated, pre-programmed responses. Now that 3:00 AM text message notifies you that a problem has been fixed instead of calling you into the data center for the rest of the night.&lt;/p&gt;
</summary></entry><entry><title>Building a Quantitative Trading Strategy To Beat the S&amp;P500</title><link href="https://pyvideo.org/pycon-ca-2015/building-a-quantitative-trading-strategy-to-beat-s.html" rel="alternate"></link><published>2015-11-07T00:00:00+00:00</published><updated>2015-11-07T00:00:00+00:00</updated><author><name>Karen Rubin</name></author><id>tag:pyvideo.org,2015-11-07:pycon-ca-2015/building-a-quantitative-trading-strategy-to-beat-s.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Upon joining Quantopian, in order to understand her users better, Karen Rubin embarked on a project to learn how quants research, write and trade algorithms to invest in the market. Over the course of a year, she has explored what would happen if you invested in women-led companies and learned about the challenges of writing profitable investment strategies.&lt;/p&gt;
&lt;p&gt;In this talk, she will walk us through the highs and lows of her journey from initial data gathering and cleansing to strategy validation and trading.&lt;/p&gt;
</summary></entry><entry><title>Building highly decoupled systems in Python</title><link href="https://pyvideo.org/pycon-ca-2015/building-highly-decoupled-systems-in-python-ryan.html" rel="alternate"></link><published>2015-11-07T00:00:00+00:00</published><updated>2015-11-07T00:00:00+00:00</updated><author><name>Ryan Easterbrook</name></author><id>tag:pyvideo.org,2015-11-07:pycon-ca-2015/building-highly-decoupled-systems-in-python-ryan.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;With various architecture decisions like Microservices, Restful APIs, MVC, and many more being widely discussed, it's often difficult to determine what you need to build your application. However, these patterns and many other well designed architectures follow common best practices including low coupling, high cohesion, and strong interfaces. Understanding these underlying principals is key to making the best decisions for your use case.&lt;/p&gt;
&lt;p&gt;In this discussion we will explore how highly decoupled systems with strong interface boundaries aid in the maintainability and velocity of a project, and how to build such a system using python.&lt;/p&gt;
</summary></entry><entry><title>Data mining robots: using Seaborn and pandas with the Robot Operating System</title><link href="https://pyvideo.org/pycon-ca-2015/data-mining-robots-using-seaborn-and-pandas-with.html" rel="alternate"></link><published>2015-11-07T00:00:00+00:00</published><updated>2015-11-07T00:00:00+00:00</updated><author><name>Catherine Holloway</name></author><id>tag:pyvideo.org,2015-11-07:pycon-ca-2015/data-mining-robots-using-seaborn-and-pandas-with.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;PyCon Canada 2015:&lt;/p&gt;
&lt;p&gt;Talk Description:
The Robot Operating System (ROS) is an open-source project that facilitates communication between robotic components such as motors, cameras, and other sensors, and computational nodes such as movement commands and pose estimation. However, acquiring and analysing data from ROS can be a little tricky. In this talk, I will go over a few examples of loading data from saved files and live ROS processes using Python with the pandas and Seaborn libraries.&lt;/p&gt;
</summary></entry><entry><title>Deconstructing Django with Flask</title><link href="https://pyvideo.org/pycon-ca-2015/deconstructing-django-with-flask-marc-sibson.html" rel="alternate"></link><published>2015-11-07T00:00:00+00:00</published><updated>2015-11-07T00:00:00+00:00</updated><author><name>Marc Sibson</name></author><id>tag:pyvideo.org,2015-11-07:pycon-ca-2015/deconstructing-django-with-flask-marc-sibson.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Motivation: With the rise of micro services, API first sites and mobile the draw of a lightweight framework is stronger than ever.  Django and its proscriptive batteries included approach can feel too heavy.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Django is awesome, but maybe I'm missing something with Flask thing. OMG, where do I start, there my so many choices&lt;/li&gt;
&lt;li&gt;Major components of Django: ORM, routing, templating, views, forms, migrations, configuration, ReST, models, tasks, tests, static assets, authentication, sessions etc&lt;/li&gt;
&lt;li&gt;templating, forms, static assets aren’t really needed for api/mobile use cases&lt;/li&gt;
&lt;li&gt;for each remaining component offer the “best” flask library&lt;/li&gt;
&lt;li&gt;build out a small API only app together using the &amp;quot;&amp;quot;best&amp;quot;&amp;quot; flask library&lt;/li&gt;
&lt;/ul&gt;
</summary></entry><entry><title>Earthquakes and the Moon</title><link href="https://pyvideo.org/pycon-ca-2015/earthquakes-and-the-moon-hany-fahim.html" rel="alternate"></link><published>2015-11-07T00:00:00+00:00</published><updated>2015-11-07T00:00:00+00:00</updated><author><name>Hany Fahim</name></author><id>tag:pyvideo.org,2015-11-07:pycon-ca-2015/earthquakes-and-the-moon-hany-fahim.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Timekeeping is no easy business. This talk tells the story of how earthquakes and even the Moon force the concept of the &amp;quot;leap second&amp;quot;, and the debacle in 2012 that took down most of the Internet. It also goes into some detail at how Python is handling this scenario.&lt;/p&gt;
</summary></entry><entry><title>Epic NHL goal celebration hack with a hue light show and real-time machine learning</title><link href="https://pyvideo.org/pycon-ca-2015/epic-nhl-goal-celebration-hack-with-a-hue-light.html" rel="alternate"></link><published>2015-11-07T00:00:00+00:00</published><updated>2015-11-07T00:00:00+00:00</updated><author><name>François Maillet</name></author><id>tag:pyvideo.org,2015-11-07:pycon-ca-2015/epic-nhl-goal-celebration-hack-with-a-hue-light.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;This talk shows how Python was used to trigger an epic sound and light show whenever the Montreal Canadiens hockey team scored a goal in last season's playoffs.&lt;/p&gt;
&lt;p&gt;The author trained a machine learning model to detect in real-time that a goal was just scored by the Habs based on the live audio feed of a game and to trigger a light show using Philips hues in his living room. The system was built using various Python modules, more specifically scikit-learn, pyaudio, librosa, phue and bottle.&lt;/p&gt;
&lt;p&gt;The talk will cover every step of the hack from the creation of the dataset, the feature generation and the machine learning model training, the real-time audio feed processing to do real-time scoring and the programming of the light show.&lt;/p&gt;
</summary></entry><entry><title>Exploring our Python interpreter</title><link href="https://pyvideo.org/pycon-ca-2015/exploring-our-python-interpreter-stephane-wirtel.html" rel="alternate"></link><published>2015-11-07T00:00:00+00:00</published><updated>2015-11-07T00:00:00+00:00</updated><author><name>Stephane Wirtel</name></author><id>tag:pyvideo.org,2015-11-07:pycon-ca-2015/exploring-our-python-interpreter-stephane-wirtel.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;During my last CPython sprint, I started to contribute to the CPython code, and I wanted to understand the beast.&lt;/p&gt;
&lt;p&gt;In this case, there is only one solution, trace the code from the beginning. From the command line to the interpreter, we will take part to an adventure.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Overview of the structure of the Project and the directories.&lt;/li&gt;
&lt;li&gt;From the Py_Main function, to the interpreter&lt;/li&gt;
&lt;li&gt;the used technics for the Lexer, Parser and the generation of the AST and of course of the Byte Code.&lt;/li&gt;
&lt;li&gt;we will see some byte codes with the dis module&lt;/li&gt;
&lt;li&gt;How does VM works, it’s a stack machine.&lt;/li&gt;
&lt;li&gt;the Interpreter and its main loop of the Virtual Machine.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The idea behind is just to show how CPython works for a new contributor to CPython&lt;/p&gt;
</summary></entry><entry><title>Fraud detection in real-time with Spark</title><link href="https://pyvideo.org/pycon-ca-2015/fraud-detection-in-real-time-with-spark-mehrdad.html" rel="alternate"></link><published>2015-11-07T00:00:00+00:00</published><updated>2015-11-07T00:00:00+00:00</updated><author><name>Mehrdad Pazooki</name></author><id>tag:pyvideo.org,2015-11-07:pycon-ca-2015/fraud-detection-in-real-time-with-spark-mehrdad.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;We will explore ways of detecting fraud in a stream of data. In a stream of data we want to make sure that we won't receive too many requests from the same source or we might be curious about finding a specific pattern.
In this talk we will see how Spark can help us with the help of probabilistic data structures.&lt;/p&gt;
</summary></entry><entry><title>Geolocation apps with Django</title><link href="https://pyvideo.org/pycon-ca-2015/geolocation-apps-with-django-tyler-savery.html" rel="alternate"></link><published>2015-11-07T00:00:00+00:00</published><updated>2015-11-07T00:00:00+00:00</updated><author><name>Tyler Savery</name></author><id>tag:pyvideo.org,2015-11-07:pycon-ca-2015/geolocation-apps-with-django-tyler-savery.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Latitude, longitude, altitude, and even iBeacons can be leveraged to enable geo-targeted experiences. But how do we build and optimize the server-side components to handle these requirements? Using a combination of libraries and techniques, we will illustrate these concepts. In this discussion everything from map clustering and caching, to distance calculations and polygonal layering will be demonstrated using Django, GeoDjango, Redis, and PostGIS as our tool belt.&lt;/p&gt;
</summary></entry><entry><title>Hacking structural biology with Python and pandas</title><link href="https://pyvideo.org/pycon-ca-2015/hacking-structural-biology-with-python-and-pandas.html" rel="alternate"></link><published>2015-11-07T00:00:00+00:00</published><updated>2015-11-07T00:00:00+00:00</updated><author><name>Christopher Ing</name></author><id>tag:pyvideo.org,2015-11-07:pycon-ca-2015/hacking-structural-biology-with-python-and-pandas.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;PyCon Canada 2015: &lt;a class="reference external" href="https://2015.pycon.ca/en/schedule/16/"&gt;https://2015.pycon.ca/en/schedule/16/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Talk Description
The dynamic motions of biomolecules like DNA, RNA, and proteins are integral to our understanding of drugs, disease, and human health. By performing large-scale supercomputer simulations, one can model the motion of proteins in ways impractical or impossible using traditional lab bench experiments.&lt;/p&gt;
&lt;p&gt;While data science approaches are ubiquitous in the field of genomics, commonly dealing with massive genetic sequence and expression datasets, the application of &amp;quot;&amp;quot;big data&amp;quot;&amp;quot; methodology is infrequently used in the field of structural biology due to the high computational expense of running simulations. However, advances in high-performance computing are resulting in increased dataset sizes and data analysis is emerging as the primary bottleneck to scientific discovery.&lt;/p&gt;
&lt;p&gt;In this talk, I present the use of Python and Pandas to accelerate analysis of time series data extracted from molecular dynamics trajectories. The application of this approach is directed at the study of the voltage-gated sodium channel, a protein found in human neurons that is responsible for propagating nerve impulses. Using a Jupyter notebook, I perform exploratory analysis on a large dataset of trajectories and arrive at a mechanistic model for the function of this protein. This model may then be used to quantify how genetic diseases and drugs might alter the function of the protein in subsequent research.&amp;quot;&lt;/p&gt;
</summary></entry><entry><title>How Python helped create the visual effects for an Emmy nominated TV show</title><link href="https://pyvideo.org/pycon-ca-2015/how-python-helped-create-the-visual-effects-for-an.html" rel="alternate"></link><published>2015-11-07T00:00:00+00:00</published><updated>2015-11-07T00:00:00+00:00</updated><author><name>Engin Arslan</name></author><id>tag:pyvideo.org,2015-11-07:pycon-ca-2015/how-python-helped-create-the-visual-effects-for-an.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Monetization has been turned on by Youtube because of copyrighted content that is used in this video.&lt;/p&gt;
&lt;p&gt;The extent to which programming is used in the production of Visual Effects can be somewhat of a mystery to an outsider of the field. Broadly speaking, it is used by 4 sets of people / categories with overlapping responsibilities.&lt;/p&gt;
&lt;p&gt;Computer Graphics Engineers, Math, CS, Physics PhD’s and others in similar positions undertake the responsibility of very low level research and development such as creation of ‘shading’ and ‘rendering’ solutions, implementation of physics simulation algorithms, etc. Their development efforts help create the core toolset artists utilize when creating visuals. They either extend the possibilities that existing 3D software packages offer (like Maya, 3DS Max, Houdini and more) or create entirely new tools.&lt;/p&gt;
&lt;p&gt;Pipeline TD’s and Engineers build and maintain the visual effects studio pipeline and help facilitate the production efficiently by managing the data-flow. This mainly involves building tools and plugins that interface with the 3D software packages that are in use or creating stand-alone desktop applications.&lt;/p&gt;
&lt;p&gt;Technical Directors for each department address the particular needs of their departments by building scripts, tools, plugins — whatever the problem at hand requires. They usually interface with the tools that Engineers upstream build and with the 3D software packages that are already in use to achieve the solutions that they are after.&lt;/p&gt;
&lt;p&gt;Eager Artists aka Budding Programmers are artists that are frustrated by the limitations of the toolset that they are given and devise automation solutions using the API of the software in use to build scripts and tools that helps with the redundant, repetitive, boilerplate tasks.&lt;/p&gt;
&lt;p&gt;Almost all the software packages that are used in VFX nowadays have a Python API. Moreover programs are moving towards using PySide in implementing their visual interface, which further enables artists to utilize this toolkit to build their own GUI solutions — either integrated to the software or as a standalone desktop application. Wherever you look, Python dominates the VFX landscape — except for tasks that are performance critical. From the low level workings of the studio pipeline to the front-end of Visual Effects production where viewer facing visuals are created, Python facilitates delivery of cutting edge effects on time and on budget.&lt;/p&gt;
&lt;p&gt;When a group of visual effects artists were asked to deliver an episode for an immensely popular TV Show involving one of the biggest CG battle scenes to be ever seen on the TV so far, it was obvious that Python was going to play a huge part in their workflow.&lt;/p&gt;
&lt;p&gt;This talk focuses on the perspective of the artists and technical directors in this VFX landscape and various ways they utilize Python in production to come up with solutions for movies and shows that entertains millions of people around the globe.&lt;/p&gt;
</summary></entry><entry><title>How to teach Python to a ten year old</title><link href="https://pyvideo.org/pycon-ca-2015/how-to-teach-python-to-a-ten-year-old-jake-sethi.html" rel="alternate"></link><published>2015-11-07T00:00:00+00:00</published><updated>2015-11-07T00:00:00+00:00</updated><author><name>Jake Sethi-Reiner</name></author><id>tag:pyvideo.org,2015-11-07:pycon-ca-2015/how-to-teach-python-to-a-ten-year-old-jake-sethi.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Everyone can benefit from hearing about Jake's experiences learning Python--what was helpful and what was not! The good and the bad...&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Things to learn before Python: Snap, Squeak,  Logo, Karel the Robot, Alice, Scratch, Tynker, Trinket&lt;/li&gt;
&lt;li&gt;Python tools and environments for learning: Codecademy, Code Combat, Code Skulptor&lt;/li&gt;
&lt;li&gt;Courses:  written tutorials, Coursera, Codecademy&lt;/li&gt;
&lt;/ul&gt;
</summary></entry><entry><title>How Wave does database sharding with Django</title><link href="https://pyvideo.org/pycon-ca-2015/how-wave-does-database-sharding-with-django-joseph.html" rel="alternate"></link><published>2015-11-07T00:00:00+00:00</published><updated>2015-11-07T00:00:00+00:00</updated><author><name>Joseph Kahn</name></author><id>tag:pyvideo.org,2015-11-07:pycon-ca-2015/how-wave-does-database-sharding-with-django-joseph.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Learn how we handle a large amount of data in Django by sharding the data using a developer friendly interface. I'll be talking about what we learned from our initial implementation and sharding style as well as the details we used in implementing a newer system.&lt;/p&gt;
&lt;p&gt;First, learn about why we shard, why you probably want to shard, what we originally tried and why it didn't work.&lt;/p&gt;
&lt;p&gt;Next, learn about how we re-implemented sharding including the router, unique id generation and all the code that went into the project.&lt;/p&gt;
&lt;p&gt;Finally, I'll touch on some of the more advanced topics such as shard re-balancing and dealing with replication lag time.&lt;/p&gt;
</summary></entry><entry><title>Immutable Django</title><link href="https://pyvideo.org/pycon-ca-2015/immutable-django-alex-tucker.html" rel="alternate"></link><published>2015-11-07T00:00:00+00:00</published><updated>2015-11-07T00:00:00+00:00</updated><author><name>Alex Tucker</name></author><id>tag:pyvideo.org,2015-11-07:pycon-ca-2015/immutable-django-alex-tucker.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Stop using the Django ORM for evil and embrace the light of Event Sourcing and Domain Driven Design. Learn how to start thinking about your system's behaviour instead of state all while still leveraging the power of Django's ORM.&lt;/p&gt;
&lt;p&gt;First, learn about the history and philosophy of DDD and Event Sourcing and how it applies to software today.&lt;/p&gt;
&lt;p&gt;Next, learn simple patterns of approaching DDD in your application today.&lt;/p&gt;
&lt;p&gt;Finally, learn how to use the Django ORM to create a race condition free  Event storage and efficient Read Models.&lt;/p&gt;
</summary></entry><entry><title>Is your Python application secure?</title><link href="https://pyvideo.org/pycon-ca-2015/is-your-python-application-secure-frederic-harper.html" rel="alternate"></link><published>2015-11-07T00:00:00+00:00</published><updated>2015-11-07T00:00:00+00:00</updated><author><name>Frédéric Harper</name></author><id>tag:pyvideo.org,2015-11-07:pycon-ca-2015/is-your-python-application-secure-frederic-harper.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;In today’s world, it's easier than ever to innovate and create great web applications. You release often, but let’s be honest, if you're like most developers out there, you don't spend your days worrying about security. You know it’s important, but you aren’t security savvy. So ask yourself, is your Python application secure? Come learn some of the different ways a hacker (cracker) can attack your code, and some of the best practices out there. In the end, your security is your users’ security.&lt;/p&gt;
</summary></entry><entry><title>Make Jupyter/IPython Notebook even more magical with cell magic extensions!</title><link href="https://pyvideo.org/pycon-ca-2015/make-jupyter-ipython-notebook-even-more-magical.html" rel="alternate"></link><published>2015-11-07T00:00:00+00:00</published><updated>2015-11-07T00:00:00+00:00</updated><author><name>Nicolas Kruchten</name></author><id>tag:pyvideo.org,2015-11-07:pycon-ca-2015/make-jupyter-ipython-notebook-even-more-magical.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;ul class="simple"&gt;
&lt;li&gt;My talk will start out with a brief explanation of what Jupyter is (the project formerly known as IPython Notebook) and how to launch it.&lt;/li&gt;
&lt;li&gt;I will demo how to run a few lines of Python in Jupyter, and how to create text cells with Markdown and LaTeX.&lt;/li&gt;
&lt;li&gt;I will then demo some of the built-in 'cell magic' extensions like running bash commands and displaying plots inline.&lt;/li&gt;
&lt;li&gt;I will then show some additional off-the-shelf extensions like the SQL and Graphviz ones, and show how to export a notebook to web-based slides.&lt;/li&gt;
&lt;li&gt;I will then show how one can build and use a useful new cell magic extension (an interactive HTTP client) in Python, using Jupyter's built-in web-based text editor.&lt;/li&gt;
&lt;/ul&gt;
</summary></entry><entry><title>Matplotlib: up and running</title><link href="https://pyvideo.org/pycon-ca-2015/matplotlib-up-and-running-christopher-roach.html" rel="alternate"></link><published>2015-11-07T00:00:00+00:00</published><updated>2015-11-07T00:00:00+00:00</updated><author><name>Christopher Roach</name></author><id>tag:pyvideo.org,2015-11-07:pycon-ca-2015/matplotlib-up-and-running-christopher-roach.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Matplotlib is the de facto standard for data visualization in Python, but getting started with it can be a little bit tough. Take a look at three different matplotlib tutorials, and chances are, you'll see at least two, if not three, different ways to interact with matplotlib! Understanding the correct way may not always be obvious.&lt;/p&gt;
&lt;p&gt;Now, fast forward past the basics. You've created a few visualizations with the aid of whatever tutorials you've found online, but you still don't feel like you have a good grip on how matplotlib works. You call the plot function several different ways and it seems to work just fine in the tutorials, but it doesn't seem to be doing what you want it to now. Oh, and not to mention, why do I need to call the show() function sometimes and not others? These are all the types of questions that I had when I was first learning matplotlib and it took a bit of work to find the answers to all of them.&lt;/p&gt;
&lt;p&gt;In this talk I cover everything that I wish I knew when I was first learning matplotlib. I'll cover the three main interfaces to the library: pylab, pyplot, and the OO API, and you'll learn when and how to use each one. Then we'll go into a bit more detail on the architecture of matplotlib, and deep dive into the plot function to understand just how versatile it is and where its limits arise. Finally, we'll look at several new libraries built atop the venerable visualization library that have come about in the past few years to take matplotlib to the next level. During the course of the talk, you'll also see several tips and tricks to make matplotlib a little friendlier.&lt;/p&gt;
&lt;p&gt;It's been my observation that getting started with matplotlib is easy due to the wealth of tutorials online. A problem does tend to arise, however, when a tutorial can't be found for the current task at hand. Many times I've seen individuals, who have used matplotlib in the past, at a loss when they need to do something they've never done before. The goal of this talk is to give the attendees the understanding they need to reason properly about the library and to make it possible for them to move away from copy-n-paste coding to actually writing up their own visualization scripts.&lt;/p&gt;
</summary></entry><entry><title>Orchestrating a climate modeling data pipeline</title><link href="https://pyvideo.org/pycon-ca-2015/orchestrating-a-climate-modeling-data-pipeline-r.html" rel="alternate"></link><published>2015-11-07T00:00:00+00:00</published><updated>2015-11-07T00:00:00+00:00</updated><author><name>Andre R. Erler</name></author><id>tag:pyvideo.org,2015-11-07:pycon-ca-2015/orchestrating-a-climate-modeling-data-pipeline-r.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;PyCon Canada 2015:&lt;/p&gt;
&lt;p&gt;Talk Description:
In order to run high-resolution regional climate models, it is necessary to interpolate and pre-process large amounts of data from a global climate model at the boundaries of the regional model. Several C and Fortran tools are available in the scientific community to achieve different aspects of this task, but communication between these tools is limited to the filesystem (the program/tool reads input from a file and writes output to a file). In a High Performance Computing (HPC) environment, filesystem access is a bottleneck and temporary files should be avoided.&lt;/p&gt;
&lt;p&gt;In this talk I will show how a Python driver module and an in-memory filesystem (RAM disk) can be used to orchestrate the data flow between various tools without creating temporary files on disk and fully automate the entire process.
Except for the first input and the last output step, all file I/O is redirected to the RAM disk. The process can also be parallelized in the Python driver module by distributing different input files to different processes using Python multiprocessing.
The use of this technique leads to a speed-up of 800% compared to traditional methods, and requires no human intervention.&lt;/p&gt;
&lt;p&gt;Different input datasets are supported and new datasets can be added easily due to the object oriented implementation: at every stage of the pre-processing pipeline a dataset method can be overloaded and a different tool can be used, depending on the input dataset.
This would not have been possible in a simple scripting language that might otherwise be used to automate such a process.&lt;/p&gt;
&lt;p&gt;This module (called PyWPS), is part of the WRF Tools package, a set of Python modules and shell scripts designed to facilitate the operation of a regional climate model (the Weather Research and Forecasting model - WRF) in a HPC environment. It is capable of autonomously running the model over extended periods of time (including automatic crash handling and restarts), automatic pre- and post-processing and archiving.&lt;/p&gt;
&lt;p&gt;In the presentation I will first provide some context on regional climate modeling and its computational challenges, before detailing the main design features of the Python WRF pre-processing system (PyWPS).&lt;/p&gt;
&lt;p&gt;The package is available on GitHub: &lt;a class="reference external" href="https://github.com/aerler/WRF-Tools"&gt;https://github.com/aerler/WRF-Tools&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>ORM your ORM</title><link href="https://pyvideo.org/pycon-ca-2015/orm-your-orm.html" rel="alternate"></link><published>2015-11-07T00:00:00+00:00</published><updated>2015-11-07T00:00:00+00:00</updated><author><name>Zach Howard</name></author><id>tag:pyvideo.org,2015-11-07:pycon-ca-2015/orm-your-orm.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;In this talk we'll present the inconveniences of working directly with objects returned by an ORM. We'll discuss:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;the issues of having database sessions attached to objects;&lt;/li&gt;
&lt;li&gt;the ability to maintain independence and flexibility around different storage solutions;&lt;/li&gt;
&lt;li&gt;and we will also talk about the general question of how to decide which object layer you should base your application logic on.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This talk is inspired by a real-world use case, and we'll present the before and after states of implementing our current (production) solution: a database-agnostic data service API that promotes immutable objects for any module to consume.&lt;/p&gt;
</summary></entry><entry><title>Python's new type hints in action... in JavaScript</title><link href="https://pyvideo.org/pycon-ca-2015/pythons-new-type-hints-in-action-in-javascript.html" rel="alternate"></link><published>2015-11-07T00:00:00+00:00</published><updated>2015-11-07T00:00:00+00:00</updated><author><name>Christopher Neugebauer</name></author><id>tag:pyvideo.org,2015-11-07:pycon-ca-2015/pythons-new-type-hints-in-action-in-javascript.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Depending on who you ask, PEP 484's Type Hints are either the next big thing in Python, or the harbinger of doom upon our entire community. Which is it?&lt;/p&gt;
&lt;p&gt;Allowing optional static typing in Python will bring with it some benefits that other languages have had for years: IDEs will be able to do code completion better; a whole class of boring tests will fall out automatically; and some bugs will be easier to catch.&lt;/p&gt;
&lt;p&gt;But this is also undeniably a huge change of direction: will it mean you have to substantially change your code style? Will Python's simple expressiveness suddenly become unattainable thanks to clumsy Java-style type declarations?&lt;/p&gt;
&lt;p&gt;To show how PEP 484's Gradual Typing system works, we're going to look at TypeScript, a minimal implementation of Gradual Typing over JavaScript. We'll see how the type system works, and how it fits into the already thriving JavaScript developer community, where most people aren't using type hints at all.&lt;/p&gt;
&lt;p&gt;We'll draw some parallels with how Python's implementation will work, and see what Python can learn from a language that has successfully made the jump to a type-hinted world.&lt;/p&gt;
</summary></entry><entry><title>REBOUND, a high-perf Python/C package for simulating planetary &amp; satellite orbits</title><link href="https://pyvideo.org/pycon-ca-2015/rebound-a-high-perf-python-c-package-for-planetary.html" rel="alternate"></link><published>2015-11-07T00:00:00+00:00</published><updated>2015-11-07T00:00:00+00:00</updated><author><name>Daniel Tamayo</name></author><id>tag:pyvideo.org,2015-11-07:pycon-ca-2015/rebound-a-high-perf-python-c-package-for-planetary.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;I will present REBOUND, an open-source package that can be used to simulate the motion of bodies in the Solar System, extra-solar planetary systems and Saturn’s rings. REBOUND has been developed by a group of astrophysicists at the University of Toronto. My talk will focus on several design challenges that we faced during the development, finding a balance between efficiency and usability that might be of wide interest to people working on high performance python code.&lt;/p&gt;
&lt;p&gt;We opted for a design where all time-consuming algorithms are implemented in C. However, to easily setup and manipulate simulations, we developed a Python module to interface with REBOUND. This makes REBOUND very easy to use and allows us to leverage the power of Python and its supporting libraries to analyze and visualize simulation results.&lt;/p&gt;
&lt;p&gt;I will do a live demo and show how one can use REBOUND to simulate the Solar System with initial positions of planets, moons and spacecraft from a NASA database in just a few minutes.&lt;/p&gt;
</summary></entry><entry><title>RPython: turtles all the way down</title><link href="https://pyvideo.org/pycon-ca-2015/rpython-turtles-all-the-way-down-dann-toliver.html" rel="alternate"></link><published>2015-11-07T00:00:00+00:00</published><updated>2015-11-07T00:00:00+00:00</updated><author><name>Dann Toliver</name></author><id>tag:pyvideo.org,2015-11-07:pycon-ca-2015/rpython-turtles-all-the-way-down-dann-toliver.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;We'll describe a small Logo-inspired language for communicating with turtles, and talk about the implementation of that language in RPython -- a toolkit for building interpreters for dynamic languages, and part of the PyPy project.&lt;/p&gt;
&lt;p&gt;Of particular interest are the performance characteristics of building the interpreter with RPython instead of running it directly, and where that performance increase originates: RPython's meta-tracing framework creates a custom tracing JIT VM for our interpreter. This gives us compiler-like performance for the cost of an interpreter, which is a pretty great bargain, and stands to permanently alter the dynamics of building dynamic languages.&lt;/p&gt;
</summary></entry><entry><title>Saturday Morning Keynote</title><link href="https://pyvideo.org/pycon-ca-2015/saturday-morning-keynote-brett-cannon.html" rel="alternate"></link><published>2015-11-07T00:00:00+00:00</published><updated>2015-11-07T00:00:00+00:00</updated><author><name>Brett Cannon</name></author><id>tag:pyvideo.org,2015-11-07:pycon-ca-2015/saturday-morning-keynote-brett-cannon.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Over Python's long history it has collected a large number of implementations, both active and abandoned (Wikipedia lists 10 implementations alone.) Brett will go over the actively maintained implementations of Python, what makes them unique, and end with an unscientific performance comparison (both Python 2 &amp;amp; 3 interpreters.)&lt;/p&gt;
&lt;p&gt;# Actively maintained interpreters&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;CPython&lt;/li&gt;
&lt;li&gt;PyPy&lt;/li&gt;
&lt;li&gt;IronPython&lt;/li&gt;
&lt;li&gt;Jython&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;# Interpreters under development&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Skython?&lt;/li&gt;
&lt;li&gt;Pyston&lt;/li&gt;
&lt;li&gt;Pyjion&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;# Other ways to get a performance boost&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Numba&lt;/li&gt;
&lt;li&gt;Cython&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;# Performance comparison&lt;/p&gt;
&lt;p&gt;An exploration of performance using CPython's benchmark suite &lt;a class="reference external" href="https://hg.python.org/benchmarks"&gt;https://hg.python.org/benchmarks&lt;/a&gt;. Data will be made publicly available through a Jupyter notebook.&lt;/p&gt;
</summary></entry><entry><title>Scaling Python</title><link href="https://pyvideo.org/pycon-ca-2015/scaling-python-james-king.html" rel="alternate"></link><published>2015-11-07T00:00:00+00:00</published><updated>2015-11-07T00:00:00+00:00</updated><author><name>James King</name></author><id>tag:pyvideo.org,2015-11-07:pycon-ca-2015/scaling-python-james-king.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;You might have heard from smart people that dynamic languages are not suitable for large projects. We're going to look at what it takes to manage one of the largest Python projects powering public clouds at Dreamhost and Rackspace as well as private ones at CERN: Openstack!&lt;/p&gt;
&lt;p&gt;We'll gather some data about current Openstack deployments used in production, review some source code from various projects, see some anecdotes from devops people who deploy these systems, and explore the infrastructure and quality assurance processes used to maintain this massive code base.&lt;/p&gt;
</summary></entry><entry><title>Using Python and Docker to create a novel and scalable development environment solution</title><link href="https://pyvideo.org/pycon-ca-2015/using-python-and-docker-to-create-a-novel-and.html" rel="alternate"></link><published>2015-11-07T00:00:00+00:00</published><updated>2015-11-07T00:00:00+00:00</updated><author><name>Jordan Singleton</name></author><id>tag:pyvideo.org,2015-11-07:pycon-ca-2015/using-python-and-docker-to-create-a-novel-and.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Local development environments are essential tools which help us run code on our own machines. Good development environments help us efficiently manage our workflow as we make code changes, and they can be adapted to fit a changing stack and team. In this talk, we’ll look at shortcomings of different development environment solutions, and how we’ve attempted to solve them with Python and Docker.&lt;/p&gt;
&lt;p&gt;The simplest solution is to just run your app on the command line - for example with python my_app.py. This is easy and works well if your setup is simple.  But as you scale your stack, adding apps and developers, this approach becomes problematic.  When you have more than one app to run, you can run into dependency conflicts between apps.  When you add more developers, it becomes a challenge to reproduce your system configuration so that each app runs smoothly on each developer’s machine. Virtualenvs help these issues by providing a measure of isolation and reproducibility.  However they only partly solve the problem; environment variables, system libraries, and other system configuration all hamper reproducibility and isolation.&lt;/p&gt;
&lt;p&gt;A common approach to these problems is to run code in a virtual machine.  This does increase the portability of an environment, but still comes with some issues.  Changing dependencies and configuration over time can prompt changes in the VM system state, which can create the same reproducibility issues as before.  Configuration management software can help, but comes with its own set of issues.  Additionally, virtual machines come with performance penalties; shared folders have poor performance, and the VM will consume tons of memory if you have a large stack.  Finally, apps running on the same VM can still suffer from lack of isolation. Conflicting system dependencies, apps that want to listen on the same port, and other issues will require workarounds.&lt;/p&gt;
&lt;p&gt;Docker containers provide an opportunity to improve on these shortcomings.  Containers are by nature isolated and portable, and they come without the performance overhead that’s associated with virtual machines. However there are still problems to solve before containers can be managed easily in a development environment workflow. How are the containers launched in a reproducible way?  How are containers connected so that they can communicate as needed?  What happens when we need to make changes to the stack being run? We’ve built a Python app which manages docker containers and abstracts these processes.  Dusty (dusty.gc.com) knows how to run an arbitrarily complex stack based on a set of defined specs, and provides other workflow management features. We think that this approach is more portable, more scalable, and easier to use than other development environment solutions capable of running complex stacks.&lt;/p&gt;
</summary></entry><entry><title>Using Python to characterize the structure of wood</title><link href="https://pyvideo.org/pycon-ca-2015/using-python-to-characterize-the-structure-of-wood.html" rel="alternate"></link><published>2015-11-07T00:00:00+00:00</published><updated>2015-11-07T00:00:00+00:00</updated><author><name>Nicholas McIntosh</name></author><id>tag:pyvideo.org,2015-11-07:pycon-ca-2015/using-python-to-characterize-the-structure-of-wood.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;The energy-intensive nature of the mechanical pulping production process (disassembling wood chips into their constituent fibres to make pulp) has resulted in a great deal of work in the area of energy reduction strategies for the process. Prior-to-pulping wood chip compression processes fit this bill exactly and have been shown to reduce the energy consumed by the process as a whole by up to 15%, but are less than fully understood in their mechanism of action. This talk will cover the development of the computational and experimental tools that have been developed to characterize wood chips, and, ultimately, better understand the mechanics of the chip-compression process as a whole. Specifically: the development of an image analysis (via OpenCV)/model fitting (via scikit-learn) data analysis pipeline has allowed for a quantitative assessment of the micro-structure of wood.&lt;/p&gt;
</summary></entry><entry><title>What you can do with Python, an RDBMS, SVN, and a little scripting in a data center</title><link href="https://pyvideo.org/pycon-ca-2015/what-you-can-do-with-python-an-rdbms-svn-and-a-in.html" rel="alternate"></link><published>2015-11-07T00:00:00+00:00</published><updated>2015-11-07T00:00:00+00:00</updated><author><name>Peter St. Onge</name></author><id>tag:pyvideo.org,2015-11-07:pycon-ca-2015/what-you-can-do-with-python-an-rdbms-svn-and-a-in.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;The ability to rapidly deploy is a key element of any devops strategy, and the ability to stage and redeploy hardware is no different, especially in a large institution hosting 230+ networks.&lt;/p&gt;
&lt;p&gt;Faced with an Institutional requirement to replace ALL of the 230+ border (demark) switches connecting academic and administrative departments to the University backbone in a cost-effective and timely manner, and the complication of dealing with a seriously high-latency practice to prepare networking hardware for first use, we were able to leverage elements of Python, Subversion, and PostgreSQL to massively scale up and speed up our capacity to stage and field new equipment, improving service levels and by extension providing a key element of internal DR/BC practice.&lt;/p&gt;
&lt;p&gt;Although the project was left fallow after the initial replacement was completed, the lessons learned from this project have been very valuable when future projects were planned. This talk will focus generally on the problems at hand, focus on the solution architected and implemented, and end with specific points to remember during similar efforts in the future.&lt;/p&gt;
</summary></entry></feed>