<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org - Amethyst Reese</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_amethyst-reese.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2025-05-16T00:00:00+00:00</updated><subtitle></subtitle><entry><title>Refactoring Code with the Standard Library</title><link href="https://pyvideo.org/north-bay-python-2018/refactoring-code-with-the-standard-library.html" rel="alternate"></link><published>2018-11-04T00:00:00+00:00</published><updated>2018-11-04T00:00:00+00:00</updated><author><name>Amethyst Reese</name></author><id>tag:pyvideo.org,2018-11-04:/north-bay-python-2018/refactoring-code-with-the-standard-library.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;What if you could refactor your entire code base, safely and
automatically? How much old code could you fix or replace if you didn't
worry about updating every reference by hand? I'll show you how a
concrete syntax tree (CST) can help you do just that using only the â€¦&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;What if you could refactor your entire code base, safely and
automatically? How much old code could you fix or replace if you didn't
worry about updating every reference by hand? I'll show you how a
concrete syntax tree (CST) can help you do just that using only the
standard Python library.&lt;/p&gt;
</content><category term="North Bay Python 2018"></category></entry><entry><title>What is a Coroutine Anyway?</title><link href="https://pyvideo.org/north-bay-python-2019/what-is-a-coroutine-anyway-amethyst-reese-north-bay-python-2019.html" rel="alternate"></link><published>2019-11-02T00:00:00+00:00</published><updated>2019-11-02T00:00:00+00:00</updated><author><name>Amethyst Reese</name></author><id>tag:pyvideo.org,2019-11-02:/north-bay-python-2019/what-is-a-coroutine-anyway-amethyst-reese-north-bay-python-2019.html</id><content type="html"></content><category term="North Bay Python 2019"></category></entry><entry><title>Or Else! An Exploration of Obscure Control Flow</title><link href="https://pyvideo.org/north-bay-python-2025/or-else-an-exploration-of-obscure-control-flow.html" rel="alternate"></link><published>2025-04-26T00:00:00+00:00</published><updated>2025-04-26T00:00:00+00:00</updated><author><name>Amethyst Reese</name></author><id>tag:pyvideo.org,2025-04-26:/north-bay-python-2025/or-else-an-exploration-of-obscure-control-flow.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Amethyst Reese ðŸŒ¸&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://pretalx.northbaypython.org/nbpy-2025/talk/VJUUTA"&gt;https://pretalx.northbaypython.org/nbpy-2025/talk/VJUUTA&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Everyone knows how an if-else block works, but what about a for-else block? Or try-except-else? What do those do, and how can they help us write cleaner code? What other hidden gems await us in the halls of Python grammar â€¦&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Amethyst Reese ðŸŒ¸&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://pretalx.northbaypython.org/nbpy-2025/talk/VJUUTA"&gt;https://pretalx.northbaypython.org/nbpy-2025/talk/VJUUTA&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Everyone knows how an if-else block works, but what about a for-else block? Or try-except-else? What do those do, and how can they help us write cleaner code? What other hidden gems await us in the halls of Python grammar? Come join us for an adventure into depths of the Python world less traveled.&lt;/p&gt;
&lt;p&gt;We'll start with a brief look at the fundamentals of program control flow, and how our choices as developers influence the readability and maintainability of our code. We'll look at some easy ways to use lesser-known syntax elements to make common code patterns more obvious, and compare and contrast them with equivalent alternatives.&lt;/p&gt;
&lt;p&gt;Next, we'll start to pull back the curtains a bit on how Python handles more complex control flow mechanisms, like generators and decorators, and look at ways to leverage those features to build higher order functionality. Lastly, we'll get a bit reckless and look at how Python makes it possible to create our own systems for control flow, and consider committing some light crimes in the name of code readability.&lt;/p&gt;
&lt;p&gt;We might even implement the highly desired &amp;quot;do-while&amp;quot; loop while we're at it.&lt;/p&gt;
&lt;p&gt;Sat Apr 26 10:50:00 2025 at Reis River Ranch&lt;/p&gt;
&lt;p&gt;Produced by NDV: &lt;a class="reference external" href="https://youtube.com/channel/UCQ7dFBzZGlBvtU2hCecsBBg?sub_confirmation=1"&gt;https://youtube.com/channel/UCQ7dFBzZGlBvtU2hCecsBBg?sub_confirmation=1&lt;/a&gt;&lt;/p&gt;
</content><category term="North Bay Python 2025"></category></entry><entry><title>Refactoring Code With the Standard Library</title><link href="https://pyvideo.org/pycon-au-2018/refactoring-code-with-the-standard-library.html" rel="alternate"></link><published>2018-08-25T00:00:00+00:00</published><updated>2018-08-25T00:00:00+00:00</updated><author><name>Amethyst Reese</name></author><id>tag:pyvideo.org,2018-08-25:/pycon-au-2018/refactoring-code-with-the-standard-library.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;What if you could refactor your entire code base, safely and automatically? How much old code could you fix or replace if you didn't need to worry about updating every reference by hand? I'll show you how a concrete syntax tree (CST) can help you do just that using â€¦&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;What if you could refactor your entire code base, safely and automatically? How much old code could you fix or replace if you didn't need to worry about updating every reference by hand? I'll show you how a concrete syntax tree (CST) can help you do just that using only the standard Python library.&lt;/p&gt;
</content><category term="PyCon AU 2018"></category></entry><entry><title>Thinking Outside the GIL with AsyncIO and Multiprocessing</title><link href="https://pyvideo.org/pycon-us-2018/thinking-outside-the-gil-with-asyncio-and-multiprocessing.html" rel="alternate"></link><published>2018-05-11T00:00:00+00:00</published><updated>2018-05-11T00:00:00+00:00</updated><author><name>Amethyst Reese</name></author><id>tag:pyvideo.org,2018-05-11:/pycon-us-2018/thinking-outside-the-gil-with-asyncio-and-multiprocessing.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Have you ever written a small, elegant application that couldn't keep up with the growth of your data or user demand? Did your beautiful design end up buried in threads and locks? Did Python's very special Global Interpreter Lock make all of this an exercise in futility?&lt;/p&gt;
&lt;p&gt;This talk â€¦&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Have you ever written a small, elegant application that couldn't keep up with the growth of your data or user demand? Did your beautiful design end up buried in threads and locks? Did Python's very special Global Interpreter Lock make all of this an exercise in futility?&lt;/p&gt;
&lt;p&gt;This talk is for you! With the combined powers of AsyncIO and multiprocessing, we'll redesign an old multithreaded application limited by the GIL into a modern solution that scales with the demand using only the standard library. No prior AsyncIO or multiprocessing experience required.&lt;/p&gt;
</content><category term="PyCon US 2018"></category><category term="asyncio"></category><category term="multiprocessing"></category></entry><entry><title>Open Source on Easy Mode</title><link href="https://pyvideo.org/pycon-us-2022/open-source-on-easy-mode.html" rel="alternate"></link><published>2022-04-27T00:00:00+00:00</published><updated>2022-04-27T00:00:00+00:00</updated><author><name>Amethyst Reese</name></author><id>tag:pyvideo.org,2022-04-27:/pycon-us-2022/open-source-on-easy-mode.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Open source is the lifeblood of the community, and we all stand on the shoulders of giants. But the responsibility, time commitment, and processes that come with maintaining projects on PyPI can be overwhelming, even for the best of us. With this talk, we'll see how the right tools â€¦&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Open source is the lifeblood of the community, and we all stand on the shoulders of giants. But the responsibility, time commitment, and processes that come with maintaining projects on PyPI can be overwhelming, even for the best of us. With this talk, we'll see how the right tools and automation can cut out the overhead from running open source projects, and let you focus on the fun parts!&lt;/p&gt;
&lt;p&gt;We'll cover a wide range of topics, from packaging, metadata, and dependencies, to code quality, testing, and CI/CD, and finish with documentation, helping new developers, and reviewing contributions from the community. We'll look at high level concepts, modern best practices, and free tools available and how they make it easier than ever for new contributors to get started, while giving you confidence that their changes are safe and ready for production.&lt;/p&gt;
&lt;p&gt;Rather than just pointing to cookie cutter templates, we'll talk about the &amp;quot;why&amp;quot; behind these best practices and how they fit into common developer workflows. We'll also include links to references and popular developer tools, as well as a companion site with slides and a list of everything mentioned in the talk.&lt;/p&gt;
&lt;p&gt;Developers of all experience levels are welcome. Whether you're new to packaging and need guidance for your first release, or a seasoned package maintainer looking to simplify your workflow, this talk is for you!&lt;/p&gt;
</content><category term="PyCon US 2022"></category></entry><entry><title>Or Else! An Exploration of Obscure Control Flow</title><link href="https://pyvideo.org/pycon-us-2025/or-else-an-exploration-of-obscure-control-flow.html" rel="alternate"></link><published>2025-05-16T00:00:00+00:00</published><updated>2025-05-16T00:00:00+00:00</updated><author><name>Amethyst Reese</name></author><id>tag:pyvideo.org,2025-05-16:/pycon-us-2025/or-else-an-exploration-of-obscure-control-flow.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Everyone knows how an if-else block works, but what about a for-else block? Or try-except-else? What do those do, and how can they help us write cleaner code? What other hidden gems await us in the halls of Python grammar? Come join us for an adventure into depths of â€¦&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Everyone knows how an if-else block works, but what about a for-else block? Or try-except-else? What do those do, and how can they help us write cleaner code? What other hidden gems await us in the halls of Python grammar? Come join us for an adventure into depths of the Python world less traveled.&lt;/p&gt;
&lt;p&gt;We'll start with a brief look at the fundamentals of program control flow, and how our choices as developers influence the readability and maintainability of our code. We'll look at some easy ways to use lesser-known syntax elements to make common code patterns more obvious, and compare and contrast them with equivalent alternatives.&lt;/p&gt;
&lt;p&gt;Next, we'll start to pull back the curtains a bit on how Python handles more complex control flow mechanisms, like generators and decorators, and look at ways to leverage those features to build higher order functionality. Lastly, we'll get a bit reckless and look at how Python makes it possible to create our own systems for control flow, and consider committing some light crimes in the name of code readability.&lt;/p&gt;
&lt;p&gt;We might even implement the highly desired &amp;quot;do-while&amp;quot; loop while we're at it.&lt;/p&gt;
</content><category term="PyCon US 2025"></category></entry></feed>