<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Thu, 26 Jul 2018 00:00:00 +0000</lastBuildDate><item><title>Succinct data structures for python</title><link>https://pyvideo.org/europython-2018/succinct-data-structures-for-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This is a presentation of and call for participation in development and
testing of Python bindings to Succinct Data Structure Library.&lt;/p&gt;
&lt;p&gt;From Wikipedia: Succinct data structures can represent an object (such
as a bitvector or a tree) in space close to the information-theoretic
lower bound of the object while supporting operations of the original
object efficiently. The theoretical time complexity of an operation
performed on the classical data structure and the equivalent succinct
data structure are (most of the time) identical.&lt;/p&gt;
&lt;p&gt;Currently bindings are provided for:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Mutable bit-compressed vectors&lt;/li&gt;
&lt;li&gt;Immutable compressed integer vectors&lt;/li&gt;
&lt;li&gt;Immutable compressed bit (boolean) vectors&lt;/li&gt;
&lt;li&gt;Rank and select operations on bitvectors&lt;/li&gt;
&lt;li&gt;Wavelet trees&lt;/li&gt;
&lt;li&gt;Comressed suffix arrays&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Original library: &lt;a class="reference external" href="https://github.com/simongog/sdsl-lite"&gt;https://github.com/simongog/sdsl-lite&lt;/a&gt; Most of examples
from SDSL cheat sheet and SDSL tutorial are implemented.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Konstantin Ignatov</dc:creator><pubDate>Thu, 26 Jul 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-07-26:europython-2018/succinct-data-structures-for-python.html</guid></item><item><title>Превращаем свалку проектов в экосистему при помощи setuptools</title><link>https://pyvideo.org/pycon-russia-2015/prevrashchaem-svalku-proektov-v-ekosistemu-pri-pomoshchi-setuptools.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;В докладе мы рассмотрим создание файлов setup.py и setup.cfg.&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Используем edit-mode при установке пакетов&lt;/li&gt;
&lt;li&gt;Простой setup.py для простого проекта&lt;/li&gt;
&lt;li&gt;Устанавливаем дополнительные файлы&lt;/li&gt;
&lt;li&gt;Строим расширения&lt;/li&gt;
&lt;li&gt;Делаем сложные зависимости&lt;/li&gt;
&lt;li&gt;Добавляем консольные скрипты&lt;/li&gt;
&lt;li&gt;Включаем поддержку плагинов&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;Будет полезно всем, кто: разрабатывает &amp;gt;1 взаимодействующих друг с другом проектов, копирует в каждый новый проект папку с любимыми функциями, устанавливает проекты при помощи git clone, copy, rsync и тп,
не пишет расширения из-за сложности развёртывания, пишет консольные скрипты при помощи def main()... if name == '__main__'...,
избегает пакетирования, потому что проекты слишком зависят друг от друга (изменения в одном приводят к изменениям везде).&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Konstantin Ignatov</dc:creator><pubDate>Fri, 18 Sep 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-09-18:pycon-russia-2015/prevrashchaem-svalku-proektov-v-ekosistemu-pri-pomoshchi-setuptools.html</guid></item></channel></rss>