<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org - Dr. Sebastian Mika</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_dr-sebastian-mika.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2018-07-07T00:00:00+00:00</updated><subtitle></subtitle><entry><title>ctparse: a practical parser for natural language time expressions in pure python</title><link href="https://pyvideo.org/pydata-berlin-2018/ctparse-a-practical-parser-for-natural-language-time-expressions-in-pure-python.html" rel="alternate"></link><published>2018-07-07T00:00:00+00:00</published><updated>2018-07-07T00:00:00+00:00</updated><author><name>Dr. Sebastian Mika</name></author><id>tag:pyvideo.org,2018-07-07:/pydata-berlin-2018/ctparse-a-practical-parser-for-natural-language-time-expressions-in-pure-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Parsing natural language time expressions into structured data is
challenging. Whilst there are quite a few tools, many are either too
simplistic or problematic in a python setup. &lt;tt class="docutils literal"&gt;ctparse&lt;/tt&gt; is a pure
python library (MIT- License) build on straight forward concepts,
allowing to parse complex expressions efficiently and can â€¦&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Parsing natural language time expressions into structured data is
challenging. Whilst there are quite a few tools, many are either too
simplistic or problematic in a python setup. &lt;tt class="docutils literal"&gt;ctparse&lt;/tt&gt; is a pure
python library (MIT- License) build on straight forward concepts,
allowing to parse complex expressions efficiently and can easily be
adjusted for domain specific use cases.&lt;/p&gt;
</content><category term="PyData Berlin 2018"></category></entry></feed>