<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_m-mollerv.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2012-07-05T00:00:00+00:00</updated><entry><title>Faster python programs through optimization part 2</title><link href="https://pyvideo.org/europython-2012/faster-python-programs-through-optimization-part.html" rel="alternate"></link><published>2012-07-05T00:00:00+00:00</published><updated>2012-07-05T00:00:00+00:00</updated><author><name>M Mollerv</name></author><id>tag:pyvideo.org,2012-07-05:europython-2012/faster-python-programs-through-optimization-part.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2012] M Mollerv- 4 JULY 2012 in &amp;quot;Track Pizza Margherita&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Objective This tutorial provides an overview of techniques to improve
the performance of Python programs. The focus is on concepts such as
profiling, diffrence of data structures and algorithms as well as a
selection of tools an libraries that help to speed up Python. Intended
Audience Python programmers who would like concepts to improve
performance. Audience Level Programmers with good Python knowledge.
Prerequisites Please bring your laptop with the operating system of your
choice (Linux, Mac OS X, Windows). In addition to Python 2.6 or 2.7, we
need: RunSnakeRun (&lt;a class="reference external" href="http://www.vrplumber.com/programming/runsnakerun"&gt;http://www.vrplumber.com/programming
/runsnakerun&lt;/a&gt;)
Guppy_PE framework (&lt;a class="reference external" href="http://guppy-pe.sourceforge.net"&gt;http://guppy-pe.sourceforge.net&lt;/a&gt;) (&amp;lt;= Python 2.6 )
lineprofiler
(&lt;a class="reference external" href="htt%20p://packages.python.org/line_profiler/"&gt;http://packages.python.org/line_profiler/&lt;/a&gt;)
pympler (&lt;a class="reference external" href="http://code.google.com/p/pympler/"&gt;http://code.google.com/p/pympler/&lt;/a&gt;) psyco
(&lt;a class="reference external" href="http://psyco.sourceforge.net"&gt;http://psyco.sourceforge.net&lt;/a&gt;, Python 2.6 only, version 1.5.2 or higher)
pypy (&lt;a class="reference external" href="http://pypy.org"&gt;http://pypy.org&lt;/a&gt;) and NumPy (&lt;a class="reference external" href="http://numpy.scipy.org"&gt;http://numpy.scipy.org&lt;/a&gt;, version 1.2 or
higher). Method This is a hands-on course. Students are strongly
encouraged to work along with the trainer at the interactive prompt.
There will be exercises the students need to do on their own. Experience
shows that this active involvement is essential for an effective
learning. Outline How fast is fast enough? Optimization guidelines
Premature optimization Optimization rules Seven steps for incremental
optimization Optimization strategy Measuring in stones Profiling CPU
usage Profiling memory usage Algorithms and Anti-patterns String
concatenation List and generator comprehensions The right data structure
Caching The example Testing speed Pure Python Meet Psyco, the JIT Using
PyPy NumPy for numeric arrays Using multiple CPUs with multiprocessing
Combination of optimization strategies Results of different example
implementations I taught this tutorial multiple times and will update
the content as I regularly do.&lt;/p&gt;
</summary></entry><entry><title>Faster python programs through optimization part 1</title><link href="https://pyvideo.org/europython-2012/faster-python-programs-through-optimization-part-0.html" rel="alternate"></link><published>2012-07-05T00:00:00+00:00</published><updated>2012-07-05T00:00:00+00:00</updated><author><name>M Mollerv</name></author><id>tag:pyvideo.org,2012-07-05:europython-2012/faster-python-programs-through-optimization-part-0.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2012] M Mollerv- 4 JULY 2012 in &amp;quot;Track Pizza Margherita&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Objective This tutorial provides an overview of techniques to improve
the performance of Python programs. The focus is on concepts such as
profiling, diffrence of data structures and algorithms as well as a
selection of tools an libraries that help to speed up Python. Intended
Audience Python programmers who would like concepts to improve
performance. Audience Level Programmers with good Python knowledge.
Prerequisites Please bring your laptop with the operating system of your
choice (Linux, Mac OS X, Windows). In addition to Python 2.6 or 2.7, we
need: RunSnakeRun (&lt;a class="reference external" href="http://www.vrplumber.com/programming/runsnakerun"&gt;http://www.vrplumber.com/programming
/runsnakerun&lt;/a&gt;)
Guppy_PE framework (&lt;a class="reference external" href="http://guppy-pe.sourceforge.net"&gt;http://guppy-pe.sourceforge.net&lt;/a&gt;) (&amp;lt;= Python 2.6 )
lineprofiler
(&lt;a class="reference external" href="htt%20p://packages.python.org/line_profiler/"&gt;http://packages.python.org/line_profiler/&lt;/a&gt;)
pympler (&lt;a class="reference external" href="http://code.google.com/p/pympler/"&gt;http://code.google.com/p/pympler/&lt;/a&gt;) psyco
(&lt;a class="reference external" href="http://psyco.sourceforge.net"&gt;http://psyco.sourceforge.net&lt;/a&gt;, Python 2.6 only, version 1.5.2 or higher)
pypy (&lt;a class="reference external" href="http://pypy.org"&gt;http://pypy.org&lt;/a&gt;) and NumPy (&lt;a class="reference external" href="http://numpy.scipy.org"&gt;http://numpy.scipy.org&lt;/a&gt;, version 1.2 or
higher). Method This is a hands-on course. Students are strongly
encouraged to work along with the trainer at the interactive prompt.
There will be exercises the students need to do on their own. Experience
shows that this active involvement is essential for an effective
learning. Outline How fast is fast enough? Optimization guidelines
Premature optimization Optimization rules Seven steps for incremental
optimization Optimization strategy Measuring in stones Profiling CPU
usage Profiling memory usage Algorithms and Anti-patterns String
concatenation List and generator comprehensions The right data structure
Caching The example Testing speed Pure Python Meet Psyco, the JIT Using
PyPy NumPy for numeric arrays Using multiple CPUs with multiprocessing
Combination of optimization strategies Results of different example
implementations I taught this tutorial multiple times and will update
the content as I regularly do.&lt;/p&gt;
</summary></entry></feed>