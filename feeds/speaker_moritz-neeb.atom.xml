<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_moritz-neeb.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2016-06-01T00:00:00+00:00</updated><entry><title>Bayesian Optimization and it's application to Neural Networks</title><link href="https://pyvideo.org/pydata-berlin-2016/bayesian-optimization-and-its-application-to-neural-networks.html" rel="alternate"></link><published>2016-06-01T00:00:00+00:00</published><updated>2016-06-01T00:00:00+00:00</updated><author><name>Moritz Neeb</name></author><id>tag:pyvideo.org,2016-06-01:pydata-berlin-2016/bayesian-optimization-and-its-application-to-neural-networks.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyData Berlin 2016&lt;/p&gt;
&lt;p&gt;This talk will be about the fundamentals of Bayesian Optimization and how it can be used to train ML Algorithms in Python. To this end we'll consider it's application to Neural Networks. The NNs will be implemented in keras, the Bayesian Optimization will be optimized with hyperas/hyperopt.&lt;/p&gt;
&lt;p&gt;Have you ever failed to train a Neural Network? Spent hours, to get it even learn anything? If you ask an expert on how she does this, the answer might be something like: &amp;quot;It needs a lot of experience and some luck&amp;quot;. If you know this problem, then this talk is for you. Also, let's steer our luck with ML!&lt;/p&gt;
&lt;p&gt;When tuning hyperparameters, an expert has built a model, that means some expectations on how the output might change on a certain parameter adaption. For example, what happens to your Convolutional Neural Network if you set the dropout from 0.5 to 0.25.&lt;/p&gt;
&lt;p&gt;Bayesian Optimization is a method that is able to build exactly this kind of model. It uses for example Gaussian Processes to take decisions on which parameter-change might bring you the most benefit, and if it does not, the model is adapted accodingly.&lt;/p&gt;
&lt;p&gt;This talk will be about the fundamentals of Bayesian Optimization and how it can be used to train ML Algorithms in Python.&lt;/p&gt;
&lt;p&gt;To this end we'll consider it's application to Neural Networks. The NNs will be implemented in keras, the Bayesian Optimization will be optimized with hyperas/hyperopt.&lt;/p&gt;
&lt;p&gt;I am planning to split this talk 50:50 into theory and practice.&lt;/p&gt;
</summary></entry></feed>