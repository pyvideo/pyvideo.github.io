<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/tag_boto.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2016-02-02T00:00:00+00:00</updated><entry><title>Having it All: Distributed services with Django, Boto, and SQS queues</title><link href="https://pyvideo.org/pycon-es-2015/having-it-all-distributed-services-with-django-boto-and-sqs-queues.html" rel="alternate"></link><published>2016-02-02T00:00:00+00:00</published><updated>2016-02-02T00:00:00+00:00</updated><author><name>J. V. Trigo</name></author><id>tag:pyvideo.org,2016-02-02:pycon-es-2015/having-it-all-distributed-services-with-django-boto-and-sqs-queues.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;How do you let untrained people in your company run sensitive processes on different remote servers? Processes that must run asynchronously and sequentially while accessing different common resources? And how do you do it quickly and make it robust? I will show how we used Django, SQS and Boto to create a distributed and decoupled solution that let users invoke services asynchronously, which is secure, scalable and ensures that processes using common resources ran in sequence.&lt;/p&gt;
</summary><category term="Track Básico"></category><category term="django"></category><category term="sqs"></category><category term="boto"></category></entry><entry><title>Deploying web applications to the cloud with Python</title><link href="https://pyvideo.org/europython-2011/deploying-web-applications-to-the-cloud-with-pyth.html" rel="alternate"></link><published>2011-07-24T00:00:00+00:00</published><updated>2011-07-24T00:00:00+00:00</updated><author><name>Nate Aune</name></author><id>tag:pyvideo.org,2011-07-24:europython-2011/deploying-web-applications-to-the-cloud-with-pyth.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Nate Aune - 23 June 2011 in &amp;quot;Track Ravioli&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;How can Python help you deploy web applications to the cloud? Amazon EC2
provides virtual machines on demand but as a developer you still have to
configure these machines and push your code to them. Fabric is a Python
library that lets you execute commands on a remote machine, and Boto is
a Python library for interfacing with Amazon web services. By using
Fabric and Boto, you can easily create repeatable deployments and
provision new resources as needed with minimal effort.&lt;/p&gt;
&lt;p&gt;This talk will introduce Amazon Web Services and how to launch new
machines using simple Boto scripts, and how to get started making your
own repeatable deployments using Fabric scripts.&lt;/p&gt;
</summary><category term="boto"></category><category term="cloud"></category><category term="deploy"></category><category term="ec2"></category><category term="fabric"></category><category term="web"></category></entry><entry><title>Indy Liu - Building web animation application with Python-Ogre</title><link href="https://pyvideo.org/kiwi-pycon-2009/indy-liu---building-web-animation-application-wit.html" rel="alternate"></link><published>2009-11-07T00:00:00+00:00</published><updated>2009-11-07T00:00:00+00:00</updated><author><name>Indy Liu</name></author><id>tag:pyvideo.org,2009-11-07:kiwi-pycon-2009/indy-liu---building-web-animation-application-wit.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Building web animation application with Python-ogre&lt;/p&gt;
&lt;p&gt;Presented by Indy Liu&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;In building our online user-customisable animation system, we needed a
3D engine that is powerful, stable and flexible. We are lucky to have
made python-ogre our choice. Combined with FFMpeg and the boto library,
we were able to build the whole solution in python with as little hassle
as possible.&lt;/p&gt;
&lt;p&gt;Outline&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Open source python game engines;&lt;/li&gt;
&lt;li&gt;What we need - Not just a game engine;&lt;/li&gt;
&lt;li&gt;What you can do with python-ogre;&lt;/li&gt;
&lt;li&gt;Combining with other libraries FFMpeg, boto;&lt;/li&gt;
&lt;li&gt;Interfacing with the web - celery;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;[VIDEO HAS ISSUES: Sound and video are poor. Slides are hard to read.]&lt;/p&gt;
</summary><category term="boto"></category><category term="celery"></category><category term="ffmpeg"></category><category term="kiwipycon"></category><category term="kiwipycon2009"></category><category term="ogre"></category></entry></feed>