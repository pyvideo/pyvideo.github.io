<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_diego-canizares.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2018-11-24T00:00:00+00:00</updated><entry><title>Cortaste toda la looz: cuando la solución más obvia, no es la mejor</title><link href="https://pyvideo.org/pycon-ar-2018/cortaste-toda-la-looz-cuando-la-solucion-mas-obvia-no-es-la-mejor.html" rel="alternate"></link><published>2018-11-24T00:00:00+00:00</published><updated>2018-11-24T00:00:00+00:00</updated><author><name>Diego Cañizares</name></author><id>tag:pyvideo.org,2018-11-24:pycon-ar-2018/cortaste-toda-la-looz-cuando-la-solucion-mas-obvia-no-es-la-mejor.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A veces, aunque la solución más obvia sea meter el cutucuchillo, hay que pensar que te poés quedar letrificadaloca...&lt;/p&gt;
&lt;p&gt;Así como existen los patrones de diseño, existen los anti-patrones. ¿Qué sería esto? Básicamente una serie de _mocos_ recopilados y documentados, a fin de evitar que caigamos en la misma. En Python - aún con lo _beio_ que es - también sucede, así que vamos a dar un pequeño repaso por algunos de los existentes, y ver cómo salimos de ahí. O cómo no cortamos toda la looz.&lt;/p&gt;
</summary></entry><entry><title>Python en Educación</title><link href="https://pyvideo.org/pycon-ar-2012/python-en-educacion.html" rel="alternate"></link><published>2012-11-16T00:00:00+00:00</published><updated>2012-11-16T00:00:00+00:00</updated><author><name>Diego Cañizares</name></author><id>tag:pyvideo.org,2012-11-16:pycon-ar-2012/python-en-educacion.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Enseñando los primeros pasitos en programación, con Python. Hay vida más
allá de C, C++ y Java!&lt;/p&gt;
</summary></entry></feed>