<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_artur-czepiel.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2016-10-14T00:00:00+00:00</updated><entry><title>Evolution of 'Best Practices' in Django</title><link href="https://pyvideo.org/pycon-pl-2016/evolution-of-best-practices-in-django.html" rel="alternate"></link><published>2016-10-14T00:00:00+00:00</published><updated>2016-10-14T00:00:00+00:00</updated><author><name>Artur Czepiel</name></author><id>tag:pyvideo.org,2016-10-14:pycon-pl-2016/evolution-of-best-practices-in-django.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Some 'best practices' are no longer 'best'. There are newer and better
tools available to solve problems that even a couple of months/years ago
required a lot of hacking and/or ugly code. In this talk I'll show you
some examples of patterns and solutions that no longer apply and
current/latest best practices. Also why they are better, why you should
upgrade your code as soon as possible, and how to deal with 'obsoledge'.
Includes Request/Resposne, Databases, Templates, APIs, 3rd parties, and
more.&lt;/p&gt;
</summary></entry></feed>