<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org - Scott Ford</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_scott-ford.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2020-06-18T00:00:00+00:00</updated><subtitle></subtitle><entry><title>A Deep Dive into Measuring Dependency Freshness with LibYear</title><link href="https://pyvideo.org/python-web-conf-2020/a-deep-dive-into-measuring-dependency-freshness-with-libyear.html" rel="alternate"></link><published>2020-06-18T00:00:00+00:00</published><updated>2020-06-18T00:00:00+00:00</updated><author><name>Scott Ford</name></author><id>tag:pyvideo.org,2020-06-18:/python-web-conf-2020/a-deep-dive-into-measuring-dependency-freshness-with-libyear.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&amp;quot;A Deep Dive into Measuring Dependency Freshness with LibYear&amp;quot; by: Scott Ford&lt;/p&gt;
&lt;p&gt;LibYear is a dependency freshness measure which helps you learn how out of date your project’s dependencies are. While LibYear has considerable value when used as a “spot” metric, something that you just measure once, there …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&amp;quot;A Deep Dive into Measuring Dependency Freshness with LibYear&amp;quot; by: Scott Ford&lt;/p&gt;
&lt;p&gt;LibYear is a dependency freshness measure which helps you learn how out of date your project’s dependencies are. While LibYear has considerable value when used as a “spot” metric, something that you just measure once, there is even more power that can be unlocked when you observe how the metric has trended over time. In this talk, we’ll explore a tool, libmetrics, which is able to compute this metric across a project’s history. The libmetrics tool supports many different dependency management tools from many different frameworks. Also during this talk, we’re going to look at graphs of LibYear over time for many different open source projects. By analyzing these graphs, we can see the long term impacts of different decisions, such as when a team decides to start using Dependabot.&lt;/p&gt;
&lt;p&gt;Recorded at the 2020 Python Web Conference (&lt;a class="reference external" href="https://2020.pythonwebconf.com"&gt;https://2020.pythonwebconf.com&lt;/a&gt;)&lt;/p&gt;
</content><category term="Python Web Conf 2020"></category><category term="PythonWebConf"></category><category term="PythonWebConf2020"></category></entry></feed>