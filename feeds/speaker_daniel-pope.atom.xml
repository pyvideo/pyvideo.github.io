<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_daniel-pope.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2019-07-12T00:00:00+00:00</updated><entry><title>Lightning talks on Friday, July 12</title><link href="https://pyvideo.org/europython-2019/lightning-talks-on-friday-july-12.html" rel="alternate"></link><published>2019-07-12T00:00:00+00:00</published><updated>2019-07-12T00:00:00+00:00</updated><author><name>Various speakers</name></author><id>tag:pyvideo.org,2019-07-12:europython-2019/lightning-talks-on-friday-july-12.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&amp;quot;Lightning Talks
[EuroPython 2019 -  - 2019-07-12 - MongoDB  [PyData track]
[Basel, CH]&lt;/p&gt;
&lt;p&gt;License: This video is licensed under the CC BY-NC-SA 3.0 license: &lt;a class="reference external" href="https://creativecommons.org/licenses/by-nc-sa/3.0/"&gt;https://creativecommons.org/licenses/by-nc-sa/3.0/&lt;/a&gt;
Please see our speaker release agreement for details: &lt;a class="reference external" href="https://ep2019.europython.eu/events/speaker-release-agreement/"&gt;https://ep2019.europython.eu/events/speaker-release-agreement/&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Programming physics games with Python and OpenGL</title><link href="https://pyvideo.org/europython-2013/programming-physics-games-with-python-and-opengl.html" rel="alternate"></link><published>2013-07-04T00:00:00+00:00</published><updated>2013-07-04T00:00:00+00:00</updated><author><name>Daniel Pope</name></author><id>tag:pyvideo.org,2013-07-04:europython-2013/programming-physics-games-with-python-and-opengl.html</id><summary type="html"></summary><category term="graphics"></category><category term="physics"></category><category term="game-development"></category><category term="opengl"></category></entry><entry><title>Friday Education Panel</title><link href="https://pyvideo.org/pycon-uk-2017/friday-education-panel.html" rel="alternate"></link><published>2017-10-27T16:30:00+01:00</published><updated>2017-10-27T16:30:00+01:00</updated><author><name>Daniel Pope</name></author><id>tag:pyvideo.org,2017-10-27:pycon-uk-2017/friday-education-panel.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This is a panel of four experts answering pre-submitted questions from the assembled audience under the guidance of a chairperson. Audience participation will be encouraged.&lt;/p&gt;
&lt;p&gt;Are you a student learning Python? Do you teach using Python? Perhaps you support teachers or create educational resources? You may even be a parent with a perspective on how your own children are taught programming! Our panel of experts would love to hear from you!&lt;/p&gt;
&lt;p&gt;Think &amp;quot;Question Time&amp;quot; on BBC1 at 10:30pm on a Thursday and you have a pretty good idea of what it will be like.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Dan Pope (Chair)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Daniel is a hobbyist games programmer and two-time winner of the Pyweek games programming contest. He is author of Pygame Zero and adventurelib, both educational games frameworks for Python. He works for Two Sigma, a NYC hedge fund, from London.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Carrie Anne Philbin&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Carrie Anne Philbin is an award winning Computing &amp;amp; ICT Teacher, Author and YouTuber. Currently working as Director of Education for the Raspberry Pi Foundation to put the power of computing and digital making into the hands of people all over the world. She also volunteers on the board for Computing At School and as a Fellow of the Python Software Foundation. Alongside her work in formal education in the UK, Carrie Anne also hosts a Computer Science series on popular educational YouTube channel Crash Course and creates technology tutorials on her own channel the Geek Gurl Diaries.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cat Lamin&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Former UK primary school teacher and real-life geek girl, Cat is enthusiastic about getting teachers and children interested in coding and computing. She is a Raspberry Pi Certified Educator, CAS Master Teacher and Google Certified Educator; in her spare time, she performs in for an amateur theatre group, Q2 Players. Recent work has included work for the National STEM centre, travelling to Brazil to train elementary school teachers in basic computational thinking and computer science as well as working part-time for pi-top.&lt;/p&gt;
&lt;p&gt;Cat also founded Coding Evening for teachers, a network of social events to encourage teachers and community members to get together and share best practice for computing teaching. She runs Raspberry Jam events in Wimbledon.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Kushal Das&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Kushal Das is a developer of SecureDrop at Freedom of the Press Foundation. He is a long time contributor to various upstream Free Software projects including the Fedora project. He is a core developer of CPython, and also a director of the Python Software Foundation. For the last 10 years he has been organizing online summer training to help people to become upstream contibutors, and wrote an online book to help in the same.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Tom Crick&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Tom Crick is Professor of Computer Science &amp;amp; Public Policy and Deputy Director of Innovation at Cardiff Metropolitan University. His interests sit at the research/policy interface, solving data-driven and computationally-intensive problems, as well as science/innovation policy, public service innovation, STEM education and skills/infrastructure for the digital economy. In 2013, he chaired the Welsh Government’s review of the ICT curriculum and chaired the development of a Digital Competence Framework for all schools in 2016. He was recently announced as the chair of the new National Network for Excellence in Science &amp;amp; Technology. He is Vice-President of BCS, The Chartered Institute for IT, Chair of CAS Wales and a non-executive director of Dŵr Cymru/Welsh Water. Twitter: &amp;#64;ProfTomCrick&lt;/p&gt;
</summary></entry><entry><title>Writing file objects with CFFI</title><link href="https://pyvideo.org/pycon-uk-2017/writing-file-objects-with-cffi.html" rel="alternate"></link><published>2017-10-27T14:30:00+01:00</published><updated>2017-10-27T14:30:00+01:00</updated><author><name>Daniel Pope</name></author><id>tag:pyvideo.org,2017-10-27:pycon-uk-2017/writing-file-objects-with-cffi.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This session will be an introduction to CFFI, taking the example of writing file-like objects that read and write byte streams.&lt;/p&gt;
&lt;p&gt;CFFI is a binding generator for writing C code extensions for Python, which work on a range of Python interpreters including PyPy.&lt;/p&gt;
&lt;p&gt;File-like objects are Python's protocol to read and write streaming data, which you'll be familiar with from open() and StringIO, among many others.&lt;/p&gt;
&lt;p&gt;We will learn how to use CFFI to wrap a simple C API, and adapt it to a file object API. To do this we will also need to understand how to use bytes, bytearray and memoryview objects to minimise copying.&lt;/p&gt;
</summary></entry><entry><title>Scripting across hosts with Chopsticks</title><link href="https://pyvideo.org/europython-2017/scripting-across-hosts-with-chopsticks.html" rel="alternate"></link><published>2017-07-13T00:00:00+00:00</published><updated>2017-07-13T00:00:00+00:00</updated><author><name>Daniel Pope</name></author><id>tag:pyvideo.org,2017-07-13:europython-2017/scripting-across-hosts-with-chopsticks.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Chopsticks lets your import and run Python code on remote Unix hosts
over SSH. It works with no code deployment and no preinstalled
software other than Python and SSH. It has built-in support for
running code on many hosts in parallel.&lt;/p&gt;
&lt;p&gt;Unlike Fabric or Ansible, Chopsticks not opinionated about the
structure of the code you run, allowing it to be used for
orchestration, auditing, diagnostics, monitoring probes, and more&lt;/p&gt;
&lt;p&gt;Also unlike these, Chopsticks is not wedded to SSH, so it can
transparently work on Docker containers over pipes, local
subprocesses - and in future, sudo?&lt;/p&gt;
&lt;p&gt;Daniel will demonstrate Chopsticks in action, walk through the API,
and explain the three clever tricks that Chopsticks is built on.&lt;/p&gt;
</summary></entry><entry><title>The Ladder to Python 3</title><link href="https://pyvideo.org/pycon-uk-2015/the-ladder-to-python-3.html" rel="alternate"></link><published>2015-09-20T00:00:00+00:00</published><updated>2015-09-20T00:00:00+00:00</updated><author><name>Daniel Pope</name></author><id>tag:pyvideo.org,2015-09-20:pycon-uk-2015/the-ladder-to-python-3.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&amp;quot;Python 3.0 final was released on December 3rd, 2008.&amp;quot;&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Python 3.0 Release notes&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;quot;The End Of Life date (EOL, sunset date) for Python 2.7 has been
moved [...] to 2020.&amp;quot;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;PEP 373: Python 2.7 Release Schedule&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;Migrating to Python 3 is not a big bang, it's a sequence of steps, like
the rungs of a ladder that spans from 2008 to 2020.&lt;/p&gt;
&lt;p&gt;In 2015, many people still start new projects in Python 2. Many of us
are shackled to Python 2 for work. Some of us don't even have a
migration plan. Many people at this conference, if asked to run
&amp;quot;Python&amp;quot;, will launch Python 2.&lt;/p&gt;
&lt;p&gt;Daniel will encourage you to grasp the ladder, put your feet firmly on
it, and take the next step in climbing to Python 3.&lt;/p&gt;
</summary></entry><entry><title>Scripting across hosts with Chopsticks</title><link href="https://pyvideo.org/pycon-uk-2016/scripting-across-hosts-with-chopsticks.html" rel="alternate"></link><published>2016-09-18T00:00:00+00:00</published><updated>2016-09-18T00:00:00+00:00</updated><author><name>Daniel Pope</name></author><id>tag:pyvideo.org,2016-09-18:pycon-uk-2016/scripting-across-hosts-with-chopsticks.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Daniel Pope&lt;/p&gt;
&lt;p&gt;Chopsticks lets your import and run Python code on remote Unix hosts over SSH. It works with no code deployment and no preinstalled software other than Python and SSH. It has built-in support for running code on many hosts in parallel.&lt;/p&gt;
&lt;p&gt;Unlike Fabric or Ansible, Chopsticks not opinionated about the structure of the code you run, allowing it to be used for orchestration, auditing, diagnostics, monitoring probes, and more.&lt;/p&gt;
&lt;p&gt;Also unlike these, Chopsticks is not wedded to SSH, so it can transparently work on Docker containers over pipes, local subprocesses - and in future, sudo?&lt;/p&gt;
&lt;p&gt;Daniel will demonstrate Chopsticks in action, walk through the API, and explain the three clever tricks that Chopsticks is built on.&lt;/p&gt;
</summary><category term="Chopsticks"></category></entry><entry><title>Writing Domain Specific Languages with Python</title><link href="https://pyvideo.org/europython-2015/writing-domain-specific-languages-with-python.html" rel="alternate"></link><published>2015-08-07T00:00:00+00:00</published><updated>2015-08-07T00:00:00+00:00</updated><author><name>Daniel Pope</name></author><id>tag:pyvideo.org,2015-08-07:europython-2015/writing-domain-specific-languages-with-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Daniel Pope - Writing Domain Specific Languages with Python
[EuroPython 2015]
[24 July 2015]
[Bilbao, Euskadi, Spain]&lt;/p&gt;
&lt;p&gt;Python is an expressive general purpose programming language. Its
syntax provides many ways to represent structure and minimise code
repetition and boilerplate.&lt;/p&gt;
&lt;p&gt;But Python not always expressible enough. Perhaps when you've built a
complicated enough system with hard-to-express inter-relationships,
the code required to construct or operate on it can become
complicated, repetitive and unreadable. Or perhaps you have users
unfamiliar with Python who need to understand or edit a system. In
cases like these, stepping beyond the syntax and semantics of basic
Python can be an advantage.&lt;/p&gt;
&lt;p&gt;Daniel will describe various ways you can  implement your own Domain
Specific Languages, languages perhaps completely unlike Python that
can succinctly describe more complicated Python systems.&lt;/p&gt;
&lt;p&gt;This talk will cover:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;What and why of DSLs&lt;/li&gt;
&lt;li&gt;Metaprogramming tricks&lt;/li&gt;
&lt;li&gt;Writing simple parsers&lt;/li&gt;
&lt;li&gt;The libraries PLY and PyParsing&lt;/li&gt;
&lt;li&gt;Building tooling around your new DSLs&lt;/li&gt;
&lt;/ul&gt;
</summary></entry><entry><title>Pygame Zero</title><link href="https://pyvideo.org/europython-2016/pygame-zero.html" rel="alternate"></link><published>2016-07-28T00:00:00+00:00</published><updated>2016-07-28T00:00:00+00:00</updated><author><name>Daniel Pope</name></author><id>tag:pyvideo.org,2016-07-28:europython-2016/pygame-zero.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Daniel Pope - Pygame Zero
[EuroPython 2016]
[18 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/pygame-zero"&gt;https://ep2016.europython.eu//conference/talks/pygame-zero&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Pygame Zero is a new game engine for education, built on top of
Pygame. It makes writing your first games extremely simple, while
saving beginners from certain potential pitfalls. Daniel will
introduce Pygame Zero, walk through creating a simple game, and
discuss the background for Python in education and the design
philosophy behind Pygame Zero.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;Pygame Zero is a new game engine for education, built on top of
Pygame. It makes writing your first games extremely simple, while
saving beginners from certain potential pitfalls. This talk will
introduce Pygame Zero, walk through creating a simple game, and
discuss the background for Python in education and the design
philosophy behind Pygame Zero.&lt;/p&gt;
&lt;p&gt;Pygame is a powerful set of libraries for graphics, sound, input and
more. But it is just a library: each program needs to import and set
up the libraries, implement a game loop and load resources among
numerous other concerns. While seasoned Pythonistas have no trouble
with this, teachers told us that they found it difficult to teach with
Pygame. There is simply too much boilerplate involved, and getting
students to reproduce the boilerplate perfectly before useful lessons
can begin takes too much time out of a 40-minute lesson.&lt;/p&gt;
&lt;p&gt;Pygame Zero is simple enough that a lesson can be broken down into
bitesize steps where meaningful progress can be made with just a
couple of lines of code at a time.&lt;/p&gt;
</summary></entry><entry><title>gevent: asynchronous I/O made easy</title><link href="https://pyvideo.org/europython-2014/gevent-asynchronous-io-made-easy.html" rel="alternate"></link><published>2014-07-23T00:00:00+00:00</published><updated>2014-07-23T00:00:00+00:00</updated><author><name>Daniel Pope</name></author><id>tag:pyvideo.org,2014-07-23:europython-2014/gevent-asynchronous-io-made-easy.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;gevent provides highly scalable asynchronous I/O without becoming a nest
of callbacks, or even needing code changes.&lt;/p&gt;
&lt;p&gt;Daniel will explain how to get started with gevent, discuss patterns for
its use and describe the differences with Twisted, Tornado and
Tulip/asyncio.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;It has been claimed &amp;quot;Callbacks are the new GOTO&amp;quot;. Most asynchronous IO
libraries use callbacks extensively.&lt;/p&gt;
&lt;p&gt;gevent (&lt;a class="reference external" href="http://www.gevent.org"&gt;http://www.gevent.org&lt;/a&gt;) uses coroutines to provide highly
scalable asynchronous I/O with a synchronous programming model that
doesn't need code changes and callbacks. By elegantly monkey patching
the Python standard library, both your code and all pure Python
libraries become asynchronous too, making a separate collection of
protocol implementations (in the style of Twisted) unnecessary.&lt;/p&gt;
&lt;p&gt;Code written like this is easier to understand, particularly for more
junior developers. Crucially, IO errors can be raised at the right
places.&lt;/p&gt;
&lt;p&gt;I will be introducing gevent's programming model, why it's easier, walk
through simple code samples, and discuss experiences and metaphors for
programming with it.&lt;/p&gt;
</summary></entry></feed>