<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Sat, 18 Aug 2018 00:00:00 +0000</lastBuildDate><item><title>Lightning Talks Day 3 Round 2</title><link>https://pyvideo.org/pybay-2018/lightning-talks-day-3-round-2.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Amjith Ramanujam</dc:creator><pubDate>Sat, 18 Aug 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-08-18:pybay-2018/lightning-talks-day-3-round-2.html</guid></item><item><title>How Netflix does failovers in 7 minutes flat</title><link>https://pyvideo.org/pycon-us-2018/how-netflix-does-failovers-in-7-minutes-flat.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;During peak hours, Netflix video streams make up more than one third of internet traffic. Netflix must stream uninterrupted in the face of widespread network issues, bad code deploys, AWS service outages, and much more. Failovers make this possible.&lt;/p&gt;
&lt;p&gt;Failover is the process of transferring all of our traffic from one region in AWS to another. While most of Netflix runs on Java, failovers are powered entirely by Python. Python's versatility and rich ecosystem means we can use it for everything from predicting our traffic patterns to orchestrating traffic movement, while dealing with the eventual consistency of AWS.&lt;/p&gt;
&lt;p&gt;Today, we can shift all of our 100 million+ users in under seven minutes. A lot of engineering work went into making this possible. The issues we faced and solutions we created have broad application to availability strategies in the cloud or the datacenter.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Amjith Ramanujam</dc:creator><pubDate>Sat, 12 May 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-05-12:pycon-us-2018/how-netflix-does-failovers-in-7-minutes-flat.html</guid></item><item><title>Awesome Command Line Tools</title><link>https://pyvideo.org/pycon-us-2017/awesome-command-line-tools.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Designing a good command line tool is challenging. Command line tools
look archaic compared to modern graphical interfaces, discoverability is
a big issue for command line tools, proactive help is hard to implement.
This talk will cover a set of specific techniques to help alleviate
those challenges.&lt;/p&gt;
&lt;p&gt;How did &lt;a class="reference external" href="http://pgcli.com"&gt;pgcli&lt;/a&gt; and &lt;a class="reference external" href="http://mycli.net"&gt;mycli&lt;/a&gt;
overcome these problems? We will cover specific examples where command
line apps shine. The examples will be drawn from pgcli, mycli and
&lt;a class="reference external" href="http://bpython-interpreter.org/"&gt;bpython&lt;/a&gt;. This talk will suggest
libraries and show how they can help you implement a wonderful command
line interface.&lt;/p&gt;
&lt;p&gt;The libraries covered in this talk include
&lt;a class="reference external" href="https://github.com/jonathanslenders/python-prompt-toolkit"&gt;python-prompt-toolkit&lt;/a&gt;,
&lt;a class="reference external" href="http://pygments.org/"&gt;pygments&lt;/a&gt;,
&lt;a class="reference external" href="http://click.pocoo.org/"&gt;click&lt;/a&gt;,
&lt;a class="reference external" href="https://github.com/amjith/fuzzyfinder"&gt;fuzzyfind&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The goal of the talk is to distil the ideas that exist in successful
command line applications as guidelines for building powerful command
line applications.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Amjith Ramanujam</dc:creator><pubDate>Sat, 20 May 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-05-20:pycon-us-2017/awesome-command-line-tools.html</guid></item><item><title>Introduction to Docker</title><link>https://pyvideo.org/djangocon-europe-2014/introduction-to-docker.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Docker is an open source tool that simplifies managing Linux containers.
A container is a sandbox environment that runs a collection of
processes. Containers are light-weight VMs that share the same kernel as
the host OS.&lt;/p&gt;
&lt;p&gt;Docker adds some niceties to Linux containers such as AUFS, version
control, docker registry (repository), versioning etc. This talk will
serve as an introduction to working with docker tools. I'll cover the
basic concepts behind docker and explain the difference between a docker
container and a VM. Show a demo of how easy it is to create a docker
image and launch a container from it. Briefly explain the idea behind
Dockerfile and show some examples.&lt;/p&gt;
&lt;p&gt;I'll cover how networking and filesystem changes are handled in Docker.
Show a demo of how to deploy a Django application in docker and explain
why it's useful to do so in production.&lt;/p&gt;
&lt;p&gt;I'll also cover some common use cases of docker in the industry such as
testing, deployment, PAAS etc.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Amjith Ramanujam</dc:creator><pubDate>Thu, 15 May 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-05-15:djangocon-europe-2014/introduction-to-docker.html</guid></item><item><title>DjangoCon EU 2013: Amjith Ramanujam - Thread Profiling in Python</title><link>https://pyvideo.org/djangocon-europe-2013/djangocon-eu-2013-amjith-ramanujam-thread-profiling-in-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Videos from DjangoCon Europe 2013 are kindly provided by Heroku, a cloud application platform -- a new way of building and deploying web apps: &lt;a class="reference external" href="http://heroku.com/"&gt;http://heroku.com/&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Amjith Ramanujam</dc:creator><pubDate>Wed, 15 May 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-05-15:djangocon-europe-2013/djangocon-eu-2013-amjith-ramanujam-thread-profiling-in-python.html</guid></item><item><title>Debugging Live Python Web Applications</title><link>https://pyvideo.org/djangocon-us-2012/debugging-live-python-web-applications.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Monitoring tools record the result of what happened to your web
application when a problem arises, but for some classes of problems,
monitoring systems are only a starting point. Sometimes it is necessary
to take more intrusive steps to plan for the unexpected by embedding
mechanisms that will allow you to interact with a live deployed web
application and extract even more detailed information.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk will go over some of the ways in which a monitoring system
such as New Relic can be used to focus in on where problems are arising
in a Python web application using a framework such as Django. It will
also describe how you can then use that information to drill down even
further by applying separate debugging tools and techniques rather than
monitoring systems. Debugging tools aren't generally associated with
production systems however and even mentioning them in relation to
production systems often makes DevOps people rather nervous.&lt;/p&gt;
&lt;p&gt;The main purpose of the talk therefore is to look at a range of
debugging tools and techniques which can be applied to web applications
but also separate them into what might and might not be realistically
used on live production web applications. It will then describe the use
of an embedded interactive console port as a gateway into a live web
application, how one may setup a set of predefined commands that could
be issued against a live web application, or for the brave, how it could
be used to fire up an embedded Python interpreter prompt or pdb session.&lt;/p&gt;
&lt;p&gt;Topics to be touched on would include:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Browser viewable error pages.&lt;/li&gt;
&lt;li&gt;Browser based debuggers.&lt;/li&gt;
&lt;li&gt;Python interactive debuggers.&lt;/li&gt;
&lt;li&gt;Post-mortem exception analysis.&lt;/li&gt;
&lt;li&gt;Methods for dumping Python stack traces&lt;/li&gt;
&lt;li&gt;Methods for dumping C stack traces.&lt;/li&gt;
&lt;li&gt;Methods for analyzing thread utilization.&lt;/li&gt;
&lt;li&gt;Interactive process introspection tools.&lt;/li&gt;
&lt;li&gt;Error reporting and logging services.&lt;/li&gt;
&lt;li&gt;Performance monitoring services.&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Amjith Ramanujam</dc:creator><pubDate>Tue, 04 Sep 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-09-04:djangocon-us-2012/debugging-live-python-web-applications.html</guid><category>debugging</category><category>django</category></item><item><title>Python Profiling</title><link>https://pyvideo.org/pycon-us-2013/python-profiling.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;This talk will give a tour of different profiling techniques available
for Python applications. We'll cover specific modules in Python for
doing function profiling and line level profiling. We'll show the short
comings of such mechanisms in production and discuss how to do sampled
profiling of specific functions. We'll finish with statistical profilers
that use thread stack interrogation.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Amjith Ramanujam</dc:creator><pubDate>Fri, 15 Mar 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-03-15:pycon-us-2013/python-profiling.html</guid><category>talk</category></item><item><title>Introduction to Docker</title><link>https://pyvideo.org/pycon-us-2014/introduction-to-docker.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Docker is a tool for sandboxing entire application environments using
Linux containers. Docker's feature set includes versioning, sharing etc.
They are light-weight and fast, you can recreate a deployment
environment in development or push your development containers to
production. Imagine never having to worry about fragmentation of servers
or syncing the versions of different libraries.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Amjith Ramanujam</dc:creator><pubDate>Sun, 13 Apr 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-04-13:pycon-us-2014/introduction-to-docker.html</guid></item></channel></rss>