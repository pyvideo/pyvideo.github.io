<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_ganesh-swami.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2017-08-14T00:00:00+00:00</updated><entry><title>Butter smooth, interactive applications with Django and Websockets</title><link href="https://pyvideo.org/djangocon-us-2017/butter-smooth-interactive-applications-with-django-and-websockets.html" rel="alternate"></link><published>2017-08-14T00:00:00+00:00</published><updated>2017-08-14T00:00:00+00:00</updated><author><name>Ganesh Swami</name></author><id>tag:pyvideo.org,2017-08-14:djangocon-us-2017/butter-smooth-interactive-applications-with-django-and-websockets.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;DjangoCon US 2017 - Butter smooth, interactive applications with Django and Websockets by Ganesh Swami&lt;/p&gt;
&lt;p&gt;Web applications have changed significantly over the years – from simple static pages, to sprinkling interactiveness with JQuery/AJAX, to full dynamic single page apps. Through each evolution, we’re adding more complexity, more data and more asynchronous behavior to our applications.&lt;/p&gt;
&lt;p&gt;In this new world, where does the synchronous nature of Django’s request-response cycle fit in?&lt;/p&gt;
&lt;p&gt;My talk will focus on the topics around asynchronous Django applications. I’ll be sharing some lessons we learnt while building and scaling an interactive web application within the confines of Django and django-channels.&lt;/p&gt;
&lt;p&gt;This topic is interesting because there’s been a lot of interest with meteor-like frameworks that have synchronized state between the frontend and backend. My intention is to show the audience that you can accomplish the same end-result with Django, without the need to learn and deploy a brand new framework.&lt;/p&gt;
&lt;p&gt;An outline I have in mind:&lt;/p&gt;
&lt;p&gt;What does asynchrony mean, and why you need it.&lt;/p&gt;
&lt;p&gt;Traditional methods of achieving asynchrony (delayed jobs using worker queues like celery, long-polling for messaging, etc.)&lt;/p&gt;
&lt;p&gt;Why django-channels changes the game.&lt;/p&gt;
&lt;p&gt;How to architect your state.&lt;/p&gt;
&lt;p&gt;What are the available options for deployment.&lt;/p&gt;
&lt;p&gt;Gotchas, and what to do when things go wrong.&lt;/p&gt;
&lt;p&gt;Just a basic knowledge of Django is required, as the topics are transferable to other frameworks. We did not have to monkey-patch any of the drivers to achieve asynchrony, so what you’ll learn at my talk will apply cleanly to a stock Django.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://2017.djangocon.us/talks/butter-smooth-interactive-applications-with-django-and-websockets/"&gt;https://2017.djangocon.us/talks/butter-smooth-interactive-applications-with-django-and-websockets/&lt;/a&gt;&lt;/p&gt;
</summary></entry></feed>