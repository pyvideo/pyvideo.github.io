<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_shay-palachy.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2018-06-05T00:00:00+00:00</updated><entry><title>Pied PyPIer: Why packaging is important</title><link href="https://pyvideo.org/pycon-israel-2018/pied-pypier-why-packaging-is-important.html" rel="alternate"></link><published>2018-06-05T00:00:00+00:00</published><updated>2018-06-05T00:00:00+00:00</updated><author><name>Shay Palachy</name></author><id>tag:pyvideo.org,2018-06-05:pycon-israel-2018/pied-pypier-why-packaging-is-important.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Pied PyPIer: Why packaging is important for both close and open data science projects&lt;/p&gt;
&lt;p&gt;When working on data science projects we are often tempted to leave our code to rot in scattered notebooks or Python modules deep in the project’s repository.&lt;/p&gt;
&lt;p&gt;However, even when you can’t release parts of your code as open source, breaking some important components into standalone Python packages can help with managing technical debt and code maintenance, facilitate in-house code reuse and repurposing, and make production-ising and deployment of code easier.&lt;/p&gt;
&lt;p&gt;In this talk I'll try to demonstrate the ways treating your components and problem solutions as independent packages can benefit both your colleagues and (present and future) you, and review the tools Python provides for building and managing these packages, both in-company and openly.&lt;/p&gt;
&lt;p&gt;I will also share from my experience in packaging some of my code, and discuss the extra benefits from open sourcing packages even when they are used mainly internally.&lt;/p&gt;
</summary></entry></feed>