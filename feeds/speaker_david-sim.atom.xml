<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_david-sim.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2019-09-14T00:00:00+00:00</updated><entry><title>One weird trick for improving your communication</title><link href="https://pyvideo.org/pycon-uk-2019/one-weird-trick-for-improving-your-communication.html" rel="alternate"></link><published>2019-09-14T00:00:00+00:00</published><updated>2019-09-14T00:00:00+00:00</updated><author><name>David Sim</name></author><id>tag:pyvideo.org,2019-09-14:pycon-uk-2019/one-weird-trick-for-improving-your-communication.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The best advice I've been given on technical communication is 'understand what you want to achieve before you think about what you want to say'. I'm going to discuss why I think this is important, with examples ranging from planning meetings to writing documentation.&lt;/p&gt;
</summary></entry><entry><title>Make Testing Easier by Writing Better Code</title><link href="https://pyvideo.org/pycon-uk-2018/make-testing-easier-by-writing-better-code.html" rel="alternate"></link><published>2018-09-16T00:00:00+00:00</published><updated>2018-09-16T00:00:00+00:00</updated><author><name>David Sim</name></author><id>tag:pyvideo.org,2018-09-16:pycon-uk-2018/make-testing-easier-by-writing-better-code.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Like a lot of people, I like to have well tested code, and like a lot of
people I sometimes find it hard work to write good tests for my code.
Sometimes the solution is just to get better at writing tests, but I've
often found that when I'm struggling to write a good test for some code,
it's a sign that there's something I could improve about the code
itself.&lt;/p&gt;
&lt;p&gt;In this talk, I'd like to explain why I think this happens. I'll then
give a series of examples of problems that I've encountered when testing
code, and how you can solve these problems, often by applying fairly
basic principles, while making your code better at the same time.&lt;/p&gt;
&lt;p&gt;The talk should be accessible to programmers of all levels.&lt;/p&gt;
</summary></entry><entry><title>MyPy: The Good, The Bad and The Ugly</title><link href="https://pyvideo.org/pycon-uk-2017/mypy-the-good-the-bad-and-the-ugly.html" rel="alternate"></link><published>2017-10-29T12:30:00+01:00</published><updated>2017-10-29T12:30:00+01:00</updated><author><name>David Sim</name></author><id>tag:pyvideo.org,2017-10-29:pycon-uk-2017/mypy-the-good-the-bad-and-the-ugly.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;We tried adding MyPy type hints to a few thousand lines of reasonably hairy production code. This talk will discuss some of the challenges that we encountered, how we dealt with them, what we learnt, and whether we thought it was worth all the effort. (Spoiler: we did think it was worth all the effort.)&lt;/p&gt;
&lt;p&gt;I won't have time to give a full overview of MyPy, but I will try to cover enough basics that the talk is mostly accessible to people who aren't already familiar with it.&lt;/p&gt;
</summary><category term="mypy"></category></entry></feed>