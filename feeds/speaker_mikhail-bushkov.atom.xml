<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_mikhail-bushkov.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2019-07-12T00:00:00+00:00</updated><entry><title>Evolving a helper script into a 180,000-lines-of-Python-code project</title><link href="https://pyvideo.org/europython-2019/evolving-a-helper-script-into-a-180000-lines-of-python-code-project.html" rel="alternate"></link><published>2019-07-12T00:00:00+00:00</published><updated>2019-07-12T00:00:00+00:00</updated><author><name>Mikhail Bushkov</name></author><id>tag:pyvideo.org,2019-07-12:europython-2019/evolving-a-helper-script-into-a-180000-lines-of-python-code-project.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;GRR Rapid Response (&lt;a class="reference external" href="https://github.com/google/grr"&gt;https://github.com/google/grr&lt;/a&gt;) is an incident
response framework focused on remote live forensics.&lt;/p&gt;
&lt;p&gt;It consists of a Python client (agent) that is installed on target
systems, and Python server infrastructure that can manage and talk to
clients. The goal of GRR is to support forensics and investigations in a
fast, scalable manner to allow analysts to quickly triage attacks and
perform analysis remotely.&lt;/p&gt;
&lt;p&gt;GRR was started at Google in 2009 as a simple Python helper script used
by Incident Response engineers. Eventually a little Python script got a
little server component, was adapted to run on multiple systems (Mac,
Linux, Windows), then a little UI was added and a few nice features were
introduced (large-scale hunts, collection of predefined artifacts,
memory analysis). A helper script has eventually evolved into a
sophisticated framework with 180,000 lines of Python code.&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;In the presentation we’ll talk about the process of evolving a small
prototype-like Python project into a production-ready system, using
GRR as an example. The topics that we’ll cover are:&lt;/div&gt;
&lt;div class="line"&gt;* Taking shortcuts - both in terms of design and implementation.
Reasons for taking them and their eventual costs.&lt;/div&gt;
&lt;div class="line"&gt;* Relying on Python’s power features (i.e. meta-classes, mixins)?
Long-term consequences on maintainability and readability.&lt;/div&gt;
&lt;div class="line"&gt;* Organising the project into separate PyPI packages - benefits of
doing that.&lt;/div&gt;
&lt;div class="line"&gt;* Continuous integration, testing and automated builds for various
platforms - implementation costs and maintainability effects.&lt;/div&gt;
&lt;/div&gt;
</summary><category term="Databases"></category><category term="Deployment/Continuous Integration and Delivery"></category><category term="Development"></category><category term="Open-Source"></category><category term="Security"></category></entry></feed>