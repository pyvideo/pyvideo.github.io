<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org - Jules S. Damji</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_jules-s-damji.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2023-07-10T00:00:00+00:00</updated><subtitle></subtitle><entry><title>Distributed Python with Ray: Hands-on with the Ray Core APIs</title><link href="https://pyvideo.org/pycon-us-2022/distributed-python-with-ray-hands-on-with-the-ray-core-apis.html" rel="alternate"></link><published>2022-04-27T00:00:00+00:00</published><updated>2022-04-27T00:00:00+00:00</updated><author><name>Jules S. Damji</name></author><id>tag:pyvideo.org,2022-04-27:/pycon-us-2022/distributed-python-with-ray-hands-on-with-the-ray-core-apis.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Please note: Audio and speaker video do not start until 01:28:26. Our apologies for this.&lt;/p&gt;
&lt;p&gt;This is an introductory and hands-on guided tutorial of Ray Core. Ray provides powerful yet easy-to-use design patterns for implementing distributed systems in Python. This tutorial includes a brief talk to provide …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Please note: Audio and speaker video do not start until 01:28:26. Our apologies for this.&lt;/p&gt;
&lt;p&gt;This is an introductory and hands-on guided tutorial of Ray Core. Ray provides powerful yet easy-to-use design patterns for implementing distributed systems in Python. This tutorial includes a brief talk to provide an overview of concepts, why one might use Ray for distributing Python and Machine Learning workloads, and a brief discussion on Ray’s Ecosystem.&lt;/p&gt;
&lt;p&gt;Primarily, the tutorial will focus on Ray Core APIs to write remote functions, actors, and understand Ray’s basic design patterns for writing distributed Python applications.&lt;/p&gt;
</content><category term="PyCon US 2022"></category><category term="tutorial"></category></entry><entry><title>Modern compute stack for scaling large AI/ML workloads</title><link href="https://pyvideo.org/scipy-2023/modern-compute-stack-for-scaling-large-aiml-workloads.html" rel="alternate"></link><published>2023-07-10T00:00:00+00:00</published><updated>2023-07-10T00:00:00+00:00</updated><author><name>Jules S. Damji</name></author><id>tag:pyvideo.org,2023-07-10:/scipy-2023/modern-compute-stack-for-scaling-large-aiml-workloads.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Existing production machine learning systems often suffer from various problems that make them hard to use. For example, data scientists and ML practitioners often spend most of their time stitching and managing bespoke distributed systems to build end-to-end ML applications and push models to production.&lt;/p&gt;
&lt;p&gt;To address this, the …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Existing production machine learning systems often suffer from various problems that make them hard to use. For example, data scientists and ML practitioners often spend most of their time stitching and managing bespoke distributed systems to build end-to-end ML applications and push models to production.&lt;/p&gt;
&lt;p&gt;To address this, the Ray community has built Ray AI Runtime (Ray AIR), an open-source toolkit for building large-scale end-to-end ML applications.&lt;/p&gt;
</content><category term="SciPy 2023"></category></entry></feed>