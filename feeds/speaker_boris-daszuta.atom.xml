<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_boris-daszuta.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2016-09-11T00:00:00+00:00</updated><entry><title>A path to multi(arbitrary)-precision, distributed scientific computation with Python3.</title><link href="https://pyvideo.org/kiwi-pycon-2016/a-path-to-multiarbitrary-precision-distributed-scientific-computation-with-python3.html" rel="alternate"></link><published>2016-09-11T00:00:00+00:00</published><updated>2016-09-11T00:00:00+00:00</updated><author><name>Boris Daszuta</name></author><id>tag:pyvideo.org,2016-09-11:kiwi-pycon-2016/a-path-to-multiarbitrary-precision-distributed-scientific-computation-with-python3.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Boris Daszuta
&lt;a class="reference external" href="https://kiwi.pycon.org/schedule/presentation/138/"&gt;https://kiwi.pycon.org/schedule/presentation/138/&lt;/a&gt;
On occasion scientific computations at double(quadruple) precision are simply not sufficient. In lieu of the usual NumPy and SciPy one can instead make use of mpmath or SymPy. For a 'large-scale' calculation one must appeal to parallelism and indeed distributed resources (eg. Dask-distributed). We describe a package that provides for library delegation based on calculation requirements at runtime.&lt;/p&gt;
</summary></entry></feed>