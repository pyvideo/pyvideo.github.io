<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Fri, 19 Feb 2010 00:00:00 +0000</lastBuildDate><item><title>PyCon 2009: The (lack of) design patterns in Python (#60)</title><link>https://pyvideo.org/pycon-us-2009/pycon-2009--the--lack-of--design-patterns-in-pyth.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The (lack of) design patterns in Python&lt;/p&gt;
&lt;p&gt;Presented at PyCon 2009 by Joe Gregorio&lt;/p&gt;
&lt;p&gt;There is a distinct lack of Design Patterns discussed in relation to
Python. Are the communities ignorant of Design Patterns or is there
something else going on here? This talk is based on my well-trafficked
article &amp;quot;Python isn't just Java without the compile&amp;quot; and expands on that
article by using Design Patterns as a crude metric of gaps in a
programming language.&lt;/p&gt;
&lt;p&gt;[VIDEO HAS ISSUES: ]&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Unknown</dc:creator><pubDate>Tue, 17 Feb 2009 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2009-02-17:pycon-us-2009/pycon-2009--the--lack-of--design-patterns-in-pyth.html</guid><category>designpatterns</category><category>pycon</category><category>pycon2009</category></item><item><title>Powerful Pythonic Patterns (#186)</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--powerful-pythonic-patterns---186.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Powerful Pythonic Patterns video&lt;/p&gt;
&lt;p&gt;Presented by Alex Martelli&lt;/p&gt;
&lt;p&gt;An extremely misguided meme is going around: that Python doesn't have,
or need, any Design Patterns. Maybe the meme springs from not realizing
what the Gang Of Four state so plainly in their historical &amp;quot;Design
Patterns&amp;quot; book: which design patterns are useful DOES depend on the
programming language one targets -- design is NOT independent of
implementation, as the epic-fail &amp;quot;Waterfall&amp;quot; Methodology Pattern would
suggest. If you examine a &amp;quot;classic DP&amp;quot; that's basically a workaround for
some other language's lack of garbage collection, or for a clumsy
static-typing system, it may indeed be worthless for Python. But many
other DPs are still perfectly useful and applicable, and indeed Python's
strengths as a language afford riffing on them to develop highly
Pythonic, powerful, productive variants.&lt;/p&gt;
&lt;p&gt;In this talk, I analyze some of my favorite pattern families -- e.g.,
Template Method and its variants, Dependency Injection and its ilk,
Callback and friends -- in a highly Pythonic context. Non-pattern
Idioms, and Patterns that aren't really Design Patterns but rather
Architecture or Methodology ones, also make cameo appearances.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alex Martelli</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--powerful-pythonic-patterns---186.html</guid><category>designpatterns</category><category>pycon</category><category>pycon2010</category><category>python-advanced</category></item></channel></rss>