<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org - Dane Hillard</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Sun, 13 Apr 2025 00:00:00 +0000</lastBuildDate><item><title>Serverless Django with Zappa</title><link>https://pyvideo.org/djangocon-us-2018/serverless-django-with-zappa.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A common set of considerations when planning to release a new
application are around hosting and resources:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Which platforms will support my app?&lt;/li&gt;
&lt;li&gt;What OS should I use?&lt;/li&gt;
&lt;li&gt;What WSGI server should I use?&lt;/li&gt;
&lt;li&gt;How much memory and CPU do I need?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Zappa, a framework for running serverless WSGI applications on top of
AWS Lambda, can help address these and other questions around
application deployment. With some configuration (as code), Zappa can get
you up and running quickly, letting you focus on developing the
application instead of the infrastructure.&lt;/p&gt;
&lt;p&gt;In this talk weâ€™ll go through some of these kinds of questions to see
how they might be answered in traditional solutions and then see how
Zappa handles them. Weâ€™ll also talk about a few specific configuration
options for handling SSL certificates and running Django commands on the
Zappa-deployed application.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dane Hillard</dc:creator><pubDate>Tue, 16 Oct 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-10-16:/djangocon-us-2018/serverless-django-with-zappa.html</guid><category>DjangoCon US 2018</category></item><item><title>Lightning Talks Day 2</title><link>https://pyvideo.org/djangocon-us-2019/lightning-talks-day-2.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;DjangoCon 2019 - Lightning Talks by Kojo Idrissa&lt;/p&gt;
&lt;p&gt;Adem Gaygusuz 00:00
Laura Lorenz 5:24
Micah Lyle 10:23
Vince Salvino 15:14
Russell Keith-Magee 20:24
Brad Martsberger 25:19
Jeremy Gatens 30:21
Dane Hillard 35:31
Caleb Collins-Parks 40:27&lt;/p&gt;
&lt;p&gt;This talk was presented at: &lt;a class="reference external" href="https://2019.djangocon.us/talk/lightning-talks/"&gt;https://2019.djangocon.us/talk/lightning-talks/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;LINKS:
Follow Kojo Idrissa ðŸ‘‡
On Twitter: &lt;a class="reference external" href="https://twitter.com/Transition"&gt;https://twitter.com/Transition&lt;/a&gt;
Official homepage: &lt;a class="reference external" href="http://kojoidrissa.com/"&gt;http://kojoidrissa.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Follow DjangCon US ðŸ‘‡
&lt;a class="reference external" href="https://twitter.com/djangocon"&gt;https://twitter.com/djangocon&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Follow DEFNA ðŸ‘‡
&lt;a class="reference external" href="https://twitter.com/defnado"&gt;https://twitter.com/defnado&lt;/a&gt;
&lt;a class="reference external" href="https://www.defna.org/"&gt;https://www.defna.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Intro music: &amp;quot;This Is How We Quirk It&amp;quot; by Avocado Junkie.
Video production by Confreaks TV.
Captions by White Coat Captioning.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Adem Gaygusuz</dc:creator><pubDate>Tue, 24 Sep 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-09-24:/djangocon-us-2019/lightning-talks-day-2.html</guid><category>DjangoCon US 2019</category></item><item><title>Using a custom template loader at scale</title><link>https://pyvideo.org/djangocon-us-2019/using-a-custom-template-loader-at-scale.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;DjangoCon 2019 - Using a custom template loader at scale by Dane Hillard&lt;/p&gt;
&lt;p&gt;You can reuse Django templates with the &lt;cite&gt;{% include %}&lt;/cite&gt; tag. But what if you need to share a template across multiple projects? Learn how we built a custom template loader to ship template changes â€” all without deploying any code.&lt;/p&gt;
&lt;p&gt;This talk was presented at: &lt;a class="reference external" href="https://2019.djangocon.us/talks/using-a-custom-template-loader-at-scale/"&gt;https://2019.djangocon.us/talks/using-a-custom-template-loader-at-scale/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;LINKS:
Follow Dane Hillard ðŸ‘‡
On Twitter: &lt;a class="reference external" href="https://twitter.com/easyaspython"&gt;https://twitter.com/easyaspython&lt;/a&gt;
Official homepage: &lt;a class="reference external" href="https://dane.engineering"&gt;https://dane.engineering&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Follow DjangCon US ðŸ‘‡
&lt;a class="reference external" href="https://twitter.com/djangocon"&gt;https://twitter.com/djangocon&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Follow DEFNA ðŸ‘‡
&lt;a class="reference external" href="https://twitter.com/defnado"&gt;https://twitter.com/defnado&lt;/a&gt;
&lt;a class="reference external" href="https://www.defna.org/"&gt;https://www.defna.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Intro music: &amp;quot;This Is How We Quirk It&amp;quot; by Avocado Junkie.
Video production by Confreaks TV.
Captions by White Coat Captioning.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dane Hillard</dc:creator><pubDate>Mon, 23 Sep 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-09-23:/djangocon-us-2019/using-a-custom-template-loader-at-scale.html</guid><category>DjangoCon US 2019</category></item><item><title>graphene-django or: How I learned to stop RESTing and Love the Graph</title><link>https://pyvideo.org/djangocon-us-2021/graphene-django-or-how-i-learned-to-stop-resting-and-love-the-graph.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Though controversial, people generally agree that a major value of Python type hints is safety. Robust type safety reduces a whole category of defect to nothing, allowing developers to focus on bigger problems. What if we could do this for our API calls?&lt;/p&gt;
&lt;p&gt;GraphQL provides not just a query language, but a type system. The producer and consumer are both aware of the type schema, enabling a boost in productivity at an integration point where mistakes commonly occur. Django has long been a full stack engine at its core, and then a RESTful API engine with the wide adoption of django-rest framework. Where can it go next?&lt;/p&gt;
&lt;p&gt;The graphene-django package enables a Django project to provide a GraphQL endpoint built from its models. Using a declarative style most Djangonauts will find beautifully familiar, graphene-django helps developers spin up APIs quickly for consumption by client-side GraphQL consumers like [Apollo](&lt;a class="reference external" href="https://www.apollographql.com/"&gt;https://www.apollographql.com/&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;If you attend this talk, you'll come away having learned:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;How GraphQL compares to REST&lt;/li&gt;
&lt;li&gt;Why this approach can help you maintain loose coupling between teams&lt;/li&gt;
&lt;li&gt;How to build GraphQL types on top of your Django models&lt;/li&gt;
&lt;li&gt;How to provide a schema that resolves queries to model fields&lt;/li&gt;
&lt;li&gt;How to try your new API out in the browser&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dane Hillard</dc:creator><pubDate>Fri, 22 Oct 2021 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2021-10-22:/djangocon-us-2021/graphene-django-or-how-i-learned-to-stop-resting-and-love-the-graph.html</guid><category>DjangoCon US 2021</category></item><item><title>Keeping code safe and modern with semantic searches</title><link>https://pyvideo.org/pygotham-2021/keeping-code-safe-and-modern-with-semantic-searches.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Linting helps us avoid common mistakes and use our team's preferred style
and syntax. Deprecation warnings help us know that changes may be coming
soon and offer suggestions about how to migrate.&lt;/p&gt;
&lt;p&gt;Existing linting tools and deprecation systems aren't always customizable or
extensible to organization-specific checks. Some constructs are also
difficult to search for with regular expressions, which is a common
configuration offering.&lt;/p&gt;
&lt;p&gt;The time leading up to and during a migration often becomes a pain, leading
to all-at-once changes that slow teams down. Can we do better?&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dane Hillard</dc:creator><pubDate>Fri, 01 Oct 2021 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2021-10-01:/pygotham-2021/keeping-code-safe-and-modern-with-semantic-searches.html</guid><category>PyGotham 2021</category></item><item><title>Adopt-a-pytest</title><link>https://pyvideo.org/pyohio-2019/adopt-a-pytest.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;pytest is a testing framework that makes writing and running Python
tests simpler. Adopting new tooling in a large system is often a burden.
How can you introduce pytest gradually with minimal pain?&lt;/p&gt;
&lt;div class="section" id="who"&gt;
&lt;h4&gt;Who&lt;/h4&gt;
&lt;p&gt;This is for anyone currently using &lt;tt class="docutils literal"&gt;unittest&lt;/tt&gt; for Python unit testing
that would like to adopt &lt;tt class="docutils literal"&gt;pytest&lt;/tt&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="takeaways"&gt;
&lt;h4&gt;Takeaways&lt;/h4&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;How to run &lt;tt class="docutils literal"&gt;pytest&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;How to create a basic &lt;tt class="docutils literal"&gt;pytest&lt;/tt&gt; configuration&lt;/li&gt;
&lt;li&gt;Using &lt;tt class="docutils literal"&gt;pytest&lt;/tt&gt; marks to shim an existing project&lt;/li&gt;
&lt;li&gt;Converting a &lt;tt class="docutils literal"&gt;unittest&lt;/tt&gt; test to &lt;tt class="docutils literal"&gt;pytest&lt;/tt&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="what"&gt;
&lt;h4&gt;What&lt;/h4&gt;
&lt;p&gt;With its simplified syntax, powerful fixture behaviors, detailed test
reports, and plugin-based architecture, &lt;tt class="docutils literal"&gt;pytest&lt;/tt&gt; has a lot to offer.
Whether you're new to Python unit testing or you've been using
&lt;tt class="docutils literal"&gt;unittest&lt;/tt&gt; for a while, &lt;tt class="docutils literal"&gt;pytest&lt;/tt&gt; may be something to consider. It's
not too hard to get up and running with &lt;tt class="docutils literal"&gt;pytest&lt;/tt&gt; on a fresh project,
but how can you retrofit an existing project without having to refactor
the world all at once?&lt;/p&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dane Hillard</dc:creator><pubDate>Sat, 27 Jul 2019 11:15:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-07-27:/pyohio-2019/adopt-a-pytest.html</guid><category>PyOhio 2019</category></item><item><title>Place-making &amp; productivity: Build maintainable tools with a small team</title><link>https://pyvideo.org/pytexas-2025/place-making-productivity-build-maintainable-tools-with-a-small-team.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;As we bring on new team members, we want to ensure they can ramp up quickly and have a good experience. They should be able to understand &amp;quot;the company way&amp;quot; of accomplishing things and quickly find the tools they need to do their job. Veteran team members should also be able to codify and commoditize the patterns they've developed over time so they can focus on higher-order problems. In large organizations, such tooling might be the purview of a dedicated platform engineering team and have a budget to match. But what if you're a small team, or a team of one, and you want to build something that scales to the whole organization without becoming a full-time job? At ITHAKA, over 100 engineering staff manage hundreds of applications in a handful of languages and frameworks across many teams and products. Despite the variety, most of those engineers still need to perform a core set of tasks when developing, from debugging to traffic routing to feature toggles. Teams are always working on high-priority projects, and it can be difficult to find the time to take stock of things that can be better streamlined or automated. Further, although we have a platform engineering team, as a non-profit we don't have the budget for someone to work on meta-tooling as a full-time job. Over time, several aspects of our development process have become common sources of friction, with a lot of time spent answering questions or debugging local machine setups. In this talk I'll tell the story of my journey to build a tool with a net positive return on investment, from the initial idea to the rollout and adoption. I'll cover the principles that guided my decisions, the tools we use, and the outcomes we've seen so far.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dane Hillard</dc:creator><pubDate>Sun, 13 Apr 2025 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2025-04-13:/pytexas-2025/place-making-productivity-build-maintainable-tools-with-a-small-team.html</guid><category>PyTexas 2025</category></item></channel></rss>