<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/event_pycon-sk-2016.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2016-03-12T00:00:00+00:00</updated><entry><title>Analyzing Networks In Python</title><link href="https://pyvideo.org/pycon-sk-2016/analyzing-networks-in-python.html" rel="alternate"></link><published>2016-03-12T00:00:00+00:00</published><updated>2016-03-12T00:00:00+00:00</updated><author><name>Johannes Wachs</name></author><id>tag:pyvideo.org,2016-03-12:pycon-sk-2016/analyzing-networks-in-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Networks encode complex information on all kinds of interactions. We
look at how a network perspective can reveal valuable information about
corruption in public procurement, internal collaboration at a
multinational firm, and the tone of campaigns on Twitter, all with the
phenomenal NetworkX library. NetworkX is a highly productive and
actively maintained library that interacts well with other libraries and
environments. It inherits many Python strengths like fast prototyping
and ease of teaching. We also discuss alternatives like graph-tool and
igraph.&lt;/p&gt;
</summary></entry><entry><title>Automated measurements using Python</title><link href="https://pyvideo.org/pycon-sk-2016/automated-measurements-using-python.html" rel="alternate"></link><published>2016-03-12T00:00:00+00:00</published><updated>2016-03-12T00:00:00+00:00</updated><author><name>Matúš Rehák</name></author><id>tag:pyvideo.org,2016-03-12:pycon-sk-2016/automated-measurements-using-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;ul class="simple"&gt;
&lt;li&gt;Simple measurement demonstration.&lt;/li&gt;
&lt;li&gt;Standard communication interfaces (ethernet, GPIB, RS-232,...).&lt;/li&gt;
&lt;li&gt;High-end appliances supporting VISA + module pyVISA.&lt;/li&gt;
&lt;li&gt;Use of Python ctypes to create wrapper for the device's drivers.&lt;/li&gt;
&lt;li&gt;Measurement related actions such as data storing, visualisation, etc.&lt;/li&gt;
&lt;/ul&gt;
</summary></entry><entry><title>Automatic English Text Correction</title><link href="https://pyvideo.org/pycon-sk-2016/automatic-english-text-correction.html" rel="alternate"></link><published>2016-03-12T00:00:00+00:00</published><updated>2016-03-12T00:00:00+00:00</updated><author><name>Tatiana Al-Chueyr Martins</name></author><id>tag:pyvideo.org,2016-03-12:pycon-sk-2016/automatic-english-text-correction.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Some applications in the market assist users to correct different
writing mistakes, including spelling and grammar errors. However, very
rarely these tools are used by school teachers. For most of them, it is
still time- consuming and tedious to correct (beginners) student essays.&lt;/p&gt;
&lt;p&gt;This talk will introduce some challenges in automatic English text
correction. The objective is to present how it is possible to use Python
libraries (scikit-learn, SciPy and NumPy) for spotting English mistakes
such as: articles, capitalization and spelling.&lt;/p&gt;
&lt;p&gt;In order to train and test the classifier, an open dataset will be used:
EF- Cambridge Open Language Dataset
(&lt;a class="reference external" href="https://corpus.mml.cam.ac.uk/efcamdat/"&gt;https://corpus.mml.cam.ac.uk/efcamdat/&lt;/a&gt;). This will allow participants
to reproduce all the steps.&lt;/p&gt;
&lt;p&gt;During the presentation, the accuracy of the implementation will be
compared to at least one commercial application. It will be discussed
how this kind of work can bring value to existing educational
applications. Limitations and further steps will also be discussed.&lt;/p&gt;
&lt;p&gt;This presentation is a successive work from the cooperation of Education
First (language teaching institution) engineers and University of
Cambridge language researchers.&lt;/p&gt;
</summary></entry><entry><title>Automating Distributed Tasks with Ansible in the Cloud</title><link href="https://pyvideo.org/pycon-sk-2016/automating-distributed-tasks-with-ansible-in-the-cloud.html" rel="alternate"></link><published>2016-03-12T00:00:00+00:00</published><updated>2016-03-12T00:00:00+00:00</updated><author><name>Büşra Köken</name></author><id>tag:pyvideo.org,2016-03-12:pycon-sk-2016/automating-distributed-tasks-with-ansible-in-the-cloud.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Ansible is a powerful automation, configuration management tool written
in python. In this talk, you are going to see how Ansible works, how
easy it is to get started and make your configuration management
automated.&lt;/p&gt;
&lt;p&gt;I am going to show you a case study that covers:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;creating a Hadoop cluster in the cloud - digitalocean&lt;/li&gt;
&lt;li&gt;running a Big Data job on the Hadoop cluster&lt;/li&gt;
&lt;li&gt;destroying the cluster&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All above is done with Ansible remotely.&lt;/p&gt;
&lt;p&gt;At the end, you are going to leave the room with an intro knowledge of
Ansible and be excited about starting of your new project with it!&lt;/p&gt;
</summary></entry><entry><title>Behind The Scenes Of Day-To-Day Software Development At Google</title><link href="https://pyvideo.org/pycon-sk-2016/behind-the-scenes-of-day-to-day-software-development-at-google.html" rel="alternate"></link><published>2016-03-12T00:00:00+00:00</published><updated>2016-03-12T00:00:00+00:00</updated><author><name>Petra Cross</name></author><id>tag:pyvideo.org,2016-03-12:pycon-sk-2016/behind-the-scenes-of-day-to-day-software-development-at-google.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;It is estimated that in the US alone, failed and troubled software
projects waste $60-$70 billion per year. For that money, you could
launch the space shuttle 100 times, build and deploy the entire 24
satellite GPS, and develop the Boeing 777 from scratch and still have
few billion left over.&lt;/p&gt;
&lt;p&gt;In my talk, I will not be analyzing what other companies do wrong.
Instead, I will focus on explaining what Google does to reduce the
development cost while speeding up releases and constantly delivering
high-quality software to our users. I will touch upon various software
development workflow methodologies and then dive into the specifics of
what software teams at Google do on a day- to-day basis.&lt;/p&gt;
</summary></entry><entry><title>Building and Deploying containerized Python Apps in the Cloud</title><link href="https://pyvideo.org/pycon-sk-2016/building-and-deploying-containerized-python-apps-in-the-cloud.html" rel="alternate"></link><published>2016-03-12T00:00:00+00:00</published><updated>2016-03-12T00:00:00+00:00</updated><author><name>Rodolfo Carvalho</name></author><id>tag:pyvideo.org,2016-03-12:pycon-sk-2016/building-and-deploying-containerized-python-apps-in-the-cloud.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;From simple blogs and monolith Django web apps, up to sophisticated
microservice architectures, is your product ready to leverage the
opportunities brought by the new tools out there?&lt;/p&gt;
&lt;p&gt;In this talk, I'll show how to package Python applications as
ready-to-use Docker containers, and how to deploy and manage them in
your own private cloud with OpenShift.&lt;/p&gt;
</summary></entry><entry><title>Building Netflow based NIDS out of open source components</title><link href="https://pyvideo.org/pycon-sk-2016/building-netflow-based-nids-out-of-open-source-components.html" rel="alternate"></link><published>2016-03-12T00:00:00+00:00</published><updated>2016-03-12T00:00:00+00:00</updated><author><name>Michal Kuffa</name></author><id>tag:pyvideo.org,2016-03-12:pycon-sk-2016/building-netflow-based-nids-out-of-open-source-components.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Netflow exporters provide extremely important information about what is
going on in your network almost in real time. As the network grows, to
store and analyze collected flow information starts to be a tedious
task.&lt;/p&gt;
&lt;p&gt;The purpose of this talk is to outline how to use open source
technologies to move from RRD files as a mean of storage of flow data
and take full advantage of Netflow's (almost) real time nature to create
NIDS with all the related data right at hand, visualized and ready to be
diagnosed.&lt;/p&gt;
</summary></entry><entry><title>Building Protocol Libraries The Right Way</title><link href="https://pyvideo.org/pycon-sk-2016/building-protocol-libraries-the-right-way.html" rel="alternate"></link><published>2016-03-12T00:00:00+00:00</published><updated>2016-03-12T00:00:00+00:00</updated><author><name>Cory Benfield</name></author><id>tag:pyvideo.org,2016-03-12:pycon-sk-2016/building-protocol-libraries-the-right-way.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;One of the great strengths of Python is the incredible richness of its
libraries. The standard library is already fairly good, and when you
take into account the third-party ecosystem, Python’s is up there with
the best in the world. Despite that, however, a great deal of effort has
been wasted to get to this place. Consider Python’s HTTP ecosystem,
which has many fantastic libraries. Unfortunately, there’s a stunning
lack of code re-use across them: different HTTP libraries often have
essentially no common code at all, despite doing extremely similar jobs.
Sometimes this occurs in projects that are intended to be almost
identical, such as requests and treq.&lt;/p&gt;
&lt;p&gt;This talk proposes that the primary reason this occurs is because each
library contains its own I/O layer. It explores exactly how this problem
comes about, and discusses an alternative approach to library design
that vastly has many benefits over the standard approach. It uses as its
core examples many projects the author has worked on, including the only
library he has written that he believes gets this right. It also talks
about where this approach is used outside of Python to great effect to
provide extra weight for the example.&lt;/p&gt;
</summary></entry><entry><title>Can Free Software be a full time job?</title><link href="https://pyvideo.org/pycon-sk-2016/can-free-software-be-a-full-time-job.html" rel="alternate"></link><published>2016-03-12T00:00:00+00:00</published><updated>2016-03-12T00:00:00+00:00</updated><author><name>Bjarni Runar Einarsson</name></author><id>tag:pyvideo.org,2016-03-12:pycon-sk-2016/can-free-software-be-a-full-time-job.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk will discuss some of the challenges of trying to make a living
writing Free Software, based on the author's experiences writing
&lt;a class="reference external" href="https://pagekite.net/"&gt;PageKite&lt;/a&gt; and
&lt;a class="reference external" href="https://www.mailpile.is/"&gt;Mailpile&lt;/a&gt;, while giving both away.&lt;/p&gt;
</summary></entry><entry><title>Lightning talks - Saturday</title><link href="https://pyvideo.org/pycon-sk-2016/lightning-talks-saturday.html" rel="alternate"></link><published>2016-03-12T00:00:00+00:00</published><updated>2016-03-12T00:00:00+00:00</updated><author><name>Various speakers</name></author><id>tag:pyvideo.org,2016-03-12:pycon-sk-2016/lightning-talks-saturday.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Lightning talks - Saturday session&lt;/p&gt;
</summary><category term="lightning talks"></category></entry><entry><title>Personalised emails using Python and Spark</title><link href="https://pyvideo.org/pycon-sk-2016/personalised-emails-using-python-and-spark.html" rel="alternate"></link><published>2016-03-12T00:00:00+00:00</published><updated>2016-03-12T00:00:00+00:00</updated><author><name>Tomáš Sirný</name></author><id>tag:pyvideo.org,2016-03-12:pycon-sk-2016/personalised-emails-using-python-and-spark.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Hadoop a Spark allow comfortable processing of large amounts of data. I
will demonstrate what it means to process data (personalized emails in
this case) and how a subsequent use of processed data can look like.&lt;/p&gt;
&lt;p&gt;I will also show advantages of using Python to manage the entire process
and the use of libraries and tools such as Pandas, SciPy, and IPython
notebook.&lt;/p&gt;
</summary></entry><entry><title>Poets, programmers and Python</title><link href="https://pyvideo.org/pycon-sk-2016/poets-programmers-and-python.html" rel="alternate"></link><published>2016-03-12T00:00:00+00:00</published><updated>2016-03-12T00:00:00+00:00</updated><author><name>Daniele Procida</name></author><id>tag:pyvideo.org,2016-03-12:pycon-sk-2016/poets-programmers-and-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Programming has a very unfair reputation for being an unimaginative, mechanical discipline - but if you're a programmer you know that's not true, and also that a programmer's work can bear the imprint of the programmer's creative personality as strongly as that of any other writer.&lt;/p&gt;
&lt;p&gt;What's more, programmers enjoy playing with and exploring language in much the same way that poets do - turning it upon itself, referring it to itself, and taking pleasure in what's revealed.&lt;/p&gt;
&lt;p&gt;There are some notable writers, artists and musicians whose work programmers always seem to find fascinating when they encounter it. The way programmers think makes them especially ready to understand and appreciate the intersection of rules, processes and play that characterises this work.&lt;/p&gt;
&lt;p&gt;I'll discuss writers including Ulises Carrión and the Oulipo group, and show how what they do overlaps with what programmers do. I'll also demonstrate some Python programs I've developed that explore texts and language in the same playful way that the writers do, and invite the audience to develop this further.&lt;/p&gt;
&lt;p&gt;An especially important construct I'm interested in is the loop, which is found in very similar ways at the heart of much programmer's play and in the work of the writers and artists I'm discussing.&lt;/p&gt;
&lt;p&gt;In programming the loop - a tightly-repeated, often self-referential structure - is a concrete example of a concept that finds employment in the work of thinkers like Douglas Hofstadter. For Hofstadter, loops - in language, logic, processes, music, computation, art and elsewhere - are key to understanding the nature of thought and meaning.&lt;/p&gt;
&lt;p&gt;I'll show how we can explore some of these ideas, again with the help of simple Python programs and poetry (including Ulises Carrión's almost maddening First Spanish Lesson).&lt;/p&gt;
&lt;p&gt;Finally, I want to consider writing programs and poetry as a discipline. The discipline of the aspiring programmer in fact is not so far from that of the creative writer. Even more striking is how the hardest-to-learn lessons of successful writing are the ones that programmers learn right from the start - and why the aspiring creative writer can learn a lot from how programmers work.&lt;/p&gt;
</summary></entry><entry><title>Python and DTrace</title><link href="https://pyvideo.org/pycon-sk-2016/python-and-dtrace.html" rel="alternate"></link><published>2016-03-12T00:00:00+00:00</published><updated>2016-03-12T00:00:00+00:00</updated><author><name>Jesús Cea Avión</name></author><id>tag:pyvideo.org,2016-03-12:pycon-sk-2016/python-and-dtrace.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;DTrace is a dynamic tracing framework able to comprehensively monitor a
complete live system, safely and with little performance impact. In this
talk we will talk about (unofficial) DTrace probes in Python and how can
you use them to integrate Python processes in the DTrace tracing
framework as first class citizens without any modification at all. Live
monitor your python programs for free! No code changes, no performance
impact. Get insights into the behavior of your system.&lt;/p&gt;
</summary></entry><entry><title>Python application security auditing with bandit</title><link href="https://pyvideo.org/pycon-sk-2016/python-application-security-auditing-with-bandit.html" rel="alternate"></link><published>2016-03-12T00:00:00+00:00</published><updated>2016-03-12T00:00:00+00:00</updated><author><name>Michael Scherer</name></author><id>tag:pyvideo.org,2016-03-12:pycon-sk-2016/python-application-security-auditing-with-bandit.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;While more and more code is written and connected on the internet,
security has never been so important for software. However, security is
often relegated as a 2nd thought and solution to scale it had to be
found by the industry theses days.&lt;/p&gt;
&lt;p&gt;A proven strategy is to use automatic static code analysis, a technique
applied by tools such as Coverty or Clang, and mostly used for C code.&lt;/p&gt;
&lt;p&gt;But not all software is written in C, so this talk will present bandit,
a tool to detect dangerous python code, and will explain the different
types of flaws developers have to keep in mind when writing code, and
why static code analysis is not a silver bullet, but just one of the
numerous way we can improve security.&lt;/p&gt;
</summary></entry><entry><title>Python – What you didn’t know you didn’t know…</title><link href="https://pyvideo.org/pycon-sk-2016/python-what-you-didnt-know-you-didnt-know.html" rel="alternate"></link><published>2016-03-12T00:00:00+00:00</published><updated>2016-03-12T00:00:00+00:00</updated><author><name>Martina Šturdíková</name></author><id>tag:pyvideo.org,2016-03-12:pycon-sk-2016/python-what-you-didnt-know-you-didnt-know.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Explore Python to gain the tools you need in order to be a better
Pythonista.&lt;/p&gt;
&lt;p&gt;Learn some intermediate concepts in Python and avoid some of the most
occurring Python gotchas.&lt;/p&gt;
</summary></entry><entry><title>Scientific Computing with Python</title><link href="https://pyvideo.org/pycon-sk-2016/scientific-computing-with-python.html" rel="alternate"></link><published>2016-03-12T00:00:00+00:00</published><updated>2016-03-12T00:00:00+00:00</updated><author><name>Claus Aichinger</name></author><id>tag:pyvideo.org,2016-03-12:pycon-sk-2016/scientific-computing-with-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;You'll get a short overview of the Scientific Computing ecosystem in
Python and what kind of problems it can be applied to.&lt;/p&gt;
&lt;p&gt;In recent years, Python's scientific stack has emerged as a serious open
source alternative to established proprietary systems like MATLAB or
specialized solutions like R. However, the wide range of packages and
options is often confusing for inexperienced users - this talk aims to
provide a remedy.&lt;/p&gt;
&lt;p&gt;In particular, you'll learn about:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Why Scientific Computing with Python? (Motivation)&lt;/li&gt;
&lt;li&gt;What is it the scientific stack has to offer? (Interesting
packages/libraries)&lt;/li&gt;
&lt;li&gt;Who is using it? (Companies/applications working with Python's
scientific stack)&lt;/li&gt;
&lt;li&gt;How can I start? (Scientific Python distributions)&lt;/li&gt;
&lt;li&gt;Is it really that simple? (Yes! Showcases)&lt;/li&gt;
&lt;/ul&gt;
</summary></entry><entry><title>Teach, Learn, Program</title><link href="https://pyvideo.org/pycon-sk-2016/teach-learn-program.html" rel="alternate"></link><published>2016-03-12T00:00:00+00:00</published><updated>2016-03-12T00:00:00+00:00</updated><author><name>Nick Tollervey</name></author><id>tag:pyvideo.org,2016-03-12:pycon-sk-2016/teach-learn-program.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;There has been a huge effort so Python works well in an educational
setting. This talk describes some of these efforts and explains why it
is in everyone's interest to support and participate in Python in
education. It will include live coding and practical demonstrations.
What could possibly go wrong?&lt;/p&gt;
</summary></entry><entry><title>Vagrant - End of "It works on my machine" saga</title><link href="https://pyvideo.org/pycon-sk-2016/vagrant-end-of-it-works-on-my-machine-saga.html" rel="alternate"></link><published>2016-03-12T00:00:00+00:00</published><updated>2016-03-12T00:00:00+00:00</updated><author><name>Věroš Kaplan</name></author><id>tag:pyvideo.org,2016-03-12:pycon-sk-2016/vagrant-end-of-it-works-on-my-machine-saga.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Vagrant is a tool that can efficiently run, deploy and destroy virtual
machines. If we use it when testing an application, we can avoid the
beloved problem of &amp;quot;But it works on my computer&amp;quot;.&lt;/p&gt;
&lt;p&gt;We will show how we can use Vagrant with Python and for deployment.&lt;/p&gt;
</summary></entry><entry><title>Basics of functional programming</title><link href="https://pyvideo.org/pycon-sk-2016/basics-of-functional-programming.html" rel="alternate"></link><published>2016-03-11T00:00:00+00:00</published><updated>2016-03-11T00:00:00+00:00</updated><author><name>Andrea Šteňová</name></author><id>tag:pyvideo.org,2016-03-11:pycon-sk-2016/basics-of-functional-programming.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Functional programming offers a different approach to data and program
structure. Originally a domain of academic institutions, however,
nowadays it is getting used more and more, particularly thanks to its
usefulness in distributed systems. Examples of functional properties in
code include: usage of immutable variables, recursion, pattern matching
or higher-order functions, which are not always easy to understand for a
beginner. In this talk, we will introduce some of the functional
programming properties and their usage in Python.&lt;/p&gt;
</summary></entry><entry><title>Django, Django REST Framework, React</title><link href="https://pyvideo.org/pycon-sk-2016/django-django-rest-framework-react.html" rel="alternate"></link><published>2016-03-11T00:00:00+00:00</published><updated>2016-03-11T00:00:00+00:00</updated><author><name>Svetlana Margetová</name></author><id>tag:pyvideo.org,2016-03-11:pycon-sk-2016/django-django-rest-framework-react.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;React is a great JavaScript library for creating user interfaces.
However, if you want to use it with Django or other Python framework,
there are some design patterns and best practices that worked for me and
we've used them at work.&lt;/p&gt;
&lt;p&gt;When we are building Single Page App using React and Django we had to
think about the way we did APIs, the way rendered templates, the way
about security, the way about speed page and how to reuse our API for
mobile apps.&lt;/p&gt;
&lt;p&gt;I will show you how to use these technologies, difference between MVC
and SPA development, best practices and good tools for large projects.&lt;/p&gt;
&lt;p&gt;If you are thinking about building your project with JavaScript, I will
give you some tips and points to light your way.&lt;/p&gt;
</summary></entry><entry><title>How import works</title><link href="https://pyvideo.org/pycon-sk-2016/how-import-works.html" rel="alternate"></link><published>2016-03-11T00:00:00+00:00</published><updated>2016-03-11T00:00:00+00:00</updated><author><name>Petr Viktorin</name></author><id>tag:pyvideo.org,2016-03-11:pycon-sk-2016/how-import-works.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Every one of us has already used the &lt;tt class="docutils literal"&gt;import&lt;/tt&gt; statement. Do you know
what it actually does? How does it find the correct file using the
module name and how a text file becomes a module? Did you know that
Python can import from ZIP archives or run directories? Do you want to
find out how cyclic imports happen and how to avoid them?&lt;/p&gt;
&lt;p&gt;This talk will answer all of these questions.&lt;/p&gt;
</summary></entry><entry><title>Jupyter notebook at home, in school, everywhere</title><link href="https://pyvideo.org/pycon-sk-2016/jupyter-notebook-at-home-in-school-everywhere.html" rel="alternate"></link><published>2016-03-11T00:00:00+00:00</published><updated>2016-03-11T00:00:00+00:00</updated><author><name>Michal Kaukič</name></author><id>tag:pyvideo.org,2016-03-11:pycon-sk-2016/jupyter-notebook-at-home-in-school-everywhere.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;IPython - a brief history, from the beginning up to Jupyter. Jupyterhub
NB server usage.&lt;/p&gt;
&lt;p&gt;Samples of notebooks, graphics of Matplotlib and Bokeh, GUI features
(ipywidgets), OSM maps via Foliu&lt;/p&gt;
</summary></entry><entry><title>Lightning talks - Friday</title><link href="https://pyvideo.org/pycon-sk-2016/lightning-talks-friday.html" rel="alternate"></link><published>2016-03-11T00:00:00+00:00</published><updated>2016-03-11T00:00:00+00:00</updated><author><name>Various speakers</name></author><id>tag:pyvideo.org,2016-03-11:pycon-sk-2016/lightning-talks-friday.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Lightning talks - Friday session&lt;/p&gt;
</summary><category term="lightning talks"></category></entry><entry><title>Mashing up py.test, coverage.py and ast.py to take TDD to a new level</title><link href="https://pyvideo.org/pycon-sk-2016/mashing-up-pytest-coveragepy-and-astpy-to-take-tdd-to-a-new-level.html" rel="alternate"></link><published>2016-03-11T00:00:00+00:00</published><updated>2016-03-11T00:00:00+00:00</updated><author><name>Tibor Arpáš</name></author><id>tag:pyvideo.org,2016-03-11:pycon-sk-2016/mashing-up-pytest-coveragepy-and-astpy-to-take-tdd-to-a-new-level.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Users and especially developers hate waiting. Computing has adapted and
we almost never wait for the computer for more than 10 seconds. One big
exception is running a test suite, which takes MINUTES on many projects.
That is incredibly distracting, frustrating and dragging the whole
concept of automated tests down.&lt;/p&gt;
&lt;p&gt;I will present a technique and a tool (py.test plugin called “testmon&amp;quot;),
which automatically selects only tests affected by recent changes. Does
it sound too good to be true? Python developers rightfully have a
suspecting attitude towards any tool, which tries to be too clever about
their source code. Code completion and symbol searching doesn’t need to
be 100% reliable but messing with the test suite execution? I will show
that we can significantly reduce the test suite execution time without
losing its reliability.&lt;/p&gt;
</summary></entry><entry><title>MicroPython</title><link href="https://pyvideo.org/pycon-sk-2016/micropython.html" rel="alternate"></link><published>2016-03-11T00:00:00+00:00</published><updated>2016-03-11T00:00:00+00:00</updated><author><name>Andrej Mošať</name></author><id>tag:pyvideo.org,2016-03-11:pycon-sk-2016/micropython.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Micropython is a minimal implementation of Python 3 on embedded
processors like ARM, x86. It allows developers to quickly and
effectively write code directly for hardware without the need for
compiling.&lt;/p&gt;
&lt;p&gt;The advantage of an interpreted language is mainly in removing the
compilation time. Errors appear when executing the program, the response
is immediate. The disadvantages include an increased demand for memory
and unscheduled pause due to the garbage collector. I will introduce
development platforms running interpreted languages, their advantages
and disadvantages.&lt;/p&gt;
&lt;p&gt;The main part of the lecture will be devoted to basic hardware
development using examples such as switches, LEDs, potentiometers and
interruptions.&lt;/p&gt;
</summary></entry><entry><title>Python and Malware</title><link href="https://pyvideo.org/pycon-sk-2016/python-and-malware.html" rel="alternate"></link><published>2016-03-11T00:00:00+00:00</published><updated>2016-03-11T00:00:00+00:00</updated><author><name>Peter Matkovski</name></author><id>tag:pyvideo.org,2016-03-11:pycon-sk-2016/python-and-malware.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;ul class="simple"&gt;
&lt;li&gt;Coding a simple malware in Python. We will create a Trojan with a
reverse shell for Windows.&lt;/li&gt;
&lt;li&gt;Connecting several trojans to a botnet network via Twitter and Gmail.&lt;/li&gt;
&lt;li&gt;How can we technically defend ourselves against this attack - again
using Python.&lt;/li&gt;
&lt;/ul&gt;
</summary></entry><entry><title>Tips and tricks for using functional features of Python</title><link href="https://pyvideo.org/pycon-sk-2016/tips-and-tricks-for-using-functional-features-of-python.html" rel="alternate"></link><published>2016-03-11T00:00:00+00:00</published><updated>2016-03-11T00:00:00+00:00</updated><author><name>Jakub Ševcech</name></author><id>tag:pyvideo.org,2016-03-11:pycon-sk-2016/tips-and-tricks-for-using-functional-features-of-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Tips and tricks for using functional properties of Python.&lt;/p&gt;
&lt;p&gt;Techniques worth using, and those not worth. We will see where the
elegance is and how functional programming improves code legibility,
reusability and testability.&lt;/p&gt;
&lt;p&gt;Audience: beginners and intermediate Python users.&lt;/p&gt;
</summary></entry><entry><title>Virtualenv, Flask, Vagrant, etc.</title><link href="https://pyvideo.org/pycon-sk-2016/virtualenv-flask-vagrant-etc.html" rel="alternate"></link><published>2016-03-11T00:00:00+00:00</published><updated>2016-03-11T00:00:00+00:00</updated><author><name>Miroslav Beka</name></author><id>tag:pyvideo.org,2016-03-11:pycon-sk-2016/virtualenv-flask-vagrant-etc.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Large organizations have traditionally used languages such as C ++, .NET
and Java development for enterprise applications. &amp;quot;Scripting&amp;quot; languages
like Python were considered risky. Not sufficiently robust with the lack
of the tools around them (framework). Times have, however, changed and
the Python language has become surrounded by the huge open source
community that takes care of the maintenance of the ecosystem. We see
increasing use of dynamic languages for web applications development.
But what is meant by productive enterprise or web application? These
applications should meet several requirements. Scalability, zero down
time deployments, short release cycles and many other properties&lt;/p&gt;
</summary></entry></feed>