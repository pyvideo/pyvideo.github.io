<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_van-lindberg.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2018-06-03T00:00:00+00:00</updated><entry><title>EuroPython 2013 Introduction + The Next 20 Years of Python</title><link href="https://pyvideo.org/europython-2013/europython-2013-introduction-the-next-20-years-of-python.html" rel="alternate"></link><published>2013-07-01T00:00:00+00:00</published><updated>2013-07-01T00:00:00+00:00</updated><author><name>Van Lindberg</name></author><id>tag:pyvideo.org,2013-07-01:europython-2013/europython-2013-introduction-the-next-20-years-of-python.html</id><summary type="html"></summary></entry><entry><title>Deconstructing the US Patent Database</title><link href="https://pyvideo.org/pycon-us-2018/deconstructing-the-us-patent-database.html" rel="alternate"></link><published>2018-05-11T00:00:00+00:00</published><updated>2018-05-11T00:00:00+00:00</updated><author><name>Van Lindberg</name></author><id>tag:pyvideo.org,2018-05-11:pycon-us-2018/deconstructing-the-us-patent-database.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In 2011 I gave a talk about &amp;quot;Killing Patents with Python&amp;quot; - finding the right piece of prior art by using statistical natural language processing techniques on the US Patent Database. A number of unexpected benefits came out of that exploration, including the ability to describe large patent portfolios and businesses in a way that had not been done before.&lt;/p&gt;
&lt;p&gt;Since then, the state of the art has advanced - and so has the ability to do strange and wonderful things by applying the latest neural network-based analysis to the nine million patents and patent applications that people have submitted to the USPTO. Not only can we learn new things about what people have invented, we might just be able to get the computer to do a little &amp;quot;inventing&amp;quot; itself.&lt;/p&gt;
</summary></entry><entry><title>Balloons, Projects, and Python: Building a Sustainable Community</title><link href="https://pyvideo.org/pycon-cz-2018/balloons-projects-and-python-building-a-sustainable-community.html" rel="alternate"></link><published>2018-06-03T00:00:00+00:00</published><updated>2018-06-03T00:00:00+00:00</updated><author><name>Van Lindberg</name></author><id>tag:pyvideo.org,2018-06-03:pycon-cz-2018/balloons-projects-and-python-building-a-sustainable-community.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A lot of people get started in open source by “scratching their own itch” – building something that they want for themselves. But starting the project isn't the hard part: it is keeping it going in a reasonable, sustainable way.&lt;/p&gt;
&lt;p&gt;I will be honest: creating and building a sustainable open community is hard. It involves giving up some control. It involves developing and exercising a different set of skills other than those needed for technical mastery. So how do you do it?&lt;/p&gt;
&lt;p&gt;I will start out with three stories about successful open communities, and explain how they were able to succeed. Then I will talk a little about why these communities work. It isn’t fairy dust. It isn’t even altruism. It’s economics, psychology, and communication. Finally, I will give some guidelines around how you can build your own sustainable community.&lt;/p&gt;
</summary></entry><entry><title>Keynote:: Taking the most out of PyCon by Van Lindberg 45:07</title><link href="https://pyvideo.org/pycon-india-2016/keynote-taking-the-most-out-of-pycon-by-van-lindberg-4507.html" rel="alternate"></link><published>2016-09-23T00:00:00+00:00</published><updated>2016-09-23T00:00:00+00:00</updated><author><name>Van Lindberg</name></author><id>tag:pyvideo.org,2016-09-23:pycon-india-2016/keynote-taking-the-most-out-of-pycon-by-van-lindberg-4507.html</id><summary type="html"></summary></entry><entry><title>Ecosystem Threats to Python</title><link href="https://pyvideo.org/pycon-uk-2014/ecosystem-threats-to-python.html" rel="alternate"></link><published>2014-10-13T00:00:00+00:00</published><updated>2014-10-13T00:00:00+00:00</updated><author><name>Van Lindberg</name></author><id>tag:pyvideo.org,2014-10-13:pycon-uk-2014/ecosystem-threats-to-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Presented by: Van Lindberg.&lt;/p&gt;
&lt;p&gt;Friday morning keynote.&lt;/p&gt;
&lt;p&gt;Python is a spectacular success - far more than anyone, even Guido, would have anticipated 20 years ago. Python is preinstalled on almost every operating system, is becoming the lingua franca for many numeric, statistical, and big data problems, and is the default teaching language in many colleges and universities.&lt;/p&gt;
&lt;p&gt;But our success does not hide the warning signs. Javascript, Julia, Java, Lua, and Go are all picking up speed and mindshare, frequently at the expense of Python. What do these languages and language communities have that is enticing others to pick them? How can we learn from the good ideas in these languages to make Python even stronger? How can we interoperate and build on what they have?&lt;/p&gt;
</summary><category term="keynote"></category></entry><entry><title>Keynote - Computation at the edges</title><link href="https://pyvideo.org/pydata-seattle-2015/keynote-computation-at-the-edges.html" rel="alternate"></link><published>2015-07-25T00:00:00+00:00</published><updated>2015-07-25T00:00:00+00:00</updated><author><name>Van Lindberg</name></author><id>tag:pyvideo.org,2015-07-25:pydata-seattle-2015/keynote-computation-at-the-edges.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;For most of the history of computing, we have focused on centralized forms of computing. It has always been faster and cheaper to do our processing with a powerful centralized processor than a group of lower-powered processors at the edges. This is changing. The last couple years have brought a new focus on scale-out and distributed architectures, but that is not enough. We are getting to the place where vastly more data, and vastly more compute power, will be available at the edges of our networks. How should this change how we approach the the future?&lt;/p&gt;
</summary></entry><entry><title>The PyCon UK Panel</title><link href="https://pyvideo.org/pycon-uk-2015/the-pycon-uk-panel.html" rel="alternate"></link><published>2015-09-20T00:00:00+00:00</published><updated>2015-09-20T00:00:00+00:00</updated><author><name>Michael Foord</name></author><id>tag:pyvideo.org,2015-09-20:pycon-uk-2015/the-pycon-uk-panel.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In the style of Question Time (or Gardeners' Question Time, but without the plants), PyCon UK's acting Chair Zeth chairs a panel of Python experts who each give an short overview of how they found the conference and then try to answer your questions about the future of Python, Software development and the meaning of life, the universe and everything.&lt;/p&gt;
</summary></entry><entry><title>Keynote: Van Lindberg, PSF Chair</title><link href="https://pyvideo.org/pycon-uk-2015/keynote-van-lindberg-psf-chair.html" rel="alternate"></link><published>2015-09-18T00:00:00+00:00</published><updated>2015-09-18T00:00:00+00:00</updated><author><name>Van Lindberg</name></author><id>tag:pyvideo.org,2015-09-18:pycon-uk-2015/keynote-van-lindberg-psf-chair.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Keynote speech from PYCON UK 2015, Friday 18th September 2015.&lt;/p&gt;
</summary></entry><entry><title>Structured Data from Unstructured Text</title><link href="https://pyvideo.org/pycon-us-2016/van-lindberg-structured-data-from-unstructured-text-pycon-2016.html" rel="alternate"></link><published>2016-06-20T00:00:00+00:00</published><updated>2016-06-20T00:00:00+00:00</updated><author><name>Van Lindberg</name></author><id>tag:pyvideo.org,2016-06-20:pycon-us-2016/van-lindberg-structured-data-from-unstructured-text-pycon-2016.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Speaker: Van Lindberg&lt;/p&gt;
&lt;p&gt;Ever wonder how if you google “When was Python created?” Google just has the answer in a box at the top for you?  In this talk we’ll investigate how information extraction systems work, implement one using scikit-learn and NLTK, and learn about natural language processing along the way.&lt;/p&gt;
&lt;p&gt;Slides can be found at: &lt;a class="reference external" href="https://speakerdeck.com/pycon2016"&gt;https://speakerdeck.com/pycon2016&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/PyCon/2016-slides"&gt;https://github.com/PyCon/2016-slides&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Python Software Foundation</title><link href="https://pyvideo.org/pycon-us-2016/van-lindberg-python-software-foundation-pycon-2016.html" rel="alternate"></link><published>2016-06-01T00:00:00+00:00</published><updated>2016-06-01T00:00:00+00:00</updated><author><name>Van Lindberg</name></author><id>tag:pyvideo.org,2016-06-01:pycon-us-2016/van-lindberg-python-software-foundation-pycon-2016.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Speaker: Van Lindberg&lt;/p&gt;
&lt;p&gt;Python Software Foundation&lt;/p&gt;
&lt;p&gt;Slides can be found at: &lt;a class="reference external" href="https://speakerdeck.com/pycon2016"&gt;https://speakerdeck.com/pycon2016&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/PyCon/2016-slides"&gt;https://github.com/PyCon/2016-slides&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>R0 DAY1-K1 Ecosystem Threats to Python - Van Lindberg (PyCon APAC 2015)</title><link href="https://pyvideo.org/pycon-apac-2015/r0-day1-k1-ecosystem-threats-to-python-van-pycon.html" rel="alternate"></link><published>2015-08-24T00:00:00+00:00</published><updated>2015-08-24T00:00:00+00:00</updated><author><name>Van Lindberg</name></author><id>tag:pyvideo.org,2015-08-24:pycon-apac-2015/r0-day1-k1-ecosystem-threats-to-python-van-pycon.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Speaker: Van Lindberg&lt;/p&gt;
&lt;p&gt;Van Lindberg has worked professionally as an engineer, as a lawyer, and as an executive. He currently has a dual legal/technical role at Rackspace, and has worked out of both the legal department and the Office of the CTO. In April 2012, the American Bar Association Journal named Van as one of &amp;quot;America's Top 12 Techiest Attorneys.&amp;quot; He has been involved with open source since 1994, when a friend introduced him to Linux.&lt;/p&gt;
&lt;p&gt;On the legal side, Van leads Rackspace's Intellectual Property program, directing Rackspace's strategy and policy around patent, copyright, trademark, trade secret, and open source matters. Van also heads Rackspace's lobbying efforts relative to patent reform.&lt;/p&gt;
&lt;p&gt;On the technical side, Van runs Rackspace's technical leadership corps, known internally as the &amp;quot;TCT.&amp;quot; Van also works in technical strategy and ecosystem engagement at Rackspace, identifying emerging technologies, separating out differentiating versus non-differentiating product elements, and using open source strategies to be more competitive.&lt;/p&gt;
&lt;p&gt;Previously, Van worked at the law firm of Haynes and Boone, where he wrote &amp;quot;Intellectual Property and Open Source,&amp;quot; published by O'Reilly and Associates, and grew an open source practice helping businesses with everything from open source compliance to business strategy.&lt;/p&gt;
&lt;p&gt;In addition to Van's open source practice, he did IP transactional work, patent prosecution, litigation, and post-grant actions (ex parte and inter partes reexams/reviews).&lt;/p&gt;
&lt;p&gt;Van currently serves as chairman of the board of the Python Software Foundation, on the board of the OpenStack Foundation, and as the chair of the Docker Governance Advisory Board.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://tw.pycon.org/2015apac/zh/program/keynote-speaker/"&gt;https://tw.pycon.org/2015apac/zh/program/keynote-speaker/&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Plenary: Friday Evening Lightning Talks</title><link href="https://pyvideo.org/pycon-us-2010/pycon-2010--plenary--friday-evening-lightning-tal.html" rel="alternate"></link><published>2010-02-19T00:00:00+00:00</published><updated>2010-02-19T00:00:00+00:00</updated><author><name>Jacob Kaplan-Moss</name></author><id>tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--plenary--friday-evening-lightning-tal.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Plenary: Friday Evening Lightning Talks&lt;/p&gt;
&lt;p&gt;(00:00) Jacob Kaplan-Moss - lightning talk about lightning talks&lt;/p&gt;
&lt;p&gt;(03:50) Van Lindberg - What an Open Source Lawyer Actually Does&lt;/p&gt;
&lt;p&gt;(09:40) Greg Wilson - The Next Big Programming Book and How You Can Make
it Happen (&lt;a class="reference external" href="http://www.third-bit.com/"&gt;http://www.third-bit.com/&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;(14:25) Moshe Zadka - Don't Write Big Applications (more info
&lt;a class="reference external" href="http://moshez.wordpress.com/2010/02/17/dont-write-big-applications-a%20-lightning-talk/"&gt;here&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;(19:35) Ned Batchelder - What's new in coverage.py
(&lt;a class="reference external" href="http://nedbatchelder.com/"&gt;http://nedbatchelder.com/&lt;/a&gt;,
&lt;a class="reference external" href="http://nedbatchelder.com/code/coverage/"&gt;coverage.py&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;(25:10) Mike Maccana - Python Docx
(&lt;a class="reference external" href="http://github.com/mikemaccana/python-docx/"&gt;http://github.com/mikemaccana/python-
docx/&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;(29:25) Trent Mick - ActiveState Code v3/Python Cookbook v3
(&lt;a class="reference external" href="http://code.activestate.com/"&gt;http://code.activestate.com/&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;(34:40) Daniel Holth - Writing a SQLAlchemy Dialect&lt;/p&gt;
&lt;p&gt;(37:30) Dave Malcolm - Better Ways of Debugging the CPython Runtime&lt;/p&gt;
&lt;p&gt;(43:00) David Huggins-Daines - Recognizing Speech With Python
(&lt;a class="reference external" href="http://cmusphinx.sourceforge.net/"&gt;http://cmusphinx.sourceforge.net/&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;(48:00) Lucio Torre - Ubuntu One and Windows&lt;/p&gt;
</summary><category term="lightning talks"></category><category term="activestate"></category><category term="bigapps"></category><category term="cmusphinx"></category><category term="coverage.py"></category><category term="cpython"></category><category term="lawyers"></category><category term="programmingbook"></category><category term="pycon"></category><category term="pycon2010"></category><category term="python-cookbook"></category><category term="sqlalchemy"></category><category term="ubuntuone"></category></entry><entry><title>How to kill a patent with Python</title><link href="https://pyvideo.org/pycon-us-2011/pycon-2011--how-to-kill-a-patent-with-python.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Van Lindberg</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--how-to-kill-a-patent-with-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;How to kill a patent with Python&lt;/p&gt;
&lt;p&gt;Presented by Van Lindberg&lt;/p&gt;
&lt;p&gt;Finding the right piece of &amp;quot;prior art&amp;quot; - technical documentation that
described a patented piece of technology before the patent was filed -
is like finding a needle in a very big haystack. This session will talk
about how I am making that process faster and more accurate through the
use of natural language processing, graph theory, machine learning, and
lots of Python.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;From my work consulting on a number of patent cases, I am frequently
asked to find &amp;quot;prior art&amp;quot; - patents and publications that describe a
technology before a certain date. The problem is that the indexing
mechanisms for patents and publications are not as good as they could
be, making good prior art searching more of an art than a science. When
I decided to do better, I reached for Python.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Part I (5 mins): The USPTO as a data source.* The full-text of each
patent is available from the USPTO (and now from Google.) What does
this data look like? How can it be harvested and normalized to create
data structures that we can work with?&lt;/li&gt;
&lt;li&gt;Part II (15 mins, in two parts):* Once the patents have been cleaned
and normalized, they can be turned into data structures that we can
use to evaluate their relationship to other documents. This is done
in two ways - by modeling each patent as a document vector and a
graph node.&lt;/li&gt;
&lt;li&gt;Part IIA (7 mins): Patents as document vectors.* Once we have a
patent as a data structure, we can treat the patent as a vector in an
n-dimensional space. In moving from a document into a vector space,
we will touch on normalization, stemming, TF/IDF, Latent Semantic
Indexing (LSI) and Latent Dirichlet Allocation (LDA).&lt;/li&gt;
&lt;li&gt;Part IIB (7 mins): Patents as technology graphs.* This will show
building graph structures using the connections between patents -
both the built-in connections in the patents themselves as well as
the connections discovered while working with the patents as vectors.
We apply some social network analysis to partition the patent graph
and find other documents in the same technology space.&lt;/li&gt;
&lt;li&gt;Part III (5 mins): What have we built?* Now that we have done all
this analysis, we can see some interesting things about the patent
database as a whole. How does the patent database act as a map to the
world of technology? And how has this helped with the original
problem - finding better prior art?&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="casestudy"></category><category term="patents"></category><category term="pycon"></category><category term="pycon2011"></category></entry><entry><title>Graph Processing in Python</title><link href="https://pyvideo.org/pycon-us-2012/graph-processing-in-python.html" rel="alternate"></link><published>2012-03-09T00:00:00+00:00</published><updated>2012-03-09T00:00:00+00:00</updated><author><name>Van Lindberg</name></author><id>tag:pyvideo.org,2012-03-09:pycon-us-2012/graph-processing-in-python.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Graphs are everywhere - from your distributed source code control to
Twitter analytics. This session presents a set of three problems and
shows how they can be decomposed into operations on graphs, and then
demonstrates solutions using the various graph libraries available for
(or accessible to) Python.&lt;/p&gt;
</summary></entry><entry><title>Keynote</title><link href="https://pyvideo.org/pycon-us-2013/keynote-0.html" rel="alternate"></link><published>2013-03-17T00:00:00+00:00</published><updated>2013-03-17T00:00:00+00:00</updated><author><name>Van Lindberg</name></author><id>tag:pyvideo.org,2013-03-17:pycon-us-2013/keynote-0.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Van Lindberg is a software engineer and practicing attorney. What he
does most, though, is translate - from &amp;quot;lawyer&amp;quot; to &amp;quot;engineer&amp;quot; and back.
He likes working with both computer code and legal code to get things
done.&lt;/p&gt;
</summary><category term="Plenary"></category></entry><entry><title>Keynote - Van Lindberg</title><link href="https://pyvideo.org/pycon-us-2014/keynote-van-lindberg.html" rel="alternate"></link><published>2014-04-13T00:00:00+00:00</published><updated>2014-04-13T00:00:00+00:00</updated><author><name>Van Lindberg</name></author><id>tag:pyvideo.org,2014-04-13:pycon-us-2014/keynote-van-lindberg.html</id><summary type="html"></summary></entry><entry><title>PyCon 2014 Awards</title><link href="https://pyvideo.org/pycon-us-2014/pycon-2014-awards.html" rel="alternate"></link><published>2014-04-13T00:00:00+00:00</published><updated>2014-04-13T00:00:00+00:00</updated><author><name>Van Lindberg</name></author><id>tag:pyvideo.org,2014-04-13:pycon-us-2014/pycon-2014-awards.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;The awards portion of Van Lindberg's keynote at PyCon 2014.&lt;/p&gt;
</summary></entry><entry><title>Keynote - Van Lindberg - Pycon 2015</title><link href="https://pyvideo.org/pycon-us-2015/keynote-van-lindberg-pycon-2015.html" rel="alternate"></link><published>2015-04-12T00:00:00+00:00</published><updated>2015-04-12T00:00:00+00:00</updated><author><name>Van Lindberg</name></author><id>tag:pyvideo.org,2015-04-12:pycon-us-2015/keynote-van-lindberg-pycon-2015.html</id><summary type="html"></summary></entry></feed>