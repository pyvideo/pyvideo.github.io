<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Fri, 25 Jul 2014 00:00:00 +0000</lastBuildDate><item><title>Advanced Database Programming with Python</title><link>https://pyvideo.org/europython-2014/advanced-database-programming-with-python.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;The Python DB-API 2.0 provides a direct interface to many popular
database backends. It makes interaction with relational database very
straight forward and allows tapping into the full set of features these
databases provide.&lt;/p&gt;
&lt;p&gt;The talk will cover advanced database topics which are relevant in
production environments such as locks, distributed transactions and
transaction isolation.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The Python DB-API 2.0 provides a direct interface to many popular
database backends. It makes interaction with relational database very
straight forward and allows tapping into the full set of features these
databases provide.&lt;/p&gt;
&lt;p&gt;The talk will cover advanced database topics which are relevant in
production environments such as locks, distributed transactions and
transaction isolation.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;The talk will give an in-depth discussion of advanced database
programming topics based on the Python DB-API 2.0: locks and dead-locks,
two-phase commits, transaction isolation, result set scrolling, schema
introspection and handling multiple result sets.&lt;/p&gt;
&lt;p&gt;Talks slides are available on request.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Marc-Andre Lemburg</dc:creator><pubDate>Fri, 25 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-25:europython-2014/advanced-database-programming-with-python.html</guid></item><item><title>Big Data Analytics with Python using Stratosphere</title><link>https://pyvideo.org/europython-2014/big-data-analytics-with-python-using-stratosphere.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;&lt;a class="reference external" href="http://stratosphere.eu/"&gt;Stratosphere&lt;/a&gt; is a distributed platform for
advanced big data analytics. It features a rich set of operators,
advanced, iterative data flows, an efficient runtime, and automatic
program optimization. We present Stratophere's new Python programming
interface. It allows Python developers to easily get their hands on Big
Data.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;a class="reference external" href="http://stratosphere.eu/"&gt;Stratosphere&lt;/a&gt; is implemented in Java. In
2013 we introduced support for writing Stratosphere programs in Scala.
Since Scala also runs in the Java JVM the language integration was easy
for Scala.&lt;/p&gt;
&lt;p&gt;In late 2013, we started to develop a generic language binding framework
for Stratosphere to support non-JVM languages such as Python,
JavaScript, Ruby but also compiled languages such as C++. The language
binding framework uses &lt;a class="reference external" href="https://code.google.com/p/protobuf/"&gt;Google’s Protocol
Buffers&lt;/a&gt; for efficient data
serialization and transportation between the languages.&lt;/p&gt;
&lt;p&gt;Since many “Data Scientists” and machine learning experts are using
Python on a daily basis, we decided to use Python as the reference
implementation for Stratosphere’s language binding feature. Our talk at
the EuroPython 2014 will present how Python developers can leverage the
Stratosphere Platform to solve their big data problems.&lt;/p&gt;
&lt;p&gt;We introduce the most important concepts of Stratosphere such as the
operators, connectors to data sources, data flows, the compiler,
iterative algorithms and more. Stratosphere is a mature, next generation
big-data analytics platform developed by a vibrant &lt;a class="reference external" href="https://github.com/stratosphere/stratosphere"&gt;open-source
community&lt;/a&gt;. The system
is available under the Apache 2.0 license.&lt;/p&gt;
&lt;p&gt;The project started in 2009 as a joint research project of multiple
universities in the Berlin area (Technische Universität, Humboldt
Universität and Hasso-Plattner Institut). Nowadays it is an award
winning system that has gained worldwide attention in both research and
industry.&lt;/p&gt;
&lt;p&gt;A note to the program committee: As mentioned, the development of the
Python language binding of Stratosphere has started a few months ago,
therefore, the code is not yet in the main development branch. However,
we are already able to execute the “Hello World” of big data, the “Word
Count” example using the Python interface. See this example in the
development branch:
&lt;a class="reference external" href="https://github.com/filiphaase/stratosphere/blob/langbinding/stratosphere-addons/stratosphere-language-binding/src/main/python/eu/stratosphere/language/binding/wordcountexample/WordCountPlan.py"&gt;https://github.com/filiphaase/stratosphere/blob/langbinding/stratosphere-addons/stratosphere-language-binding/src/main/python/eu/stratosphere/language/binding/wordcountexample/WordCountPlan.py&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Please contact us if you have any questions!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chesnay Schepler</dc:creator><pubDate>Fri, 25 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-25:europython-2014/big-data-analytics-with-python-using-stratosphere.html</guid></item><item><title>Building Realtime Web Applications with WebRTC and Python</title><link>https://pyvideo.org/europython-2014/building-realtime-web-applications-with-webrtc-an.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;WebRTC makes building peer to peer real time web applications easier.
First, we'll discuss in short what WebRTC is, how it works. Then we will
explore ways to build the signalling system of a WebRTC app using
Python.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;div class="section" id="introduction"&gt;
&lt;h4&gt;Introduction&lt;/h4&gt;
&lt;p&gt;This talk will first introduce the audience to WebRTC and then discuss
about how to implement the server side logic of a WebRTC app using
Python.&lt;/p&gt;
&lt;p&gt;WebRTC is a free, open project that enables web browsers with
plugin-less Real-Time Communications (RTC) capabilities via simple
JavaScript APIs. What makes WebRTC special is that the data travels from
one client to another without going through the server.&lt;/p&gt;
&lt;p&gt;The main functions of WebRTC can be broadly categorized into three
types.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Access and acquire video and audio streams&lt;/li&gt;
&lt;li&gt;Establish a connection between peers and stream audio/video.&lt;/li&gt;
&lt;li&gt;Communicate arbitrary data.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;WebRTC uses three different JavaScript APIs to perform these three
functions. These APIs are:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;MediaStream (aka getUserMedia)&lt;/li&gt;
&lt;li&gt;RTCPeerConnection&lt;/li&gt;
&lt;li&gt;RTCDataChannel&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;MediaStream API performs the task of accessing the webcam and/or
microphone of the device and acquire the video and/or audio stream from
them. RTCPeerConnection API establishes connection between peers and
streams audio and video data. This API also does all the encoding and
decoding of audio/video data. The third API, RTCDataChannel helps to
communicate arbitrary data from one client to the other.&lt;/p&gt;
&lt;p&gt;There will be short demos to demonstrate the functionalities of these
APIs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="signaling-and-session-control"&gt;
&lt;h4&gt;Signaling and Session Control&lt;/h4&gt;
&lt;p&gt;WebRTC uses RTCPeerConnection to communicate streaming data between
browsers, but some sort of mechanism is needed to coordinate this
communication and to send control messages. This process is known as
signaling.&lt;/p&gt;
&lt;p&gt;Signaling is used to exchange three types of information.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Session control messages: to initialize or close communication and
report errors.&lt;/li&gt;
&lt;li&gt;Network configuration: to the outside world, what's my computer's IP
address and port?&lt;/li&gt;
&lt;li&gt;Media capabilities: what codecs and resolutions can be handled by my
browser and the browser it wants to communicate with?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This can be implemented using any appropriate two way communication
channel.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="implementing-signaling-in-python"&gt;
&lt;h4&gt;Implementing signaling in Python&lt;/h4&gt;
&lt;p&gt;Next, we will have a look at how to implement this signaling mechanism
in Python. ( Demonstration with annotated code and live application.)&lt;/p&gt;
&lt;div class="section" id="google-appengine-and-the-channel-api"&gt;
&lt;h5&gt;Google AppEngine and the Channel API&lt;/h5&gt;
&lt;p&gt;Google AppEngine has a channel API which offers persistent connections
between your application and Google servers, allowing your application
to send messages to JavaScript clients in real time without the use of
polling. We'll use this Channel API to build the signaling system of our
WebRTC app on top of webapp2 and flask framework.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="flask-and-gevent"&gt;
&lt;h5&gt;Flask and gevent&lt;/h5&gt;
&lt;p&gt;We'll implement the same signaling system again, this time on top of
Flask using gevent for the persistent connection between the browser and
our application.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="outline-of-the-talk"&gt;
&lt;h4&gt;Outline of the talk&lt;/h4&gt;
&lt;div class="section" id="intro-5-min"&gt;
&lt;h5&gt;Intro (5 min)&lt;/h5&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Who are we?&lt;/li&gt;
&lt;li&gt;What is WebRTC?&lt;/li&gt;
&lt;li&gt;Functions of WebRTC.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="webrtc-apis-and-demos-3-min"&gt;
&lt;h5&gt;WebRTC APIs and Demos (3 min)&lt;/h5&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;MediaStream (getUserMedia) API&lt;/li&gt;
&lt;li&gt;RTCPeerConnection API&lt;/li&gt;
&lt;li&gt;RTCDataChannel API&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="signaling-in-webrtc-applications-3-min"&gt;
&lt;h5&gt;Signaling in WebRTC Applications (3 min)&lt;/h5&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;What is signaling?&lt;/li&gt;
&lt;li&gt;Why is it needed?&lt;/li&gt;
&lt;li&gt;How to implement it?&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="implementation-of-signaling-16-min"&gt;
&lt;h5&gt;Implementation of signaling (16 min)&lt;/h5&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Implementation using Google AppEngine and Channel API&lt;/li&gt;
&lt;li&gt;Implementation using Flask and gevent&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="questions-3-min"&gt;
&lt;h5&gt;Questions (3 min)&lt;/h5&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Tarashish Mishra</dc:creator><pubDate>Fri, 25 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-25:europython-2014/building-realtime-web-applications-with-webrtc-an.html</guid></item><item><title>Combining the powerful worlds of Python and R</title><link>https://pyvideo.org/europython-2014/combining-the-powerful-worlds-of-python-and-r.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Although maybe not very well known in the Python community there exists
a powerful statistical open-source ecosystem called R. Mostly used in
scientific contexts it provides lots of functionality for doing
statistical analysis, generation of various kinds of plots and graphs,
and much, much more.&lt;/p&gt;
&lt;p&gt;The triplet &lt;a class="reference external" href="http://www.r-project.org"&gt;R&lt;/a&gt;,
&lt;a class="reference external" href="https://rforge.net/Rserve/"&gt;Rserve&lt;/a&gt;, and
&lt;a class="reference external" href="https://pypi.python.org/pypi/pyRserve/"&gt;pyRserve&lt;/a&gt; allows the
building up of a network bridge from Python to R: Now R-functions can be
called from Python as if they were implemented in Python, and even
complete R scripts can be executed through this connection.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;pyRserve is a small open source project originally developed to fulfill
the needs of a German biotech company to do statistical analysis in a
large Python-based Lab Information Management System (LIMS). In contrast
to other R-related libraries like RPy where Python and R run on the same
host, pyRserve allows the distribution of complex operations and
calculations over multiple R servers across the network.&lt;/p&gt;
&lt;p&gt;The aim of this talk is to show how easily Python can be connected to R,
and to present a number of selected (simple) code examples which
demonstrate the power of this setup.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ralph Heinkel</dc:creator><pubDate>Fri, 25 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-25:europython-2014/combining-the-powerful-worlds-of-python-and-r.html</guid></item><item><title>Concurrent programming with Python and my little experiment</title><link>https://pyvideo.org/europython-2014/concurrent-programming-with-python-and-my-little.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Concurrent programming in Python may be hard. A lot of solutions exists
though. Most of them are based on an eventloop. This talk will present
what I discovered and tested along the time and my little
&lt;a class="reference external" href="http://github.com/benoitc/offset"&gt;experiment&lt;/a&gt; in porting the Go
concurrency model in Python.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Concurrent programming in Python may be hard. A lot of solutions exists
though. Most of them are based on an eventloop. This talk will present
what I discovered and tested along the time with code examples, from
asyncore to asyncio, passing by gevent, eventlet, twisted and some new
alternatives like evergreen or gruvi. It will also present my little
experiment in porting the Go concurrency model in Python named
&lt;a class="reference external" href="http://github.com/benoitc/offset"&gt;offset&lt;/a&gt;, how it progressed in 1
year and how it became a fully usable library .&lt;/p&gt;
&lt;p&gt;This presentation will be an update of the presentation I gave at the
FOSDEM 2014. It will introduce to the concurrency concepts and how they
are implemented in the different libraries.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Benoit Chesneau</dc:creator><pubDate>Fri, 25 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-25:europython-2014/concurrent-programming-with-python-and-my-little.html</guid></item><item><title>Conference Closing</title><link>https://pyvideo.org/europython-2014/conference-closing.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Unknown</dc:creator><pubDate>Fri, 25 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-25:europython-2014/conference-closing.html</guid></item><item><title>Event discrete simulation with SimPy</title><link>https://pyvideo.org/europython-2014/event-discrete-simulation-with-simpy.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Often, experiments with real world systems are high-risk, accompanied by
high costs or not even possible at all. That’s when simulations come
into play. This talk will give a brief introduction into the topic of
simulation. By means of simple examples, it will demonstrate how you can
use SimPy to implement event-discrete simulations and which features
SimPy offers to help you doing that.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Simulation is important for the analysis of complex systems or the
analysis of the impact of certain actions on that systems. They are
especially useful if the actions are potentially harmful or expensive.&lt;/p&gt;
&lt;p&gt;Simulation is used in various natural scientific and economic areas,
e.g., for the modeling and study of biological or physical systems, for
resource scheduling and optimization or at the research for the
integration of renewable energies into the power grid (my personal
background). The simulated time can thereby be seen as continuous or
discrete (discrete time or discrete event).&lt;/p&gt;
&lt;p&gt;In this talk, I want to show why Python is a good choice for
implementing simulation models and how SimPy can help here.&lt;/p&gt;
&lt;p&gt;Structure of the talk (20min talking + 5min discussion + 5min buffer):&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Why simulation? (5min)&lt;/li&gt;
&lt;li&gt;History of SimPy (3min)&lt;/li&gt;
&lt;li&gt;How does SimPy work? (9min)&lt;/li&gt;
&lt;li&gt;Conclusion (3min)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the introduction, I’ll briefly explain what simulation is and
motivate, why it is a useful tool.&lt;/p&gt;
&lt;p&gt;The main part will consist of an introduction and demonstration of
SimPy. Since SimPy is now more then ten years old, I’ll first give a
quick overview about its history and development. Afterwards, I’ll
explain SimPy’s concepts and features by means of simple examples.&lt;/p&gt;
&lt;p&gt;In the conclusion, I’ll give a short outlook on the future development
of SimPy.&lt;/p&gt;
&lt;p&gt;The main goal of this talk is to create awareness that simulation is a
powerful tool in a lot of domains and to give the audience enough
information to ease their first steps.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Stefan</dc:creator><pubDate>Fri, 25 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-25:europython-2014/event-discrete-simulation-with-simpy.html</guid></item><item><title>Everything You Always Wanted to Know About Memory in Python But Were Afraid to Ask</title><link>https://pyvideo.org/europython-2014/everything-you-always-wanted-to-know-about-memory.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Have you ever wondered what happens to all the precious RAM after
running your 'simple' CPython code? Prepare yourself for a short
introduction to CPython memory management! This presentation will try to
answer some memory related questions you always wondered about. It will
also discuss basic memory profiling tools and techniques.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk will cover basics of CPython memory usage. It will start with
basics like objects and data structures representation. Then advanced
memory management aspects, such as sharing, segmentation, preallocation
or caching, will be discussed. Finally, memory profiling tools will be
presented.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Piotr Przymus</dc:creator><pubDate>Fri, 25 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-25:europython-2014/everything-you-always-wanted-to-know-about-memory.html</guid></item><item><title>Extending Scikit-Learn with your own Regressor</title><link>https://pyvideo.org/europython-2014/extending-scikit-learn-with-your-own-regressor.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;We show how to write your own robust linear estimator within the
Scikit-Learn framework using as an example the Theil-Sen estimator known
as &amp;quot;the most popular nonparametric technique for estimating a linear
trend&amp;quot;.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Scikit-Learn (&lt;a class="reference external" href="http://scikit-learn.org/"&gt;http://scikit-learn.org/&lt;/a&gt;) is a well-known and popular
framework for machine learning that is used by Data Scientists all over
the world. We show in a practical way how you can add your own estimator
following the interfaces of Scikit-Learn. First we give a small
introduction to the design of Scikit-Learn and its inner workings. Then
we show how easily Scikit-Learn can be extended by creating an own
estimator. In order to demonstrate this, we extend Scikit-Learn by the
popular and robust Theil-Sen Estimator
(&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Theil%E2%80%93Sen_estimator"&gt;http://en.wikipedia.org/wiki/Theil%E2%80%93Sen_estimator&lt;/a&gt;) that is
currently not in Scikit-Learn. We also motivate this estimator by
outlining some of its superior properties compared to the ordinary least
squares method (LinearRegression in Scikit-Learn).&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Florian Wilhelm</dc:creator><pubDate>Fri, 25 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-25:europython-2014/extending-scikit-learn-with-your-own-regressor.html</guid></item><item><title>Fun with cPython memory allocator</title><link>https://pyvideo.org/europython-2014/fun-with-cpython-memory-allocator.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Working with Python does not usually involve debugging memory problems:
the interpreter takes care of allocating and releasing system memory and
you get to enjoy working on real world issues. But what if you encounter
such problems? What if your program never releases memory? How do you
debug it?&lt;/p&gt;
&lt;p&gt;This talk describes some of the lesser known properties of cPython
memory allocator and some ways to debug memory-related problems, all
this based on real events.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Working with Python does not usually involve debugging memory problems:
the interpreter takes care of allocating and releasing system memory and
you get to enjoy working on real problems. But what if you encounter
such problems? What if your program never releases memory? How do you
debug it?&lt;/p&gt;
&lt;p&gt;I will tell a story of one programmer discovering such problems. The
talk will take listeners on a journey of issues they can encounter,
tools they can use to debug the problems and possible solutions to seek
out. There will also be a brief mention of general memory management
principles.&lt;/p&gt;
&lt;p&gt;cPython uses a combination of its own allocator, &lt;tt class="docutils literal"&gt;malloc&lt;/tt&gt;, and
&lt;tt class="docutils literal"&gt;mmap&lt;/tt&gt; pools to manage memory of Python programs. It usually is smart
enough, but there are some darker corners that are not well known by an
average Joe Programmer (read: me).&lt;/p&gt;
&lt;p&gt;There are tools that can help debug memory problems, but those are also
relatively unknown, and tend to have documentation that one might find
lacking. I will describe one such tool, called &lt;tt class="docutils literal"&gt;guppy&lt;/tt&gt;, which I have
found particulary helpful.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Tomasz Paczkowski</dc:creator><pubDate>Fri, 25 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-25:europython-2014/fun-with-cpython-memory-allocator.html</guid></item><item><title>Ganga: an interface to the LHC computing grid</title><link>https://pyvideo.org/europython-2014/ganga-an-interface-to-the-lhc-computing-grid.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Ganga is a tool, designed and used by the large particle physics
experiments at CERN. Written in pure Python, it delivers a clean, usable
interface to allow thousands of physicists to interact with the huge
computing resources available to them.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;a class="reference external" href="https://cern.ch/ganga"&gt;Ganga&lt;/a&gt; is a tool, designed and used by the
large particle physics experiments at CERN. Written in pure Python, it
delivers a clean, usable interface to allow thousands of physicists to
interact with the huge computing resources available to them. It
provides a single platform with which data analysis tasks can be run on
anything from a local machine to being distributed seamlessly to
computing centres around the world.&lt;/p&gt;
&lt;p&gt;The talk will cover the problems faced by physicists when dealing with
the computer infrastructure and how Ganga helps to solve this problem.
It will focus on how Python has helped create such a tool through its
advanced features such as metaclasses and integration into IPython.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Matt Williams</dc:creator><pubDate>Fri, 25 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-25:europython-2014/ganga-an-interface-to-the-lhc-computing-grid.html</guid></item><item><title>Lightning Talks</title><link>https://pyvideo.org/europython-2014/lightning-talks-2.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;A lightning talk is a short talk, typically only five minutes in
duration, providing an opportunity for participants - particularly
people not featured in the main programme - to deliver a presentation on
a subject of their choosing.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Various speakers</dc:creator><pubDate>Fri, 25 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-25:europython-2014/lightning-talks-2.html</guid><category>lightning talks</category></item><item><title>Out-of-Core Columnar Datasets</title><link>https://pyvideo.org/europython-2014/out-of-core-columnar-datasets.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Tables are a very handy data structure to store datasets to perform data
analysis (filters, groupings, sortings, alignments...).&lt;/p&gt;
&lt;p&gt;But it turns out that &lt;em&gt;how the tables are actually implemented&lt;/em&gt; makes a
large impact on how they perform.&lt;/p&gt;
&lt;p&gt;Learn what you can expect from the current tabular offerings in the
Python ecosystem.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;It is a fact: we just entered in the Big Data era. More sensors, more
computers, and being more evenly distributed throughout space and time
than ever, are forcing data analyists to navigate through oceans of data
before getting insights on what this data means.&lt;/p&gt;
&lt;p&gt;Tables are a very handy and spreadly used data structure to store
datasets so as to perform data analysis (filters, groupings, sortings,
alignments...). However, the actual table implementation, and
especially, whether data in tables is stored row-wise or column-wise,
whether the data is chunked or sequential, whether data is compressed or
not, among other factors, can make a lot of difference depending on the
analytic operations to be done.&lt;/p&gt;
&lt;p&gt;My talk will provide an overview of different libraries/systems in the
Python ecosystem that are designed to cope with tabular data, and how
the different implementations perform for different operations. The
libraries or systems discussed are designed to operate either with
on-disk data (&lt;a class="reference external" href="http://www.pytables.org"&gt;PyTables&lt;/a&gt;, &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Relational_database"&gt;relational
databases&lt;/a&gt;,
&lt;a class="reference external" href="http://blz.pydata.org"&gt;BLZ&lt;/a&gt;, &lt;a class="reference external" href="http://blaze.pydata.org"&gt;Blaze&lt;/a&gt;...)
as well as in-memory data containers (&lt;a class="reference external" href="http://www.numpy.org/"&gt;NumPy&lt;/a&gt;,
&lt;a class="reference external" href="https://github.com/ContinuumIO/dynd-python"&gt;DyND&lt;/a&gt;,
&lt;a class="reference external" href="http://pandas.pydata.org/"&gt;Pandas&lt;/a&gt;, &lt;a class="reference external" href="http://blz.pydata.org"&gt;BLZ&lt;/a&gt;,
&lt;a class="reference external" href="http://blaze.pydata.org"&gt;Blaze&lt;/a&gt;...).&lt;/p&gt;
&lt;p&gt;A special emphasis will be put in the on-disk (also called out-of-core)
databases, which are the most commonly used ones for handling extremely
large tables.&lt;/p&gt;
&lt;p&gt;The hope is that, after this lecture, the audience will get a better
insight and a more informed opinion on the different solutions for
handling tabular data in the Python world, and most especially, which
ones adapts better to their needs.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Francesc Alted</dc:creator><pubDate>Fri, 25 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-25:europython-2014/out-of-core-columnar-datasets.html</guid></item><item><title>Post-Mortem Debugging with Heap-Dumps</title><link>https://pyvideo.org/europython-2014/post-mortem-debugging-with-heap-dumps.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;UNIX core-dumps, Windows minidumps or Java heap-dumps are well
established technologies for post-mortem defect analysis. I'll present a
similar technology for Python. An improved pickling mechanism makes it
possible to serialise the state of a Python program for subsequent
analysis with a conventional Python-debugger.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;UNIX core-dumps, Windows minidumps and analogous solutions of other
operating systems are well established technologies for post-mortem
defect analysis of native-code processes. In principle those dumps can
be used to analyse „interpreted“ programs running within a native-code
interpreter-process. However in practise this approach is tedious and
not always successful [1]. Therefore operating system independent dump
methods were developed for some „interpreted“ languages [2]. A prominent
example are Java heap dumps [3].&lt;/p&gt;
&lt;p&gt;Unfortunately up to now there was no practically usable dump-method for
Python. Various attempts were made to utilise OS-level dump methods [4,
5]. In 2012 Eli Finer published the Python module &lt;em&gt;pydump&lt;/em&gt; [6]. This
module pickles the traceback of an exception and subsequently uses the
pdb debugger to analyse the unpickled traceback. Unfortunately &lt;em&gt;pydump&lt;/em&gt;
fails on PicklingErrors.&lt;/p&gt;
&lt;p&gt;In my talk I'll present the Python package
&lt;a class="reference external" href="https://pypi.python.org/pypi/pyheapdump"&gt;*pyheapdump*&lt;/a&gt;. It has the
same operation principle as Eli's &lt;em&gt;pydump&lt;/em&gt;, but is an independent
implementation. &lt;em&gt;pyheapdump&lt;/em&gt; uses an extended pickler
(&lt;a class="reference external" href="https://pypi.python.org/pypi/sPickle"&gt;sPickle&lt;/a&gt;) to serialise all
relevant objects of a Python process to a file. Later on a fault
tolerant unpickler recreates the objects and a common Python debugger
can be used to analyse the dump. The pickler extensions make it possible
to:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;pickle and unpickle many commonly not pickleable objects [7].&lt;/li&gt;
&lt;li&gt;replace the remaining not pickleable objects by surrogate objects so
that the resulting object graph is almost isomorphic to the original
object graph.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Which objects are relevant? In its default operation mode &lt;em&gt;pyheapdump&lt;/em&gt;
uses the frame-stacks of all threads as start point for pickling.
Following the usual rules for pickling the dump includes all local
variables and all objects reachable from a local variable and so on.
That is usually enough for a successful defect analysis.&lt;/p&gt;
&lt;p&gt;Compared with other Python post-mortem debugging methods &lt;em&gt;pyheapdump&lt;/em&gt;
has several advantages:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;It is a pure Python solution and independent from the operation
system.&lt;/li&gt;
&lt;li&gt;Creation of the pyheapdump and fault analysis can be performed
different computers.&lt;/li&gt;
&lt;li&gt;It is not obstructive. It does not modify / monkey-patch or disturb
the dumped process in any way, with the exception of loading
additional modules.&lt;/li&gt;
&lt;li&gt;If used with the Pydev-debugger, it supports multi-threaded
applications.&lt;/li&gt;
&lt;li&gt;If used with the Pydev-debugger and Stackless Python, it supports
tasklets.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The implementation of &lt;em&gt;pyheapdump&lt;/em&gt; is fairly small, because it draws
most of its functionality from the underlying sPickle package and from
the new Stackless-Support [8] of the Pydev-Debugger. Therefore it is -
despite of its short history - already a useful piece of software.&lt;/p&gt;
&lt;div class="section" id="outline-of-the-talk"&gt;
&lt;h4&gt;Outline of the talk&lt;/h4&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Introduction to the problem&lt;/li&gt;
&lt;li&gt;Previous works&lt;/li&gt;
&lt;li&gt;The concept of &lt;em&gt;pyheapdump&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Live demonstration&lt;/li&gt;
&lt;li&gt;Open problems and further development&lt;/li&gt;
&lt;li&gt;Questions and Answers&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="references"&gt;
&lt;h4&gt;References&lt;/h4&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Andraz Tori, Python, 2011-01-16: &lt;em&gt;gdb and a very large core dump&lt;/em&gt;,
blog at &lt;a class="reference external" href="http://www.zemanta.com/blog/python-gdb-large-core-dump/"&gt;http://www.zemanta.com/blog/python-gdb-large-core-dump/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;David Pacheco, ACM Queue - Programming Languages Volume 9 Issue 10,
October 2011: &lt;em&gt;Postmortem Debugging in Dynamic Environments&lt;/em&gt;, PDF
&lt;a class="reference external" href="http://dl.acm.org/ft_gateway.cfm?id=2039361&amp;amp;ftid=1050739&amp;amp;dwn=1&amp;amp;CFID=290171300&amp;amp;CFTOKEN=95099236"&gt;http://dl.acm.org/ft_gateway.cfm?id=2039361&amp;amp;ftid=1050739&amp;amp;dwn=1&amp;amp;CFID=290171300&amp;amp;CFTOKEN=95099236&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Chris Bailey, Andrew Johnson, Kevin Grigorenko, IBM developerWorks,
2011-03-15: &lt;em&gt;Debugging from dumps - Diagnose more than memory leaks
with Memory Analyzer&lt;/em&gt;, PDF
&lt;a class="reference external" href="http://www.ibm.com/developerworks/library/j-memoryanalyzer/j-memoryanalyzer-pdf.pdf"&gt;http://www.ibm.com/developerworks/library/j-memoryanalyzer/j-memoryanalyzer-pdf.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Brian Curtin, 2011-09-29: &lt;em&gt;minidumper - Python crash dumps on
Windows&lt;/em&gt;, blog at
&lt;a class="reference external" href="http://blog.briancurtin.com/posts/20110929minidumper-python-crash-dumps-on-windows.html"&gt;http://blog.briancurtin.com/posts/20110929minidumper-python-crash-dumps-on-windows.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;David Malcolm, Fedora Feature, 2010-04-06: &lt;em&gt;Easier Python Debugging&lt;/em&gt;
at &lt;a class="reference external" href="http://fedoraproject.org/wiki/Features/EasierPythonDebugging"&gt;http://fedoraproject.org/wiki/Features/EasierPythonDebugging&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Eli Finer, Github-Project, 2012: &lt;em&gt;pydump&lt;/em&gt; at
&lt;a class="reference external" href="https://github.com/gooli/pydump"&gt;https://github.com/gooli/pydump&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Anselm Kruis, EuroPython 2011: &lt;em&gt;Advanced Pickling with Stackless
Python and sPickle&lt;/em&gt;, archived talk at
&lt;a class="reference external" href="https://ep2013.europython.eu/conference/talks/advanced-pickling-with-stackless-python-and-spickle"&gt;https://ep2013.europython.eu/conference/talks/advanced-pickling-with-stackless-python-and-spickle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Fabio Zadrozny, 2013-12-12: &lt;em&gt;PyDev 3.1.0 released&lt;/em&gt;, blog at
&lt;a class="reference external" href="http://pydev.blogspot.de/2013/12/pydev-310-released.html"&gt;http://pydev.blogspot.de/2013/12/pydev-310-released.html&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Anselm Kruis</dc:creator><pubDate>Fri, 25 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-25:europython-2014/post-mortem-debugging-with-heap-dumps.html</guid></item><item><title>Practical PyBuilder</title><link>https://pyvideo.org/europython-2014/practical-pybuilder.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;&lt;em&gt;PyBuilder&lt;/em&gt; is a software build tool written in pure python which mainly
targets pure python applications. It provides glue between existing
build frameworks, thus empowering you to focus on the big picture of the
build process.&lt;/p&gt;
&lt;p&gt;It will be shown through demonstrations and samples how a simple,
human-readable and declarative configuration can lead to an
astonishingly well-integrated build process which will make maintainers,
developers and newcomers happy.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;div class="section" id="why-another-build-tool"&gt;
&lt;h4&gt;Why another build tool&lt;/h4&gt;
&lt;p&gt;Starting up a simple python project with best practices still takes a
lot of boilerplate and glueing (e.G. chaining unit tests and integration
tests in the build process, adding a linter, measuring coverage, ...).
It often results in extremely ugly homebrew scripts and edge-case
solutions that are not reusable. There are even programs out there (e.G.
cookiecutter) that encourage boilerplate code generation!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="build-orchestration"&gt;
&lt;h4&gt;Build orchestration&lt;/h4&gt;
&lt;p&gt;PyBuilder borrows from the &lt;em&gt;maven&lt;/em&gt; idea of phases (packaging, verifying,
publishing, ...) to set up a fully declarative and automated build that
can be run locally and remotely (build servers) in the very same way.
Rather than reinventing the wheel, it provides glue between existing
solutions (like unittest, coverage, flake8, ...) through a simple but
powerful plugin mechanism.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-talk"&gt;
&lt;h4&gt;The talk&lt;/h4&gt;
&lt;p&gt;After a more theoretical talk with a colleague at PyConDE 2013, I want
to show how it's actually like to work with &lt;em&gt;PyBuilder&lt;/em&gt;. This includes&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;starting up a project&lt;/li&gt;
&lt;li&gt;running builds&lt;/li&gt;
&lt;li&gt;using plugins&lt;/li&gt;
&lt;li&gt;writing a plugin&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The demo code will be made available on GitHub and I'll probably have
recordings prepped in case something goes wrong.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="reviewer-faq"&gt;
&lt;h4&gt;Reviewer FAQ&lt;/h4&gt;
&lt;div class="section" id="how-does-pybuilder-compare-to-other-existing-solutions-like-zc-buildout"&gt;
&lt;h5&gt;How does PyBuilder compare to other existing solutions like zc.buildout?&lt;/h5&gt;
&lt;p&gt;As opposed to solutions like zc.buildout which focus on the &lt;em&gt;building&lt;/em&gt;
of complex projects (many parts, complex dependencies) PyBuilder
emphasizes the full build process for very simple projects. Undoubtedly,
buildout is more powerful for building in that regard and there is no
reason to switch to PyBuilder.&lt;/p&gt;
&lt;p&gt;However, for simple projects (a few packages, pure python) we believe
that PyBuilder is better, especially if you're starting out with Python.
The plugin architecture (as opposed to recipes) makes it easier to
reason about what is going on. We are able to model dependencies between
build phases (like &amp;quot;coverage&amp;quot; needing &amp;quot;unit tests&amp;quot; and &amp;quot;packaging&amp;quot;
needing &amp;quot;integration tests&amp;quot;) where recipes are not. It also seems (after
looking through the recipes available for buildout) that we have more
focus on QA as part of the build process (lint code, differentiate
between unit/integration tests, code analysis, ...).&lt;/p&gt;
&lt;p&gt;There is also a special focus on having the build descriptor written in
Python (with fluent interfaces where possible) so that it is possible to
understand what the configuration is by reading plain english, as
opposed to zc.buildout (where the configuration is an ini file, or SCons
which is very make-oriented).&lt;/p&gt;
&lt;p&gt;In the end, a big difference between most build tools and PyBuilder is
that PyBuilder is more about orchestration. We didn't reinvent packaging
or linting, we simply use what is already there (setuptools, flake8,
pymetrics, ...). This allows users to use the tools they want without
having to do the integration themselves, and still get a nice, unified
build process out of it.&lt;/p&gt;
&lt;p&gt;A simple example :&lt;/p&gt;
&lt;p&gt;In buildout, code analysis can be done with&lt;/p&gt;
&lt;pre class="literal-block"&gt;
[buildout]
parts += code-analysis

[code-analysis]
recipe = plone.recipe.codeanalysis
directory = ${buildout:directory}/src
&lt;/pre&gt;
&lt;p&gt;This is not readable IMHO. In PyBuilder it can look like this :&lt;/p&gt;
&lt;pre class="literal-block"&gt;
use_plugin('python.flake8')
project.set_property('flake8_include_test_sources', True)
project.set_property('flake8_ignore', 'E501')
project.set_property('flake8_break_build', True)
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="it-provides-glue-between-existing-build-frameworks-which-ones-could-you-name-some-at-least"&gt;
&lt;h5&gt;&amp;quot;It provides glue between existing build frameworks&amp;quot; - which ones ? Could you name (some at least) ?&lt;/h5&gt;
&lt;p&gt;Currently there is only a plugin for building with distutils/setuptools.
Should that change (e.G. new contender) it would be easy to switch using
PyBuilder.&lt;/p&gt;
&lt;p&gt;Examples where glue is needed :&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Glue setuptools + unittest, so that no distribution can be shipped if
tests fail&lt;/li&gt;
&lt;li&gt;Glue setuptools + coverage + unittest, so that no distribution can be
shipped if the statement coverage is too low (configurable ofc)&lt;/li&gt;
&lt;li&gt;Glue setuptools + pip so that cloned projects can be built with their
dependencies without needing to pip install manually&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Maximilien Riehl</dc:creator><pubDate>Fri, 25 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-25:europython-2014/practical-pybuilder.html</guid></item><item><title>Python Driven Company</title><link>https://pyvideo.org/europython-2014/python-driven-company.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Adopting Python across a company brings extra agility and productivity
not provided by traditional mainstream tools like Excel. This is the
story of programmers teaching non-programmers, from different
departments, to embrace Python in their daily work.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;By introducing ipython notebook, pandas and the other data analysis
packages that make python even more accessible and attractive, we
attempted to adapt python as a core technology across our whole company.
We’ve challenged the dominant position of Microsoft Excel and similar
tools, and dared to replace it by pandas-powered ipython notebooks.&lt;/p&gt;
&lt;p&gt;During this transitional phase, we have been inspired and sometimes
forced to develop multiple packages that extend pandas, numpy etc., in
order to enable our colleagues, in other departments, to access all the
data they need. Moreover, we are developing several high level
functionalities for the notebook environment.&lt;/p&gt;
&lt;p&gt;The notebook environment is allowing us to be extremely responsive to
the changes our users are asking for, since, for part of the work, we
don’t have to go through the whole traditional development process.&lt;/p&gt;
&lt;p&gt;The talk focuses on challenges and problems we’ve solved and managed in
order to achieve our long term goal of creating highly agile,
data-driven non-tech teams, free from the constraints imposed by
mainstream technologies, and all of this thanks to python.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Fabrizio Romano</dc:creator><pubDate>Fri, 25 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-25:europython-2014/python-driven-company.html</guid></item><item><title>Python's Role in Big Data Analytics: Past, Present, and...</title><link>https://pyvideo.org/europython-2014/pythons-role-in-big-data-analytics-past-presen.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Python has had a long history in Scientific Computing which means it has
had the fundamental building blocks necessary for doing Data Analysis
for many years. As a result, Python has long played a role in scientific
problems with the largest data sets. Lately, it has also grown in
traction as a tool for doing rapid Data Analysis. As a result, Python is
the center of an emerging trend that is unifying traditional High
Performance Computing with &amp;quot;Big Data&amp;quot; applications. In this talk I will
discuss the features of Python and its popular libraries that have
promoted its use in data analytics. I will also discuss the features
that are still missing to enable Python to remain competitive and useful
for data scientists and other domain experts. Finally, will describe
open source projects that are currently occupying my attention which can
assist in keeping Python relevant and even essential in Data Analytics
for many years to come.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Travis Oliphant</dc:creator><pubDate>Fri, 25 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-25:europython-2014/pythons-role-in-big-data-analytics-past-presen.html</guid></item><item><title>Scalable Realtime Architectures in Python</title><link>https://pyvideo.org/europython-2014/scalable-realtime-architectures-in-python.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;This talk will focus on you can readily implement highly scalable and
fault tolerant realtime architectures, such as dashboards, using Python
and tools like Storm, Kafka, and ZooKeeper. We will focus on two related
aspects: composing reliable systems using at-least-once and idempotence
semantics and how to partition for locality.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Increasingly we are interested in implementing highly scalable and fault
tolerant realtime architectures such as the following:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Realtime aggregation. This is the realtime analogue of working with
batched map-reduce in systems like Hadoop.&lt;/li&gt;
&lt;li&gt;Realtime dashboards. Continuously updated views on all your
customers, systems, and the like, without breaking a sweat.&lt;/li&gt;
&lt;li&gt;Realtime decision making. Given a set of input streams, policy on
what you like to do, and models learned by machine learning, optimize
a business process. One example includes autoscaling a set of
servers.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(We use realtime in the soft sense: systems that are continuously
computing on input streams of data and make a best effort to keep up; it
certainly does not imply hard realtime systems that strictly bound their
computation times.)&lt;/p&gt;
&lt;p&gt;Obvious tooling for such implementations include Storm (for event
processing), Kafka (for queueing), and ZooKeeper (for tracking and
configuration). Such components, written respectively in Clojure
(Storm), Scala (Kafka), and Java (ZooKeeper), provide the desired
scalability and reliability. But what may not be so obvious at first
glance is that we can work with other languages, including Python, for
the application level of such architectures. (If so inclined, you can
also try reimplementing such components in Python, but why not use
something that's been proven to be robust?)&lt;/p&gt;
&lt;p&gt;In fact Python is likely a better language for the app level, given that
it is concise, high level, dynamically typed, and has great libraries.
Not to mention fun to write code in! This is especially true when we
consider the types of tasks we need to write: they are very much like
the data transformations and analyses we would have written of say a
standard Unix pipeline. And no one is going to argue that writing such a
filter in say Java is fun, concise, or even considerably faster in
running time.&lt;/p&gt;
&lt;p&gt;So let's look at how you might solve such larger problems. Given that it
was straightforward to solve a small problem, we might approach as
follows. Simply divide up larger problems in small one. For example,
perhaps work with one customer at a time. And if failure is an ever
present reality, then simply ensure your code retries, just like you
might have re-run your pipeline against some input files.&lt;/p&gt;
&lt;p&gt;Unfortunately both require distributed coordination at scale. And
distributed coordination is challenging, especially for real systems,
that will break at scale. Just putting a box in your architecture
labeled &lt;strong&gt;&amp;quot;ZooKeeper&amp;quot;&lt;/strong&gt; doesn't magically solve things, even if
ZooKeeper can be a very helpful part of an actual solution.&lt;/p&gt;
&lt;p&gt;Enter the Storm framework. While Storm certainly doesn't solve all
problems in this space, it can support many different types of realtime
architectures and works well with Python. In particular, Storm solves
two key problems for you.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Partitioning&lt;/strong&gt;. Storm lets you partition streams, so you can break
down the size of your problem. But if the a node running your code
fails, Storm will restart it. Storm also ensures such topology
invariants as the number of nodes (spouts and bolts in Storm's lingo)
that are running, making it very easy to recover from such failures.&lt;/p&gt;
&lt;p&gt;This is where the cleverness really begins. What can you do if you can
ensure that &lt;strong&gt;all the data&lt;/strong&gt; you need for a given continuously updated
computation - what is the state of this customer's account? - can be put
in &lt;strong&gt;exactly one place&lt;/strong&gt;, then flow the supporting data through it over
time? We will look at how you can readily use such locality in your own
Python code.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Retries&lt;/strong&gt;. Storm tracks success and failure of events being processed
efficiently through a batching scheme and other cleverness. Your code
can then choose to retry as necessary. Although Storm also supports
exactly-once event processing semantics, we will focus on the simpler
model of at-least-once semantics. This means your code must tolerate
retry, or in a word, is idempotent. But this is straightforward. We have
often written code like the following:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
seen = set()
for record in stream:
    k = uniquifier(record)
    if k not in seen:
       seen.add(k)
       process(record)
&lt;/pre&gt;
&lt;p&gt;Except of course that any such real usage has to ensure it doesn't
attempt to store all observations (first, download the Internet! ;), but
removes them by implementing some sort of window or uses data structures
like HyperLogLog, as we will discuss.&lt;/p&gt;
&lt;p&gt;One more aspect of reliability we will discuss is how to compose
reliable systems out of reliable components; we will show how this can
be readily done with a real example of consuming Kafka and tracking
consumption progress in ZooKeeper.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jim Baker</dc:creator><pubDate>Fri, 25 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-25:europython-2014/scalable-realtime-architectures-in-python.html</guid></item><item><title>Scientific Visualization with GR</title><link>https://pyvideo.org/europython-2014/scientific-visualization-with-gr.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Python developers often get frustrated when managing visualization
packages that cover the specific needs in scientific or engineering
environments. The &lt;a class="reference external" href="http://gr-framework.org/"&gt;*GR* framework&lt;/a&gt; could
help. &lt;em&gt;GR&lt;/em&gt; is a library for visualization applications ranging from
publication-quality 2D graphs to the creation of complex 3D scenes and
can easily be integrated into existing Python environments or
distributions like &lt;em&gt;Anaconda&lt;/em&gt;.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python has long been established in software development departments of
research and industry, not least because of the proliferation of
libraries such as &lt;em&gt;SciPy&lt;/em&gt; and &lt;em&gt;Matplotlib&lt;/em&gt;. However, when processing
large amounts of data, in particular in combination with GUI toolkits
(&lt;em&gt;Qt&lt;/em&gt;) or three-dimensional visualizations (&lt;em&gt;OpenGL&lt;/em&gt;), it seems that
Python as an interpretative programming language may be reaching its
limits.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;&lt;em&gt;Outline&lt;/em&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Introduction (1 min)&lt;ul&gt;
&lt;li&gt;motivation&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;GR framework (2 mins)&lt;ul&gt;
&lt;li&gt;layer structure&lt;/li&gt;
&lt;li&gt;output devices and capabilities&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;GR3 framework (1 min)&lt;ul&gt;
&lt;li&gt;layer structure&lt;/li&gt;
&lt;li&gt;output capabilities (3 mins)&lt;ul&gt;
&lt;li&gt;high-resolution images&lt;/li&gt;
&lt;li&gt;POV-Ray scenes&lt;/li&gt;
&lt;li&gt;OpenGL drawables&lt;/li&gt;
&lt;li&gt;HTML5 / WebGL&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Simple 2D / 3D examples (2 min)&lt;/li&gt;
&lt;li&gt;Interoperability (PyQt/PySide, 3 min)&lt;/li&gt;
&lt;li&gt;How to speed up Python scripts (4 mins)&lt;ul&gt;
&lt;li&gt;Numpy&lt;/li&gt;
&lt;li&gt;Numba (Pro)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Animated visualization examples (live demos, 6 mins)&lt;ul&gt;
&lt;li&gt;physics simulations&lt;/li&gt;
&lt;li&gt;surfaces / meshes&lt;/li&gt;
&lt;li&gt;molecule viewer&lt;/li&gt;
&lt;li&gt;MRI voxel data&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Outlook (1 min)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Notes&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Links to similar talks, tutorials or presentations can be found
&lt;a class="reference external" href="http://gr-framework.org/"&gt;here&lt;/a&gt;. Unfortunately, most of them are in
German language.&lt;/p&gt;
&lt;p&gt;The GR framework has already been presented in a talk at PyCon DE
&lt;a class="reference external" href="https://2012.de.pycon.org/programm/schedule/sessions/54"&gt;2012&lt;/a&gt; and
&lt;a class="reference external" href="https://2013.de.pycon.org/schedule/sessions/45/"&gt;2013&lt;/a&gt;, during a
&lt;a class="reference external" href="https://us.pycon.org/2013/schedule/presentation/158/"&gt;poster
session&lt;/a&gt; at
PyCon US 2013, and at &lt;a class="reference external" href="http://josefheinen.de/rasberry-pi.html"&gt;PythonCamps
2013&lt;/a&gt; in Cologne. The slides
for the PyCon.DE 2013 talk can be found
&lt;a class="reference external" href="http://iffwww.iff.kfa-juelich.de/pub/doc/PyCon_DE_2013"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;As part of a collaboration the GR framework has been integrated into
&lt;a class="reference external" href="http://cdn.frm2.tum.de/fileadmin/stuff/services/ITServices/nicos-2.0/dirhtml/"&gt;NICOS&lt;/a&gt;
(a network-based control system completely written in Python) as a
replacement for PyQwt.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Josef</dc:creator><pubDate>Fri, 25 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-25:europython-2014/scientific-visualization-with-gr.html</guid></item><item><title>Sponsoring von Open Source</title><link>https://pyvideo.org/europython-2014/sponsoring-von-open-source.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;und damit den Chef überzeugen&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Schlomo Schapiro</dc:creator><pubDate>Fri, 25 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-25:europython-2014/sponsoring-von-open-source.html</guid></item><item><title>Twisted Names: DNS Building Blocks for Python Programmers</title><link>https://pyvideo.org/europython-2014/twisted-names-dns-building-blocks-for-python-pro.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;In this talk I will report on my efforts to update the DNS components of
Twisted and discuss some of the things I've learned along the way. I'll
demonstrate the EDNS0, DNSSEC and DANE client support which I have been
working on and show how these new Twisted Names components can be glued
together to build novel DNS servers and clients.&lt;/p&gt;
&lt;p&gt;Twisted is an event-driven networking engine written in Python and
licensed under the open source MIT license. It is a platform for
developing internet applications.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;My talk will consist of four main sections. Given the 30 minute time
constraint, I may shorten or drop the two introductory parts in favour
of the narrative and demonstration of interesting new APIs and code
examples in the final two parts. My experience of delivering a similar
talk at PyconUK 2013 is that those are the parts that will most interest
the audience and prompt most audience questions.&lt;/p&gt;
&lt;p&gt;Here are my proposed sections with rough time allocations and
descriptions:&lt;/p&gt;
&lt;div class="section" id="introducing-twisted-names-0-5"&gt;
&lt;h4&gt;Introducing Twisted Names (0-5)&lt;/h4&gt;
&lt;p&gt;Twisted includes a comprehensive set of DNS components, collectively
known as Twisted Names.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://twistedmatrix.com/trac/wiki/TwistedNames"&gt;https://twistedmatrix.com/trac/wiki/TwistedNames&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I will begin the talk with a quick introduction to Twisted Names and its
capabilities, including one or two simple code examples.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="introducing-my-project-0-5"&gt;
&lt;h4&gt;Introducing My Project (0-5)&lt;/h4&gt;
&lt;p&gt;With generous funding from The NLnet Foundation I am adding EDNS(0) and
DNSSEC client support in Twisted Names, including full DNSSEC
verification and DANE support.&lt;/p&gt;
&lt;p&gt;In the talk I will quickly summarise the steps taken and lessons learned
in securing that funding, and hope to encourage the audience to seek
funding to support there own pet OSS projects.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-s-new-in-twisted-names-project-progress-report-10"&gt;
&lt;h4&gt;What's New in Twisted Names / Project Progress Report (10)&lt;/h4&gt;
&lt;p&gt;My project plan is divided into the following broad milestones.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;EDNS(0)&lt;ol class="arabic"&gt;
&lt;li&gt;OPT record&lt;/li&gt;
&lt;li&gt;Extended Message object with additional EDNS(0) items&lt;/li&gt;
&lt;li&gt;EDNS Client&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;RRSET handling&lt;ol class="arabic"&gt;
&lt;li&gt;Canonical Form and Order of Resource Records&lt;/li&gt;
&lt;li&gt;Receiving RRSETs&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;DNSSEC&lt;ol class="arabic"&gt;
&lt;li&gt;New DNSSEC Records and Lookup Methods&lt;/li&gt;
&lt;li&gt;Security-aware Non-validating Client&lt;/li&gt;
&lt;li&gt;Validating Client&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;DANE&lt;ol class="arabic"&gt;
&lt;li&gt;A twistd dns authoritative server capable of loading and serving
TLSA records.&lt;/li&gt;
&lt;li&gt;A Twisted web client Agent wrapper which performs TLSA lookup and
verification of a server certificate.&lt;/li&gt;
&lt;li&gt;A HostnameClientEndpoint which performs TLSA lookup and
verification of a server certificate.&lt;/li&gt;
&lt;li&gt;A command line tool for debugging TLSA records and for verifying a
certificate file against a domain name.&lt;/li&gt;
&lt;li&gt;A TLSA Record class for encoding and decoding TLSA bytes.&lt;/li&gt;
&lt;li&gt;A TLSA lookup method which accepts port, protocol and hostname and
constructs a suitable TLSA domain name.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In the talk I will quickly outline these goals, report on my progress so
far, and show running code examples to demonstrate the new APIs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="future-developments-5"&gt;
&lt;h4&gt;Future Developments (5)&lt;/h4&gt;
&lt;p&gt;The aim of my project is to lay foundations that will eventually allow
end-to-end DNSSEC verification in all the core Twisted networking
components, including Twisted Conch (SSH), Mail (SMTP, POP3),
Perspective Broker (RPC), Web (HTTP, XML-RPC, SOAP), Words (XMPP, IRC).&lt;/p&gt;
&lt;p&gt;Additionally I hope that this foundation work will encourage the
development of end-to-end DNSSEC verification in many of the Open Source
and commercial projects built on top of Twisted.&lt;/p&gt;
&lt;p&gt;I will end the talk by outlining these exciting possibilities, and
demonstrate some code examples that illustrate these possibilities.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="q-a-5-10"&gt;
&lt;h4&gt;Q &amp;amp; A (5-10)&lt;/h4&gt;
&lt;p&gt;I'm determined to leave at least five minutes at the end for audience
questions. At PyconUK 2013 I was frustrated because I ran out of time
and ended up answering questions outside the lecture theatre; questions
which would have been interesting to the whole audience.&lt;/p&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Richard Wall</dc:creator><pubDate>Fri, 25 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-25:europython-2014/twisted-names-dns-building-blocks-for-python-pro.html</guid></item><item><title>Using asyncio (aka Tulip) for home automation</title><link>https://pyvideo.org/europython-2014/using-asyncio-aka-tulip-for-home-automation.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;This talk will cover the new asyncio library in Python 3.4 (also known
as Tulip) and will use the area of home automation as a case study to
explore its features. This talk will be based on code using Python 3.3+.&lt;/p&gt;
&lt;p&gt;Home automation is a growing area and the number of devices and
potential applications is huge. From monitoring electricity usage to the
temperature inside or outside your house to remote control of lights and
other appliances the options are almost endless. However, managing and
monitoring these devices is typically a problem that works best with
event driven applications.&lt;/p&gt;
&lt;p&gt;This is where asnycio comes in, it was originally proposed in PEP 3156
by our BDFL, Guido van Rossum. Asyncio aims to bring a clear approach to
the python ecosystem and borrows from a number of existing solutions to
come up with something clean and modern for the Python stdlib.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk will cover the new asyncio library in Python 3.4 (also known
as Tulip) and will use the area of home automation as a case study to
explore its features. This talk will be based on code using Python 3.3+.&lt;/p&gt;
&lt;p&gt;Home automation is a growing area and the number of devices and
potential applications is huge. From monitoring electricity usage to the
temperature inside or outside your house to remote control of lights and
other appliances the options are almost endless. However, managing and
monitoring these devices is typically a problem that works best with
event driven applications.&lt;/p&gt;
&lt;p&gt;This is where asnycio comes in, it was originally proposed in PEP 3156
by our BDFL, Guido van Rossum. Asyncio aims to bring a clear approach to
the python ecosystem and borrows from a number of existing solutions to
come up with something clean and modern for the Python stdlib.&lt;/p&gt;
&lt;p&gt;This talk will introduce asyncio and use it within the context of home
automation and dealing with multiple event driven devices. Therefore we
will cover asyncio and the lessions learned from using different devices
in this context.&lt;/p&gt;
&lt;p&gt;Some of the devices that will be used include:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Raspberry Pi&lt;/li&gt;
&lt;li&gt;RFXCom's RFXtrx, USB serial tranciever.&lt;/li&gt;
&lt;li&gt;Owl CM160 electricity tracker.&lt;/li&gt;
&lt;li&gt;Oregon scientific thermometers.&lt;/li&gt;
&lt;li&gt;Foscam IP cameras.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This talk will also briefly cover the previous solution I used which was
developed with Twisted and compare it briefly with my new code using
asyncio.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dougal Matthews</dc:creator><pubDate>Fri, 25 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-25:europython-2014/using-asyncio-aka-tulip-for-home-automation.html</guid></item><item><title>Advanced Uses of py.test Fixtures</title><link>https://pyvideo.org/europython-2014/advanced-uses-of-pytest-fixtures.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;One unique and powerful feature of py.test is the dependency injection
of test fixtures using function arguments. This talk aims to walk
through py.test's fixture mechanism gradually introducing more complex
uses and features. This should lead to an understanding of the power of
the fixture system and how to build complex but easily-managed test
suites using them.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talks will assume some basic familiarity with the py.test testing
framework and explore only the fixture mechanism. It will build up more
complex examples which will lead up to touching on other plugin features
of py.test. It is expected people will be familiar with python features
like functions as first-class objects, closures etc.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Floris Bruynooghe</dc:creator><pubDate>Thu, 24 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-24:europython-2014/advanced-uses-of-pytest-fixtures.html</guid></item><item><title>Conversing with people living in poverty</title><link>https://pyvideo.org/europython-2014/conversing-with-people-living-in-poverty.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;&lt;a class="reference external" href="http://vumi.org"&gt;Vumi&lt;/a&gt; is a text messaging system designed to reach
out to those in poverty on a massive scale via their mobile phones. It's
written in Python using Twisted. This talk is about how and why we built
it and how you can join us in making the world a better place.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;43% of the world's population live on less than €1.5 per day.&lt;/p&gt;
&lt;p&gt;The United Nations defines poverty as a &amp;quot;lack of basic capacity to
participate effectively in society&amp;quot;. While we often think of the poor as
lacking primarily food and shelter, the UN definition highlights their
isolation. They have the least access to society's knowledge and
services and the most difficulty making themselves and their needs heard
in our democracies.&lt;/p&gt;
&lt;p&gt;While smart phones and an exploding ability to collect and process
information are transforming our access to knowledge and the way we
organize and participate in our societies, those living in poverty have
largely been left out. This has to change.&lt;/p&gt;
&lt;p&gt;Basic mobile phones present an opportunity to effect this change
&lt;a class="reference external" href="https://www.youtube.com/watch?v=0bXjgx4J0C4#t=20"&gt;3&lt;/a&gt;. Only three
countries in the world have fewer than 65 mobile phones per 100 people
&lt;a class="reference external" href="http://en.wikipedia.org/wiki/List_of_countries_by_number_of_mobile_phones_in_use"&gt;4&lt;/a&gt;.
The majority of these phones are not Android or iPhones, but they do
nevertheless provide a means of communication -- via voice calls, SMSes
&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Short_Message_Service"&gt;6&lt;/a&gt;, USSD
&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Unstructured_Supplementary_Service_Data"&gt;7&lt;/a&gt;
and instant messaging.&lt;/p&gt;
&lt;p&gt;By comparison, 25 countries have less than 5% internet penetration
&lt;a class="reference external" href="http://en.wikipedia.org/wiki/List_of_countries_by_number_of_Internet_users"&gt;5&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Vumi &lt;a class="reference external" href="http://vumi.org/"&gt;1&lt;/a&gt; is an open source text messaging system
designed to reach out to those in poverty on a massive scale via their
mobile phones. It's written in Python using Twisted.&lt;/p&gt;
&lt;p&gt;Vumi is already used to:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;provide Wikipedia access over USSD and SMS in Kenya &lt;a class="reference external" href="http://blog.praekeltfoundation.org/post/65981723628/wikipedia-zero-over-text-with-praekelt-foundation"&gt;8&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;register a million voters in Libya
&lt;a class="reference external" href="http://www.libyaherald.com/2014/01/01/over-one-million-register-for-constitutional-elections-on-final-sms-registration-day/#axzz2sroHcg00"&gt;10&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;deliver health information to mothers in South Africa
&lt;a class="reference external" href="http://blog.praekeltfoundation.org/post/65042080515/mama-launches-healthy-family-nutrition-programme"&gt;9&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;prevent election violence in Kenya
&lt;a class="reference external" href="http://blog.praekeltfoundation.org/post/51210616848/the-texting-will-never-be-done-peace-messages-in-kenya"&gt;11&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This talk will cover:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;a brief overview of mobile networking and cellphone use in Africa&lt;/li&gt;
&lt;li&gt;why we built Vumi&lt;/li&gt;
&lt;li&gt;the challenges of operating in unreliable environments&lt;/li&gt;
&lt;li&gt;an overview of Vumi's features and architecture&lt;/li&gt;
&lt;li&gt;how you can help!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Vumi features some cutting edge design choices:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;horizontally scalable Twisted processes communicating using RabbitMQ.&lt;/li&gt;
&lt;li&gt;declarative data models backed by Riak.&lt;/li&gt;
&lt;li&gt;sharing common data models between Django and Twisted.&lt;/li&gt;
&lt;li&gt;sandboxing hosted Javascript code from Python.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Overview of challenges Vumi addresses:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Scalability&lt;/em&gt;: Vumi needs to support both small scale applications
(demos, pilot projects, applications tailored for a particular
community) and large ones (things that everyone within a country might
use). We address this using Twisted workers that exchange messages via
RabbitMQ and store data in Riak. Having projects share RabbitMQ and Riak
instances significantly reduces the overhead for small projects (e.g.
its not cost effective to launch the recommended minimum of 5 Riak
servers for a small project).&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Barriers to entry&lt;/em&gt;: Often the people with good ideas don't have access
to one of many things needed to run a production system themselves, e.g.
capital, time, stable infrastructure. We address this by providing a
hosted Vumi instance that runs sandboxed Javascript applications. All
the application author needs is their idea, the ability to write
Javascript and upload it to our servers. The target audience here is
African entrepreneurs at incubator spaces like iHub (Nairobi), kLab
(Kigali), BongoHive (Lusaka) and JoziHub (Johannesburg).&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Unreliable third-party systems&lt;/em&gt;: It's one thing for parts of ones own
system to go down, it's another for crucial third-party systems to go
down. Vumi takes an SMTP-like approach to solving this and uses
persistent queues so that messages can back up in the queue while
third-party systems are down and be processed when they become available
again. We also feedback information on whether third-party messaging
systems have accepted or reject messages to the application that
initiated them.&lt;/p&gt;
&lt;p&gt;Vumi is developed by the Praekelt Foundation
&lt;a class="reference external" href="http://praekeltfoundation.org/"&gt;2&lt;/a&gt; (and individual contributors!).&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Simon Cross</dc:creator><pubDate>Thu, 24 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-24:europython-2014/conversing-with-people-living-in-poverty.html</guid></item><item><title>Elasticsearch from the bottom up</title><link>https://pyvideo.org/europython-2014/elasticsearch-from-the-bottom-up.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;This talk will teach you about Elasticsearch and Lucene's architecture.&lt;/p&gt;
&lt;p&gt;The key data structure in search is the powerful inverted index, which
is actually simple to understand. We start there, then ascend through
abstraction layers to get an overview of how a distributed search
cluster processes searches and changes.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;div class="section" id="who-i-am-and-motivation"&gt;
&lt;h4&gt;Who I am and motivation&lt;/h4&gt;
&lt;p&gt;I work with hosted Elasticsearch and have interacted with lots of
developers. We see what many struggle with.&lt;/p&gt;
&lt;p&gt;Some relevant theory helps a lot. What follows has already lead to many
&amp;quot;Aha!&amp;quot;-moments and developers piecing things together herself.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-inverted-index"&gt;
&lt;h4&gt;The inverted index&lt;/h4&gt;
&lt;p&gt;The most important index structure is actually very simple. It is
essentially a sorted dictionary of terms, with a list of postings per
term.&lt;/p&gt;
&lt;p&gt;We show three simple sample documents and the resulting inverted index.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-index-term"&gt;
&lt;h4&gt;The index term&lt;/h4&gt;
&lt;p&gt;The index term is the &amp;quot;unit of search&amp;quot;, and the terms we make decide how
we can search.&lt;/p&gt;
&lt;p&gt;With the inverted index and its sorted dictionary, we can quickly search
for terms given their prefix.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="importance-of-text-analysis"&gt;
&lt;h4&gt;Importance of text analysis&lt;/h4&gt;
&lt;p&gt;Thus, we need to transform our search problems into string prefix
problems.&lt;/p&gt;
&lt;p&gt;This is done with text analysis, which is the process of making of index
terms. It is highly important when implementing search.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="building-indexes"&gt;
&lt;h4&gt;Building indexes&lt;/h4&gt;
&lt;p&gt;The way indexes are built must balance how compact an index is, how
easily we can search in it, how fast we can index documents - and the
time it takes for changes to be visible.&lt;/p&gt;
&lt;p&gt;Lucene, and thus Elasticsearch, builds them in segments.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="index-segments"&gt;
&lt;h4&gt;Index segments&lt;/h4&gt;
&lt;p&gt;A Lucene index consists of index segments, i.e. immutable mini-indexes.&lt;/p&gt;
&lt;p&gt;A search on an index is done by doing the search on all segments and
merging the results.&lt;/p&gt;
&lt;p&gt;Segments are immutable:&lt;/p&gt;
&lt;p&gt;This enables important compression techniques. Deletes are not
immediate, just a marker. Segments are occasionally merged to larger
segments. Then documents are finally deleted. New segments are made by
buffering changes in memory, and written when flushing happens. Flushes
are largely caused by refreshing every second, due to real time needs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="caches"&gt;
&lt;h4&gt;Caches&lt;/h4&gt;
&lt;p&gt;Caches like filter- and field caches are managed per segment. They are
essential for performance.&lt;/p&gt;
&lt;p&gt;Immutable segments make for simple reasoning about caches. New segments
only cause partial cache invalidations.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="elasticsearch-indexes"&gt;
&lt;h4&gt;Elasticsearch indexes&lt;/h4&gt;
&lt;p&gt;Much like a Lucene index is made up of many segments, an Elasticsearch
index is made up of many Lucene indexes.&lt;/p&gt;
&lt;p&gt;Two Elasticsearch indexes with 1 shard is essentially the same as one
Elasticsearch index with 2 shards.&lt;/p&gt;
&lt;p&gt;Search all shards and merge. Much like segments, but this time possibly
across machines.&lt;/p&gt;
&lt;p&gt;Shard / Index routing enables various partitioning strategies. Simpler
than it sounds, so one important example:&lt;/p&gt;
&lt;p&gt;Essential for time based data, like logs: can efficiently skip searching
entire indexes - and roll out old data by deleting the entire index.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="common-pitfalls"&gt;
&lt;h4&gt;Common pitfalls&lt;/h4&gt;
&lt;p&gt;We must design our indexing for how we search - not the searches for how
things are indexed. Be careful with wildcards and regexes.&lt;/p&gt;
&lt;p&gt;Since segments are immutable, deleting documents is expensive while
deleting an entire index is cheap.&lt;/p&gt;
&lt;p&gt;Updating documents is essentially a delete and re-index. Heavy updating
might cause problems.&lt;/p&gt;
&lt;p&gt;Have enough memory and then some. Elasticsearch is very reliant on its
caches.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="summary"&gt;
&lt;h4&gt;Summary&lt;/h4&gt;
&lt;p&gt;We've seen how index structures are used, and why proper text processing
is essential for performant searches.&lt;/p&gt;
&lt;p&gt;Also, you now know what index segments are, and how they affect both
indexing and searching strategies.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="questions"&gt;
&lt;h4&gt;Questions&lt;/h4&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alex Brasetvik</dc:creator><pubDate>Thu, 24 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-24:europython-2014/elasticsearch-from-the-bottom-up.html</guid></item><item><title>Eve - REST APIs for Humans™</title><link>https://pyvideo.org/europython-2014/eve-rest-apis-for-humanstm.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Powered by Flask, Redis, MongoDB and good intentions the &lt;a class="reference external" href="http://python-eve.org"&gt;Eve REST API
framework&lt;/a&gt; allows to effortlessly build and
deploy highly customizable, fully featured RESTful Web Services. The
talk will introduce the project and its community, recount why and how
it's being developed, and show the road ahead.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Nowadays everyone has data stored somewhere and needs to expose it
through a Web API, possibly a RESTful one.
&lt;a class="reference external" href="http://python-eve.org"&gt;Eve&lt;/a&gt; is the BSD-licensed, Flask-powered
RESTful application and framework that allows to effortlessly build and
deploy highly customizable, fully freatured RESTful Web Services. Eve
features a robust, feature rich, REST-centered API implementation.
MongoDB support comes out of the box and community-driven efforts to
deliver ElasticSearch and SQLAlchemy data layers are ongoing. Eve
approach is such that you only need to configure your API settings and
behaviour, plug in your datasource, and you’re good to go. Features such
as Pagination, Sorting, Conditional Requests, Concurrency Control,
Validation, HATEOAS, JSON and XML rendering, Projections, Customisable
Endpoints, Rate Limiting are all included. Advanced features such as
custom Authentication and Authorisation, Custom Validation, Embedded
Resource Serialisation are also easily available. In my talk I will
introduce the project and its community, recount why and how it's being
developed, show the source code, illustrate key concepts and show the
road ahead.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nicola Iarocci</dc:creator><pubDate>Thu, 24 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-24:europython-2014/eve-rest-apis-for-humanstm.html</guid></item><item><title>Farewell and Welcome Home: Python in Two Genders</title><link>https://pyvideo.org/europython-2014/farewell-and-welcome-home-python-in-two-genders-0.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;After half a lifetime I transitioned from male to female while staying
involved in the Python community. This talk discusses that transition
and explores how I found life in Python as a woman different from my
former life as a man and the lessons about diversity I have learned.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;After half a lifetime &amp;quot;undercover as a man&amp;quot; I transitioned from male to
female while staying involved in the Python community. This talk
discusses that transition and explores how I found life in Python as a
woman different from my former life as a man and the lessons about
diversity I have learned.&lt;/p&gt;
&lt;p&gt;This talk will include a brief discussion of what being transgender
means, my experiences as I came to terms with it, and the losses and
gains transition entailed. Early on I made the decision to be as open as
possible and to stay engaged in the Python community as I transitioned
and I will discuss why I made that decision and the levels of acceptance
and support I encountered.&lt;/p&gt;
&lt;p&gt;Transition has been wonderfully successful, but that very transition put
me in a surprisingly different world. Now being part of not one, but at
least 3 groups that are minorities in the Python world gave me a very
different view of a community I thought I knew, and pushed me to being
an activist (or trouble maker) in spite of myself. In addition to the
many positives the Python community has offered me on my journey, I will
discuss the experiences that have made me understand that privilege is
very much alive and well in the Python world.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Naomi Ceder</dc:creator><pubDate>Thu, 24 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-24:europython-2014/farewell-and-welcome-home-python-in-two-genders-0.html</guid></item><item><title>How Disqus is using Django as the basis of our Service ...</title><link>https://pyvideo.org/europython-2014/how-disqus-is-using-django-as-the-basis-of-our-se.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Disqus maintains the largest Django app out there. And we love it! It
has, however, grown rather large and unwieldy. In the last year Disqus
has had an increasing number of smaller services cropping up based on
several different platforms. So this talk will be about how we do
continuous deployment with our emerging service-based infrastructure.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Adam Hitchcock</dc:creator><pubDate>Thu, 24 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-24:europython-2014/how-disqus-is-using-django-as-the-basis-of-our-se.html</guid></item><item><title>How Pony ORM translates Python generators to SQL queries</title><link>https://pyvideo.org/europython-2014/how-pony-orm-translates-python-generators-to-sql.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Pony ORM is an Object-Relational Mapper implemented in Python. It uses
an unusual approach for writing database queries using Python
generators. Pony analyzes the abstract syntax tree of a generator and
translates it to its SQL equivalent. The translation process consists of
several non-trivial stages. In this talk one of Pony ORM authors will
reveal the internal details of this process.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;a class="reference external" href="http://ponyorm.com"&gt;Pony ORM&lt;/a&gt; is an object-relational mapper
implemented in Python. It allows writing advanced queries to a database
using plain Python in the form of a generator expression. This way
queries look very concise.&lt;/p&gt;
&lt;p&gt;The main feature of Pony is to provide a method to write declarative
queries to databases in pure Python using generators. For this purpose
Pony analyzes the abstract syntax tree of a generator and translates it
to its SQL equivalent.&lt;/p&gt;
&lt;p&gt;Following is a sample of a query in Pony:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
select(p for p in Product if &amp;quot;iPad&amp;quot; in p.name and p.price &amp;gt;= 500)
&lt;/pre&gt;
&lt;p&gt;This query translates to SQL using a specific database dialect.
Currently Pony works with SQLite, MySQL, PostgreSQL and Oracle
databases.&lt;/p&gt;
&lt;p&gt;In this talk one of Pony ORM authors will go through the process of the
query translation and dig into the implementation details.&lt;/p&gt;
&lt;p&gt;Attendees are going to walk away with the understanding of:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Principles of building a programming language translator&lt;/li&gt;
&lt;li&gt;Python to SQL translator implementation details&lt;/li&gt;
&lt;li&gt;Approaches for creating a pluggable translator architecture&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The presentation outline:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Why Python generators are good for representing SQL queries&lt;/li&gt;
&lt;li&gt;Main stages of Python to SQL translation overview&lt;/li&gt;
&lt;li&gt;Decompiling Python bytecode into Python AST&lt;/li&gt;
&lt;li&gt;Translating Python AST to database-independent SQL representation&lt;/li&gt;
&lt;li&gt;Generating SQL for specific database&lt;/li&gt;
&lt;li&gt;Pluggable translator architecture&lt;/li&gt;
&lt;li&gt;Performance concerns: is such way of building SQL slower or faster
then Django's and SQLAlchemy's?&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexey Malashkevich</dc:creator><pubDate>Thu, 24 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-24:europython-2014/how-pony-orm-translates-python-generators-to-sql.html</guid></item><item><title>How to become a software developer in science?</title><link>https://pyvideo.org/europython-2014/how-to-become-a-software-developer-in-science.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;My path from &lt;em&gt;'Hello world'&lt;/em&gt; to software development was long and hard.
The approach I learned during my research may help you to create high
quality software and improve as a developer. The talk covers how you can
benefit from your non-IT knowledge, atomize your project and how
collaboration accelerates your learning.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Goal&lt;/strong&gt;: give practical tools for improving skills and software quality
to people with a background other than IT.&lt;/p&gt;
&lt;p&gt;Eight years ago, as a plant biologist, I knew almost nothing about
programming. When I took a course in python programming, I found myself
so fascinated that it altered my entire career. I became a scientific
software developer. It was long and hard work to get from the level of
'Hello world' to the world of software development. The talk will cover
how to embrace a non-IT education as a strength, how and why to atomize
programming tasks and the importance of doing side projects.&lt;/p&gt;
&lt;div class="section" id="embrace-your-background"&gt;
&lt;h4&gt;1. Embrace your background&lt;/h4&gt;
&lt;p&gt;Having domain specific knowledge from a field other than IT helps you to
communicate with the team, the users and the group leader. It prevents
misunderstandings and helps to define features better. A key step you
can take is systematically apply the precise domain specific language to
the code e.g when naming objects, methods or functions. Another is to
describe the underlying scientific process step by step as a Use Case
and write it down in pseudocode.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="atomisation"&gt;
&lt;h4&gt;2. Atomisation&lt;/h4&gt;
&lt;p&gt;Having a set of building block in your software helps to define
responsibilities clearly. Smaller parts are easier to test, release and
change. Modular design makes the software more flexible and avoids the
Blob and Lava Flow Anti-Patterns. When using object oriented programming
a rule of thumb is that an object (in Python also a method) does only
one thing. You can express this Single Responsibility Principle as a
short sentence for each module. Another practical action is to introduce
Design Patterns that help to decouple data and its internal
representation. As a result, your software becomes more flexible.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="participating-in-side-projects"&gt;
&lt;h4&gt;3. Participating in side projects&lt;/h4&gt;
&lt;p&gt;Learning from others is a great opportunity to grow. Through side
projects you gain a fresh perspective and learn about best practices in
project management. You gain new ideas for improvement and become aware
of difficulties in your own project. You can easily participate in a
scientific project by adding a small feature, writing a test suite or
provide a code review on a part of a program.&lt;/p&gt;
&lt;p&gt;Summarizing, in scientific software development using domain-specific
knowledge, atomisation of software, and participation in side projects
are three things that help to create high quality software and to
continuously improve as a developer.&lt;/p&gt;
&lt;p&gt;The talk will address challenges in areas where science differs from the
business world. It will present general solution one might use for
software developed in a scientific environment for research projects
rather then discussing particular scientific packages.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="qualifications"&gt;
&lt;h4&gt;Qualifications&lt;/h4&gt;
&lt;p&gt;During my PhD I developed a software on 3D RNA modeling
(www.genesilico.pl/moderna/) that resulted in 7 published articles. I am
coauthor on a paper on bioinformatic software development. Currently I
am actively developing a system biology software in Python at the
Humboldt University Berlin (www.rxncon.org).&lt;/p&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Magdalena Rother</dc:creator><pubDate>Thu, 24 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-24:europython-2014/how-to-become-a-software-developer-in-science.html</guid></item><item><title>Jython in practice</title><link>https://pyvideo.org/europython-2014/jython-in-practice.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;A lot of people have heard of Jython, some have tried it, but it seems
few have actually deployed it in a corporate environment. In this talk
I'll share my experiences in using Jython as a testbed for Java
applications, for rapid prototyping in Java desktop and web
environments, and for embedding scripting capabilities in Java products.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Not everyone gets paid to work with Python all the time, but if you find
yourself in a Java project, there are good chances you could benefit
from Python without throwing out the Java stack. Using Jython, you can
do rapid prototyping without the long edit-compile-test cycles normally
associated with large Java projects, whether on the web or the desktop,
and when testing an application might become a nightmare of scaffolding
in Java, a little Jython may be just what you need to be able to run
your tests smoothly.&lt;/p&gt;
&lt;p&gt;At the end of this talk, I will put on my politician´s hat and bring up
the best - and worst - arguments to use to get permission to use Jython
in a corporate environment.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Fredrik Håård</dc:creator><pubDate>Thu, 24 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-24:europython-2014/jython-in-practice.html</guid></item><item><title>Learning Chess from data</title><link>https://pyvideo.org/europython-2014/learning-chess-from-data.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Is watching a chess game enough to figure out the rules? What is common
denominator between different plays and game ending? In this
presentation, we will show how Machine Learning and Hadoop can help us
re-discover chess rules and gain new understanding of the game.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Can empirical samples unveil the big picture? Is chess games
descriptions expose good enough data to gain understanding of chess
rules - legal piece moves, castling, check versus checkmate, etc. Which
features are important in describing a chess game and which features are
not. What is a good representation of a chess game for this uses. What
is the minimal sample size which is required in order to learn this in a
good enough manner and where this learning can go wrong.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Ne3 =&amp;gt; E=mc2&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Looking at the bigger picture - Can we understand big systems based on
empirical samples. Can we reverse engineer physics and discover how
physical system work based on no external knowledge beside empirical
samples.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Tom Ron</dc:creator><pubDate>Thu, 24 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-24:europython-2014/learning-chess-from-data.html</guid></item><item><title>Lessons learned from building Elasticsearch client</title><link>https://pyvideo.org/europython-2014/lessons-learned-from-building-elasticsearch-clien.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Lessons learned when building a client for a fully distributed system
and trying to minimize context-switching pains when using multiple
languages.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Last year we decided to create official clients for the most popular
languages, Python included.&lt;/p&gt;
&lt;p&gt;Some of the goals were:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;support the complete API of elasticsearch including all parameters&lt;/li&gt;
&lt;li&gt;provide a 1-to-1 mapping to the rest API to avoid having opinions and
provide a familiar interface to our users consistent across languages
and evironments&lt;/li&gt;
&lt;li&gt;degrade gracefully when the es cluster is changing (nodes dropping
out or being added)&lt;/li&gt;
&lt;li&gt;flexibility - allow users to customize and extend the clients easily
to suit their, potentially unique, environment&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In this talk I would like to take you through the process of designing
said client, the challenges we faced and the solutions we picked.
Amongst other things I will touch on the difference between languages
(and their respective communities), the architecture of the client
itself, mapping out the API and making sure it stays up to date and
integrating with existing tools.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Honza Král</dc:creator><pubDate>Thu, 24 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-24:europython-2014/lessons-learned-from-building-elasticsearch-clien.html</guid></item><item><title>Lightning Talks</title><link>https://pyvideo.org/europython-2014/lightning-talks-3.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;A lightning talk is a short talk, typically only five minutes in
duration, providing an opportunity for participants - particularly
people not featured in the main programme - to deliver a presentation on
a subject of their choosing.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Various speakers</dc:creator><pubDate>Thu, 24 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-24:europython-2014/lightning-talks-3.html</guid><category>lightning talks</category></item><item><title>Metaprogramming, from decorators to macros</title><link>https://pyvideo.org/europython-2014/metaprogramming-from-decorators-to-macros.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Starting off with the meaning of metaprogramming we quickly dive into
the different ways Python allows this.&lt;/p&gt;
&lt;p&gt;First we talk about class and functions decorators, when decorators are
not enough anymore we'll explore the wonders of metaclasses.&lt;/p&gt;
&lt;p&gt;In the last part of the talk we'll talk about macros, first in Lisp and
then using the amazing &lt;a class="reference external" href="https://github.com/lihaoyi/macropy"&gt;macropy
library&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk is a journey in the wonderful world of metaprogramming. We
start off with the meaning of metaprogramming and what it can be used
for.&lt;/p&gt;
&lt;p&gt;Then we look at what can be done in Python, introducing function and
class decorators. When decorators are not enough anymore we move to the
black magic of metaclasses, showing how we can implemement a simple
Django-like model with them.&lt;/p&gt;
&lt;p&gt;In the bonus track we'll talk about macros, as the ultimate
metaprogramming weapon, showing briefly how Lisp macros work and
introducing the amazing &lt;a class="reference external" href="https://github.com/lihaoyi/macropy"&gt;macropy
library&lt;/a&gt;.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">andrea crotti</dc:creator><pubDate>Thu, 24 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-24:europython-2014/metaprogramming-from-decorators-to-macros.html</guid></item><item><title>Morepath: a Python Web Framework with Super Powers</title><link>https://pyvideo.org/europython-2014/morepath-a-python-web-framework-with-super-power.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;&lt;a class="reference external" href="http://morepath.readthedocs.org"&gt;Morepath&lt;/a&gt; is a server web framework
written with modern, rich client web development in mind. Why another
new Python web framework in 2014?&lt;/p&gt;
&lt;p&gt;Because it can be done better: Morepath understands how to construct
hyperlinks from models. Writing a generic view in Morepath is like
writing any other view. With Morepath, you can reuse, extend and
override apps as easily as you can construct them.&lt;/p&gt;
&lt;p&gt;Even if you don't end up using Morepath, you will learn something about
how the nature of web frameworks.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;a class="reference external" href="http://morepath.readthedocs.org"&gt;Morepath&lt;/a&gt; is a new server web
framework written with modern, rich client web development in mind.&lt;/p&gt;
&lt;p&gt;In the talk I will be discussing some core features of Morepath that
make it different:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Its different take on routing and linking. Morepath has support to
help you construct hyperlinks to models.&lt;/li&gt;
&lt;li&gt;Its view system: plain views, generic views, view composition.&lt;/li&gt;
&lt;li&gt;Morepath's approach to application construction allows application
extension and overriding, and composition.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This talk will attempt to convince people to try Morepath. For those
unable or unwilling to try, I will communicate some design principles
behind Morepath which can be of help to any web developer.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Martijn Faassen</dc:creator><pubDate>Thu, 24 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-24:europython-2014/morepath-a-python-web-framework-with-super-power.html</guid></item><item><title>Multiplatform binary packaging and distribution of your...</title><link>https://pyvideo.org/europython-2014/multiplatform-binary-packaging-and-distribution-o.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Distributing your python app to clients it’s a common task that can
become hard when “stand alone” and “obfuscated code” come as
requirements.&lt;/p&gt;
&lt;p&gt;Common answers in forums are on the lines of “Python is not the language
you’re looking for” or “What are you trying to hide?” but another answer
is possible.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Julia S. Simon</dc:creator><pubDate>Thu, 24 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-24:europython-2014/multiplatform-binary-packaging-and-distribution-o.html</guid></item><item><title>Non Sequitur: An exploration of Python's random module</title><link>https://pyvideo.org/europython-2014/non-sequitur-an-exploration-of-pythons-random-m.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;An exploration of Python's random module for the curious programmer,
this talk will give a little background in statistics and pseudorandom
number generation, explain the properties of python's choice of
pseudorandom generator and explore through visualizations the different
distributions provided by the module.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;div class="section" id="audience"&gt;
&lt;h4&gt;Audience&lt;/h4&gt;
&lt;p&gt;Non mathematical people who wants a better understanding of Python's
random module.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="objectives"&gt;
&lt;h4&gt;Objectives&lt;/h4&gt;
&lt;p&gt;The audience will understand pseudorandom number generators, the
properties of Python's Mersenne Twister and the differences and possible
use cases between the distributions provided by the &lt;tt class="docutils literal"&gt;random&lt;/tt&gt; module.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-talk"&gt;
&lt;h4&gt;The talk&lt;/h4&gt;
&lt;p&gt;I will start by talking about what randomness means and then about how
we try to achieve it in computing through pseudorandom number generators
(5 min.)&lt;/p&gt;
&lt;p&gt;I will give a brief overview of pseudorandom number generation
techniques, show how their quality can be assessed and finally talk
about Python's Mersenne Twister and why it is a fairly good choice. (10
min.)&lt;/p&gt;
&lt;p&gt;Finally I will talk about how from randomness we can build generators
with interesting probability distributions. I'll compare through
visualizations thos provided in Python's &lt;tt class="docutils literal"&gt;random&lt;/tt&gt; module and show
examples of when they can be useful in real-life. (10 min.)&lt;/p&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jair Trejo</dc:creator><pubDate>Thu, 24 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-24:europython-2014/non-sequitur-an-exploration-of-pythons-random-m.html</guid></item><item><title>packaging and testing with devpi and tox</title><link>https://pyvideo.org/europython-2014/packaging-and-testing-with-devpi-and-tox.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;This talk discusses good ways to organise packaging and testing for
Python projects. It walks through a per-company and an open source
scenario and explains how to best use the &amp;quot;devpi-server&amp;quot; and &amp;quot;tox&amp;quot; for
making sure you are delivering good and well tested and documented
packages. As time permits, we also discuss in-development features such
as real-time mirroring and search.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The talk discusses the following tools:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;devpi-server for running an in-house or per-laptop python package
server&lt;/li&gt;
&lt;li&gt;inheritance between package indexes and from pypi.python.org public
packages&lt;/li&gt;
&lt;li&gt;the &amp;quot;devpi&amp;quot; client tool for uploading docs and running tests&lt;/li&gt;
&lt;li&gt;running of tests through tox&lt;/li&gt;
&lt;li&gt;summary view with two work flows: open source releases and in-house
per-company developments&lt;/li&gt;
&lt;li&gt;roadmap and in-development features of devpi and tox&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(The presenter is the main author of the tools in question).&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">holger krekel</dc:creator><pubDate>Thu, 24 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-24:europython-2014/packaging-and-testing-with-devpi-and-tox.html</guid></item><item><title>Packaging in packaging: dh-virtualenv</title><link>https://pyvideo.org/europython-2014/packaging-in-packaging-dh-virtualenv.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Deploying your software can become a tricky task, regardless of the
language. In the spirit of the Python conferences, every conference
needs at least one packaging talk.&lt;/p&gt;
&lt;p&gt;This talk is about dh-virtualenv. It's a Python packaging tool aimed for
Debian-based systems and for deployment flows that already take
advantage of Debian packaging with Python virtualenvs&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;a class="reference external" href="http://github.com/spotify/dh-virtualenv"&gt;Dh-virtualenv&lt;/a&gt; is an open
source tool developed at Spotify. We use it to ease deploying our Python
software to production. We built dh-virtualenv as a tool that fits our
existing continuous integration flow with a dedicated sbuild server. As
we were already packaging software in Debian packages, the aim of
dh-virtualenv was to make transition to virtualenv based installations
as smooth as possible.&lt;/p&gt;
&lt;p&gt;This talk covers how you can use dh-virtualenv to help you deploy your
software to production, where you are already running a Debian-based
system, such as Ubuntu, and what are the advantages and disadvantages of
the approach over other existing and popular techniques. We will discuss
the deploying as a problem in general, look into building a
dh-vritualenv-backed package, and in the end, look into how
dh-virtualenv was actually made.&lt;/p&gt;
&lt;p&gt;Goal is that after this presentation you know how to make your
Debian/Ubuntu deployments easier!&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://github.com/spotify/dh-virtualenv"&gt;dh-virtualenv&lt;/a&gt; if fully
open sourced, production tested software, licensed under GPLv2+ and
available in Debian testing and unstable.&lt;/p&gt;
&lt;p&gt;More information of it is also available in our
&lt;a class="reference external" href="http://labs.spotify.com/2013/10/10/packaging-in-your-packaging-dh-virtualenv/"&gt;blogpost&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Talk outline:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Introduction &amp;amp; overview (3min)&lt;ul&gt;
&lt;li&gt;Who am I?&lt;/li&gt;
&lt;li&gt;Why am I fiddling with Python packaging?&lt;/li&gt;
&lt;li&gt;What do you get out of this talk?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Different shortcomings of Python deployments (5min)&lt;ul&gt;
&lt;li&gt;Native system packages&lt;/li&gt;
&lt;li&gt;Virtualenv based installations&lt;/li&gt;
&lt;li&gt;Containers, virtual machine images&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;dh-virtualenv (10 min)&lt;ul&gt;
&lt;li&gt;What is dh-virtualenv?&lt;/li&gt;
&lt;li&gt;Thought behind dh-virtualenv&lt;/li&gt;
&lt;li&gt;Advantages over others&lt;/li&gt;
&lt;li&gt;Requirements for your deployment flow&lt;/li&gt;
&lt;li&gt;Short intro to packaging Sentry with dh-virtualenv&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;How is it built? (10 min)&lt;ul&gt;
&lt;li&gt;Debian package building flow primer&lt;/li&gt;
&lt;li&gt;How dh-virtualenv fits that flow&lt;/li&gt;
&lt;li&gt;What does it do build time and why?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jyrki Pulliainen</dc:creator><pubDate>Thu, 24 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-24:europython-2014/packaging-in-packaging-dh-virtualenv.html</guid></item><item><title>Pioneering the Future of Computing Education</title><link>https://pyvideo.org/europython-2014/pioneering-the-future-of-computing-education.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;How the Raspberry Pi Foundation are leading the way in the computing in
schools revolution by providing affordable open and connectable hardware
to people of all levels of experience.&lt;/p&gt;
&lt;p&gt;Now we have an education team, we're pushing forward with creating
resources and training teachers to help deliver modern computing
education around the world.&lt;/p&gt;
&lt;p&gt;All our learning resources are Creative Commons licensed and available
on GitHub. We write materials that match the UK computing curriculum.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;I'm Ben, from Raspberry Pi. I do development and outreach for the
Foundation and I work with the rest of the education team to help make
learning through computer science, coding and hardware hacking more
accessible to all.&lt;/p&gt;
&lt;p&gt;In this talk I explain the Raspberry Pi story: its mission - the reason
the Pi exists; what happened before release - getting the board in to
production; what happened in the first two years - the community birth
and growth; and what's coming next - education focus, new hardware and
improved software.&lt;/p&gt;
&lt;p&gt;Python is the main language used (and advocated by us) in education with
Raspberry Pi.&lt;/p&gt;
&lt;p&gt;We're creating learning resources to match up with the new UK computing
curriculum, where we teach young people programming and computer science
concepts with Python on Pi, and help teachers deliver quality material
in the classroom to work towards the objectives the curriculum sets out
to achieve.&lt;/p&gt;
&lt;p&gt;With Raspberry Pi we open up possibilities for connecting to the real
world in an accessible way using the powerful, high level and human
read/write -able language of Python.&lt;/p&gt;
&lt;p&gt;We work closely with the community: hobbyists organising Raspberry Jam
events; educators teaching with Raspberry Pi; the software communities
and their contributions - and we welcome any interested parties to get
involved with helping us provide for the wider community.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ben Nuttall</dc:creator><pubDate>Thu, 24 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-24:europython-2014/pioneering-the-future-of-computing-education.html</guid></item><item><title>Probabilistic Programming in Python</title><link>https://pyvideo.org/europython-2014/probabilistic-programming-in-python.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Probabilistic Programming allows flexible specification of statistical
models to gain insight from data. The high interpretability and ease by
which different sources can be combined has huge value for Data Science.
PyMC3 features next generation sampling algorithms, an intuitive model
specification syntax, and just-in-time compilation for speed, to allow
estimation of large-scale probabilistic models.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Probabilistic Programming allows flexible specification of statistical
models to gain insight from data. Estimation of best fitting parameter
values, as well as uncertainty in these estimations, can be automated by
sampling algorithms like Markov chain Monte Carlo (MCMC). The high
interpretability and flexibility of this approach has lead to a huge
paradigm shift in scientific fields ranging from Cognitive Science to
Data Science and Quantitative Finance.&lt;/p&gt;
&lt;p&gt;PyMC3 is a new Python module that features next generation sampling
algorithms and an intuitive model specification syntax. The whole code
base is written in pure Python and Just-in-time compiled via Theano for
speed.&lt;/p&gt;
&lt;p&gt;In this talk I will provide an intuitive introduction to Bayesian
statistics and how probabilistic models can be specified and estimated
using PyMC3.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Thomas Wiecki</dc:creator><pubDate>Thu, 24 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-24:europython-2014/probabilistic-programming-in-python.html</guid></item><item><title>Python Debugger Uncovered</title><link>https://pyvideo.org/europython-2014/python-debugger-uncovered.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;This talk will explain how to implement a debugger for Python. We'll
start with setting a simple trace function, then look how it is
implemented in modern IDEs like PyCharm and Pydev. Then we go further in
the details and uncover the tricks used to implement some cool features
like exception handling and multiprocess debugging.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Presentation describes how to implement debugger for Python and has 4
parts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;Tracing Python code&lt;/p&gt;
&lt;p&gt;Explains how to use trace function&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Debugger Architecture&lt;/p&gt;
&lt;p&gt;Explains which parts consists of a modern full-fledged debugger.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;A Bit of Details&lt;/p&gt;
&lt;p&gt;Explains how to make code to work for all python versions and
implementations, survive gevent monkey-patching etc.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Cool Features&lt;/p&gt;
&lt;p&gt;Explains how to implement exception handling and multiprocess
debugging&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dmitry Trofimov</dc:creator><pubDate>Thu, 24 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-24:europython-2014/python-debugger-uncovered.html</guid></item><item><title>Python for Zombies: 15.000 enrolled in the first Brazil...</title><link>https://pyvideo.org/europython-2014/python-for-zombies-15000-enrolled-in-the-first.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Experiences of how we spread the Python community in Brazil with a non
english MOOC (Massive Open Online Course) to teach programming. Hacking
basic modules and classes to obtain the &amp;quot;Answer to the Ultimate Question
of Life, the Universe, and Everything&amp;quot;. A funny way to teach
programming.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Fernando Masanori</dc:creator><pubDate>Thu, 24 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-24:europython-2014/python-for-zombies-15000-enrolled-in-the-first.html</guid></item><item><title>Red Hat Loves Python</title><link>https://pyvideo.org/europython-2014/red-hat-loves-python.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Come learn about what Red Hat is doing with Python and the Python
community, and how you can benefit from these efforts. Whether it is the
new Python versions in Red Hat Enterprise Linux via the new Red Hat
Software Collections, compatible Python cartridges in OpenShift
Platform-as-a-Service (PaaS), or being the leading contributor to
OpenStack, there's a lot going on at Red Hat. We're Pythonistas, too!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Slavek Kabrda</dc:creator><pubDate>Thu, 24 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-24:europython-2014/red-hat-loves-python.html</guid></item><item><title>RISCy Business: Development of a RNAi design and off-target prediction software</title><link>https://pyvideo.org/europython-2014/riscy-business-development-of-a-rnai-design-and.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;RNA interference (RNAi) is a biological mechanism for targeted
inhibition of gene expression. It has also been used routinely to
discover genes involved in the interaction of plants with pathogenic
fungi. To minimize the miss-targeting of unrelated genes and to maximize
the RNAi efficiency, we have developed a PyQt based cross- platform
software tool called “si-Fi”. Our aim of the talk is to show that also
hobby programmers can use Python in a very useful way.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Stefanie Lück</dc:creator><pubDate>Thu, 24 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-24:europython-2014/riscy-business-development-of-a-rnai-design-and.html</guid></item><item><title>Scikit-learn to "learn them all"</title><link>https://pyvideo.org/europython-2014/scikit-learn-to-learn-them-all.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Scikit-learn&lt;/strong&gt; is a powerful library, providing implementations for
many of the most popular machine learning algorithms. This talk will
provide an overview of the &amp;quot;batteries&amp;quot; included in Scikit-learn, along
with working code examples and internal insights, in order to get the
best for our machine learning code.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Machine Learning&lt;/strong&gt; is about &lt;em&gt;using the right features, to build the
right models, to achieve the right tasks&lt;/em&gt; &lt;a class="reference external" href="http://goo.gl/BnhoHa"&gt;[Flach,
2012]&lt;/a&gt; However, to come up with a definition of
what actually means &lt;strong&gt;right&lt;/strong&gt; for the problem at the hand, it is
required to analyse huge amounts of data, and to evaluate the
performance of different algorithms on these data.&lt;/p&gt;
&lt;p&gt;However, deriving a working machine learning solution for a given
problem is far from being a &lt;em&gt;waterfall&lt;/em&gt; process. It is an iterative
process where continuous refinements are required for the data to be
used (i.e., the &lt;em&gt;right features&lt;/em&gt;), and the algorithms to apply (i.e.,
the &lt;em&gt;right models&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;In this scenario, Python has been found very useful for practitioners
and researchers: its high-level nature, in combination with available
tools and libraries, allows to rapidly implement working machine
learning code without &lt;em&gt;reinventing the wheel&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://scikit-learn.org/stable/"&gt;**Scikit-learn**&lt;/a&gt; is an actively
developing Python library, built on top of the solid &lt;tt class="docutils literal"&gt;numpy&lt;/tt&gt; and
&lt;tt class="docutils literal"&gt;scipy&lt;/tt&gt; packages.&lt;/p&gt;
&lt;p&gt;Scikit-learn (&lt;tt class="docutils literal"&gt;sklearn&lt;/tt&gt;) is an &lt;em&gt;all-in-one&lt;/em&gt; software solution,
providing implementations for several machine learning methods, along
with datasets and (performance) evaluation algorithms.&lt;/p&gt;
&lt;p&gt;These &amp;quot;batteries&amp;quot; included in the library, in combination with a nice
and intuitive software API, have made scikit-learn to become one of the
most popular Python package to write machine learning code.&lt;/p&gt;
&lt;p&gt;In this talk, a general overview of scikit-learn will be presented,
along with brief explanations of the techniques provided out-of-the-box
by the library.&lt;/p&gt;
&lt;p&gt;These explanations will be supported by working code examples, and
insights on algorithms' implementations aimed at providing hints on how
to extend the library code.&lt;/p&gt;
&lt;p&gt;Moreover, advantages and limitations of the &lt;tt class="docutils literal"&gt;sklearn&lt;/tt&gt; package will be
discussed according to other existing machine learning Python libraries
(e.g., &lt;tt class="docutils literal"&gt;`shogun&lt;/tt&gt; &amp;lt;&lt;a class="reference external" href="http://shogun-toolbox.org"&gt;http://shogun-toolbox.org&lt;/a&gt;&amp;gt;`__,
&lt;tt class="docutils literal"&gt;`pyML&lt;/tt&gt; &amp;lt;&lt;a class="reference external" href="http://pyml.sourceforge.net"&gt;http://pyml.sourceforge.net&lt;/a&gt;&amp;gt;`__,
&lt;tt class="docutils literal"&gt;`mlpy&lt;/tt&gt; &amp;lt;&lt;a class="reference external" href="http://mlpy.sourceforge.net"&gt;http://mlpy.sourceforge.net&lt;/a&gt;&amp;gt;`__).&lt;/p&gt;
&lt;p&gt;In conclusion, (examples of) applications of scikit-learn to big data
and computational intensive tasks will be also presented.&lt;/p&gt;
&lt;p&gt;The general outline of the talk is reported as follows (the order of the
topics may vary):&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Intro to Machine Learning&lt;ul&gt;
&lt;li&gt;Machine Learning in Python&lt;/li&gt;
&lt;li&gt;Intro to Scikit-Learn&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Overview of Scikit-Learn&lt;ul&gt;
&lt;li&gt;Comparison with other existing ML Python libraries&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Supervised Learning with &lt;tt class="docutils literal"&gt;sklearn&lt;/tt&gt;&lt;ul&gt;
&lt;li&gt;Text Classification with SVM and Kernel Methods&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Unsupervised Learning with &lt;tt class="docutils literal"&gt;sklearn&lt;/tt&gt;&lt;ul&gt;
&lt;li&gt;Partitional and Model-based Clustering (i.e., k-means and Mixture
Models)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Scaling up Machine Learning&lt;ul&gt;
&lt;li&gt;Parallel and Large Scale ML with &lt;tt class="docutils literal"&gt;sklearn&lt;/tt&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The talk is intended for an intermediate level audience (i.e.,
Advanced). It requires basic math skills and a good knowledge of the
Python language.&lt;/p&gt;
&lt;p&gt;Good knowledge of the &lt;tt class="docutils literal"&gt;numpy&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;scipy&lt;/tt&gt; packages is also a plus.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Valerio Maggio</dc:creator><pubDate>Thu, 24 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-24:europython-2014/scikit-learn-to-learn-them-all.html</guid></item><item><title>Support Python 2 and 3 with the same code</title><link>https://pyvideo.org/europython-2014/support-python-2-and-3-with-the-same-code.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Your library supports only Python 2, - but your users keep nagging you
about Python 3 support?&lt;/p&gt;
&lt;p&gt;As Python 3 gets adopted more and more, users ask for Python 3 support
in existing libraries for Python 2. Although there are several
approaches, this talk focuses on using the very same code for a Python 2
and a Python 3 version.&lt;/p&gt;
&lt;p&gt;The talk discusses the main problems when supporting Python 3 and best
practices to apply for compatibility with Python 2 and 3.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Your library supports only Python 2, - but your users keep nagging you
about Python 3 support?&lt;/p&gt;
&lt;p&gt;As Python 3 gets adopted more and more, users ask for Python 3 support
in existing libraries for Python 2. This talk mentions some approaches
for giving users a Python 3 version, but will quickly focus on using the
very same code for a Python 2 and a Python 3 version.&lt;/p&gt;
&lt;p&gt;This is much easier if you require Python 2.6 and up, and yet a bit
easier if you require Python 3.3 as the minimum Python 3 version.&lt;/p&gt;
&lt;p&gt;The talk discusses main problems when supporting Python 3 (some are
easily solved):&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;print&lt;/tt&gt; is a function.&lt;/li&gt;
&lt;li&gt;More Python APIs return iterators that used to return lists.&lt;/li&gt;
&lt;li&gt;There's now a clear distinction between bytes and unicode (text)
strings.&lt;/li&gt;
&lt;li&gt;Files are opened as text by default, requiring an encoding to apply
on reading and writing.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The talk also explains some best practices:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Start with a good automatic test coverage.&lt;/li&gt;
&lt;li&gt;Deal with many automatic conversions with a one-time 2to3 run.&lt;/li&gt;
&lt;li&gt;Think about how your library should handle bytes and unicode strings.
(Rule of thumb: Decode bytes as early as possible; encode unicode
text as late as possible.)&lt;/li&gt;
&lt;li&gt;Should you break compatibility with your existing Python 2 API? (Yes,
if there's no other way to design a sane API for Python 2 and 3. If
you do it, raise the first part of the version number.)&lt;/li&gt;
&lt;li&gt;Try to keep code that's different for Python 2 and 3 minimal. Put
code that needs to be different for Python 2 and 3 into a &lt;tt class="docutils literal"&gt;compat&lt;/tt&gt;
module. Or use third-party libraries like &lt;tt class="docutils literal"&gt;six&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;future&lt;/tt&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Finally, the talk will mention some helpful resources on the web.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Stefan Schwarzer</dc:creator><pubDate>Thu, 24 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-24:europython-2014/support-python-2-and-3-with-the-same-code.html</guid></item><item><title>The Continuum Platform: Advanced Analytics and Web-based Interactive Visualization for Enterprises</title><link>https://pyvideo.org/europython-2014/the-continuum-platform-advanced-analytics-and-we.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;The people at Continuum have been involved in the Python community for
decades. As a company our mission is to empower domain experts inside
enterprises with the best tools for producing software solutions that
deal with large and quickly-changing data. The Continuum Platform brings
the world of open source together into one complete, easy-to-manage
analytics and visualization platform. In this talk, Dr. Oliphant will
review the open source libraries that Continuum is building and
contributing to the community as part of this effort, including Numba,
Bokeh, Blaze, conda, llvmpy, PyParallel, and DyND, as well as describe
the freely available components of the Continuum Platform that anyone
can benefit from today: Anaconda, wakari.io, and binstar.org.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Travis Oliphant</dc:creator><pubDate>Thu, 24 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-24:europython-2014/the-continuum-platform-advanced-analytics-and-we.html</guid></item><item><title>The inner guts of Bitbucket</title><link>https://pyvideo.org/europython-2014/the-inner-guts-of-bitbucket.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Today Bitbucket is more than 30 times bigger than at the time of
acquisition almost 4 years ago and serves repositories to over a million
developers.&lt;/p&gt;
&lt;p&gt;This talk lays out its current architecture in great detail, from
Gunicorn and Django to Celery and HA-Proxy to NFS.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk is about Bitbucket's architecture. Leaving no stone unturned,
I'll be covering the entire infrastructure. Every component, from web
servers to message brokers and load balancing to managing hundreds of
terabytes of data.&lt;/p&gt;
&lt;p&gt;Since its inception in 2008, Bitbucket has grown from a standard, modest
Django app into a large, complex stack that while still based around
Django, has expanded into many more components.&lt;/p&gt;
&lt;p&gt;Today Bitbucket is more than 30 times bigger than at the time of
acquisition almost 4 years ago and serves Git and Mercurial repos to
over a million users and growing faster now than ever before.&lt;/p&gt;
&lt;p&gt;Our current architecture and infrastructure was shaped by rapid growth
and has resulted in a large, mostly horizontally scalable system. What
has not changed is that it's still nearly all Python based and could
serve as inspiration or validation for other community members
responsible for rapidly scaling their apps.&lt;/p&gt;
&lt;p&gt;This talk will layout the entire architecture and motivate our
technology choices. From our Gunicorn to Celery and HA-Proxy to NFS.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Erik van Zijst</dc:creator><pubDate>Thu, 24 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-24:europython-2014/the-inner-guts-of-bitbucket.html</guid></item><item><title>The Return of "The Return of Peer to Peer Computing".</title><link>https://pyvideo.org/europython-2014/the-return-of-the-return-of-peer-to-peer-computi.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;At last year's Europython Holger Krekel gave a keynote called &amp;quot;The
Return of Peer to Peer Computing&amp;quot;. He described how developers, in light
of the Snowden surveillance revelations, ought to learn about and build
decentralized peer-to-peer systems with strong cryptography. This talk
introduces, describes and demonstrates ideas, concepts and code that a
group of Pythonistas have been working on since Holger's keynote.&lt;/p&gt;
&lt;p&gt;We asked ourselves two questions: what are the fundamental elements /
abstractions of a peer-to-peer application and, given a reasonable
answer to the first question, what can we build? We will present work
done so far, discuss the sorts of application that might be written and
explore how peer-to-peer technology could be both attractive and viable
from an economic point of view.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk introduces, describes and demonstrates concepts and code
created during sprints and via online collaboration by a distributed
group of Pythonistas under the working title p4p2p (&lt;a class="reference external" href="http://p4p2p.net"&gt;http://p4p2p.net&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;We asked ourselves, as frameworks such as Zope/Plone, Django, Pyramid or
Flask are to web development what would the equivalent sort of framework
look like for peer-to-peer application development?&lt;/p&gt;
&lt;p&gt;We've tackled several different technical issues: remote execution of
code among peers, distributed hash tables as a mechanism for peer
discovery and data storage, various cryptographic requirements and the
nuts and bolts of punching holes in firewalls.&lt;/p&gt;
&lt;p&gt;Work is ongoing (we have another sprint at the end of March) and the
final content of the talk will depend on progress made. However, we
expect to touch upon the following (subject to the caveat above):&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;What is the problem we're trying to solve?&lt;/li&gt;
&lt;li&gt;Why P2P?&lt;/li&gt;
&lt;li&gt;The story of how we ended up asking the questions outlined in the
abstract.&lt;/li&gt;
&lt;li&gt;What we've done to address these questions.&lt;/li&gt;
&lt;li&gt;An exploration of the sorts of application that could be built using
P2P.&lt;/li&gt;
&lt;li&gt;A call for helpers and collaboration.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Happy to answer any questions!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nicholas Tollervey</dc:creator><pubDate>Thu, 24 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-24:europython-2014/the-return-of-the-return-of-peer-to-peer-computi.html</guid></item><item><title>The Shogun Machine Learning Toolbox</title><link>https://pyvideo.org/europython-2014/the-shogun-machine-learning-toolbox.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;We present the Shogun Machine Learning Toolbox, a framework for Machine
Learning, which is the art of finding structure in data, with
applications in object recognition, brain-computer interfaces, robotics,
stock-prices prediction, etc. We give a gentle introduction to ML and
Shogun's Python interface, focussing on intuition and visualisation.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;We present the Shogun Machine Learning Toolbox, a unified framework for
Machine Learning algorithms. Machine Learning (ML) is the art of finding
structure in data in an automated way and has given rise to a wide range
of applications such as recommendation systems, object recognition,
brain-computer interfaces, robotics, predicting stock prices, etc.&lt;/p&gt;
&lt;p&gt;Our toolbox offers extensive bindings with other software and computing
languages, Python being the major target. The library was initiated in
1999 and remained under heavy development henceforth. In addition to its
mature core-framework, Shogun offers state-of-the-art techniques based
on latest ML research. This is partly made possible by the 21 Google
Summer of Code projects (5+8+8 since 2011) that our students
successfully completed. Shogun's codebase has &amp;gt;20k commits made by &amp;gt;100
contributors representing &amp;gt;500k lines of code. While its core is written
in C++, a unique of technique for generating interfaces allows usage
from a wide range of target languages -- under the same syntax. This
includes in particular Python, but also Matlab/Octave, Java, C#, R,
ruby, and more. We believe that users should be able to choose their
favourite language rather than us dictating this choice. The same
applies for supported OS (Linux, Mac, Win). Shogun is part of Debian
Linux.&lt;/p&gt;
&lt;p&gt;Features of Shogun include most classical ML methods such as
classification, regression, dimensionality reduction, clustering, etc,
most of them in different flavours. All implemented algorithms in Shogun
work on a modular data representation, which allows to easily switch
between different sorts of objects as for example strings or matrices.
Common ML-tasks and data IO can be carried under a unified interface.
This is also true for the various external open-source libraries that
are embedded within Shogun.&lt;/p&gt;
&lt;p&gt;Code examples are provided for all implemented algorithms. The main and
most complete set of examples is in the Python language. In addition, in
order to push usage of Shogun in education at universities, we recently
started adding more illustrative IPython notebooks. A growing list of
statically rendered versions are readily available from our
&lt;a class="reference external" href="http://www.shogun-toolbox.org/page/documentation/notebook"&gt;website&lt;/a&gt;
and implement a cross-over of tutorial-style explanations, code, and
visualization examples. We even took this up a notch and started
building our own IPython-notebook server with Shogun installed in the
cloud at (try cloud button in notebook view) . This allows users to try
Shogun without installation via the IPython notebook web interface. All
example notebooks can be loaded, interactively modified, and executed.
In addition, using the Python Django framework, we built a collection of
interactive web-demos where users can play around with basic ML
algorithms,
&lt;a class="reference external" href="http://www.shogun-toolbox.org/page/documentation/demo"&gt;demos&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In the proposed talk, we will give a gentle and general introduction to
ML and the core functionality of Shogun, with a focus on its Python
interface. This includes solving basic ML tasks such as classification
and regression and some of the more recent features, such as last year's
GSoC projects and their IPython notebook writeups. ML material will be
presented with a focus on intuition and visualisation and no previous
familiarity with ML methods is required.&lt;/p&gt;
&lt;div class="section" id="key-points-in-the-talk"&gt;
&lt;h4&gt;Key points in the talk&lt;/h4&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;What are the goals in ML?&lt;/li&gt;
&lt;li&gt;Example problems in ML (classification, regression, clustering)&lt;/li&gt;
&lt;li&gt;Some basic algorithm ideas&lt;/li&gt;
&lt;li&gt;Focus on Visualisation, not Maths&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="intended-audience"&gt;
&lt;h4&gt;Intended Audience&lt;/h4&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;All people dealing with data (data scientists, big-data hackers) who
are looking for tools to deal with it&lt;/li&gt;
&lt;li&gt;People with a general interest but no education in Machine Learning&lt;/li&gt;
&lt;li&gt;People interested in the technology behind Shogun (swig, cloud
notebook server, web-demos)&lt;/li&gt;
&lt;li&gt;People from the ML community (scipy-stack)&lt;/li&gt;
&lt;li&gt;ML scientists/Statisticians&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="code-examples"&gt;
&lt;h4&gt;Code examples&lt;/h4&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/shogun-toolbox/shogun/blob/develop/examples/undocumented/python_modular/classifier_libsvm_modular.py"&gt;Classification&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/shogun-toolbox/shogun/blob/develop/examples/undocumented/python_modular/graphical/em_2d_gmm.py"&gt;Clustering&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/shogun-toolbox/shogun/blob/develop/examples/undocumented/python_modular/graphical/converter_jade_bss.py"&gt;Source
seperation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.shogun-toolbox.org/page/documentation/notebook"&gt;IPython notebook
examples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="slide-examples"&gt;
&lt;h5&gt;Slide examples&lt;/h5&gt;
&lt;p&gt;See our Europython 2010
&lt;a class="reference external" href="https://www.dropbox.com/sh/jvl4ra885usu4ii/WIoJccXA5r/talk.pdf"&gt;slides&lt;/a&gt;.
Although we aim for more pictures and less formulas this year.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Heiko Strathmann</dc:creator><pubDate>Thu, 24 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-24:europython-2014/the-shogun-machine-learning-toolbox.html</guid></item><item><title>Writing Awesome Command-Line Programs in Python</title><link>https://pyvideo.org/europython-2014/writing-awesome-command-line-programs-in-python.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Command-Line programs can have a lot to them - usually more than you
think, yet often suffer from a lack of thought.&lt;/p&gt;
&lt;p&gt;This is a tour through how to structure your code, tools in the standard
library and some 3rd party libraries. Take your command-line programs to
the next level!&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python is a great language for writing command-line tools - which is why
so much of Linux is secretly written in Python these days.
Unfortunately, what starts as a simple script can quickly get out of
hand as more features are added and more people start using it!&lt;/p&gt;
&lt;p&gt;The talk will consist of a tour through various useful libraries and
practical code showing how each can be used, and include advice on how
to best structure simple and complex command-line tools.&lt;/p&gt;
&lt;p&gt;Things to consider when writing command-line apps:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Single-file vs Multiple-file&lt;/li&gt;
&lt;li&gt;Standard library only vs. 3rd party requirements&lt;/li&gt;
&lt;li&gt;Installation - setup.py vs. native packaging&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The different parts of a command-line program:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Option Parsing:&lt;ul&gt;
&lt;li&gt;Libraries: getopt, optparse, argparse, docopt&lt;/li&gt;
&lt;li&gt;Sub-commands&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Configuration:&lt;ul&gt;
&lt;li&gt;Formats: Ini file, JSON, YAML&lt;/li&gt;
&lt;li&gt;Where should it be stored (cross-platform);&lt;/li&gt;
&lt;li&gt;Having multiple configuration files, and allowing user config to
override global config&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Output:&lt;ul&gt;
&lt;li&gt;Colour - colorama&lt;/li&gt;
&lt;li&gt;Formatting output for the user&lt;/li&gt;
&lt;li&gt;Formatting output for other programs&lt;/li&gt;
&lt;li&gt;How do you know when your output is being piped to another
program?&lt;/li&gt;
&lt;li&gt;Managing logging and verbosity&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Managing streamed input&lt;/li&gt;
&lt;li&gt;Exit values: What are the conventions?&lt;/li&gt;
&lt;li&gt;Interactive apps - REPL&lt;/li&gt;
&lt;li&gt;Structuring a bunch of programs/commands around a shared codebase.&lt;/li&gt;
&lt;li&gt;Command-line frameworks: clint, compago &amp;amp; cliff&lt;/li&gt;
&lt;li&gt;Testing command-line apps&lt;/li&gt;
&lt;li&gt;Writing command-line tools in Python 3 vs Python 2&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mark Smith</dc:creator><pubDate>Thu, 24 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-24:europython-2014/writing-awesome-command-line-programs-in-python.html</guid></item><item><title>3D sensors and Python: A space odyssey</title><link>https://pyvideo.org/europython-2014/3d-sensors-and-python-a-space-odyssey.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;This talk will show how to build a simple open source based NUI (Natural
User Interface) game with 3D Sensors, incorporating PyOpenNI with PyGame
and WebGL. OpenNI allows you operate several 3D sensors, enabling
hardware independent game development (supported 3D sensors are
Microsoft Kinect, PrimeSense Carmine or Asus XTion). It also runs on
Linux, Mac OS X and Windows.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk will start with a brief introduction to 3D Sensors and OpenNI.
Then we’ll surf into PyOpenNI, features such as the skeleton, hand and
gesture tracking, RGB and depth video. Every topic will be presented
with practical demos. The talk will end with a demo integrating WebGL
(THREE.JS), 3D sensors, Flask and ZMQ to produce a simple fully open
source based NUI game.&lt;/p&gt;
&lt;p&gt;Some simple demos of PyOpenNI and PyGame can be found at
&lt;a class="reference external" href="https://www.youtube.com/watch?v=wI2ktioiPY8"&gt;1&lt;/a&gt; and
&lt;a class="reference external" href="http://youtu.be/3e8jibGUQ2Q"&gt;2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Attendees will not only learn about game related technologies but also
about innovative ways of doing domotics, cinema &amp;amp; art, Interactive
visualization, scientific research, educations, etc.&lt;/p&gt;
&lt;p&gt;3D Sensors will be available for testing during the event - you can get
yours for about 80 to 140 Euros (depending on the brand). Slides and
demo code will be available at Github.&lt;/p&gt;
&lt;p&gt;Talk structure:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Introduction: hardware and OpenNI goodies and a tale of PCL (5’)&lt;/li&gt;
&lt;li&gt;Hands On PyOpenNI&lt;ul&gt;
&lt;li&gt;Normal and Depth camera - basics concepts and small demo (5’)&lt;/li&gt;
&lt;li&gt;Skeleton - basics concepts and small demo. (5’)&lt;/li&gt;
&lt;li&gt;Hand &amp;amp; gesture - basics concepts and small demo. (5’)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Final Demo&lt;ul&gt;
&lt;li&gt;What we’re going to use? Flask, ZMQ, THREE.JS, PyOpenNI. (6’)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Q&amp;amp;A. (4’)&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Celia Cintas</dc:creator><pubDate>Wed, 23 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-23:europython-2014/3d-sensors-and-python-a-space-odyssey.html</guid></item><item><title>An HTTP request's journey through a platform-as-a-service</title><link>https://pyvideo.org/europython-2014/an-http-requests-journey-through-a-platform-as-a.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;PythonAnywhere hosts tens of thousands of Python web applications, with
traffic ranging from a couple of hits a week to dozens of hits a second.
Hosting this many sites reliably at a reasonable cost requires a
well-designed infrastructure, but it uses the same standard components
as many other Python-based websites. We've built our stack on GNU/Linux,
nginx, uWSGI, Redis, and Lua -- all managed with Python. In this talk
we'll give a high-level overview of how it all works, by tracing how a
request goes from the browser to the Python application and its response
goes back again. As well as showing how a fairly large deployment works,
we'll give tips on scaling and share a few insights that may help people
running smaller sites discover how they can speed things up.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Giles Thomas</dc:creator><pubDate>Wed, 23 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-23:europython-2014/an-http-requests-journey-through-a-platform-as-a.html</guid></item><item><title>Automatic code reviews</title><link>https://pyvideo.org/europython-2014/automatic-code-reviews.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;A lot of great Python tools exist to analyse and report on your
codebase, but they can require a lot of initial set up to be useful.
Done right, they can be like an automatic code review. This talk will
explain how to set up and get the best out of these tools, especially
for an existing, mature codebase.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Static analysis tools are a great idea in theory, but are not often
really used in practice. These tools usually require quite a lot of
initial effort to get set up in a way which produces meaningful output
for you or your organisation's particular coding style and values. As a
result, it's common to see initial enthusiasm replaced by ignoring the
tools.&lt;/p&gt;
&lt;p&gt;Such tools can be incredibly beneficial however, and even go so far as
to provide an automatic code review, and this talk will explain what
kind of benefits you can get from the tools, as well as explain what you
can and cannot expect.&lt;/p&gt;
&lt;p&gt;This talk is aimed at experienced developers who are interested in
improving their coding practices but who have either never tried static
analysis tools, or who have not seen the upsides. It will hopefully also
be useful to people who do use the tools, perhaps introducing them to
new tools or concepts they were not aware of yet.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Carl Crowder</dc:creator><pubDate>Wed, 23 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-23:europython-2014/automatic-code-reviews.html</guid></item><item><title>Compress Me, Stupid!</title><link>https://pyvideo.org/europython-2014/compress-me-stupid.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Compression is a general technique for reducing the size of datasets
that normally lie on disk or that should be sent remotely. But time has
come to use it as a means to accelerate applications that uses in-memory
data too.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.blosc.org"&gt;Blosc&lt;/a&gt; is a high-performance meta-compressor
that is meant to do that.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Compression is a technique to reduce the number of bits needed to
represent a given dataset. A very common use-case in the distributed
digital age is to reduce the size of files in order to reduce the time
and bandwidth requirements of sending a file from one location to
another.&lt;/p&gt;
&lt;p&gt;There are a large variety of different algorithms and implementations of
so called &amp;quot;codecs&amp;quot; - a term is derived from the fact that programs that
implement a compression algorithm commonly constitute of both a
compressor and a corresponding decompressor. There are many different
special purpose compressors that exploit specifics in the structure of
the input data, for example: MP3, Ogg and FLAC for audio data such as
music, GIF, JPEG and PNG for images and MPEG for encoding video. Also,
there are many general purpose codecs that make no assumptions about the
structure of the data, for example: Zlib(DEFLATE), Bzip2(BWT) and LZMA.&lt;/p&gt;
&lt;p&gt;However, and due to the ever growing divide between memory access
latency and CPU clock speed a new use-case beyond faster file transfers
and more efficient use of disk-space has emerged: &amp;quot;in-memory
compression&amp;quot;.&lt;/p&gt;
&lt;p&gt;Keeping data in RAM that is compressed also means that the CPU has to do
more work in order to make use of it. However, if the compressor is fast
enough, this decompression overhead could pay off, and applications
could work with compressed data transparently, and so not even noticing
the slowdown due to the extra effort for compression/decompression.&lt;/p&gt;
&lt;p&gt;This technique can be very beneficial in a variety of scenarios where
RAM availability is critical. For example, in-memory caching systems
like Memcached or Redis could store more data using the same resources
thereby optimizing resource usage. Another use case is to use
compression for in-memory data containers, à la NumPy's ndarray or
Pandas' DataFrame, allowing for improved memory usage and potentially
allow for accelerated computations.&lt;/p&gt;
&lt;p&gt;In our talk, we will explain first why we are in a moment of computer
history that &lt;a class="reference external" href="http://www.pytables.org/docs/CISE-12-2-ScientificPro.pdf"&gt;in-memory compression can be beneficial for modern
applications&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Then, we will introduce &lt;a class="reference external" href="http://www.blosc.org"&gt;Blosc&lt;/a&gt;, a high speed
meta-compressor, allowing other existing compressors (BloscLZ, LZ4,
Snappy or even Zlib) to leverage the SIMD and multithreading framework
that it provides and help achieving extremely fast operation (frequently
faster than a plain memcpy() system call).&lt;/p&gt;
&lt;p&gt;Finally, we will show some existing data handling libraries
(&lt;a class="reference external" href="https://github.com/Blosc/bloscpack"&gt;Bloscpack&lt;/a&gt;,
&lt;a class="reference external" href="http://www.pytables.org"&gt;PyTables&lt;/a&gt;,
&lt;a class="reference external" href="http://continuum.io/blog/blz-format"&gt;BLZ&lt;/a&gt;) -- all written in Python
-- that already use Blosc today for fulfilling the promise of faster
operations by doing in-memory compressing.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Valentin Haenal</dc:creator><pubDate>Wed, 23 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-23:europython-2014/compress-me-stupid.html</guid></item><item><title>Design considerations while Evaluating, Developing, Deploying a distributed task processing system</title><link>https://pyvideo.org/europython-2014/design-considerations-while-evaluating-developin.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;With the growing world of web, there are numerous use-cases which
require tasks to be executed in an asynchronous manner and in a
distributed fashion. Celery is one of the most robust, scalable,
extendable and easy-to-implement frameworks available for distributed
task processing. While developing applications using Celery, I have had
considerable experience in terms of what design choices one should be
aware of while evaluating an existing system or developing one's own
system from scratch.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Konark Modi</dc:creator><pubDate>Wed, 23 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-23:europython-2014/design-considerations-while-evaluating-developin.html</guid></item><item><title>Design Your Tests</title><link>https://pyvideo.org/europython-2014/design-your-tests.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;While getting started testing often provides noticeable immediate
improvement for any developer, it's often not until the realization that
tests are things that need &lt;em&gt;design&lt;/em&gt; to provide maximal benefit that
developers begin to appreciate or even &lt;em&gt;enjoy&lt;/em&gt; them.&lt;/p&gt;
&lt;p&gt;We'll investigate how building shallow, transparent layers for your
tests makes for better failures, clearer tests, and quicker diagnoses.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;ul class="simple"&gt;
&lt;li&gt;Life span of a test&lt;ul&gt;
&lt;li&gt;5 minute - why does this fail?&lt;/li&gt;
&lt;li&gt;5 day - what is this missing?&lt;/li&gt;
&lt;li&gt;5 week - do I have coverage for this?&lt;/li&gt;
&lt;li&gt;5 month - what's &lt;em&gt;not&lt;/em&gt; causing this bug?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Transparent simplicity&lt;ul&gt;
&lt;li&gt;one or two &amp;quot;iceberg&amp;quot; layers for meaning&lt;ul&gt;
&lt;li&gt;Higher-order assertions - build collections of state that have
meaning for the domain in the tests&lt;/li&gt;
&lt;li&gt;bulk of the details are in the code itself&lt;/li&gt;
&lt;li&gt;show an example&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;grouping for organization&lt;ul&gt;
&lt;li&gt;Mixins&lt;/li&gt;
&lt;li&gt;show an example&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;unittest issues&lt;ul&gt;
&lt;li&gt;assertion/mixin clutter&lt;/li&gt;
&lt;li&gt;setUp/tearDown tie grouping to the class layer or to inheritance
via super&lt;ul&gt;
&lt;li&gt;addCleanup&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;weak association / lookup-ability between code and its tests&lt;ul&gt;
&lt;li&gt;package layout&lt;/li&gt;
&lt;li&gt;other conventions&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Alternative approaches&lt;ul&gt;
&lt;li&gt;testtools' matchers&lt;/li&gt;
&lt;li&gt;py.test &lt;tt class="docutils literal"&gt;assert&lt;/tt&gt; magic&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Julian Berman</dc:creator><pubDate>Wed, 23 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-23:europython-2014/design-your-tests.html</guid></item><item><title>DevOps Risk Mitigation: Test Driven Infrastructure</title><link>https://pyvideo.org/europython-2014/devops-risk-mitigation-test-driven-infrastructur.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;The (perceived) risk of the DevOps is that too many people get the right
to &amp;quot;break&amp;quot; the platform.&lt;/p&gt;
&lt;p&gt;Test Driven Infrastructure is about adapting proven ideas from our
developer colleagues to the development and operations of Infrastructure
services like virtualization, OS provisioning, postfix configuration,
httpd configuration, ssh tuning, SAN LUN mounting and others.&lt;/p&gt;
&lt;p&gt;This talk shows how ImmobilienScout24 utilizes more and more test driven
development in IT operations to increase quality and to mitigate the
risk of opening up the infrastructure developmen to all developers.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Common wisdom has it that the test effort should be related to the risk
of a change. However, the reality is different: Developers build
elaborate automated test chains to test every single commit of their
application. Admins regularly “test” changes on the live platform in
production. But which change carries a higher risk of taking the live
platform down?&lt;/p&gt;
&lt;p&gt;What about the software that runs at the “lower levels” of your
platform, e.g. systems automation, provisioning, proxy configuration,
mail server configuration, database systems etc. An outage of any of
those systems can have a financial impact that is as severe as a bug in
the “main” software! One of the biggest learnings that any Ops person
can learn from a Dev person is Test Driven Development. Easy to say -
difficult to apply is my personal experience with the TDD challenge.&lt;/p&gt;
&lt;p&gt;This talk throws some light on recent developments at ImmobilienScout24
that help us to develop the core of our infrastructure services with a
test driven approach:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;How to do unit tests, integration tests and systems tests for
infrastructure services?&lt;/li&gt;
&lt;li&gt;How to automatically verify Proxy, DNS, Postfix configurations before
deploying them on live servers?&lt;/li&gt;
&lt;li&gt;How to test “dangerous” services like our PXE boot environment or the
automated SAN mounting scripts?&lt;/li&gt;
&lt;li&gt;How to add a little bit of test coverage to everything we do.&lt;/li&gt;
&lt;li&gt;Test Driven: First write a failing test and then the code that fixes
it.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The tools that we use are Bash, Python, Unit Test frameworks and
Teamcity for build and test automation.&lt;/p&gt;
&lt;p&gt;See
&lt;a class="reference external" href="http://blog.schlomo.schapiro.org/2013/12/test-driven-infrastructure.html"&gt;http://blog.schlomo.schapiro.org/2013/12/test-driven-infrastructure.html&lt;/a&gt;
for more about this topic.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Schlomo Schapiro</dc:creator><pubDate>Wed, 23 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-23:europython-2014/devops-risk-mitigation-test-driven-infrastructur.html</guid></item><item><title>Don't fear our new robot overlords!</title><link>https://pyvideo.org/europython-2014/dont-fear-our-new-robot-overlords.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;This talk will show you GoldenEye. A setup of a robot, image recognition
and Python. What could be better?&lt;/p&gt;
&lt;p&gt;GoldenEye uses computer vision to detect icons on an attached mobile
device and then tells a robot to tap them. All off these tests are
written in python's unittest module and the API is as easy as possible
to make writing complex tests an ease.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;GoldenEye is our solution for mobile front end tests. Testing on mobile
devices can be quite devastating: On iOS you can write front test in
JavaScript in Instruments but it is quite impossible to connect
Instruments to you CI solution of choice. On Android the situation isn't
much better. Other front end test frameworks can work with mobile
devices (or simulators) but they lack the ability to see. Of course you
can check if a color is set correctly, if a frame has the right x and y
coordinates but in a world of different screen sizes writing these tests
can be quite challenging as well. In the end you will always need to
look on your screen again and again trying to spot any issues.&lt;/p&gt;
&lt;p&gt;GoldenEye takes a different approach. It does not need to run on your
development computer, you don't need a Mac for running tests on iOS
devices and you can have real touches on your controls. This is archived
by using openCV and it's python bindings, Pythons's unittest module and
the Tapsterbot, an OpenSource delta robot made with 3D printing and an
Arduino controller. To write a test you just take some screenshots on
your device, cut out the icons you need to tap or inspect and write a
very simple unit test using a high-level API that takes away the hard
parts.&lt;/p&gt;
&lt;p&gt;WARNING: This talk features a real robot. In case of machine
world-domination: RUN!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Philip Brechler</dc:creator><pubDate>Wed, 23 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-23:europython-2014/dont-fear-our-new-robot-overlords.html</guid></item><item><title>Embedding Python: Charming the Snake with C++</title><link>https://pyvideo.org/europython-2014/embedding-python-charming-the-snake-with-c.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;At the example of our in-house distributed scheduling system, we discuss
the challenges of embedding the Python interpreter in a C++ program.
Besides the actual integration of the interpreter, efficient data
exchange between both languages is discussed. In addition, this
presentation demonstrates how higher-level abstractions further diminish
the language barrier.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python with its huge standard library and sophisticated packages
developed by its thriving community has become an incredibly useful tool
for data scientists. At Blue Yonder, we value Python for the ease with
which we can access and combine machine learning algorithms to build
accurate prediction models.&lt;/p&gt;
&lt;p&gt;To get the most business value out of the use of Python, we strive to
rid our model developers from all burdens outside their core expertise,
i.e., developing statistical models. To leverage our existing
infrastructure, essentially a distributed scheduling system written in
C++, we decided to embed a Python interpreter in our application. The
goal was to let developers use the language best suited for their
problem, and to let them incorporate code created by others even if it
is not written in the same language.&lt;/p&gt;
&lt;p&gt;In this presentation, I will talk about a few obstacles which we had to
overcome in integrating the (C)Python interpreter in our C++ program,
e.g., clean resource management, error handling, and broken features in
the interpreter's API. I will show how we employed features from the
&lt;a class="reference external" href="http://www.boost.org/doc/libs/1_55_0/libs/python/"&gt;Boost Python C++
library&lt;/a&gt; not only
for simple data exchange, but also for more powerful concepts such as
data sources. Finally, I will demonstrate how C++ objects can be used to
seamlessly interact with Python, for example to use Python's logging
package as usual while the actual logging is handled by our C++
application.&lt;/p&gt;
&lt;p&gt;With this combination of both worlds, we achieved a desirable mix of
virtues: safe, reliable operations; good run-time performance; fast
development; and highly expressive, unit testable core domain logic.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michael König</dc:creator><pubDate>Wed, 23 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-23:europython-2014/embedding-python-charming-the-snake-with-c.html</guid></item><item><title>For lack of a better name(server): DNS Explained</title><link>https://pyvideo.org/europython-2014/for-lack-of-a-better-nameserver-dns-explained-0.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;You've deployed! But your friends can't see it - what's wrong? I'm
betting DNS. Maybe you've fixed a couple of entries, point some records
to hostnames, waited patiently for new domains to resolve only to notice
your nameservers are incorrect. But what actually goes on with DNS? Come
to this talk to find out how DNS works, and how to interact and create a
DNS with Python.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Following instructions of what entries to create where is easy enough
when using a PaaS.&lt;/p&gt;
&lt;p&gt;But DNS is hard – deployment issues always seem to come down to DNS.&lt;/p&gt;
&lt;p&gt;A solid understanding of DNS will not only help with deploying your
applications, but will also give a greater understanding of how the
internet works, and more generally, distributed systems.&lt;/p&gt;
&lt;p&gt;In this talk, you will learn what DNS is, how it works and how to
communicate with it, and how Python can make both interacting and
spinning up your own DNS server simple (I swear!).&lt;/p&gt;
&lt;p&gt;Outline:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Intro (1-2m)&lt;/li&gt;
&lt;li&gt;What DNS is (5 min)&lt;ul&gt;
&lt;li&gt;URL -&amp;gt; IP addr, e.g. &amp;quot;phonebook&amp;quot; lookup (obligatory pun: Call me,
Maybe?)&lt;/li&gt;
&lt;li&gt;hierarchical system &amp;amp; resolution sequence (local DNS
cache/resolver, ISP resolver, recursive DNS search)&lt;/li&gt;
&lt;li&gt;popular types (primary, secondary/slave, forwarding, authoritative
only, etc)&lt;/li&gt;
&lt;li&gt;System components: what makes a DNS?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;How to communicate with DNS (3 min)&lt;ul&gt;
&lt;li&gt;Protocol: UDP&lt;/li&gt;
&lt;li&gt;Operations: CRUD&lt;/li&gt;
&lt;li&gt;Resource records (A, AAAA, CNAME, SOA, SRV, etc)&lt;/li&gt;
&lt;li&gt;tools: dig/nsupdate/nslookup&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Security overview (3min) (disclaimer: NOT a DNS security expert, not
planning to get into the details here)&lt;ul&gt;
&lt;li&gt;Server-Server, DynDNS: TSIG/GSS-TSIG&lt;/li&gt;
&lt;li&gt;Server-Client: DNSSEC&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Python + DNS (10 min)&lt;ul&gt;
&lt;li&gt;plain UDP query in Python (no 3rd-party libraries/no magic)&lt;/li&gt;
&lt;li&gt;Interacting with a DNS w/ Python (dnspython.py)&lt;/li&gt;
&lt;li&gt;Sample DNS server with Twisted&lt;/li&gt;
&lt;li&gt;&amp;quot;fake&amp;quot; demo (either local or pre-recorded screen cast) of
querying/updating/etc of the Twisted DNS&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Wrap up - resources page, github links, etc (1min)&lt;/li&gt;
&lt;li&gt;Q&amp;amp;A - ~5 min&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lynn Root</dc:creator><pubDate>Wed, 23 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-23:europython-2014/for-lack-of-a-better-nameserver-dns-explained-0.html</guid></item><item><title>gevent: asynchronous I/O made easy</title><link>https://pyvideo.org/europython-2014/gevent-asynchronous-io-made-easy.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;gevent provides highly scalable asynchronous I/O without becoming a nest
of callbacks, or even needing code changes.&lt;/p&gt;
&lt;p&gt;Daniel will explain how to get started with gevent, discuss patterns for
its use and describe the differences with Twisted, Tornado and
Tulip/asyncio.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;It has been claimed &amp;quot;Callbacks are the new GOTO&amp;quot;. Most asynchronous IO
libraries use callbacks extensively.&lt;/p&gt;
&lt;p&gt;gevent (&lt;a class="reference external" href="http://www.gevent.org"&gt;http://www.gevent.org&lt;/a&gt;) uses coroutines to provide highly
scalable asynchronous I/O with a synchronous programming model that
doesn't need code changes and callbacks. By elegantly monkey patching
the Python standard library, both your code and all pure Python
libraries become asynchronous too, making a separate collection of
protocol implementations (in the style of Twisted) unnecessary.&lt;/p&gt;
&lt;p&gt;Code written like this is easier to understand, particularly for more
junior developers. Crucially, IO errors can be raised at the right
places.&lt;/p&gt;
&lt;p&gt;I will be introducing gevent's programming model, why it's easier, walk
through simple code samples, and discuss experiences and metaphors for
programming with it.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Daniel Pope</dc:creator><pubDate>Wed, 23 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-23:europython-2014/gevent-asynchronous-io-made-easy.html</guid></item><item><title>Graph Databases, a little connected tour</title><link>https://pyvideo.org/europython-2014/graph-databases-a-little-connected-tour.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;There are many kinds of NoSQL databases like, document databases,
key-value, column databases and graph databases. In some scenarios is
more convenient to store our data as a graph, because we want to extract
and study information relative to these connections. In this scenario,
graph databases are the ideal, they are designed and implemented to deal
with connected information in a efficient way.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;There are many kinds of NoSQL databases like, document databases,
key-value, column databases and graph databases. In some scenarios is
more convenient to store our data as a graph, because we want to extract
and study information relative to these connections. In this scenario,
graph databases are the ideal, they are designed and implemented to deal
with connected information in a efficient way. In this talk I'll explain
why NoSQL is necessary in some contexts as an alternative to traditional
relational databases. How graph databases allow developers model their
domains in a natural way without translating these domain models to an
relational model with some artificial data like foreign keys and why is
more efficient a graph database than a relational one or even a document
database in a high connected environment. Then I'll explain specific
characteristics of Neo4J as well as how to use Cypher the neo4j query
language through python.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Francisco Fernández Castaño</dc:creator><pubDate>Wed, 23 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-23:europython-2014/graph-databases-a-little-connected-tour.html</guid></item><item><title>How to become an Agile company - case study</title><link>https://pyvideo.org/europython-2014/how-to-become-an-agile-company-case-study.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;The STX Next story has the classic arc of &amp;quot;zero to hero.&amp;quot; During the
last 9 years, STX Next has grown from a small business with a handful of
developers, to one of the biggest Python companies in Europe, and a
leading proponent of agile and scrum methodologies. We feel that now is
the best moment to share our experiences in implementing effective,
agile development processes in a company of nearly 100 developers.
Maciej Dziergwa will be discussing how he's grown his business, what
challenges there are today in python development, and how he plans to
take his company to the next level. Especially we want to spread our
ideas of building de-localized teams/frequently changing teams/teams
with young members that learn rapidly making synergy effect. Join us
during our Business Day on 23th July 2014! Remember that 2+2 can be much
more than 4...&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Maciej Dziergwa</dc:creator><pubDate>Wed, 23 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-23:europython-2014/how-to-become-an-agile-company-case-study.html</guid></item><item><title>How to Setup a new Python Project</title><link>https://pyvideo.org/europython-2014/how-to-setup-a-new-python-project.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Setting up a new Python project from scratch can be quite hard. How to
structure your files and directories. Where should my packages, modules,
documentation and unit tests go? How do I configure setup.py, Sphinx and
so on? We provide proven answers!&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Whenever a Python beginner starts with its own project he or she is
confronted with the same technical questions. Questions about a well
thought out directory structure to hold all the files. How setup.py
needs to be configured and even what it is capable of like specifying
entry_points and other goodies. We show from the experience of our
yearslong work with Python how to structure your Python project in terms
of folders, files, modules and packages. How to configure setup.py to
specify your requirements, to use it with nosetests, with Sphinx and so
on. We also elaborate on the usage of Git and Versioneer
(&lt;a class="reference external" href="https://github.com/warner/python-versioneer"&gt;https://github.com/warner/python-versioneer&lt;/a&gt;) to help you version your
package.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Felix Wick</dc:creator><pubDate>Wed, 23 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-23:europython-2014/how-to-setup-a-new-python-project.html</guid></item><item><title>How we switched our 800+ projects from Apache to uWSGI</title><link>https://pyvideo.org/europython-2014/how-we-switched-our-800-projects-from-apache-to.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;During the last 7 years the company I am working for developed more than
800 projects in PHP and Python. All this time we were using Apache+nginx
for hosting this projects. In this talk I will explain why we decided to
switch all our projects from Apache+nginx to uWSGI+nginx and how we did
that.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The talk will start from describing the setup we had for the last 7
years, i.e. Apache with mod_wsgi for Python projects and mod_php4/5
for PHP projects + nginx. I will explain why we used this setup for so
long time, what problems we faced with this setup and what solutions we
tried to solve them before switching to uWSGI.&lt;/p&gt;
&lt;p&gt;Then I will tell about uWSGI, what it is, how it works and what features
it has. I will show the comparison of configuration files, how simple it
is to configure uWSGI compared to Apache.&lt;/p&gt;
&lt;p&gt;Lastly I will explain how we managed to switch all our 800+ projects
developed over the years in 2 different languages with 2 major versions
changed (PHP4/5 and Python2/3), how this switch simplified our
development and administration of this projects, the improvements we got
in memory management and other areas.&lt;/p&gt;
&lt;p&gt;Of course I will concentrate mainly on our Python projects because it is
EuroPython after all and not EuroPHP ;-)&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Max Tepkeev</dc:creator><pubDate>Wed, 23 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-23:europython-2014/how-we-switched-our-800-projects-from-apache-to.html</guid></item><item><title>I want to help! How to make your first contribution to open-source</title><link>https://pyvideo.org/europython-2014/i-want-to-help-how-to-make-your-first-contributi.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Do you like open-source? Would you like to give back somehow but are not
sure what to do or where to start? Together we will look at the usual
workflow for making any kind of contribution, using a real patch as an
example.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Julie Pichon</dc:creator><pubDate>Wed, 23 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-23:europython-2014/i-want-to-help-how-to-make-your-first-contributi.html</guid></item><item><title>Identifying Bugs Before Runtime With Jedi</title><link>https://pyvideo.org/europython-2014/identifying-bugs-before-runtime-with-jedi.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Finding bugs before runtime has been an incredibly tedious task in
Python. Jedi is an autocompletion library with interesting capabilities:
It understands a lot of the dynamic features of Python. I will show you
how we can use the force of (the) Jedi to identify bugs in your Python
code. It's not just another pylint. It's way better.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Jedi is an autocompletion library for Python that has gained quite a
following over the last year. There are a couple of plugins for the most
popular editors (VIM, Sublime, Emacs, etc.) and mainstream IDEs like
Spyder are switching to Jedi.&lt;/p&gt;
&lt;p&gt;Jedi basically tries to redefine the boundaries of autocompletion in
dynamic languages. Most people still think that there's no hope for
decent autocompletion in Python. This talk will try to argue the
opposite, that decent autocompletion is very close.&lt;/p&gt;
&lt;p&gt;While the first part will be about Jedi, the second part of this talk
will discuss the future of dynamic analysis. Dynamic Analysis is what I
call the parts that static analysis doesn't cover. The hope is to
generate a kind of &amp;quot;compiler&amp;quot; that doesn't execute code but reports
additional bugs in your code (AttributeErrors and the like).&lt;/p&gt;
&lt;p&gt;I still have to work out the details of the presentation. I also have to
add that Jedi I'm currently working full-time on Jedi and that there's
going to be some major improvements until the conference. Autocompletion
and static/dynamic analysis as well as refactoring are hugely important
tools for a dynamic language IMHO, because they can improve the only big
disadvantage compared to static languages: Finding bugs before running
your tool.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dave Halter</dc:creator><pubDate>Wed, 23 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-23:europython-2014/identifying-bugs-before-runtime-with-jedi.html</guid></item><item><title>Introduction to pytest</title><link>https://pyvideo.org/europython-2014/introduction-to-pytest.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;pytest is a full featured testing tool that makes it possible to write
&amp;quot;pythonic&amp;quot; tests. This talk will introduce pytest and some of its unique
and innovative features. It will help you get started with pytest for
new or existing projects, by showing basic usage and configuration.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk will show introduce pytest and show some unique and innovative
features. It will show how to get started using it and some of the most
important features.&lt;/p&gt;
&lt;p&gt;One of these features is the ability to write tests in a more “pythonic”
way by using the assert statement for assertions. Another feature in
pytest is fixtures – a way to handle test dependencies in a structured
way. This talk will introduce the concept of fixtures and show how they
can be used.&lt;/p&gt;
&lt;p&gt;No previous knowledge of pytest is required – this talk is for people
who are new to testing or has experience with other Python testing tools
such as unittest or Nose.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andreas Pelme</dc:creator><pubDate>Wed, 23 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-23:europython-2014/introduction-to-pytest.html</guid></item><item><title>Lightning Talks</title><link>https://pyvideo.org/europython-2014/lightning-talks-4.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;A lightning talk is a short talk, typically only five minutes in
duration, providing an opportunity for participants - particularly
people not featured in the main programme - to deliver a presentation on
a subject of their choosing.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Various speakers</dc:creator><pubDate>Wed, 23 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-23:europython-2014/lightning-talks-4.html</guid><category>lightning talks</category></item><item><title>Managing the Cloud with a Few Lines of Python</title><link>https://pyvideo.org/europython-2014/managing-the-cloud-with-a-few-lines-of-python.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;One of the advantages of cloud computing is that resources can be
enabled or disabled dynamically. E. g. is an distributed application
short on compute power one can easily add more. But who wants to do that
by hand? Python is a perfect fit to control the cloud. The talk
introduces the package &lt;a class="reference external" href="https://github.com/boto/boto"&gt;Boto&lt;/a&gt; which
offers an easy API to manage most of the Amazon Web Services (AWS) as
well as a number of command line tools.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;One of the advantages of cloud computing is that resources can be
enabled or disabled dynamically. E. g. is an distributed application
short on compute power one can easily add more. But who wants to do that
by hand? Python is a perfect fit to control the cloud. The talk
introduces the package Boto which offers an easy API to manage most of
the Amazon Web Services (AWS) as well as a number of command line tools.
First some usage examples are shown to introduce the concepts behind
Boto. For that a few virtual instances with different configurations are
launched, and the use of the storage service S3 is briefly introduced.
Based on that a scalable continuous integration system controlled by
Boto is developed to show how easy all the required services can be used
from Python. Most of the examples will be demonstrated during the talk.
They should be easily adoptable for similar use cases or serve as an
starting point for more different ones.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Frank Becker</dc:creator><pubDate>Wed, 23 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-23:europython-2014/managing-the-cloud-with-a-few-lines-of-python.html</guid></item><item><title>Our decentralized future</title><link>https://pyvideo.org/europython-2014/our-decentralized-future.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Pieter will talk about the urgent push towards a decentralized future.
As founder of the ZeroMQ community, he will explain the vision, design
and reality of distributed software systems. He'll explain his view on
the community itself, also a highly decentralized &amp;quot;Living System&amp;quot;, as
Hintjens calls it. Finally he'll talk about edgenet, a model for a
decentralized Internet.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Pieter Hintjens</dc:creator><pubDate>Wed, 23 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-23:europython-2014/our-decentralized-future.html</guid></item><item><title>Performance Python for Numerical Algorithms</title><link>https://pyvideo.org/europython-2014/performance-python-for-numerical-algorithms.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;This talk is about several approaches to implement high performing
numerical algorithms and applications in Python. It introduces into
approaches like vectorization, multi-threading, parallelization
(CPU/GPU), dynamic compiling, high throughput IO operations. The
approach is a practical one in that every approach is illustrated by
specific Python examples.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk is about several approaches to implement high performing
numerical algorithms and applications in Python. It introduces into
approaches like multi-threading, parallelization (CPU/GPU), dynamic
compiling, high throughput IO operations.&lt;/p&gt;
&lt;p&gt;The approach is a practical one in that every approach is illustrated by
specific Python examples.&lt;/p&gt;
&lt;p&gt;The talk uses, among others, the following libraries:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;NumPy&lt;/li&gt;
&lt;li&gt;numexpr&lt;/li&gt;
&lt;li&gt;IPython.Parallel&lt;/li&gt;
&lt;li&gt;Numba&lt;/li&gt;
&lt;li&gt;NumbaPro&lt;/li&gt;
&lt;li&gt;PyTables&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dr. Yves J. Hilpisch</dc:creator><pubDate>Wed, 23 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-23:europython-2014/performance-python-for-numerical-algorithms.html</guid></item><item><title>Python in system testing</title><link>https://pyvideo.org/europython-2014/python-in-system-testing.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;When you think about Python+testing, you usually think about testing
your code - unittests, mostly. But it is not the only case! When you
have a big system, you need to test it on much higher level - if only to
check if all the components are wired in the right way. You may do it
manually, but it is tedious and time-consuming - so you want to automate
it. And here comes Python - the language of choice in many QA
departments.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;When you think about Python+testing, you usually think about testing
your code - unittests, mostly. But it is not the only case! When you
have a big system, you need to test it on much higher level - if only to
check if all the components are wired in the right way. You may do it
manually, but it is tedious and time-consuming - so you want to automate
it. And here comes Python - the language of choice in many QA
departments.&lt;/p&gt;
&lt;p&gt;I will tell about differences between unittesting and system testing
which result in totally different requirements on test
management/running systems. I will tell how we use Python (and a little
why) to automate our work. Finally, I will tell a little about my &amp;quot;idee
fixe&amp;quot; - a framework for system testing written in Python.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Katarzyna Jachim</dc:creator><pubDate>Wed, 23 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-23:europython-2014/python-in-system-testing.html</guid></item><item><title>Python refactoring with Rope and Traad</title><link>https://pyvideo.org/europython-2014/python-refactoring-with-rope-and-traad.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Rope is a powerful Python refactoring library. Traad (Norwegian for
&amp;quot;thread&amp;quot;) is a tool which makes it simpler to integrate rope into IDEs
via a simple HTTP API. In this session we'll look at how traad and rope
work together and how traad integrates with at least one popular editor.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python is a modern, dynamic language which is growing in popularity, but
tool support for it is sometime lacking or only available in specific
environments. For refactoring and other common IDE functions, however,
the powerful open-source rope library provides a set of tools which are
designed to be integrated into almost any programming environment. Rope
supports most common refactorings, such as renaming and method
extraction, but also more Python-specific refactorings, such as import
organization. Rope’s underlying code analysis engine also allows it to
do things like locating method definitions and generating
auto-completion suggestions.&lt;/p&gt;
&lt;p&gt;While rope is designed to be used from many environments, it’s not
always easy or ideal to integrate rope directly into other programs.
Traad (Norwegian for “thread”) is another open-source project that
addresses this problem by wrapping rope into a simple client-server
model so that client programs (IDEs, editors, etc.) can perform
refactorings without needing to embed rope directly. This simplifies
dependencies, makes clients more robust in the face of errors, eases
traad client development, and even allows clients to do things like
switch between Python 2 and 3 refactoring in the same session.&lt;/p&gt;
&lt;p&gt;In this session we’ll look at how rope operates, and we’ll see how traad
wraps it to provide an easier integration interface. The audience will
get enough information to start using rope themselves, either directly
or via traad, and they’ll see how to use traad for integrating rope into
their own environments. More generally, we’ll look at why client-server
refactoring tools might be preferable to the more standard approach of
direct embedding.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Austin Bingham</dc:creator><pubDate>Wed, 23 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-23:europython-2014/python-refactoring-with-rope-and-traad.html</guid></item><item><title>Scaling with Ansible</title><link>https://pyvideo.org/europython-2014/scaling-with-ansible.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Ansible is a powerful DevOps swiss-army knife tool, very easy to
configure and with many extensions built-in. This talk will quickly
introduce the basics of Ansible, then some real-life experience tips on
how to use this tool, from setting up dev VMs to multi-server setups.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Infrastructure/Scaling is a topic really close to me, I'd like to have
the chance to talk about how we set this up in the company I work for.
Our infrastructure is around 10-15 servers, provisioned on different
cloud providers, so a good size infrastructure.&lt;/p&gt;
&lt;p&gt;Presentation is going to be divided in 3 parts, first part is going to
be focused on comparing sysadmin and devops, then there will be an
introduction to the basic concepts of Ansible. I want to spend most on
the last part, which is going to give some tips based on our experience
with it.&lt;/p&gt;
&lt;p&gt;Many ideas will come from this presentation
&lt;a class="reference external" href="https://speakerdeck.com/fmarani/devops-with-ansible"&gt;https://speakerdeck.com/fmarani/devops-with-ansible&lt;/a&gt; which i gave at
DJUGL in London, with a longer session I will have more chances to delve
into more detail, especially on how we use it, from vagrant boxes setup
to AWS and DigitalOcean boxes, network configuration, software
configurations, etc...&lt;/p&gt;
&lt;p&gt;I want to offer as many real-life tips as possible, without going too
much offtopic as far as Ansible is concerned&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Federico Marani</dc:creator><pubDate>Wed, 23 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-23:europython-2014/scaling-with-ansible.html</guid></item><item><title>SQLAlchemy Drill</title><link>https://pyvideo.org/europython-2014/sqlalchemy-drill.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;If you have been looking to use SQLAlchemy in one of your projects, but
found the documentation a bit overwhelming then this talk is for you. If
you have used SQLAlchemy but feel there are some holes in your knowledge
of the library, then this talk is for you as well. At the beginning of
the talk, we fire up our Python interpreter and start to explore the
library in a structured way. We'll go hands on through the various parts
of the SQLAlchemy. We try out the concepts of each part of the library
and make sure the basics are well understood.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk will introduce the audience to SQLAlchemy in a well
structured way, so that basic concepts are understood. This talk will be
a combination of slides and interactive code editing in IPython. Both
the working of SQLAlchemy as well as best practices in using SQLAlchemy
will be demonstrated.&lt;/p&gt;
&lt;p&gt;I will demonstrate the basic workings of:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;the SQL generation layer&lt;/li&gt;
&lt;li&gt;the DDL generation&lt;/li&gt;
&lt;li&gt;the ORM&lt;/li&gt;
&lt;li&gt;the session&lt;/li&gt;
&lt;li&gt;transactions&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The used code will allow those who have their laptop with them to try
the code samples for themselves.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Erik Janssens</dc:creator><pubDate>Wed, 23 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-23:europython-2014/sqlalchemy-drill.html</guid></item><item><title>Stackless: Recent advancements and future goals</title><link>https://pyvideo.org/europython-2014/stackless-recent-advancements-and-future-goals.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Stackless (formerly known as Stackless-Python) is an enhanced variant of
the Python-language. Stackless is best known for its lightweight
microthreads. But that's not all. In this talk Stackless core developers
demonstrate recent advancements regarding multi-threading,
custom-scheduling, debugging with Stackless and explain future plans for
Stackless.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Since Python release 1.5 Stackless Python is an enhanced variant of
C-Python. Stackless is best known for its addition of lightweight
microthreads (tasklets) and channels.&lt;/p&gt;
&lt;p&gt;Less known are the recent enhancements that became available with
Stackless 2.7.6. In this talk core Stackless developers demonstrate&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The improved multi-threading support&lt;/li&gt;
&lt;li&gt;How to build custom scheduling primitives based on atomic tasklet
operations&lt;/li&gt;
&lt;li&gt;The much improved debugger support&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Stackless recently switched the new master repository from
hg.python.org/stackless to bitbucket to allow for a more open
development process. We'll summarise our experience and discuss our
plans for the future development of Stackless.&lt;/p&gt;
&lt;p&gt;The talk will be help by Anselm Kruis and Christian Tismer. If we are
lucky, we will also welcome Kristján Valur Jónsson from Iceland.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Anselm Kruis</dc:creator><pubDate>Wed, 23 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-23:europython-2014/stackless-recent-advancements-and-future-goals.html</guid></item><item><title>Supercharge your development environment using Docker</title><link>https://pyvideo.org/europython-2014/supercharge-your-development-environment-using-do.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;These days applications are getting more and more complex. It's becoming
quite difficult to keep track of all the different components an
application needs to function (a database, an AMQP, a web server, a
document store...). It keeps getting harder and harder to setup new
development environments and to bring new developers into the team.
Stuff works on one dev machine but doesn't on others? Code breaks often
when deployed to production even though all tests were passing and it
worked on the dev machine?&lt;/p&gt;
&lt;p&gt;The idea of this talk is to convey how important it is that we have our
development environment as close to production as possible. That means
setting up all those various services on your laptop/workstation.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk I am going to show how to utilize light weight lxc
containers using docker, and make your development process much more
straightforward. How to share container images among your development
team and be sure that everyone is running the exact same stack. Do all
this without hogging too many resources, without the need for complex
provisioning scripts and management systems. And above all else, how to
do it fast!&lt;/p&gt;
&lt;p&gt;Rough Guidelines:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Describe what is LXC (Linux containers)&lt;/li&gt;
&lt;li&gt;Benefits of using containers instead of traditional VM's&lt;/li&gt;
&lt;li&gt;Explain where Docker comes in&lt;/li&gt;
&lt;li&gt;Show how to build simple containers using Dockefile syntax&lt;/li&gt;
&lt;li&gt;What are container images and how to share them&lt;/li&gt;
&lt;li&gt;How to share private container images&lt;/li&gt;
&lt;li&gt;Tips and tricks on how to automate&lt;/li&gt;
&lt;/ol&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Deni Bertovic</dc:creator><pubDate>Wed, 23 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-23:europython-2014/supercharge-your-development-environment-using-do.html</guid></item><item><title>Systems Integration: The OpenStack success story</title><link>https://pyvideo.org/europython-2014/systems-integration-the-openstack-success-story.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;OpenStack is a huge, open-source cloud provider. One of the main tenets
of OpenStack is the (Shared Nothing Architecture) to which all modules
stick very closely. In order to do that, services within OpenStack have
adopted different strategies to integrate themselves and share data
without sacrificing performance nor moving away from SNA.&lt;/p&gt;
&lt;p&gt;This strategies are not applicable just to OpenStack but to any
distributed system. Sharing data, regardless what that data is, is a
must-have requirement of any successful cloud service.&lt;/p&gt;
&lt;p&gt;This talk will present some of the existing integration strategies that
are applicable to cloud infrastructures and enterprise services. The
talk will be based on the strategies that have helped OpenStack to be
successful and most importantly, scalable.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;div class="section" id="abstract"&gt;
&lt;h4&gt;Abstract&lt;/h4&gt;
&lt;p&gt;OpenStack is a huge, open-source cloud provider. One of the main tenets
of OpenStack is the (Shared Nothing Architecture) to which all modules
stick very closely. In order to do that, services within OpenStack have
adopted different strategies to integrate themselves and share data
without sacrificing performance nor moving away from SNA.&lt;/p&gt;
&lt;p&gt;This strategies are not applicable just to OpenStack but to any
distributed system. Sharing data, regardless what that data is, is a
must-have requirement of any successful cloud service.&lt;/p&gt;
&lt;p&gt;This talk will present some of the existing integration strategies that
are applicable to cloud infrastructures and enterprise services. The
talk will be based on the strategies that have helped OpenStack to be
successful and most importantly, scalable.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="details"&gt;
&lt;h4&gt;Details&lt;/h4&gt;
&lt;p&gt;Along the lines of what I've described in the abstract, the presentation
will walk the audience through the state of the art of existing system
integration solutions, the ones that have been adopted by OpenStack and
the benefits of those solutions. At the end of the talk, a set of
solutions under development, ideas and improvements to the existing ones
will be presented.&lt;/p&gt;
&lt;p&gt;The presentation is oriented to distributed services, fault-tolerance
and replica determinism. It's based on a software completely written in
python and running successfully on several production environments.&lt;/p&gt;
&lt;p&gt;The presentation will be split in 3 main topics:&lt;/p&gt;
&lt;div class="section" id="distributed-system-integration"&gt;
&lt;h5&gt;Distributed System integration&lt;/h5&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;What's it ?&lt;/li&gt;
&lt;li&gt;Why is it essential for cloud infrastructures?&lt;/li&gt;
&lt;li&gt;Existing methods and strategies&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="openstack-success-story"&gt;
&lt;h5&gt;OpenStack success story&lt;/h5&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Which methods did OpenStack adopt?&lt;/li&gt;
&lt;li&gt;How / Why do they work?&lt;/li&gt;
&lt;li&gt;What else could be done?&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="coming-next"&gt;
&lt;h5&gt;Coming Next&lt;/h5&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Some issues of existing solutions&lt;/li&gt;
&lt;li&gt;What are we doing to improve that?&lt;/li&gt;
&lt;li&gt;Other solutions coming up&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Flavio Percoco</dc:creator><pubDate>Wed, 23 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-23:europython-2014/systems-integration-the-openstack-success-story.html</guid></item><item><title>Using All These Cores: Transactional Memory in PyPy</title><link>https://pyvideo.org/europython-2014/using-all-these-cores-transactional-memory-in-py.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;PyPy, the Python implementation written in Python, experimentally
supports Transactional Memory (TM). The strength of TM is to enable a
novel use of multithreading, inheritently safe, and not limited to
special use cases like other approaches. This talk will focus on how it
works under the hood.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyPy is a fast alternative Python implementation. Software Transactional
Memory (STM) is a current academic research topic. Put the two together
--brew for a couple of years-- and we get a version of PyPy that runs on
multiple cores, without the infamous Global Interpreter Lock (GIL).&lt;/p&gt;
&lt;p&gt;The current research is based on a recent new insight that promises to
give really good performance. The speed of STM is generally measured by
two factors: the ability to scale with the number of CPUs, and the
amount of overhead when compared with other approaches in a single CPU
(in this case, with the regular PyPy with the GIL). Scaling is not
really a problem here, but single-CPU performance is --or used to be.
This new approach gives a single-threaded overhead that should be very
low, maybe 20%, which would definitely be news for STM systems. Right
now (February 2014) we are still implementing it, so we cannot give
final numbers yet, but early results on a small interpreter for a custom
language are around 15%. This looks like a deal-changer for STM.&lt;/p&gt;
&lt;p&gt;In the talk, I will describe our progress, hopefully along with real
numbers and demos. I will then dive under the hood of PyPy to give an
idea about how it works. I will conclude with a picture of how the
future of multi-threaded programming might looks like, for high-level
languages like Python. I will also mention CPython: how hard (or not) it
would be to change the CPython source code to use the same approach.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Armin Rigo</dc:creator><pubDate>Wed, 23 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-23:europython-2014/using-all-these-cores-transactional-memory-in-py.html</guid></item><item><title>Writing multi-language documentation using Sphinx</title><link>https://pyvideo.org/europython-2014/writing-multi-language-documentation-using-sphinx.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;How to write multi-language documentation? What tools can you use? What
mistakes should you avoid? This talk is based on the experiences I
gathered while working on several multi-language documentation projects
using &lt;a class="reference external" href="http://sphinx-doc.org/"&gt;Sphinx&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Internationalized documentation is a fairly new topic. And there are
different approaches to do this. I will talk about how Sphinx
internationalization support works, which tools and services I use and
how to organize the translation workflow in an Open Source project.
Finally I will have a look at what the future of internationalization in
Sphinx might bring.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Markus Zapke-Gründemann</dc:creator><pubDate>Wed, 23 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-23:europython-2014/writing-multi-language-documentation-using-sphinx.html</guid></item><item><title>Amanda: A New Generation of Distributed Services Framework</title><link>https://pyvideo.org/europython-2014/amanda-a-new-generation-of-distributed-services.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;To help create award winning visual effects, MPC developed a distributed
service-oriented platform, Amanda. Amanda allows developers of any level
to write a service that is presented to users across 8 facilities
globally without them requiring any knowledge of building large
concurrent systems. It allows artists and developers across different
domains to work with clearly defined API's and gives the service
developer control over what and how data can and should be accessed. The
talk will cover how to set up such a platform from the ground up.
Starting at the service level building it out with additional modules
and technologies until the fully distributed system, covering topics
such as concurrency, componetisation and monitoring that allow the fine
tuning of setups depending on the type of work being undertaken and
changing business needs.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;We'll start off with a quick overview of a movie production pipeline
which will set the stage for how Amanda provides artists with the tools
they need to develop and streamline the production process as well as
Amanda's crucial function as a robust framework for the support and
development teams. Going over some stats, up to 250.000 service calls a
minute during World War Z for example (for frame of reference this is
twice the average rate of stackoverflow.com), I'll highlight some of the
problems encountered with the 1st generation. Initially developed in
2007 and replaced last year it had several flaws in regards to
scalability, maintainability and future proofing. From there I'll
introduce the 2nd generation which is build on the principle of
componentisation and building blocks. Every part of the system needs to
be replaceable and this needs to be possible from the configuration.&lt;/p&gt;
&lt;p&gt;During the presentation we will be stepping through the different
building blocks, how they have been set up, how they slot together and
how we monitor, trace and test the system from the ground up. Starting
at the lowest level with services we'll slowly step through the
different blocks necessary to build a fault tolerant, distributed and
scalable platform. We made sure that the platform is not tied into any
specific technology but allows the use of the best technologies
depending on the type of work being undertaken and changing business
needs and technological advances.&lt;/p&gt;
&lt;div class="section" id="service-development-and-testing"&gt;
&lt;h4&gt;Service development and testing&lt;/h4&gt;
&lt;p&gt;Our development teams build applications for artists creating visual
effects through to management teams coordinating productions. A
service-based architecture was chosen to provide consistent interfaces
across the many different environments where this is required. We
provide an ecosystem where developers of any level can safely write a
service (a set of instructions regarding a specific topic) that are
presented to developers and technical artists globally. To write a
service the developer doesn't need any knowledge in regards to building
large concurrent systems. The service is implemented through a simple
Python API and the provided ecosystem allows services to exist in a
standalone manner. The service concept was separated from the platform
hosting it. This allows hosting in any application that provides a
standard container (a service provider). Extracting this allowed for
more rigorous and simple testing of services; it also allows developers
to provide fake versions of their services publicly against which client
code can be tested. The adage Ê»everything as a serviceÊ¼ was applied to
the development of internal facilities. This includes our management
tools and the developer console, which presents the documentation of
services and methods available to developers through a web interface.
Infrastructure services were introduced to present an interface to
facilities provided to a regular service, for example databases,
configuration and centralized logging. Services can call other services
and, similarly to infrastructures, services can be replaced with
different services depending on the configuration. Services are exposed
to a service (or client as we will see later) via a service provider
just like in applications. Setting services up with the above patterns
allows developers to iterate quickly and to include services within
testing frameworks. It has also provided a standardized form across
projects allowing developers to support and add to unfamiliar code
easily. And last but not least it has given us full abstractions at all
levels, users of services do not need to know the code underneath the
hood be it at a service level or at an infrastructure level.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="building-the-cluster"&gt;
&lt;h4&gt;Building the cluster&lt;/h4&gt;
&lt;p&gt;Rather than building a single system, the new architecture defines a set
of building blocks for constructing a distributed service platform.
These can provide adapters for best of breed third party tools or, where
necessary, custom implementations of functionality. Configuration is
used to determine the number and types of modules to use and the
parameters with which to initialize them. This allows the same platform
to be used for small instances at a developerÊ¼s desk up to a production
environment of many nodes. The design enables improved components to be
swapped into the existing system whilst forming the basis for an
entirely new design.&lt;/p&gt;
&lt;p&gt;Most practical applications require the service provider to handle
multiple requests at the same time. Amanda provides a set of
interchangeable concurrency modules. This allows the most appropriate
Python model for parallel processing to be chosen. For work involving
heavy I/O work we choose approaches that avoid waiting for the GIL, for
example multiple processes and greenlets/coroutines, whilst for CPU
bound work we can use threads which may prove more performant. Having
the option to choose between mechanisms is important since there is not
a solution that neatly fits all use cases. A pluggable concurrency
abstraction also allows integration of new libraries as they become
available. In future this might include the new asyncio (formerly Tulip)
core library for Python 3.3+.&lt;/p&gt;
&lt;p&gt;To benefit from concurrency, resource pooling, caching etc. we don't
always want to execute the service locally to the service provider.
Service proxies implement this behavior; they take the service, method
and arguments of a request as their input and return the result. The
proxy should be transparent to the service and service provider
components. By chaining proxies, complex routing schemes can be built or
analysis performed on the results returned. Some similarity can be drawn
with middle-ware in the Web Services Gateway Interface (WSGI)
specification. Communication between proxy and service provider is
served by the transport. This abstraction provides an asynchronous
interface to underlying technologies â€“ Current implementations include
queue based AMQP, ontop of RabbitMQ, and Ã˜MQ and more naÃ¯ve
communications with standard UDP and TCP sockets. Most transports define
both client and server parts of the system â€“ however some,
particularly HTTP-based transports, are designed to accept requests
directly from external clients. Requests from external applications
commonly use XMLRPC, JSONRPC or straight JSON. Transport implementations
can be interchanged without impacting other components of Amanda or
service developers.&lt;/p&gt;
&lt;p&gt;In production, a request gateway implemented as a WSGI application
fronts the HTTP protocols. Using the standard web components NGINX and
Î¼WSGI we can build a very scalable front end which internally uses the
service provider, proxy, transport pattern to offload the requests to a
backend. The gateway can also provide standard web facilities such as
template rendering (through the Jinja2 library1) for general web
clients. The gateway was a requirement as requests originate from
applications written in many languages including C++, Python, JavaScript
and domain specific languages such as mel. For us it was important that
the client used across all those languages was a proven standard and
lightweight. Most requests are served in near realtime (6ms round trip
times) and are presented to the client in a synchronous way so using a
frontend that supports a large number of HTTP like protocols allowed us
to keep the clients simple and present the platform to an extremely wide
variety of languages. Additionally, through the frontend, we can render
a web page and present that directly if the requests was made from a
browser.&lt;/p&gt;
&lt;p&gt;The final behavior of the platform is defined in configuration. This
allows the platform to be tuned to suit the work that a particular
service is performing (I/O vs CPU bound). It is important to remember
that every single component mentioned above be it the concurrency,
transport, proxies or frontend can be changed, removed, updated without
it impacting the service, the developer or any of the other components
that make up the platform.&lt;/p&gt;
&lt;p&gt;Also important to mention that internally and externally everything is a
queue and presented as a queue. Going from the client to the frontend
there is a queue, from the frontend onto the backend there is a queue
etc. all the way down to a request being read of the transport and
stored inside a queue until a concurrency object is ready to handle the
request with the service provider.&lt;/p&gt;
&lt;p&gt;This is where we think our platform might take a different approach.
Rather than building the platform on top of a single great technology we
didn't want to limit ourselves and be able to use all the other great
technologies out there. There is no perfect solution for all problems
but allowing to fine tune the platform according to different problems.
The setup can now evolve in line with technological advancements and
changes to the industry.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="maintenance-and-monitoring-5-mins"&gt;
&lt;h4&gt;Maintenance and Monitoring (5 mins)&lt;/h4&gt;
&lt;p&gt;We will walk through how we are using the same setup with services,
service providers, proxies and transports to manage clusters around the
globe. Once again for our maintenance and monitoring we made sure
everything is done as a service so that if there is a better tool in the
future we could adopt it.&lt;/p&gt;
&lt;p&gt;Through leveraging the configuration management and remote execute
platform Salt, a new cluster can now be provisioned quickly. Management
is itself provided as a service. Through this system, the current state
is available and configuration changed across all servers globally. This
has reduced routine maintenance tasks from a half day to a five-minute
task, with less chance of human error. Monitoring and introspection are
provided, as a service, to aid in day-to-day support, tuning and to help
support analysis for future development.&lt;/p&gt;
&lt;p&gt;Developers of services can trace requests from when they enter the
system, producing a report of the sequence of methods being called, with
the supplied arguments. For each call the time spent to fulfill each
request is presented. Care was taken to minimize the impact of this on
return result of the request. Due to everything being a queue we can
collect the metrics after the result has been put back onto the
transport and send to the user and thus minimize the impact of this
collection on returning the result of the request This means that there
is no requirement to put the system into a debug mode in order to obtain
execution metrics.&lt;/p&gt;
&lt;p&gt;With logging being a service we can dynamically change the logging
configuration on a per service basis by making a request to the logging
service taking away the need of changing configuration and restarting
the service which often means a problem might have disappeared due to
the reset.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="future-conclusion-1-min"&gt;
&lt;h4&gt;Future/Conclusion (1 min)&lt;/h4&gt;
&lt;p&gt;Whilst developing the new generation of the platform there have been a
number of possible applications that have emerged. The way in which we
are able to scale the system would be suitable to run in a cloud
environment â€“ especially with the improvements to management allowing
new nodes to be provisioned quickly. The ease of writing and integrating
new components would allow integration with infrastructure provided by
third-party cloud vendors. Other areas of interest include a smaller
version of the platform running locally on a userÊ¼s workstation and
services for management of generic processes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="main-technologies-and-libraries-currently-used"&gt;
&lt;h4&gt;Main technologies and libraries currently used:&lt;/h4&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Threading&lt;/li&gt;
&lt;li&gt;Gevent&lt;/li&gt;
&lt;li&gt;Eventlet&lt;/li&gt;
&lt;li&gt;Multiprocessing&lt;/li&gt;
&lt;li&gt;ZeroMQ&lt;/li&gt;
&lt;li&gt;RabbitMQ&lt;/li&gt;
&lt;li&gt;uwsgi&lt;/li&gt;
&lt;li&gt;Flask&lt;/li&gt;
&lt;li&gt;Salt&lt;/li&gt;
&lt;li&gt;nginx&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jozef van Eenbergen</dc:creator><pubDate>Tue, 22 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-22:europython-2014/amanda-a-new-generation-of-distributed-services.html</guid></item><item><title>Brain Waves for Hackers</title><link>https://pyvideo.org/europython-2014/brain-waves-for-hackers.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Using the Neurosky Mindwave headset we can read brain waves via
bluetooth. In this talk I will present ways to interface with this
device and to analyze their data, mostly from the perspective of a
Python hacker, and not so much from the perspective of academic research
or the development of production-ready software.&lt;/p&gt;
&lt;p&gt;I will convey the basic scientific and technical background, keeping in
mind the non-medical audience, and touch on several practical
applications, especially Neurofeedback and its use for personal mental
training and potential therapeutic uses.&lt;/p&gt;
&lt;p&gt;The Audience can expect to walk away with a basic knowledge of EEG
analysis, Neurofeedback and how to start experimenting with these
devices on their own.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A new class of cheap consumer EEG devices allows ordinary hackers and
even high school students a glimpse into the human brain.&lt;/p&gt;
&lt;p&gt;This talk will present how to use the &amp;quot;Neurosky Mindwave&amp;quot; headset with
python software, and lay out the basic scientific and technical
background.&lt;/p&gt;
&lt;p&gt;The Mindwave Mobile is a device that can be easily talked to using
bluetooth, and it talks a binary protocol which is specifically designed
to be useful without much computing power in the receiving device or
advanced knowledge of signal processing. In fact, an Arduino with a few
lines of code is perfectly capable of parsing some of the byte stream
and reacting to the mental state of the user, while fully-featured
python software can do advanced analysis using PyEEG and Pandas.&lt;/p&gt;
&lt;p&gt;The same hardware module and protocol is used in the Nekomimi headset
(mind-controlled cat ears for cosplay) and some Boardgames (MindFlex).&lt;/p&gt;
&lt;p&gt;A python library for interfacing with the headset is presented and will
be demonstrated on stage. Mostly kivy applications will be used.&lt;/p&gt;
&lt;p&gt;Also I will present some data analysis you can perform with pandas and
scipy.&lt;/p&gt;
&lt;p&gt;Neurofeedback is a type of mental exercise where a computer uses the EEG
data to direct the user towards certain mental states. In the easiest
configuration a program would display a bar with the &amp;quot;concentration&amp;quot;
level, and the user would learn how to tilt this bar upwards. In more
complicated setups a game could react favorably towards states like
relaxation or concentration. Using Gamification, Neurofeedback can
provide a more engaging experience for children or adults, than other
techniques with similar goals, like mindfulness meditation, and the more
immediate feedback should enhance the effectiveness of mental training,
though that has not been investigated scientifically yet.&lt;/p&gt;
&lt;p&gt;Neurofeedback has been shown to be effective (albeit not recommended as
sole treatment) in Patients with Attention Deficit Hyperactivity
Disorder (ADHD), Epilepsy and Dementia. Some background about these
conditions and applications of Neurofeedback to them will be given. The
first use of Neurofeedback was done in Cats, during early experiments
with EEG electrodes in the 60ies. Cats where conditioned to exhibit
certain wave patterns, and later, due to a coincidence, the researchers
noticed that the conditioned cats where more resistant to
epilepsy-inducing medications. The effect has since been reproduced in
humans, in cases where medications did not work sufficiently.&lt;/p&gt;
&lt;p&gt;Ample hints on not to treat any of this information as medical advice
will be provided.&lt;/p&gt;
&lt;p&gt;The goal of this talk is to promote Neurofeedback as a useful mental
training and to encourage development of applications around
Neurofeedback and the analysis of EEG data, from the perspective of a
python hacker.&lt;/p&gt;
&lt;p&gt;I gave a similar talk at PyConDe 2013 in Cologne. The new talk will be
in English, show some improvements on the software, and more advanced
demonstrations.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andreas Klostermann</dc:creator><pubDate>Tue, 22 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-22:europython-2014/brain-waves-for-hackers.html</guid></item><item><title>Cutting-edge APIs using hypermedia at BSkyB</title><link>https://pyvideo.org/europython-2014/cutting-edge-apis-using-hypermedia-at-bskyb.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;In this talk I will explain what hypermedia enabled API means, I will
give an example of such an API and I will take you through the
implementation details and the usage of flask, dougrain and HAL in this
context. Also, I will present a brief comparison with an API that is not
hypermedia enabled and take you through the advantages of using the
hypermedia approach.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In the technology community at the moment there is a lot of talk about
hypermedia enabled APIs and Web as an Architecture model.&lt;/p&gt;
&lt;p&gt;More and more applications nowadays try to adopt the loosely coupled and
distributed web like architecture by using hypermedia as an engine of
the application state.&lt;/p&gt;
&lt;p&gt;In Sky we are successfully implementing this approach for some of our
components, and we’ve learnt that the major benefit for us is the
scalability that it offers: as an increasingly expanding business with a
constantly growing product portfolio, scalability of all our systems is
crucial.&lt;/p&gt;
&lt;p&gt;In this talk I will share some of the things we learnt, I will explain
what hypermedia enabled API means, I will give an example of such an API
and I will take you through the implementation details and the usage of
flask, dougrain and HAL in this context.&lt;/p&gt;
&lt;p&gt;Also, I will present a brief comparison with an API that is not
hypermedia enabled and take you through the advantages of using the
hypermedia approach.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Adriana Vasiu</dc:creator><pubDate>Tue, 22 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-22:europython-2014/cutting-edge-apis-using-hypermedia-at-bskyb.html</guid></item><item><title>Designing NRT(NearRealTime) stream processing systems: using python with Storm and Kafka</title><link>https://pyvideo.org/europython-2014/designing-nrtnearrealtime-stream-processing-sys.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;The essence of near-real-time stream processing is to compute huge
volumes of data as it is received. This talk will focus on creating a
pipeline for collecting huge volumes of data using Kafka and processing
for near-real time computations using Storm.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Konark Modi</dc:creator><pubDate>Tue, 22 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-22:europython-2014/designing-nrtnearrealtime-stream-processing-sys.html</guid></item><item><title>Documenting your project with MkDocs.</title><link>https://pyvideo.org/europython-2014/documenting-your-project-with-mkdocs.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;MkDocs is a new tool for creating documentation from Markdown.&lt;/p&gt;
&lt;p&gt;The talk will cover:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;How to write, theme and publish your documentation.&lt;/li&gt;
&lt;li&gt;The background and motivation for MkDocs.&lt;/li&gt;
&lt;li&gt;Choosing between MkDocs or Sphinx.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk will be a practical introduction to MkDocs, a new tool for
creating documentation from Markdown:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The background behind MkDocs and the motivation for creating a new
documentation tool.&lt;/li&gt;
&lt;li&gt;Comparing against Sphinx - what benefits each tool provides.&lt;/li&gt;
&lt;li&gt;Getting starting with MkDocs - how to write, theme and publish your
documentation.&lt;/li&gt;
&lt;li&gt;Under the covers - how MkDocs works, and some asides on a couple of
the neat Python libraries that it uses.&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Tom Christie</dc:creator><pubDate>Tue, 22 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-22:europython-2014/documenting-your-project-with-mkdocs.html</guid></item><item><title>Extending Python, what is the best option for me?</title><link>https://pyvideo.org/europython-2014/extending-python-what-is-the-best-option-for-me.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Python is a great language, but there are occasions where we need access
to low level operations or connect with some database driver written in
C. With the FFI(Foreign function interface) we can connect Python with
other languages like C, C++ and even the new Rust. There are some
alternatives to achieve this goal, Native Extensions, Ctypes and CFFI.
I'll compare this three ways of extending Python.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk we will explore all the alternatives in cpython ecosystem
to load external libraries. In first place we'll study the principles
and how shared libraries work. After that we will look into the
internals of CPython to understand how extensions work and how modules
are loaded. Then we will study the main three alternatives to extend
CPython: Native Extensions, Ctypes and CFFI and how to automate the
process. Furthermore we will take a look to other python implementations
and how we can extend it.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Francisco Fernández Castaño</dc:creator><pubDate>Tue, 22 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-22:europython-2014/extending-python-what-is-the-best-option-for-me.html</guid></item><item><title>Full Stack Python</title><link>https://pyvideo.org/europython-2014/full-stack-python.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;There has been a lot of noise about being a &amp;quot;full stack developer&amp;quot;
recently. What does the full web stack look like for Python and how do
you go about learning each piece?&lt;/p&gt;
&lt;p&gt;This talk will guide you up the layers from the server that handles the
web request through the JavaScript that executes on a user's browser.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk distills information from the open source guide &lt;a class="reference external" href="http://www.fullstackpython.com/"&gt;Full Stack
Python&lt;/a&gt; I wrote into a 30 minute
talk on web stack layers. An approximate timeline for this talk would
be:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;5 min: intro story&lt;/li&gt;
&lt;li&gt;5 min: what the web developers need to know about virtual servers,
web servers, and WSGI servers&lt;/li&gt;
&lt;li&gt;5 min: what do web frameworks provide?&lt;/li&gt;
&lt;li&gt;5 min: what are the most important parts of your web application to
analyze and monitor?&lt;/li&gt;
&lt;li&gt;5 min: static files and execution on the user's browser&lt;/li&gt;
&lt;li&gt;5 min: concluding story and resources to learn more&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is a high level overview intended for developers who are new to
Python web development and need to understand what the web stack layers
are and how they fit together.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Matt Makai</dc:creator><pubDate>Tue, 22 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-22:europython-2014/full-stack-python.html</guid></item><item><title>Gamers do REST</title><link>https://pyvideo.org/europython-2014/gamers-do-rest.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;An overview (sprinkled with implementation details and solutions to
issues we encountered) of how Demonware uses Python and Django to build
RESTful APIs and how we manage to reliably serve millions of gamers all
over the world that play Activision-Blizzard's successful franchises
Call of Duty and Skylanders.&lt;/p&gt;
&lt;p&gt;Topics the presentation will touch: tech stack overview; API design;
configuration handling; middleware usage for logging, metrics and error
handling; authentication/authorization.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;An overview (sprinkled with implementation details and solutions to
issues we encountered) of how Demonware uses Python and Django to build
RESTful APIs and how we manage to reliably serve millions of gamers all
over the world that play Activision-Blizzard’s successful franchises
Call of Duty and Skylanders.&lt;/p&gt;
&lt;p&gt;Topics the presentation will touch:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;tech stack overview&lt;/li&gt;
&lt;li&gt;API design&lt;/li&gt;
&lt;li&gt;configuration handling&lt;/li&gt;
&lt;li&gt;middleware usage for logging, metrics and error handling&lt;/li&gt;
&lt;li&gt;authentication/authorization&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Angel Ramboi</dc:creator><pubDate>Tue, 22 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-22:europython-2014/gamers-do-rest.html</guid></item><item><title>GNU/Linux Hardware Emulation with Python</title><link>https://pyvideo.org/europython-2014/gnulinux-hardware-emulation-with-python.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Do want to test the connection code to a wifi/gsm network, but you
haven't any dongle? Do you want to check your software notification when
the battery is low, but you're testing your application on your desktop?
Do you want to manipulate the data coming from a device, but you've lend
it to someone else? &lt;em&gt;No problem, you can emulate all these with Python!&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;With the kernel &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Inotify"&gt;inotify&lt;/a&gt;
feature, the &lt;a class="reference external" href="https://launchpad.net/python-dbusmock"&gt;D-Bus mocker
library&lt;/a&gt; and the &lt;a class="reference external" href="http://pyudev.readthedocs.org/en/latest/api/pyudev.html#pyudev.Monitor"&gt;udev
monitoring&lt;/a&gt;
we try to detect the different events that occours when you're using a
specific set of connected devices.&lt;/p&gt;
&lt;p&gt;Then we try to mimic these devices investigating also the kernel drivers
if necessary.&lt;/p&gt;
&lt;p&gt;At the end we're ready to connect the simulation routines to our testing
procedure.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Stefano Cotta Ramusino</dc:creator><pubDate>Tue, 22 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-22:europython-2014/gnulinux-hardware-emulation-with-python.html</guid></item><item><title>How to make a full fledged REST API with Django OAuth Toolkit</title><link>https://pyvideo.org/europython-2014/how-to-make-a-full-fledged-rest-api-with-django-o.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;World is going mobile and the need of a backend talking with your apps
is getting more and more important. What if I told you writing REST APIs
in Python is so easy you don't need to be a backend expert? Take
generous tablespoons of Django, mix thoroughly with Django REST
Framework and dust with Django OAuth Toolkit to bake the perfect API in
minutes.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Federico Frenguelli</dc:creator><pubDate>Tue, 22 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-22:europython-2014/how-to-make-a-full-fledged-rest-api-with-django-o.html</guid></item><item><title>Jigna: a seamless Python-JS bridge to create rich HTML UIs for Python apps</title><link>https://pyvideo.org/europython-2014/jigna-a-seamless-python-js-bridge-to-create-rich.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Jigna aims to provide an easy way to create rich user interfaces for
Python applications using web technologies like HTML, CSS and
Javascript, as opposed to widget based toolkits like Qt/wx or native
toolkits. It provides a seamless two-way data binding between the Python
model and the HTML view by creating a Python-JS communication bridge.
This ensures that the view is always live as it can automatically update
itself when the model changes, and update the model when user actions
take place on the UI. The Jigna view can be rendered in an in-process Qt
widget or over the web in a browser.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Prashant Agrawal</dc:creator><pubDate>Tue, 22 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-22:europython-2014/jigna-a-seamless-python-js-bridge-to-create-rich.html</guid></item><item><title>Lightning Talks</title><link>https://pyvideo.org/europython-2014/lightning-talks-5.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;A lightning talk is a short talk, typically only five minutes in
duration, providing an opportunity for participants - particularly
people not featured in the main programme - to deliver a presentation on
a subject of their choosing.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Various speakers</dc:creator><pubDate>Tue, 22 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-22:europython-2014/lightning-talks-5.html</guid><category>lightning talks</category></item><item><title>log everything with logstash and elasticsearch</title><link>https://pyvideo.org/europython-2014/log-everything-with-logstash-and-elasticsearch.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;When your application grows beyond one machine you need a central space
to log, monitor and analyze what is going on. Logstash and elasticsearch
let you store your logs in a structured way. Kibana is a web fronted to
search and aggregate your logs. The talk gives an overview on how to add
centralized, structured logging to a python application running on
multiple servers. It focuses on useful patterns and shows the benefits
from structured logging.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter Hoffmann</dc:creator><pubDate>Tue, 22 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-22:europython-2014/log-everything-with-logstash-and-elasticsearch.html</guid></item><item><title>Marconi - OpenStack Queuing and Notification Service</title><link>https://pyvideo.org/europython-2014/marconi-openstack-queuing-and-notification-serv.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Marconi is a multi-tenant cloud queuing system written in Python as part
of the OpenStack project. Marconi aims to ease the design of distributed
systems and allow for asynchronous work distribution without creating
yet another message broker. This talk is a broad look at Marconi's
design and the technologies used.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Similar to other message bus frameworks, Marconi's main goals are:
performance, availability, durability, fault-tolerance and scalability.
Besides providing support for queuing and notification services through
OpenStack, Marconi aims to ease the design of distributed systems and
allow for asynchronous work distribution without creating yet another
message broker. This talk aims to give the audience a broad look at
Marconi’s architecture, design, technologies used, development process,
and discuss the issues it adresses.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Yeela Kaplan</dc:creator><pubDate>Tue, 22 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-22:europython-2014/marconi-openstack-queuing-and-notification-serv.html</guid></item><item><title>Message-passing concurrency for Python</title><link>https://pyvideo.org/europython-2014/message-passing-concurrency-for-python.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Concurrency and parallelism in Python are always hot topics. This talk
will look the variety of forms of concurrency and parallelism. In
particular this talk will give an overview of various forms of
message-passing concurrency which have become popular in languages like
Scala and Go. A Python library called python-csp which implements
similar ideas in a Pythonic way will be introduced and we will look at
how this style of programming can be used to avoid deadlocks, race
hazards and &amp;quot;callback hell&amp;quot;.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Concurrency and parallelism in Python are always hot topics. Early
Python versions had a threading library to perform concurrency over
operating system threads, Python version 2.6 introduced the
multiprocessing library and Python 3.2 has introduced a futures library
for asynchronous tasks. In addition to the modules in the standard
library a number of packages such as gevent exist on PyPI to implement
concurrency with &amp;quot;green threads&amp;quot;.&lt;/p&gt;
&lt;p&gt;This talk will look the variety of forms of concurrency and parallelism.
When are the different libraries useful and how does their performance
compare? Why do programmers want to &amp;quot;remove the GIL&amp;quot; and why is it so
hard to do? In particular this talk will give an overview of various
forms of message-passing concurrency which have become popular in
languages like Scala and Go. A Python library called python-csp which
implements similar ideas in a Pythonic way will be introduced and we
will look at how this style of programming can be used to avoid
deadlocks, race hazards and &amp;quot;callback hell&amp;quot;.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sarah Mount</dc:creator><pubDate>Tue, 22 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-22:europython-2014/message-passing-concurrency-for-python.html</guid></item><item><title>Mobile Games to the Cloud With Python</title><link>https://pyvideo.org/europython-2014/mobile-games-to-the-cloud-with-python.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;When a mobile game development company decides to switch to a more cloud
based development it is faced with obstacles different from those it's
used to on mobile devices. This talk explains how Python provided us
with most of the infrastructure for this task and how a Python game
backend was built as a result.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;div class="section" id="the-talk"&gt;
&lt;h4&gt;The Talk&lt;/h4&gt;
&lt;p&gt;This talk has two goals. Showing the audience the lessons we learned
during a project which moved a simple mobile game to a server backend is
our first intention. In addition to that we want to describe how such a
system works in a real life example, to show which problems and which
requirements arise in its creation. When the audience leaves the talk
they will know how a real-life mobile game uses Python for powering the
backend servers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-problem"&gt;
&lt;h4&gt;The Problem&lt;/h4&gt;
&lt;p&gt;Most of the game development for mobile devices is focused on running
the game on the device. The game designers and game developers play a
primary role in creating the product. The server backend plays a
supporting role providing a multiplayer or social experience to the
users. Indeed, at Nanobit Ltd., things were also done that way. We had a
small Python infrastructure built around Django which provided a small
portion of multiplayer experience for the players. The majority of
development was still focused on playing the game on the device. That
way of thinking was put to test when we decided to center our future
games around the multiplayer experience. Due to the fact that our
infrastructure at the time was not enough for what we had in mind, we
had to start from scratch. The decision was made to use Python as the
center of our new infrastructure.&lt;/p&gt;
&lt;p&gt;In order to achieve it, a server backend was needed that would allow the
game to be played “in the cloud” with the device only being a terminal
to the player. Most of the game logic would have to be processed in the
cloud which meant that each player required a constant connection to the
backend and with over 100.000 players in our previous games that
presented a challenge. How to build an infrastructure which can support
that? Since every user action had to be sent to the backend how to
process thousands of them quick enough? Those problems were big and were
just the start.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-solution"&gt;
&lt;h4&gt;The Solution&lt;/h4&gt;
&lt;p&gt;The design of the backend lasted for a couple of months and produced a
scalable infrastructure based on “workers” developed in Python, “web
servers” that use Tornado and a custom message queue which connected the
two. The storage part is a combination of Riak and Redis. Since the
backend is scalable new workers and new web servers had to be deployed
easily so an orchestration module was build using Fabric. The
scalability and launching of new workers and web servers was achieved
using Docker for creation and deployment of containers. Each container
presents one module of the system (worker, web server, queue). The end
result can now support all of our future games and only requires the
game logic of each game to be added to the workers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-technologies"&gt;
&lt;h4&gt;The Technologies&lt;/h4&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Python for coding the game logic, web servers. More than 90% of the
system was written in Python.&lt;/li&gt;
&lt;li&gt;Fabric&lt;/li&gt;
&lt;li&gt;SQLAlchemy&lt;/li&gt;
&lt;li&gt;Riak&lt;/li&gt;
&lt;li&gt;Redis&lt;/li&gt;
&lt;li&gt;ZeroMQ&lt;/li&gt;
&lt;li&gt;nginx&lt;/li&gt;
&lt;li&gt;Docker&lt;/li&gt;
&lt;li&gt;Websockets&lt;/li&gt;
&lt;li&gt;AWS&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="the-lessons-learned"&gt;
&lt;h4&gt;The Lessons Learned&lt;/h4&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;How to tune the backend to handle the increasing number of active
players.&lt;/li&gt;
&lt;li&gt;How to tackle the problem of frequent connection dropping and
reachability issues of poor mobile device Internet connection in
Tornado with a little help of Redis.&lt;/li&gt;
&lt;li&gt;How to prevent users from trying to outsmart the system by denying
illegal moves.&lt;/li&gt;
&lt;li&gt;How to enable game profile syncing and live updating.&lt;/li&gt;
&lt;li&gt;Improving the performance of workers by prioritizing data being
stored to databases (Riak, SQL).&lt;/li&gt;
&lt;li&gt;New issues and lessons show up all the time so there will definitely
be more of them by the time of the conference.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="basic-outline"&gt;
&lt;h4&gt;Basic Outline&lt;/h4&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Intro (5 min)&lt;ol class="arabic"&gt;
&lt;li&gt;Who are we?&lt;/li&gt;
&lt;li&gt;How was Python used in our previous games&lt;/li&gt;
&lt;li&gt;Why we decided to change it all&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Requirements (6 min)&lt;ol class="arabic"&gt;
&lt;li&gt;What was the goal of creating the game backend&lt;/li&gt;
&lt;li&gt;Why was Python our first choice&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Python backend (14 min)&lt;ol class="arabic"&gt;
&lt;li&gt;The architecture of the backend&lt;/li&gt;
&lt;li&gt;Which technologies did we use and how were they connected together&lt;/li&gt;
&lt;li&gt;How the backend handles the game logic&lt;/li&gt;
&lt;li&gt;Lessons learned&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Questions &amp;amp; Answers (5 min)&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Darko Ronić</dc:creator><pubDate>Tue, 22 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-22:europython-2014/mobile-games-to-the-cloud-with-python.html</guid></item></channel></rss>