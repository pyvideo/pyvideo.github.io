<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_john-reese.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2018-11-04T00:00:00+00:00</updated><entry><title>Refactoring Code with the Standard Library</title><link href="https://pyvideo.org/north-bay-python-2018/refactoring-code-with-the-standard-library.html" rel="alternate"></link><published>2018-11-04T00:00:00+00:00</published><updated>2018-11-04T00:00:00+00:00</updated><author><name>John Reese</name></author><id>tag:pyvideo.org,2018-11-04:north-bay-python-2018/refactoring-code-with-the-standard-library.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;What if you could refactor your entire code base, safely and
automatically? How much old code could you fix or replace if you didn't
worry about updating every reference by hand? I'll show you how a
concrete syntax tree (CST) can help you do just that using only the
standard Python library.&lt;/p&gt;
</summary></entry><entry><title>Refactoring Code With the Standard Library</title><link href="https://pyvideo.org/pycon-au-2018/refactoring-code-with-the-standard-library.html" rel="alternate"></link><published>2018-08-25T00:00:00+00:00</published><updated>2018-08-25T00:00:00+00:00</updated><author><name>John Reese</name></author><id>tag:pyvideo.org,2018-08-25:pycon-au-2018/refactoring-code-with-the-standard-library.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;What if you could refactor your entire code base, safely and automatically? How much old code could you fix or replace if you didn't need to worry about updating every reference by hand? I'll show you how a concrete syntax tree (CST) can help you do just that using only the standard Python library.&lt;/p&gt;
</summary></entry><entry><title>Thinking Outside the GIL with AsyncIO and Multiprocessing</title><link href="https://pyvideo.org/pycon-us-2018/thinking-outside-the-gil-with-asyncio-and-multiprocessing.html" rel="alternate"></link><published>2018-05-11T00:00:00+00:00</published><updated>2018-05-11T00:00:00+00:00</updated><author><name>John Reese</name></author><id>tag:pyvideo.org,2018-05-11:pycon-us-2018/thinking-outside-the-gil-with-asyncio-and-multiprocessing.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Have you ever written a small, elegant application that couldn't keep up with the growth of your data or user demand? Did your beautiful design end up buried in threads and locks? Did Python's very special Global Interpreter Lock make all of this an exercise in futility?&lt;/p&gt;
&lt;p&gt;This talk is for you! With the combined powers of AsyncIO and multiprocessing, we'll redesign an old multithreaded application limited by the GIL into a modern solution that scales with the demand using only the standard library. No prior AsyncIO or multiprocessing experience required.&lt;/p&gt;
</summary><category term="asyncio"></category><category term="multiprocessing"></category></entry></feed>