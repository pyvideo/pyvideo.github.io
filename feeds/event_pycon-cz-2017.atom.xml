<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/event_pycon-cz-2017.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2017-06-09T00:00:00+00:00</updated><entry><title>A Python and Rust love story</title><link href="https://pyvideo.org/pycon-cz-2017/a-python-and-rust-love-story.html" rel="alternate"></link><published>2017-06-09T00:00:00+00:00</published><updated>2017-06-09T00:00:00+00:00</updated><author><name>Armin Ronacher</name></author><id>tag:pyvideo.org,2017-06-09:pycon-cz-2017/a-python-and-rust-love-story.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Our experiences at Sentry of marrying Rust and Python and why it’s a
great match for many applications. We will go over a quick intro to
Rust, how to translate common concepts from Python to it, and how to
make extension modules in Rust.&lt;/p&gt;
</summary></entry><entry><title>Be(come) a mentor! Help others succeed!</title><link href="https://pyvideo.org/pycon-cz-2017/become-a-mentor-help-others-succeed.html" rel="alternate"></link><published>2017-06-09T00:00:00+00:00</published><updated>2017-06-09T00:00:00+00:00</updated><author><name>Anna Ossowski</name></author><id>tag:pyvideo.org,2017-06-09:pycon-cz-2017/become-a-mentor-help-others-succeed.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;There is always something new to learn in technology. We are always
experts in one and beginners in another field. In order to learn
successfully it’s important to have a mentor but it’s equally
important to learn how to be a good mentor. In my talk we’ll explore
what a mentor is, why we should all be(come) mentors, tips and tricks
of mentorship, and concrete ways you can get involved as a mentor.&lt;/p&gt;
&lt;p&gt;All of us are lifelong learners. Especially in technology there is
always something new to learn so we are always experts in one and
beginners in another field. In order to learn, make progress, and
succeed, it’s really helpful to have a mentor. But it’s equally
important to learn how to be a good mentor to others. All of us
started out as beginners and if it wasn’t for the help of others, who
shared their knowledge with us, lent a hand, and guided us, we
probably wouldn’t be where we are today. Let’s start giving back!
Let’s help others succeed!&lt;/p&gt;
&lt;p&gt;Mentorship can be super fun and rewarding, you will learn a ton by
helping others, and you don't need to be an expert in order to mentor
someone. In my talk we’ll explore what a mentor is and why you should
become a mentor. I’ll also give you mentorship advice and tips and
we’ll learn about the Do’s and Don’ts of mentorship. Finally, I’ll
present some concrete ways you can help as a mentor and which
projects you can get involved in.&lt;/p&gt;
</summary></entry><entry><title>Bringing C performance to Python code</title><link href="https://pyvideo.org/pycon-cz-2017/bringing-c-performance-to-python-code.html" rel="alternate"></link><published>2017-06-09T00:00:00+00:00</published><updated>2017-06-09T00:00:00+00:00</updated><author><name>Jan Škoda</name></author><id>tag:pyvideo.org,2017-06-09:pycon-cz-2017/bringing-c-performance-to-python-code.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;How to make your code run fast without sacrificing Python advantages?
Compiling Python code into C using Cython and Numba JIT compiler.
Making a function 100x faster using a single decorator and more.&lt;/p&gt;
</summary></entry><entry><title>Building a planet friendly web – what we can do as developers</title><link href="https://pyvideo.org/pycon-cz-2017/building-a-planet-friendly-web-what-we-can-do-as-developers.html" rel="alternate"></link><published>2017-06-09T00:00:00+00:00</published><updated>2017-06-09T00:00:00+00:00</updated><author><name>Chris Adams</name></author><id>tag:pyvideo.org,2017-06-09:pycon-cz-2017/building-a-planet-friendly-web-what-we-can-do-as-developers.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;You may have heard the quote “Software is eating the world” to
describe how services like Airbnb, Uber, Slack and Skype are
replacing the likes of hotels, taxis and the office commute. As
software engineers, part of our job is accelerating this shift. And
it’s easy to think that a shift from moving atoms, to moving bits, is
a net win for the planet.&lt;/p&gt;
&lt;p&gt;However, moving all those bits for our sites around takes servers.
And these servers run on electricity. And most of this electricity
powering our servers comes from burning fossil fuels. And burning
these is a key driver of climate change – the kind of disruption we
don’t want.&lt;/p&gt;
&lt;p&gt;So, what can we do? We’re not going to stop sharing cat pics anytime
soon, but we can change how we build online services to make them
greener, load faster, and convert better, by borrowing existing
techniques from web performance optimisation, containerisation, and
serverless, as well as good old common sense.&lt;/p&gt;
&lt;p&gt;This talk will show how we can use the tools in the python
developer's toolbox today for more planet-friendly, sustainable web
development, and how this is also good engineering practice.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;Chris Adams started using Django in 2008. Over the past ten years
he's worked in startups and agencies, as a sysadmin, product manager,
developer, and user researcher, and UX consultant, but keeps coming
back to Python and Django.&lt;/p&gt;
</summary></entry><entry><title>Building an algorithmic trading platform in Python 3</title><link href="https://pyvideo.org/pycon-cz-2017/building-an-algorithmic-trading-platform-in-python-3.html" rel="alternate"></link><published>2017-06-09T00:00:00+00:00</published><updated>2017-06-09T00:00:00+00:00</updated><author><name>Víťa Šmíd</name></author><id>tag:pyvideo.org,2017-06-09:pycon-cz-2017/building-an-algorithmic-trading-platform-in-python-3.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;For the past three years, my colleagues and I have been developing
and operating a Python system that trades in the stock market.&lt;/p&gt;
&lt;p&gt;I am going to tell you a story of how we developed and scaled this
platform. We made some rather good decisions, as well as many
mistakes that everyone can learn from. Some of our code is open
source and you can use it in your own projects.&lt;/p&gt;
&lt;p&gt;We started with a small event-driven application built with asyncio.
As our trading expanded, our application has grown into a multi-agent
monolith: hundreds of modules operating in a single asyncio-managed
process. Today, we are moving to a more distributed approach. Some
parts of the platform run in isolated processes and communicate
asynchronously.&lt;/p&gt;
&lt;p&gt;I am going to show you a few challenges we have faced on this
journey, and what they taught us about Python, asyncio, distributed
systems, debugging, and making painful compromises. You don't need to
know anything about trading. In fact, it turns out that these are
mostly quite fundamental computer science problems that pop up over
and over again, regardless of what you're building…&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;Víťa travels the world, writes software and ponders on philosophy.&lt;/p&gt;
&lt;p&gt;He likes to solve hard problems, preferably involving mathematics,
finance and lots of data. Python has been his language of choice for
many years and lately he's very much into latest developments like
asyncio and type hints.&lt;/p&gt;
</summary></entry><entry><title>Closing ceremony (song)</title><link href="https://pyvideo.org/pycon-cz-2017/closing-ceremony-song.html" rel="alternate"></link><published>2017-06-09T00:00:00+00:00</published><updated>2017-06-09T00:00:00+00:00</updated><author><name>Various singers</name></author><id>tag:pyvideo.org,2017-06-09:pycon-cz-2017/closing-ceremony-song.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyCon CZ 2017 Prague - Closing ceremony&lt;/p&gt;
</summary></entry><entry><title>Code cleaners diary: worry less and create more</title><link href="https://pyvideo.org/pycon-cz-2017/code-cleaners-diary-worry-less-and-create-more.html" rel="alternate"></link><published>2017-06-09T00:00:00+00:00</published><updated>2017-06-09T00:00:00+00:00</updated><author><name>Sebastian Hillig</name></author><id>tag:pyvideo.org,2017-06-09:pycon-cz-2017/code-cleaners-diary-worry-less-and-create-more.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A tour de France through tools that allow you to care more about
building than obsessing over formatting and other easily correctable
issues in your and others code. Probably some analysis of how often
styling/pep8 is mentioned in Python PRs and code reviews...&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;Sebastian Hillig is a software engineer at Artory, a New York/Berlin
company that is working to bring more transparency to the art market.&lt;/p&gt;
&lt;p&gt;In true startup fashion, he wears many hats, including the ones of
product owner, engineering team lead and smoothie happiness supplier.
With more than a decade of professional experience working on
software, Python has been a stable companion while product and
accompanying languages have been in a constant state of flux: VoIP
monitoring to database prototypes, C++ to Smalltalk, custom websites
to enterprise applications, and compiler benchmarks to user testing.&lt;/p&gt;
&lt;p&gt;Good developer experience is one of his pet penchants, improving
anything from environment to tooling. In his free time, Sebastian
practices karate, smashes volleyballs, toys around with new
technologies, and reads about software engineering best practices and
martial arts.&lt;/p&gt;
</summary></entry><entry><title>Discovering descriptors</title><link href="https://pyvideo.org/pycon-cz-2017/discovering-descriptors.html" rel="alternate"></link><published>2017-06-09T00:00:00+00:00</published><updated>2017-06-09T00:00:00+00:00</updated><author><name>Mariano Anaya</name></author><id>tag:pyvideo.org,2017-06-09:pycon-cz-2017/discovering-descriptors.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Descriptors are often not that common to be found, compared to other
idioms (decorators, context managers, etc.). However, they provide a
powerful tool for improving our code, by enabling us to encapsulate
logic into different objects transparently.&lt;/p&gt;
&lt;p&gt;The talk will cover the descriptor protocol, different types of
descriptors, and some examples where descriptors shine, yielding a
very elegant and efficient solution.&lt;/p&gt;
</summary></entry><entry><title>Django's watching my back(end)</title><link href="https://pyvideo.org/pycon-cz-2017/djangos-watching-my-backend.html" rel="alternate"></link><published>2017-06-09T00:00:00+00:00</published><updated>2017-06-09T00:00:00+00:00</updated><author><name>Carlos de las Heras</name></author><id>tag:pyvideo.org,2017-06-09:pycon-cz-2017/djangos-watching-my-backend.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;With the advent of new amazing front-end frameworks and the
ever-increasing power of browsers and mobile processors, webapp users
expect a dynamic, seamless user experience where page refresh is out
of the question. We Pythonistas love Django for web development, but
server-side template rendering is not cool anymore. What do? Use
Django as a pure back-end.&lt;/p&gt;
&lt;p&gt;In this talk, technologies, strategies and third-party packages will
be discussed, which will enable you to hit the ground running when
tackling your first decoupled project or using Django in the context
of a hybrid architecture. Furthermore, we will discuss how web
development has changed through the years, aiming to find the mindset
that will keep Django (and by extension Python as a web development
language) relevant in the future.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;Carlos is a Pythonista and Django developer from Madrid, Spain.
Though he wouldn't consider programming his vocational calling
(probably music is), he loves open source and free software ever ince
he has discovered it. That led him to be an occasional teacher and
mentor, introducing rogramming and the hacker mindset to young
people.&lt;/p&gt;
&lt;p&gt;He believes, that real technological literacy, as opposed to
technological consumerism, is integral to building a better society:
developers are in a privileged position and openness, transparency
and ease of access are fundamental. Communities play a vital role
here: programming can be a cold, lonely and dehumanized enterprise,
but in communities we can find warmth and meaning.&lt;/p&gt;
&lt;p&gt;This year he spoke at DjangoCon Europe, where he delivered a speech
in the hope of being useful and giving a glimpse of his own
experiences with Django. Currently he works for a small data analysis
and intelligence start-up as the lead developer, which is quite a
challenge, but a learning experience with every step.&lt;/p&gt;
</summary></entry><entry><title>Let's talk about GIL!</title><link href="https://pyvideo.org/pycon-cz-2017/lets-talk-about-gil.html" rel="alternate"></link><published>2017-06-09T00:00:00+00:00</published><updated>2017-06-09T00:00:00+00:00</updated><author><name>Amit Kumar</name></author><id>tag:pyvideo.org,2017-06-09:pycon-cz-2017/lets-talk-about-gil.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;I will be talking about Global-Interpreter-Lock (GIL) in Python. It's
a mutex that prevents multiple native threads from running in
parallel. In essence, this says that a python program cannot do more
than one thing at once via threading. There is a lot of misconception
in a lot of Python Programmers regarding Global Interpreter Lock.
Most of them think its the worst part of Python.&lt;/p&gt;
&lt;p&gt;I will try to demonstrate how it actually works and how we can
leverage multiple CPU cores for multithreading for I/O and CPU Bound
task using C-Extensions. I will also show some comparisons with
different implementations of Python and the presence or absence of
GIL in those, to answer questions like, why we can't just remove it
from CPython and solve all our problems or why Jython performs better
in Multithreading for CPU Bound task.&lt;/p&gt;
</summary></entry><entry><title>Lightning talks Friday</title><link href="https://pyvideo.org/pycon-cz-2017/lightning-talks-friday.html" rel="alternate"></link><published>2017-06-09T00:00:00+00:00</published><updated>2017-06-09T00:00:00+00:00</updated><author><name>Míla Votradovec</name></author><id>tag:pyvideo.org,2017-06-09:pycon-cz-2017/lightning-talks-friday.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Lightning talks Friday&lt;/p&gt;
</summary><category term="lightning talks"></category></entry><entry><title>Replacing tox with Docker</title><link href="https://pyvideo.org/pycon-cz-2017/replacing-tox-with-docker.html" rel="alternate"></link><published>2017-06-09T00:00:00+00:00</published><updated>2017-06-09T00:00:00+00:00</updated><author><name>Nick Lang</name></author><id>tag:pyvideo.org,2017-06-09:pycon-cz-2017/replacing-tox-with-docker.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Using tox is great to ensure your code works with different pythons.
But with Docker you can customize the environment that your
application runs on and ensure that it works across a variety of
environments while running your tests in parallel.&lt;/p&gt;
</summary></entry><entry><title>Science with the world’s biggest lasers</title><link href="https://pyvideo.org/pycon-cz-2017/science-with-the-worlds-biggest-lasers.html" rel="alternate"></link><published>2017-06-09T00:00:00+00:00</published><updated>2017-06-09T00:00:00+00:00</updated><author><name>Kateřina Falk</name></author><id>tag:pyvideo.org,2017-06-09:pycon-cz-2017/science-with-the-worlds-biggest-lasers.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Laser is possibly the most important invention of the 20th century
with applications spanning across all human activities from medicine,
telecommunications, information technology or entertainment to
manufacturing, defense, energy production or fundamental science
research in astrophysics or cosmology.&lt;/p&gt;
&lt;p&gt;This talk will give you a brief overview of how lasers work, their
applications and future developments. It will also provide a tour of
the world’s biggest laser facilities and the new laser center ELI
Beamlines currently constructed on the outskirts of Prague that will
soon harbor the most powerful laser beam in the world. A brief
outline of the most recent research in particle acceleration and
ultra-fast x-ray and particle diagnostics by Katerina Falk will also
be given.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;Kateřina works as a scientist specializing in plasma physics with a
special focus dense plasmas relevant to fusion technology and
laboratory astrophysics. She earned her degrees at Imperial College
London and the University of Oxford, before moving to New Mexico,
USA, where she joined a research group at Los Alamos National
Laboratory. She has worked on the biggest laser systems on the planet
before joining the scientific team at ELI Beamlines, Czech Academy of
Sciences.&lt;/p&gt;
</summary></entry><entry><title>Scientific hooliganism: what we can learn from the first hack in history</title><link href="https://pyvideo.org/pycon-cz-2017/scientific-hooliganism-what-we-can-learn-from-the-first-hack-in-history.html" rel="alternate"></link><published>2017-06-09T00:00:00+00:00</published><updated>2017-06-09T00:00:00+00:00</updated><author><name>Lilly Ryan</name></author><id>tag:pyvideo.org,2017-06-09:pycon-cz-2017/scientific-hooliganism-what-we-can-learn-from-the-first-hack-in-history.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In 1903, Guglielmo Marconi prepared to unveil his world-first,
long-distance wireless communication technology to the Royal
Institution in London. He was looking forward to roaring success,
scientific acclaim, and a string of wealthy new customers - but he
didn’t count upon falling victim to the first hack in history.&lt;/p&gt;
&lt;p&gt;This is a tale of business secrets, flame wars, stage magic, and
magnificent sideburns, direct from the records of Edwardian England.&lt;/p&gt;
&lt;p&gt;The talk highlights several of the lessons that the FLOSS and
information security communities can still learn from the fateful
events of 1903. Marconi’s tale is a master class in the necessity of
open source technology, as well as being a delightful introduction to
the art of vulnerability reporting.&lt;/p&gt;
</summary></entry><entry><title>uWSGI sorcery</title><link href="https://pyvideo.org/pycon-cz-2017/uwsgi-sorcery.html" rel="alternate"></link><published>2017-06-09T00:00:00+00:00</published><updated>2017-06-09T00:00:00+00:00</updated><author><name>Lukáš Kokoška</name></author><id>tag:pyvideo.org,2017-06-09:pycon-cz-2017/uwsgi-sorcery.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;uWSGI is an application server used for anything from web pages to
REST APIs. We'll start with a little introduction of this server and
continue with more complicated possibilities to solve problems uWSGI
was designed to solve. I'll show you how to built a robust app,
capable of serving thousands of requests per second.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;Programming in Python in more than a decade. Lukáš used to work on
selling digital content, later spent 6 years in Seznam.cz working on
mobile web and related things.&lt;/p&gt;
&lt;p&gt;He now works as a Head of R&amp;amp;D of a small company solving problems of
distributing digital content, telco messaging, eCommerce
(radioteka.cz, palmknihy.cz, galerie.vodafone.cz), and mostly an
advertisement management system for a HbbTV layer in TV broadcast…
all of it designed and implemented in Python.&lt;/p&gt;
</summary></entry><entry><title>What lies ahead? Python’s future strengths and challenges</title><link href="https://pyvideo.org/pycon-cz-2017/what-lies-ahead-pythons-future-strengths-and-challenges.html" rel="alternate"></link><published>2017-06-09T00:00:00+00:00</published><updated>2017-06-09T00:00:00+00:00</updated><author><name>Naomi Ceder</name></author><id>tag:pyvideo.org,2017-06-09:pycon-cz-2017/what-lies-ahead-pythons-future-strengths-and-challenges.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;What does the future hold for Python and for our community? Both have
grown in ways we couldn’t have imagined years ago, but what lies
ahead? We will begin with a look at the history and growth Python and
our community and where we are today. Then we’ll consider some
possible trends and coming challenges as well as the strengths we
have to deal with them.&lt;/p&gt;
</summary></entry><entry><title>Your first open source PR</title><link href="https://pyvideo.org/pycon-cz-2017/your-first-open-source-pr.html" rel="alternate"></link><published>2017-06-09T00:00:00+00:00</published><updated>2017-06-09T00:00:00+00:00</updated><author><name>Eliška Čejpová</name></author><id>tag:pyvideo.org,2017-06-09:pycon-cz-2017/your-first-open-source-pr.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The world of open source code can be a pretty big and terrifying
ocean. It's full of small and nice projects, bigger and nicer ones
and it's also full of uncontrolled collaboration in big repositories.
If you go fishing for the first time, you don't try to catch a shark,
but try to have some luck with trouts in the neighbourhood lake. And
we see how to go for your first fish today.&lt;/p&gt;
&lt;p&gt;Open source projects are great opportunity for getting a lot of
experience from community and also how to give something back. But if
you are a new to all of this, you might find it overwhelming. We will
get through some main tips for contributing in beginners-friendly
projects and also starting one of your own. Public contribution will
never feel like a walk of shame!&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;Eliška is a web developer who is just trying to make the world a
better place. She's one of the Google Developer Group Prague
organisers, dedicated RailsGirls coach (DjangoGirls FTW of course!)
and Women Techmakers CZ Lead. Addicted to good conferences and smart
people.&lt;/p&gt;
&lt;p&gt;Eliška currently works at MSD IT on shiny front-end development. Her
networking skills are level 9000 and half. Ask her about women in
tech, Ruby or shoes.&lt;/p&gt;
</summary></entry><entry><title>2nd hardest thing in computer science</title><link href="https://pyvideo.org/pycon-cz-2017/2nd-hardest-thing-in-computer-science.html" rel="alternate"></link><published>2017-06-08T00:00:00+00:00</published><updated>2017-06-08T00:00:00+00:00</updated><author><name>Paweł Lewtak</name></author><id>tag:pyvideo.org,2017-06-08:pycon-cz-2017/2nd-hardest-thing-in-computer-science.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Have you heard about the two hardest things in computer science? It's
cache invalidation and naming things. I want to focus on the second
one.&lt;/p&gt;
&lt;p&gt;Let's see common examples of both good and bad naming. What's the
common part of each of them? What's makes names good? Can we settle
on good enough or should we aim for perfect names? I'll show some of
best and bad practices so you'll be able to recognize both of them
when you make code review for your peers. Naming is one of two
hardest things in CS, so I don't claim to be right about everything
but I'm open to discussion and happy to learn from you as well.&lt;/p&gt;
</summary></entry><entry><title>Clean code in Python</title><link href="https://pyvideo.org/pycon-cz-2017/clean-code-in-python.html" rel="alternate"></link><published>2017-06-08T00:00:00+00:00</published><updated>2017-06-08T00:00:00+00:00</updated><author><name>Mariano Anaya</name></author><id>tag:pyvideo.org,2017-06-08:pycon-cz-2017/clean-code-in-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Introduction to the clean code principles tailored for Python
projects. The goal is to achieve better code quality and a more
maintainable code base. Python has a nature of being clear, and easy
to follow, so let's take advantage of it in our own code, in order to
enforce the principle &amp;quot;readability counts&amp;quot; by writing pythonic code.&lt;/p&gt;
&lt;p&gt;This talk introduces general concepts of code quality for Python
developers, analyzing technical debt, with examples on how to achieve
a more legible, maintainable and clean code base, by refactoring,
writing unit tests and having good coding guidelines for the project.
If you are giving your first steps with Python, you will gain insight
on best practices for writing good software from the start. If you
are a experienced developer, the ideas should work as food for
thought, helping with recommendations for code reviews, best
practices, etc.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;Mariano is a software engineer and technical leader, keen on open
source, state-of-the-art technology, focused on Python development,
DevOps and experienced in back-end projects.&lt;/p&gt;
&lt;p&gt;Mariano's main areas of interests besides Python are Linux, software
architecture, distributed systems and speaking at conferences.&lt;/p&gt;
</summary></entry><entry><title>How we started teaching Python</title><link href="https://pyvideo.org/pycon-cz-2017/how-we-started-teaching-python.html" rel="alternate"></link><published>2017-06-08T00:00:00+00:00</published><updated>2017-06-08T00:00:00+00:00</updated><author><name>Petr Viktorin</name></author><id>tag:pyvideo.org,2017-06-08:pycon-cz-2017/how-we-started-teaching-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Helping people feels great. As a volunteer firefighter, Lumir can
tell you all about that feeling. But there are also other ways to
help others, and some don't involve life-or-death situations. What
about changing a person's life by teaching them how to program?&lt;/p&gt;
&lt;p&gt;Teaching doesn't just give you a great feeling. It can also help you
make new friends, improve your presentation skills, and even make you
a better programmer.&lt;/p&gt;
&lt;p&gt;Join us for two stories of how we started teaching Python, what it
means for us, what it can mean for you – and how we're making it
easier for you to join us.&lt;/p&gt;
</summary></entry><entry><title>Introduction to data analytics with Pandas</title><link href="https://pyvideo.org/pycon-cz-2017/introduction-to-data-analytics-with-pandas.html" rel="alternate"></link><published>2017-06-08T00:00:00+00:00</published><updated>2017-06-08T00:00:00+00:00</updated><author><name>Alexander Hendorf</name></author><id>tag:pyvideo.org,2017-06-08:pycon-cz-2017/introduction-to-data-analytics-with-pandas.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Pandas is the Swiss-Multipurpose Knife for Data Analysis in Python.
With Pandas dealing with data-analysis is easy and simple but there
are some things you need to get your head around first as Data-Frames
and Data-Series.&lt;/p&gt;
&lt;p&gt;The talk with provide an introduction to Pandas for beginners and
cover reading and writing data across multiple formats (CSV, Excel,
JSON, SQL, HTML,…) statistical data analysis and aggregation. work
with built-in data visualisation inner-mechanics of Pandas:
Data-Frames, Data-Series &amp;amp; Numpy. how to work effectively with Pandas&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;Alexander's professional carrer was always about digitalisation:
starting from vinyl records in the nineties to to advanced data
analytics nowadays.&lt;/p&gt;
&lt;p&gt;He's program chair of Europe's main Python conference EuroPython, one
of the 25 mongoDB masters and a regular contributor to the tech
community. He has spoken at many international conferences in Silicon
Valley, New York, London, Florence or Kiew.&lt;/p&gt;
&lt;p&gt;He's working at Königsweg a consultancy for start-ups and the
industry. Königsweg enhances your entrepreneurial impact through the
development and implementation of high-performing transformation
strategies across all business divisions.&lt;/p&gt;
</summary></entry><entry><title>Lightning talks Thursday</title><link href="https://pyvideo.org/pycon-cz-2017/lightning-talks-thursday.html" rel="alternate"></link><published>2017-06-08T00:00:00+00:00</published><updated>2017-06-08T00:00:00+00:00</updated><author><name>Viktor Stískala</name></author><id>tag:pyvideo.org,2017-06-08:pycon-cz-2017/lightning-talks-thursday.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Lightning talks Thursday&lt;/p&gt;
</summary><category term="lightning talks"></category></entry><entry><title>MicroPython on the water</title><link href="https://pyvideo.org/pycon-cz-2017/micropython-on-the-water.html" rel="alternate"></link><published>2017-06-08T00:00:00+00:00</published><updated>2017-06-08T00:00:00+00:00</updated><author><name>Jan Čapek</name></author><id>tag:pyvideo.org,2017-06-08:pycon-cz-2017/micropython-on-the-water.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;'MicroPython on the water' has been created from pure interest and
passion for MicroPython – a Python 3.5 implementation for
embedded/bare metal systems. MicroPython is a wonderful project,
however, it deserves some love to isolate its core and use it within
a realtime environment. The talk shows a potential approach how to
run MicroPython as a task within FreeRTOS. The actual use case is a
2-cycle combustion engine management software for an RC model boat.
The system takes care of sampling exhaust gas temperature, engine rpm
and other useful telemetry data. MicroPython provides a very
comfortable environment for implementing the
inconvenient-to-write-in-C-business logic like storing telemetry data
on an SD card, processing remote commands from the pilot and changing
parameters of the engine management system accordingly.&lt;/p&gt;
&lt;p&gt;The talk also shows how MicroPython can be plugged into a Kconfig
based configuration management tool that is known from Linux kernel.
The software ecosystem builds micropython as one of its components
among HAL drivers, sensor software libraries, and last but not least
the RTOS&lt;/p&gt;
</summary></entry><entry><title>Poor person's parallel processing</title><link href="https://pyvideo.org/pycon-cz-2017/poor-persons-parallel-processing.html" rel="alternate"></link><published>2017-06-08T00:00:00+00:00</published><updated>2017-06-08T00:00:00+00:00</updated><author><name>Jirka Vejražka</name></author><id>tag:pyvideo.org,2017-06-08:pycon-cz-2017/poor-persons-parallel-processing.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A relatively simple example of using Python to elegantly handle
resource intensive tasks (e.g. password cracking, mass DNS
resolution, large port scans) in a distributed way using multiple
physical or virtual hosts.&lt;/p&gt;
</summary></entry><entry><title>Python alternatives to R/Shiny</title><link href="https://pyvideo.org/pycon-cz-2017/python-alternatives-to-rshiny.html" rel="alternate"></link><published>2017-06-08T00:00:00+00:00</published><updated>2017-06-08T00:00:00+00:00</updated><author><name>Karla Fejfarová</name></author><id>tag:pyvideo.org,2017-06-08:pycon-cz-2017/python-alternatives-to-rshiny.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Shiny is a web application framework for R that makes it easy to turn
analyses into interactive applications. When a user changes input
parameters using sliders, drop-down menus and text fields, the
changes are propagated through a reactivity graph into outputs like
plots, tables and summaries.&lt;/p&gt;
&lt;p&gt;While Python is generally more powerful and easier to use for a web
development than R, it lack a comprehensive Shiny-like framework.
Current tools are either too complex (Flask, Tornado) or too trivial
and lacking Shiny-like graph interactivity (Bokeh, Dash, Spyre,
Bowtie).&lt;/p&gt;
&lt;p&gt;We will demonstrate those tools on a web app that for a given face
find look-alike actors / actresses and scientists. Then we will show
how to implement Shiny-like reactivity in our Python module glossy.&lt;/p&gt;
</summary></entry><entry><title>Python for LHC computing infrastructure monitoring</title><link href="https://pyvideo.org/pycon-cz-2017/python-for-lhc-computing-infrastructure-monitoring.html" rel="alternate"></link><published>2017-06-08T00:00:00+00:00</published><updated>2017-06-08T00:00:00+00:00</updated><author><name>Jarka Schovancová</name></author><id>tag:pyvideo.org,2017-06-08:pycon-cz-2017/python-for-lhc-computing-infrastructure-monitoring.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Have you ever wondered how Python helps to test the world-wide
distributed computing infrastructure used to analyze data from the
Large Hadron Collider to study composition of matter on a sub-atomic
scale? In this contribution we will discuss recent developments of
the HammerCloud testing service, in particular new HC extension for
data centre commissioning, application of machine learning to anomaly
detection in order to decrease downtime of the resources, and
migration to Django 1.11 LTS. Take part!&lt;/p&gt;
</summary></entry><entry><title>Python for physicists</title><link href="https://pyvideo.org/pycon-cz-2017/python-for-physicists.html" rel="alternate"></link><published>2017-06-08T00:00:00+00:00</published><updated>2017-06-08T00:00:00+00:00</updated><author><name>Petr Zikán</name></author><id>tag:pyvideo.org,2017-06-08:pycon-cz-2017/python-for-physicists.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A new subject for spring semester 2017 was prepared at Masaryk
University: Python for physicists. The goal of the subject was not
easy at all. Effective scientific data processing using Python for
anyone without any prior knowledge of the language.&lt;/p&gt;
&lt;p&gt;Fundamentals of scientific Python (numpy, scipy, pandas) and graphics
(matplotlib) introduced using simple real-word examples such as: line
regression, bifurcation method, particle tracing in electromagnetic
fields, fourier analysis of plasma voltage response, linear algebra
using numpy and introduction to machine learning. All accompanied
with introduction of concepts such as: basic data structures, reading
data from file, introduction to functions, modules and classes.&lt;/p&gt;
&lt;p&gt;The subject was prepared as a collective work of 8 people. Not
everything went exactly as was planned. Do you want to hear lessons
we all (students and teachers) have learnt?&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;Petr Zikán is a PhD student of Plasma physics at Masaryk University
in Brno.&lt;/p&gt;
&lt;p&gt;Among his main interests are numerical modeling of various physical
systems, data processing and data mining.&lt;/p&gt;
&lt;p&gt;He works for Gauss Algorithmic as a data analyst and he is also a
co-founder of PlasmaSolve company, where his main expertise lies in
the field of particle plasma modelling.&lt;/p&gt;
</summary></entry><entry><title>REST service load testing with Python 3 asyncio</title><link href="https://pyvideo.org/pycon-cz-2017/rest-service-load-testing-with-python-3-asyncio.html" rel="alternate"></link><published>2017-06-08T00:00:00+00:00</published><updated>2017-06-08T00:00:00+00:00</updated><author><name>Brad Howes</name></author><id>tag:pyvideo.org,2017-06-08:pycon-cz-2017/rest-service-load-testing-with-python-3-asyncio.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;For a REST service we are deploying for a customer, we wished to know
how well it would perform under various load scenarios. Since we
already had a Python driver that understood the REST service, it was
only natural to attempt the load testing in Python as well. I will
discuss the harness we used to generate load, and how and why we
modeled load as a Poisson process.&lt;/p&gt;
</summary></entry><entry><title>Should I mock or should I not?</title><link href="https://pyvideo.org/pycon-cz-2017/should-i-mock-or-should-i-not.html" rel="alternate"></link><published>2017-06-08T00:00:00+00:00</published><updated>2017-06-08T00:00:00+00:00</updated><author><name>Miro Hrončok</name></author><id>tag:pyvideo.org,2017-06-08:pycon-cz-2017/should-i-mock-or-should-i-not.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Mocking. Excellent thing. It allows you to replace parts of your
system under test with mock objects and make assertions about how
they have been used. That makes your life easier when writing tests.
Until it makes your live miserable. Which practices with mocking are
considered good, which are considered bad and what shall you never do
or you will die a horrible death? How to avoid mocking? And should
you try to avoid it at all cost? All you wanted to ask about the pros
and cons of mocking. Demos!&lt;/p&gt;
</summary></entry><entry><title>Splinter: Python web application testing framework</title><link href="https://pyvideo.org/pycon-cz-2017/splinter-python-web-application-testing-framework.html" rel="alternate"></link><published>2017-06-08T00:00:00+00:00</published><updated>2017-06-08T00:00:00+00:00</updated><author><name>Evgeny Shmarnev</name></author><id>tag:pyvideo.org,2017-06-08:pycon-cz-2017/splinter-python-web-application-testing-framework.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;All you probably know about Selenium (portable software testing
framework for web applications), but what if I told you that you can
test your web applications much faster and easier? I will show what
Splinter is, why you should use it and demonstrate it's features.&lt;/p&gt;
</summary></entry><entry><title>Visual storytelling – why we love it?</title><link href="https://pyvideo.org/pycon-cz-2017/visual-storytelling-why-we-love-it.html" rel="alternate"></link><published>2017-06-08T00:00:00+00:00</published><updated>2017-06-08T00:00:00+00:00</updated><author><name>Sandra Becker</name></author><id>tag:pyvideo.org,2017-06-08:pycon-cz-2017/visual-storytelling-why-we-love-it.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Data, data, data and even more data. How can we handle all this data,
of course by analysing them with Python :) But neither Python nor any
other program, software etc. can tell us the story, which is hidden
in the data. The story is created by a human interaction with the
data. In this process data visualisation is our friend as it helps us
to discover patterns, outliers and everything we need to create the
data story. At the same time data visualisation is a language we all
understand and enjoy using, therefore it is the logical bridge
between the data and the story. In this talk I want to show you why
we love visual storytelling and inspire your own imagination by
explaining to you how one of the best visual data stories have been
created&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;Sandra’s biggest passion is and always was analysing and visualising
data in order to discover the world.&lt;/p&gt;
&lt;p&gt;Within the last 10 years she had the pleasure to design statistical
models and create analytical solutions in various interesting
projects while working in market research institutes, brand, media
and advertisement agencies in Germany, UK and Spain.&lt;/p&gt;
&lt;p&gt;Sara is German but she would consider heself already as half Spanish
as she've been living in her favourite city of Madrid for nearly
three years now. In her last position she'd led the data
visualisation training program for Telefonica Spain and LATAM by
helping them to understand, use and communicate their data in an
efficient, attractive and dynamic way.&lt;/p&gt;
&lt;p&gt;Now as a profesor and teacher for data visualisation she has the
possibility to focus on new ways to explore and represent data,
especially using open source software like D3.js, R shiny &amp;amp; ggplot2,
Python and CARTO and with a passion for the visual storytelling. Her
final objective is to transmit high quality knowledge combined with
enjoyment.&lt;/p&gt;
</summary></entry><entry><title>When bugs bite – why neglecting your edge cases can kill</title><link href="https://pyvideo.org/pycon-cz-2017/when-bugs-bite-why-neglecting-your-edge-cases-can-kill.html" rel="alternate"></link><published>2017-06-08T00:00:00+00:00</published><updated>2017-06-08T00:00:00+00:00</updated><author><name>Lilly Ryan</name></author><id>tag:pyvideo.org,2017-06-08:pycon-cz-2017/when-bugs-bite-why-neglecting-your-edge-cases-can-kill.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Two people died because of a Unicode support error. Another died
because of a camera’s inability to distinguish colours from one
another, and yet another died because of bad GPS data. Many thousands
more deaths could have been prevented by a single variable, if the
developers had thought to include it.&lt;/p&gt;
&lt;p&gt;As software developers, our skills and ideas are increasingly crucial
for keeping the world running. We don’t have time to test for, find,
and fix all of the bugs. Most bugs are annoying, some bugs allow for
sneaky behaviour, but the most innocuous of edge cases can sometimes
lead to an actual loss of life.&lt;/p&gt;
&lt;p&gt;No software ever holds up to contact with reality, but in this talk,
Lilly Ryan shows you some of the more extreme consequences of tech
debt, and offers guidelines on how your team can more easily identify
assumptions and eliminate edge case behaviour when developing
software. That boring task hiding in your backlog might just save a
life.&lt;/p&gt;
</summary></entry><entry><title>wolfcrypt: wrapping secrets with Python</title><link href="https://pyvideo.org/pycon-cz-2017/wolfcrypt-wrapping-secrets-with-python.html" rel="alternate"></link><published>2017-06-08T00:00:00+00:00</published><updated>2017-06-08T00:00:00+00:00</updated><author><name>Moisés Guimarães de Medeiros</name></author><id>tag:pyvideo.org,2017-06-08:pycon-cz-2017/wolfcrypt-wrapping-secrets-with-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The ancient art of keeping secrets safe is nowadays one of the
pillars of the internet. e-commerce, online banking, video
conferences and a lot of other things are protected by encryption to
become viable. Becoming fluent in basic cryptographic operations is a
precious tool for any software developer.&lt;/p&gt;
&lt;p&gt;wolfcrypt is a Python library that encapsulates wolfSSL’s wolfCrypt
API. wolfCrypt is a lightweight, portable, C-language-based crypto
library targeted at IoT, embedded, and RTOS environments primarily
because of its size, speed, and feature set. It works seamlessly in
desktop, enterprise, and cloud environments as well. It is the crypto
engine behind wolfSSl’s embedded ssl library.&lt;/p&gt;
&lt;p&gt;I will talk about classic and modern cryptography concepts a.k.a.
cryptography 101 and use the wolfcrypt python module to put those
concepts in practice to keep information safe.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;Moisés Guimarães is a Brazilian pythonista who lives in João Pessoa,
the capital of the state of Paraíba in Brazil, also the eastmost
place of the Americas. Author of both wolfcrypt and wolfssl modules,
CFFI wrappers for the wolfSSL crypto and SSL/TLS libraries.&lt;/p&gt;
&lt;p&gt;He works both as a software engineer at wolfSSL and as a professor at
the Federal Institute of Education, Science and Technology of
Paraíba, graduated in Web Development with a specialization degree in
Information Security.&lt;/p&gt;
</summary></entry></feed>