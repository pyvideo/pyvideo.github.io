<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_robert-carrington.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2017-11-19T00:00:00+00:00</updated><entry><title>C for Yourself: Exploring Python Internals at the REPL</title><link href="https://pyvideo.org/pytexas-2017/c-for-yourself-exploring-python-internals-at-the-repl.html" rel="alternate"></link><published>2017-11-19T00:00:00+00:00</published><updated>2017-11-19T00:00:00+00:00</updated><author><name>Robert Carrington</name></author><id>tag:pyvideo.org,2017-11-19:pytexas-2017/c-for-yourself-exploring-python-internals-at-the-repl.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Completely ignoring how Python is implemented can get you into some nasty bugs. Having a basic mental model will protect you, and it doesn’t require reading CPython source code! I’ll show you a fun way to dissect common Python types down to the level of bytes, using the ctypes library and the REPL.&lt;/p&gt;
</summary></entry></feed>