<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Sat, 07 Sep 2019 00:00:00 +0000</lastBuildDate><item><title>Using Dask to Distribute Machine Learning Jobs</title><link>https://pyvideo.org/pycolorado-2019/using-dask-to-distribute-machine-learning-jobs.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Dask is a light-weight, Pythonic, library for doing distributed computation. I’ll talk about how we use it to run machine learning forecasting jobs, and how the library might benefit your machine learning or data science work.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">William Cox</dc:creator><pubDate>Sat, 07 Sep 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-09-07:pycolorado-2019/using-dask-to-distribute-machine-learning-jobs.html</guid></item><item><title>Serverless machine learning in production: manage models, not servers</title><link>https://pyvideo.org/pygotham-2018/serverless-machine-learning-in-production-manage-models-not-servers.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Putting machine learning models into production is difficult. It’s especially hard to do for a team that isn’t cross-function and doesn’t have strong ops or software engineering support. At Distil we used severless technology to deploy a Python-based machine learning system that let data scientists rapidly put models they trained into production for detecting automated threats on websites. This talk will discuss how we rapidly built this pipeline, what we learned and what we’d do differently in the future. We make hundreds of predictions per second and stream the results to hundreds of machines all without having to manage any machines or hardware.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">William Cox</dc:creator><pubDate>Sat, 06 Oct 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-10-06:pygotham-2018/serverless-machine-learning-in-production-manage-models-not-servers.html</guid></item><item><title>An Intuitive Introduction to the Fourier Transform and FFT</title><link>https://pyvideo.org/pydata-seattle-2015/an-intuitive-introduction-to-the-fourier-transform-and-fft.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The “fast fourier transform” (FFT) algorithm is a powerful tool for looking at time-based measurements in an interesting way, but do you understand what it does? This talk will start from basic geometry and explain what the fourier transform is, how to understand it, why it’s useful and show examples.&lt;/p&gt;
&lt;p&gt;If you’re collecting time-series data (e.g. heart rate, stock prices, server usage, temperature) the fourier transform can be a useful tool for analyzing the underlying periodic nature of the data. But, what is it actually doing? In this talk we’ll start from the foundation of basic geometry and explain what the transform is doing. The talk will feature lots of animated graphics to take the mystery out of this powerful method … and to keep you from reading Twitter during the talk. We’ll look at example applications and example code on how to use it in practice, along with practical tips, like choosing the number of bins and what in the world “windowing” functions are.&lt;/p&gt;
&lt;p&gt;Materials available here:  &lt;a class="reference external" href="https://github.com/gallamine/fft_oscon/"&gt;https://github.com/gallamine/fft_oscon/&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">William Cox</dc:creator><pubDate>Sat, 25 Jul 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-07-25:pydata-seattle-2015/an-intuitive-introduction-to-the-fourier-transform-and-fft.html</guid></item></channel></rss>