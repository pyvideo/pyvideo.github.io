<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org - Sofía Denner</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Fri, 21 Apr 2023 00:00:00 +0000</lastBuildDate><item><title>Django REST Framework: lo mejor de Django sin lo peor de Django</title><link>https://pyvideo.org/pycon-ar-2018/django-rest-framework-lo-mejor-de-django-sin-lo-peor-de-django.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Django REST Framework existe para que el backend se dedique única y exclusivamente a realizar tareas de backend. Aunque está construido sobre Django, está mucho más preparado que este a la hora de desarollar aplicaciones simples.&lt;/p&gt;
&lt;p&gt;Teniendo en cuenta que es uno de los web frameworks más populares, Django está sorprendentemente poco preparado para el desarrollo de aplicaciones CRUD. A pesar de que las vistas genéricas existen desde hace años, Django nos sigue obligando a escribir nuestro propio código para soportar funcionalidad muy básica incluso en las aplicaciones más simples. Django REST Framework incorpora un montón de características (viewsets, routers y filter backends, entre otros) para ahorrarnos ese trabajo y tiempo, y permitir que nos enfoquemos sólo en el problema a resolver.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sofía Denner</dc:creator><pubDate>Sat, 24 Nov 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-11-24:/pycon-ar-2018/django-rest-framework-lo-mejor-de-django-sin-lo-peor-de-django.html</guid><category>PyCon Ar 2018</category></item><item><title>Por qué TENÉS que conocer GIT</title><link>https://pyvideo.org/pycon-ar-2018/por-que-tenes-que-conocer-git.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;El versionado de código te puede salvar la vida. Incluso si trabajás solo/a, pero con mucha más razón si trabajas con otros/as. También te puede abrir muchas puertas, porque un buen perfil de GitHub vale mucho más que un CV.&lt;/p&gt;
&lt;p&gt;Esta charla está pensada para estudiantes y desarrolladores principiantes. Consistirá en tres partes principales:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Introducción: Que es y por qué es importante usar un versionado de código.&lt;/li&gt;
&lt;li&gt;Algunos comandos básicos de GIT.&lt;/li&gt;
&lt;li&gt;GitHub: la red social de los/as desarrolladores/as y su importancia para colaborar con los proyectos de software libre.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sofía Denner</dc:creator><pubDate>Sat, 24 Nov 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-11-24:/pycon-ar-2018/por-que-tenes-que-conocer-git.html</guid><category>PyCon Ar 2018</category></item><item><title>Unit Testing con Pytest</title><link>https://pyvideo.org/pycon-us-2023/unit-testing-con-pytest.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Spanish:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;¿Y esto cómo lo testeo? Al momento de escribir tests, no siempre es
simple saber qué cosas hay que testear o cómo hacerlo. En esta charla
voy a hablar de mocks, de buenas prácticas, voy a dar algunos tips y voy
a mostrar ejemplos de todo esto usando pytest.&lt;/p&gt;
&lt;p&gt;La charla se va a dividir en tres partes: - ¿Por qué (y para quién)
testeamos? - ¿Cómo escribir tests? Ejemplos de tests y cómo escribir
código preparado para pruebas unitarias. - ¿Cómo le sacamos el jugo a
pytest?: Ejemplos de fixtures, parametrizaciones, etc.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;English:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;So, how do I test this? When writing tests, is not always easy to know
what to test and how to do it. I’m going to talk about mocks, good
practices, a few tips, and I’m going to show some examples using pytest.&lt;/p&gt;
&lt;p&gt;The talk is splitted in three parts: - Why (and for whom) do we write
tests? - How to write unit tests? (Some test examples, and how to write
code ready to be tested). - How to take advantage of pytest main
features? (Examples of fixtures, parametrize, etc.).&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sofía Denner</dc:creator><pubDate>Fri, 21 Apr 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-04-21:/pycon-us-2023/unit-testing-con-pytest.html</guid><category>PyCon US 2023</category></item></channel></rss>