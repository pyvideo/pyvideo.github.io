<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Sat, 21 Apr 2018 00:00:00 +0000</lastBuildDate><item><title>Efficient Python development with small teams</title><link>https://pyvideo.org/europython-2013/efficient-python-development-with-small-teams.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Marc-André Lemburg</dc:creator><pubDate>Fri, 05 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-05:europython-2013/efficient-python-development-with-small-teams.html</guid><category>quality-assurance</category><category>project-management</category><category>business</category><category>communication</category><category>testing</category><category>principles</category><category>application-design</category><category>design</category><category>software-engineering</category><category>strategies</category><category>best-practices</category><category>architecture</category></item><item><title>Testing for beginners</title><link>https://pyvideo.org/europython-2013/testing-for-beginners.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Writing automated tests for your code is a requirement in modern
software development and there lots of tools for collecting and running
tests. There are also lots of instructions for how to use the tools.&lt;/p&gt;
&lt;p&gt;However, there are very few places where you can find out how to write
your code so that it is testable and how to write meaningful tests.&lt;/p&gt;
&lt;p&gt;This talk will focus on best practices for writing tests and you should
come away from it with a better understanding of what kinds of test to
write, when to write them and how to think about testing problems.&lt;/p&gt;
&lt;p&gt;The talk is designed for beginner coders and people who have recently
started to learn Python. We will be using the Python unittest framework
and py.test in the examples.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jacob Hallén</dc:creator><pubDate>Fri, 05 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-05:europython-2013/testing-for-beginners.html</guid><category>quality-assurance</category><category>testing</category><category>principles</category></item><item><title>A hands-on introduction to software testing (reloaded) - Part 1</title><link>https://pyvideo.org/europython-2013/a-hands-on-introduction-to-software-testing-reloaded-part-1.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Federico Caboni</dc:creator><pubDate>Thu, 04 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-04:europython-2013/a-hands-on-introduction-to-software-testing-reloaded-part-1.html</guid><category>quality-assurance</category><category>trac</category><category>testing</category><category>tdd</category><category>refactoring</category><category>teamwork</category><category>software-engineering</category><category>best-practices</category><category>performance</category></item><item><title>A hands-on introduction to software testing (reloaded) - Part 2</title><link>https://pyvideo.org/europython-2013/a-hands-on-introduction-to-software-testing-reloaded-part-2.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Federico Caboni</dc:creator><pubDate>Thu, 04 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-04:europython-2013/a-hands-on-introduction-to-software-testing-reloaded-part-2.html</guid><category>quality-assurance</category><category>trac</category><category>testing</category><category>tdd</category><category>refactoring</category><category>teamwork</category><category>software-engineering</category><category>best-practices</category><category>performance</category></item><item><title>A hands-on introduction to software testing (reloaded) - Part 3</title><link>https://pyvideo.org/europython-2013/a-hands-on-introduction-to-software-testing-reloaded-part-3.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Federico Caboni</dc:creator><pubDate>Thu, 04 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-04:europython-2013/a-hands-on-introduction-to-software-testing-reloaded-part-3.html</guid><category>quality-assurance</category><category>trac</category><category>testing</category><category>tdd</category><category>refactoring</category><category>teamwork</category><category>software-engineering</category><category>best-practices</category><category>performance</category></item><item><title>devpi: driving your packaging and testing needs</title><link>https://pyvideo.org/europython-2013/devpi-driving-your-packaging-and-testing-needs.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Holger Krekel</dc:creator><pubDate>Thu, 04 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-04:europython-2013/devpi-driving-your-packaging-and-testing-needs.html</guid><category>packaging</category><category>quality-assurance</category><category>testing</category></item><item><title>Vaurien The Chaos TCP Proxy</title><link>https://pyvideo.org/europython-2013/vaurien-the-chaos-tcp-proxy.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Tarek Ziadé</dc:creator><pubDate>Thu, 04 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-04:europython-2013/vaurien-the-chaos-tcp-proxy.html</guid><category>sysadmin</category><category>web</category><category>quality-assurance</category><category>testing</category></item><item><title>Flussi di dati GPS in near real-time</title><link>https://pyvideo.org/europython-2013/flussi-di-dati-gps-in-near-real-time.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alessio Siniscalchi</dc:creator><pubDate>Tue, 02 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-02:europython-2013/flussi-di-dati-gps-in-near-real-time.html</guid><category>quality-assurance</category><category>automation</category><category>sensor networks</category><category>realtime</category></item><item><title>Let's code with style</title><link>https://pyvideo.org/europython-2013/lets-code-with-style.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Florent Xicluna</dc:creator><pubDate>Tue, 02 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-02:europython-2013/lets-code-with-style.html</guid><category>best-practices</category><category>quality-assurance</category></item><item><title>pytest - rapid and simple testing with Python</title><link>https://pyvideo.org/europython-2013/pytest-rapid-and-simple-testing-with-python.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Holger Krekel</dc:creator><pubDate>Tue, 02 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-02:europython-2013/pytest-rapid-and-simple-testing-with-python.html</guid><category>professional</category><category>quality-assurance</category><category>testing</category></item><item><title>Lessons from a massive, openly-developed project</title><link>https://pyvideo.org/pycon-italia-2018/lessons-from-a-massive-openly-developed-project.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;OpenStack is a massive open source project, formed of multiple
components written in Python. Created in 2010, it attracted thousands of
developers which produced hundreds of thousands of commits. It is
completely openly-developed: there is no single organization owning it,
and anyone can participate on a level playing ground.&lt;/p&gt;
&lt;p&gt;During this wild ride, we discovered new classes of issues, crafted
novel solutions, made mistakes and learned lessons, most of them
applicable to other open source projects. Come learn about software
engineering best practices, open collaboration advice and other fun tips
and tricks based on our experience ! No prior experience with OpenStack
is needed to attend this talk.&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;sabato 21 aprile&lt;/strong&gt; at 14:45 &lt;a class="reference external" href="/p3/schedule/pycon9/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Thierry Carrez</dc:creator><pubDate>Sat, 21 Apr 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-04-21:pycon-italia-2018/lessons-from-a-massive-openly-developed-project.html</guid><category>quality-assurance</category><category>project-management</category><category>continuous-integration</category><category>#lessonslearned</category><category>collaboration</category><category>principles</category><category>software-engineering</category><category>best-practices</category><category>OpenStack</category><category>release-engineering</category></item><item><title>Roboto Framework for Test Code Coverage for cloud services.</title><link>https://pyvideo.org/pycon-italia-2017/roboto-framework-for-test-code-coverage-for-cloud-services.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Test case design is an important phase of software testing life cycle
where test cases are identified. Designing test cases for cloud
solutions requires a different approach from traditional application
oriented testing. The quality which is multidimensional will include
more attributes like network resiliency, fault recovery, reliability and
availability when it comes to cloud-based solutions. If such aspects
when not encompassed through test development framework, it will lead to
high chances of defect leakage in production in an agile mode of
delivery. We propose a strategy to design the test cases which traverse
across different levels of testing to find gaps using the Roboto
framework with Python. The solution provides the teams and the product
owners to get a picture of what is getting tested and how much of
coverage is done. The data can be used in team release discussions to
build confidence in the tests that gets executed as part of that
release. &lt;a class="reference external" href="https://github.com/robotframework/robotframework"&gt;https://github.com/robotframework/robotframework&lt;/a&gt; Testing
performed for features in a product is diverse and can be widely
categorized into functional, non-functional like reliability, fault
injections etc. Though developing test cases for functional changes is
achievable, arriving at test cases for non-functional requirements is
challenging in the given two-week sprint cycle of agile, and so leads to
defect leakage. Some vital modules in a project would have been running
in production for years and would have different sets of teams working
at different periods. Quantifying test code coverage and quality only by
a number of test cases per feature does not suffice as testing is
multidimensional and has to span across different levels. Measuring and
improving the test code coverage is the challenge generally faced by
product teams.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">khushbu parakh</dc:creator><pubDate>Sun, 09 Apr 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-04-09:pycon-italia-2017/roboto-framework-for-test-code-coverage-for-cloud-services.html</guid><category>quality-assurance</category><category>Functional Testing</category><category>Python</category><category>testing</category><category>robustness</category><category>integration</category><category>automation</category><category>framework</category><category>deployment</category><category>google-cloud</category></item><item><title>ByteCode al supporto dei test per protocolli ed enforcing di best practices</title><link>https://pyvideo.org/pycon-italia-2017/bytecode-al-supporto-dei-test-per-protocolli-ed-enforcing-di-best-practices.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python è un linguaggio interpretato con efficaci strumenti di
introspezione, fino a permetterci di accedere al suo bytecode e vedere
cosa la virtual machine sta per eseguire. Per quanto questa esigenza sia
solitamente molto limitata in ambito di produzione ed uso del software
può venirci utile all’interno delle test suite per verificare che il
codice scritto da terzi o dal noi stessi del domani rispetti ancora dei
protocolli o delle best practices che avevamo presupposto.&lt;/p&gt;
&lt;p&gt;La maggior parte di queste esigenze possono essere soddisfatte anche
tramite l’uso di metaclassi o monkeypatching, ma in alcuni casi è
possibile saltare i check preposti involontariamente (ad esempio
ereditando dalla classe sbagliata nel caso delle metaclassi), mentre la
verifica del byte code ci consente di controllare cosa effettivamente
sarà eseguito, non cosa ci aspettiamo sia eseguito.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alessandro Molina</dc:creator><pubDate>Sat, 08 Apr 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-04-08:pycon-italia-2017/bytecode-al-supporto-dei-test-per-protocolli-ed-enforcing-di-best-practices.html</guid><category>quality-assurance</category><category>CPython</category><category>testing</category><category>robustness</category><category>static-typing</category><category>bytecode</category><category>hacking</category><category>compiler</category></item></channel></rss>