<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Sun, 15 Sep 2019 00:00:00 +0000</lastBuildDate><item><title>What does PEP 517 mean for packaging</title><link>https://pyvideo.org/pycon-uk-2019/what-does-pep-517-mean-for-packaging.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Packaging Python code is a thorny area, but it's getting better. PEP 517 is a dry, technical specification for an important step: allowing packagers to choose alternatives to setuptools. I'll talk about how projects can take advantage of this, and the fun of writing your own packaging tools.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Thomas Kluyver</dc:creator><pubDate>Sun, 15 Sep 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-09-15:pycon-uk-2019/what-does-pep-517-mean-for-packaging.html</guid></item><item><title>nbval - Testing your notebooks</title><link>https://pyvideo.org/euroscipy-2017/nbval-testing-your-notebooks.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Many scientific computing projects involve code in notebooks, either to produce results or to demonstrate and explain the use of a software package. But how do you ensure that your notebooks still work as the libraries they import and call change? nbval is a plugin for the pytest testing framework which runs your notebooks as part of your test suite, so that unexpected errors will show up as test failures. You can also use nbval to check that key pieces of the produced outputs match those saved in the notebook file, to be sure that the code is still doing the same thing. This ability to automatically test notebooks with nbval enables notebooks to be a part of verifying a reproducible scientific publication.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Thomas Kluyver</dc:creator><pubDate>Thu, 31 Aug 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-08-31:euroscipy-2017/nbval-testing-your-notebooks.html</guid><category>nbval</category></item><item><title>Jupyter notebooks for teaching and learning</title><link>https://pyvideo.org/europython-2017/jupyter-notebooks-for-teaching-and-learning.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The Jupyter Notebook (formerly IPython Notebook) has been used to
support learning in different scenarios, including taught courses,
self-directed learning and reference material such as software
documentation. People have used it to learn how to program, and to
learn about diverse subjects where computer code is important to
human understanding. The aim of this talk is to dive into where and
how notebooks can be used most effectively for education.&lt;/p&gt;
&lt;p&gt;I will first describe notebook-based learning material created by a
variety of people for different purposes, deliberately taking a broad
definition of ‘education’, along with my own experiences using
notebooks to teach Software Carpentry sessions and conference
tutorials. I’ll pull out both strengths and limitations of notebooks
as an educational tool to explore how they can be used most
effectively.&lt;/p&gt;
&lt;p&gt;In the second part of the talk, I’ll talk about several extra
software tools which can make the notebook more valuable in
educational settings, including Jupyterhub, with which a teacher can
provide notebook servers for a group of students, nbgrader, which
allows notebooks to be used as assignments, and cite2c, which can
insert academic citations into notebooks. I’ll also touch on
commercial offerings integrating the notebook, such as SageMathCloud.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Thomas Kluyver</dc:creator><pubDate>Mon, 10 Jul 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-07-10:europython-2017/jupyter-notebooks-for-teaching-and-learning.html</guid></item><item><title>Jupyter: Notebooks in Multiple Languages for Data Science</title><link>https://pyvideo.org/pydata-amsterdam-2016/jupyter-notebooks-in-multiple-languages-for-data-science.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyData Amsterdam 2016&lt;/p&gt;
&lt;p&gt;We'll talk about how the Jupyter Notebook has evolved from a Python specific tool to a general data science tool that supports many different languages, and about our own experiences in supporting a wide variety of languages for data science. We'll also demonstrate some of the new features and ideas being developed in and around the project.&lt;/p&gt;
&lt;p&gt;Jupyter notebooks have become an invaluable tool for all kinds of data science. Originally developed as part of the IPython project, notebooks have evolved from a Python specific tool to support many programming languages; more than 50 different execution kernels have now been published. For all of these languages, notebooks are a way to record and describe a data science workflow, and then share it, publicly or privately, allowing the recipients to easily modify and execute the code.&lt;/p&gt;
&lt;p&gt;We’ll describe the architectural changes and decisions involved in the transition to supporting multiple languages, as well as our own experience in supporting data science languages ranging from C++ to R to Bash. You’ll also get a high-level understanding of how to create a new kernel, if a language you’re excited about is not yet supported.&lt;/p&gt;
&lt;p&gt;We’ll also highlight some of the current development work taking place in and around Jupyter, including redesigned UI, mechanisms for collaboration on notebooks, ways to share live, executable notebooks online, and projects that reuse the Jupyter machinery in different user interfaces.&lt;/p&gt;
&lt;p&gt;Slides available here: &lt;a class="reference external" href="https://docs.google.com/presentation/d/1PHnnkKYgjq1lcSDaVyhZP0Fs7qC70iA07b2Jv0uisUE/edit?usp=sharing"&gt;https://docs.google.com/presentation/d/1PHnnkKYgjq1lcSDaVyhZP0Fs7qC70iA07b2Jv0uisUE/edit?usp=sharing&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Thomas Kluyver</dc:creator><pubDate>Sat, 26 Mar 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-03-26:pydata-amsterdam-2016/jupyter-notebooks-in-multiple-languages-for-data-science.html</guid><category>jupyter notebook</category></item><item><title>Jupyter Advanced Topics Tutorial</title><link>https://pyvideo.org/scipy-2015/jupyter-advanced-topics-tutorial.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jonathan Frederic</dc:creator><pubDate>Thu, 09 Jul 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-07-09:scipy-2015/jupyter-advanced-topics-tutorial.html</guid><category>tutorial</category></item><item><title>JupyterHub: Deploying Jupyter Notebooks for students and researchers</title><link>https://pyvideo.org/pydata-london-2016/jupyterhub-deploying-jupyter-notebooks-for-students-and-researchers.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyData London 2016
Min Ragan Kelley &amp;amp; Thomas Kluyver&lt;/p&gt;
&lt;p&gt;Learn to deploy JupyterHub! JupyterHub is a simple, highly extensible, multi-user system for managing per-user Jupyter Notebook servers, designed for research groups or classes. We will cover deploying JupyterHub on a single server, as well as deploying with Docker using GitHub for authentication.&lt;/p&gt;
&lt;p&gt;The Jupyter Notebook is an interactive web-based tool for interactive programming and writing code-centric documents. Being a web-based environment, the notebook server can be run remotely, not just on your local machine. JupyterHub is a multi-user server, aimed at helping research groups and instructors host notebook servers for their users or students. By default, JupyterHub uses the local system users and PAM authentication, but it can be customized to use any authentication system, including GitHub, CILogon, Shibboleth, and more. The way single-user servers are spawned can also be customized to use services such as Docker, Kubernetes, or HPC cluster queuing systems. The tutorial will cover a basic deployment of JupyterHub on a single machine, then extending it to use docker and GitHub authentication, as well as general best practices for JupyterHub deployment.&lt;/p&gt;
&lt;p&gt;Slides available here: &lt;a class="reference external" href="https://github.com/minrk/jupyterhub-pydata-2016/blob/master/JupyterHub.pdf"&gt;https://github.com/minrk/jupyterhub-pydata-2016/blob/master/JupyterHub.pdf&lt;/a&gt;
GitHub Repo: &lt;a class="reference external" href="https://github.com/minrk/jupyterhub-pydata-2016"&gt;https://github.com/minrk/jupyterhub-pydata-2016&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Min Ragan Kelley</dc:creator><pubDate>Fri, 13 May 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-05-13:pydata-london-2016/jupyterhub-deploying-jupyter-notebooks-for-students-and-researchers.html</guid></item><item><title>Customising nbconvert. How to turn Jupyter notebooks into anything you want.</title><link>https://pyvideo.org/pydata-london-2016/thomas-kluyver-min-ragan-kelley-customising-nbconvert-how-to-turn-jupyter-notebooks-into-anythi.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyData London 2016&lt;/p&gt;
&lt;p&gt;nbconvert is a set of tools to convert Jupyter notebooks into other document formats. We'll describe the different ways you can extend and customise nbconvert to modify the output and define extra output formats.&lt;/p&gt;
&lt;p&gt;Jupyter Notebooks are code-centric documents including prose, maths, code, and rich output, such as images and HTML. These are all stored in a structured JSON file, with metadata about each input and output. nbconvert is a highly extensible tool for converting those JSON notebooks to other formats, such as HTML, LaTeX, PDF, and restructuredText. nbconvert powers the web service nbviewer, which renders any notebooks on the Web as HTML, so that they can be read by anyone with a browser and internet connection. We will cover the various ways you can extend nbconvert, from defining your own export formats to customising the output with Jinja templates, enabling things like hiding input or boilerplate cells.&lt;/p&gt;
&lt;p&gt;GitHub Repo: &lt;a class="reference external" href="https://github.com/takluyver/customising-nbconvert"&gt;https://github.com/takluyver/customising-nbconvert&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Thomas Kluyver</dc:creator><pubDate>Thu, 12 May 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-05-12:pydata-london-2016/thomas-kluyver-min-ragan-kelley-customising-nbconvert-how-to-turn-jupyter-notebooks-into-anythi.html</guid></item><item><title>IPython: tools for the entire lifecycle of research computing</title><link>https://pyvideo.org/scipy-2012/ipython-tools-for-the-entire-lifecycle-of-resear.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;IPython started as a better interactive Python interpreter in 2001, but
over the last decade it has grown into a rich and powerful set of
interlocking tools aimed at enabling an efficient, fluid and productive
workflow in the typical use cases encountered by scientists in everyday
research.&lt;/p&gt;
&lt;p&gt;Today, IPython consists of a kernel executing user code and capable of
communicating with a variety of clients, using ZeroMQ for networking via
a well-documented protocol. This enables IPython to support, from a
single codebase, a rich variety of usage scenarios through user-facing
applications and an API for embedding:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;An interactive, terminal-based shell with many capabilities far
beyond the default Python interactive interpreter (this is the
default application opened by the &lt;tt class="docutils literal"&gt;ipython&lt;/tt&gt; command that most users
are familiar with).&lt;/li&gt;
&lt;li&gt;A Qt console that provides the look and feel of a terminal, but adds
support for inline figures, graphical calltips, a persistent session
that can survive crashes of the kernel process, and more.&lt;/li&gt;
&lt;li&gt;A web-based notebook that can execute code and also contain rich text
and figures, mathematical equations and arbitrary HTML. This notebook
presents a document-like view with cells where code is executed but
that can be edited in-place, reordered, mixed with explanatory text
and figures, etc.&lt;/li&gt;
&lt;li&gt;A high-performance, low-latency system for parallel computing that
supports the control of a cluster of IPython engines communicating
over ZeroMQ, with optimizations that minimize unnecessary copying of
large objects (especially numpy arrays).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In this talk we will show how IPython supports all stages in the
lifecycle of a scientific idea: individual exploration, collaborative
development, large- scale production using parallel resources,
publication and education. In particular, the IPython Notebook supports
multiuser collaboration and allows scientists to share their work in an
open document format that is a true &amp;quot;executable paper&amp;quot;: notebooks can be
version controlled, exported to HTML or PDF for publication, and used
for teaching. We will demonstrate the key features of the system,&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Brian Granger</dc:creator><pubDate>Thu, 19 Jul 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-07-19:scipy-2012/ipython-tools-for-the-entire-lifecycle-of-resear.html</guid><category>General</category></item><item><title>IPython Protocol, Kernals and new features</title><link>https://pyvideo.org/euroscipy-2014/ipython-protocol-kernals-and-new-features.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A key idea behind IPython is decoupling code execution from user
interfaces. IPython relies on a documented protocol, which can be
implemented by different frontends and different kernels. By
implementing it, frontends and kernels gain the ability to communicate
regardless of which language they're written in. The IPython project
maintains three different frontends, while there are multiple third
party frontends and kernels already in use.&lt;/p&gt;
&lt;p&gt;We will show some important features that such a protocol permits, by
demonstrating some of our alternative frontends, as well as kernels that
people have written in languages such as Julia and R. Our presentation
will also feature interactive widgets, a new feature in IPython 2.0, and
preview the upcoming features that will allow a single notebook server
to start different types of kernel.&lt;/p&gt;
&lt;p&gt;This will demonstrate that the IPython Notebook is the perfect polyglot
tool for scientific computation workflows.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Matthias Bussionnier</dc:creator><pubDate>Wed, 22 Oct 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-10-22:euroscipy-2014/ipython-protocol-kernals-and-new-features.html</guid></item><item><title>IPython: Python at your fingertips</title><link>https://pyvideo.org/pycon-us-2012/ipython-python-at-your-fingertips.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;IPython is widely used in the scientific community, but its various
tools can be used in any context. IPython gets you as close as possible
to the Python language, with an array of tools for productive work: at
the terminal, in GUIs, through a web browser, and in high-level parallel
computing. This talk will explain the design of IPython and provide
short, hands-on demos of its main features.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Brian E. Granger</dc:creator><pubDate>Fri, 09 Mar 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-03-09:pycon-us-2012/ipython-python-at-your-fingertips.html</guid></item><item><title>IPython &amp; Jupyter in depth: high productivity interactive and parallel python</title><link>https://pyvideo.org/pycon-us-2015/ipython-jupyter-in-depth-high-productivity-int.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;IPython and Jupyter provide tools for interactive and parallel computing
that are widely used in scientific computing, but can benefit any Python
developer. We will show how to use IPython in different ways, as: an
interactive shell, a graphical console, a network-aware VM in GUIs, a
web-based notebook with code, graphics and rich HTML, and a high-level
framework for parallel computing.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kyle Kelley</dc:creator><pubDate>Thu, 09 Apr 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-04-09:pycon-us-2015/ipython-jupyter-in-depth-high-productivity-int.html</guid></item></channel></rss>