<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org - Mikhail Medvedev</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Thu, 23 Jul 2020 00:00:00 +0000</lastBuildDate><item><title>Extending Python with Rust</title><link>https://pyvideo.org/europython-2020/extending-python-with-rust.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Introduction and a hands-on demo of writing Python extension in Rust&lt;/p&gt;
&lt;p&gt;Rust is a rising star of the programming language world. I'd like to discuss it from a Python developer perspective. Obviously, Rust is not a replacement for Python, but in case you're seeking better performance it may be a good idea to build an extension. This is safer and arguably easier to do in Rust than in C.
In this talk we will take a look at existing crates that provide interface to Python and see how easy it is to use them.
Then we go through the demo and see it in action.
Run some benchmarks against pure Python and also Cython.
Write a Dockerfile to build it all together.
Discuss CI/CD for mixed Rust/Python projects.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mikhail Medvedev</dc:creator><pubDate>Thu, 23 Jul 2020 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2020-07-23:/europython-2020/extending-python-with-rust.html</guid><category>EuroPython 2020</category><category>europython</category><category>europython-2020</category><category>europython-online</category><category>All Other Programming Languages</category><category>Compiler and Interpreters</category><category>Deployment/Continuous Integration and Delivery</category><category>Docker</category><category>Rust</category></item><item><title>Asynchronous programming in Python</title><link>https://pyvideo.org/pycon-ireland-2018/asynchronous-programming-in-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Asynchronous programming can have many advantages, but may be awfully complicated. It also requires a developer to think differently. In this talk I will go through what async programming is, when you should or should not use it, and what we can do to avoid getting lost. I will also explore various approaches and tools available in Python.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mikhail Medvedev</dc:creator><pubDate>Sat, 10 Nov 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-11-10:/pycon-ireland-2018/asynchronous-programming-in-python.html</guid><category>PyCon Ireland 2018</category><category>async</category><category>asynchronous</category></item></channel></rss>