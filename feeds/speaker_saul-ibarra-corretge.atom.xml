<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_saul-ibarra-corretge.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2013-12-31T00:00:00+00:00</updated><entry><title>PEP-3156: IO Asyncrona en Python. ¿Cómo funciona un event loop?</title><link href="https://pyvideo.org/pycon-es-2013/pep-3156-io-asyncrona-en-python-como-funciona-un-event-loop.html" rel="alternate"></link><published>2013-12-31T00:00:00+00:00</published><updated>2013-12-31T00:00:00+00:00</updated><author><name>Saúl Ibarra Corretgé</name></author><id>tag:pyvideo.org,2013-12-31:pycon-es-2013/pep-3156-io-asyncrona-en-python-como-funciona-un-event-loop.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Autor: Saúl Ibarra Corretgé&lt;/p&gt;
&lt;p&gt;Track: Avanzado&lt;/p&gt;
&lt;p&gt;Una de las mayores ventajas de Python es su filosofía de &amp;quot;batteries included&amp;quot;, pero desafortunadamente no hay una solución al i/o asíncrono universal. PEP-3156 promete ser la solución a este problema, pero ¿en qué consiste? ¿cómo funciona? Ven a averiguarlo.&lt;/p&gt;
</summary></entry></feed>