<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_raphael-merx.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2018-08-26T00:00:00+00:00</updated><entry><title>Unicode and Python: the absolute minimum you need to know</title><link href="https://pyvideo.org/pycon-au-2018/unicode-and-python-the-absolute-minimum-you-need-to-know.html" rel="alternate"></link><published>2018-08-26T00:00:00+00:00</published><updated>2018-08-26T00:00:00+00:00</updated><author><name>Raphaël Merx</name></author><id>tag:pyvideo.org,2018-08-26:pycon-au-2018/unicode-and-python-the-absolute-minimum-you-need-to-know.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Born from parents who don't mind string encoding, my name has an &amp;quot;ë&amp;quot;. How can your code handle that character? How does Unicode handle it? If you see &amp;quot;ë&amp;quot; in a stack trace, does that mean your encoding is broken?&lt;/p&gt;
&lt;p&gt;Ignoring unicode often backfires. This talk is about preventing Unicode burns.&lt;/p&gt;
</summary></entry><entry><title>Mocking: virtual reality for your Python tests</title><link href="https://pyvideo.org/pycon-au-2017/mocking-virtual-reality-for-your-python-tests.html" rel="alternate"></link><published>2017-08-05T00:00:00+00:00</published><updated>2017-08-05T00:00:00+00:00</updated><author><name>Raphael Merx</name></author><id>tag:pyvideo.org,2017-08-05:pycon-au-2017/mocking-virtual-reality-for-your-python-tests.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Unit tests: they are fast, easy to write and protect your code against future bugs. But what happens when unit tests depend on modules you don't want to test? Or even when they depend on external APIs you cannot use while testing? That's where mocking comes in. The &lt;cite&gt;unittest.mock&lt;/cite&gt; module lets you mimic behavior for your test dependencies. It also gives you tools to make sure your code calls its dependencies at the right places and with the right arguments.&lt;/p&gt;
&lt;p&gt;This talk will use a set of examples to showcase what the &lt;cite&gt;mock&lt;/cite&gt; module can do, and how to make use of it in your tests. We will cover mocking functions, objects and modules, as well as various caveats and recipes for mocking Python code.&lt;/p&gt;
</summary></entry><entry><title>Offline Django with Service Workers</title><link href="https://pyvideo.org/pycon-au-2017/offline-django-with-service-workers.html" rel="alternate"></link><published>2017-08-04T00:00:00+00:00</published><updated>2017-08-04T00:00:00+00:00</updated><author><name>Raphael Merx</name></author><id>tag:pyvideo.org,2017-08-04:pycon-au-2017/offline-django-with-service-workers.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;So you wish your Django application would work in the most remote places, even when no Internet is available? With service workers, that's possible. They extend browser caching to all requests, including the initial HTML request. When offline, your users can access a fully functioning web application instead of landing on the &amp;quot;You are offline&amp;quot; page.&lt;/p&gt;
&lt;p&gt;This talk will cover:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;What service workers are&lt;/li&gt;
&lt;li&gt;How to initialise and manage them&lt;/li&gt;
&lt;li&gt;What caching strategies to use&lt;/li&gt;
&lt;li&gt;How to integrate service workers with Django&lt;/li&gt;
&lt;/ul&gt;
</summary></entry><entry><title>Lightning Talks - Part 2</title><link href="https://pyvideo.org/djangocon-us-2015/lightning-talks-part-2.html" rel="alternate"></link><published>2015-09-18T00:00:00+00:00</published><updated>2015-09-18T00:00:00+00:00</updated><author><name>Dmitry Filippov</name></author><id>tag:pyvideo.org,2015-09-18:djangocon-us-2015/lightning-talks-part-2.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Lightning Talks&lt;/p&gt;
&lt;p&gt;Dmitry Filippov &amp;quot;Django assistance in PyCharm&amp;quot;&lt;/p&gt;
&lt;p&gt;Paul Bailey &amp;quot;End the Holy Wars of Formatting&amp;quot;&lt;/p&gt;
&lt;p&gt;Trey Hunner &amp;quot;JavaScript is Becoming Pythonic&amp;quot;&lt;/p&gt;
&lt;p&gt;Eduardo Rivas &amp;quot; Sublime Text Django&amp;quot;&lt;/p&gt;
&lt;p&gt;Jeff Sumner &amp;quot;Texas Swim Center&amp;quot;&lt;/p&gt;
&lt;p&gt;Francisco Saldana &amp;quot;Keeping Fast Fast: Rapid Iteration with
TransactionTestCase&amp;quot;&lt;/p&gt;
&lt;p&gt;Raphael Merx &amp;quot;Mocking Outbound Requests with HTTPretty&amp;quot;&lt;/p&gt;
&lt;p&gt;James Tauber &amp;quot;Building a Learning Management System with Pinax&amp;quot;&lt;/p&gt;
&lt;p&gt;Miroslav Shubernetskiy &amp;quot;Filtering in Django&amp;quot;&lt;/p&gt;
&lt;p&gt;Armin Ronacher &amp;quot;rb - Scaling Redis in Python&amp;quot;&lt;/p&gt;
&lt;p&gt;Brendan Sterne &amp;quot;Code Wiki&amp;quot;&lt;/p&gt;
&lt;p&gt;Russell Keith-Magee &amp;quot;Professional Yak Coiffure&amp;quot;&lt;/p&gt;
</summary><category term="lightning talks"></category></entry></feed>