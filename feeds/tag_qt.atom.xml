<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/tag_qt.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2019-08-24T00:00:00+00:00</updated><entry><title>Python, Threads &amp; Qt: Boom!</title><link href="https://pyvideo.org/kiwi-pycon-2019/python-threads-qt-boom.html" rel="alternate"></link><published>2019-08-24T00:00:00+00:00</published><updated>2019-08-24T00:00:00+00:00</updated><author><name>Teijo Holzer</name></author><id>tag:pyvideo.org,2019-08-24:kiwi-pycon-2019/python-threads-qt-boom.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;We will investigate problems and pitfalls that will occur when using threads &amp;amp; Qt together inside a Python application, including unexpected memory corruption and crashes.&lt;/p&gt;
</summary><category term="qt"></category><category term="threads"></category></entry><entry><title>Developing Desktop and mobile apps with PySide and QML</title><link href="https://pyvideo.org/europython-2011/developing-desktop-and-mobile-apps-with-pyside-an.html" rel="alternate"></link><published>2011-07-24T00:00:00+00:00</published><updated>2011-07-24T00:00:00+00:00</updated><author><name>Thomas Perl</name></author><id>tag:pyvideo.org,2011-07-24:europython-2011/developing-desktop-and-mobile-apps-with-pyside-an.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Thomas Perl - 24 June 2011 in &amp;quot;Training Pizza
Margherita &amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PySide offers Python bindings to the Qt libraries. This allows rapid
development of great UI-based Python applications. With the addition of
QML in Qt 4.7, this now gives developers a chance to develop
touch-based, rich applications directly with Python. This talk
introduces PySide development, combined with QML, and shows some
real-world examples of mobile PySide applications.&lt;/p&gt;
&lt;p&gt;This talk is based on my PySide/QML on &lt;a class="reference external" href="http://thp.io/2010%20/meego-python/"&gt;MeeGo
tutorials&lt;/a&gt;, and shows some of
the possibilities. It is aimed at Python developers looking for a GUI
toolkit to create fluent, hardware-accelerated cross-platform UIs using
QML.&lt;/p&gt;
&lt;p&gt;Materials available at: &lt;a class="reference external" href="http://thp.io/2011/europython/"&gt;http://thp.io/2011/europython/&lt;/a&gt;&lt;/p&gt;
</summary><category term="gui"></category><category term="mobile"></category><category term="pyside"></category><category term="qt"></category></entry><entry><title>Introduction to Qt</title><link href="https://pyvideo.org/europython-2011/introduction-to-qt.html" rel="alternate"></link><published>2011-07-24T00:00:00+00:00</published><updated>2011-07-24T00:00:00+00:00</updated><author><name>Matti Airas</name></author><id>tag:pyvideo.org,2011-07-24:europython-2011/introduction-to-qt.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Matti Airas - 23 June 2011 in &amp;quot;Track Ravioli&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This presentation introduces Nokia's Qt Development Frameworks and their
relationship to Python. After an overview of Qt and the Qt ecosystem,
Qt's history and future roadmap are discussed. Different Python
bindings, PyQt and PySide in particular, are introduced. Finally,
hands-on examples of Qt Quick with Python are shown.&lt;/p&gt;
</summary><category term="pyqt"></category><category term="pyside"></category><category term="qt"></category></entry><entry><title>New beauty in Camelot</title><link href="https://pyvideo.org/europython-2011/new-beauty-in-camelot.html" rel="alternate"></link><published>2011-07-21T00:00:00+00:00</published><updated>2011-07-21T00:00:00+00:00</updated><author><name>Erik Janssens</name></author><id>tag:pyvideo.org,2011-07-21:europython-2011/new-beauty-in-camelot.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Erik Janssens,Jeroen Dierckx - 22 June 2011 in &amp;quot;Track
Ravioli &amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Camelot is a Python framework that leverages SQLAlchemy and QT to build
rich desktop applications. The model - view definition used was inspired
by the Django Admin interface. Some see it as a replacement for MS
Access, but it's underlying libraries allow much more advanced features.&lt;/p&gt;
&lt;p&gt;In this talk we will focus on the changes and new features that were
introduced in Camelot and more importantly, how they can be used in your
applications. Those features range from Matplotlib chart integration and
new types of actions to displaying custom SQLAlchemy queries in a table
view.&lt;/p&gt;
&lt;p&gt;We will share our experiences with large scale deployment of Python and
Camelot applications to the desktop of the user. In a number of case
studies we will point out the mistakes we made and how they were
corrected.&lt;/p&gt;
</summary><category term="deployment"></category><category term="django"></category><category term="framework"></category><category term="matplotlib"></category><category term="qt"></category><category term="sqlalchemy"></category></entry><entry><title>Developing cutting-edge applications with PyQt</title><link href="https://pyvideo.org/europython-2011/developing-cutting-edge-applications-with-pyqt.html" rel="alternate"></link><published>2011-07-20T00:00:00+00:00</published><updated>2011-07-20T00:00:00+00:00</updated><author><name>Lorenzo Mancini</name></author><id>tag:pyvideo.org,2011-07-20:europython-2011/developing-cutting-edge-applications-with-pyqt.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Lorenzo Mancini,Matteo Bertozzi - 23 June 2011 in
&amp;quot;Training Pizza Margherita &amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;(Presented with Matteo Bertozzi)&lt;/p&gt;
&lt;p&gt;Python's high development speed and Qt's gargantuan feature set allow
for comfortable development of complex desktop applications. Still, what
does one need to do to best leverage this awesome combination? And more
importantly, what crucial advantages exist to decide its adoption in
favour of more traditional tecniques?&lt;/p&gt;
&lt;p&gt;During this training, we'll start from a white canvas and show how to
develop a desktop application using the best tools Qt offers. You'll
learn how to compose complex GUIs from basic building blocks, and how to
use QPainter, one of the most advanced 2D painting systems in the open
source world. Qt's Webkit integration will be discussed, along with the
recent Qt Quick technology, which allows one to create smooth and fluid
user interfaces. Qt's solution to common deployment problems, like
handling a serious translation workflow, will be presented. At the end,
we'll package our PyQt application so it's ready to be distributed for
download.&lt;/p&gt;
&lt;p&gt;Walk away with a sound understanding of why you should choose PyQt for
your next desktop project.&lt;/p&gt;
</summary><category term="deployment"></category><category term="distributed"></category><category term="pyqt"></category><category term="qt"></category></entry><entry><title>Volker Kuhlmann - Rapid GUI application development with python</title><link href="https://pyvideo.org/kiwi-pycon-2009/volker-kuhlmann---rapid-gui-application-developme.html" rel="alternate"></link><published>2009-11-07T00:00:00+00:00</published><updated>2009-11-07T00:00:00+00:00</updated><author><name>Volker Kuhlmann</name></author><id>tag:pyvideo.org,2009-11-07:kiwi-pycon-2009/volker-kuhlmann---rapid-gui-application-developme.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Rapid GUI application development with Python&lt;/p&gt;
&lt;p&gt;Presented by Volker Kuhlmann&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;Options and tools for rapid desktop GUI application development using
python are examined, and how they compare to competing languages and
platforms.&lt;/p&gt;
&lt;p&gt;Outline&lt;/p&gt;
&lt;p&gt;Examine GUI options for python including Qt, and their performance with
respect to ease of use, runtime, and platform portability. Examine
options for the tool chain (IDE, editor, debugger, programming aids) and
characterise their ease of use and level of sophistication, and compare
with commonly used equivalents, both open source and not open source.
Demonstrate a sample program.&lt;/p&gt;
</summary><category term="gui"></category><category term="kiwipycon"></category><category term="kiwipycon2009"></category><category term="qt"></category></entry></feed>