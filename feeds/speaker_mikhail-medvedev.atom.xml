<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org - Mikhail Medvedev</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_mikhail-medvedev.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2020-07-23T00:00:00+00:00</updated><subtitle></subtitle><entry><title>Extending Python with Rust</title><link href="https://pyvideo.org/europython-2020/extending-python-with-rust.html" rel="alternate"></link><published>2020-07-23T00:00:00+00:00</published><updated>2020-07-23T00:00:00+00:00</updated><author><name>Mikhail Medvedev</name></author><id>tag:pyvideo.org,2020-07-23:/europython-2020/extending-python-with-rust.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Introduction and a hands-on demo of writing Python extension in Rust&lt;/p&gt;
&lt;p&gt;Rust is a rising star of the programming language world. I'd like to discuss it from a Python developer perspective. Obviously, Rust is not a replacement for Python, but in case you're seeking better performance it may be …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Introduction and a hands-on demo of writing Python extension in Rust&lt;/p&gt;
&lt;p&gt;Rust is a rising star of the programming language world. I'd like to discuss it from a Python developer perspective. Obviously, Rust is not a replacement for Python, but in case you're seeking better performance it may be a good idea to build an extension. This is safer and arguably easier to do in Rust than in C.
In this talk we will take a look at existing crates that provide interface to Python and see how easy it is to use them.
Then we go through the demo and see it in action.
Run some benchmarks against pure Python and also Cython.
Write a Dockerfile to build it all together.
Discuss CI/CD for mixed Rust/Python projects.&lt;/p&gt;
</content><category term="EuroPython 2020"></category><category term="europython"></category><category term="europython-2020"></category><category term="europython-online"></category><category term="All Other Programming Languages"></category><category term="Compiler and Interpreters"></category><category term="Deployment/Continuous Integration and Delivery"></category><category term="Docker"></category><category term="Rust"></category></entry><entry><title>Asynchronous programming in Python</title><link href="https://pyvideo.org/pycon-ireland-2018/asynchronous-programming-in-python.html" rel="alternate"></link><published>2018-11-10T00:00:00+00:00</published><updated>2018-11-10T00:00:00+00:00</updated><author><name>Mikhail Medvedev</name></author><id>tag:pyvideo.org,2018-11-10:/pycon-ireland-2018/asynchronous-programming-in-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Asynchronous programming can have many advantages, but may be awfully complicated. It also requires a developer to think differently. In this talk I will go through what async programming is, when you should or should not use it, and what we can do to avoid getting lost. I will …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Asynchronous programming can have many advantages, but may be awfully complicated. It also requires a developer to think differently. In this talk I will go through what async programming is, when you should or should not use it, and what we can do to avoid getting lost. I will also explore various approaches and tools available in Python.&lt;/p&gt;
</content><category term="PyCon Ireland 2018"></category><category term="async"></category><category term="asynchronous"></category></entry></feed>