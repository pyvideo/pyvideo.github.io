<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_tommie-gannert.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2011-10-17T00:00:00+00:00</updated><entry><title>from __magic__ import wtf</title><link href="https://pyvideo.org/pycon-finland-2011/from-__magic__-import-wtf.html" rel="alternate"></link><published>2011-10-17T00:00:00+00:00</published><updated>2011-10-17T00:00:00+00:00</updated><author><name>Tommie Gannert</name></author><id>tag:pyvideo.org,2011-10-17:pycon-finland-2011/from-__magic__-import-wtf.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;a class="reference external" href="http://lanyrd.com/2011/pycon-finland/shctk/"&gt;http://lanyrd.com/2011/pycon-finland/shctk/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Just because you can doesn't mean you should. Python provides facilities like __metaclass__, __getattr__, __call__, and others which allow programmers to do a lot of clever stuff. This magical code is fun to write, concise, and can be quite elegant. However, too much magic is dangerous, particularly in library code. You may think your code is clever and fun, but your colleague trying to maintain it or re-use it in another project later will probably be confused and annoyed by much thought is needed to understand what the heck your fancy code is doing. We will discuss finding the balance between fun magic and boring but clear with some examples of questionable magic we've encountered in Spotify's Python corpus.&lt;/p&gt;
</summary></entry></feed>