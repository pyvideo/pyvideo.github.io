<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_brett-cannon.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2019-05-05T00:00:00+00:00</updated><entry><title>Replacing Guido</title><link href="https://pyvideo.org/pycon-ca-2018/replacing-guido.html" rel="alternate"></link><published>2018-11-10T00:00:00+00:00</published><updated>2018-11-10T00:00:00+00:00</updated><author><name>Brett Cannon</name></author><id>tag:pyvideo.org,2018-11-10:pycon-ca-2018/replacing-guido.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;On July 12, 2018, Guido van Rossum gave himself 'a permanent vacation from being BDFL' with no guidance on how to proceed. This talk will discuss how the Python development team has tried to handle situation and where things currently stand.&lt;/p&gt;
&lt;p&gt;Presentation page -- &lt;a class="reference external" href="https://2018.pycon.ca/talks/talk-PC-53534"&gt;https://2018.pycon.ca/talks/talk-PC-53534&lt;/a&gt;
Author website -- &lt;a class="reference external" href="https://snarky.ca/"&gt;https://snarky.ca/&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Python Steering Council - Keynote - PyCon 2019</title><link href="https://pyvideo.org/pycon-us-2019/python-steering-council-keynote-pycon-2019.html" rel="alternate"></link><published>2019-05-05T00:00:00+00:00</published><updated>2019-05-05T00:00:00+00:00</updated><author><name>Barry Warsaw</name></author><id>tag:pyvideo.org,2019-05-05:pycon-us-2019/python-steering-council-keynote-pycon-2019.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python Steering Council Keynote panel&lt;/p&gt;
</summary><category term="keynote"></category><category term="steering council"></category><category term="panel"></category></entry><entry><title>Setting expectations for Open Source participation</title><link href="https://pyvideo.org/pycon-ca-2017/setting-expectations-for-open-source-participation.html" rel="alternate"></link><published>2017-11-18T00:00:00+00:00</published><updated>2017-11-18T00:00:00+00:00</updated><author><name>Brett Cannon</name></author><id>tag:pyvideo.org,2017-11-18:pycon-ca-2017/setting-expectations-for-open-source-participation.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&amp;quot;I'm burning out from all of these rude users!&amp;quot; &amp;quot;Why is my contribution being ignored?!?&amp;quot; Phrases like these are unfortunately common in the world of open source. It all leads to frustrated users, contributors, and maintainers. Most of this negativity, though, stems from a misunderstanding from all sides of what should be expected from an open source project and those involved. The hope is that this talk will help re-calibrate how everyone involved in open source should view and interact with open source projects, leading to happier participants who want to be involved long-term in open source.&lt;/p&gt;
</summary></entry><entry><title>How Import Works</title><link href="https://pyvideo.org/pycon-ar-2012/how-import-works.html" rel="alternate"></link><published>2012-11-17T00:00:00+00:00</published><updated>2012-11-17T00:00:00+00:00</updated><author><name>Brett Cannon</name></author><id>tag:pyvideo.org,2012-11-17:pycon-ar-2012/how-import-works.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk will go over how something as simple as
&lt;tt class="docutils literal"&gt;from packaging import version&lt;/tt&gt; turns out to be a little complicated.
The details of imports -- from how the import statement is interpreted
to how to decide what object to return -- will be discussed. While the
talk will discuss things from the perspective of Python 3.3 (and thus
importlib), the overall semantics will (mostly) apply to older versions
of Python.&lt;/p&gt;
</summary></entry><entry><title>Python 3.3: Trust Me, It's Better than 2.7</title><link href="https://pyvideo.org/pycon-ar-2012/python-33-trust-me-its-better-than-27.html" rel="alternate"></link><published>2012-11-16T00:00:00+00:00</published><updated>2012-11-16T00:00:00+00:00</updated><author><name>Brett Cannon</name></author><id>tag:pyvideo.org,2012-11-16:pycon-ar-2012/python-33-trust-me-its-better-than-27.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk I will convince you that Python 3.3 is superior to Python
2.7 by going over the difference between Python 2.7 and Python 3.3 along
with benchmarks information to show where Python 3.3 shines in
comparison to Python 2.7. If I accomplish my goal, you will walk out of
this talk convinced that Python 2.7 is not the final version of Python
you want to support.&lt;/p&gt;
</summary></entry><entry><title>Sunday Morning Lightning Talks + Keynote</title><link href="https://pyvideo.org/pycon-us-2018/sunday-morning-lightning-talks-keynote.html" rel="alternate"></link><published>2018-05-13T00:00:00+00:00</published><updated>2018-05-13T00:00:00+00:00</updated><author><name>Brett Cannon</name></author><id>tag:pyvideo.org,2018-05-13:pycon-us-2018/sunday-morning-lightning-talks-keynote.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Keynote Speaker: Brett Cannon&lt;/p&gt;
</summary><category term="keynote"></category><category term="lightning talks"></category></entry><entry><title>Setting Expectations for Open Source Participation</title><link href="https://pyvideo.org/pycascades-2018/setting-expectations-for-open-source-participation.html" rel="alternate"></link><published>2018-01-22T00:00:00+00:00</published><updated>2018-01-22T00:00:00+00:00</updated><author><name>Brett Cannon</name></author><id>tag:pyvideo.org,2018-01-22:pycascades-2018/setting-expectations-for-open-source-participation.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Burn-out is common in open source due to a misunderstanding of what users, contributors, and maintainers should expect from each other. This talk will set out to help everyone set reasonable expectations of each other in order to make open source pleasant for everyone involved.&lt;/p&gt;
</summary><category term="community"></category></entry><entry><title>What's new in Python 3.6</title><link href="https://pyvideo.org/pycon-us-2017/whats-new-in-python-36.html" rel="alternate"></link><published>2017-05-20T00:00:00+00:00</published><updated>2017-05-20T00:00:00+00:00</updated><author><name>Brett Cannon</name></author><id>tag:pyvideo.org,2017-05-20:pycon-us-2017/whats-new-in-python-36.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python 3.6 has turned out to be quite the release! With &lt;a class="reference external" href="https://www.python.org/dev/peps/pep-0494/"&gt;16 Python
Enhancement Proposals&lt;/a&gt;
incorporated into the version, Python 3.6 is only surpassed by Python
3.0 for having more &lt;a class="reference external" href="https://www.python.org/dev/peps/"&gt;PEPs&lt;/a&gt; included
in a single release. This talk will be an overview of those 16 PEPs and
other changes outlined in the &lt;a class="reference external" href="https://docs.python.org/3.6/whatsnew/3.6.html"&gt;What's
New&lt;/a&gt; document for
Python 3.6.&lt;/p&gt;
</summary></entry><entry><title>Panel: Using, contributing to, and integrating open source in large corporate environments</title><link href="https://pyvideo.org/pydata-seattle-2015/panel-using-contributing-to-and-integrating-open-source-in-large-corporate-environments.html" rel="alternate"></link><published>2015-07-25T00:00:00+00:00</published><updated>2015-07-25T00:00:00+00:00</updated><author><name>James Powell</name></author><id>tag:pyvideo.org,2015-07-25:pydata-seattle-2015/panel-using-contributing-to-and-integrating-open-source-in-large-corporate-environments.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyData is a gathering of users and developers of data analysis tools in Python. The goals are to provide Python enthusiasts a place to share ideas and learn from each other about how best to apply our language and tools to ever-evolving challenges in the vast realm of data management, processing, analytics, and visualization.&lt;/p&gt;
&lt;p&gt;We aim to be an accessible, community-driven conference, with tutorials for novices, advanced topical workshops for practitioners, and opportunities for package developers and users to meet in person.&lt;/p&gt;
</summary></entry><entry><title>Jupyter Notebooks in the cloud</title><link href="https://pyvideo.org/pycon-ca-2016/jupyter-notebooks-in-the-cloud.html" rel="alternate"></link><published>2016-11-13T00:00:00+00:00</published><updated>2016-11-13T00:00:00+00:00</updated><author><name>Brett Cannon</name></author><id>tag:pyvideo.org,2016-11-13:pycon-ca-2016/jupyter-notebooks-in-the-cloud.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Jupyter Notebooks provide a way to do &amp;quot;literate computing&amp;quot; where
documents contain their own live code and visualizations. And while
getting started with notebooks is easy, using cloud-based hosting like
Azure Notebooks makes it even easier to get started and share your
results. This talk will explain what notebooks are and talk about
benefits (and drawbacks) of hosting them in the cloud.&lt;/p&gt;
&lt;div class="section" id="brett-cannon-bio"&gt;
&lt;h4&gt;Brett Cannon Bio&lt;/h4&gt;
&lt;p&gt;Brett is part of the &lt;a class="reference external" href="https://azure.microsoft.com/"&gt;Azure&lt;/a&gt; Data
Science Tools team at &lt;a class="reference external" href="https://www.microsoft.com/"&gt;Microsoft&lt;/a&gt; where
he works on various &lt;a class="reference external" href="https://blogs.msdn.microsoft.com/pythonengineering/"&gt;Python
engineering&lt;/a&gt;
problems. He has been a core developer of Python itself for over 13
years and mucked around with pretty much every part of Python at this
point. At this point Brett just hopes he can continue to live up to
&lt;a class="reference external" href="http://pyfound.blogspot.com/2016/05/brett-cannon-wins-frank-%20willison-award.html"&gt;winning the 2016 Frank Willison
Award&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>What’s new in Python 3.6</title><link href="https://pyvideo.org/pycon-ca-2016/whats-new-in-python-36.html" rel="alternate"></link><published>2016-11-12T00:00:00+00:00</published><updated>2016-11-12T00:00:00+00:00</updated><author><name>Brett Cannon</name></author><id>tag:pyvideo.org,2016-11-12:pycon-ca-2016/whats-new-in-python-36.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Scheduled for release in mid-December following the conference, Python
3.6 is shaping up to be a feature-packed release! This talk will cover
all the new features of note that will be making their debut in Python
3.6, with consideration to explain things so that those still on legacy
Python 2 can follow along.&lt;/p&gt;
&lt;div class="section" id="brett-cannon-bio"&gt;
&lt;h4&gt;Brett Cannon Bio&lt;/h4&gt;
&lt;p&gt;Brett is part of the &lt;a class="reference external" href="https://azure.microsoft.com/"&gt;Azure&lt;/a&gt; Data
Science Tools team at &lt;a class="reference external" href="https://www.microsoft.com/"&gt;Microsoft&lt;/a&gt; where
he works on various &lt;a class="reference external" href="https://blogs.msdn.microsoft.com/pythonengineering/"&gt;Python
engineering&lt;/a&gt;
problems. He has been a core developer of Python itself for over 13
years and mucked around with pretty much every part of Python at this
point. At this point Brett just hopes he can continue to live up to
&lt;a class="reference external" href="http://pyfound.blogspot.com/2016/05/brett-cannon-wins-frank-%20willison-award.html"&gt;winning the 2016 Frank Willison
Award&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>Pyjion: who doesn’t want faster for free?</title><link href="https://pyvideo.org/pycon-us-2016/brett-cannon-dino-viehland-pyjion-who-doesnt-want-faster-for-free-pycon-2016.html" rel="alternate"></link><published>2016-05-30T00:00:00+00:00</published><updated>2016-05-30T00:00:00+00:00</updated><author><name>Brett Cannon</name></author><id>tag:pyvideo.org,2016-05-30:pycon-us-2016/brett-cannon-dino-viehland-pyjion-who-doesnt-want-faster-for-free-pycon-2016.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Speakers: Brett Cannon, Dino Viehland&lt;/p&gt;
&lt;p&gt;At PyCon US 2015 an experiment was started: could a JIT be added to CPython which would speed up performance &lt;strong&gt;and&lt;/strong&gt; be fully backwards-compatible? Could unaltered extension modules live happily with a JIT? That experiment is Pyjion and this talk will explain what we changed to CPython to add a pre-existing JIT to it and whether we met our goal of being a benefit instead of a hindrance.&lt;/p&gt;
&lt;p&gt;Slides can be found at: &lt;a class="reference external" href="https://speakerdeck.com/pycon2016"&gt;https://speakerdeck.com/pycon2016&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/PyCon/2016-slides"&gt;https://github.com/PyCon/2016-slides&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Saturday Morning Keynote</title><link href="https://pyvideo.org/pycon-ca-2015/saturday-morning-keynote-brett-cannon.html" rel="alternate"></link><published>2015-11-07T00:00:00+00:00</published><updated>2015-11-07T00:00:00+00:00</updated><author><name>Brett Cannon</name></author><id>tag:pyvideo.org,2015-11-07:pycon-ca-2015/saturday-morning-keynote-brett-cannon.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Over Python's long history it has collected a large number of implementations, both active and abandoned (Wikipedia lists 10 implementations alone.) Brett will go over the actively maintained implementations of Python, what makes them unique, and end with an unscientific performance comparison (both Python 2 &amp;amp; 3 interpreters.)&lt;/p&gt;
&lt;p&gt;# Actively maintained interpreters&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;CPython&lt;/li&gt;
&lt;li&gt;PyPy&lt;/li&gt;
&lt;li&gt;IronPython&lt;/li&gt;
&lt;li&gt;Jython&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;# Interpreters under development&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Skython?&lt;/li&gt;
&lt;li&gt;Pyston&lt;/li&gt;
&lt;li&gt;Pyjion&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;# Other ways to get a performance boost&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Numba&lt;/li&gt;
&lt;li&gt;Cython&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;# Performance comparison&lt;/p&gt;
&lt;p&gt;An exploration of performance using CPython's benchmark suite &lt;a class="reference external" href="https://hg.python.org/benchmarks"&gt;https://hg.python.org/benchmarks&lt;/a&gt;. Data will be made publicly available through a Jupyter notebook.&lt;/p&gt;
</summary></entry><entry><title>From Source to Code: How CPython's Compiler Works</title><link href="https://pyvideo.org/pycon-ca-2013/from-source-to-code-how-cpythons-compiler-works.html" rel="alternate"></link><published>2013-08-10T00:00:00+00:00</published><updated>2013-08-10T00:00:00+00:00</updated><author><name>Brett Cannon</name></author><id>tag:pyvideo.org,2013-08-10:pycon-ca-2013/from-source-to-code-how-cpythons-compiler-works.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;How the heck does CPython take a blob of bytes you call source code and
create another blob of bytes called bytecode which it is able to execute
to make the magic of Python programs work? This talk's aim is to provide
a conceptual answer to that question. The overall process of tokenizing,
parsing, creating an AST, and then finally emitting bytecode will be
covered.&lt;/p&gt;
&lt;p&gt;If you have no clue what any of those previous words meant, don't worry!
This talk will be accessible to people who are not compiler experts.
We'll also cover how various parts of the compiler are exposed through
Python's standard library so you can play with what you learn
afterwards.&lt;/p&gt;
</summary><category term="talk"></category></entry><entry><title>Import this, that, and the other thing: custom importers (#9)</title><link href="https://pyvideo.org/pycon-us-2010/pycon-2010--import-this--that--and-the-other-thin.html" rel="alternate"></link><published>2010-02-19T00:00:00+00:00</published><updated>2010-02-19T00:00:00+00:00</updated><author><name>Brett Cannon</name></author><id>tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--import-this--that--and-the-other-thin.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Import this, that, and the other thing. Custom importers&lt;/p&gt;
&lt;p&gt;Presented by Brett Cannon&lt;/p&gt;
&lt;p&gt;Since Python 2.3, the ability has existed to customize the import
process so that one can support code stored in alternative formats, e.g.
zipimport and its support of importing code from a zip file. The aim of
this talk is to make sure you understand how the custom import mechanism
works and how to write your own custom importers using importlib from
Python 3.1.&lt;/p&gt;
</summary><category term="import"></category><category term="importers"></category><category term="importing"></category><category term="pycon"></category><category term="pycon2010"></category></entry><entry><title>Panel: Python VMs</title><link href="https://pyvideo.org/pycon-us-2011/panel-python-vms.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Brett Cannon</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/panel-python-vms.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Panel: Python VMs&lt;/p&gt;
&lt;p&gt;Presented by Jacob Kaplan-Moss, Brett Cannon, Maciej Fijalkowski, Frank
Wierzbicki, Dino Viehland&lt;/p&gt;
&lt;p&gt;Python is lucky enough to have a healthy ecosystem of virtual machines
(VMs) exist. CPython, Jython, IronPython, and PyPy are all used
extensively by people in real-world situations. This panel brings
together a representative from each of the major VMs to discuss where
they are now, going in the future, and to answer questions from the
community.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;All four major Python VMs will be represented:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://python.org/"&gt;CPython&lt;/a&gt;: Brett Cannon&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.jython.org/"&gt;Jython&lt;/a&gt;: Frank Wierzbicki&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://ironpython.net/"&gt;IronPython&lt;/a&gt;: Dino Viehland&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://pypy.org/"&gt;PyPy&lt;/a&gt;: Maciej Fijalkowski Moderation will be
handled by Jacob Kaplan-Moss of Django.&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="cpython"></category><category term="ironpython"></category><category term="jython"></category><category term="pycon"></category><category term="pycon2011"></category><category term="pypy"></category></entry><entry><title>Saturday Morning Lightning Talks</title><link href="https://pyvideo.org/pycon-us-2011/pycon-2011--saturday-morning-lightning-talks.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Alfredo Deza</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--saturday-morning-lightning-talks.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Saturday morning lightning talks&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Saturday Morning Lightning Talks&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;00:00 Alfredo Deza - Faster VIM Python Editing
(&lt;a class="reference external" href="https://github.com/alfredodeza/chapa.vim"&gt;github.com/alfredodeza/chapa.vim&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;03:40 Dean Hall - Python-on-a-chip
(&lt;a class="reference external" href="http://pythononachip.org/"&gt;pythononachip.org&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;07:55 Ned Batchelder - Cog will make you happy
(&lt;a class="reference external" href="http://nedbatchelder.com/code/cog"&gt;nedbatchelder.com/code/cog&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;13:55 Brett Cannon - (Some of) your PSF money at work&lt;/li&gt;
&lt;li&gt;21:10 Baiju Muthukaden - GetPython3.net
(&lt;a class="reference external" href="http://getpython3.net/"&gt;getpython3.net&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;25:20 Shai Ben-yehuda - Light-weight UI&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;[VIDEO HAS ISSUES: slides for Alfredo's and Ned's talks are impossible
to read.]&lt;/p&gt;
</summary><category term="lightning talks"></category><category term="chapa.vim"></category><category term="cog"></category><category term="pycon"></category><category term="pycon2011"></category><category term="pymite"></category><category term="python3"></category><category term="pythononachip"></category><category term="vim"></category></entry><entry><title>How Import Works</title><link href="https://pyvideo.org/pycon-us-2013/how-import-works.html" rel="alternate"></link><published>2013-03-17T00:00:00+00:00</published><updated>2013-03-17T00:00:00+00:00</updated><author><name>Brett Cannon</name></author><id>tag:pyvideo.org,2013-03-17:pycon-us-2013/how-import-works.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;This talk will go over how the simple &lt;tt class="docutils literal"&gt;from sys import version&lt;/tt&gt; turns
out to be slightly complicated. The details of imports -- from how the
import statement is interpreted to deciding what object to return --
will be discussed. While the talk will discuss things from the
perspective of Python 3.3 (and thus importlib), the overall semantics
will (mostly) apply to older versions of Python.&lt;/p&gt;
</summary><category term="talk"></category></entry><entry><title>Python 3.3: Trust Me, It's Better than 2.7</title><link href="https://pyvideo.org/pycon-us-2013/python-33-trust-me-its-better-than-27.html" rel="alternate"></link><published>2013-03-15T00:00:00+00:00</published><updated>2013-03-15T00:00:00+00:00</updated><author><name>Brett Cannon</name></author><id>tag:pyvideo.org,2013-03-15:pycon-us-2013/python-33-trust-me-its-better-than-27.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;In this talk I will try to convince you that Python 3.3 is superior to
Python 2.7 by going over the differences between Python 2.7 and Python
3.3 along with benchmark information to show where Python 3.3 shines in
comparison to Python 2.7 (and vice-versa). If I accomplish my goal, you
will walk out of this talk convinced that Python 2.7 is not the final
version of Python you want to support.&lt;/p&gt;
</summary><category term="talk"></category></entry><entry><title>Opening Statements - PyCon 2014 (2014/04/11)</title><link href="https://pyvideo.org/pycon-us-2014/opening-statements-pycon-2014-20140411.html" rel="alternate"></link><published>2014-04-11T00:00:00+00:00</published><updated>2014-04-11T00:00:00+00:00</updated><author><name>Brett Cannon</name></author><id>tag:pyvideo.org,2014-04-11:pycon-us-2014/opening-statements-pycon-2014-20140411.html</id><summary type="html"></summary></entry><entry><title>How to make your code Python 2/3 compatible</title><link href="https://pyvideo.org/pycon-us-2015/how-to-make-your-code-python-23-compatible.html" rel="alternate"></link><published>2015-04-11T00:00:00+00:00</published><updated>2015-04-11T00:00:00+00:00</updated><author><name>Brett Cannon</name></author><id>tag:pyvideo.org,2015-04-11:pycon-us-2015/how-to-make-your-code-python-23-compatible.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;You know Python 3 is an improvement over Python 2 and you want to use
it. Unfortunately you have legacy Python 2 source code that needs to
stay compatible. But don't fret! This talk will show you that you can
make your code be Python 2/3 source-compatible using various tools to
pick up the nitty-gritty work and help modernize your Python code to
newer Python 2 practices.&lt;/p&gt;
</summary></entry></feed>