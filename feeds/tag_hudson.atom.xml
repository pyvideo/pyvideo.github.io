<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/tag_hudson.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2011-03-11T00:00:00+00:00</updated><entry><title>Why not run all your tests all the time? A study of continuous integration systems (#160)</title><link href="https://pyvideo.org/pycon-us-2010/pycon-2010--why-not-run-all-your-tests-all-the-ti.html" rel="alternate"></link><published>2010-02-19T00:00:00+00:00</published><updated>2010-02-19T00:00:00+00:00</updated><author><name>C. Titus Brown</name></author><id>tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--why-not-run-all-your-tests-all-the-ti.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Why not run all your tests at all the time? A study of continuous
integration systems&lt;/p&gt;
&lt;p&gt;Presented by Dr. C. Titus Brown (Michigan State University)&lt;/p&gt;
&lt;p&gt;There are an increasing number of continuous integration (CI) systems
available for use by Pythonistas, but no clear guide to how to choose a
CI system for your project. I will examine the architecture choices made
by buildbot, bitten, Hudson, continuum, CruiseControl, DART, and
pony-build, and discuss the configuration and customization of several
of these systems for Pythonic needs, as well as give short demos (for
buildbot, bitten, Hudson, and pony-build).&lt;/p&gt;
</summary><category term="bitten"></category><category term="buildbot"></category><category term="ci"></category><category term="cruisecontrol"></category><category term="dart"></category><category term="hudson"></category><category term="pony-build"></category><category term="pycon"></category><category term="pycon2010"></category><category term="testing"></category></entry><entry><title>Supporting All Versions of Python All The Time With Tox</title><link href="https://pyvideo.org/pycon-us-2011/pycon-2011--supporting-all-versions-of-python-all.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Kumar McMillan</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--supporting-all-versions-of-python-all.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Supporting All Versions of Python All The Time With Tox&lt;/p&gt;
&lt;p&gt;Presented by Kumar McMillan&lt;/p&gt;
&lt;p&gt;This talk explains the modern techniques that every module maintainer
needs to know in order to support all major versions of Python. You
probably already have a massive test suite using a tool like nosetests,
py.test, unittest, or a custom runner. Using the tox command line tool,
you'll see how to run your tests in Python 2.x, 3.x, Jython, and
whatever else in parallel.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;tox is a new tool that lets you set up isolated virtual environments to
test your module's deployment and compatibility with all major versions
of Python. It's easy to install and is flexible enough that it probably
already supports your existing test suite. With one simple command you
can execute your test suite in each version of Python, you can build its
documentation with Sphinx, and get a nice printout of the results. It
has also been designed from the ground up to integrate into continuous
integration (CI) tools like Hudson.&lt;/p&gt;
&lt;p&gt;Using practical examples, this talk will show you how to toxify your
existing test suite and trick it out with the tox.ini config file.
You'll also see how to leverage Hudson's matrix build so that each code
checkin will run tests in all versions of Python and report detailed
failures.&lt;/p&gt;
&lt;p&gt;Your app supports Python 3, right? No? Tox is the best way to develop in
parallel with 2.x and 3.x. We'll go over how to set up tox for that.&lt;/p&gt;
</summary><category term="ci"></category><category term="hudson"></category><category term="pycon"></category><category term="pycon2011"></category><category term="testing"></category><category term="tox"></category></entry></feed>