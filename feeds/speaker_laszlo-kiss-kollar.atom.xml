<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org - Laszlo Kiss Kollar</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_laszlo-kiss-kollar.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2023-04-23T00:00:00+00:00</updated><subtitle></subtitle><entry><title>The wheelhouse of horrors</title><link href="https://pyvideo.org/pycon-us-2023/the-wheelhouse-of-horrors.html" rel="alternate"></link><published>2023-04-23T00:00:00+00:00</published><updated>2023-04-23T00:00:00+00:00</updated><author><name>Laszlo Kiss Kollar</name></author><id>tag:pyvideo.org,2023-04-23:/pycon-us-2023/the-wheelhouse-of-horrors.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;You might be surprised to learn that, besides naming and cache
invalidation problems, building a binary wheel for a Python extension is
one of the hardest problems in computer science. Or more precisely,
building that binary wheel correctly. Lucky for us, a few amazing
community-led projects hide all that …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;You might be surprised to learn that, besides naming and cache
invalidation problems, building a binary wheel for a Python extension is
one of the hardest problems in computer science. Or more precisely,
building that binary wheel correctly. Lucky for us, a few amazing
community-led projects hide all that complexity from us, so we can
instead focus on shipping and using Python code.&lt;/p&gt;
&lt;p&gt;One of Python's strong suits is its ability to use native C and C++
code, which is a big reason why it’s the number one language for date
science and machine learning applications. However, distributing native
code in Python libraries is far from trivial: subtle issues in the build
process can result in runtime issues that are extremely difficult to
track down.&lt;/p&gt;
&lt;p&gt;This talk will showcase some notable examples of how things can go
wrong, while also helping users and maintainers recognise these typical
error scenarios. We will learn how to avoid these issues and what users
can do when they encounter such issues when using a library.&lt;/p&gt;
&lt;p&gt;The audience will learn about the manylinux standard and its role in
standardizing Linux platform wheels. We will also take a look at the
cibuildwheel project, which offers library authors a simple solution to
automate the building and distribution of manylinux wheels.&lt;/p&gt;
</content><category term="PyCon US 2023"></category></entry><entry><title>Python &amp; Bloomberg: An Open Source Duo (Sponsor: Bloomberg)</title><link href="https://pyvideo.org/pycon-us-2023/python-bloomberg-an-open-source-duo-sponsor-bloomberg.html" rel="alternate"></link><published>2023-04-20T00:00:00+00:00</published><updated>2023-04-20T00:00:00+00:00</updated><author><name>Pradyun Gedam</name></author><id>tag:pyvideo.org,2023-04-20:/pycon-us-2023/python-bloomberg-an-open-source-duo-sponsor-bloomberg.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Join this talk where we will briefly introduce Bloomberg and have some
of our engineers discuss their engagement in the Python Open Source
ecosystem. We will also present some exciting troubleshooting tools that
are widely used at Bloomberg that we are publishing as open source. You
will leave this …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Join this talk where we will briefly introduce Bloomberg and have some
of our engineers discuss their engagement in the Python Open Source
ecosystem. We will also present some exciting troubleshooting tools that
are widely used at Bloomberg that we are publishing as open source. You
will leave this talk having learned about the technical details and new
features related to these open source tools, which you might use daily
in the future!&lt;/p&gt;
</content><category term="PyCon US 2023"></category></entry></feed>