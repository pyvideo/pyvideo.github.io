<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org - Chris Anderson</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_chris-anderson.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2025-04-12T00:00:00+00:00</updated><subtitle></subtitle><entry><title>Generators: The Unsung Hero of Async Programming</title><link href="https://pyvideo.org/pytexas-2025/generators-the-unsung-hero-of-async-programming.html" rel="alternate"></link><published>2025-04-12T00:00:00+00:00</published><updated>2025-04-12T00:00:00+00:00</updated><author><name>Chris Anderson</name></author><id>tag:pyvideo.org,2025-04-12:/pytexas-2025/generators-the-unsung-hero-of-async-programming.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Async is often about tackling IO-bound, high concurrency work, but it can also be about long running, interruptible work. While we frequently think about generators in the context of iterators, generators are a great fit in any scenario where the function needs to be interruptible and resumable. In this …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Async is often about tackling IO-bound, high concurrency work, but it can also be about long running, interruptible work. While we frequently think about generators in the context of iterators, generators are a great fit in any scenario where the function needs to be interruptible and resumable. In this talk, we’ll take a fresh look at generators and look at how we used them to build a durable orchestration framework.&lt;/p&gt;
</content><category term="PyTexas 2025"></category></entry></feed>