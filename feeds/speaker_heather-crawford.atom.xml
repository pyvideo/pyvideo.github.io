<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org - Heather Crawford</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_heather-crawford.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2025-04-12T00:00:00+00:00</updated><subtitle></subtitle><entry><title>Python Code vs. Pythonic Code: What Experienced Developers Find Challenging About Learning Python (Sponsor: Bloomberg)</title><link href="https://pyvideo.org/pycon-us-2024/python-code-vs-pythonic-code-what-experienced-developers-find-challenging-about-learning-python-sponsor-bloomberg.html" rel="alternate"></link><published>2024-05-16T00:00:00+00:00</published><updated>2024-05-16T00:00:00+00:00</updated><author><name>Heather Crawford</name></author><id>tag:pyvideo.org,2024-05-16:/pycon-us-2024/python-code-vs-pythonic-code-what-experienced-developers-find-challenging-about-learning-python-sponsor-bloomberg.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python has a reputation for being very easy to learn. Despite this,
experienced developers often struggle with working as effectively with
Python (e.g., writing Pythonic code) as they are with other programming
languages with which they are more familiar. This talk will leverage the
experiences of a professional …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python has a reputation for being very easy to learn. Despite this,
experienced developers often struggle with working as effectively with
Python (e.g., writing Pythonic code) as they are with other programming
languages with which they are more familiar. This talk will leverage the
experiences of a professional trainer to demystify this dichotomy with
the goal of understanding the motivating reasons for it, and making
suggestions on how to help developers new to Python move quickly from
writing Python code to writing Pythonic code.&lt;/p&gt;
</content><category term="PyCon US 2024"></category></entry><entry><title>Python Code vs Pythonic Code</title><link href="https://pyvideo.org/pytexas-2024/python-code-vs-pythonic-code.html" rel="alternate"></link><published>2024-04-20T00:00:00+00:00</published><updated>2024-04-20T00:00:00+00:00</updated><author><name>Heather Crawford</name></author><id>tag:pyvideo.org,2024-04-20:/pytexas-2024/python-code-vs-pythonic-code.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python Code vs. Pythonic Code: What Experienced Developers Find Challenging About Learning Python&lt;/p&gt;
&lt;p&gt;Python has a reputation for being very easy to learn. Despite this, experienced developers often struggle with working as effectively with Python (e.g., writing Pythonic code) as they are with other programming languages with which …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python Code vs. Pythonic Code: What Experienced Developers Find Challenging About Learning Python&lt;/p&gt;
&lt;p&gt;Python has a reputation for being very easy to learn. Despite this, experienced developers often struggle with working as effectively with Python (e.g., writing Pythonic code) as they are with other programming languages with which they are more familiar. This talk will leverage the experiences of a professional trainer to demystify this dichotomy with the goal of understanding the motivating reasons for it, and making suggestions on how to help developers new to Python move quickly from writing Python code to writing Pythonic code.&lt;/p&gt;
&lt;p&gt;Speaker: Heather Crawford&lt;/p&gt;
&lt;p&gt;Heather Crawford is an Engineering Technical Trainer at Bloomberg and a former university professor. In her roles as a professional educator, she has taught learners at many levels from university students at all levels to both entry-level and experienced software engineers. Heather is a Python lover, who has used it since 2007.&lt;/p&gt;
</content><category term="PyTexas 2024"></category></entry><entry><title>The Pythonic Ideal in the Age of Generative AI</title><link href="https://pyvideo.org/pytexas-2025/the-pythonic-ideal-in-the-age-of-generative-ai.html" rel="alternate"></link><published>2025-04-12T00:00:00+00:00</published><updated>2025-04-12T00:00:00+00:00</updated><author><name>Heather Crawford</name></author><id>tag:pyvideo.org,2025-04-12:/pytexas-2025/the-pythonic-ideal-in-the-age-of-generative-ai.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The advent of generative Artificial Intelligence (AI) programs, such as ChatGPT, and code pair programming tools, such as GitHub Copilot, has ushered in concerns about whether or not it is still valuable to learn to write code, or to continue to improve our ability to write idiomatic, beautiful code …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The advent of generative Artificial Intelligence (AI) programs, such as ChatGPT, and code pair programming tools, such as GitHub Copilot, has ushered in concerns about whether or not it is still valuable to learn to write code, or to continue to improve our ability to write idiomatic, beautiful code. The reality is that generative AI programs can write code that is poor quality or incorrect. In addition, generative AI is still in its infancy and cannot yet replace human innovation or innate expertise for complex tasks, such as writing Pythonic code. Do we need to be worried about AI taking over coding jobs? This talk will cover why learning to write Pythonic code is still a valuable skill to pursue, and will introduce techniques to add generative AI and pair programming AI tools into your teaching (and learning!).&lt;/p&gt;
</content><category term="PyTexas 2025"></category></entry></feed>