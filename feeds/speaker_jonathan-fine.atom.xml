<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_jonathan-fine.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2017-10-27T15:00:00+01:00</updated><entry><title>Combinatorics, graphs, and complexity</title><link href="https://pyvideo.org/pycon-uk-2017/combinatorics-graphs-and-complexity.html" rel="alternate"></link><published>2017-10-27T15:00:00+01:00</published><updated>2017-10-27T15:00:00+01:00</updated><author><name>Jonathan Fine</name></author><id>tag:pyvideo.org,2017-10-27:pycon-uk-2017/combinatorics-graphs-and-complexity.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Bill Tutte broke the Lorenz cipher and, after the war, pioneered graph theory and their associated matroids. Each graph G determines a matroid convex polytope G.&lt;/p&gt;
&lt;p&gt;For simple convex polytopes, homology provides non-negative integers g[0], g[1], g[2], etc. Each g[i] gives a bound for g[i+1], and if g[i] is zero then so is g[i+1]. These g[i] nicely measure complexity.&lt;/p&gt;
&lt;p&gt;Usually, P(G) is not simple. Defining the homology of general convex polytopes is the speaker's main research problem. It's hard.&lt;/p&gt;
&lt;p&gt;But all is not lost. Every convex polytope X has a flag vector f(X), as we expect the complexity of a graph to be a linear function of f(P(G)). And we already have part of the g[i].&lt;/p&gt;
&lt;p&gt;The speaker hopes this talk contributes to the dialogue between data science and pure mathematics, to the benefit of both sides.&lt;/p&gt;
</summary></entry><entry><title>Tests without boilerplate</title><link href="https://pyvideo.org/pycon-uk-2014/tests-without-boilerplate.html" rel="alternate"></link><published>2014-10-13T00:00:00+00:00</published><updated>2014-10-13T00:00:00+00:00</updated><author><name>Jonathan Fine</name></author><id>tag:pyvideo.org,2014-10-13:pycon-uk-2014/tests-without-boilerplate.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Presented by: Jonathan Fine&lt;/p&gt;
&lt;p&gt;This talk is about a new way of writing tests.&lt;/p&gt;
&lt;p&gt;We arrange matters so that the expression statement &lt;cite&gt;add(2, 2) == 4&lt;/cite&gt; reports a test failure if &lt;cite&gt;add(2, 2)&lt;/cite&gt; does not return &lt;cite&gt;4&lt;/cite&gt;.&lt;/p&gt;
&lt;p&gt;Similarly &lt;cite&gt;add(2, '2') ** TypeError&lt;/cite&gt; reports a test failure if &lt;cite&gt;add(2, '2')&lt;/cite&gt; does not raise a &lt;cite&gt;TypeError&lt;/cite&gt; exception.&lt;/p&gt;
&lt;p&gt;These new semantics (which provide no-boilerplate testing) do not apply when comparison expressions are used in conditional statements etc.&lt;/p&gt;
&lt;p&gt;I will demonstrate Python software that implements this, and will discuss with you the use, benefits and development of this new approach to writing tests.&lt;/p&gt;
</summary></entry><entry><title>Chromebooks in education - the next five years</title><link href="https://pyvideo.org/pycon-uk-2015/chromebooks-in-education-the-next-five-years.html" rel="alternate"></link><published>2015-09-19T00:00:00+00:00</published><updated>2015-09-19T00:00:00+00:00</updated><author><name>Jonathan Fine</name></author><id>tag:pyvideo.org,2015-09-19:pycon-uk-2015/chromebooks-in-education-the-next-five-years.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;North American schools will, in 2015, buy 3.6 million chromebooks, out
of global sales of 7.3 million (and 8 million predicted for 2016). In
this market they are outselling iPads and will soon challenge Microsoft.
Perhaps Europe will follow.&lt;/p&gt;
&lt;p&gt;This talk will give a social, economic and technical survey of
chromebooks, looking ahead to the next five years. A major problem is
using chromebooks as a platform for learning Python. This is because,
like iPhones, they are locked down (except that they support a
'developer mode' that allows your own version of Linux to be run as a
guest operating system).&lt;/p&gt;
&lt;p&gt;This year I replaced my laptop with a chromebook.&lt;/p&gt;
</summary></entry><entry><title>Browse and print problems and solutions</title><link href="https://pyvideo.org/europython-2011/browse-and-print-problems-and-solutions.html" rel="alternate"></link><published>2012-02-27T00:00:00+00:00</published><updated>2012-02-27T00:00:00+00:00</updated><author><name>Jonathan Fine</name></author><id>tag:pyvideo.org,2012-02-27:europython-2011/browse-and-print-problems-and-solutions.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Jonathan Fine - 21 June 2011 in &amp;quot;Track Tagliatelle&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;With the growth of the web, how we publish is changing. Paper alone is
not enough, web pages are also required. And for many web pages it is
not enough to rely on the browser’s print capabilities. Sphinx, used
since 2008 for Python’s documentation, is a creative response to this
tension.&lt;/p&gt;
&lt;p&gt;This talk will take a broader view of the problem. For example, many
browsers support web fonts for display but not for printing. Mathematics
on web pages is still difficult, but SVG holds out much promise not only
for mathematics but for tables and other complex typeset material.
Achieving accessibility remains difficult.&lt;/p&gt;
&lt;p&gt;Based on over 15 year’s experience in print and electronic publishing,
this talk will survey problems and emerging solutions. Software and
sites covered include LaTeX, PDF, SVG, MathJax, web-fonts, PediaPress,
Sphinx and arXiv.&lt;/p&gt;
</summary><category term="accessibility"></category><category term="sphinx"></category><category term="web"></category></entry><entry><title>Objects and classes in Python (and JavaScript)</title><link href="https://pyvideo.org/europython-2011/objects-and-classes-in-python-and-javascript.html" rel="alternate"></link><published>2011-07-21T00:00:00+00:00</published><updated>2011-07-21T00:00:00+00:00</updated><author><name>Jonathan Fine</name></author><id>tag:pyvideo.org,2011-07-21:europython-2011/objects-and-classes-in-python-and-javascript.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Jonathan Fine - 23 June 2011 in &amp;quot;Training Pizza Napoli&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python has a well-thought out system for classes. Beginners can use it
without understanding it all. Experts can use it to produce code that is
both elegant and powerful (such as models and class-based views in
Django). Python classes can be used for many purposes.&lt;/p&gt;
&lt;p&gt;This tutorial arises from the author's experience in using classes to
solve problems, such as:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Add custom methods and attributes to objects that are, at root, just an integer&lt;/li&gt;
&lt;li&gt;Construct dictionaries whose values are functions&lt;/li&gt;
&lt;li&gt;Construct classes on-the-fly&lt;/li&gt;
&lt;li&gt;Implement JavaScript object semantics in Python (advanced topic)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The outline syllabus is:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Review of the class statement in Python (and decorators)&lt;/li&gt;
&lt;li&gt;Subclassing built-in types such as int and tuple&lt;/li&gt;
&lt;li&gt;How to define classes without using a class statement&lt;/li&gt;
&lt;li&gt;How to define a dispatch dictionary using a class statement&lt;/li&gt;
&lt;li&gt;Metaclasses as syntactic sugar for class construction&lt;/li&gt;
&lt;li&gt;Metaclasses to provide new class semantics&lt;/li&gt;
&lt;li&gt;Review of JavaScript object semantics&lt;/li&gt;
&lt;li&gt;Using Python classes to implement JavaScript object semantics&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For Guido on the history of Python classes see:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://python-history.blogspot.com/2010/06/new-style-classes.html"&gt;http://python-history.blogspot.com/2010/06/new-style-classes.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://python-history.blogspot.com/2010/06/inside-story-on-new-style-classes.html"&gt;http://python-history.blogspot.com/2010/06/inside-story-on-new-style-classes.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://python-history.blogspot.com/2010/06/method-resolution-order.html"&gt;http://python-history.blogspot.com/2010/06/method-resolution-order.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This tutorial is for Intermediate or Advanced Python programmers.
(Beginners will find it very hard going.) The aim of the course is to
explain exactly what happens when a class in constructed, and to learn
ways of using this knowledge.&lt;/p&gt;
</summary><category term="dictionaries"></category><category term="javascript"></category><category term="tutorial"></category></entry></feed>