<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/tag_casestudy.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2012-03-11T00:00:00+00:00</updated><entry><title>PyOhio 2011: Evolving an internal web service</title><link href="https://pyvideo.org/pyohio-2011/pyohio-2011--evolving-an-internal-web-service.html" rel="alternate"></link><published>2011-07-30T00:00:00+00:00</published><updated>2011-07-30T00:00:00+00:00</updated><author><name>Taavi Burns</name></author><id>tag:pyvideo.org,2011-07-30:pyohio-2011/pyohio-2011--evolving-an-internal-web-service.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Evolving an internal web service&lt;/p&gt;
&lt;p&gt;Presented by Taavi Burns&lt;/p&gt;
&lt;p&gt;Over the past few years, FreshBooks' core business logic has been moving
into a Python web-service backend using Pylons and SQLAlchemy. Come hear
why we did it, and stories of its architecture, testing methods,
deployment, and monitoring.&lt;/p&gt;
</summary><category term="casestudy"></category><category term="freshbooks"></category><category term="pylons"></category><category term="pyohio"></category><category term="pyohio2011"></category><category term="sqlalchemy"></category></entry><entry><title>PyOhio 2011: PHP to Python with No Regrets</title><link href="https://pyvideo.org/pyohio-2011/pyohio-2011--php-to-python-with-no-regrets.html" rel="alternate"></link><published>2011-07-30T00:00:00+00:00</published><updated>2011-07-30T00:00:00+00:00</updated><author><name>Alex Ezell</name></author><id>tag:pyvideo.org,2011-07-30:pyohio-2011/pyohio-2011--php-to-python-with-no-regrets.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PHP to Python with No Regrets&lt;/p&gt;
&lt;p&gt;Presented by Alex Ezell&lt;/p&gt;
&lt;p&gt;At Emma, we are transforming an eight year old PHP codebase into an
API-driven service written in Python. Facing down the triple threat of
bad data, encoding issues, and a generation of code cruft, we've begun
to see the light of day. Come hear how we did it, where we fell down and
where we're succeeding.&lt;/p&gt;
</summary><category term="casestudy"></category><category term="conversion"></category><category term="php"></category><category term="pyohio"></category><category term="pyohio2011"></category></entry><entry><title>PyOhio 2011: Python and Entrepreneurship</title><link href="https://pyvideo.org/pyohio-2011/pyohio-2011--python-and-entrepreneurship.html" rel="alternate"></link><published>2011-07-30T00:00:00+00:00</published><updated>2011-07-30T00:00:00+00:00</updated><author><name>Unknown</name></author><id>tag:pyvideo.org,2011-07-30:pyohio-2011/pyohio-2011--python-and-entrepreneurship.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python and Entrepeneurship&lt;/p&gt;
&lt;p&gt;Panel: Eric Floehr, Matt Wilson, Isaac, Kelly, Carl Karsten&lt;/p&gt;
&lt;p&gt;This will be an audience-led discussion with a number of Midwest
entrepreneurs who do Python consulting, sell products built on Python,
or who use Python as an integral part of their business operations.&lt;/p&gt;
</summary><category term="casestudy"></category><category term="entrepeneurship"></category><category term="pyohio"></category><category term="pyohio2011"></category></entry><entry><title>NoSQL and Django Panel</title><link href="https://pyvideo.org/djangocon-us-2010/djangocon-2010--nosql-and-django-panel.html" rel="alternate"></link><published>2010-09-09T00:00:00+00:00</published><updated>2010-09-09T00:00:00+00:00</updated><author><name>Jacob Burch</name></author><id>tag:pyvideo.org,2010-09-09:djangocon-us-2010/djangocon-2010--nosql-and-django-panel.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A panel to discuss the future of no-sql/non-related databases in Django.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;The proliferation of non-SQL speaking datastores has caused a lot of
discourse and debate over their potential role in Django's decidedly
SQL-speaking ORM. The goal of this panel is to consolidate and discuss
the root questions of this debate.&lt;/p&gt;
&lt;p&gt;The panel will consist of Django orm contributors and heavy end-users of
both Django and a variety of NoSQL database solutions. Questions to the
panel will briefly cover the NoSQL movement in general and it's staying
power. After that introduction to the debates at hand outside of Django,
questions will shift to focus closely on the issues into integrating
NoSQL and Django--both on current best practices and future plans for
integrating it into the core.&lt;/p&gt;
</summary><category term="casestudy"></category><category term="djangocon"></category><category term="djangocon2010"></category><category term="nosql"></category><category term="orm"></category></entry><entry><title>Making the leap to Django</title><link href="https://pyvideo.org/djangocon-us-2010/djangocon-2010--making-the-leap-to-django.html" rel="alternate"></link><published>2010-09-08T00:00:00+00:00</published><updated>2010-09-08T00:00:00+00:00</updated><author><name>Terry J. Owen</name></author><id>tag:pyvideo.org,2010-09-08:djangocon-us-2010/djangocon-2010--making-the-leap-to-django.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;How to move your small development team from PHP to Django in less than
a month.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;The Victoria Advocate was once a purely PHP development shop. But over
the course of one month the development manager said &amp;quot;we need to move to
Django.&amp;quot;&lt;/p&gt;
&lt;p&gt;This talk will focus on some of the challenges and successes experienced
during this month.&lt;/p&gt;
</summary><category term="casestudy"></category><category term="djangocon"></category><category term="djangocon2010"></category></entry><entry><title>Switching addons.mozilla.org from CakePHP to Django</title><link href="https://pyvideo.org/djangocon-us-2010/djangocon-2010--switching-addons-mozilla-org-from.html" rel="alternate"></link><published>2010-09-07T00:00:00+00:00</published><updated>2010-09-07T00:00:00+00:00</updated><author><name>Jeff Balogh</name></author><id>tag:pyvideo.org,2010-09-07:djangocon-us-2010/djangocon-2010--switching-addons-mozilla-org-from.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In January of 2010 Mozilla started switching addons.mozilla.org (AMO)
from CakePHP to Django. We see about 120 million web requests per month
and 1.4 million visitors per day. This talk will be a case study of
scaling and deploying a large website (and getting faster than PHP) with
MySQL, memcached, virtualenv, Celery, Hudson, Redis, MongoDB, and more.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;To scale the backend of AMO, we rely heavily on caching in memcached
(and soon Redis) to keep the load off our database, and multidb to
spread the load we can't dump off on cache. Our caching ranges from
object and query caching, to template fragment caching, up to full
response caching. Frontend caching is external to Django and won't be
covered. In addition, we work hard to measure and improve raw speed.
Hitting indexes and keeping datasets small is critical, and the Django
ecosystem has many great tools to help us profile.&lt;/p&gt;
&lt;p&gt;We create development environments using pip and virtualenv, so we
naturally started using that setup to deploy the site in production. We
ran into issues creating a reliable environment with this method;
switching to a separate vendor repository solved our problems with only
a small amount of added effort. We update and deploy new code at least
once a week, and have to deal with the additional complication of
managing and interacting with parts of the PHP site that have not been
ported over.&lt;/p&gt;
&lt;p&gt;Apart from scaling and deployment, we've customized our application in
ways that could be interesting to other Django users:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Jinja is our templating engine (but we keep the admin working)&lt;/li&gt;
&lt;li&gt;Babel helps us localize the site in over 30 languages&lt;/li&gt;
&lt;li&gt;Sphinx (not the documentation tool) serves our search results&lt;/li&gt;
&lt;li&gt;Celery and RabbitMQ help us do offline processing&lt;/li&gt;
&lt;li&gt;Nose and Hudson help us get over 90% code coverage in tests&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="casestudy"></category><category term="djangocon"></category><category term="djangocon2010"></category></entry><entry><title>Typewar: A Case Study</title><link href="https://pyvideo.org/djangocon-us-2010/djangocon-2010--typewar--a-case-study.html" rel="alternate"></link><published>2010-09-07T00:00:00+00:00</published><updated>2010-09-07T00:00:00+00:00</updated><author><name>James Tauber</name></author><id>tag:pyvideo.org,2010-09-07:djangocon-us-2010/djangocon-2010--typewar--a-case-study.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Typewar is a popular font-guessing game built with Django and Pinax.
This talk will cover everything from game mechanics and statistics to
development of an API for an iPhone client and from how we promoted and
launched the site to the performance challenges we faced.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;Typewar was developed as a side project at Eldarion and went from
concept to launch in a matter of weeks. The first day saw 5,000 visitors
and since then, over 50,000 people have attempted to &amp;quot;guess the
typeface&amp;quot; more than 5 million times.&lt;/p&gt;
&lt;p&gt;The talk will cover:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;how we went from concept to design mockup to prototype&lt;/li&gt;
&lt;li&gt;game mechanics such as:&lt;ul&gt;
&lt;li&gt;points&lt;/li&gt;
&lt;li&gt;levels&lt;/li&gt;
&lt;li&gt;badges&lt;/li&gt;
&lt;li&gt;streaks&lt;/li&gt;
&lt;li&gt;leader boards&lt;/li&gt;
&lt;li&gt;stats (with lots of bayesian goodness)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;generation of glyphs with PIL&lt;/li&gt;
&lt;li&gt;mitigation against cheaters&lt;/li&gt;
&lt;li&gt;twitter integration&lt;/li&gt;
&lt;li&gt;migrating unauthenticated user data over on sign up / log in&lt;/li&gt;
&lt;li&gt;activity streams&lt;/li&gt;
&lt;li&gt;performance challenges&lt;/li&gt;
&lt;li&gt;database optimizations&lt;/li&gt;
&lt;li&gt;queuing of asynchronous tasks&lt;/li&gt;
&lt;li&gt;development of an API for use in an iPhone client&lt;/li&gt;
&lt;li&gt;deployment&lt;/li&gt;
&lt;li&gt;how we promoted and launched the site&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We will also discuss various open source Django apps that have been
extracted from the project and used on subsequent sites by us and
others.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://typewar.com/"&gt;http://typewar.com/&lt;/a&gt;&lt;/p&gt;
</summary><category term="casestudy"></category><category term="djangocon"></category><category term="djangocon2010"></category></entry><entry><title>The story and tech of Read the Docs</title><link href="https://pyvideo.org/djangocon-us-2011/djangocon-2011--the-story-and-tech-of-read-the-do.html" rel="alternate"></link><published>2011-09-05T00:00:00+00:00</published><updated>2011-09-05T00:00:00+00:00</updated><author><name>Eric Holscher</name></author><id>tag:pyvideo.org,2011-09-05:djangocon-us-2011/djangocon-2011--the-story-and-tech-of-read-the-do.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The story and tech of Read the Docs&lt;/p&gt;
&lt;p&gt;Presented by Eric Holscher&lt;/p&gt;
&lt;p&gt;Hosting open source documentation was a mess. The best-of-class solution
for the Python world as uploading a tarball of html to
packages.python.org or doing similar to upload to github pages. We set
out to solve this problem using the current best of class tools that
Django has to offer.&lt;/p&gt;
</summary><category term="casestudy"></category><category term="djangocon"></category><category term="djangocon2011"></category><category term="documentation"></category><category term="readthedocs"></category><category term="rtd"></category><category term="rtfd"></category></entry><entry><title>Michael Hudson - How we use Twisted in Launchpad</title><link href="https://pyvideo.org/kiwi-pycon-2009/michael-hudson---how-we-use-twisted-in-launchpad.html" rel="alternate"></link><published>2009-11-07T00:00:00+00:00</published><updated>2009-11-07T00:00:00+00:00</updated><author><name>Michael Hudson-Doyle</name></author><id>tag:pyvideo.org,2009-11-07:kiwi-pycon-2009/michael-hudson---how-we-use-twisted-in-launchpad.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;How we use Twisted in Launchpad&lt;/p&gt;
&lt;p&gt;Presented by Michael Hudson-Doyle&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;Launchpad is a large, open source, &amp;quot;real world&amp;quot; Python project with many
moving parts. This talk will explain how Twisted helps us keep track of
them.&lt;/p&gt;
&lt;p&gt;Outline&lt;/p&gt;
&lt;p&gt;Although we don't use it for the core web application, most other places
in Launchpad that have to deal with concurrency issues do it using
Twisted. This talk will survey these areas and talk about issues we've
found and design patterns we've found helpful.&lt;/p&gt;
&lt;p&gt;[VIDEO HAS ISSUES: Sound and video are poor. Slides are hard to read.]&lt;/p&gt;
</summary><category term="casestudy"></category><category term="kiwipycon"></category><category term="kiwipycon2009"></category><category term="launchpad"></category><category term="twisted"></category></entry><entry><title>PyConAU 2010: Fast Engineering Computation in with Boost::Python and Numarray</title><link href="https://pyvideo.org/pycon-au-2010/pyconau-2010--fast-engineering-computation-in-wit.html" rel="alternate"></link><published>2010-06-26T00:00:00+00:00</published><updated>2010-06-26T00:00:00+00:00</updated><author><name>Filip Zalio</name></author><id>tag:pyvideo.org,2010-06-26:pycon-au-2010/pyconau-2010--fast-engineering-computation-in-wit.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Fast Engineering Computation in with Boost::Python and Numarray&lt;/p&gt;
&lt;p&gt;Presented by Filip Zalio (NEC Australia)&lt;/p&gt;
&lt;p&gt;In the 3G Mobile Research and Development Division in NEC Australia
(www.nec.com.au) we have been using Python based environment since 2005.
We run digital signal processing simulations of 3G and 4G mobile phone
radio links. Our simulations are CPU-bound, where efficient and fast
interfacing between C++ and Python is one of the keys to the growing
success of Python within NEC. In this short presentation, we describe
our current framework which achieves the fast processing.&lt;/p&gt;
</summary><category term="casestudy"></category><category term="pyconau"></category><category term="pyconau2010"></category></entry><entry><title>PyConAU 2010: Hard Real-time Python, or, Giant Robots of Doom</title><link href="https://pyvideo.org/pycon-au-2010/pyconau-2010--hard-real-time-python--or--giant-ro.html" rel="alternate"></link><published>2010-06-26T00:00:00+00:00</published><updated>2010-06-26T00:00:00+00:00</updated><author><name>Simon Wittber</name></author><id>tag:pyvideo.org,2010-06-26:pycon-au-2010/pyconau-2010--hard-real-time-python--or--giant-ro.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Hard Real-time Python, or, Giant Robots of Doom&lt;/p&gt;
&lt;p&gt;Presented by Simon Wittber (Different Methods Pty Ltd)&lt;/p&gt;
&lt;p&gt;Can you use Python to control a pair of 30 tonne robots as they spin at
72 kilometres per hour? Can you use Python to provide realtime collision
avoidance and fly-by-wire control?&lt;/p&gt;
&lt;p&gt;Yes, you can. See how Perth based engineering company Transmin Pty Ltd
(www.transmin.com.au) used Python to deliver a safety-crticial robotic
control system in record time.&lt;/p&gt;
&lt;p&gt;[NOTE: Missing first 2.5 minutes of talk, then camera audio for first
section]&lt;/p&gt;
</summary><category term="casestudy"></category><category term="pyconau"></category><category term="pyconau2010"></category><category term="robots"></category></entry><entry><title>PyConAU 2010: Python Goes to the Movies</title><link href="https://pyvideo.org/pycon-au-2010/pyconau-2010--python-goes-to-the-movies.html" rel="alternate"></link><published>2010-06-26T00:00:00+00:00</published><updated>2010-06-26T00:00:00+00:00</updated><author><name>Mark J Streatfield</name></author><id>tag:pyvideo.org,2010-06-26:pycon-au-2010/pyconau-2010--python-goes-to-the-movies.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python Goes to the Movies&lt;/p&gt;
&lt;p&gt;Presented by Mark J Streatfield (Dr. D. Studios.)&lt;/p&gt;
&lt;p&gt;As Hollywood continues to churn out blockbuster films such as Avatar,
the technology used to produce the eye popping visual effects is
increasingly becoming the nomenclature of the everyday movie-goer. While
attention is often paid to the headline techniques such as motion
capture and complex physics simulation, few realise that the majority of
the work is underpinned by a foundation of Python. This talk introduces
the application of Python in the visual effects industry.&lt;/p&gt;
</summary><category term="casestudy"></category><category term="pyconau"></category><category term="pyconau2010"></category></entry><entry><title>PyConAU 2010: Using Python in a scientific real-time data collection network</title><link href="https://pyvideo.org/pycon-au-2010/pyconau-2010--using-python-in-a-scientific-real-t.html" rel="alternate"></link><published>2010-06-26T00:00:00+00:00</published><updated>2010-06-26T00:00:00+00:00</updated><author><name>Dr. Paul Dyson</name></author><id>tag:pyvideo.org,2010-06-26:pycon-au-2010/pyconau-2010--using-python-in-a-scientific-real-t.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Using Python in a scientific real-time data collection network&lt;/p&gt;
&lt;p&gt;Presented by Dr. Paul Dyson (Bureau of Meteorology)&lt;/p&gt;
&lt;p&gt;Python is being increasingly used within the Solar and Terrestrial
Radiation Network at the Bureau of Meteorology. This Network consists of
ten ground stations across Australasia that track the sun, measuring the
irradiance of the sun and sky. This talk will outline the work of the
Network, the changes resulting from the introduction of Python in 2005,
and advantages and some difficulties of using Python.&lt;/p&gt;
</summary><category term="casestudy"></category><category term="pyconau"></category><category term="pyconau2010"></category><category term="science"></category></entry><entry><title>How Python is guiding infrastructure construction in Africa (#84)</title><link href="https://pyvideo.org/pycon-us-2010/how-python-is-guiding-infrastructure-construction.html" rel="alternate"></link><published>2010-02-19T00:00:00+00:00</published><updated>2010-02-19T00:00:00+00:00</updated><author><name>Roy Hyunjin Han</name></author><id>tag:pyvideo.org,2010-02-19:pycon-us-2010/how-python-is-guiding-infrastructure-construction.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;How Python is guiding infrastructure construction in Africa&lt;/p&gt;
&lt;p&gt;Presented by Roy Hyunjin Han (InvisibleRoads)&lt;/p&gt;
&lt;p&gt;A whirlwind tour of the roles of different Python modules in the
architecture of a geospatial infrastructure planning system.&lt;/p&gt;
&lt;p&gt;We used Python to transform an elaborate, multistep process for finding
and connecting households in villages into a single, streamlined
planning experience. I'll explain how Python's freely available
libraries empowered a small team of developers under a minimal budget
and timeframe. Now just imagine if we had to do the same thing with
Java.&lt;/p&gt;
</summary><category term="africa"></category><category term="casestudy"></category><category term="infrastructure"></category><category term="pycon"></category><category term="pycon2010"></category></entry><entry><title>How and why Python is being used to by the Military to model real-world battlefield scenarios (#13)</title><link href="https://pyvideo.org/pycon-us-2010/pycon-2010--how-and-why-python-is-being-used-to-b.html" rel="alternate"></link><published>2010-02-19T00:00:00+00:00</published><updated>2010-02-19T00:00:00+00:00</updated><author><name>Unknown</name></author><id>tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--how-and-why-python-is-being-used-to-b.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;How and why Python is being used by the Military to model real-world
battlefield scenarios&lt;/p&gt;
&lt;p&gt;Mr. Eric Silverman (ALATEC Inc. / US Army)&lt;/p&gt;
&lt;p&gt;Leveraging the power of Python, military analyst and software developers
out at White Sands Missile Range in New Mexico have converted a
closed-form model, which was developed for scripted Cold War scenarios,
into a more sophisticated and adaptive system. COMBATXXI is a premium
wargaming model, which now is poised to answer questions that have a
direct effect on military operations currently in theater, in large part
because of Python.&lt;/p&gt;
&lt;p&gt;[VIDEO HAS ISSUES: High pitched noise on audio]&lt;/p&gt;
</summary><category term="casestudy"></category><category term="pycon"></category><category term="pycon2010"></category></entry><entry><title>Python for Large Astronomical Data Reduction and Analysis Systems (#107)</title><link href="https://pyvideo.org/pycon-us-2010/pycon-2010--python-for-large-astronomical-data-re.html" rel="alternate"></link><published>2010-02-19T00:00:00+00:00</published><updated>2010-02-19T00:00:00+00:00</updated><author><name>Francesco Pierfederici</name></author><id>tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--python-for-large-astronomical-data-re.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python for Large Astronomical Data Reduction and Analysis Systems&lt;/p&gt;
&lt;p&gt;Presented by Francesco Pierfederici (Harvard-Smithsonian Center for
Astrophysics)&lt;/p&gt;
&lt;p&gt;We describe how Python is used in a large astronomy project to
automatically process data from several telescopes in both the
hemispheres. We introduce the general problem and discuss challenges and
lessons learned.&lt;/p&gt;
</summary><category term="astronomy"></category><category term="casestudy"></category><category term="concurrency"></category><category term="pycon"></category><category term="pycon2010"></category></entry><entry><title>Scaling Python webapps from zero to 50 million users - A top-down approach. (#134)</title><link href="https://pyvideo.org/pycon-us-2010/pycon-2010--scaling-python-webapps-from-zero-to-5.html" rel="alternate"></link><published>2010-02-19T00:00:00+00:00</published><updated>2010-02-19T00:00:00+00:00</updated><author><name>Jinal Jhaveri</name></author><id>tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--scaling-python-webapps-from-zero-to-5.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Scaling Python webapps from zero to 50 million users - A top-down
approach&lt;/p&gt;
&lt;p&gt;Presented by Jinal Jhaveri&lt;/p&gt;
&lt;p&gt;LOLapps is one of the top providers of social games and user generated
applications with 50+ million monthly uniques on Facebook, MySpace and
Bebo. This session will focus on the top-down approach we took to scale
our webapps for millions of users. Here are the 6 topics we will cover:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Why is performance a big issue for Social Media&lt;/li&gt;
&lt;li&gt;How we profiled our apps and found bottlenecks using custom developed
and existing middleware&lt;/li&gt;
&lt;li&gt;The web application best practices we applied and results obtained&lt;/li&gt;
&lt;li&gt;How we traced database connection leaks&lt;/li&gt;
&lt;li&gt;Our caching strategies and the changes we made to speed up the
memcache client&lt;/li&gt;
&lt;li&gt;Results of our experiment using Paster and Tornado as our web
servers.&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="casestudy"></category><category term="database"></category><category term="memcache"></category><category term="paster"></category><category term="profiling"></category><category term="pycon"></category><category term="pycon2010"></category><category term="tornado"></category></entry><entry><title>Best Practices for Impossible Deadlines</title><link href="https://pyvideo.org/pycon-us-2011/pycon-2011--best-practices-for-impossible-deadlin.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Christopher Groskopf</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--best-practices-for-impossible-deadlin.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Best Practices for Impossible Deadlines&lt;/p&gt;
&lt;p&gt;Presented by Christopher Groskopf&lt;/p&gt;
&lt;p&gt;At the Chicago Tribune we develop, test, and deploy production web
applications on schedules that range from two hours to two months. This
talk will discuss the tools and techniques that allow us to make our
deadlines, including automated deployments, frameworks, just-in-time
testing, and more. Attention will be paid to
&lt;a class="reference external" href="htt%20p://github.com/newsapps/beeswithmachineguns"&gt;http://github.com/newsapps/beeswithmachineguns&lt;/a&gt;
and the problems they solve.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;On my first day at the Chicago Tribune I was given a CSV of data about
defoliant spraying in Vietnam and told to build this: Agent Orange. What
followed was one of the most stressful and difficult weeks of my life,
during which I learned an incredible amount about web development. I had
to stop thinking about databases and start thinking about serialized
JSON structures stashed on S3; stop thinking about building tools and
start thinking about mashing up tech that was never designed to be
married (in this case Simile Timeline and Google Maps); stop thinking
about idealistic development practices and start thinking about getting
a working product out the door. In short: I had to rewire my brain for
news.&lt;/p&gt;
&lt;p&gt;This talk will go in-depth on deadline-oriented strategies that I've
learned in a year of building news applications. Some of these revolve
around specific technologies, like fabric for single-keystroke
deployments or Varnish for caching, but most will be matters of
practice, like what to test when you have no time for testing or how to
avoid (yes, avoid!) database migrations.&lt;/p&gt;
&lt;p&gt;They say Django is &amp;quot;the web framework for perfectionists with
deadlines.&amp;quot; This is their Art of War.&lt;/p&gt;
&lt;p&gt;Talk outline:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;An anecdote: Agent Orange&lt;/li&gt;
&lt;li&gt;We can't have nice things (or best practices)&lt;/li&gt;
&lt;li&gt;Low-hanging fruit: staging environment, git branches, PEP8.&lt;/li&gt;
&lt;li&gt;Only build it once: Iterations, interviews and stakeholders&lt;/li&gt;
&lt;li&gt;Salvage, share and steal [code]&lt;/li&gt;
&lt;li&gt;Keeping track: Be a ticketing warrior&lt;/li&gt;
&lt;li&gt;Tools improve faster than you do: iterate your stack&lt;/li&gt;
&lt;li&gt;Single-keystroke deployment (fabric)&lt;/li&gt;
&lt;li&gt;Migrations are hard: Building read-only apps&lt;/li&gt;
&lt;li&gt;Don't serve that: Using S3 for hosting&lt;/li&gt;
&lt;li&gt;Caching &amp;gt; optimization (varnish)&lt;/li&gt;
&lt;li&gt;Know your load limits (beeswithmachineguns)&lt;/li&gt;
&lt;li&gt;Configuration-as-application: application frameworks (maps, tables)&lt;/li&gt;
&lt;li&gt;Pair programming &amp;gt; functional testing &amp;gt; unit testing&lt;/li&gt;
&lt;li&gt;except UseWordpress, e: print &amp;quot;No, really&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Sites that will be used as examples:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Agent Orange&lt;/li&gt;
&lt;li&gt;Burr Oak Memorial&lt;/li&gt;
&lt;li&gt;Census 2010: Cook county participation rates map&lt;/li&gt;
&lt;li&gt;Area judges and supervision rates of speeders table&lt;/li&gt;
&lt;li&gt;RedEye Homicide Tracker&lt;/li&gt;
&lt;li&gt;Chicago Tribune Elections Center&lt;/li&gt;
&lt;li&gt;2010 Illinois School Report Cards&lt;/li&gt;
&lt;li&gt;TribLocal&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="beeswithmachineguns"></category><category term="bestpractices"></category><category term="casestudy"></category><category term="pycon"></category><category term="pycon2011"></category></entry><entry><title>Disqus: Serving 400 million people with Python</title><link href="https://pyvideo.org/pycon-us-2011/pycon-2011--disqus--serving-400-million-people-wi.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>David Cramer</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--disqus--serving-400-million-people-wi.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Disqus: Serving 400 million people with Python&lt;/p&gt;
&lt;p&gt;Presented by David Cramer and Jason Yan&lt;/p&gt;
&lt;p&gt;Disqus, one of the largest Python applications on the web, will explain
how they deal with scaling complexities in a growing startup. Founded in
2007, Disqus maintains a small engineering team reaching over 400
million users a month. Being powered by Python has allowed quick
iteration of the application, without sacrificing code quality and
performance. The talk will cover key parts of the architecture and
development process at Disqus, including hardware, databases, and common
bottlenecks.&lt;/p&gt;
</summary><category term="casestudy"></category><category term="disqus"></category><category term="pycon"></category><category term="pycon2011"></category></entry><entry><title>Firefox Sync</title><link href="https://pyvideo.org/pycon-us-2011/pycon-2011--firefox-sync.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Tarek Ziadé</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--firefox-sync.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Firefox Sync&lt;/p&gt;
&lt;p&gt;Presented by Tarek Ziadé&lt;/p&gt;
&lt;p&gt;Firefox Sync let you access your history, passwords, bookmarks and even
open tabs across all your devices, while remaining unreadable on the
server through encryption. After a brief introduction on the Sync
protocol, this talk will focus on the server, which is written in
Python.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;The talk will briefly explain how Syncing works then will focus on the
Server architecture and code. You will discover through this talk how
the server was built and what technologies it uses.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Firefox Sync in numbers&lt;/li&gt;
&lt;li&gt;How synchronisation happens - the big picture&lt;ol class="arabic"&gt;
&lt;li&gt;Desktop&lt;/li&gt;
&lt;li&gt;iPhone (Firefox Home)&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;How encryption works&lt;/li&gt;
&lt;li&gt;Overview of the APIs&lt;ol class="arabic"&gt;
&lt;li&gt;Sync 1.1&lt;/li&gt;
&lt;li&gt;User 1.0&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Server architecture&lt;ol class="arabic"&gt;
&lt;li&gt;User &amp;amp; Data storage&lt;/li&gt;
&lt;li&gt;Web Services&lt;/li&gt;
&lt;li&gt;Libraries used&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Scaling and benchmarking&lt;ol class="arabic"&gt;
&lt;li&gt;Grinder&lt;/li&gt;
&lt;li&gt;Funkload&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Run your own server !&lt;/li&gt;
&lt;li&gt;What's Next&lt;/li&gt;
&lt;/ol&gt;
</summary><category term="casestudy"></category><category term="firefoxsync"></category><category term="pycon"></category><category term="pycon2011"></category></entry><entry><title>Going Full Python - Threadless</title><link href="https://pyvideo.org/pycon-us-2011/pycon-2011--going-full-python---threadless.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Chris McAvoy</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--going-full-python---threadless.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Going Full Python -- Threadless&lt;/p&gt;
&lt;p&gt;Presented by Chris McAvoy&lt;/p&gt;
&lt;p&gt;Threadless is a 10 year old community based design company with an
overpowering love of witty t-shirts and a mission to 'inspire
awesomeness.' After 10 years of working primarily with PHP, Threadless
has decided to use Python as our base development language. The decision
was 10% technical and 90% touchy feely. We know what a powerful
community can do to a product, and see the same sort of drive and
passion in the Python community that we see in our own design community.
Python is the peanut butter to our jelly. We're excited to share our
jelly with you. Chris McAvoy, VP of Technology at Threadless (and the
founder of the Chicago Python Users Group), will share a bit about the
companies history, the role of technology in supporting the community at
the core of the business, and why Python and Threadless are going to be
totally BFF's.&lt;/p&gt;
</summary><category term="casestudy"></category><category term="pycon"></category><category term="pycon2011"></category><category term="threadless"></category></entry><entry><title>Greasing the Wheels of Exploration with Python</title><link href="https://pyvideo.org/pycon-us-2011/pycon-2011--greasing-the-wheels-of-exploration-wi.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Michael Sims</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--greasing-the-wheels-of-exploration-wi.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;The control of the Mars Exploration Rovers (MER) requires a complex set
of coordinated activites by a team. Early in the MER mission the author
automated in Python much of the task of one of the operation positions,
the Payload Uplink Lead, for 7 of the 9 cameras on each rover. This talk
describes the MER rovers, the operation tasks and that implemented
system.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The Mars Exploration Rovers (MER), Spirit and Opportunity, have been
roaming the surface of Mars since January of 2004 leading to many
discoveries about the nature and history of our sister planet. Each
activity requires a complex set of coordinated activites by a team.
Early in the MER mission the author automated much of the task of one of
the positions, the Payload Uplink Lead, for 7 of the 9 cameras on each
rover. The system, called AutoPUL, is written in Python and that has
proven to be the excellent choice for the development and maintenance.
In the talk I'll describe the Mars Rover mission and the operational
activities and how AutoPUL and Python fullfilled those needs.&lt;/p&gt;
</summary><category term="casestudy"></category><category term="mer"></category><category term="pycon"></category><category term="pycon2011"></category></entry><entry><title>How to kill a patent with Python</title><link href="https://pyvideo.org/pycon-us-2011/pycon-2011--how-to-kill-a-patent-with-python.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Van Lindberg</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--how-to-kill-a-patent-with-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;How to kill a patent with Python&lt;/p&gt;
&lt;p&gt;Presented by Van Lindberg&lt;/p&gt;
&lt;p&gt;Finding the right piece of &amp;quot;prior art&amp;quot; - technical documentation that
described a patented piece of technology before the patent was filed -
is like finding a needle in a very big haystack. This session will talk
about how I am making that process faster and more accurate through the
use of natural language processing, graph theory, machine learning, and
lots of Python.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;From my work consulting on a number of patent cases, I am frequently
asked to find &amp;quot;prior art&amp;quot; - patents and publications that describe a
technology before a certain date. The problem is that the indexing
mechanisms for patents and publications are not as good as they could
be, making good prior art searching more of an art than a science. When
I decided to do better, I reached for Python.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Part I (5 mins): The USPTO as a data source.* The full-text of each
patent is available from the USPTO (and now from Google.) What does
this data look like? How can it be harvested and normalized to create
data structures that we can work with?&lt;/li&gt;
&lt;li&gt;Part II (15 mins, in two parts):* Once the patents have been cleaned
and normalized, they can be turned into data structures that we can
use to evaluate their relationship to other documents. This is done
in two ways - by modeling each patent as a document vector and a
graph node.&lt;/li&gt;
&lt;li&gt;Part IIA (7 mins): Patents as document vectors.* Once we have a
patent as a data structure, we can treat the patent as a vector in an
n-dimensional space. In moving from a document into a vector space,
we will touch on normalization, stemming, TF/IDF, Latent Semantic
Indexing (LSI) and Latent Dirichlet Allocation (LDA).&lt;/li&gt;
&lt;li&gt;Part IIB (7 mins): Patents as technology graphs.* This will show
building graph structures using the connections between patents -
both the built-in connections in the patents themselves as well as
the connections discovered while working with the patents as vectors.
We apply some social network analysis to partition the patent graph
and find other documents in the same technology space.&lt;/li&gt;
&lt;li&gt;Part III (5 mins): What have we built?* Now that we have done all
this analysis, we can see some interesting things about the patent
database as a whole. How does the patent database act as a map to the
world of technology? And how has this helped with the original
problem - finding better prior art?&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="casestudy"></category><category term="patents"></category><category term="pycon"></category><category term="pycon2011"></category></entry><entry><title>MongoDB + Pylons at Catch.com: Scalable Web Apps with Python and NoSQL</title><link href="https://pyvideo.org/pycon-us-2011/pycon-2011--mongodb---pylons-at-catch-com--scalab.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Niall O'Higgins</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--mongodb---pylons-at-catch-com--scalab.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;MongoDB + Pylons at Catch.com: Scalable Web Apps with Python and NoSQL&lt;/p&gt;
&lt;p&gt;Presented by Niall O'Higgins&lt;/p&gt;
&lt;p&gt;The Catch.com backend provides an API for publishing and querying your
personal data - used by many hugely popular Android, iOS and Web
clients. We ported this system to Python and MongoDB, using the Pylons
Web framework. This talk details our reasoning for choosing - and
experiences with - these cutting-edge Web and NoSQL database
technologies in a high-traffic, real-world production system.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;Faced with the limits of our initial Catch.com Java/BDB backend
implemention, we evaluated various alternative technologies including
Amazon SimpleDB, MySQL, Cassandra and MongoDB. Eventually we settled on
Python, Pylons and MongoDB.&lt;/p&gt;
&lt;p&gt;We found Python and MongoDB gave us unique flexibility with our data
model, allowed us to scale for increased reliability and performance and
decreased feature development time - and in this talk we'll describe
exactly how.&lt;/p&gt;
&lt;p&gt;While there are many advantages, Python/Pylons and MongoDB (as a
relative newcomer on the database scene) certainly have issues and
limitations which must be taken into careful consideration for any
real-world production deployment.&lt;/p&gt;
&lt;p&gt;We compare MongoDB with other database technologies such as more
traditional RDBMS like MySQL and competing NoSQL options such as
Cassandra, CouchDB and BDB.&lt;/p&gt;
&lt;p&gt;We give a detailed introducton to data modeling in MongoDB - with
special attention paid to how this differs from a traditional relational
system - the operators provided by its rich query language and utilizing
advanced features such as GeoSpatial indexing, Replica Sets, Sharding -
and how to deal with some of the more publicized limitations of the
system (such as single-server durability).&lt;/p&gt;
&lt;p&gt;While much of this talk will be about using MongoDB with Python, we will
also touch on issues surrounding production deployment of the Pylons Web
framework, including how we work around the GIL to take advantage of
multi-core machines.&lt;/p&gt;
</summary><category term="casestudy"></category><category term="mongodb"></category><category term="nosql"></category><category term="pycon"></category><category term="pycon2011"></category><category term="pylons"></category><category term="scalable"></category></entry><entry><title>Optimal Aircraft Engine Tuner Selection in Python</title><link href="https://pyvideo.org/pycon-us-2011/pycon-2011--optimal-aircraft-engine-tuner-selecti.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Jeffrey Armstrong</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--optimal-aircraft-engine-tuner-selecti.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Optimal Aircraft Engine Tuner Selection in Python&lt;/p&gt;
&lt;p&gt;Presented by Jeffrey Armstrong&lt;/p&gt;
&lt;p&gt;A numerical algorithm for designing on-board aircraft engine diagnostics
has been implemented in Python. Employing the optimization techniques
within SciPy, the code performs a search for an optimal vector of
parameters for estimating engine variables, including exhaust
temperatures and thrust. The algorithm exploits the numerical strengths
of Python and SciPy for speed and interoperability.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;An emerging field of aircraft engine diagnostics is the inclusion of
on-board engine performance tracking algorithms. These algorithms
utilize data provided by a limited number of engine sensors to determine
the current engine performance, which tends to degrade over time.
However, estimating engine performance instantaneously is problematic
due to the limited number of sensors normally available on a commercial
aircraft engine.&lt;/p&gt;
&lt;p&gt;One common practice is to estimate and track engine performance in
software using a Kalman filter, a mathematical construct for tuning a
numerical model to better track actual measurements (1). A new technique
has been devised to optimize the design of this filter in aircraft
engine applications (2). An optimization procedure to aid in the design
of the filter has been implemented in Python and exercised against the
significant number of minimization and optimization strategies available
in SciPy. The talk focuses on the design of this optimization procedure
in Python. The object-oriented nature of Python offers benefits over
alternative numerical languages; speed, availability, and
maintainability played central roles in the selection of Python as the
implementation language. The availability of the multiprocessing module
allowed for full utilization of modern multi-core CPUs, in contrast with
often limited commercial numerical computing packages, further improving
computational speed.&lt;/p&gt;
&lt;p&gt;Some difficulties were encountered during this design exercise.
Discussion of these obstacles and their eventual solution is presented.
Specifically, iterative solvers for the discrete algebraic Riccati
equation and the discrete Lyapunov equation had to be authored in Python
(3,4). Additional framework for working with discrete state-space
control systems was created, exploiting the object-oriented features of
the language (5).&lt;/p&gt;
&lt;p&gt;The Python implementation was able to verify the solution of the
optimization problem. Comparison with an alternative, reference MATLAB
implementation will be presented briefly. The results of this research
is planned to be presented at the American Society for Mechanical
Engineers Turbo Expo 2011 Conference in June, 2011 (6). The algorithm
design in Python is meant to showcase the ability to perform controls
engineering tasks in the Python language efficiently.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;“Kalman Filter,” Wikipedia:
&lt;a class="reference external" href="ht%20tp://en.wikipedia.org/wiki/Kalman_filter"&gt;http://en.wikipedia.org/wiki/Kalman_filter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Simon, D. L. and Garg, S., “Optimal Tuner Selection for Kalman
Filter-Based Aircraft Engine Performance Estimation”. Journal of
Engineering for Gas Turbines and Power. March 2010, Vol. 132.&lt;/li&gt;
&lt;li&gt;“Algebraic Riccati Equation,” Wikipedia:
&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Algebraic_Riccati_equatio%20n"&gt;http://en.wikipedia.org/wiki/Alge
braic_Riccati_equation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;“Lyapunov Equation,” Wikipedia:
&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Lyapunov_equation"&gt;http://en.wikipedia.org/wiki/Lyapunov_equa
tion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;“State Space,” Wikipedia: &lt;a class="reference external" href="http://en.wikipedia.org/wiki/State-space"&gt;http://en.wikipedia.org/wiki/State-
space&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Simon, D. L., Armstrong, J. B., &amp;quot;Application of an Optimal Tuner
Selection Approach for On-Board Self-Tuning Engine Models,&amp;quot;
Proceedings of the ASME Turbo Expo 2011, GT2011-46408, 2011 (To Be
Published).&lt;/li&gt;
&lt;/ol&gt;
</summary><category term="aircraftenginetuning"></category><category term="casestudy"></category><category term="pycon"></category><category term="pycon2011"></category><category term="scipy"></category></entry><entry><title>Rapid Python used on Big Data to Discover Human Genetic Variation</title><link href="https://pyvideo.org/pycon-us-2011/pycon-2011--rapid-python-used-on-big-data-to-disc.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Deniz Kural</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--rapid-python-used-on-big-data-to-disc.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Rapid Python used on Big Data to Discover Human Genetic Variation&lt;/p&gt;
&lt;p&gt;Presented by Deniz Kural&lt;/p&gt;
&lt;p&gt;Advances in genome sequencing has enabled large-scale projects such as
the 1000 Genomes Project to sequence genomes across diverse populations
around the world, resulting in very large data sets. I use Python for
rapid development of algorithms for processing &amp;amp; analyzing genomes and
discovering thousands of new variants, including &amp;quot;Mobile Elements&amp;quot; that
copy&amp;amp;paste; themselves across the genome.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;Recent advances in high-throughput sequencing now enables accurate
sequencing human genomes at a low cost &amp;amp; high speed. This technology is
now used to initiate projects involving large-scale sequencing of many
genomes. The 1000 Genomes project aims to sequence 2500 genomes across
27 world populations, and has initially completed its Pilot phase. The
aim of the project is to discover &amp;amp; characterize novel variants. These
variants enable association studies that investigate the link between
genomic variation &amp;amp; phenotypes, including disease.&lt;/p&gt;
&lt;p&gt;A class of variants, known as &amp;quot;Structural Variants&amp;quot; represent a
heterogenous class of larger variants, such as inversions, duplications,
deletions, and various kinds of insertions.&lt;/p&gt;
&lt;p&gt;I use Python to for rapid development of algorithms to process, analyze,
and annotate very large data sets. In particular, I focus on Mobile
Elements, pieces of DNA that copy&amp;amp;paste; across the genome. These
elements constitute roughly half of the genome, whereas protein-coding
genes account for roughly 1.5 % of the genome.&lt;/p&gt;
&lt;p&gt;I will discuss distributed computing, genomics, and big data within the
context of Python.&lt;/p&gt;
</summary><category term="bigdata"></category><category term="casestudy"></category><category term="dna"></category><category term="genomes"></category><category term="pycon"></category><category term="pycon2011"></category></entry><entry><title>Scaling Python past 100</title><link href="https://pyvideo.org/pycon-us-2011/pycon-2011--scaling-python-past-100.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Mark Ramm</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--scaling-python-past-100.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Scaling Python past 100&lt;/p&gt;
&lt;p&gt;Presented by Mark Ramm&lt;/p&gt;
&lt;p&gt;Sourceforge.net has been in the top 100 sites on the internet, and we
discovered that python was easily able to scale up to handle that
traffic. In fact Python is now the core language for all new features,
and is taking over all of sourceforge.net.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;The path from legacy PHP to modern python tools has been long an bumpy,
and this is the story of how we took Python from a single prototype
site, to the core technology driving SourceForge.net. I will discuss the
mistakes we made along the way, the benefits that sold python, and the
real secret behind our python transformation.&lt;/p&gt;
&lt;p&gt;A few highlights include:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;How we abused libraries for fun and profit&lt;/li&gt;
&lt;li&gt;How a major mistake made us look good&lt;/li&gt;
&lt;li&gt;How the python community worked for us&lt;/li&gt;
&lt;li&gt;How we couldn't have done it without Django AND TurboGears&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="casestudy"></category><category term="pycon"></category><category term="pycon2011"></category><category term="scalability"></category><category term="sourceforge"></category><category term="turbogears"></category></entry><entry><title>24. Indico - A Scientific Collaboration Platform</title><link href="https://pyvideo.org/pycon-us-2012/24-indico-a-scientific-collaboration-platform.html" rel="alternate"></link><published>2012-03-11T00:00:00+00:00</published><updated>2012-03-11T00:00:00+00:00</updated><author><name>Pedro Ferreira</name></author><id>tag:pyvideo.org,2012-03-11:pycon-us-2012/24-indico-a-scientific-collaboration-platform.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Indico is an open source CMS developed at CERN and currently used in
more than 90 scientific institutions world-wide. Indico provides a
multitude of features to conference/meeting organizers, merging the
capabilities of a powerful CMS with a calendaring layer, thus allowing
users to keep track of past and future meetings, and to quickly access
all the resources concerning a particular event.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Indico is an open source content management system developed at the
European Organization for Nuclear Research (CERN) and currently used in
more than 90 scientific institutions world-wide. Indico provides a
multitude of features to conference/meeting organizers, merging the
capabilities of a powerful CMS with a calendaring layer, thus allowing
users to keep track of past and future meetings, and to quickly access
all the resources concerning a particular event. Other very useful
features include:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Conference registration &amp;amp; e-payment integration;&lt;/li&gt;
&lt;li&gt;Paper/abstract reviewing;&lt;/li&gt;
&lt;li&gt;Integration with chat (XMPP) systems;&lt;/li&gt;
&lt;li&gt;Integration with videoconferencing/webcasting applications;&lt;/li&gt;
&lt;li&gt;Room booking module;&lt;/li&gt;
&lt;li&gt;Drag&amp;amp;drop; timetable editing;&lt;/li&gt;
&lt;li&gt;Event reminders &amp;amp; alarms (scheduler);&lt;/li&gt;
&lt;li&gt;Extensible via plugin subsystem;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;At CERN alone, Indico serves a community of around 10.000 users, with
~15.000 different visitors per day (~1 M hits). It hosts more than
150.000 events, made of around 700.000 individual contributions/talks
and ~900.000 files. It has become part of &amp;quot;CERN speech&amp;quot; - &amp;quot;look it up on
Indico&amp;quot; is almost as obvious as &amp;quot;Google it&amp;quot; around here.&lt;/p&gt;
&lt;p&gt;But Indico is as well an indispensable tool in the realm of High Energy
Physics, going far beyond the borders of this organization. Institutions
such as Fermilab, MIT and IHEP (China) are using it for their own
meetings/conferences.&lt;/p&gt;
&lt;p&gt;The system is fully written in Python and JavaScript, using ZODB as its
database back-end. It is a perfect example of how Python-related
technologies can be used to build powerful web applications that empower
scientific research and collaboration.&lt;/p&gt;
</summary><category term="casestudy"></category><category term="cms"></category></entry></feed>