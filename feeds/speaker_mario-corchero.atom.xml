<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_mario-corchero.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2019-07-11T00:00:00+00:00</updated><entry><title>Exceptional Exceptions</title><link href="https://pyvideo.org/europython-2019/exceptional-exceptions.html" rel="alternate"></link><published>2019-07-11T00:00:00+00:00</published><updated>2019-07-11T00:00:00+00:00</updated><author><name>Mario Corchero</name></author><id>tag:pyvideo.org,2019-07-11:europython-2019/exceptional-exceptions.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Did you know there are multiple ways to raise and capture exceptions?
Have you ever wondered if you should raise a built-in exception or
create your own hierarchy? Did you ever find it hard to understand
what an exception meant?&lt;/div&gt;
&lt;div class="line"&gt;This talk will go through the decisions needed to raise and capture
exceptions when creating a library. We will look at how to translate
and handle errors, create your own exceptions, and make exceptions
clear and easy to troubleshoot, while also understanding how they
actually work, common pitfalls.&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This talk will enable intermediate developers to leave the room with a
solid understanding of how to work effectively with exceptions. As the
exception flow usually goes untested, this will help prevent frustrating
situations when errors occur that are not easy to understand or when an
unexpected result is produced. The talk will delve into the different
ways of working with exceptions. We will illustrate this with a
real-world example to which many developers will be able to relate.&lt;/p&gt;
&lt;p&gt;Following the talk, intermediate developers will leave the room more
informed and better prepared to create and handle exceptions, having
learned about many utilities that were already available to them, but
were never used or were used improperly.&lt;/p&gt;
&lt;p&gt;The not-so-advanced Pythonistas will get an in-depth dive into
exceptions. Even if they might not be able to grasp all of the content,
they will get a sense of the features that most programmers are unaware
of and learn to use them when the proper situation arrives.&lt;/p&gt;
&lt;p&gt;Advanced programmers will find this to be a humorous talk that will
certainly teach them at least one new thing, as I will dive into parts
of the grammar of Python that even many advanced programmers are not
used to.&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;The talk is also full of niche information like why the variable that
catches exceptions doesn’t like outside of the &lt;tt class="docutils literal"&gt;except&lt;/tt&gt; scope.&lt;/div&gt;
&lt;div class="line"&gt;The talk is comprised of four main sections preceded by an
introduction to the problem and a conclusion with time for questions
at the end. We will look at how to raise, capture, create and design
exceptions, offering tips and pitfalls in each section.&lt;/div&gt;
&lt;/div&gt;
</summary><category term="Best Practice"></category><category term="Development"></category><category term="General"></category><category term="Python 3"></category><category term="Python Skills"></category></entry><entry><title>Exceptional Exceptions - How to properly raise, handle and create them.</title><link href="https://pyvideo.org/pycon-us-2019/exceptional-exceptions-how-to-properly-raise-handle-and-create-them.html" rel="alternate"></link><published>2019-05-04T15:15:00+00:00</published><updated>2019-05-04T15:15:00+00:00</updated><author><name>Mario Corchero</name></author><id>tag:pyvideo.org,2019-05-04:pycon-us-2019/exceptional-exceptions-how-to-properly-raise-handle-and-create-them.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Did you know there are multiple ways to raise and capture exceptions?
Have you ever wondered if you should raise a built-in exception or
create your own hierarchy? Did you ever find it hard to understand what
an exception meant?&lt;/p&gt;
&lt;p&gt;This talk will go through the decisions needed to raise and capture
exceptions when creating a library. We will look at how to translate and
handle errors, create your own exceptions, and make exceptions clear and
easy to troubleshoot, while also understanding how they actually work,
common pitfalls.&lt;/p&gt;
</summary><category term="talk"></category></entry><entry><title>Mocks, fakes, dummies, stubs and spies: Successfully isolating the snake</title><link href="https://pyvideo.org/pycon-es-2018/mocks-fakes-dummies-stubs-and-spies-successfully-isolating-the-snake.html" rel="alternate"></link><published>2018-10-07T00:00:00+00:00</published><updated>2018-10-07T00:00:00+00:00</updated><author><name>Mario Corchero</name></author><id>tag:pyvideo.org,2018-10-07:pycon-es-2018/mocks-fakes-dummies-stubs-and-spies-successfully-isolating-the-snake.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This session, which will review test isolation concepts and the unittest.mock module, is structured in a way that both beginners and intermediate developers will learn from it. A basic knowledge of testing is recommended. Intermediate developers will leave the room with a clear understanding of the tools - further than just using simple mocks - to successfully fake dependencies. Multiple “not so well known” features of unittest.mock will be presented so we can shape those objects to behave functionally different.&lt;/p&gt;
&lt;p&gt;Unittest.mock is an extremely useful library which is commonly underused, this talk aims to bring clarity into stubbing in general and into medium/advanced mock features to ease and remove pain when users work with it.&lt;/p&gt;
</summary></entry><entry><title>Opening</title><link href="https://pyvideo.org/pylondinium-2018/opening.html" rel="alternate"></link><published>2018-06-09T00:00:00+00:00</published><updated>2018-06-09T00:00:00+00:00</updated><author><name>Mario Corchero</name></author><id>tag:pyvideo.org,2018-06-09:pylondinium-2018/opening.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Opening ceremony.&lt;/p&gt;
</summary></entry><entry><title>Mocks, fakes, dummies, stubs and spies: Successfully isolating the snake</title><link href="https://pyvideo.org/europython-2018/mocks-fakes-dummies-stubs-and-spies-successfully-isolating-the-snake.html" rel="alternate"></link><published>2018-07-26T00:00:00+00:00</published><updated>2018-07-26T00:00:00+00:00</updated><author><name>Mario Corchero</name></author><id>tag:pyvideo.org,2018-07-26:europython-2018/mocks-fakes-dummies-stubs-and-spies-successfully-isolating-the-snake.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Ever wonder what mocks, fakes, dummies stubs or spies are? Or what the
differences are between them and when one should be used instead of
another? We will take a deep look into these concepts, what they mean
and examples on how to use/create them in Python.&lt;/p&gt;
&lt;p&gt;In this talk, we will quickly explore the reasons for using mock and how
it works, quickly jumping into the different concepts of testing doubles
and how they can be used in Python. The talk will include as part of the
examples from some features in mock coming in Python 3.7 that might
change how usual mocking is performed. The talk builds on the writings
of Gerard Meszaros and Martin Fowler about testing doubles, focusing on
how to apply them to Python.&lt;/p&gt;
&lt;p&gt;This session, which will review test isolation concepts and the
unittest.mock module, is structured in a way that both beginners and
intermediate developers will learn from it. A basic knowledge of testing
is recommended. Intermediate developers will leave the room with a clear
understanding of the tools - further than just using simple mocks - to
successfully fake dependencies. Multiple “not so well known” features of
unittest.mock will be presented so we can shape those objects to behave
functionally different. Unittest.mock is an extremely useful library
which is commonly underused, this talk aims to bring clarity into
stubbing in general and into medium/advanced mock features to ease and
remove pain when users work with it.&lt;/p&gt;
&lt;p&gt;Outline:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Intro (1’)&lt;/li&gt;
&lt;li&gt;Why doubles are important (1’)&lt;/li&gt;
&lt;li&gt;Main qualities of a double (2’)&lt;/li&gt;
&lt;li&gt;Overview of unittest.mock (5’)&lt;/li&gt;
&lt;li&gt;Testing doubles (15’)
- Doubles (1’)
- Stubs (2’)
- Spies (3’)
- Mocks (5’)
- Fakes (2’)&lt;/li&gt;
&lt;li&gt;Wrap up, conclusion and pointers (2’)&lt;/li&gt;
&lt;li&gt;Q&amp;amp;A (Expected 5’)&lt;/li&gt;
&lt;/ul&gt;
</summary></entry><entry><title>Effortless Logging: A deep dive into the logging module</title><link href="https://pyvideo.org/pycon-us-2018/effortless-logging-a-deep-dive-into-the-logging-module.html" rel="alternate"></link><published>2018-05-13T00:00:00+00:00</published><updated>2018-05-13T00:00:00+00:00</updated><author><name>Mario Corchero</name></author><id>tag:pyvideo.org,2018-05-13:pycon-us-2018/effortless-logging-a-deep-dive-into-the-logging-module.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Logs are our best friend, especially on those late nights when we try to troubleshoot a problem in production that was written by a co-worker who is on vacation. Logs are the main way to know what is happening with an application at runtime, but we don’t realize how important they are until we actually need them. Unfortunately, they are usually an under-estimated part of the development process.&lt;/p&gt;
&lt;p&gt;This talk aims to transmit the need for the logging module, briefly explains how to use it and how it is built, and dives into all the complexity that is hidden to us. This will help attendees not just understand all the magic that allows us to inspect our applications at runtime, but also to avoid mistakes and adapt the module to our needs for more esoteric scenarios.&lt;/p&gt;
&lt;p&gt;The talk is structured to simplify the understanding of the logging module. Many people have read the documentation, but still struggle to fully understand what is happening under the hood. This talk aims to eliminate that barrier by presenting it in an easier-to-digest manner.&lt;/p&gt;
</summary><category term="logging"></category></entry><entry><title>The log lines that saved vacation</title><link href="https://pyvideo.org/pycon-uk-2017/the-log-lines-that-saved-vacation.html" rel="alternate"></link><published>2017-10-29T14:30:00+01:00</published><updated>2017-10-29T14:30:00+01:00</updated><author><name>Mario Corchero</name></author><id>tag:pyvideo.org,2017-10-29:pycon-uk-2017/the-log-lines-that-saved-vacation.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Logs are your best friend, especially on one of those late nights when you try to troubleshoot a problem in production that was written by a co-worker who is on holiday. Logs are the main way to know what is happening with an application at runtime, but we don’t realise how important they are until we actually need them. Unfortunately, they are usually an under-estimated part of the development process.&lt;/p&gt;
&lt;p&gt;This talk will provide an overview of the logging module of the standard Python library and demonstrates some basic best practices and techniques to make the most out of our logging when we need it.&lt;/p&gt;
&lt;p&gt;After the talk, you'll be fully familiar with how to use the logging library, how it is actually designed, how it works, and how to go beyond its basic usage, as well as some sample recipes and configurations for complex applications.&lt;/p&gt;
</summary></entry><entry><title>Apertura Domingo - PyConES 2017</title><link href="https://pyvideo.org/pycon-es-2017/apertura-domingo-pycones-2017.html" rel="alternate"></link><published>2017-09-24T09:15:00+02:00</published><updated>2017-09-24T09:15:00+02:00</updated><author><name>Mario Corchero</name></author><id>tag:pyvideo.org,2017-09-24:pycon-es-2017/apertura-domingo-pycones-2017.html</id><summary type="html"></summary></entry><entry><title>Apertura Sabado - PyConES 2017</title><link href="https://pyvideo.org/pycon-es-2017/apertura-sabado-pycones-2017.html" rel="alternate"></link><published>2017-09-23T09:00:00+02:00</published><updated>2017-09-23T09:00:00+02:00</updated><author><name>Mario Corchero</name></author><id>tag:pyvideo.org,2017-09-23:pycon-es-2017/apertura-sabado-pycones-2017.html</id><summary type="html"></summary><category term="opening"></category></entry><entry><title>Effortless Logging - Let the loggers work for you</title><link href="https://pyvideo.org/europython-2017/effortless-logging-let-the-loggers-work-for-you.html" rel="alternate"></link><published>2017-07-10T00:00:00+00:00</published><updated>2017-07-10T00:00:00+00:00</updated><author><name>Mario Corchero</name></author><id>tag:pyvideo.org,2017-07-10:europython-2017/effortless-logging-let-the-loggers-work-for-you.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Logs are your best friends on those late nights when you try to
troubleshoot that problem in production that was written by a friend
of you who is on holidays at the moment. Logs are the main way to
know what is happening at runtime with an running application but as
we don’t realize how important they are until we actually need them
it is usually an under appreciated part of our development process.&lt;/p&gt;
&lt;p&gt;This talks overviews the logging module of the standard library and
demonstrates some basic best practices and techniques make the most
out of our logging when we need it.&lt;/p&gt;
&lt;p&gt;After this talk you will be fully familiar not only on how to use the
logging library but also how it is actually designed, how it works,
how to extended further than the basic usage and some sample recipes
and configurations for complex applications.&lt;/p&gt;
</summary></entry><entry><title>It's time for datetime. Painless working with time in python</title><link href="https://pyvideo.org/fosdem-2017/its-time-for-datetime-painless-working-with-time-in-python.html" rel="alternate"></link><published>2017-02-05T00:00:00+00:00</published><updated>2017-02-05T00:00:00+00:00</updated><author><name>Mario Corchero</name></author><id>tag:pyvideo.org,2017-02-05:fosdem-2017/its-time-for-datetime-painless-working-with-time-in-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Working with time is not a trivial challenge. Python includes a native module in the standard library to work with it but datetime keeps being together with unicode a common source of errors. This often leads to the widespread of many other libraries in the attempt of easing the work of working with datetime. Datetime is one of those API that looks easy to use but given the many concepts around time, is it easy to get backfired if the developer has not solid knowledge about the them.In this talk we will overview the main concepts about timestamps represented through datetime objects, the limitations on the standard library and some simple steps to try to avoid the common mistakes that everyone can fall into.Naive datetimes (which the datetime API works by default with) are a great tool to represent calendar times, but when talking about timestamps (focus of this talk) timezones is n essential part of it and the datetime module can be tricky to use for that use cases.We will also speak about different standards of time, time zones, Daylight Saving Times, leap seconds, serialization and datetime arithmetics.The talk will be focused on giving the foundations that everyone knows to be able to understand and work efficiently and without making painful mistakes when dealing with time related algorithms.&lt;/p&gt;
</summary></entry><entry><title>It's time for datetime</title><link href="https://pyvideo.org/pycon-us-2017/its-time-for-datetime.html" rel="alternate"></link><published>2017-05-20T00:00:00+00:00</published><updated>2017-05-20T00:00:00+00:00</updated><author><name>Mario Corchero</name></author><id>tag:pyvideo.org,2017-05-20:pycon-us-2017/its-time-for-datetime.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Working with time is not a trivial challenge. Python includes a native
module in the standard library to work with it but datetime keeps being
together with unicode a common source of errors. This often leads to the
widespread of many other libraries in the attempt of easing the work of
working with datetime. Datetime is one of those API that looks easy to
use but given the many concepts around time, is it easy to get backfired
if the developer has not solid knowledge about the them.&lt;/p&gt;
&lt;p&gt;In this talk we will overview the main concepts about timestamps
represented through datetime objects, the limitations on the standard
library and some simple steps to try to avoid the common mistakes that
everyone can fall into.&lt;/p&gt;
&lt;p&gt;Naive datetimes (which the datetime API works by default with) are a
great tool to represent calendar times, but when talking about
timestamps (focus of this talk) timezones is n essential part of it and
the datetime module can be tricky to use for that use cases.&lt;/p&gt;
&lt;p&gt;We will also speak about different standards of time, time zones,
Daylight Saving Times, leap seconds, serialization and datetime
arithmetics.&lt;/p&gt;
&lt;p&gt;The talk will be focused on giving the foundations that everyone knows
to be able to understand and work efficiently and without making painful
mistakes when dealing with time related algorithms.&lt;/p&gt;
</summary></entry><entry><title>Lightning talks May 19th, 2017 Evening session</title><link href="https://pyvideo.org/pycon-us-2017/lightning-talks-may-19th-2017-evening-session.html" rel="alternate"></link><published>2017-05-19T00:00:00+00:00</published><updated>2017-05-19T00:00:00+00:00</updated><author><name>Katie McLaughlin</name></author><id>tag:pyvideo.org,2017-05-19:pycon-us-2017/lightning-talks-may-19th-2017-evening-session.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Lightning talks 2017-05-19 Evening&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="12%" /&gt;
&lt;col width="23%" /&gt;
&lt;col width="65%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head" rowspan="2"&gt;Start&lt;/th&gt;
&lt;th class="head" rowspan="2"&gt;Speakers&lt;/th&gt;
&lt;th class="head" rowspan="2"&gt;Subject&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td rowspan="3"&gt;0:55&lt;/td&gt;
&lt;td rowspan="3"&gt;Katy&lt;/td&gt;
&lt;td rowspan="3"&gt;&lt;strong&gt;Emoji Archeology 101 - A lightning talk cover&lt;/strong&gt;
- A call to revolution against the Unicode emoji.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td rowspan="4"&gt;5:55&lt;/td&gt;
&lt;td rowspan="4"&gt;Daniel Whitenack&lt;/td&gt;
&lt;td rowspan="4"&gt;&lt;strong&gt;Taking Over the Data World with Containerized&lt;/strong&gt;
&lt;strong&gt;Python&lt;/strong&gt;
- Using Kubernetes cluster with Pachyderm.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td rowspan="4"&gt;11:20&lt;/td&gt;
&lt;td rowspan="4"&gt;Fang-Pen Lin&lt;/td&gt;
&lt;td rowspan="4"&gt;&lt;strong&gt;Bugbuzz - A modern web-based debugger for Python&lt;/strong&gt;
- Adding just a couple lines triggers a web based
debugger with basic functionality.  Uses PubNub.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td rowspan="5"&gt;16:45&lt;/td&gt;
&lt;td rowspan="5"&gt;Kojo Idrissa&lt;/td&gt;
&lt;td rowspan="5"&gt;&lt;strong&gt;Software Engineering for Beginners&lt;/strong&gt;
- Focus on common tools like version control, in-code
documentation, testing &amp;amp; TDD, dependency management &amp;amp;
deployment, and finally OS stuff.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td rowspan="8"&gt;21:50&lt;/td&gt;
&lt;td rowspan="8"&gt;Cameron Dershem&lt;/td&gt;
&lt;td rowspan="8"&gt;&lt;strong&gt;Community Level Development:  What Python Should&lt;/strong&gt;
&lt;strong&gt;Learn From Rust&lt;/strong&gt;
- Please learn From Rust. Rust is the best community.
Devs are on chat and enforce good attitude; cool thank
you page; roadmap; 'how should this be taught' section
in RFCs; mentorship for starter maintainers; great
opensource book.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td rowspan="4"&gt;26:30&lt;/td&gt;
&lt;td rowspan="4"&gt;Al Sweigart&lt;/td&gt;
&lt;td rowspan="4"&gt;&lt;strong&gt;How to Do PyCon&lt;/strong&gt;
- Skip talks and meet people; use shirt trick; don't
eat alone; Twitter is great for followup.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td rowspan="4"&gt;31:53&lt;/td&gt;
&lt;td rowspan="4"&gt;Myron Walker&lt;/td&gt;
&lt;td rowspan="4"&gt;&lt;strong&gt;Faking Python Imports&lt;/strong&gt;
- Fake for modules and callables not available on test
environment. Use directory of local fakes.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td rowspan="4"&gt;35:12&lt;/td&gt;
&lt;td rowspan="4"&gt;Vince Salvino&lt;/td&gt;
&lt;td rowspan="4"&gt;&lt;strong&gt;Help Wanted: A PyPI Vulnerability DB&lt;/strong&gt;
- Like WPScan, it would be nice to a central DB and
tool for known PyPI security issues. Talk to me.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td rowspan="5"&gt;37:50&lt;/td&gt;
&lt;td rowspan="5"&gt;Lev
Konstantinovskiy&lt;/td&gt;
&lt;td rowspan="5"&gt;&lt;strong&gt;Same Content, Different Words&lt;/strong&gt;
- Is 'Ice cream' the same as 'Gelato' in different
reviews? Use Word Mover's Distance in GenSim to find
out.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td rowspan="5"&gt;43:20&lt;/td&gt;
&lt;td rowspan="5"&gt;Mario&lt;/td&gt;
&lt;td rowspan="5"&gt;&lt;strong&gt;Randomize Your Decisions&lt;/strong&gt;
- We spammed ourselves by having too many alerts, had
hacked users, bugs everywhere, bad SEO. Still, it was
worth making a website.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td rowspan="5"&gt;48:30&lt;/td&gt;
&lt;td rowspan="5"&gt;Tim Head&lt;/td&gt;
&lt;td rowspan="5"&gt;&lt;strong&gt;Bayesian Optimization: Coffee&lt;/strong&gt;
- Tweak settings with Bayesian Optimization, easily.
Made scikit-optimize with simpler calls than scikit-
learn.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td rowspan="4"&gt;53:35&lt;/td&gt;
&lt;td rowspan="4"&gt;Meg Ray&lt;/td&gt;
&lt;td rowspan="4"&gt;&lt;strong&gt;Teaching Python to Children&lt;/strong&gt;
- Use both teacher pedagogy and developer technical
skills to train K-12 teachers.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</summary><category term="lightning talks"></category></entry><entry><title>Traveling in datetime</title><link href="https://pyvideo.org/pycon-es-2016/traveling-in-datetime.html" rel="alternate"></link><published>2016-10-08T00:00:00+00:00</published><updated>2016-10-08T00:00:00+00:00</updated><author><name>Mario Corchero</name></author><id>tag:pyvideo.org,2016-10-08:pycon-es-2016/traveling-in-datetime.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Tras un repaso rápido sobre el modulo time y datetime veremos los diferentes problemas que surgen al trabajar con zonas horarias y operaciones sobre fechas. La presentación incluirá un pequeño repaso sobre las diferentes formas de representar fechas.&lt;/p&gt;
&lt;p&gt;Presentación disponible en &lt;a class="reference external" href="https://mariocj89.github.io/reveal.js/datetime-pycones2016.html"&gt;https://mariocj89.github.io/reveal.js/datetime-pycones2016.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://2016.es.pycon.org/"&gt;http://2016.es.pycon.org/&lt;/a&gt;&lt;/p&gt;
</summary></entry></feed>