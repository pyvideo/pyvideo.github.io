<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_ernest-w-durbin-iii.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2019-05-05T00:00:00+00:00</updated><entry><title>Final Remarks and Conference Close for PyCon 2019</title><link href="https://pyvideo.org/pycon-us-2019/final-remarks-and-conference-close-for-pycon-2019.html" rel="alternate"></link><published>2019-05-05T00:00:00+00:00</published><updated>2019-05-05T00:00:00+00:00</updated><author><name>Ernest W. Durbin III</name></author><id>tag:pyvideo.org,2019-05-05:pycon-us-2019/final-remarks-and-conference-close-for-pycon-2019.html</id><summary type="html"></summary><category term="coding"></category><category term="ernest"></category><category term="pycon"></category><category term="python"></category><category term="tutorial"></category></entry><entry><title>Welcome and Housekeeping of PyCon 2019</title><link href="https://pyvideo.org/pycon-us-2019/welcome-and-housekeeping-of-pycon-2019.html" rel="alternate"></link><published>2019-05-03T00:00:00+00:00</published><updated>2019-05-03T00:00:00+00:00</updated><author><name>Ernest W. Durbin III</name></author><id>tag:pyvideo.org,2019-05-03:pycon-us-2019/welcome-and-housekeeping-of-pycon-2019.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Welcome message for PyCon 2019&lt;/p&gt;
</summary></entry><entry><title>Keeping Python Online (PyTexas 2017 Keynote)</title><link href="https://pyvideo.org/pytexas-2017/keeping-python-online-pytexas-2017-keynote.html" rel="alternate"></link><published>2017-11-19T00:00:00+00:00</published><updated>2017-11-19T00:00:00+00:00</updated><author><name>Ernest W. Durbin III</name></author><id>tag:pyvideo.org,2017-11-19:pytexas-2017/keeping-python-online-pytexas-2017-keynote.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Ernest is a contributor to the Infrastructure Team and Packaging Working Group member for The Python Software Foundation, Organizer for the Cleveland Python meetup, and upcoming Chair for PyCon US 2018 in Cleveland Ohio.&lt;/p&gt;
</summary></entry><entry><title>Running Vintage Software: PyPI's Aging Codebase.</title><link href="https://pyvideo.org/north-bay-python-2017/running-vintage-software-pypis-aging-codebase.html" rel="alternate"></link><published>2017-12-03T00:00:00+00:00</published><updated>2017-12-03T00:00:00+00:00</updated><author><name>Ernest W. Durbin III</name></author><id>tag:pyvideo.org,2017-12-03:north-bay-python-2017/running-vintage-software-pypis-aging-codebase.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;From it's origins in the early days as a metadata server to the current trove of hosted packages, PyPI has grown into a critical part of the Python Communities Infrastructure.&lt;/p&gt;
&lt;p&gt;Originally conceived and implemented in 2002 as a simple set of metadata, the codebase that backs PyPI has been pushed well beyond it's limits. While some may call it &amp;quot;legacy&amp;quot; software, I choose to view it like one may view a classic car that still sees it's time on the road.&lt;/p&gt;
&lt;p&gt;This talk will present some of the challenges common to keeping a Vintage Car on the road as well as their counter parts when dealing with Vintage Software and take a look at the approaches that have worked well to keep PyPI up and running as a full rewrite is underway.&lt;/p&gt;
&lt;p&gt;Also covered will be an overview of the history of PyPI as a whole, as well as what the future holds and how you (yes you!) can contribute.&lt;/p&gt;
&lt;p&gt;Technical Topics covered include:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;External caching, Content Delivery Networks&lt;/li&gt;
&lt;li&gt;Internal caching, to speed up common or repetitive requests which just can't be cached in the CDN&lt;/li&gt;
&lt;li&gt;Metrics, Metrics, Metrics! Not just for monitoring! Keep track of what features just aren't worth supporting any longer or what methods are prime for optimization&lt;/li&gt;
&lt;li&gt;Dealing with issues related to scaling even when major refactors or changes aren't feasible.&lt;/li&gt;
&lt;li&gt;Increasing reliability&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The desired outcome for attendees of this talk is a sense of how to approach a Vintage codebase that must remain up and running even as it's predecessor may be in progress. Big rewrites can take time! Don't feel defeated sustaining an old project, it is what your users need!&lt;/p&gt;
&lt;p&gt;Novice attendees may find the history and high level concepts interesting, but Intermediate attendees should get the most out of this talk. Specifically some of the technical bits will make the most sense and be most applicable if you've ever worked on a medium to large production web service.&lt;/p&gt;
</summary></entry><entry><title>Running Vintage Software: PyPI's Aging Codebase.</title><link href="https://pyvideo.org/pygotham-2017/running-vintage-software-pypis-aging-codebase.html" rel="alternate"></link><published>2017-10-07T00:00:00+00:00</published><updated>2017-10-07T00:00:00+00:00</updated><author><name>Ernest W. Durbin III</name></author><id>tag:pyvideo.org,2017-10-07:pygotham-2017/running-vintage-software-pypis-aging-codebase.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;From it's origins in the early days as a metadata server to the current trove of hosted packages, PyPI has grown into a critical part of the Python Communities Infrastructure.&lt;/p&gt;
&lt;p&gt;Originally conceived and implemented in 2002 as a simple set of metadata, the codebase that backs PyPI has been pushed well beyond it's limits. While some may call it &amp;quot;legacy&amp;quot; software, I choose to view it like one may view a classic car that still sees it's time on the road.&lt;/p&gt;
&lt;p&gt;This talk will present some of the challenges common to keeping a Vintage Car on the road as well as their counter parts when dealing with Vintage Software and take a look at the approaches that have worked well to keep PyPI up and running as a full rewrite is underway.&lt;/p&gt;
&lt;p&gt;Also covered will be an overview of the history of PyPI as a whole, as well as what the future holds and how you (yes you!) can contribute.&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;Technical Topics covered include:&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;External caching, Content Delivery Networks&lt;/li&gt;
&lt;li&gt;Internal caching, to speed up common or repetitive requests which just can't be cached in the CDN&lt;/li&gt;
&lt;li&gt;Metrics, Metrics, Metrics! Not just for monitoring! Keep track of what features just aren't worth supporting any longer or what methods are prime for optimization&lt;/li&gt;
&lt;li&gt;Dealing with issues related to scaling even when major refactors or changes aren't feasible.&lt;/li&gt;
&lt;li&gt;Increasing reliability&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;The desired outcome for attendees of this talk is a sense of how to approach a Vintage codebase that must remain up and running even as it's predecessor may be in progress. Big rewrites can take time! Don't feel defeated sustaining an old project, it is what your users need!&lt;/p&gt;
&lt;p&gt;Novice attendees may find the history and high level concepts interesting, but Intermediate attendees should get the most out of this talk. Specifically some of the technical bits will make the most sense and be most applicable if you've ever worked on a medium to large production web service.&lt;/p&gt;
</summary></entry><entry><title>The Ministry of Silly Talks</title><link href="https://pyvideo.org/pygotham-2017/the-ministry-of-silly-talks.html" rel="alternate"></link><published>2017-10-06T00:00:00+00:00</published><updated>2017-10-06T00:00:00+00:00</updated><author><name>Fangfei Shen</name></author><id>tag:pyvideo.org,2017-10-06:pygotham-2017/the-ministry-of-silly-talks.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Lightning Talks from PyGotham 2017&lt;/p&gt;
</summary><category term="lightning talks"></category></entry><entry><title>Running Vintage Software: PyPI's Aging Codebase.</title><link href="https://pyvideo.org/pyohio-2017/running-vintage-software-pypis-aging-codebase.html" rel="alternate"></link><published>2017-07-29T00:00:00+00:00</published><updated>2017-07-29T00:00:00+00:00</updated><author><name>Ernest W. Durbin III</name></author><id>tag:pyvideo.org,2017-07-29:pyohio-2017/running-vintage-software-pypis-aging-codebase.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The Python Package Index, lovingly known as The Cheeseshop to some, has grown enormously since it's introduction in 2002. As a critical piece of the Python Community's infrastructure, it has suffered many growing pains over the years. Let's review the recent history of PyPI, lessons learned, and techniques applied to keep it running.&lt;/p&gt;
</summary></entry><entry><title>Saturday Lightning Talks</title><link href="https://pyvideo.org/pyohio-2016/saturday-lightning-talks.html" rel="alternate"></link><published>2016-07-30T00:00:00+00:00</published><updated>2016-07-30T00:00:00+00:00</updated><author><name>Matt Behrens</name></author><id>tag:pyvideo.org,2016-07-30:pyohio-2016/saturday-lightning-talks.html</id><summary type="html"></summary><category term="lightning talks"></category></entry></feed>