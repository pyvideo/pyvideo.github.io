<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org - Jason McDonald</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_jason-mcdonald.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2020-07-23T00:00:00+00:00</updated><subtitle></subtitle><entry><title>Writing Zenlike Python</title><link href="https://pyvideo.org/europython-2020/writing-zenlike-python.html" rel="alternate"></link><published>2020-07-23T00:00:00+00:00</published><updated>2020-07-23T00:00:00+00:00</updated><author><name>Jason McDonald</name></author><id>tag:pyvideo.org,2020-07-23:/europython-2020/writing-zenlike-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Write beautiful, Pythonic code with insights from the legendary Zen of Python&lt;/p&gt;
&lt;p&gt;There's a profound gap between working code and Pythonic code. To the developer whose first language is NOT Python, the distinction can appear blurry, even arbitrary. What is this &amp;quot;one obvious way&amp;quot; all those Python nerds are â€¦&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Write beautiful, Pythonic code with insights from the legendary Zen of Python&lt;/p&gt;
&lt;p&gt;There's a profound gap between working code and Pythonic code. To the developer whose first language is NOT Python, the distinction can appear blurry, even arbitrary. What is this &amp;quot;one obvious way&amp;quot; all those Python nerds are going on about?&lt;/p&gt;
&lt;p&gt;Most of us are familiar with the &amp;quot;Zen of Python&amp;quot;, Tim Peters's legendary, if tongue-in-cheek, set of guiding principles for the Python language. But can they actually inform Pythonic code?&lt;/p&gt;
&lt;p&gt;In this talk, Jason C. McDonald will unpack how the twenty principles (including the unwritten rule) of the Zen can guide you to write beautiful, maintainable code, by treating Python AS Python!&lt;/p&gt;
&lt;p&gt;This talk is intended primarily for developers who have come to Python from another language, no matter their experience level. McDonald will shed light on how to work WITH Python's type system, statements, and iterative tools, rather than against them. You'll walk away with a new appreciation of the language, and an understanding of what Pythonic really means; an understanding which will empower you to find the One Obvious Way to solve any problem in Python.&lt;/p&gt;
</content><category term="EuroPython 2020"></category><category term="europython"></category><category term="europython-2020"></category><category term="europython-online"></category><category term="Beginners"></category><category term="Clean Code"></category><category term="Python 3"></category><category term="Python general"></category><category term="The Answer to Life the Universe and Everything Else"></category></entry></feed>