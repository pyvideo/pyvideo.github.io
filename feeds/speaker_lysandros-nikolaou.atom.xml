<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org - Lysandros Nikolaou</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_lysandros-nikolaou.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2025-05-16T00:00:00+00:00</updated><subtitle></subtitle><entry><title>Unraveling Community Support For Free-Threaded Python</title><link href="https://pyvideo.org/pycon-us-2025/unraveling-community-support-for-free-threaded-python.html" rel="alternate"></link><published>2025-05-16T00:00:00+00:00</published><updated>2025-05-16T00:00:00+00:00</updated><author><name>Lysandros Nikolaou</name></author><id>tag:pyvideo.org,2025-05-16:/pycon-us-2025/unraveling-community-support-for-free-threaded-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Shipping the free-threaded build of Python 3.13 was just the first step towards unlocking scalable multithreaded parallelism in Python. To unlock improved performance for real-world compute tasks, the universe of community-maintained open source packages also needed to be updated. This is the story of the first year of â€¦&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Shipping the free-threaded build of Python 3.13 was just the first step towards unlocking scalable multithreaded parallelism in Python. To unlock improved performance for real-world compute tasks, the universe of community-maintained open source packages also needed to be updated. This is the story of the first year of that effort.&lt;/p&gt;
&lt;p&gt;We will share tools, techniques, and guidance gained from porting Cython, NumPy, SciPy, PyO3, and many other packages with C, Cython, C++, Fortran, and Rust native extensions to support free-threaded Python, illustrated by anecdotes from our experiences.&lt;/p&gt;
&lt;p&gt;Attendees will learn about tools and techniques to discover and fix thread safety issues and multithreaded scaling bottlenecks in packages with native extensions or dependencies. If you are unsure about how to support free-threaded Python in a package you maintain, we hope that this talk will give you a plan and the toolbox necessary to accomplish the task.&lt;/p&gt;
&lt;p&gt;This talk is targeted at developers and maintainers of Python packages that include native dependencies as well as people who are interested in contributing to community packages that include native code. We assume some prior knowledge with native Python extensions written in C, C++, Rust, or Cython.&lt;/p&gt;
</content><category term="PyCon US 2025"></category></entry></feed>