<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_gintare-urbone.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2019-06-16T00:00:00+00:00</updated><entry><title>Strongly typed python</title><link href="https://pyvideo.org/pylondinium-2019/strongly-typed-python.html" rel="alternate"></link><published>2019-06-16T00:00:00+00:00</published><updated>2019-06-16T00:00:00+00:00</updated><author><name>Gintare Urbone</name></author><id>tag:pyvideo.org,2019-06-16:pylondinium-2019/strongly-typed-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Background&lt;/p&gt;
&lt;p&gt;Creating a core banking platform with python as one of the main backend languages is as much fun and rewarding task as challenging one. I would like to talk about very interesting topic - which I called Strongly typed python. I will be partially basing the story on my experience working in fintech startup as well as my personal projects. This topic is important for anyone who is building more strict and solid python library or python based templating language.&lt;/p&gt;
&lt;p&gt;Content&lt;/p&gt;
&lt;p&gt;In the talk, I will go through tips and ideas on how one can use:&lt;/p&gt;
&lt;p&gt;meta-classes,
sub-classing,
decorators
and other python provided patterns
in their python libraries to make the lib-client API more strict and robust. I will share main benefits and lessons learned from hardening the user exposed python library, such as auto-generated documentation, validation, limitation and security.&lt;/p&gt;
&lt;p&gt;Target audience&lt;/p&gt;
&lt;p&gt;This topic is very important for anyone building customer-facing python library or python based templating language.&lt;/p&gt;
</summary></entry></feed>