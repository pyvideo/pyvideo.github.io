<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org - legacy-code</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/tag_legacy-code.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2020-07-23T00:00:00+00:00</updated><subtitle></subtitle><entry><title>Refactoring in Python</title><link href="https://pyvideo.org/europython-2019/refactoring-in-python.html" rel="alternate"></link><published>2019-07-11T00:00:00+00:00</published><updated>2019-07-11T00:00:00+00:00</updated><author><name>Tin Marković</name></author><id>tag:pyvideo.org,2019-07-11:/europython-2019/refactoring-in-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;div class="line-block"&gt;
&lt;div class="line"&gt;[Replacement talk]&lt;/div&gt;
&lt;div class="line"&gt;This talk was a replacement for Stanislav Geidl's talk: From legacy
code to modern code&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Honest apologies to anyone whose expectations were subverted, but
Stanislav fell sick and could not attend. Find the updated abstract
below:&lt;/p&gt;
&lt;p&gt;This talk will describe experiences and lessons learned from tackling
extremely …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;div class="line-block"&gt;
&lt;div class="line"&gt;[Replacement talk]&lt;/div&gt;
&lt;div class="line"&gt;This talk was a replacement for Stanislav Geidl's talk: From legacy
code to modern code&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Honest apologies to anyone whose expectations were subverted, but
Stanislav fell sick and could not attend. Find the updated abstract
below:&lt;/p&gt;
&lt;p&gt;This talk will describe experiences and lessons learned from tackling
extremely demanding code. How to bring order to mismanaged code and
elevate the code base to a standard that's acceptable in today's tech
environment.&lt;/p&gt;
&lt;p&gt;Python makes wonderful code accessible at our fingertips, but it also
allows us to take a lot of liberty. When you start, code is beautiful
and makes sense. With each step you walk on, you find more and more
hacks showing up. Eventually, the brilliant codebase you've started with
can not be seen under the mud.&lt;/p&gt;
&lt;p&gt;Not every code-base can be rewritten, not everything can be redone from
scratch. Cool libraries often take a lot of liberty with code structure
and make cross-integration difficult, if not impossible. Tests sound
ideal, but in practice, they're just so hard to make right. Why is this,
and how to change it?&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;The talk will tackle the problems in three parts:&lt;/div&gt;
&lt;div class="line"&gt;- The Easy Wins: What to do to instantly increase the code quality in
your organisation. How? Why isn't it enough?&lt;/div&gt;
&lt;div class="line"&gt;- Patterns and Antipatterns: How to identify code that &amp;quot;smells&amp;quot;, how
to replace it? How to integrate into old code, better?&lt;/div&gt;
&lt;div class="line"&gt;- The Philosophy: What approach to set down for the future? Why to
care? How to write replace-able code. How to prevent history from
repeating.&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The talk will close with audience discussion and experiences, questions
and proposals - building a collection of some on-premise tips and
tricks.&lt;/p&gt;
</content><category term="EuroPython 2019"></category><category term="Architecture"></category><category term="Clean Code"></category><category term="Development"></category><category term="Python 3"></category><category term="legacy-code"></category></entry><entry><title>Resurrecting a django project in python 2.7 for 3.8</title><link href="https://pyvideo.org/europython-2020/resurrecting-a-django-project-in-python-27-for-38.html" rel="alternate"></link><published>2020-07-23T00:00:00+00:00</published><updated>2020-07-23T00:00:00+00:00</updated><author><name>Griffith S Rees</name></author><id>tag:pyvideo.org,2020-07-23:/europython-2020/resurrecting-a-django-project-in-python-27-for-38.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Pitfalls and euphoria updating my GeoDjango 1.11 PhD project to Django 3.0&lt;/p&gt;
&lt;p&gt;Goals:&lt;/p&gt;
&lt;p&gt;Describe the process I went though to return to and finish the code I wrote for my PhD modelling the geographic growth and decline of a Bulletin Board Systems (BBS) community called FidoNet. I …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Pitfalls and euphoria updating my GeoDjango 1.11 PhD project to Django 3.0&lt;/p&gt;
&lt;p&gt;Goals:&lt;/p&gt;
&lt;p&gt;Describe the process I went though to return to and finish the code I wrote for my PhD modelling the geographic growth and decline of a Bulletin Board Systems (BBS) community called FidoNet. I had to leave the project for 2 major surgeries and finally returned to finish, validate the results and present a paper at the Sunbelt conference in Paris.&lt;/p&gt;
</content><category term="EuroPython 2020"></category><category term="europython"></category><category term="europython-2020"></category><category term="europython-online"></category><category term="Django"></category><category term="GEO and GIS"></category><category term="Git"></category><category term="Testing"></category><category term="legacy-code"></category></entry><entry><title>We have nearly one million lines of Python 2 code in production – and now?</title><link href="https://pyvideo.org/europython-2020/we-have-nearly-one-million-lines-of-python-2-code-in-production-and-now.html" rel="alternate"></link><published>2020-07-23T00:00:00+00:00</published><updated>2020-07-23T00:00:00+00:00</updated><author><name>Michael Howitz</name></author><id>tag:pyvideo.org,2020-07-23:/europython-2020/we-have-nearly-one-million-lines-of-python-2-code-in-production-and-now.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Porting a rather large code base to Python 3 – lessons learned usable for projects of any size&lt;/p&gt;
&lt;p&gt;In this talk I am going to present possible approaches for a Python 3 migration of existing Python code running on Python 2.7. I'll evaluate which of these approaches seems suitable …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Porting a rather large code base to Python 3 – lessons learned usable for projects of any size&lt;/p&gt;
&lt;p&gt;In this talk I am going to present possible approaches for a Python 3 migration of existing Python code running on Python 2.7. I'll evaluate which of these approaches seems suitable for a large code base and which principles should be paid attention to to increase the probability of a successful migration project.&lt;/p&gt;
&lt;p&gt;I'll use union.cms (a content management system used by German trade unions) to show the story of a successful migration project involving nearly one million lines of Python code. The story will include the obstacles we encountered and what we learned on the way.&lt;/p&gt;
&lt;p&gt;I believe that most of the discussed ideas and experience can also be used unchanged in smaller projects as the presented principles are very much the same.&lt;/p&gt;
&lt;p&gt;Goal of the presentation: You should be able to come up with a plan for migrating your Python 2 based projects to Python 3.&lt;/p&gt;
</content><category term="EuroPython 2020"></category><category term="europython"></category><category term="europython-2020"></category><category term="europython-online"></category><category term="Best Practice"></category><category term="Development"></category><category term="Python 2"></category><category term="Python 3"></category><category term="legacy-code"></category></entry></feed>