<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_mac-chapman.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2018-09-15T00:00:00+00:00</updated><entry><title>Make Your Code Really Boring</title><link href="https://pyvideo.org/pycon-uk-2018/make-your-code-really-boring.html" rel="alternate"></link><published>2018-09-15T00:00:00+00:00</published><updated>2018-09-15T00:00:00+00:00</updated><author><name>Mac Chapman</name></author><id>tag:pyvideo.org,2018-09-15:pycon-uk-2018/make-your-code-really-boring.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Readability and Maintainability are Boring&lt;/p&gt;
&lt;p&gt;In my time, I’ve written some really exciting code: I’ve overridden
nearly every operator in python and I've written logic in XML. It was a
lot of fun, but it was all impossible to maintain. In this session I’ll
work through some beginner to intermediate techniques for making code
more predictable and manageable and share a few stories from projects
past. I’ll tell you why you shouldn’t make a CSS class called “yellow”,
what a variable called “noecho” really ought to do, and why you probably
don’t need a variable called “noecho” anyway.&lt;/p&gt;
</summary></entry><entry><title>How We Grew From One Team to Two</title><link href="https://pyvideo.org/pycon-uk-2017/how-we-grew-from-one-team-to-two.html" rel="alternate"></link><published>2017-10-29T16:30:00+01:00</published><updated>2017-10-29T16:30:00+01:00</updated><author><name>Mac Chapman</name></author><id>tag:pyvideo.org,2017-10-29:pycon-uk-2017/how-we-grew-from-one-team-to-two.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;As a growing startup, the move from one team of engineers to two is intimidating. Splitting the workforce can impact both the team and the software. In this talk, we’ll focus on the team side of the transition, looking at how it impacts engineers and those around them.&lt;/p&gt;
&lt;p&gt;We’ll look at how this change comes about and what to look for as it approaches, discussing the options you will have in splitting up your team. Finally, we’ll look at how Osirium handled the change - what we did well, what we got wrong, and what we wish we’d known before we started.&lt;/p&gt;
</summary></entry></feed>