<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_wei-lin.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2016-09-21T00:00:00+00:00</updated><entry><title>Building Distributed System with Celery on Docker Swarm</title><link href="https://pyvideo.org/pycon-japan-2016/building-distributed-system-with-celery-on-docker-swarm.html" rel="alternate"></link><published>2016-09-21T00:00:00+00:00</published><updated>2016-09-21T00:00:00+00:00</updated><author><name>Wei Lin</name></author><id>tag:pyvideo.org,2016-09-21:pycon-japan-2016/building-distributed-system-with-celery-on-docker-swarm.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk, the basic mechanisms of Celery and Docker-Swarm will be explained. With Docker-Swarm , a cluster will be built upon two Raspberry Pi machines. Hadoop entry-level &amp;quot;Word Count&amp;quot; program will be re-writen in Python and executed parallelly via Celery on the cluster. An example of distributed system modeling nerual-network will also be explained.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;In the territory of Python, Celery is a famous distributed task queue framework, its Canvas mechanism is specially powerful in building complex workflow.
Celery can function in distributed environment and go perfectly along with Docker-Swarm: Docker-Swarm provides a cluster environment and the worker containers to sustain Celery; worker containers and processes and be dynamically scaled and expanded to fulfill Celery's need, work together parallelly to accomplish the computation.
With Celery and Docker-Swarm, an example will be provided, in which a cluster of 8 containers will be built upon two Raspberry Pi machines. Hadoop entry-level &amp;quot;Word Count&amp;quot; program will be re-writen in Python and executed parallelly via Celery on the cluster.&lt;/p&gt;
&lt;p&gt;Regarding concurrent/distributed computing, IoT, microservices, serverless-computing are all well known paradigms. Based on MQTT, IBM Bluemix is one of the leaders in this field, however, free of charge only for 30 days.
With Celery and Docker-Swarm, and with respect to Bluemix, we can actually build a private IoT-liked system in minutes, free of any charge. To provide an example, a distributed system using Celery and Docker-Swarm modeling a neural-network will be explained.&lt;/p&gt;
</summary></entry></feed>