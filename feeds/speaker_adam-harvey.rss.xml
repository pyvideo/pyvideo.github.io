<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org - Adam Harvey</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Sat, 08 Feb 2025 00:00:00 +0000</lastBuildDate><item><title>What PHP learned from Python</title><link>https://pyvideo.org/north-bay-python-2018/what-php-learned-from-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In 2015, the PHP project released version 7.0 of the PHP language. This
was the culmination of years of discussion about the scope of the
version, and what we were willing to break. An advantage we had in PHP
was that Python had gone through a similar process with Python 3 seven
years earlier. I'll discuss the lessons we took from the Python 2-3
transition, and how we used them.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Adam Harvey</dc:creator><pubDate>Sat, 03 Nov 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-11-03:/north-bay-python-2018/what-php-learned-from-python.html</guid><category>North Bay Python 2018</category></item><item><title>Quantifying Nebraska</title><link>https://pyvideo.org/north-bay-python-2024/quantifying-nebraska.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;[In 2020, xkcd published _Dependency_](&lt;a class="reference external" href="https://xkcd.com/2347/"&gt;https://xkcd.com/2347/&lt;/a&gt;), which posited that &amp;quot;all modern digital infrastructure&amp;quot; is ultimately transitively dependent on &amp;quot;a project some random person in Nebraska has been thanklessly maintaining since 2003&amp;quot;.&lt;/p&gt;
&lt;p&gt;How can we find these projects and ensure that their maintainers get the thanks and — more importantly — the resources they need?&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Adam Harvey</dc:creator><pubDate>Thu, 30 May 2024 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2024-05-30:/north-bay-python-2024/quantifying-nebraska.html</guid><category>North Bay Python 2024</category></item><item><title>Quantifying Nebraska</title><link>https://pyvideo.org/pycascades-2025/quantifying-nebraska.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In 2020, xkcd published Dependency, which posited that &amp;quot;all modern digital infrastructure&amp;quot; is ultimately transitively dependent on &amp;quot;a project some random person in Nebraska has been thanklessly maintaining since 2003&amp;quot;.&lt;/p&gt;
&lt;p&gt;How can we find these projects and ensure that their maintainers get the thanks and — more importantly — the resources they need to keep delivering the quality software that we all rely upon?&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Adam Harvey</dc:creator><pubDate>Sat, 08 Feb 2025 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2025-02-08:/pycascades-2025/quantifying-nebraska.html</guid><category>PyCascades 2025</category></item><item><title>Four* non-cryptographic hash functions enter. One leaves.</title><link>https://pyvideo.org/pycon-au-2015/four-non-cryptographic-hash-functions-enter-one.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;When you say “hash function” in a room full of Python developers, people
tend to think of the classics you get in hashlib: MD5, SHA-1, SHA-224,
SHA-256, SHA-384, SHA-512, SHA-OHGODPLEASESTOP, and the like —
cryptographic hash functions intended for cryptographic uses.&lt;/p&gt;
&lt;p&gt;There’s another world out there, though: non-cryptographic hashes.
Sometimes you just need to figure out if you’ve already seen a string or
structure. Sometimes you need a basic checksum. Sometimes you need a
hash that’s just fast and can fit into a 32 bit integer.&lt;/p&gt;
&lt;p&gt;I’ll run through the state of the art in the world of non-cryptographic
hashing — what your best options are, how they compare in terms of CPU
and memory usage, and how they work. Who takes it? Whose mixing function
reigns supreme?&lt;/p&gt;
&lt;p&gt;Let’s find out.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;I’m saying “four”, but realistically I’m going to cover as many
modern options as I can fit into the time available. Let’s say “four
plus two or minus one” in reality.&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Adam Harvey</dc:creator><pubDate>Tue, 04 Aug 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-08-04:/pycon-au-2015/four-non-cryptographic-hash-functions-enter-one.html</guid><category>PyCon AU 2015</category></item><item><title>What PHP learned from Python</title><link>https://pyvideo.org/pycon-au-2019/what-php-learned-from-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In 2015, the PHP project released version 7.0 of the PHP language. An advantage PHP had was that Python had gone through a similar process with Python 3 seven years earlier. I'll discuss the lessons taken from the Python 2-3 transition, and how they were applied.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://2019.pycon-au.org/talks/what-php-learned-from-python"&gt;https://2019.pycon-au.org/talks/what-php-learned-from-python&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Sun Aug  4 11:10:00 2019 at C3.3&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Adam Harvey</dc:creator><pubDate>Sun, 04 Aug 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-08-04:/pycon-au-2019/what-php-learned-from-python.html</guid><category>PyCon AU 2019</category></item></channel></rss>