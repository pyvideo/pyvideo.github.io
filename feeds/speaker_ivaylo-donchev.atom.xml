<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_ivaylo-donchev.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2018-11-16T00:00:00+00:00</updated><entry><title>PyCon Balkan Belgrade 2018 - Day 1 - LIVE STREAM</title><link href="https://pyvideo.org/pycon-balkan-belgrade-2018/pycon-balkan-belgrade-2018-day-1-live-stream.html" rel="alternate"></link><published>2018-11-16T00:00:00+00:00</published><updated>2018-11-16T00:00:00+00:00</updated><author><name>Luka Kladarić</name></author><id>tag:pyvideo.org,2018-11-16:pycon-balkan-belgrade-2018/pycon-balkan-belgrade-2018-day-1-live-stream.html</id><summary type="html"></summary></entry><entry><title>PyCon Balkan Belgrade 2018 - LIVE STREAM</title><link href="https://pyvideo.org/pycon-balkan-belgrade-2018/pycon-balkan-belgrade-2018-live-stream.html" rel="alternate"></link><published>2018-11-16T00:00:00+00:00</published><updated>2018-11-16T00:00:00+00:00</updated><author><name>Luka Kladarić</name></author><id>tag:pyvideo.org,2018-11-16:pycon-balkan-belgrade-2018/pycon-balkan-belgrade-2018-live-stream.html</id><summary type="html"></summary></entry><entry><title>Django queries optimization</title><link href="https://pyvideo.org/europython-2018/django-queries-optimization.html" rel="alternate"></link><published>2018-07-26T00:00:00+00:00</published><updated>2018-07-26T00:00:00+00:00</updated><author><name>Ivaylo Donchev</name></author><id>tag:pyvideo.org,2018-07-26:europython-2018/django-queries-optimization.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Collecting data from multiple Models is a common flow in Django
development. In most of the cases &lt;tt class="docutils literal"&gt;prefetch_related&lt;/tt&gt; and
&lt;tt class="docutils literal"&gt;select_related&lt;/tt&gt; do all of the job for optimizing the queries.&lt;/p&gt;
&lt;p&gt;When the models structure become complicated enough and we’ve put our
logic for collecting these items in models’ properties we suddenly
cannot use &lt;tt class="docutils literal"&gt;prefetch_related&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;select_related&lt;/tt&gt; anymore. Our View
‘s queries count depends on selected items count with high complexity.
The problem is in the selection logic: we’ve implemented an algorithm
which calculates something and we cannot prefetch or select all of the
objects.&lt;/p&gt;
&lt;p&gt;So this talk’s purpose is: To show how to use Django ORM to move the
selection logic, the calculations, the aggregations over group of
objects from our python code to our database and moving all of the logic
for this in one place - the queryset and test it easily.&lt;/p&gt;
</summary></entry></feed>