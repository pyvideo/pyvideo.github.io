<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_noufal-ibrahim.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2017-02-17T00:00:00+00:00</updated><entry><title>Rewriting the Wayback machine's live web proxy in Python</title><link href="https://pyvideo.org/pycon-india-2012/rewriting-the-wayback-machines-live-web-proxy-in-python.html" rel="alternate"></link><published>2012-09-29T00:00:00+00:00</published><updated>2012-09-29T00:00:00+00:00</updated><author><name>Noufal Ibrahim</name></author><id>tag:pyvideo.org,2012-09-29:pycon-india-2012/rewriting-the-wayback-machines-live-web-proxy-in-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The wayback machine is a high traffic website that has been online for over a decade. It was a mostly Java application. One component of the application is the Liveweb proxy. This is an HTTP proxy that archives a resource which is requested through it and the core data source for the wayback machine.
The liveweb proxy was rearchitected from scratch in Python and deployed on the actual website and has been running for a few months now without a single hitch. There were limitations in the standard library which needed to be worked around, careful tuning of parameters to balance disk I/O and memory usage, fine details of the HTTP protocol that needed to be understood and respected.
This talk discusses the architecture and design of the new system to handle the kind of traffic and patterns which are expected of an archiving proxy and how it was deployed.&lt;/p&gt;
</summary><category term="wayback machine"></category><category term="liveweb"></category><category term="http"></category></entry><entry><title>Testing Native binaries using cffi by Noufal Ibrahim 28:34</title><link href="https://pyvideo.org/pycon-india-2016/testing-native-binaries-using-cffi-by-noufal-ibrahim-2834.html" rel="alternate"></link><published>2016-09-23T00:00:00+00:00</published><updated>2016-09-23T00:00:00+00:00</updated><author><name>Noufal Ibrahim</name></author><id>tag:pyvideo.org,2016-09-23:pycon-india-2016/testing-native-binaries-using-cffi-by-noufal-ibrahim-2834.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;24-09-16&lt;/p&gt;
</summary></entry><entry><title>Testing native binaries using CFFI</title><link href="https://pyvideo.org/pycon-pune-2017/testing-native-binaries-using-cffi.html" rel="alternate"></link><published>2017-02-17T00:00:00+00:00</published><updated>2017-02-17T00:00:00+00:00</updated><author><name>Noufal Ibrahim</name></author><id>tag:pyvideo.org,2017-02-17:pycon-pune-2017/testing-native-binaries-using-cffi.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This a quick intro to the idea of FFI in Python and one practical use
case based on my own experiences with a personal project.&lt;/p&gt;
&lt;p&gt;I’ve been working a native cross platform library to gather system
information. The long term intention is to make bindings for it in
various languages. The whole thing is written in C and it’s somewhat
hard to write unit tests for these kinds of libraries.&lt;/p&gt;
&lt;p&gt;This talk is about using a combination of cffi and py.test to write unit
tests for the library in Python.&lt;/p&gt;
&lt;p&gt;The talk will cover some basics of writing python bindings using CFFI
and then writing unit tests using these. As a bonus, a small py.test
plugin which can be used to measure the unit tests coverage of the C
library will be presented.&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;The presentation is and outline are at
&lt;a class="reference external" href="https://github.com/nibrahim/presentation-cffi/blob/master/outline.org"&gt;https://github.com/nibrahim/presentation-cffi/blob/master/outline.org&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;I might tweak it a little for stlyistic purposes but this is what I’ll
be presenting&lt;/div&gt;
&lt;/div&gt;
</summary></entry></feed>