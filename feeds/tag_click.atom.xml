<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/tag_click.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2017-09-23T17:00:00+02:00</updated><entry><title>Cómo diseñar un programa CLI fácil de lanzar, con un Click</title><link href="https://pyvideo.org/pycon-es-2017/como-disenar-un-programa-cli-facil-de-lanzar-con-un-click.html" rel="alternate"></link><published>2017-09-23T17:00:00+02:00</published><updated>2017-09-23T17:00:00+02:00</updated><author><name>Santiago Saavedra</name></author><id>tag:pyvideo.org,2017-09-23:pycon-es-2017/como-disenar-un-programa-cli-facil-de-lanzar-con-un-click.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Estás construyendo un script o un pequeño frontend para probar tu biblioteca. ¿Como probar sus distintas opciones?&lt;/p&gt;
&lt;p&gt;Podrías usar argparse, pero cada vez los CLI tienen más parámetros que dependen del modo o del subcomando, así que necesitas algo modular. Esta charla presentará Click, una biblioteca diseñada para hacer sencillo exponer programas CLI, que incluso te permite interoperar argumentos con variables de entorno. Ejecuta tus scripts tanto en local como en un cluster sin ningún esfuerzo.&lt;/p&gt;
</summary><category term="click"></category></entry><entry><title>Click: A Pleasure To Write, A Pleasure To Use</title><link href="https://pyvideo.org/pycon-au-2016/click-a-pleasure-to-write-a-pleasure-to-use.html" rel="alternate"></link><published>2016-08-15T00:00:00+00:00</published><updated>2016-08-15T00:00:00+00:00</updated><author><name>Sebastian Vetter</name></author><id>tag:pyvideo.org,2016-08-15:pycon-au-2016/click-a-pleasure-to-write-a-pleasure-to-use.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Sebastian Vetter
&lt;a class="reference external" href="https://2016.pycon-au.org/schedule/64/view_talk"&gt;https://2016.pycon-au.org/schedule/64/view_talk&lt;/a&gt;
We have a wide variety of packages and modules in Python that help build
commandline tools in different ways. One of the more recent contenders is
'click'. It uses a very intuitive approach to create simple CLIs as well as
complex ones. In this talk, I will introduce building CLIs with 'click' and
illustrate some of its advantages.&lt;/p&gt;
</summary><category term="click"></category></entry><entry><title>Command line interfaces are easy, use them</title><link href="https://pyvideo.org/pytexas-2014/the-command-line-interface-because-why-not.html" rel="alternate"></link><published>2014-10-04T00:00:00+00:00</published><updated>2014-10-04T00:00:00+00:00</updated><author><name>Eloy Zuniga Jr.</name></author><id>tag:pyvideo.org,2014-10-04:pytexas-2014/the-command-line-interface-because-why-not.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Building a useful and pleasant command line experience is easy. If
you've never really tried adding a command line interface (CLI) to your
python scripts or maybe you still have a bitter taste in your mouth from
the days of sys.argv, getopt, optparse, and argparse.&lt;/p&gt;
&lt;p&gt;I invite you to take another look ... or your first look at command line
interfaces and how easy and useful it is for your progress and sanity.&lt;/p&gt;
&lt;p&gt;Comparing &lt;tt class="docutils literal"&gt;Begins&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;DocOpt&lt;/tt&gt;, and &lt;tt class="docutils literal"&gt;Click&lt;/tt&gt;&lt;/p&gt;
</summary><category term="click"></category><category term="Commandline"></category></entry></feed>