<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org - ZacHatfield-Dodds</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/tag_zachatfield-dodds.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2020-09-05T00:00:00+00:00</updated><subtitle></subtitle><entry><title>Stop Writing Tests!</title><link href="https://pyvideo.org/pycon-au-2020/stop-writing-tests.html" rel="alternate"></link><published>2020-09-05T00:00:00+00:00</published><updated>2020-09-05T00:00:00+00:00</updated><author><name>Zac Hatfield-Dodds</name></author><id>tag:pyvideo.org,2020-09-05:/pycon-au-2020/stop-writing-tests.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Zac Hatfield-Dodds&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://2020.pycon.org.au/program/TCT3GH"&gt;https://2020.pycon.org.au/program/TCT3GH&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;We often think of manual testing as slower and less effective than automated testing,
but most test suites haven't automated that much!  Computers can execute all our
pre-defined tests very quickly - and this is definitely a good thing, especially for â€¦&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Zac Hatfield-Dodds&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://2020.pycon.org.au/program/TCT3GH"&gt;https://2020.pycon.org.au/program/TCT3GH&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;We often think of manual testing as slower and less effective than automated testing,
but most test suites haven't automated that much!  Computers can execute all our
pre-defined tests very quickly - and this is definitely a good thing, especially for
regression tests - but the tricky parts are still done by humans.&lt;/p&gt;
&lt;p&gt;We select test cases (inputs) and check that the corresponding outputs make sense;
we write functions that &amp;quot;arrange, act, and assert&amp;quot; for our tests; and we decide -
or script via CI systems - which tests to execute and when.&lt;/p&gt;
&lt;p&gt;So lets explore some next-generation tools that we could use to automate these
remaining parts of a testing workflow!&lt;/p&gt;
&lt;p&gt;PROPERTY-BASED TESTING helps you to write more powerful tests by automating selection
of test cases: instead of listing input-output pairs, you describe the kind of data
you want and write a test that passes &lt;em&gt;for all X...&lt;/em&gt;.  We'll see a live demo, and
learn something about the Python builtins in the process!&lt;/p&gt;
&lt;p&gt;CODE INTROSPECTION, and a handy templating tool, can help write tests for you.
Do you need to know any more than which code to test, and what properties should hold?&lt;/p&gt;
&lt;p&gt;ADAPTIVE FUZZING tools take CI to its logical conclusion: instead of running a fixed
set of tests on each push, they sit on a server and run tests full-time... fine-tuning
themselves to find bugs in &lt;em&gt;your&lt;/em&gt; project and pulling each new commit as it lands!&lt;/p&gt;
&lt;p&gt;By the end of this talk, you'll know what these three kinds of tools can do -
and how to get started with automating the &lt;em&gt;rest&lt;/em&gt; of your testing tomorrow.&lt;/p&gt;
&lt;p&gt;Produced by NDV: &lt;a class="reference external" href="https://youtube.com/channel/UCQ7dFBzZGlBvtU2hCecsBBg?sub_confirmation=1"&gt;https://youtube.com/channel/UCQ7dFBzZGlBvtU2hCecsBBg?sub_confirmation=1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Python, PyCon, PyConAU, PyConline&lt;/p&gt;
&lt;p&gt;Sat Sep  5 11:35:00 2020 at Curlyboi&lt;/p&gt;
</content><category term="PyCon AU 2020"></category><category term="PyCon"></category><category term="PyConAU"></category><category term="PyConline"></category><category term="Python"></category><category term="ZacHatfield-Dodds"></category><category term="pyconau"></category><category term="pyconau_2020"></category></entry></feed>