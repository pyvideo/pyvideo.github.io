<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/tag_lupa.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2013-10-17T00:00:00+00:00</updated><entry><title>Lupa - LuaJIT in Python</title><link href="https://pyvideo.org/pycon-de-2013/lupa-luajit-in-python.html" rel="alternate"></link><published>2013-10-17T00:00:00+00:00</published><updated>2013-10-17T00:00:00+00:00</updated><author><name>Stefan Behnel</name></author><id>tag:pyvideo.org,2013-10-17:pycon-de-2013/lupa-luajit-in-python.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Der Python-Interpreter hat den Ruf, eine ausgereifte und grandios
einfach zu verwendende dynamische Sprache und Laufzeitumgebung zu
bieten, die für jede noch so &lt;a class="reference external" href="https://xkcd.com/413/"&gt;exotische
Anforderung&lt;/a&gt; eine Lösung bereit hält.&lt;/p&gt;
&lt;p&gt;Ein oft genanntes Manko ist jedoch die begrenzte Performance des
Interpreters für stark algorithmisch geprägte, kritische Teile von
Anwendungen. Insbesondere hochdynamischer und generierter Code kommt
hier schnell an seine Grenzen.&lt;/p&gt;
&lt;p&gt;Auf der anderen Seite existiert mit LuaJIT2 eine sehr schnelle
JIT-kompilierte Laufzeitumgebung der dynamischen Programmiersprache Lua,
die bereits so manche Performance-Rekorde gebrochen hat und sich durch
ihre geringe Größe leicht in andere Programme einbinden lässt. Das große
Manko von Lua ist jedoch das Fehlen von Standard-Bibliotheken, die
extrem begrenzten Sprach-Features und der daraus resultierende hohe
Aufwand bei der Entwicklung größerer Anwendungen.&lt;/p&gt;
&lt;p&gt;Mit &lt;a class="reference external" href="https://github.com/scoder/lupa"&gt;Lupa&lt;/a&gt; steht eine Verbindung der
beiden Programmiersprachen bereit, die es ermöglicht, aus Python heraus
Lua-Code auszuführen und direkt mit diesem zu kommunizieren und Daten
auszutauschen. So kann der größte Teil einer Anwendung in Python
implementiert werden, und einzelne Aufgaben können von der schnellen
LuaJIT-Umgebung übernommen werden.&lt;/p&gt;
&lt;p&gt;Dieser Vortrag stellt das Projekt vor und gibt Einblicke in die
Integration der beiden Programmiersprachen.&lt;/p&gt;
</summary><category term="lua"></category><category term="luajit"></category><category term="lupa"></category></entry></feed>