<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org - Josh Izaac</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_josh-izaac.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2021-05-14T00:00:00+00:00</updated><subtitle></subtitle><entry><title>What are quantum computers, and how can we train them in Python?</title><link href="https://pyvideo.org/pycon-us-2021/what-are-quantum-computers-and-how-can-we-train-them-in-python.html" rel="alternate"></link><published>2021-05-14T00:00:00+00:00</published><updated>2021-05-14T00:00:00+00:00</updated><author><name>Josh Izaac</name></author><id>tag:pyvideo.org,2021-05-14:/pycon-us-2021/what-are-quantum-computers-and-how-can-we-train-them-in-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;“Let me just go run this on my quantum computer.”&lt;/p&gt;
&lt;p&gt;Quantum computers aren’t what-ifs anymore — they are available now, and publicly accessible over the internet. And Python is rapidly becoming the language of choice for accessing and programming quantum computers, with Python SDKs available from Google (Cirq), IBM …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;“Let me just go run this on my quantum computer.”&lt;/p&gt;
&lt;p&gt;Quantum computers aren’t what-ifs anymore — they are available now, and publicly accessible over the internet. And Python is rapidly becoming the language of choice for accessing and programming quantum computers, with Python SDKs available from Google (Cirq), IBM (Qiskit), and others. However, early quantum computers are small, noisy, and error prone. Simultaneously, it has never been easier to perform differentiable programming in Python; simply swap out NumPy for TensorFlow, PyTorch, or JAX, and you have the ability to differentiate and train the program itself.&lt;/p&gt;
&lt;p&gt;So what would happen if we attempted to combine the two?&lt;/p&gt;
&lt;p&gt;Using a mixture of real Python examples and illustrated diagrams, we show how to not only evaluate, but also differentiate small quantum programs directly on quantum hardware. By extracting the gradients, we can integrate these quantum programs directly into larger differentiable programs in Python, and train/optimize the full (hybrid quantum-classical!) program. Over the course of this talk, quantum-curious Python developers will see first-hand how quantum programming looks in Python, and get an idea of how (and when) it makes sense to take advantage of these novel hardware devices.&lt;/p&gt;
&lt;p&gt;Slides: &lt;a class="reference external" href="https://iza.ac/pdf/pycon2021.pdf"&gt;https://iza.ac/pdf/pycon2021.pdf&lt;/a&gt;&lt;/p&gt;
</content><category term="PyCon US 2021"></category></entry></feed>