<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_fergal-walsh.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2018-11-10T00:00:00+00:00</updated><entry><title>Building a Fine Grained Image Classification System</title><link href="https://pyvideo.org/pycon-ireland-2018/building-a-fine-grained-image-classification-system.html" rel="alternate"></link><published>2018-11-10T00:00:00+00:00</published><updated>2018-11-10T00:00:00+00:00</updated><author><name>Fergal Walsh</name></author><id>tag:pyvideo.org,2018-11-10:pycon-ireland-2018/building-a-fine-grained-image-classification-system.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;At Fieldguide we are developing a digital field guide for all species of flora and fauna across the planet. We are using image recognition technology to enable species identification and to help with the curation of this massive catalogue. In this talk I will describe how we are building an image recognition system with the aim of identifying all known species in the natural world. The system has gone through a number of iterations at this point using a variety of computer vision and machine learning techniques, from nearest neighbour search to classification with fine tuned deep convolutional networks. All of this has been implemented in Python using scikit-learn, Numpy, Caffe and Tensorflow. Aside from the obvious machine learning challenges in designing and training such a system we faced numerous technical challenges while implementing and scaling this system in a cost effective manner. I will discuss these challenges, our solutions and the remaining open problems. While this talk will be relatively high level with few code examples and no math (but lots moths), it will be of most interest to those who have some knowledge of machine learning concepts.&lt;/p&gt;
</summary><category term="image-recognition"></category><category term="Computer Vision"></category><category term="machine learning"></category></entry><entry><title>Pico: Rethinking how we build HTTP APIs</title><link href="https://pyvideo.org/pycon-ireland-2017/pico-rethinking-how-we-build-http-apis.html" rel="alternate"></link><published>2017-10-21T00:00:00+00:00</published><updated>2017-10-21T00:00:00+00:00</updated><author><name>Fergal Walsh</name></author><id>tag:pyvideo.org,2017-10-21:pycon-ireland-2017/pico-rethinking-how-we-build-http-apis.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The Python universe is overflowing with web frameworks, from full featured batteries included frameworks like Django to micro frameworks like Bottle or Flask. They each have their own specific features but in the end they are all very similar in their core functionality of processing requests and generating responses. In this talk I will discuss why I felt the need to create yet another framework, a pico framework, that specifically focuses on the task of building HTTP based APIs for the web. Pico, as it is aptly called, doesn't do templating, ORM, custom routing, authentication, validation, caching, or a million other things. Instead it helps you write clean APIs using simple functions and modules with minimal boilerplate. Pico is both opinionated and flexible in equal measures so you can focus on what matters; your API logic. Pico helps you to write code that that is simple to get started, trivial to test, and easy to maintain as your project grows. APIs built with Pico are self describing so client code can automatically/dynamically be created. Pico includes both a Python &amp;amp; Javascript client but it is also very simple to interact with your API with plain old cURL/Requests/jQuery/etc. It is just a HTTP API after all. Having recently released Pico 2.0, this talk will outline the evolution of this framework over the past 7 years and discuss some lessons learnt along the way about building HTTP APIs and frameworks.&lt;/p&gt;
</summary><category term="pico"></category><category term="api framework"></category></entry><entry><title>Rethinking how we build HTTP APIs</title><link href="https://pyvideo.org/europython-2017/rethinking-how-we-build-http-apis.html" rel="alternate"></link><published>2017-07-14T00:00:00+00:00</published><updated>2017-07-14T00:00:00+00:00</updated><author><name>Fergal Walsh</name></author><id>tag:pyvideo.org,2017-07-14:europython-2017/rethinking-how-we-build-http-apis.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The Python universe is overflowing with web frameworks, from full
featured batteries included frameworks like Django to micro
frameworks like Bottle or Flask. They each have their own specific
features but in the end they are all very similar in their core
functionality of processing requests and generating responses.&lt;/p&gt;
&lt;p&gt;In this talk I will discuss why I felt the need to create yet another
framework, a pico framework, that specifically focuses on the task of
building HTTP based APIs for the web.&lt;/p&gt;
&lt;p&gt;Pico, as it is aptly called, doesn't do templating, ORM, custom
routing, authentication, validation, caching, or a million other
things. Instead it helps you write clean APIs using simple functions
and modules with minimal boilerplate. Pico is both opinionated and
flexible in equal measures so you can focus on what matters; your API
logic. Pico helps you to write code that that is simple to get
started, trivial to test, and easy to maintain as your project grows.&lt;/p&gt;
&lt;p&gt;APIs built with Pico are self describing so client code can
automatically/dynamically be created. Pico includes both a Python
&amp;amp; Javascript client but it is also very simple to interact with
your API with plain old cURL/Requests/jQuery/etc. It is just a HTTP
API after all.&lt;/p&gt;
&lt;p&gt;Having recently released Pico 2.0, this talk will outline the
evolution of this framework over the past 7 years and discuss some
lessons learnt along the way about building HTTP APIs and frameworks.&lt;/p&gt;
</summary></entry></feed>