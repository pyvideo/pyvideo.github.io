<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_adam-harvey.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2019-08-04T00:00:00+00:00</updated><entry><title>What PHP learned from Python</title><link href="https://pyvideo.org/pycon-au-2019/what-php-learned-from-python.html" rel="alternate"></link><published>2019-08-04T00:00:00+00:00</published><updated>2019-08-04T00:00:00+00:00</updated><author><name>Adam Harvey</name></author><id>tag:pyvideo.org,2019-08-04:pycon-au-2019/what-php-learned-from-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In 2015, the PHP project released version 7.0 of the PHP language. An advantage PHP had was that Python had gone through a similar process with Python 3 seven years earlier. I'll discuss the lessons taken from the Python 2-3 transition, and how they were applied.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://2019.pycon-au.org/talks/what-php-learned-from-python"&gt;https://2019.pycon-au.org/talks/what-php-learned-from-python&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Sun Aug  4 11:10:00 2019 at C3.3&lt;/p&gt;
</summary></entry><entry><title>What PHP learned from Python</title><link href="https://pyvideo.org/north-bay-python-2018/what-php-learned-from-python.html" rel="alternate"></link><published>2018-11-03T00:00:00+00:00</published><updated>2018-11-03T00:00:00+00:00</updated><author><name>Adam Harvey</name></author><id>tag:pyvideo.org,2018-11-03:north-bay-python-2018/what-php-learned-from-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In 2015, the PHP project released version 7.0 of the PHP language. This
was the culmination of years of discussion about the scope of the
version, and what we were willing to break. An advantage we had in PHP
was that Python had gone through a similar process with Python 3 seven
years earlier. I'll discuss the lessons we took from the Python 2-3
transition, and how we used them.&lt;/p&gt;
</summary></entry><entry><title>Four* non-cryptographic hash functions enter. One leaves.</title><link href="https://pyvideo.org/pycon-au-2015/four-non-cryptographic-hash-functions-enter-one.html" rel="alternate"></link><published>2015-08-04T00:00:00+00:00</published><updated>2015-08-04T00:00:00+00:00</updated><author><name>Adam Harvey</name></author><id>tag:pyvideo.org,2015-08-04:pycon-au-2015/four-non-cryptographic-hash-functions-enter-one.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;When you say “hash function” in a room full of Python developers, people
tend to think of the classics you get in hashlib: MD5, SHA-1, SHA-224,
SHA-256, SHA-384, SHA-512, SHA-OHGODPLEASESTOP, and the like —
cryptographic hash functions intended for cryptographic uses.&lt;/p&gt;
&lt;p&gt;There’s another world out there, though: non-cryptographic hashes.
Sometimes you just need to figure out if you’ve already seen a string or
structure. Sometimes you need a basic checksum. Sometimes you need a
hash that’s just fast and can fit into a 32 bit integer.&lt;/p&gt;
&lt;p&gt;I’ll run through the state of the art in the world of non-cryptographic
hashing — what your best options are, how they compare in terms of CPU
and memory usage, and how they work. Who takes it? Whose mixing function
reigns supreme?&lt;/p&gt;
&lt;p&gt;Let’s find out.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;I’m saying “four”, but realistically I’m going to cover as many
modern options as I can fit into the time available. Let’s say “four
plus two or minus one” in reality.&lt;/li&gt;
&lt;/ul&gt;
</summary></entry></feed>