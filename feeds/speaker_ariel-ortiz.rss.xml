<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Fri, 30 Aug 2019 00:00:00 +0000</lastBuildDate><item><title>Los riesgos de la herencia: por qué es preferible usar composición</title><link>https://pyvideo.org/pycon-latam-2019/los-riesgos-de-la-herencia-por-que-es-preferible-usar-composicion.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ariel Ortiz</dc:creator><pubDate>Fri, 30 Aug 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-08-30:pycon-latam-2019/los-riesgos-de-la-herencia-por-que-es-preferible-usar-composicion.html</guid></item><item><title>The Perils of Inheritance: Why We Should Prefer Composition</title><link>https://pyvideo.org/pycon-us-2019/the-perils-of-inheritance-why-we-should-prefer-composition.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Inheritance is among the first concepts we learn when studying
object-oriented programming. But inheritance comes with some unhappy
strings attached. Inheritance, by its very nature, tends to bind a
subclass to its superclass. This means that modifying the behavior of a
superclass might alter the behavior of all its subclasses, sometimes in
unanticipated ways. Furthermore, it’s commonly accepted that inheritance
actually breaks encapsulation. So, if inheritance has these issues, what
alternative do we have? More than two decades ago, The Gang of Four
(Erich Gamma, Richard Helm, Ralph Johnson and John Vlissides) suggested
in their famous &lt;em&gt;Design Patterns&lt;/em&gt; book that we should favor object
composition over class inheritance.&lt;/p&gt;
&lt;p&gt;In this talk I will show some code examples in Python where inheritance
goes astray and demonstrate how to correct them by using composition. My
intention is not to demonize inheritance, but instead present how to use
it wisely in order to improve the design of our object-oriented software
so that it’s more flexible and easier to maintain.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ariel Ortiz</dc:creator><pubDate>Sat, 04 May 2019 16:30:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-05-04:pycon-us-2019/the-perils-of-inheritance-why-we-should-prefer-composition.html</guid><category>talk</category></item><item><title>Design Patterns in Python for the Untrained Eye</title><link>https://pyvideo.org/pycon-us-2019/design-patterns-in-python-for-the-untrained-eye.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Design patterns are prepackaged solutions to common software design
problems. We get two important benefits when using them. Firstly, we get
a way to solve typical software development issues by using a proven
solution. Secondly, we get a shared vocabulary that allows us to
communicate more effectively with other software designers. Getting
acquainted with design patterns is the next step to become a better
object oriented programmer.&lt;/p&gt;
&lt;p&gt;In this tutorial we'll answer some of the most important questions
surrounding design patterns: What are they? How can we use them in our
programs? When should we avoid them? We'll also have the opportunity to
explore and play with the Python implementations of some of the
classical design patterns made famous by the Gang of Four (Gamma, Helm,
Johnson &amp;amp; Vlissides) while learning relevant design principles at the
same time. Don't forget to bring your own laptop with your preferred
Python 3 development environment.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ariel Ortiz</dc:creator><pubDate>Wed, 01 May 2019 13:20:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-05-01:pycon-us-2019/design-patterns-in-python-for-the-untrained-eye.html</guid><category>tutorial</category></item></channel></rss>