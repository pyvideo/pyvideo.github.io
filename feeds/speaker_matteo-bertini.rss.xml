<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Fri, 07 Apr 2017 00:00:00 +0000</lastBuildDate><item><title>Rusty Python</title><link>https://pyvideo.org/pycon-italia-2017/rusty-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python è un linguaggio “colla”, esistono librerie per creare estensioni
nei linguaggi più vari, da C/C++ a Fortran con poche righe di codice
abbiamo il nostro wrapper bello funzionante.&lt;/p&gt;
&lt;p&gt;Da qualche tempo un nuovo linguaggio di aggiunge alla lista: Rust!&lt;/p&gt;
&lt;p&gt;Ci sono due strade, la prima è quella di fare in modo che la libreria
Rust esponga una API C, e per poi usarla con &lt;tt class="docutils literal"&gt;ctypes&lt;/tt&gt; o &lt;tt class="docutils literal"&gt;cffi&lt;/tt&gt;.
L’altra strada passa per &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;rust-cpython&lt;/span&gt;&lt;/tt&gt;, un wrapper Rust per le API C
di Python, con cui è possibile sia chiamare Python da Rust che estendere
Python con moduli in puro Rust.&lt;/p&gt;
&lt;p&gt;In questo talk vedremo come è possibile esporre delle strutture Rust in
modo da offrire una interfaccia Pythonica senza venire a compromessi con
le prestazioni.&lt;/p&gt;
&lt;p&gt;Prerequisiti:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;conoscenza base di Python&lt;/li&gt;
&lt;li&gt;conoscenza minima di Rust&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Take away:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;“Si può fare!!” un modulo Python in Rust, con setup e test su Travis.&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Matteo Bertini</dc:creator><pubDate>Fri, 07 Apr 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-04-07:pycon-italia-2017/rusty-python.html</guid><category>Python</category><category>extensions</category><category>Rust</category></item></channel></rss>