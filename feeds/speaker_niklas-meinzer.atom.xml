<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_niklas-meinzer.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2018-10-24T00:00:00+00:00</updated><entry><title>Testing in Python - The Big Picture</title><link href="https://pyvideo.org/pycon-de-2018/testing-in-python-the-big-picture.html" rel="alternate"></link><published>2018-10-24T00:00:00+00:00</published><updated>2018-10-24T00:00:00+00:00</updated><author><name>Niklas Meinzer</name></author><id>tag:pyvideo.org,2018-10-24:pycon-de-2018/testing-in-python-the-big-picture.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Any team developing and maintaining software - be it free and open
source or commercial - employs one form of software testing or another.
But what are the different kinds of tests in our tool boxes? And how are
they best used? In this talk we'll take a look around and try to answer
these questions.&lt;/p&gt;
&lt;p&gt;First, we'll examine the basic concepts of testing: Everyone has
probably at least heard about &lt;em&gt;unit tests&lt;/em&gt; , but are they all you need?
&lt;em&gt;Performance tests&lt;/em&gt; can help you find out how well your product performs
under load and detect bottle necks early on. &lt;em&gt;Manual testing&lt;/em&gt; is often
looked down upon, since it's not automated, but is it always a bad idea?
And what even &lt;em&gt;is&lt;/em&gt; &lt;em&gt;mutation testing&lt;/em&gt;?&lt;/p&gt;
&lt;p&gt;We'll also get to know a lot of the amazing testing tools from the
Python ecosystem. Find out what the best test runner is (Spoiler alert:
it's pytest). Learn how to make writing test more fun and less work
using tools like mock, Faker and factory_boy. Measure the quality of
your test suite using coverage.py.&lt;/p&gt;
&lt;p&gt;But no tool is the right one for any situation. We'll also talk about
when and how to use each of the tools, while debunking common
misconceptions and demonstrating best practices.&lt;/p&gt;
</summary><category term="Programming"></category><category term="Python"></category></entry><entry><title>When Django is too bloated - Specialized Web-Applications with Werkzeug</title><link href="https://pyvideo.org/europython-2017/when-django-is-too-bloated-specialized-web-applications-with-werkzeug.html" rel="alternate"></link><published>2017-07-13T00:00:00+00:00</published><updated>2017-07-13T00:00:00+00:00</updated><author><name>Niklas Meinzer</name></author><id>tag:pyvideo.org,2017-07-13:europython-2017/when-django-is-too-bloated-specialized-web-applications-with-werkzeug.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Did you ever think, Django and all the other “batteries included”
frameworks are not flexible enough for your needs? Do you feel like
they limit you in your creativity and design? Then this talk is for
you!&lt;/p&gt;
&lt;p&gt;Werkzeug is a very lightweight HTTP/WSGI utility for Python. You
might have actually used it before, since the popular framework Flask
is based on it.&lt;/p&gt;
&lt;p&gt;Werkzeug handles the WSGI communication with the web server and
parsing of HTTP packets for you, after that, you are left to do
whatever you want. No pre-defined ORM, no request dispatching or
template rendering.&lt;/p&gt;
&lt;p&gt;As a developer you are supported with a live debugger that runs in
the browser and a great variety of testing tools making it easy to
write fine grained unit tests for your application.&lt;/p&gt;
&lt;p&gt;As a developer at MPS - Medical Systems, I work with Werkzeug on a
daily basis. One of our products is ChemoCompile,  a chemo therapy
planning, management and documentation tool used in hospitals in
various European countries. It is a single-page web application
written in Python (backend) and AngularJS (frontend). When we created
it, we first prototyped it using Django, but soon realized, that we
did not need most of the functionality that Django provides and many
of our needs, like interfacing with hospital information systems, are
too much out of the scope of a regular web applications. I will talk
about, how we then discovered Werkzeug and built our own very
customized stack on top of it and how you can do it too!&lt;/p&gt;
</summary></entry></feed>