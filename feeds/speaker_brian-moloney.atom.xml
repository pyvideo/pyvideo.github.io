<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_brian-moloney.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2012-09-06T00:00:00+00:00</updated><entry><title>Under the Microscope: Evaluating Existing Django Code When Onboarding a New Client</title><link href="https://pyvideo.org/djangocon-us-2012/under-the-microscope-evaluating-existing-django.html" rel="alternate"></link><published>2012-09-06T00:00:00+00:00</published><updated>2012-09-06T00:00:00+00:00</updated><author><name>Brian Moloney</name></author><id>tag:pyvideo.org,2012-09-06:djangocon-us-2012/under-the-microscope-evaluating-existing-django.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;As a Web development firm that specializes in Django, we receive many
inquiries from organizations looking for assistance with their existing
Django websites. This session will describe our process for evaluating
existing codebases and deployment structures. The goal is to provide a
framework for evaluating other people's code and understand the scrutiny
your code may someday endure.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Taking over someone else’s code is an exercise fraught with peril.
However, with the growing popularity of Django, more and more
organizations are seeking companies and individuals to take over their
Django website and support their existing Django codebase. This talk
will describe the standardized process Imaginary Landscape has developed
to evaluate existing code as part of their new client onboarding
process.&lt;/p&gt;
&lt;p&gt;Covered topics:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;Introduction/Overview&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Top reasons why clients are looking to change vendor&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Initial assessment&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre class="literal-block"&gt;
* What questions to ask before looking at the code.
&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Where to start when looking at code?&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre class="literal-block"&gt;
* Traversing the code tree to get a feel for how the code is structured
&lt;/pre&gt;
&lt;pre class="literal-block"&gt;
* Trying to determine how the previous developer thinks
&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Detailed code review including checklist&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre class="literal-block"&gt;
* Things to look for when evaluating code: Version control, &amp;quot;Standard&amp;quot;
&lt;/pre&gt;
&lt;p&gt;site layout, Settings file, hardcoding, Virtualenv, south, etc.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Examples (names have been changed to protect the imperfect)&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre class="literal-block"&gt;
* The good: the kinds of coding and configuration techniques that seem
&lt;/pre&gt;
&lt;p&gt;to be consistent among well-thought-out projects.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
* The bad: examples of code and configuration that make onboarding and
&lt;/pre&gt;
&lt;p&gt;maintenance difficult.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Final thoughts&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre class="literal-block"&gt;
* What you can do as a developer taking over a project.
&lt;/pre&gt;
&lt;pre class="literal-block"&gt;
* What you can do as a developer hoping to make great code that others
&lt;/pre&gt;
&lt;p&gt;may someday see.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
* Exercise your right to say no, it’s your reputation on the line
&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Q&amp;amp;A&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="django"></category></entry><entry><title>Getting the job: the do's and don'ts of landing a Python job</title><link href="https://pyvideo.org/pycon-us-2011/pycon-2011--getting-the-job--the-do--39-s-and-don.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Brian Moloney</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--getting-the-job--the-do--39-s-and-don.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Getting the job: the do's and don'ts of landing a Python job&lt;/p&gt;
&lt;p&gt;Presented by Brian Moloney&lt;/p&gt;
&lt;p&gt;Every Python programmer is brilliant in his or her own way. That
brilliance shines in code and peer-to-peer conversation. But how do you
display your skills to a non-programmer? How do you impress management
and human resources? What do you need to do (and not do) to successfully
navigate the hiring process and land the job?&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;Imaginary Landscape has been interviewing, hiring and not hiring Python
talent since 1999. Throughout these many years, there have been good
candidates, bad candidates and downright ugly candidates. This talk will
use actual correspondence and examples to demonstrate what can separate
you from the crowd and what can separate you from consideration.
Imaginary Landscape non- technical Managing Partner Brian Moloney will
lead the session by describing how he evaluates potential hires and what
goes through his mind while speaking with potential Python candidates.
Attendees will take away a specific set of guidelines for mastering the
non-technical aspects of the recruiting process.&lt;/p&gt;
&lt;p&gt;[VIDEO HAS ISSUES: There are problems with the audio for the first 5
minutes.]&lt;/p&gt;
</summary><category term="hiring"></category><category term="job"></category><category term="pycon"></category><category term="pycon2011"></category></entry></feed>