<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org - Josh Schneider</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_josh-schneider.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2025-04-13T00:00:00+00:00</updated><subtitle></subtitle><entry><title>Hot: Pathlib, Not: String Paths</title><link href="https://pyvideo.org/pyohio-2024/hot-pathlib-not-string-paths.html" rel="alternate"></link><published>2024-07-28T00:00:00+00:00</published><updated>2024-07-28T00:00:00+00:00</updated><author><name>Josh Schneider</name></author><id>tag:pyvideo.org,2024-07-28:/pyohio-2024/hot-pathlib-not-string-paths.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Have you seen &lt;tt class="docutils literal"&gt;pathlib&lt;/tt&gt;? If not, once I show you, you will never go
back to string paths and &lt;tt class="docutils literal"&gt;os.path&lt;/tt&gt; ever again! &lt;tt class="docutils literal"&gt;pathlib&lt;/tt&gt; turns paths
into path objects, which have attributes and methods that cover a number
of operations. In this talk, we will:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Talk about how to …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Have you seen &lt;tt class="docutils literal"&gt;pathlib&lt;/tt&gt;? If not, once I show you, you will never go
back to string paths and &lt;tt class="docutils literal"&gt;os.path&lt;/tt&gt; ever again! &lt;tt class="docutils literal"&gt;pathlib&lt;/tt&gt; turns paths
into path objects, which have attributes and methods that cover a number
of operations. In this talk, we will:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Talk about how to create &lt;tt class="docutils literal"&gt;Path&lt;/tt&gt; objects, and how this differs on
Windows vs Mac/Linux&lt;/li&gt;
&lt;li&gt;Talk about the many properties of pure paths&lt;/li&gt;
&lt;li&gt;Talk about folder operations from &lt;tt class="docutils literal"&gt;Path&lt;/tt&gt; objects, such as creating
directory structures and recursive globbing.&lt;/li&gt;
&lt;li&gt;Talk about file operations, made simpler with &lt;tt class="docutils literal"&gt;Path&lt;/tt&gt; objects, such
as reading contents, getting properties like file size, and deleting.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Stop messing with string paths and get with &lt;tt class="docutils literal"&gt;pathlib&lt;/tt&gt;!&lt;/p&gt;
</content><category term="PyOhio 2024"></category></entry><entry><title>Choosing the Right Data Types</title><link href="https://pyvideo.org/pytexas-2022/choosing-the-right-data-types.html" rel="alternate"></link><published>2022-06-21T00:00:00+00:00</published><updated>2022-06-21T00:00:00+00:00</updated><author><name>Josh Schneider</name></author><id>tag:pyvideo.org,2022-06-21:/pytexas-2022/choosing-the-right-data-types.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;So often, in Python, I’ve run up against the question of what type of data structure to use to express something. Does this need a tuple, a dict, a namedtuple, a dataclass, or something else? How do you select what to use, and what are the pros and …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;So often, in Python, I’ve run up against the question of what type of data structure to use to express something. Does this need a tuple, a dict, a namedtuple, a dataclass, or something else? How do you select what to use, and what are the pros and cons? Let’s explore the options!&lt;/p&gt;
&lt;p&gt;Speaker: Josh Schneider
Josh is a test automation architect and senior developer. He's trained several junior developers, written millions of lines of code, maintained and supported that code, and pushed for process improvements around development standards, code review, design, and support. He spend a lot of time thinking about how to do things “right”, and how to teach other people. Outside of work, he's a dad of 2 nerdy kids, a trained improv comedian, movie lover, and drinker of beer and coffee.&lt;/p&gt;
</content><category term="PyTexas 2022"></category></entry><entry><title>Practical Decorators</title><link href="https://pyvideo.org/pytexas-2023/practical-decorators.html" rel="alternate"></link><published>2023-04-02T00:00:00+00:00</published><updated>2023-04-02T00:00:00+00:00</updated><author><name>Josh Schneider</name></author><id>tag:pyvideo.org,2023-04-02:/pytexas-2023/practical-decorators.html</id><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&amp;quot;Practical Decorators&amp;quot;
Show some examples of useful decorators and talk about the pros and cons of the decorator protocol.
Speaker: Josh Schneider&lt;/p&gt;
&lt;p&gt;Test Automation architect at Dell Technologies. Geeky dad with 1+ years in Improv comedy training and performing.&lt;/p&gt;
</content><category term="PyTexas 2023"></category></entry><entry><title>Plugging In with pkgutil, importlib, inspect, and a little spit</title><link href="https://pyvideo.org/pytexas-2024/plugging-in-with-pkgutil-importlib-inspect-and-a-little-spit.html" rel="alternate"></link><published>2024-04-21T00:00:00+00:00</published><updated>2024-04-21T00:00:00+00:00</updated><author><name>Josh Schneider</name></author><id>tag:pyvideo.org,2024-04-21:/pytexas-2024/plugging-in-with-pkgutil-importlib-inspect-and-a-little-spit.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Plugging In with pkgutil, importlib, inspect, and a little spit&lt;/p&gt;
&lt;p&gt;Sometimes, you want to build a framework where expansion can come via installed python packages and modules. There are third party libraries to handle that, but maybe you don't want something that heavy weight, don't want to handle the …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Plugging In with pkgutil, importlib, inspect, and a little spit&lt;/p&gt;
&lt;p&gt;Sometimes, you want to build a framework where expansion can come via installed python packages and modules. There are third party libraries to handle that, but maybe you don't want something that heavy weight, don't want to handle the burden of security and quality testing releases, or just want to write your own so you know how it works. I'll walk you through how to create a pluggable framework where plugins can be delivered as Python packages. I'll show you some useful standard library packages that you need, some pitfalls along the way, and how to get a working prototype in no time!&lt;/p&gt;
&lt;p&gt;Speaker: Josh Schneider&lt;/p&gt;
&lt;p&gt;Father of two boys. Test Automation Engineer. Primarily fluent in Python, but conversant in C#, Go, VBScript, and others. Huge movie geek.&lt;/p&gt;
</content><category term="PyTexas 2024"></category></entry><entry><title>Lightning Talks (Day 1)</title><link href="https://pyvideo.org/pytexas-2024/lightning-talks-day-1.html" rel="alternate"></link><published>2024-04-20T00:00:00+00:00</published><updated>2024-04-20T00:00:00+00:00</updated><author><name>Pandy Knight</name></author><id>tag:pyvideo.org,2024-04-20:/pytexas-2024/lightning-talks-day-1.html</id><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Lightning talks are five minute talks on a variety of subjects.&lt;/p&gt;
</content><category term="PyTexas 2024"></category></entry><entry><title>Hot: pathlib, Not: string paths</title><link href="https://pyvideo.org/pytexas-2025/hot-pathlib-not-string-paths.html" rel="alternate"></link><published>2025-04-13T00:00:00+00:00</published><updated>2025-04-13T00:00:00+00:00</updated><author><name>Josh Schneider</name></author><id>tag:pyvideo.org,2025-04-13:/pytexas-2025/hot-pathlib-not-string-paths.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Have you seen pathlib? If not, once I show you, you will never go back to string paths and os.path ever again! pathlib turns paths into path objects, which have attributes and methods that cover a number of operations. In this talk, we will:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Talk about how to …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Have you seen pathlib? If not, once I show you, you will never go back to string paths and os.path ever again! pathlib turns paths into path objects, which have attributes and methods that cover a number of operations. In this talk, we will:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Talk about how to create Path objects, and how this differs on Windows vs Mac/Linux&lt;/li&gt;
&lt;li&gt;Talk about the many properties of pure paths&lt;/li&gt;
&lt;li&gt;Talk about folder operations from Path objects, such as creating directory structures and recursive globbing.&lt;/li&gt;
&lt;li&gt;Talk about file operations, made simpler with Path objects, such as reading contents, getting properties like file size, and deleting.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Stop messing with string paths and get with pathlib!&lt;/p&gt;
</content><category term="PyTexas 2025"></category></entry><entry><title>Lighting Talks Day 1</title><link href="https://pyvideo.org/pytexas-2025/lighting-talks-day-1.html" rel="alternate"></link><published>2025-04-12T00:00:00+00:00</published><updated>2025-04-12T00:00:00+00:00</updated><author><name>Lynn Root</name></author><id>tag:pyvideo.org,2025-04-12:/pytexas-2025/lighting-talks-day-1.html</id><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Lighting Talks Day 1&lt;/p&gt;
</content><category term="PyTexas 2025"></category></entry></feed>