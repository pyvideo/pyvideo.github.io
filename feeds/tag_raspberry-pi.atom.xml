<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/tag_raspberry-pi.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2019-07-12T00:00:00+00:00</updated><entry><title>Astro Pi: Python on the International Space Station</title><link href="https://pyvideo.org/europython-2019/astro-pi-python-on-the-international-space-station.html" rel="alternate"></link><published>2019-07-12T00:00:00+00:00</published><updated>2019-07-12T00:00:00+00:00</updated><author><name>Ben Nuttall</name></author><id>tag:pyvideo.org,2019-07-12:europython-2019/astro-pi-python-on-the-international-space-station.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A collaboration between the Raspberry Pi Foundation and the European
Space Agency put two Raspberry Pi computers augmented with sensor boards
and camera modules on the International Space Station in 2015. Every
year we run a series of competitions for kids in schools around Europe
to design science experiments using the available sensors.&lt;/p&gt;
&lt;p&gt;Mission Zero is a low-barrier challenge where students can run a 1
minute Python program in space to display a message to the astronauts.
They have access to the sensors for conditional logic but cannot record
data or take photos.&lt;/p&gt;
&lt;p&gt;Mission Space Lab is a more involved challenge, including planning an
experiment, writing and testing code which will run for 3 hours in
space, either studying life in space or life on earth (which includes
taking photos of Earth out of the ISS window). MSL teams get to keep the
data and photo they record in their experiment and are to write a report
analysing their findings.&lt;/p&gt;
&lt;p&gt;A small tech team at the Raspberry Pi Foundation maintain the operating
system used in flight and work in collaboration with ESA and partners to
keep the operation of the Pis running smoothly on the ISS LAN.&lt;/p&gt;
&lt;p&gt;As well as sharing details of the OS maintenance and devops for the
Astro Pis, I'll share photos taken from space and show findings from
student experiments using opencv, tensorflow, scikit-learn, ephem and
more.&lt;/p&gt;
</summary><category term="Data"></category><category term="Education"></category><category term="Linux"></category><category term="OpenCV"></category><category term="Raspberry PI"></category></entry><entry><title>Raspberry pi as a home automation controller using pymodbus</title><link href="https://pyvideo.org/pycon-israel-2018/raspberry-pi-as-a-home-automation-controller-using-pymodbus.html" rel="alternate"></link><published>2018-06-05T00:00:00+00:00</published><updated>2018-06-05T00:00:00+00:00</updated><author><name>Yaacov Zamir</name></author><id>tag:pyvideo.org,2018-06-05:pycon-israel-2018/raspberry-pi-as-a-home-automation-controller-using-pymodbus.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Raspberry pi as a home automation controller using pymodbus and node-red&lt;/p&gt;
&lt;p&gt;In this session we will introduce pymodbus, talk about the pros and cons of using serial communication in our modern publish-subscribe messaging age, and demo the use of pymodbus for home automation using Raspberry pi and node-red.&lt;/p&gt;
</summary><category term="pymodbus"></category><category term="raspberry pi"></category><category term="home automation"></category></entry><entry><title>Die Dinge im Internet der Dinge mit Python verbinden...</title><link href="https://pyvideo.org/pycon-de-2013/die-dinge-im-internet-der-dinge-mit-python-verbin.html" rel="alternate"></link><published>2013-10-17T00:00:00+00:00</published><updated>2013-10-17T00:00:00+00:00</updated><author><name>Andreas Schreiber</name></author><id>tag:pyvideo.org,2013-10-17:pycon-de-2013/die-dinge-im-internet-der-dinge-mit-python-verbin.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Das Internet der Dinge besteht aus kleinen, manchmal intelligenten,
Geräten und Sensoren, die über das Internet verbunden sind. Typische
Sensoren sind Wettermessgeräte oder medizinische Geräte. Das Internet
der Dinge wird nun bald real da sein, was durch günstige kleine
Einplatinencomputer wie Raspberry Pi oder Arduino mit beeinflusst wird.
Allerdings haben diese Geräte nicht viel Rechenleistung. Außerdem sind
sie in machen Umgebungen auch nur mit eingeschränkter Netzwerkbandbreite
angebunden. Um nun (viele) solche Geräte zu verbinden und Daten
austauschen zu lassen sind sehr leichtgewichtige Protokolle und
Implementierungen notwendig.&lt;/p&gt;
&lt;p&gt;Der Vortrag ist über das Protokoll &lt;a class="reference external" href="http://mqtt.org/"&gt;Message Queuing Telemetry
Transport&lt;/a&gt; (MQTT), ein sehr geeignetes Protokoll
zum Verbinden kleiner Geräte und Sensoren. MQTT basiert auf einer
Publish/Subscribe-Architektur. Es eignet sich gut zum Schicken von Daten
von Sensoren zu anderen Geräten. Zum Beispiel lassen sich
Temperaturmesswerte von einem Temperaturfühler ohne viel Overhead zu
einem Server schicken oder zu einem Smartphone als Push-Nachricht
übermitteln. Ein andere Anwendung von MQTT sind Chat-Systeme, z.B. ist
das &lt;a class="reference external" href="https://www.facebook.com/messages/"&gt;Facebook-Messaging&lt;/a&gt; auf
Basis von MQTT implementiert.&lt;/p&gt;
&lt;p&gt;In dem Vortrag geht es vor allem um Open-Source-Implementierungen von
MQTT. Speziell wird der freie MQTT-Broker
&lt;a class="reference external" href="http://mosquitto.org/"&gt;Mosquitto&lt;/a&gt; und dessen
Python-Client-Bibliothek vorgestellt. Mosquitto ist eine
leichtgewichtige Implementierung die effizient auf günstigen
Einplatinenrechnern oder Smartphones läuft. An ein paar Bespielen in
Python wird im Vortrag verdeutlicht wie leicht sich Anwendungen auf
Basis von MQTT realisieren lassen: Die Übertragung von
Temperaturmesswerten per Raspberry Pi zu einem Server, das Senden von
Push-Nachrichten zu Android-Smartphones und das Senden von Smartphones
aus einer Kivy-App heraus.&lt;/p&gt;
</summary><category term="internet of things"></category><category term="mqtt"></category><category term="quantified self"></category><category term="raspberry pi"></category><category term="temperaturmessung"></category></entry><entry><title>Gehirnwellen für Hacker</title><link href="https://pyvideo.org/pycon-de-2013/gehirnwellen-fur-hacker.html" rel="alternate"></link><published>2013-10-17T00:00:00+00:00</published><updated>2013-10-17T00:00:00+00:00</updated><author><name>Andreas Klostermann</name></author><id>tag:pyvideo.org,2013-10-17:pycon-de-2013/gehirnwellen-fur-hacker.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Dieser Vortrag beschreibt das Neurosky Mindwave Headset, wie man es mit
Python von einem Linuxsystem aus ansteuert.&lt;/p&gt;
&lt;p&gt;Minimale biophysikalische Grundlagen zu Gehirnströmen werden erklärt um
ein Gefühl für Fähigkeiten und Grenzen dieses Systems zu vermitteln.&lt;/p&gt;
&lt;p&gt;Es werden Anwendungen im Neurofeedback vorgestellt, wie sie zum Beispiel
gegen das Aufmerksamkeitsdefizit-/Hyperaktivitätsstörungssyndrom (ADHS)
als unterstützende Maßnahme eingesetzt werden könnten.&lt;/p&gt;
&lt;p&gt;Zum Thema Brain Computer Interfaces stelle ich vor was mit diesem
Headset funktioniert und was nicht.&lt;/p&gt;
</summary><category term="biology"></category><category term="brain computer interfaces"></category><category term="eeg"></category><category term="medicine"></category><category term="neurofeedback"></category><category term="raspberry pi"></category></entry><entry><title>MIDI-Geräte drahtlos steuern mit OSC, Raspberry Pi und python-rtmidi</title><link href="https://pyvideo.org/pycon-de-2013/midi-gerate-drahtlos-steuern-mit-osc-raspberry-p.html" rel="alternate"></link><published>2013-10-16T00:00:00+00:00</published><updated>2013-10-16T00:00:00+00:00</updated><author><name>Christopher Arndt</name></author><id>tag:pyvideo.org,2013-10-16:pycon-de-2013/midi-gerate-drahtlos-steuern-mit-osc-raspberry-p.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Mit der &lt;a class="reference external" href="https://pypi.python.org/pypi/python-rtmidi"&gt;python-rtmidi&lt;/a&gt;
Bibliothek lässt sich mit Python unter den drei gängigsten
Betriebssystemen Windows, OS X und Linux auf MIDI-Schnittstellen
zugreifen und MIDI-Daten senden und empfangen. Viele elektronische
Musikinstrumente und anderes Soundequipment werden noch immer vorwiegend
über das MIDI-Protokoll gesteuert und besitzen nur herkömmliche
MIDI-Interfaces. Mit Hilfe einer auf &lt;em&gt;python-rtmidi&lt;/em&gt; und
&lt;a class="reference external" href="http://das.nasophon.de/pyliblo/"&gt;pyliblo&lt;/a&gt; aufsetzenden Software, der
&lt;em&gt;OSC-MIDI-Bridge&lt;/em&gt;, einem Raspberry Pi und je einem billigen WLAN- und
USB-MIDI-Interface, lassen sich solche Geräte kostengünstig in ein
drahtloses Netzwerk einbinden und z.B. über Tablet-Computer steuern, auf
denen entsprechende Software installiert ist, die OSC (&lt;a class="reference external" href="http://opensoundcontrol.org/"&gt;Open Sound
Control&lt;/a&gt;) unterstützt (z.B.
&lt;a class="reference external" href="http://hexler.net/software/touchosc"&gt;TouchOSC&lt;/a&gt; oder &lt;a class="reference external" href="http://www.thiburce.com/TBStuff/"&gt;TB MIDI
Stuff&lt;/a&gt;). Dies ist insbesondere für
Situationen praktisch, in denen kein sperriger Desktop-Computer oder
Laptop mit MIDI-Schnittstelle vor Ort vorhanden oder gewünscht ist.&lt;/p&gt;
&lt;p&gt;Mit einer &amp;quot;Live&amp;quot;-Demonstration zeigt der Referent diese von ihm
implementierte Software in Aktion (ca. 4 min) und erläutert dann kurz
die dabei benutzten Protokolle (MIDI und OSC) (5 min), stellt die
verwendeten Python-Bibliotheken &lt;em&gt;python-rtmidi&lt;/em&gt; und &lt;em&gt;pyliblo&lt;/em&gt; vor (4
min) und erläutert die eingesetzten Software-Techniken. Dabei wird
insbesondere auf die asynchrone Behandlung von MIDI-Input und Output via
des &lt;em&gt;multiprocessing&lt;/em&gt;-Moduls der Standardbibliothek eingegangen (5 min).
Abschliessend werden noch einige Anregungen für weitere Einsatzzwecke
von &lt;em&gt;python-rtmidi&lt;/em&gt; und der OSC-MIDI-Bridge gegeben (2 min).&lt;/p&gt;
&lt;p&gt;&lt;em&gt;python-rtmidi&lt;/em&gt; ist ein Python-Bindung für die C++-Bibliothek
&lt;a class="reference external" href="http://www.music.mcgill.ca/~gary/rtmidi/index.html"&gt;RtMidi&lt;/a&gt; und
wurde mit &lt;a class="reference external" href="http://cython.org"&gt;Cython&lt;/a&gt; realisiert. Die Software
befindet sich noch im Alpha-Status, da momentan noch die Unterstützung
der Kernel Streaming API unter Windows fehlt (Windows wird aber über das
WinMM-Framework unterstützt). Die vorhandene Funktionalität ist jedoch
stabil und es ist geplant, vor der PyCon.DE eine Beta-Version zu
veröffentlichen. Die darauf aufsetzende OSC-MIDI Bridge ist bisher nur
als Beispielskript in der &lt;em&gt;python-rtmidi&lt;/em&gt;-Distribution verfügbar, wird
aber stetig weiterentwickelt und voraussichtlich demnächst in ein
eigenes Projekt ausgegliedert.&lt;/p&gt;
</summary><category term="diy"></category><category term="midi"></category><category term="musik"></category><category term="osc"></category><category term="raspberry pi"></category><category term="remote control"></category></entry></feed>