<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/tag_opengl.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2017-04-07T00:00:00+00:00</updated><entry><title>Affordable Off-The-Shelf Augmented Reality in Python</title><link href="https://pyvideo.org/europython-2013/affordable-off-the-shelf-augmented-reality-in-python.html" rel="alternate"></link><published>2013-07-04T00:00:00+00:00</published><updated>2013-07-04T00:00:00+00:00</updated><author><name>Thomas Perl</name></author><id>tag:pyvideo.org,2013-07-04:europython-2013/affordable-off-the-shelf-augmented-reality-in-python.html</id><summary type="html"></summary><category term="graphics"></category><category term="sensor fusion"></category><category term="cv"></category><category term="game-development"></category><category term="opengl"></category></entry><entry><title>Kivy, versatile framework for mobile and desktop</title><link href="https://pyvideo.org/europython-2013/kivy-versatile-framework-for-mobile-and-desktop.html" rel="alternate"></link><published>2013-07-04T00:00:00+00:00</published><updated>2013-07-04T00:00:00+00:00</updated><author><name>Mathieu Virbel</name></author><id>tag:pyvideo.org,2013-07-04:europython-2013/kivy-versatile-framework-for-mobile-and-desktop.html</id><summary type="html"></summary><category term="python-for-android"></category><category term="android"></category><category term="kivy"></category><category term="iOS"></category><category term="opengl"></category></entry><entry><title>Programming physics games with Python and OpenGL</title><link href="https://pyvideo.org/europython-2013/programming-physics-games-with-python-and-opengl.html" rel="alternate"></link><published>2013-07-04T00:00:00+00:00</published><updated>2013-07-04T00:00:00+00:00</updated><author><name>Daniel Pope</name></author><id>tag:pyvideo.org,2013-07-04:europython-2013/programming-physics-games-with-python-and-opengl.html</id><summary type="html"></summary><category term="graphics"></category><category term="physics"></category><category term="game-development"></category><category term="opengl"></category></entry><entry><title>Creazione ed evoluzione di un framework per interfacce grafiche Multi-Touch con OpenGL</title><link href="https://pyvideo.org/pycon-italia-2017/creazione-ed-evoluzione-di-un-framework-per-interfacce-grafiche-multi-touch-con-opengl.html" rel="alternate"></link><published>2017-04-07T00:00:00+00:00</published><updated>2017-04-07T00:00:00+00:00</updated><author><name>Tiziano Carotti</name></author><id>tag:pyvideo.org,2017-04-07:pycon-italia-2017/creazione-ed-evoluzione-di-un-framework-per-interfacce-grafiche-multi-touch-con-opengl.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Obiettivo del talk è descrivere la progettazione ed evoluzione di un
framework interattivo per interfacce grafiche 2D/3D interattive
multi-touch basato sulle recenti API OpenGL 4.5. Saranno introdotti
anche i concetti di computer grafica presenti all’interno del framework,
descrivendo l’evoluzione delle componenti dalla fase di protipazione in
puro Python all’implementazione e messa in produzione in C++ con API
Python. Infine, sarà presentata una descrizione del workflow di lavoro
per i progetti interni realizzati dai nostri team sottolineando gli
aspetti peculiari che Python fornisce agli sviluppatori.&lt;/p&gt;
&lt;p&gt;I requisiti necessari per una piena comprensione, oltre ad una buona
conoscenza di Python, sono una buona confidenza con le tecnologie comuni
per la realizzazione di interfacce Web &amp;amp; Desktop: HTML, CSS, e almeno
uno dei framework comunemente usati per le GUI (Qt, GTK, .NET WPF,
ecc…). Inoltre è preferibile (ma non necessario) avere delle nozioni
basi di Computer Grafica e OpenGL.&lt;/p&gt;
</summary><category term="computer-graphics"></category><category term="ui"></category><category term="graphic-design"></category><category term="opengl"></category></entry><entry><title>GR - ein universelles Framework für Visualisierungsanwendungen</title><link href="https://pyvideo.org/pycon-de-2012/gr-einuniverselles-framework-f-r-visualisierung.html" rel="alternate"></link><published>2012-10-31T00:00:00+00:00</published><updated>2012-10-31T00:00:00+00:00</updated><author><name>Josef Heinen</name></author><id>tag:pyvideo.org,2012-10-31:pycon-de-2012/gr-einuniverselles-framework-f-r-visualisierung.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Zur Erstellung von Visualisierungsprogrammen existiert eine Vielzahl
freier und kommerzieller Tools und Bibliotheken. In einem heterogenen
Rechnerumfeld zeigt sich aber, dass es keine durchgängig einsetzbare
Lösung gibt, welche die speziellen Anforderungen in einem
wissenschaftlichen Umfeld abdeckt.&lt;/p&gt;
&lt;p&gt;GR ist ein universell einsetzbares Framework für plattformübergreifende
Visualisierungsanwendungen. Es bietet Entwicklern eine kompakte,
portable und einheitliche Grafik-Bibliothek für ihre Anwendungen. Das
Anwendungsspektrum reicht von der Erzeugung publikationsreifer
2D-Diagramme bis hin zur Darstellung komplexer 3D-Szenen.&lt;/p&gt;
&lt;p&gt;Der Vortrag beschreibt zunächst die Funktionalität des GR-Frameworks,
welches im wesentlichen auf einer Implementierung des graphischen
Kernsystems (GKS) sowie der Programmierschnittstelle OpenGL basiert. Es
wird aufgezeigt, wie GR als geschlossenes System schnell und einfach in
vorhandene Anwendungen – z.B. mit dem ctypes-Mechanismus in Python -
integriert werden kann. Neben dem Einsatz in imperativ programmierten
Systemen ist auch eine Integration in moderne objektorientierte Systeme,
die auf GUI Toolkits aufbauen, vorgesehen. Darüber hinaus werden die
Stärken des GR-Frameworks in Bezug auf die Interoperabilität mit
aktuellen Web-Technologien und mobilen Geräten herausgestellt.&lt;/p&gt;
</summary><category term="frameworks"></category><category term="opengl"></category><category term="visualisierung"></category></entry><entry><title>Was Sie schon immer über „Visualisierung mit Python“ wissen wollten</title><link href="https://pyvideo.org/pycon-de-2013/was-sie-schon-immer-uber-visualisierung-mit-pyth.html" rel="alternate"></link><published>2013-10-17T00:00:00+00:00</published><updated>2013-10-17T00:00:00+00:00</updated><author><name>Josef Heinen</name></author><id>tag:pyvideo.org,2013-10-17:pycon-de-2013/was-sie-schon-immer-uber-visualisierung-mit-pyth.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Schon lange hat sich Python in den Software-Entwicklungsabteilungen von
Forschung und Industrie etabliert, nicht zuletzt wegen der Verbreitung
von Bibliotheken wie SciPy oder Matplotlib. Bei der Verarbeitung großer
Datenmengen oder im Zusammenspiel mit GUI-Toolkits stößt man aber leicht
an die Grenzen der interpretativen Programmierung.&lt;/p&gt;
&lt;p&gt;Der Vortrag zeigt auf, wie solche Anforderung auf der Basis des &lt;em&gt;GR
Frameworks&lt;/em&gt;, einer &amp;quot;Lightweight&amp;quot;-Alternative zu Matplotlib, umgesetzt
werden können. Im Einzelnen wird beschrieben wie man mit aktuellen
Software-Technologien Echtzeit-Anwendungen oder rechenintensive
Simulationen in Python realisieren kann. So lässt sich zum Beispiel
durch die Verwendung von Just-In-Time Kompilierung mit Numba(Pro) eine
enorme Performance-Steigerung erzielen. An konkreten Beispielen werden
die Vorzüge des &lt;em&gt;GR Frameworks&lt;/em&gt; im Zusammenspiel mit JIT-Compilern,
graphischen Benutzeroberflächen (GUIs) sowie OpenGL, aber auch vor dem
Hintergrund einer stetig ansteigenden Paketflut beschrieben.&lt;/p&gt;
</summary><category term="accelerate"></category><category term="anaconda"></category><category term="numba"></category><category term="numpy"></category><category term="opengl"></category><category term="pyqt"></category><category term="python"></category><category term="visualisierung"></category></entry><entry><title>Entwicklung wissenschaftlicher Applikationen mit Python</title><link href="https://pyvideo.org/pycon-de-2013/entwicklung-wissenschaftlicher-applikationen-mit.html" rel="alternate"></link><published>2013-10-15T00:00:00+00:00</published><updated>2013-10-15T00:00:00+00:00</updated><author><name>Florian Rhiem</name></author><id>tag:pyvideo.org,2013-10-15:pycon-de-2013/entwicklung-wissenschaftlicher-applikationen-mit.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Durch Experimente und Simulationen werden im wissenschaftlichen Bereich
große Mengen an Daten erzeugt. Diese müssen geeignet aufbereitet werden,
um sie in eine für die Wissenschaftler verständliche Form zu überführen.
Ein Beispiel dafür ist die Untersuchung von Phasenwechselmaterialien,
welche in wiederbeschreibbaren optischen Medien eingesetzt werden. Der
beim Löschen und Beschreiben eintretende Wechsel zwischen kristallinem
und amorphen Zustand wird auf Großrechnern simuliert und die
resultierende molekulare Struktur auf Hohlstellen hin untersucht, da
diese Rückschlüsse auf das Verhalten des Materials zulassen. Den Kern
der Präsentation nimmt die Entwicklung der Anwendung &lt;em&gt;pyMolDyn&lt;/em&gt; ein,
welche die Analyse und Visualisierung der Moleküle und Hohlstellen
übernimmt.&lt;/p&gt;
&lt;p&gt;Dieser Vortrag gibt einen Einblick in die Erfahrungen, die während der
mehrjährigen Entwicklung dieser Software gesammelt wurden. Zum einen
wird dabei die rechenintensive Analyse der Daten betrachtet und wie
diese durch Verwendung von NumPy und (py)OpenCL vereinfacht und
beschleunigt werden kann. Zum anderen werden die grafischen
Anwendungskomponenten beschrieben, welche mithilfe von wxPython,
(py)OpenGL und einem gezielten Zusammenspiel dieser beiden Pakete
umgesetzt werden konnten. Neben Performance und Einfachheit der
Programmierung werden auch die gewonnenen Eindrücke zu
Plattformunabhängigkeit und Interversionskompatibilität vorgestellt.
Weiterhin werden Eigenheiten der Anwendungsentwicklung im Bereich der
Forschung erläutert und es wird darauf eingegangen, welche Stärken und
Schwächen Python in diesem Zusammenhang bietet. Abschließend folgt ein
Überblick darüber, wie sich die weitere Entwicklung von &lt;em&gt;pyMolDyn&lt;/em&gt;
gestalten wird und welche Konsequenzen die gesammelten Erfahrungen in
Zukunft für das Projekt haben werden.&lt;/p&gt;
</summary><category term="anwendungsentwicklung"></category><category term="numpy"></category><category term="opencl"></category><category term="opengl"></category><category term="python"></category><category term="visualisierung"></category><category term="wxpython"></category></entry><entry><title>Algorithmic Generation of OpenGL Geometry</title><link href="https://pyvideo.org/pycon-us-2011/pycon-2011--algorithmic-generation-of-opengl-geom.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Jonathan Hartley</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--algorithmic-generation-of-opengl-geom.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Algorithmic Generation of OpenGL Geometry&lt;/p&gt;
&lt;p&gt;Presented by Jonathan Hartley&lt;/p&gt;
&lt;p&gt;Starting from a basic 'hello world' OpenGL app, a simple and Pythonic
model of 3D polyhedra is presented, with neat generators to convert
these into ctype arrays for OpenGL. Geometric algorithms then generate
some fun geometry, and these are compounded to produce successively more
complex and interesting shapes.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;The author's intent is to demonstrate that effective stylistic 3D
graphics can be achieved using surprisingly small amounts of code. This
hopefully makes the topic amenable to 3D beginners, while possibly
suggesting some alternative approaches to those with 3D experience.&lt;/p&gt;
&lt;p&gt;Talk Outline&lt;/p&gt;
&lt;p&gt;Throughout, discussion of ideas and code dissection alternates with live
animated demos, at 60fps on very modest hardware.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Inspirations - Effective non-photo-realistic work in gaming, movies
and the demo scene. (1m)&lt;/li&gt;
&lt;li&gt;A convenient &amp;amp; Pythonic way to model 3D polyhedra, and some neat
generators to convert these into OpenGL arrays at runtime. (7m)&lt;/li&gt;
&lt;li&gt;Composition of polyhedra to create more complex shapes. (3m)&lt;/li&gt;
&lt;li&gt;The resulting performance characteristics: What works well from
Python, and what doesn't. (2m)&lt;/li&gt;
&lt;li&gt;Koch tetrahedron &amp;amp; tetrix, aka Sierpinski tetrahedron. (1m)&lt;/li&gt;
&lt;li&gt;Surprisingly effective 3D models created from small bitmaps. (1m)&lt;/li&gt;
&lt;li&gt;Automatic generation of trees, mazes, complex spaces. (3m)&lt;/li&gt;
&lt;li&gt;Algorithmic modification of existing shapes, such as bevels,
geometric duals, and polyhedron stellation. (2m)&lt;/li&gt;
&lt;li&gt;Shapes that morph: Rearranging vertices on the fly (5m)&lt;/li&gt;
&lt;li&gt;Questions (5m)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The ideas demonstrated in the talk are written against OpenGL 2.1, but
written in a 'mostly OpenGL 3' style, using vertex buffer objects or
vertex arrays.&lt;/p&gt;
&lt;p&gt;The demo code uses pyglet to create a window and handle GUI events, and
uses PyOpenGL for the majority of OpenGL calls, since it provides a more
friendly and Pythonic interface. In the performance-sensitive inner
render loop, however, I use pyglet's slightly more bare-bones OpenGL
bindings.&lt;/p&gt;
&lt;p&gt;However, the majority of the talk focuses on the manipulation of
abstract data structures to represent geometry, which is not affected by
these or other OpenGL library choices.&lt;/p&gt;
&lt;p&gt;This is a substantially improved version of the talk 'Flying High:
Hobbyist OpenGL from Python', previously presented at EuroPython 2010.&lt;/p&gt;
</summary><category term="3d"></category><category term="opengl"></category><category term="pycon"></category><category term="pycon2011"></category><category term="pyglet"></category><category term="pyopengl"></category></entry></feed>