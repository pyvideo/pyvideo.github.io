<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org - Tin Tvrtkovic</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Fri, 03 Jun 2022 00:00:00 +0000</lastBuildDate><item><title>Python has a macro language: it's Python</title><link>https://pyvideo.org/pycon-italia-2022/python-has-a-macro-language-its-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python has a macro language: it’s Python - PyCon Italia 2022&lt;/p&gt;
&lt;p&gt;A small but growing number of Python projects, including &lt;tt class="docutils literal"&gt;attrs&lt;/tt&gt;,
&lt;tt class="docutils literal"&gt;cattrs&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;incant&lt;/tt&gt;, use Python to generate Python.&lt;/p&gt;
&lt;p&gt;We will example concrete cases of code generation in these libraries and
go over the ‘how’ and the ‘why’. Macros in mainstream languages are
generally a tool for metaprogramming, probably the most famous examples
being preprocessor directives in C and C++, and Rust macros.&lt;/p&gt;
&lt;p&gt;Python has rich metaprogramming capabilities baked in through the
compile and eval built-in functions, although a little care needs to be
taken for the generated code to be debuggable and properly shown in
track staces.&lt;/p&gt;
&lt;p&gt;We will examine one concrete example of metaprogramming in each of the
attrs, cattrs and incant libraries.&lt;/p&gt;
&lt;p&gt;Speaker: Tin Tvrtkovic&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Tin Tvrtkovic</dc:creator><pubDate>Fri, 03 Jun 2022 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2022-06-03:/pycon-italia-2022/python-has-a-macro-language-its-python.html</guid><category>PyCon Italia 2022</category><category>compiler and interpreters</category><category>performance</category></item></channel></rss>