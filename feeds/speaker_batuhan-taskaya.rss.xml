<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Fri, 12 Jul 2019 00:00:00 +0000</lastBuildDate><item><title>Hack The CPython</title><link>https://pyvideo.org/europython-2019/hack-the-cpython.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Have you ever realized how dynamic CPython interpreter is? Maybe it is
the most dynamic interpreter you may see. It gives interfaces to
internal things like garbage collector or AST, allows to alter functions
code, modify built-in functions etc.&lt;/p&gt;
&lt;p&gt;This talk will go beyond that dynamism. From adding a new syntax to
hooking the evaluation loop, it will show how to hack parts of python.&lt;/p&gt;
&lt;p&gt;Before understanding these hacks, you will learn internals of CPython
step-by- step. Steps are important because in every step we have at
least one hacking option. Also it gives the audience a short brief of
how python works.&lt;/p&gt;
&lt;p&gt;After learning how cpython works, we'll cover how to hack (use things
that is not their main purpose) the interpreter and the interfaces it
gave. For an example we will disassembly the bytecode and then assemble
it again with adding our statements or adding a new syntax for python at
runtime with AST.&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Talk will hack these steps:&lt;/div&gt;
&lt;div class="line"&gt;- AST&lt;/div&gt;
&lt;div class="line"&gt;- Bytecode&lt;/div&gt;
&lt;div class="line"&gt;- CTypes&lt;/div&gt;
&lt;div class="line"&gt;- CPython evaluation loop&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Batuhan Ta≈ükaya</dc:creator><pubDate>Fri, 12 Jul 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-07-12:europython-2019/hack-the-cpython.html</guid><category>CPython</category></item></channel></rss>