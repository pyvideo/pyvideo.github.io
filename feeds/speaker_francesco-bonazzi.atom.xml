<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_francesco-bonazzi.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2019-09-05T00:00:00+00:00</updated><entry><title>Matrix calculus with SymPy</title><link href="https://pyvideo.org/euroscipy-2019/matrix-calculus-with-sympy.html" rel="alternate"></link><published>2019-09-05T00:00:00+00:00</published><updated>2019-09-05T00:00:00+00:00</updated><author><name>Francesco Bonazzi</name></author><id>tag:pyvideo.org,2019-09-05:euroscipy-2019/matrix-calculus-with-sympy.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The recent popularization of libraries relying on tensor algebra
operations has led to a rise in the requirement of computational tools
to calculate the gradient and hessian of tensorial expressions. The
derivative of a tensor &lt;em&gt;A&lt;/em&gt; by tensor &lt;em&gt;B&lt;/em&gt; is the tensor containing all
combinations of the elements of &lt;em&gt;A&lt;/em&gt; derived by the elements of &lt;em&gt;B&lt;/em&gt;.
While tensor derivative operations are commonly supported by most
computer algebra systems and frameworks through iterative algorithms,
these derivatives can be expressed mathematically in closed-form
solutions, which are computationally many orders of magnitude faster.&lt;/p&gt;
&lt;p&gt;SymPy has been recently extended in order to support the computation of
symbolic matrix derivatives, and is currently the only computer algebra
system endowed with this feature (lacking even in Wolfram Mathematica).
Matrix calculus plays indeed a central role in optimization and machine
learning, but was unfortunately often limited to pen on papers or chalk
on blackboards.&lt;/p&gt;
&lt;p&gt;In this talk, we will introduce matrix expressions in SymPy, and address
the three ways they can be represented:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;explicit matrices with symbolic entries,&lt;/li&gt;
&lt;li&gt;indexed symbols with proper summation convention,&lt;/li&gt;
&lt;li&gt;implicit matrix expressions.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We illustrate the way matrix derivatives are implemented for all three
representations, with special emphasis to the third way, the fastest and
most elegant. The derived expressions can then be passed to SymPy's code
generation utilities and the resulting code can be compared in speed
with other frameworks, such as TensorFlow.&lt;/p&gt;
&lt;p&gt;The support of matrix derivatives can turn SymPy into a simple tool to
create the code for optimization algorithms or the code to train machine
learning algorithms. The code generation utilities of SymPy are indeed
aware of how to export matrix expressions into other programming
languages and frameworks. We will give some examples using maximum
likelihood estimation and the expectation-maximization algorithms.&lt;/p&gt;
&lt;p&gt;In this talk we explore a recent addition to SymPy which allows to find
closed-form solutions to matrix derivatives. As a consequence,
generation of efficient code for optimization problems is now much
easier.&lt;/p&gt;
</summary></entry></feed>