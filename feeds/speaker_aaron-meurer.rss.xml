<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Wed, 12 Jul 2017 00:00:00 +0000</lastBuildDate><item><title>Automatic Code Generation with SymPy</title><link>https://pyvideo.org/scipy-2017/automatic-code-generation-with-sympy.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Tutorial materials found here: &lt;a class="reference external" href="https://scipy2017.scipy.org/ehome/220975/493423/"&gt;https://scipy2017.scipy.org/ehome/220975/493423/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This tutorial will introduce code generation concepts using the SymPy library. SymPy is a pure Python library for symbolic mathematics. Code generation refers to the act of converting a SymPy symbolic expression into equivalent code in some language. This allows one to use SymPy to symbolically model a problem, and generate fast numerical code for specific platforms that executes that model. This is a powerful tool that is useful to scientists in many domains. Code generation allows users to speed up existing code, to deal only with the high level mathematics of a problem, avoids mathematical errors and typos, makes it possible to deal with expressions that would otherwise be too large to write by hand, and opens possibilities to perform automatic mathematical optimizations of expressions.&lt;/p&gt;
&lt;p&gt;SymPy supports generating code for C, C++, Fortran, Matlab/Octave, Python, Cython, Julia, Javascript, LLVM, Rust, Haskell, Mathematica, Tensorflow, and Theano, and can easily be extended to other languages. SymPy’s code generation is used by libraries such as PyDy, pyodesys, sympybotics, pycalphad, and many other programs.&lt;/p&gt;
&lt;p&gt;Learning objectives&lt;/p&gt;
&lt;p&gt;Attendees will be able to:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;write SymPy expressions describing mathematical functions and identify the function arguments and outputs.&lt;/li&gt;
&lt;li&gt;use the SymPy code printers to transform SymPy expressions representing common domain specific functions into multiple output languages.&lt;/li&gt;
&lt;li&gt;use the SymPy code generation routines to output compilable C code and use Cython to access these functions in Python.&lt;/li&gt;
&lt;li&gt;generate custom vectorized functions with the three SymPy functions: lambdify, ufuncify, and autowrap.&lt;/li&gt;
&lt;li&gt;create both custom code printers that make use of specialized C libraries and common subexpression elimination (CSE).&lt;/li&gt;
&lt;li&gt;subclass the core SymPy printers and create a printer for a custom language.&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jason Moore</dc:creator><pubDate>Wed, 12 Jul 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-07-12:scipy-2017/automatic-code-generation-with-sympy.html</guid><category>tutorial</category><category>sympy</category></item><item><title>Lightning Talks 2017-07-12</title><link>https://pyvideo.org/scipy-2017/lightning-talks-2017-07-12.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Lightning Talks 2017-07-12&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="12%" /&gt;
&lt;col width="23%" /&gt;
&lt;col width="65%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head" rowspan="2"&gt;Start&lt;/th&gt;
&lt;th class="head" rowspan="2"&gt;Speakers&lt;/th&gt;
&lt;th class="head" rowspan="2"&gt;Subject&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td rowspan="4"&gt;1:30&lt;/td&gt;
&lt;td rowspan="4"&gt;Aaron Meurer&lt;/td&gt;
&lt;td rowspan="4"&gt;&lt;strong&gt;Doctr&lt;/strong&gt;
- We built a better tool to push from TravisCI to
GitHub Pages&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td rowspan="4"&gt;6:30&lt;/td&gt;
&lt;td rowspan="4"&gt;Daniel Chen&lt;/td&gt;
&lt;td rowspan="4"&gt;&lt;strong&gt;SciPy 2017 Notes&lt;/strong&gt;
- A github repo (scipy_2017_notes) of links and
tutorial information from this conference.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td rowspan="4"&gt;7:15&lt;/td&gt;
&lt;td rowspan="4"&gt;Allen Downey&lt;/td&gt;
&lt;td rowspan="4"&gt;&lt;strong&gt;Physical Modeling in Python&lt;/strong&gt;
- tinyurl,.com/modsimpy; writing a book and am looking
for simple models to teach students.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td rowspan="4"&gt;8:45&lt;/td&gt;
&lt;td rowspan="4"&gt;Oliver Zeigermann&lt;/td&gt;
&lt;td rowspan="4"&gt;&lt;strong&gt;How do Convolutional Neural Networks &amp;quot;See&amp;quot;&lt;/strong&gt;
- Techniques to visualize feature detection in the
Insight neural network.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td rowspan="5"&gt;14:30&lt;/td&gt;
&lt;td rowspan="5"&gt;Sebastian Raschka&lt;/td&gt;
&lt;td rowspan="5"&gt;&lt;strong&gt;Screenlamp&lt;/strong&gt;
- We made Hypothosis pipeline builder for experimental
biologists, with database filtering steps.  Based on
BioPandas&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td rowspan="4"&gt;20:00&lt;/td&gt;
&lt;td rowspan="4"&gt;Theodore Lindsay
and Floris van
Breugel&lt;/td&gt;
&lt;td rowspan="4"&gt;&lt;strong&gt;FigureFirst&lt;/strong&gt;
- Make it easy to use MatPlotLib and Inkscape to build
beautiful scientific figures.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td rowspan="3"&gt;26:00&lt;/td&gt;
&lt;td rowspan="3"&gt;Pamela Wu&lt;/td&gt;
&lt;td rowspan="3"&gt;&lt;strong&gt;SynthPy:  Real Answers for Fake Data&lt;/strong&gt;
-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td rowspan="4"&gt;31:45&lt;/td&gt;
&lt;td rowspan="4"&gt;Nick Murphy&lt;/td&gt;
&lt;td rowspan="4"&gt;&lt;strong&gt;PlasmaPy&lt;/strong&gt;
- Beginning a community developed Python package for
plasma physics.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td rowspan="5"&gt;34:00&lt;/td&gt;
&lt;td rowspan="5"&gt;Scott Collis&lt;/td&gt;
&lt;td rowspan="5"&gt;&lt;strong&gt;Py-ART&lt;/strong&gt;
- Python ARM Radar Toolkit, exposing world of radar
meteorology to SciPy stack.  Taking comments on our
roadmap.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td rowspan="4"&gt;36:45&lt;/td&gt;
&lt;td rowspan="4"&gt;Bill Spotz&lt;/td&gt;
&lt;td rowspan="4"&gt;&lt;strong&gt;Using Jupyter to make Citations&lt;/strong&gt;
- The journey of using Jupyter notebooks to add real
citations.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td rowspan="5"&gt;42:15&lt;/td&gt;
&lt;td rowspan="5"&gt;Jose Felipe&lt;/td&gt;
&lt;td rowspan="5"&gt;&lt;strong&gt;Test support in Jupyter/Ipython through cell&lt;/strong&gt;
&lt;strong&gt;magics&lt;/strong&gt;
- Starting with iPython/Unittests, make unittesting in
cells&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td rowspan="4"&gt;47:45&lt;/td&gt;
&lt;td rowspan="4"&gt;Scott Cole&lt;/td&gt;
&lt;td rowspan="4"&gt;&lt;strong&gt;Burrito Data Analytics&lt;/strong&gt;
- Specialized Visualization and data collection
profiles in the quest for better burittos&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Aaron Meurer</dc:creator><pubDate>Wed, 12 Jul 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-07-12:scipy-2017/lightning-talks-2017-07-12.html</guid><category>lightning talks</category></item><item><title>SymPy Code Generation</title><link>https://pyvideo.org/scipy-2016/sympy-code-generation-scipy-2016-aaron-meurer.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Aaron Meurer</dc:creator><pubDate>Fri, 15 Jul 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-07-15:scipy-2016/sympy-code-generation-scipy-2016-aaron-meurer.html</guid><category>SciPy 2016</category><category>sympy</category></item><item><title>Symbolic Computation with Python using SymPy (Beginner)</title><link>https://pyvideo.org/scipy-2016/symbolic-compution-with-python-using-sympy-beginner-scipy-2016-tutorial-ondrej-certik-et-al.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Materials for this tutorial are found here: &lt;a class="reference external" href="https://github.com/sympy/scipy-2016-tutorial"&gt;https://github.com/sympy/scipy-2016-tutorial&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ondřej Čertík</dc:creator><pubDate>Mon, 11 Jul 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-07-11:scipy-2016/symbolic-compution-with-python-using-sympy-beginner-scipy-2016-tutorial-ondrej-certik-et-al.html</guid><category>SciPy 2016</category><category>tutorial</category><category>SymPy</category></item><item><title>Symbolic Computing with SymPy, SciPy2013 Tutorial, Part 1 of 6</title><link>https://pyvideo.org/scipy-2013/symbolic-computing-sympy-scipy2013-tutorial-part-1.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;SymPy is a pure Python library for symbolic mathematics. It aims to
become a full-featured computer algebra system (CAS) while keeping the
code as simple as possible in order to be comprehensible and easily
extensible. SymPy is written entirely in Python and does not require any
external libraries.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this tutorial we will introduce attendees to SymPy. We will start by
showing how to install and configure this Python module. Then we will
proceed to the basics of constructing and manipulating mathematical
expressions in SymPy. We will also discuss the most common issues and
differences from other computer algebra systems, and how to deal with
them. In the last part of this tutorial we will show how to solve
simple, yet illustrative, mathematical problems with SymPy.&lt;/p&gt;
&lt;p&gt;This knowledge should be enough for attendees to start using SymPy for
solving mathematical problems and hacking SymPy's internals (though
hacking core modules may require additional expertise).&lt;/p&gt;
&lt;p&gt;We expect attendees of this tutorial to have basic knowledge of Python
and mathematics. However, any more advanced topics will be explained
during presentation.&lt;/p&gt;
&lt;p&gt;Outline&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;installing, configuring and running SymPy&lt;/li&gt;
&lt;li&gt;basics of expressions in SymPy&lt;/li&gt;
&lt;li&gt;traversal and manipulation of expressions&lt;/li&gt;
&lt;li&gt;common issues and differences from other CAS&lt;/li&gt;
&lt;li&gt;setting up and using printers&lt;/li&gt;
&lt;li&gt;querying expression properties&lt;/li&gt;
&lt;li&gt;not only symbolics: numerical computing (mpmath)&lt;/li&gt;
&lt;li&gt;Mathematical problem solving with SymPy&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Required Packages&lt;/p&gt;
&lt;p&gt;Python 2.x or 3.x, SymPy (most recent version) Optional packages:
IPython, matplotlib, NetworkX, GMPY, numpy, scipy&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Aaron Meurer</dc:creator><pubDate>Mon, 24 Jun 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-06-24:scipy-2013/symbolic-computing-sympy-scipy2013-tutorial-part-1.html</guid><category>mathematics</category><category>sympy</category></item><item><title>Conda: A Cross Platform Package Manager for any Binary Distribution</title><link>https://pyvideo.org/scipy-2014/conda-a-cross-platform-package-manager-for-any-b.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Conda is an open source package manager, which can be used to manage
binary packages and virtual environments on any platform. It is the
package manager of the Anaconda Python distribution, although it can be
used independently of Anaconda. We will look at how conda solves many of
the problems that have plagued Python packaging in the past, followed by
a demonstration of its features.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;We will look at the issues that have plagued packaging in the Python
ecosystem in the past, and discuss how Conda solves these problems. We
will show how to use conda to manage multiple environments. Finally, we
will look at how to build your own conda packages.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;What is the packaging problem? We will briefly look at the history of
the problem and the various solutions to it. There are two sides to
the packaging problem: the problem of installing existing packages
and the problem of building packages to be installed. We look at the
history of distutils, setuptools, distribute, and pip, the some of
the problems they solved, and issues that arose, particularly for the
scientific Python community.&lt;/li&gt;
&lt;li&gt;We will look at the conda package format, the design decisions that
guided the format, and the implications of those decisions. A conda
package is a bz2 compressed tarfile of all the files installed in a
prefix, along with a metadata directory for the package. A conda
package is typically installed by hard linking these files into the
install prefix. Conda packages should be relocatable, so that they
can be installed into any prefix. This allows conda packages to be
installed into many virtual environments at once. A conda package is
not Python specific.&lt;/li&gt;
&lt;li&gt;We will look at how basic commands for installation and environment
management. Conda uses a SAT solver to solve package dependency
constraints, which is a simple, rigorous, and modern way to ensure
that the set of packages that are installed are consistent with one
another.&lt;/li&gt;
&lt;li&gt;Conda has an extensive build framework which allows anybody to build
their own conda packages. We will show how to use these tools and how
to upload them to Binstar, a free packaging hosting service.&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Aaron Meurer</dc:creator><pubDate>Wed, 09 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-09:scipy-2014/conda-a-cross-platform-package-manager-for-any-b.html</guid><category>conda</category><category>packaging</category></item><item><title>SymPy Tutorial Part 1</title><link>https://pyvideo.org/scipy-2014/sympy-tutorial-part-1.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;SymPy is a pure Python library for symbolic mathematics. It aims to
become a full-featured computer algebra system (CAS) while keeping the
code as simple as possible in order to be comprehensible and easily
extensible. SymPy is written entirely in Python and does not require any
external libraries.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this tutorial we will introduce attendees to SymPy. We will show
basics of constructing and manipulating mathematical expressions in
SymPy, the most common issues and differences from other computer
algebra systems, and how to deal with them. In the last part of this
tutorial we will show how to solve some practical problems with SymPy.
This will include showing how to interface SymPy with popular numeric
libraries like NumPy.&lt;/p&gt;
&lt;p&gt;This knowledge should be enough for attendees to start using SymPy for
solving mathematical problems and hacking SymPy's internals (though
hacking core modules may require additional expertise).&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Aaron Meurer</dc:creator><pubDate>Wed, 09 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-09:scipy-2014/sympy-tutorial-part-1.html</guid><category>SymPy</category><category>tutorial</category></item><item><title>SymPy Tutorial Part 2</title><link>https://pyvideo.org/scipy-2014/sympy-tutorial-part-2.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;SymPy is a pure Python library for symbolic mathematics. It aims to
become a full-featured computer algebra system (CAS) while keeping the
code as simple as possible in order to be comprehensible and easily
extensible. SymPy is written entirely in Python and does not require any
external libraries.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Aaron Meurer</dc:creator><pubDate>Wed, 09 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-09:scipy-2014/sympy-tutorial-part-2.html</guid><category>SymPy</category><category>tutorial</category></item><item><title>SymPy Tutorial Part 3</title><link>https://pyvideo.org/scipy-2014/sympy-tutorial-part-3.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;SymPy is a pure Python library for symbolic mathematics. It aims to
become a full-featured computer algebra system (CAS) while keeping the
code as simple as possible in order to be comprehensible and easily
extensible. SymPy is written entirely in Python and does not require any
external libraries.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Aaron Meurer</dc:creator><pubDate>Wed, 09 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-09:scipy-2014/sympy-tutorial-part-3.html</guid><category>SymPy</category><category>tutorial</category></item><item><title>SymPy Tutorial Part 4</title><link>https://pyvideo.org/scipy-2014/sympy-tutorial-part-4.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;SymPy is a pure Python library for symbolic mathematics. It aims to
become a full-featured computer algebra system (CAS) while keeping the
code as simple as possible in order to be comprehensible and easily
extensible. SymPy is written entirely in Python and does not require any
external libraries.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Aaron Meurer</dc:creator><pubDate>Wed, 09 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-09:scipy-2014/sympy-tutorial-part-4.html</guid><category>SymPy</category><category>tutorial</category></item></channel></rss>