<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Sat, 06 Oct 2018 00:00:00 +0000</lastBuildDate><item><title>Khiva: Cómo Al Juarismi reventaba GPUs para analizar time series</title><link>https://pyvideo.org/pycon-es-2018/khiva-como-al-juarismi-reventaba-gpus-para-analizar-time-series.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Durante las últimas décadas del siglo XX el mundo académico llevó a cabo numerosas investigaciones y desarrollos relacionados con el análisis de time series (TS). Sin embargo, no es hasta estos últimos años en los que la industria se ha lanzado al análisis y cómputo masivo de este tipo de datos. El auge del Internet de la Cosas y la necesidad de analizar y monitorizar datos en los que el tiempo no es una simple métrica más, sino el eje principal sobre el que versan otras variables es lo que ha puesto el foco de atención en el análisis de time series. Esta nueva demanda de cómputo debe ser acompasada por las últimas generaciones de procesadores, (multicore y GPUs), así como en el desarrollo de tecnologías de Big Data y de computación distribuida, las cuales proporcionan los medios para tratar estos grandes volúmenes de datos en tiempo real suave.&lt;/p&gt;
&lt;p&gt;En el contexto de Python, en la actualidad existen algunas librerías que ofrecen funciones para analizar time series. Si nos centramos en librerías de pre-procesamiento, encontramos librerías como Pandas [1] y tspreprocess [2], las cuales ofrecen funciones para la carga y almacenamiento de TS, además de funciones de conversión, resampling y desplazamiento de tiempo. Por otro lado, encontramos las librerías Prophet [3], PyFlux [4] y Pyramid [5], que nos ofrecen funciones de forecasting para predecir futuros valores en una time series. Por último, hay otro grupo de librerías como, tsfresh [6], tslearn [7] y shapelets [8] que generan clasificadores y regresores para time series. A pesar de la existencia de estas librerías que tratan time series, observamos principalmente dos limitaciones: 1) La funcionalidad que ofrecen estas librerías se encuentra muy fragmentada en librerías inconexas y 2) la mayoría de estas librerías son secuenciales, es decir, se ejecutan en un único thread, por lo que no son capaces de sacar ventaja de los procesadores paralelos como GPUs o CPUs multicores.&lt;/p&gt;
&lt;p&gt;Para superar las dos limitaciones anteriores, presentamos Khiva [9], una librería opensource que permite la ejecución de una larga lista de algoritmos de análisis de time series sobre GPUs. Khiva incorpora algoritmos de reducción de dimensionalidad, cálculo de distancias, normalización, regresión, regularización, extracción de características, estadísticos descriptivos, búsqueda de patrones, etc. Para la implementación de todos los algoritmos hemos usado la librería Arrayfire [10] como capa de abstracción de las principales APIs de GPUs para cómputo, OpenCL [11] y Nvidia CUDA [12]. De esta forma, somos capaces de asegurar que la librería Khiva se puede ejecutar en cualquier plataforma independientemente de la GPU que se encuentre disponible. Además de la aceleración del tiempo de ejecución, otra de las principales ventajas que proporciona Khiva, es que la mayoría de los algoritmos mencionados son concatenables. Debido a que implementamos una estrategia lazy para las transferencias de memoria entre CPU y GPU, así solo se transfieren datos entre CPU y GPU si es estrictamente necesario, por lo que evitamos todas aquellas transferencias que son innecesarias.&lt;/p&gt;
&lt;p&gt;Durante la charla, ofreceremos una introducción a las time series y a los problemas que se pueden resolver con el tratamiento de éstas. Posteriormente, presentaremos los aspectos de implementación más importantes, aquí profundizaremos en los mecanismos que hemos usado para ejecutar nuestros algoritmos en GPU y finalizaremos con una sencilla demostración en Python (live coding), utilizaremos Khiva para analizar un conjunto de datos de consumo energético para encontrar patrones comunes entre ellos.&lt;/p&gt;
&lt;p&gt;Works Cited&lt;/p&gt;
&lt;p&gt;[1] &amp;quot;Pandas Library Documentation,&amp;quot; [Online]. Available: &lt;a class="reference external" href="https://pandas.pydata.org/pandas-docs/version/0.22.0/timeseries.html"&gt;https://pandas.pydata.org/pandas-docs/version/0.22.0/timeseries.html&lt;/a&gt;. [Accessed 04 06 2018].&lt;/p&gt;
&lt;p&gt;[2] &amp;quot;tspreprocess,&amp;quot; Maximilian Christ, [Online]. Available: &lt;a class="reference external" href="https://github.com/MaxBenChrist/tspreprocess"&gt;https://github.com/MaxBenChrist/tspreprocess&lt;/a&gt;. [Accessed 04 06 2018].&lt;/p&gt;
&lt;p&gt;[3] &amp;quot;Prophet,&amp;quot; Facebook, [Online]. Available: &lt;a class="reference external" href="https://github.com/facebook/prophet"&gt;https://github.com/facebook/prophet&lt;/a&gt;. [Accessed 20018 06 04].&lt;/p&gt;
&lt;p&gt;[4] &amp;quot;PyFlux,&amp;quot; Ross Taylor, [Online]. Available: &lt;a class="reference external" href="https://github.com/RJT1990/pyflux"&gt;https://github.com/RJT1990/pyflux&lt;/a&gt;. [Accessed 04 06 2018].&lt;/p&gt;
&lt;p&gt;[5] &amp;quot;Pyramid,&amp;quot; Taylor G Smith, [Online]. Available: &lt;a class="reference external" href="https://github.com/tgsmith61591/pyramid"&gt;https://github.com/tgsmith61591/pyramid&lt;/a&gt;. [Accessed 04 06 2018].&lt;/p&gt;
&lt;p&gt;[6] &amp;quot;tsfresh,&amp;quot; Blue-yonder, [Online]. Available: &lt;a class="reference external" href="https://github.com/blue-yonder/tsfresh"&gt;https://github.com/blue-yonder/tsfresh&lt;/a&gt;. [Accessed 04 06 2018].&lt;/p&gt;
&lt;p&gt;[7] &amp;quot;tslearn,&amp;quot; Romain Tavenard, [Online]. Available: &lt;a class="reference external" href="https://github.com/rtavenar/tslearn"&gt;https://github.com/rtavenar/tslearn&lt;/a&gt;. [Accessed 04 06 2018].&lt;/p&gt;
&lt;p&gt;[8] &amp;quot;shaplets-python,&amp;quot; Mohamed Abdulaziz Ali Haseeb, [Online]. Available: &lt;a class="reference external" href="https://github.com/mohaseeb/shaplets-python"&gt;https://github.com/mohaseeb/shaplets-python&lt;/a&gt;. [Accessed 04 06 2018].&lt;/p&gt;
&lt;p&gt;[9] &amp;quot;Khiva Library,&amp;quot; Shapelets.io, [Online]. Available: &lt;a class="reference external" href="https://github.com/Shapelets/Khiva"&gt;https://github.com/Shapelets/Khiva&lt;/a&gt;. [Accessed 04 06 2018].&lt;/p&gt;
&lt;p&gt;[10] &amp;quot;Arrayfire Documentation,&amp;quot; ArrayFire, [Online]. Available: &lt;a class="reference external" href="https://arrayfire.org/docs/index.htm"&gt;https://arrayfire.org/docs/index.htm&lt;/a&gt;. [Accessed 04 06 2018].&lt;/p&gt;
&lt;p&gt;[11] &amp;quot;OpenCL,&amp;quot; Khronos Group, [Online]. Available: &lt;a class="reference external" href="https://www.khronos.org/opencl/"&gt;https://www.khronos.org/opencl/&lt;/a&gt;. [Accessed 04 06 2018].&lt;/p&gt;
&lt;p&gt;[12] &amp;quot;Nvidia Cuda,&amp;quot; Nvidia, [Online]. Available: &lt;a class="reference external" href="https://developer.nvidia.com/cuda-toolkit"&gt;https://developer.nvidia.com/cuda-toolkit&lt;/a&gt;. [Accessed 04 06 2018].&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Antonio Vilches</dc:creator><pubDate>Sat, 06 Oct 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-10-06:pycon-es-2018/khiva-como-al-juarismi-reventaba-gpus-para-analizar-time-series.html</guid></item></channel></rss>