<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_joel-watts.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2015-10-15T00:00:00+00:00</updated><entry><title>Building concurrent network applications with asyncio</title><link href="https://pyvideo.org/pytexas-2014/building-concurrent-network-applications-with-asy.html" rel="alternate"></link><published>2014-10-04T00:00:00+00:00</published><updated>2014-10-04T00:00:00+00:00</updated><author><name>Joel Watts</name></author><id>tag:pyvideo.org,2014-10-04:pytexas-2014/building-concurrent-network-applications-with-asy.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk, I'll introduce the &lt;tt class="docutils literal"&gt;asyncio&lt;/tt&gt; module, which was recently
added to the Python standard library. I'll talk about the problems that
can be solved with asynchronous I/O and will show how the tools provided
by the module, including event loops, coroutines, and futures, along
with Python's new &lt;tt class="docutils literal"&gt;yield from&lt;/tt&gt; syntax, can be used to build a
concurrent network application.&lt;/p&gt;
</summary></entry><entry><title>Building real-world applications with `asyncio`</title><link href="https://pyvideo.org/pytexas-2015/building-real-world-applications-with-asyncio.html" rel="alternate"></link><published>2015-10-15T00:00:00+00:00</published><updated>2015-10-15T00:00:00+00:00</updated><author><name>Joel Watts</name></author><id>tag:pyvideo.org,2015-10-15:pytexas-2015/building-real-world-applications-with-asyncio.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this tutorial, Eloy Zu√±iga, Jr. and Joel Watts will work through the
process of building an event-driven application using
&lt;tt class="docutils literal"&gt;`asyncio&lt;/tt&gt; &amp;lt;&lt;a class="reference external" href="https://docs.python.org/3/library/asyncio.html"&gt;https://docs.python.org/3/library/asyncio.html&lt;/a&gt;&amp;gt;`__ and web
technologies. By the end, we hope you'll be able to answer the following
questions:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Why should I care about async programming at all?&lt;/li&gt;
&lt;li&gt;What is &lt;tt class="docutils literal"&gt;asyncio&lt;/tt&gt; and how is it used?&lt;/li&gt;
&lt;li&gt;How do I use this stuff to solve real-world problems?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We'll assume some familiarity with Python, but no prior experience with
async programming is required. Please come with Python 3.4+ installed.&lt;/p&gt;
&lt;p&gt;All the codez can be found in these 2 repos&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/eloyz/aioui"&gt;https://github.com/eloyz/aioui&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/jpwatts/aioserver"&gt;https://github.com/jpwatts/aioserver&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="Asyncio"></category><category term="async"></category></entry><entry><title>Why should I care about asyncio?</title><link href="https://pyvideo.org/pytexas-2015/why-should-i-care-about-asyncio.html" rel="alternate"></link><published>2015-10-15T00:00:00+00:00</published><updated>2015-10-15T00:00:00+00:00</updated><author><name>Joel Watts</name></author><id>tag:pyvideo.org,2015-10-15:pytexas-2015/why-should-i-care-about-asyncio.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python 3.3 added &lt;tt class="docutils literal"&gt;yield from&lt;/tt&gt; and 3.4 added
&lt;tt class="docutils literal"&gt;`asyncio&lt;/tt&gt; &amp;lt;&lt;a class="reference external" href="https://docs.python.org/3/library/asyncio.html"&gt;https://docs.python.org/3/library/asyncio.html&lt;/a&gt;&amp;gt;`__. Python
3.5 adds &lt;tt class="docutils literal"&gt;async&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;await&lt;/tt&gt; from &lt;a class="reference external" href="https://www.python.org/dev/peps/pep-0492/"&gt;PEP
492&lt;/a&gt;. What is all this
stuff? Why do we need new syntax? And why should I care?&lt;/p&gt;
&lt;p&gt;This talk is about why async programming is worth caring about and why
Python's approach has me so excited.&lt;/p&gt;
</summary><category term="Asyncio"></category><category term="async"></category></entry></feed>