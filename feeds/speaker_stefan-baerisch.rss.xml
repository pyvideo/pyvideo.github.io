<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org - Stefan Baerisch</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Wed, 02 Jun 2021 00:00:00 +0000</lastBuildDate><item><title>Search Options in Django - Stefan Baerisch</title><link>https://pyvideo.org/djangocon-europe-2020/search-options-in-django-stefan-baerisch.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;DjangoCon Europe 2020 (Virtual)
September 19, 2020 - 12h35 (GMT+1)&lt;/p&gt;
&lt;p&gt;&amp;quot;Search Options in Django&amp;quot; by Stefan Baerisch&lt;/p&gt;
&lt;p&gt;I like websites with search bars. If the search function works well, I can enter a few words and get a list of results, with the things that interest me at the top. Whether you use it as a help system or for product information, search functionality can add a lot of value to a Django application. But implementing proper search functionality is not easy. Django offers multiple ways to implement search functionality, each with its advantages and disadvantages. This talk will give you an overview of the different ways in which you can implement search functionality in Django. We will look at the full-text search options that come with databases and the use of a dedicated search engine like Elastic Search or Postgres. Along the way, you will learn about the different ways in which you can index your data to learn how to evaluate your search results.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Stefan Baerisch</dc:creator><pubDate>Sat, 19 Sep 2020 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2020-09-19:/djangocon-europe-2020/search-options-in-django-stefan-baerisch.html</guid><category>DjangoCon Europe 2020</category></item><item><title>A SQL for Django</title><link>https://pyvideo.org/djangocon-europe-2021/a-sql-for-django.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk will show you how to combine SQL and ORM in Django applications.
Both ORM methods and SQL have their place.
ORM and Django's model classes give us a great development experience. We get an easy-to-use and powerful way to define, migrate, and use our database.
SQL gives us access to all the features our database has to offer. It&lt;/p&gt;
&lt;p&gt;The talk will be structured as follows:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Why care about SQL?&lt;/li&gt;
&lt;li&gt;Working with data in Django - Common ORM use cases&lt;/li&gt;
&lt;li&gt;Creating complex queries: Q, F, annotations&lt;/li&gt;
&lt;li&gt;Creating and Addressing the N+1 query problem with Django ORM.&lt;/li&gt;
&lt;li&gt;Everything works, so why use SQL?&lt;/li&gt;
&lt;li&gt;Minimize Database access for maximal Performance&lt;/li&gt;
&lt;li&gt;Use Features of complex sequel queries; Sub-Selects&lt;/li&gt;
&lt;li&gt;Benefit from the SQL Know-How and documentation&lt;/li&gt;
&lt;li&gt;Best of both worlds: Getting objects with raw queries&lt;/li&gt;
&lt;li&gt;If all else fails: Directly using database connections for updates and analytics&lt;/li&gt;
&lt;li&gt;Drawbacks of SQL in Django&lt;/li&gt;
&lt;li&gt;Review: SQL, Django - How and Why&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Stefan Baerisch</dc:creator><pubDate>Wed, 02 Jun 2021 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2021-06-02:/djangocon-europe-2021/a-sql-for-django.html</guid><category>DjangoCon Europe 2021</category><category>Django</category><category>DjangoConEU</category><category>djangoconeu2021</category></item><item><title>A Deep Look at Logging</title><link>https://pyvideo.org/europython-2015/a-deep-look-at-logging.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Stefan Baerisch - A Deep Look at Logging
[EuroPython 2015]
[21 July 2015]
[Bilbao, Euskadi, Spain]&lt;/p&gt;
&lt;p&gt;Do you know what your application did last night? Python logging can help you.&lt;/p&gt;
&lt;p&gt;This talk you will show you how to implement a systematic logging
approach without boilerplate code and how to set up the Python logging
module for different needs in production systems.  We will see how to
work with log files and other logging endpoints.  We will address the
data protection concerns that come up when logging  from application
with personal  information. We will also look at the performance
implications of logging. We will then cover best practices - how to
structure logging, what to include in a log message, and how to
configure logging for different use cases.&lt;/p&gt;
&lt;p&gt;We will use the Python standard logging module to implement logging.
This talk is useful to beginners with some experience.  An
understanding of decorators is useful, but not required.  Some
experience in web programming is a plus.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Stefan Baerisch</dc:creator><pubDate>Sun, 02 Aug 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-08-02:/europython-2015/a-deep-look-at-logging.html</guid><category>EuroPython 2015</category></item><item><title>The Boring Python Office Talk - Automate Powerpoint, Excel, and PDF with Python</title><link>https://pyvideo.org/europython-2018/the-boring-python-office-talk-automate-powerpoint-excel-and-pdf-with-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;We will have a quick tour of the many ways Python gives us to handle
DOCX, XLSX, PPTX, and PDF and automate some boring office tasks.&lt;/p&gt;
&lt;p&gt;Many things are more interesting than office file formats like DOCX,
XLSX, PPTX, and PDF. Still, while working with office formats does not
seem to be the most fun, it is useful. But we can do better than just
useful. With the Python and some great libraries, it is possible to have
Python do much of the work you would have to do otherwise:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Create and modify PDF files.&lt;/li&gt;
&lt;li&gt;Create Powerpoints presentations from scripts.&lt;/li&gt;
&lt;li&gt;Create Excel files, from simple tables to charts and reports.&lt;/li&gt;
&lt;li&gt;Combine information in Word documents.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In this talk, we will have a look at a usual working day for Bob and
Ann, two fictional office works. Both Bob and Ann work office jobs, but
while Bob does all of his work by hand, but Ann knows Python. We will
look at different tasks that Bob wants to do, such as preparing an Excel
report, building a Powerpoint presentation, or rearranging a PDF. Then,
we will look how Ann use Python and some exciting libraries to automate
these task.&lt;/p&gt;
&lt;p&gt;During the talk, we will use Bob and Ann to consider different task
related to office file formats. We will then look at the Python
libraries that are available. Then, using this library, we will see how
an otherwise boring task can be automated. The goal of the task is to
showcase the libraries to Python offers to work with standard office
formats and provide you with a starting point for your own office
automation.&lt;/p&gt;
&lt;p&gt;After this talk, you will know how to automate at least some of your
daily office tasks. You may also be bored because Python is doing so
much of your work for you. If you know basic Python programming, you
will be right at home. There will be some use of Pandas, but it is not
required.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Stefan Baerisch</dc:creator><pubDate>Fri, 27 Jul 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-07-27:/europython-2018/the-boring-python-office-talk-automate-powerpoint-excel-and-pdf-with-python.html</guid><category>EuroPython 2018</category></item><item><title>Go(lang) to Python</title><link>https://pyvideo.org/europython-2019/golang-to-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python and Go are a great combination. Like Python, Go is easy to learn,
powerful to use and has many useful libraries. Go and Python work great
together: Go has better performance and parallelism, while Python is
more expressive. Wouldn't it be nice if you could combine the benefits
of Go and Python in one program? This talk shows you how.&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Why you may want to attend&lt;/div&gt;
&lt;div class="line"&gt;Extension modules written in C/C++ or other languages are one of the
major strength Python. Go is a useful language to extend Python. This
talk explains to you how to implement extension modules in Go.&lt;/div&gt;
&lt;/div&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Content of the Talk&lt;/div&gt;
&lt;div class="line"&gt;The talk shows how to use CGO to make Go code available as a C library
and then to use Cython to make this library available as a Python
extension module.&lt;/div&gt;
&lt;/div&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;We start by building a wrapper for simple Go code that adds some
numbers and returns the results. This program is our end-to-end
example to demonstrate the steps necessary to create a Python
extension module in Go.&lt;/div&gt;
&lt;div class="line"&gt;Next, we move to more complex use cases. We look at different ways to
share complex data and to use Python callbacks from Go.&lt;/div&gt;
&lt;div class="line"&gt;Then, we see how to how to handle Go's Garbage Collector when exposing
with Go Objects.&lt;/div&gt;
&lt;div class="line"&gt;Finally, the talk goes into the advantages and disadvantages of Go as
an extension language for Python. We also look at some of the
alternative ways to make Go code available in Python.&lt;/div&gt;
&lt;/div&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Recommended Prerequisites&lt;/div&gt;
&lt;div class="line"&gt;To get the most out of the talk, you should know about the difference
between native Python modules and extension modules written in other
languages. Some background on concepts like garbage collection, stack
and heap, and dynamic/shared libraries are beneficial. Knowledge of
the Python C API is not required.&lt;/div&gt;
&lt;div class="line"&gt;You do not need to know how to write Go code to follow the talk - the
talk explains all the required Go.&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Stefan Baerisch</dc:creator><pubDate>Fri, 12 Jul 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-07-12:/europython-2019/golang-to-python.html</guid><category>EuroPython 2019</category><category>Cython</category><category>Go-Lang</category><category>Tooling</category></item><item><title>Tests that (Almost) Write Themselves</title><link>https://pyvideo.org/europython-2020/tests-that-almost-write-themselves.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Hints for Golden Master Testing in Python&lt;/p&gt;
&lt;p&gt;What do we do when the only test requirements we have are &amp;quot;the new system should have the exact same results as the old system&amp;quot;? Golden Master Testing may help.
The idea behind golden master testing, also called characterization testing, is quite simple: We don't write test cases that specify what the expected result is. Instead, we take the output from a prior, working version of a program (the golden master) and compare it to the result of the current version. If there is a difference between the output of the current system and the golden master, we may have found a bug.&lt;/p&gt;
&lt;p&gt;If implemented right, Golden Master testing can be very useful to test legacy systems or data processing programs with complex input and outputs. Golden Master Testing is also a good addition to our regression testing processes.&lt;/p&gt;
&lt;p&gt;In practice, implementing Golden Master testing is not quite that easy.  Just checking if the outputs are equal will often not work: If the output includes times and dates or random elements, a simple comparison will not be enough. Luckily for use, with Python, we have the perfect tool to process all kinds of outputs and only look at the parts of the output that are important for the outcome of the test.&lt;/p&gt;
&lt;p&gt;In this talk, we will look at best practices for Golden Master Testing with Python. We will see techniques to identify and quantify the relevant differences between our golden master and the current output.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Stefan Baerisch</dc:creator><pubDate>Thu, 23 Jul 2020 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2020-07-23:/europython-2020/tests-that-almost-write-themselves.html</guid><category>EuroPython 2020</category><category>europython</category><category>europython-2020</category><category>europython-online</category><category>Best Practice</category><category>Test Libraries (pytest/nose/...)</category><category>Testing</category><category>Tooling</category></item></channel></rss>