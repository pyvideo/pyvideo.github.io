<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Fri, 12 Jul 2019 00:00:00 +0000</lastBuildDate><item><title>Go(lang) to Python</title><link>https://pyvideo.org/europython-2019/golang-to-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python and Go are a great combination. Like Python, Go is easy to learn,
powerful to use and has many useful libraries. Go and Python work great
together: Go has better performance and parallelism, while Python is
more expressive. Wouldn't it be nice if you could combine the benefits
of Go and Python in one program? This talk shows you how.&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Why you may want to attend&lt;/div&gt;
&lt;div class="line"&gt;Extension modules written in C/C++ or other languages are one of the
major strength Python. Go is a useful language to extend Python. This
talk explains to you how to implement extension modules in Go.&lt;/div&gt;
&lt;/div&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Content of the Talk&lt;/div&gt;
&lt;div class="line"&gt;The talk shows how to use CGO to make Go code available as a C library
and then to use Cython to make this library available as a Python
extension module.&lt;/div&gt;
&lt;/div&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;We start by building a wrapper for simple Go code that adds some
numbers and returns the results. This program is our end-to-end
example to demonstrate the steps necessary to create a Python
extension module in Go.&lt;/div&gt;
&lt;div class="line"&gt;Next, we move to more complex use cases. We look at different ways to
share complex data and to use Python callbacks from Go.&lt;/div&gt;
&lt;div class="line"&gt;Then, we see how to how to handle Go's Garbage Collector when exposing
with Go Objects.&lt;/div&gt;
&lt;div class="line"&gt;Finally, the talk goes into the advantages and disadvantages of Go as
an extension language for Python. We also look at some of the
alternative ways to make Go code available in Python.&lt;/div&gt;
&lt;/div&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Recommended Prerequisites&lt;/div&gt;
&lt;div class="line"&gt;To get the most out of the talk, you should know about the difference
between native Python modules and extension modules written in other
languages. Some background on concepts like garbage collection, stack
and heap, and dynamic/shared libraries are beneficial. Knowledge of
the Python C API is not required.&lt;/div&gt;
&lt;div class="line"&gt;You do not need to know how to write Go code to follow the talk - the
talk explains all the required Go.&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Stefan Baerisch</dc:creator><pubDate>Fri, 12 Jul 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-07-12:europython-2019/golang-to-python.html</guid><category>Cython</category><category>Go-Lang</category><category>Tooling</category></item><item><title>The Boring Python Office Talk - Automate Powerpoint, Excel, and PDF with Python</title><link>https://pyvideo.org/europython-2018/the-boring-python-office-talk-automate-powerpoint-excel-and-pdf-with-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;We will have a quick tour of the many ways Python gives us to handle
DOCX, XLSX, PPTX, and PDF and automate some boring office tasks.&lt;/p&gt;
&lt;p&gt;Many things are more interesting than office file formats like DOCX,
XLSX, PPTX, and PDF. Still, while working with office formats does not
seem to be the most fun, it is useful. But we can do better than just
useful. With the Python and some great libraries, it is possible to have
Python do much of the work you would have to do otherwise:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Create and modify PDF files.&lt;/li&gt;
&lt;li&gt;Create Powerpoints presentations from scripts.&lt;/li&gt;
&lt;li&gt;Create Excel files, from simple tables to charts and reports.&lt;/li&gt;
&lt;li&gt;Combine information in Word documents.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In this talk, we will have a look at a usual working day for Bob and
Ann, two fictional office works. Both Bob and Ann work office jobs, but
while Bob does all of his work by hand, but Ann knows Python. We will
look at different tasks that Bob wants to do, such as preparing an Excel
report, building a Powerpoint presentation, or rearranging a PDF. Then,
we will look how Ann use Python and some exciting libraries to automate
these task.&lt;/p&gt;
&lt;p&gt;During the talk, we will use Bob and Ann to consider different task
related to office file formats. We will then look at the Python
libraries that are available. Then, using this library, we will see how
an otherwise boring task can be automated. The goal of the task is to
showcase the libraries to Python offers to work with standard office
formats and provide you with a starting point for your own office
automation.&lt;/p&gt;
&lt;p&gt;After this talk, you will know how to automate at least some of your
daily office tasks. You may also be bored because Python is doing so
much of your work for you. If you know basic Python programming, you
will be right at home. There will be some use of Pandas, but it is not
required.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Stefan Baerisch</dc:creator><pubDate>Fri, 27 Jul 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-07-27:europython-2018/the-boring-python-office-talk-automate-powerpoint-excel-and-pdf-with-python.html</guid></item><item><title>A Deep Look at Logging</title><link>https://pyvideo.org/europython-2015/a-deep-look-at-logging.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Stefan Baerisch - A Deep Look at Logging
[EuroPython 2015]
[21 July 2015]
[Bilbao, Euskadi, Spain]&lt;/p&gt;
&lt;p&gt;Do you know what your application did last night? Python logging can help you.&lt;/p&gt;
&lt;p&gt;This talk you will show you how to implement a systematic logging
approach without boilerplate code and how to set up the Python logging
module for different needs in production systems.  We will see how to
work with log files and other logging endpoints.  We will address the
data protection concerns that come up when logging  from application
with personal  information. We will also look at the performance
implications of logging. We will then cover best practices - how to
structure logging, what to include in a log message, and how to
configure logging for different use cases.&lt;/p&gt;
&lt;p&gt;We will use the Python standard logging module to implement logging.
This talk is useful to beginners with some experience.  An
understanding of decorators is useful, but not required.  Some
experience in web programming is a plus.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Stefan Baerisch</dc:creator><pubDate>Sun, 02 Aug 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-08-02:europython-2015/a-deep-look-at-logging.html</guid></item></channel></rss>