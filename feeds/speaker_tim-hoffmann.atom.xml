<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_tim-hoffmann.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2019-10-10T00:00:00+00:00</updated><entry><title>Break your API gently - or not at all</title><link href="https://pyvideo.org/pycon-de-2019/break-your-api-gently-or-not-at-all.html" rel="alternate"></link><published>2019-10-10T00:00:00+00:00</published><updated>2019-10-10T00:00:00+00:00</updated><author><name>Tim Hoffmann</name></author><id>tag:pyvideo.org,2019-10-10:pycon-de-2019/break-your-api-gently-or-not-at-all.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Speaker: Tim Hoffmann&lt;/p&gt;
&lt;p&gt;Track:PyConDE
As hard as we try to write good code, there will always be cases in which we wish we had designed a different function signature, chosen another attribute name, ... But you can't change it anymore because it's public API - or can you?&lt;/p&gt;
&lt;p&gt;Recorded at the PyConDE &amp;amp; PyData Berlin 2019 conference.
&lt;a class="reference external" href="https://pycon.de"&gt;https://pycon.de&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;More details at the conference page: &lt;a class="reference external" href="https://de.pycon.org/program/QXB8DR"&gt;https://de.pycon.org/program/QXB8DR&lt;/a&gt;
Twitter:  &lt;a class="reference external" href="https://twitter.com/pydataberlin"&gt;https://twitter.com/pydataberlin&lt;/a&gt;
Twitter:  &lt;a class="reference external" href="https://twitter.com/pyconde"&gt;https://twitter.com/pyconde&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Enabling the chip technologies of tomorrow â€“ how Python helps us</title><link href="https://pyvideo.org/pycon-de-2018/enabling-the-chip-technologies-of-tomorrow-how-python-helps-us.html" rel="alternate"></link><published>2018-10-26T00:00:00+00:00</published><updated>2018-10-26T00:00:00+00:00</updated><author><name>Tim Hoffmann</name></author><id>tag:pyvideo.org,2018-10-26:pycon-de-2018/enabling-the-chip-technologies-of-tomorrow-how-python-helps-us.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Carl Zeiss SMT GmbH is the leading manufacturer of lithography optics.
Our optics allow chipmakers to produce smaller, faster and more energy
efficient computer chips. As we move to smaller and smaller structures,
the necessary optics grow more and more complex. Customized simulations
and data analytics by highly qualified technical domain experts are
essential. These people are not experienced software developers.
However, with Python and the right support, we can give them powerful
tools to accomplish their task efficiently.&lt;/p&gt;
&lt;p&gt;Pioneering Python in a larger enterprise can be challenging. At present,
we use Python in selected areas of our product development and
production processes. We'd like to share our challenges and solutions
with using Python in a heterogeneous company environment. In particular,
how can we make Python accessible to non-programmers? How do we ensure
consistent development? How do we embed in the non-Python ecosystem of
the company?&lt;/p&gt;
</summary><category term="Data Science"></category></entry></feed>