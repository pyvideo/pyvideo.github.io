<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org - Samuel Oranyeli</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_samuel-oranyeli.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2023-12-16T00:00:00+00:00</updated><subtitle></subtitle><entry><title>Extracting data from Excel with Python</title><link href="https://pyvideo.org/pycon-au-2020/extracting-data-from-excel-with-python.html" rel="alternate"></link><published>2020-09-06T00:00:00+00:00</published><updated>2020-09-06T00:00:00+00:00</updated><author><name>samuel oranyeli</name></author><id>tag:pyvideo.org,2020-09-06:/pycon-au-2020/extracting-data-from-excel-with-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;samuel oranyeli&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://2020.pycon.org.au/program/FAEAH3"&gt;https://2020.pycon.org.au/program/FAEAH3&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;How do you read data from Excel? How do you read data that has meaningful formats(rows or cells are colour coded)? Or pivot tables that need to be in tidy format? Or data with hierarchical formatting ? This talk will …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;samuel oranyeli&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://2020.pycon.org.au/program/FAEAH3"&gt;https://2020.pycon.org.au/program/FAEAH3&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;How do you read data from Excel? How do you read data that has meaningful formats(rows or cells are colour coded)? Or pivot tables that need to be in tidy format? Or data with hierarchical formatting ? This talk will show how to use Pandas, Openpyxl, and some other make-life-easy tools to extract data from Excel into Python in a tidy form and proceed to the next phase of our data analysis.&lt;/p&gt;
&lt;p&gt;Produced by NDV: &lt;a class="reference external" href="https://youtube.com/channel/UCQ7dFBzZGlBvtU2hCecsBBg?sub_confirmation=1"&gt;https://youtube.com/channel/UCQ7dFBzZGlBvtU2hCecsBBg?sub_confirmation=1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Python, PyCon, PyConAU, PyConline&lt;/p&gt;
&lt;p&gt;Fri Sep  4 13:20:00 2020 at Curlyboi&lt;/p&gt;
</content><category term="PyCon AU 2020"></category><category term="PyCon"></category><category term="PyConAU"></category><category term="PyConline"></category><category term="Python"></category><category term="pyconau"></category><category term="pyconau_2020"></category><category term="samueloranyeli"></category></entry><entry><title>Inequality Joins in Pandas with Pyjanitor</title><link href="https://pyvideo.org/pyohio-2023/inequality-joins-in-pandas-with-pyjanitor.html" rel="alternate"></link><published>2023-12-16T00:00:00+00:00</published><updated>2023-12-16T00:00:00+00:00</updated><author><name>Samuel Oranyeli</name></author><id>tag:pyvideo.org,2023-12-16:/pyohio-2023/inequality-joins-in-pandas-with-pyjanitor.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Joins in Pandas are equality based. However, there are other scenarios
that require joins on inequality or a combination of equi and non-equi
joins. Examples include a manufacturer wishing to minimise the cost of
storage while maximising profits (increasing the inventory of the more
profitable product, while decreasing the …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Joins in Pandas are equality based. However, there are other scenarios
that require joins on inequality or a combination of equi and non-equi
joins. Examples include a manufacturer wishing to minimise the cost of
storage while maximising profits (increasing the inventory of the more
profitable product, while decreasing the storage for the less profitable
product), or a tax audit to find out which employers earn more, but pay
less tax. Usually in Pandas this is executed via a Cartesian join which
can be inefficient as well as memory intensive. Another option is via an
Interval index; however efficient execution depends on non overlapping
intervals. There is also pandas.merge_asof - however it is limited to
just first,last or nearest matches.&lt;/p&gt;
&lt;p&gt;This talk shows an efficient way to handle inequality joins in Pandas.
It also shows benchmarks that shows significant performance benefits as
well as lower memory usage compared to Cartesian joins.&lt;/p&gt;
</content><category term="PyOhio 2023"></category></entry></feed>