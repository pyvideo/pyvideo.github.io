<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Sat, 06 Oct 2018 00:00:00 +0000</lastBuildDate><item><title>A Practical Guide to Adopting Python Types</title><link>https://pyvideo.org/pygotham-2018/a-practical-guide-to-adopting-python-types.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Types in Python make it easier to understand how code works and helps catch bugs before they affect users, but require a significant upfront investment.  At first when a team embarks on adding types to an existing codebase, they frankly don't have a ton of value, because there's nothing to typecheck against other than typeshed, and if it's a well-tested codebase that already has users it likely doesn't have many glaring issues.  Eventually the codebase will have a critical mass of types where adding types is a no-brainer - everything else is typed so by adding a few annotations in the type signature helps ensure your code is correct.&lt;/p&gt;
&lt;p&gt;This talk will go over the basics of types in Python, the current ecosystem, and then go into detail on how teams can quickly type large chunks of their codebase using pyannotate - a tool that can be used to observe types from running code and apply those types to a codebase.  We'll also go over how to integrate types into CI to ensure the codebase remains safely typed.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Roy Williams</dc:creator><pubDate>Sat, 06 Oct 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-10-06:pygotham-2018/a-practical-guide-to-adopting-python-types.html</guid></item><item><title>Beating Mastermind: Winning Games, Translating Math to Code, and Learning from Donald Knuth</title><link>https://pyvideo.org/pygotham-2018/beating-mastermind-winning-games-translating-math-to-code-and-learning-from-donald-knuth.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Come learn how to solve logic games with Python! Also, in the process, learn about minimax algorithms and how to turn papers into code. This is a skill some people learn in school, but I had to teach myself -- I don't have a degree in computer science. There are so many problems out there that are &amp;quot;solved&amp;quot; but don't have an easy-to-use, open source library. This talk with help you bridge that gap, both for fun and for work. I've always found playing with code to be the best way to learn, so the example I'll use here is a game called Mastermind that I played as a child. To make it even more interesting, the paper giving a solution to the game was written by Donald Knuth -- the &amp;quot;father of analysis of algorithms&amp;quot; and author of &amp;quot;The Art of Computer Science&amp;quot;, one of the great reference books of CS. I'll start by describing the game and walking through the paper, then talk about how to turn the prose and mathematical notation into code. By the end, you'll feel more comfortable doing the same, understand minimax algorithms, and never lose at Mastermind again.&lt;/p&gt;
&lt;p&gt;This talk will be accessible to programmers at all levels. The slides are mostly graphics and diagrams, with some simple Python code and excerpts from the [referenced paper](&lt;a class="reference external" href="http://www.cs.uni.edu/~wallingf/teaching/cs3530/resources/knuth-mastermind.pdf"&gt;http://www.cs.uni.edu/~wallingf/teaching/cs3530/resources/knuth-mastermind.pdf&lt;/a&gt;).&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Adam Forsyth</dc:creator><pubDate>Sat, 06 Oct 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-10-06:pygotham-2018/beating-mastermind-winning-games-translating-math-to-code-and-learning-from-donald-knuth.html</guid></item><item><title>Building a Read Aloud eBook in Python</title><link>https://pyvideo.org/pygotham-2018/building-a-read-aloud-ebook-in-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This is a project by Binod Gyawali, Beata Beigman Klebanov, and Anastassia Loukina.&lt;/p&gt;
&lt;p&gt;Nowadays books are increasingly consumed not only through reading but also through listening. But what does it take to create an eBook where the reader can switch between the two modalities? In this talk we describe how Python can be used to apply NLP and speech processing technologies to combine an existing eBook in EPUB format and an audio book into a single Read Aloud book. The system we developed uses Python libraries to read the EPUB file contents, NLP methods to process the content, open-sourced speech processing tools (Kaldi-based forced alignment) to align the audio files with the eBook content, and finally creates a Read Aloud book using the alignment information, EPUB content, and the audio files. We use the ebooklib Python library (with some updates to add Read Aloud EPUB generation functionality) to generate the final Read Aloud book.&lt;/p&gt;
&lt;p&gt;We'll conclude with a demonstration of a Read Aloud eBook and showcase an educational application which uses such a book. In this application a student alternates between listening to audiobook and reading aloud. During listening, the text of the book is highlighted along with the audio playback to help students follow along with the narration and maintain focus.&lt;/p&gt;
&lt;p&gt;The talk will be an informative talk with no coding involved.  We will discuss the system to generate the Read Aloud eBook, show the demo of the book and discuss the challenges that we faced in the process. The targeted audience will be beginner level. Though we do not require the audience to have any prior understanding of eBook structure or forced alignment, familiarity with these would be an advantage.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Max Schwartz</dc:creator><pubDate>Sat, 06 Oct 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-10-06:pygotham-2018/building-a-read-aloud-ebook-in-python.html</guid></item><item><title>Coding by Voice with Dragonfly</title><link>https://pyvideo.org/pygotham-2018/coding-by-voice-with-dragonfly.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In 2013, Travis Rudd showed the world that coding by voice is a reality, saving himself and other developers from RSI and other related injuries. Unfortunately, setting up a voice code environment is more than trivial. It requires several components layered on top of each other, and the building of your own voice grammar. In addition, since a standard for doing this has not yet emerged, the vast majority of people end up reinventing the wheel. With so many new voice powered applications coming out, we are on the cusp of a game-changing way to code.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In this talk, you'll learn about:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;What voice recognition software to choose, and the limited options available&lt;/li&gt;
&lt;li&gt;Natlink - the piece of software that makes all of this possible&lt;/li&gt;
&lt;li&gt;Dragonfly - A python package that allows for building 'grammars'&lt;/li&gt;
&lt;li&gt;Best practices for building these grammars, and other useful tips&lt;/li&gt;
&lt;li&gt;What the future of voice coding looks like&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;I will also do a small demo by writing a piece of code entirely by voice.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Boudewijn Aasman</dc:creator><pubDate>Sat, 06 Oct 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-10-06:pygotham-2018/coding-by-voice-with-dragonfly.html</guid></item><item><title>Computer Modeling in the Social Science of Disasters</title><link>https://pyvideo.org/pygotham-2018/computer-modeling-in-the-social-science-of-disasters.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Computer modeling of exactly what happens during a disaster isn't just a cool way to understand things and make better disaster movies - it saves lives. And getting a social scientist involved means that it will be more accurate, because panic and perfectly rational behavior are both myths. Learn about disaster myths, exactly how social science can be used in disaster modeling, how it's being used now, and why having more software developers involved would be great for everyone.&lt;/p&gt;
&lt;p&gt;After this talk, you should have some ideas about the ways programming and social science are working together to make the future both more exciting and more predictable - and maybe ideas for a project of your own. There will be a somewhat long question period because of the subject matter.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Eileen Young</dc:creator><pubDate>Sat, 06 Oct 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-10-06:pygotham-2018/computer-modeling-in-the-social-science-of-disasters.html</guid></item><item><title>Creating a DVR with Python</title><link>https://pyvideo.org/pygotham-2018/creating-a-dvr-with-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;If you're living with multiple people, most likely the discussion about having which shows taking up space on the DVR can cause some chaos. In this talk, learn how the BattDVR project can solve this problem through the integration of multiple concepts and libraries.&lt;/p&gt;
&lt;p&gt;Some of the points that will be covered:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Factory Design Pattern&lt;/li&gt;
&lt;li&gt;Web Scraping&lt;/li&gt;
&lt;li&gt;Metadata collection via APIs&lt;/li&gt;
&lt;li&gt;Object Oriented Design and Inheritance&lt;/li&gt;
&lt;li&gt;Storing project preferences locally&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michael V. Battista</dc:creator><pubDate>Sat, 06 Oct 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-10-06:pygotham-2018/creating-a-dvr-with-python.html</guid></item><item><title>Customizing Sphinx: Simple, Normal, and Hard</title><link>https://pyvideo.org/pygotham-2018/customizing-sphinx-simple-normal-and-hard.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Many Python projects use Sphinx for documentation, so much so that Sphinx is like Python’s secret weapon. It’s a powerful, mature system for generating static content -- not just docs, but blogs and regular websites.&lt;/p&gt;
&lt;p&gt;Sphinx can also be customized and extended in various ways, and here the trip gets wild and wooly. With such a venerable software stack, Sphinx can be inscrutable when you paint outside the lines.&lt;/p&gt;
&lt;p&gt;This talk gives Sphinx civilians confidence to go beyond simply using Sphinx, towards adapting Sphinx to their needs: configuration values, local CSS and templates, installing extensions and themes, writing a small extension with a directive, and testing that extension. We’ll conclude with a roundup of challenges and benefits that come with diving into Sphinx.&lt;/p&gt;
&lt;p&gt;As the talk provides shallow treatment of a wide topic list, follow-up and hands-on instruction will be given at an open space.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Paul Everitt</dc:creator><pubDate>Sat, 06 Oct 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-10-06:pygotham-2018/customizing-sphinx-simple-normal-and-hard.html</guid></item><item><title>Dataclasses are here. Now what?</title><link>https://pyvideo.org/pygotham-2018/dataclasses-are-here-now-what.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The PEP 557 dataclasses module is one of the new features added in Python 3.7 and are a decorator which generates the boiler-plate code needed by a data container class. In addition to providing access to stored data values by name, they provide a easy mechanism for including additional features such as default values and customized ordering.&lt;/p&gt;
&lt;p&gt;In this talk we will explore dataclasses from a data container perspective by asking several questions.
- How should one use dataclasses?
- What functionality do dataclasses provide?
- How do these features compare to existing data structures in the standard library like NamedTuple, and dict?
- What about the third-party package attrs?
- What are some additional features of dataclasses?
- When might one want to use dataclasses?&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Scott Irwin</dc:creator><pubDate>Sat, 06 Oct 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-10-06:pygotham-2018/dataclasses-are-here-now-what.html</guid></item><item><title>From Coroutines to Concurrency</title><link>https://pyvideo.org/pygotham-2018/from-coroutines-to-concurrency.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Asyncio and gevent are powerful libraries for lightweight concurrency. Most of the core functionality of both can be built with great simplicity and clarity from plain coroutines, supplemented by elementary components of the Python 3.6 standard library (e.g. socket &amp;amp; queue). Building concurrency primitives from these raw materials is entertaining as an intellectual exercise, but also excellent in demystifying the aync tools which are all-too-often treated as magic.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Vishal Prasad</dc:creator><pubDate>Sat, 06 Oct 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-10-06:pygotham-2018/from-coroutines-to-concurrency.html</guid></item><item><title>How I Learned to Stop Worrying and Love atomic(): Banking Blunders and Concurrency Challenges</title><link>https://pyvideo.org/pygotham-2018/how-i-learned-to-stop-worrying-and-love-atomic-banking-blunders-and-concurrency-challenges.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Did you know every Django app already behaves like a distributed system, even when it's running only on one server?
In this talk I'll go over some of the distributed systems &amp;amp; database fundamentals that you'll neeed to understand when
building a Python project that handles sensitive data.  We'll focus on intermediate and advanced usage of the
Django ORM, but many of the concepts apply equally well to SQLAlchemy and other Python ORMs.&lt;/p&gt;
&lt;p&gt;We'll go over:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;how to use append-only logs to order events across your system&lt;/li&gt;
&lt;li&gt;the meaning of transaction isolation levels&lt;/li&gt;
&lt;li&gt;how and when to use atomic compare-and-swap operations&lt;/li&gt;
&lt;li&gt;type safety for currencies&lt;/li&gt;
&lt;li&gt;new distributed-SQL databases like spanner, TiDB, and Cockroachdb&lt;/li&gt;
&lt;li&gt;transaction lifecycles when doing async processing with django-channels&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;We spent the last two years building an online poker engine based on Django + channels, and we have plenty of stories about our failures and discoveries to share along the way.
Come learn about all the ways it's possible to screw up when handling sensitive data, and how to avoid them!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nick Sweeting</dc:creator><pubDate>Sat, 06 Oct 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-10-06:pygotham-2018/how-i-learned-to-stop-worrying-and-love-atomic-banking-blunders-and-concurrency-challenges.html</guid></item><item><title>How to Do Code Reviews Like a Human</title><link>https://pyvideo.org/pygotham-2018/how-to-do-code-reviews-like-a-human.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Are code reviews a source of tension on your team? Do they lead to
conflict, bikeshedding, or wasted time?&lt;/p&gt;
&lt;p&gt;Most of the discussion we hear about code reviews is technical. We focus
myopically on minimizing cost and maximizing bug discoveries. But reviews
are as much a social exercise as a technical one. They’re an opportunity for
teammates to share knowledge and bond through collaboration. That can’t
happen if people are strangling each other over where to place the curly
braces.&lt;/p&gt;
&lt;p&gt;In this talk, you’ll learn practical techniques your team can use to improve
communication and minimize conflict during code reviews. I’ll talk about:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Reducing human effort of reviews through automation&lt;/li&gt;
&lt;li&gt;Increasing your team’s review velocity&lt;/li&gt;
&lt;li&gt;Giving sincere praise&lt;/li&gt;
&lt;li&gt;Framing discussions for constructive debate&lt;/li&gt;
&lt;li&gt;Mitigating stalemates&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michael Lynch</dc:creator><pubDate>Sat, 06 Oct 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-10-06:pygotham-2018/how-to-do-code-reviews-like-a-human.html</guid></item><item><title>Inside the Cheeseshop: How Python Packaging Works</title><link>https://pyvideo.org/pygotham-2018/inside-the-cheeseshop-how-python-packaging-works.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Questions and confusion about the Python packaging ecosystem abound. What is
this &lt;cite&gt;setup.py&lt;/cite&gt; file? What’s the difference between wheels and eggs? Do I use
setuptools or distutils? Why should I use twine? Do I put my projects
dependencies in a &lt;cite&gt;requirements.txt&lt;/cite&gt; or in &lt;cite&gt;setup.py&lt;/cite&gt;? How do I just get my
module up on PyPI? Wait, what is Warehouse?&lt;/p&gt;
&lt;p&gt;This talk will identify the key tools one might encounter when trying to
distribute Python software, what they are used for, why they exist, and
their history (including where their weird names come from). In addition,
we’ll see how they all work together, what it takes to make them work, and
what the future has in store for Python packaging.&lt;/p&gt;
&lt;p&gt;## Who and Why&lt;/p&gt;
&lt;p&gt;This talk is for any Pythonista that has been confused by Python Packaging
(read: everyone).&lt;/p&gt;
&lt;p&gt;This talk requires that the audience has just the slightest familiarity with
how Python Packaging works – that you need to upload your source code, that
there are a few popular and familiar tools, and that they are all a little
confusing. Attendees do not need to be publishers of Python Packages but
likely will be people interested in publishing someday.&lt;/p&gt;
&lt;p&gt;After watching this talk, attendees should have a significant amount of
their confusion about the Python packaging ecosystem resolved, and should be
able to make informed, reasonable decisions when they want to publish a
package (without having to be told step by step instructions, or given
extremely opinionated advice).&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dustin Ingram</dc:creator><pubDate>Sat, 06 Oct 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-10-06:pygotham-2018/inside-the-cheeseshop-how-python-packaging-works.html</guid></item><item><title>Large Scale Graph Mining with Spark: What I learned from mapping &gt;15 million websites</title><link>https://pyvideo.org/pygotham-2018/large-scale-graph-mining-with-spark-what-i-learned-from-mapping-15-million-websites.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;As the web grows ever larger and more content-rich, graph analysis may be one of the most powerful tools for unlocking insights within the mythical big data. That's totally not fluff, because WIRED wrote about it (&lt;a class="reference external" href="https://www.wired.com/insights/2014/03/graph-theory-key-understanding-big-data/"&gt;https://www.wired.com/insights/2014/03/graph-theory-key-understanding-big-data/&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;This talk relates to ongoing research into large-scale graph mining, and to find insights into how different websites interact with each other (sometimes in surprising ways!). Spark GraphFrames was integral to exploring the enormous Common Crawl dataset, and the data size really pushed the tool to its limits. Along the way, I learned a great deal about optimizations in representing and computing graphs.&lt;/p&gt;
&lt;p&gt;We'll talk about:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Why graphs are so fascinating and the types of problems they can help solve&lt;/li&gt;
&lt;li&gt;How Spark GraphFrames work under the hood.&lt;/li&gt;
&lt;li&gt;How to find clusters of interest in your graph.&lt;/li&gt;
&lt;li&gt;Tips that may help you in your journey (hint: you're only as good as your data structure).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And much more! Github repo with all code will also be shared.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Win Suen</dc:creator><pubDate>Sat, 06 Oct 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-10-06:pygotham-2018/large-scale-graph-mining-with-spark-what-i-learned-from-mapping-15-million-websites.html</guid></item><item><title>Memory Management in Python</title><link>https://pyvideo.org/pygotham-2018/memory-management-in-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Do you understand how Python works under the hood? Can you explain the following?&lt;/p&gt;
&lt;p&gt;Why does &lt;cite&gt;a is b&lt;/cite&gt; evaluate to &lt;cite&gt;True&lt;/cite&gt; when both variables have a value of 201? Why does the statement evaluate to` False` if they both have a value of 498?
When will Python still hold a reference to an object that has been deleted?
How does Python collect garbage and is it any different from other languages like Ruby?&lt;/p&gt;
&lt;p&gt;Learn the answers to these questions and better understand concepts like interning, reference counting, reference cycles, and generational garbage collection in this talk.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Theresa Lee</dc:creator><pubDate>Sat, 06 Oct 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-10-06:pygotham-2018/memory-management-in-python.html</guid></item><item><title>Open Source Policy Making - Challenges and Opportunities</title><link>https://pyvideo.org/pygotham-2018/open-source-policy-making-challenges-and-opportunities.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Policy analysis typically follows a simple pattern: legislation is proposed, think tanks and government agencies produce an analysis of the bill, and then journalists and pundits debate its merits using numbers whose source is opaque at best. This approach opens the door for otherwise sound analysis to be dismissed by those how don’t line the findings or for actual flaws to go unnoticed. But lately there has been some movement toward more open policy analysis which has increased both its rigor and potential to be communicated effectively. This talk will layout the problems with a black-box approach to policy analysis, projects and initiatives aimed at cracking said black-box, and some of the complications that come with moving toward open source.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Anderson Frailey</dc:creator><pubDate>Sat, 06 Oct 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-10-06:pygotham-2018/open-source-policy-making-challenges-and-opportunities.html</guid></item><item><title>Python Grab Bag: A Set of Short Plays</title><link>https://pyvideo.org/pygotham-2018/python-grab-bag-a-set-of-short-plays.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A frenetic combination of educational and entertaining segments, as chosen
by the audience! In between segments, audience members will shout out
numbers from a menu, and we’ll perform the selected segment: it may be a
short monologue, it may be a play, it may be a physical demo, or it may be a
tiny traditional conference talk.&lt;/p&gt;
&lt;p&gt;Audience members should walk away with some additional understanding of the
history of Python, knowledge of some tools and libraries available in the
Python ecosystem, and some Python-related amusement.&lt;/p&gt;
&lt;p&gt;This talk is inspired by [the Neo-Futurists’ Infinite
Wrench](&lt;a class="reference external" href="http://www.nyneofuturists.org/"&gt;http://www.nyneofuturists.org/&lt;/a&gt;), a creative and energetic piece of
theater.&lt;/p&gt;
&lt;p&gt;The audience can select from these plays:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;The Unvarnished Truth&lt;/li&gt;
&lt;li&gt;&amp;lt;tt&amp;gt;from import import import&amp;lt;/tt&amp;gt;&lt;/li&gt;
&lt;li&gt;WHAT'S the DEAL with CLIENTS?&lt;/li&gt;
&lt;li&gt;A Play Entirely Full of Monty Python References&lt;/li&gt;
&lt;li&gt;A Proposal for Explaining PEPs&lt;/li&gt;
&lt;li&gt;GNU Mailman: A Pythonic Playlist&lt;/li&gt;
&lt;li&gt;Soup, Scrape, Sweep&lt;/li&gt;
&lt;li&gt;Generators: Taste the Freshness&lt;/li&gt;
&lt;li&gt;This Is How We Do It&lt;/li&gt;
&lt;li&gt;Cookie For Your Thoughts&lt;/li&gt;
&lt;li&gt;If Shakespeare Wrote Incident Reports&lt;/li&gt;
&lt;li&gt;Code Review: Fast Forward and Back&lt;/li&gt;
&lt;li&gt;When The Old Was New&lt;/li&gt;
&lt;li&gt;Things We Don't Say At The Daily Standup Meeting&lt;/li&gt;
&lt;li&gt;The Relief of Reuse (The Colorful &amp;lt;tt&amp;gt;argparse&amp;lt;/tt&amp;gt; Play)&lt;/li&gt;
&lt;li&gt;Be A Better Bureaucrat (The Intellectual &amp;lt;tt&amp;gt;argparse&amp;lt;/tt&amp;gt; Play)&lt;/li&gt;
&lt;li&gt;Speaking Python&lt;/li&gt;
&lt;li&gt;The End (Of 2.7) Is Near (feat. Jason as Guido van Rossum)&lt;/li&gt;
&lt;/ol&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jason Owen</dc:creator><pubDate>Sat, 06 Oct 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-10-06:pygotham-2018/python-grab-bag-a-set-of-short-plays.html</guid></item><item><title>Scale Independent Python: How to scale your Python application without any code changes</title><link>https://pyvideo.org/pygotham-2018/scale-independent-python-how-to-scale-your-python-application-without-any-code-changes.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Scaling applications is hard. Our typical approaches all come with tradeoffs that we wish we didn't have to make. There is a better way, scale-independent computing. Based on ideas from Pat Helland's paper &amp;quot;Beyond Distributed Transactions,&amp;quot; scale-independent computing allows application developers to write their code without regard to scale and then run it on a scale-aware platform. The idea is relatively simple, the code you write should be able to run across any number of Python processes without you having to change any of your code. During this talk, you'll learn the core ideas of scale-independence and see an example scale-independent application in action.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sean T Allen</dc:creator><pubDate>Sat, 06 Oct 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-10-06:pygotham-2018/scale-independent-python-how-to-scale-your-python-application-without-any-code-changes.html</guid></item><item><title>Serverless machine learning in production: manage models, not servers</title><link>https://pyvideo.org/pygotham-2018/serverless-machine-learning-in-production-manage-models-not-servers.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Putting machine learning models into production is difficult. It’s especially hard to do for a team that isn’t cross-function and doesn’t have strong ops or software engineering support. At Distil we used severless technology to deploy a Python-based machine learning system that let data scientists rapidly put models they trained into production for detecting automated threats on websites. This talk will discuss how we rapidly built this pipeline, what we learned and what we’d do differently in the future. We make hundreds of predictions per second and stream the results to hundreds of machines all without having to manage any machines or hardware.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">William Cox</dc:creator><pubDate>Sat, 06 Oct 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-10-06:pygotham-2018/serverless-machine-learning-in-production-manage-models-not-servers.html</guid></item><item><title>Seventeen Million Lines of Python Later: Launching a Startup in an Investment Bank</title><link>https://pyvideo.org/pygotham-2018/seventeen-million-lines-of-python-later-launching-a-startup-in-an-investment-bank.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In the wake of the 2008 financial crisis, Bank of America Merrill Lynch embarked on an ambitious plan to realign its sales and trading systems around the Python-based Quartz platform.  More than half way through this journey, we have millions of lines of Python under our belt and major business deliverables behind us.  This talk will cover the unique benefits and challenges of using Python at investment bank-scale, and how to make a startup initiative stick in the face of unrelenting impediments.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Garrett Walker</dc:creator><pubDate>Sat, 06 Oct 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-10-06:pygotham-2018/seventeen-million-lines-of-python-later-launching-a-startup-in-an-investment-bank.html</guid></item><item><title>The Automatic Computer and You: A Meditation Upon The History And Future Of Software Development</title><link>https://pyvideo.org/pygotham-2018/the-automatic-computer-and-you-a-meditation-upon-the-history-and-future-of-software-development.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;As members of the Python community, we all believe that computers have the
_potential_ to do great things.&lt;/p&gt;
&lt;p&gt;But are the things we're doing with computers, overall, _actually_ great?
What is the _purpose_ of computers?  Why do we build software for them?  How
can we do it better?  And: should we be making anything other than video
games?&lt;/p&gt;
&lt;p&gt;In this talk, Glyph will answer those questions, and more; some of his
proposed answers might surprise you.  He will present extensive digressions
on the history of the craft and industry of software development, the impact
that recent events have had on the course of that history, and he will
contemplate new directions which might lead toward a brighter tomorrow.
Along the way, he will consider what lessons we might learn from the
progression of other, similar fields, such as medieval church architecture
and nuclear power generation.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Glyph</dc:creator><pubDate>Sat, 06 Oct 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-10-06:pygotham-2018/the-automatic-computer-and-you-a-meditation-upon-the-history-and-future-of-software-development.html</guid></item><item><title>The stories of the most infamous bugs</title><link>https://pyvideo.org/pygotham-2018/the-stories-of-the-most-infamous-bugs.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Whenever we write code we eventually make mistakes and have “bugs”. We employ many techniques including testing and reviews to avoid them but some mistakes still make it into production.&lt;/p&gt;
&lt;p&gt;The topic of famous bugs in history has intrigued me for a very long time and it is a subject I enjoy researching.
In this talk we will explore 5 of the most famous bugs, their consequences and what we can learn from them:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Why the Mars climate orbiter did not orbit&lt;/li&gt;
&lt;li&gt;How the Ariane-5 rocket was lost&lt;/li&gt;
&lt;li&gt;Waiting for the long distance AT&amp;amp;T call&lt;/li&gt;
&lt;li&gt;How the world didn’t end in September 1983&lt;/li&gt;
&lt;li&gt;The fatal Patriot missile miscalculation&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ian Zelikman</dc:creator><pubDate>Sat, 06 Oct 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-10-06:pygotham-2018/the-stories-of-the-most-infamous-bugs.html</guid></item><item><title>The Sum of Nothing</title><link>https://pyvideo.org/pygotham-2018/the-sum-of-nothing.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The [release](&lt;a class="reference external" href="https://pandas.pydata.org/pandas-docs/stable/whatsnew.html#v0-22-0-december-29-2017"&gt;https://pandas.pydata.org/pandas-docs/stable/whatsnew.html#v0-22-0-december-29-2017&lt;/a&gt;) of pandas version 0.22.0 in December 2017 introduced several major changes. As someone who works with missing data quite a lot, I was particularly confused and somewhat dismayed by its &amp;quot;new&amp;quot; treatment of NaNs (&amp;quot;null values&amp;quot;). Specifically:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;the sum of a series of NaNs was now 0&lt;/li&gt;
&lt;li&gt;the product of a series of NaNs was now 1&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the previous version, these values were NaN, which I thought was the &amp;quot;right&amp;quot; way to do things. After all, how can the sum (or product) of nothing turn into something? I went on a journey (or maybe the proper term is &amp;quot;rabbit hole&amp;quot; to explore this question, going through historical GitHub issues logs, pandas-dev mailing list messages, even contacting a core pandas developer and looking up how other programming languages like R handled the same issue.&lt;/p&gt;
&lt;p&gt;I learned that really, it all just comes down to math.&lt;/p&gt;
&lt;p&gt;In this talk, I'll make the case that while the current behavior is &lt;em&gt;mathematically&lt;/em&gt; consistent, it is often counterintuitive. Because who says math is supposed to make sense at first glance?&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Christine Zhang</dc:creator><pubDate>Sat, 06 Oct 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-10-06:pygotham-2018/the-sum-of-nothing.html</guid></item><item><title>Vodka powered by Whiskeyberry PI</title><link>https://pyvideo.org/pygotham-2018/vodka-powered-by-whiskeyberry-pi.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Would you like to talk with someone but even your dog doesn’t want to listen to you? Would you love to have a drink but you are too tired to prepare one? Your problems are solved! During this presentation, you will find out how to build your own Bartender who talks with you and what is the most important serves drinks for you! All that you need is Amazon Alexa, simple Python Flask application, Raspberry PI and few pumps. I will go through all the steps starting from the creation of Bartender service with Amazon Alexa, development of Flask application with Bartender logic, deployment on Raspberry PI and connection with pumps. In the end, the most active participants will be allowed to talk with Bartender and ask for drinks prepared from local whiskey!&lt;/p&gt;
&lt;p&gt;First, I will briefly introduce an audience with existing voice assistants and explain why I choose Amazon Alexa to build Bartender. Base on examples I will show what is the flow of requests and responses using selected assistant. I will say how it can be used for the purpose of this great project! I will briefly guide the audience through the process of creating Bartender skill in Amazon Alexa.&lt;/p&gt;
&lt;p&gt;Next, I will tell how to build a Python application for serving the drinks. I will show example source code using Flask-Ask library which wraps Amazon API and makes life easier. With only a few lines of code we will create full-value Bartender.&lt;/p&gt;
&lt;p&gt;Last but not least part of my presentation will be dedicated to Raspberry PI which is responsible for serving the ingredients of drinks. I will explain how to connect and control the pumps. I will show example source code for serving the drinks according to defined recipes.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Maciej Polańczyk</dc:creator><pubDate>Sat, 06 Oct 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-10-06:pygotham-2018/vodka-powered-by-whiskeyberry-pi.html</guid></item><item><title>We Are 3000 Years Behind: Let's Talk About Engineering Ethics</title><link>https://pyvideo.org/pygotham-2018/we-are-3000-years-behind-lets-talk-about-engineering-ethics.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Your apartment building where you wake up.
The water you drink.
The car you drive.
The road on which you drive.&lt;/p&gt;
&lt;p&gt;In the first hour of your day, you rely on the work of several distinct branches of engineering, whose practitioners are licensed and accountable to the public.&lt;/p&gt;
&lt;p&gt;In the second hour of your day, you may sit down at your desk to write code that dozens, hundreds, thousands, millions of people interact with in some way--but what do they know about you, your intentions, and your training?&lt;/p&gt;
&lt;p&gt;A licensed Civil Engineer turned software developer will talk through how her former field approached ethics--something they have been iterating on for more than 3000 years. She will discuss how lessons learned from other engineering professions could apply to software, and where our industry may need a new approach to ethics.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Hayley Denbraver</dc:creator><pubDate>Sat, 06 Oct 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-10-06:pygotham-2018/we-are-3000-years-behind-lets-talk-about-engineering-ethics.html</guid></item><item><title>What if Jane Austen had been an engineer?</title><link>https://pyvideo.org/pygotham-2018/what-if-jane-austen-had-been-an-engineer.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;As a developer with two English degrees, over the years I’ve identified some concrete ways this education makes me a better developer. This talk will discuss how we can take lessons from literature to write more readable code, make better tests, and create more usable websites. At the end of the day, after all, our job is to write. Surely the techniques of great writers have something to teach us.&lt;/p&gt;
&lt;p&gt;In this humanities-based talk, you'll learn about Freytag's pyramid and what it has to do with writing clean code, why writing those dastardly outlines before your term papers helped prepare you for your job as an engineer, and see for yourself how The Zen of Python is basically a modern retelling of Strunk and White's classic Elements of Style. You will leave inspired to go read your favorite book to get some tips for your next project.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lacey Williams Henschel</dc:creator><pubDate>Sat, 06 Oct 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-10-06:pygotham-2018/what-if-jane-austen-had-been-an-engineer.html</guid></item><item><title>Where to begin? How to End? The mental meanderings of a lifelong geek</title><link>https://pyvideo.org/pygotham-2018/where-to-begin-how-to-end-the-mental-meanderings-of-a-lifelong-geek.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;I'll talk about the engineering phenomenon known as &amp;quot;bags of water&amp;quot;,
transporting brains, the power of distant utility lights, people who throw
up in taxis, chaos and order, small talk with strangers, and how I
inadvertently got addicted to software development. Fun times!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Gloria W.</dc:creator><pubDate>Sat, 06 Oct 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-10-06:pygotham-2018/where-to-begin-how-to-end-the-mental-meanderings-of-a-lifelong-geek.html</guid></item><item><title>Write a Git Client from Scratch</title><link>https://pyvideo.org/pygotham-2018/write-a-git-client-from-scratch.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;cite&gt;git&lt;/cite&gt; is a powerful tool with a confusing interface. Many struggle with commands beyond &lt;cite&gt;git add&lt;/cite&gt;, &lt;cite&gt;git commit&lt;/cite&gt;, &lt;cite&gt;git pull&lt;/cite&gt;, and &lt;cite&gt;git push&lt;/cite&gt;, because the underlying model for &lt;cite&gt;git&lt;/cite&gt; is poorly communicated. But once a user has a thorough understanding of &lt;cite&gt;git&lt;/cite&gt; internals, the reasoning behind its (admittedly rough) interface becomes much clearer, and the path to mastery becomes clear.&lt;/p&gt;
&lt;p&gt;Rather than present the internals of &lt;cite&gt;git&lt;/cite&gt; through dry explanation, this talk explains the internals of &lt;cite&gt;git&lt;/cite&gt; through live coding and live interaction with a &lt;cite&gt;git&lt;/cite&gt; repo. Our goal: to write a minimal &lt;cite&gt;git&lt;/cite&gt; client from scratch without the help of any &amp;quot;heavy&amp;quot; libraries like &lt;cite&gt;libgit2&lt;/cite&gt;. Instead, we'll cover the contents of &lt;cite&gt;./.git&lt;/cite&gt;, how to interact with them, the &amp;quot;theory&amp;quot; behind &lt;cite&gt;git&lt;/cite&gt; (e.g., what does it mean that &lt;cite&gt;git&lt;/cite&gt; is an immutable, content-addressible store?), and slowly develop a tool to do basic &lt;cite&gt;git&lt;/cite&gt; operations.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">James Powell</dc:creator><pubDate>Sat, 06 Oct 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-10-06:pygotham-2018/write-a-git-client-from-scratch.html</guid></item><item><title>1 + 1 = 1 or Record Deduplication with Python</title><link>https://pyvideo.org/pygotham-2018/1-1-1-or-record-deduplication-with-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Record Deduplication, or more generally, Record Linkage is the task of finding which records refer to the same entity, like a person or a company. It's used mainly when there isn't a unique identifier in records like Social Security Number for US citizens. This means one can't trivially find duplicate records in a single dataset, neither easily link records from different datasets. Without an identifier, record linkage looks for matches by cleaning and comparing record attributes in a fuzzy way. Imagine you have two datasets with information about people, but without any unique identifier in the records. You have to compare attributes like name, date of birth, and address in a smart way to find which records from the two datasets refer to the same person. A similar approach must be used to dedupe records in a single dataset, so Record Deduplication is a kind of Record Linkage.&lt;/p&gt;
&lt;p&gt;There are a number of important applications of data deduplication in government and business. For example, by deduping records from Census data, the Australian government was able to find there were 250,000 fewer people in the country than they previously thought. This reduction impacted the estimations of government agencies and even caused the revision economical projections. Similarly, businesses can use record linkage techniques to enrich their customers' data with publicly available datasets.&lt;/p&gt;
&lt;p&gt;In this talk, you'll learn with Python examples the main concepts of Record Deduplication, what kinds of problems can be solved, what's the most common workflow for the process, what algorithms are involved, and which tools and libraries you can use. Although some of the discussed concepts are related to data mining, any intermediate-level Python developer will be able to learn the basics of how to dedupe data using Python.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Flávio Juvenal</dc:creator><pubDate>Fri, 05 Oct 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-10-05:pygotham-2018/1-1-1-or-record-deduplication-with-python.html</guid></item><item><title>A Crash Course on Serverless Applications in Python</title><link>https://pyvideo.org/pygotham-2018/a-crash-course-on-serverless-applications-in-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;There's a new class of applications that are becoming more prevalent these days: serverless applications. Serverless computing allows you to build and run applications without having to think about servers. Serverless apps don't require you to provision or scale any servers.&lt;/p&gt;
&lt;p&gt;How can we take advantage of serverless computing as python developers? What tools and frameworks are available that make writing serverless apps a breeze? And most importantly, how do we design and structure our applications in this serverless world to ensure we're best utilizing the underlying services?&lt;/p&gt;
&lt;p&gt;This is a practical talk on serverless architecture. In this talk, we'll look at several serverless architecture patterns covering real world use cases. We'll also look at actual open source serverless applications so we have concrete code examples we can review. These open source serverless applications leverage various AWS services including AWS Lambda and Amazon API Gateway. We'll also cover common strategies for deploying your serverless applications.&lt;/p&gt;
&lt;p&gt;Come learn how to design serverless applications in python so you can focus on writing your core applications rather than worrying about managing servers.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">James Saryerwinnie</dc:creator><pubDate>Fri, 05 Oct 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-10-05:pygotham-2018/a-crash-course-on-serverless-applications-in-python.html</guid></item><item><title>A deep dive into Python stack frames</title><link>https://pyvideo.org/pygotham-2018/a-deep-dive-into-python-stack-frames.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk walks listeners through CPython's implementation of call stacks and how information is encoded in these stacks to aid execution and error recovery. Once we cover that, I will show how we modified the Crashpad crash reporter at Dropbox to extract these stacks from native crashes in the wild to make engineers lives easier. This allows our developers to detect crashes caused on remote user machines due to incorrect Python code, with accurate Python stack traces.&lt;/p&gt;
&lt;p&gt;The CPython interpreter implements function call stacks using various structures that act as chains of linked lists.
Each interpreter maintains a list of thread states for each thread. Each thread maintains a list of frames that represent the python function calls. New frames are pushed onto the stack as execution proceeds and the interpreter exposes these frames to user space. In addition, these frames can be inspected in native code to extract useful information about program crashes and to profile programs.&lt;/p&gt;
&lt;p&gt;Some prior knowledge of C programming syntax, threading, [native function stacks](&lt;a class="reference external" href="https://manybutfinite.com/post/journey-to-the-stack/"&gt;https://manybutfinite.com/post/journey-to-the-stack/&lt;/a&gt;) and [Python byte code](&lt;a class="reference external" href="https://www.youtube.com/watch?v=cSSpnq362Bk"&gt;https://www.youtube.com/watch?v=cSSpnq362Bk&lt;/a&gt;) will be useful for attendees to get the most out of this talk.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nikhil Marathe</dc:creator><pubDate>Fri, 05 Oct 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-10-05:pygotham-2018/a-deep-dive-into-python-stack-frames.html</guid></item><item><title>A Junior Developer's Guide to Software Engineering</title><link>https://pyvideo.org/pygotham-2018/a-junior-developers-guide-to-software-engineering.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;As people try to switch careers and become software engineers, they often focus &lt;em&gt;solely&lt;/em&gt; on learning to program. However, there's more to being a professional developer or open source contributor than code. This talk highlights the what, when, and why of these other critical skills:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Version Control&lt;/li&gt;
&lt;li&gt;Documentation&lt;/li&gt;
&lt;li&gt;Testing &amp;amp; Test-Driven Development&lt;/li&gt;
&lt;li&gt;Dependency Management &amp;amp; Deployment&lt;/li&gt;
&lt;li&gt;Knowing Your Development Environment&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This talk is for people trying to get started on the path to becoming a developer, as well as more experienced developers who're trying to guide or mentor those people.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kojo Idrissa</dc:creator><pubDate>Fri, 05 Oct 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-10-05:pygotham-2018/a-junior-developers-guide-to-software-engineering.html</guid></item><item><title>A worked example of using statistical and machine learning models to time series prediction</title><link>https://pyvideo.org/pygotham-2018/a-worked-example-of-using-statistical-and-machine-learning-models-to-time-series-prediction.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;When making strategic decisions under uncertainty, we all make forecasts. In situations where time and money are directly related especially. The analysis of time series data can be essential in achieving good results, it being a fundamental part within and outside of the field of computer science. In fact, time series are everywhere. They surround the unspoken mysteries of our existence, from forecasting the amount of rain that pours onto a river per year, to the big stock markets, to weekly company sales, just to name a few.&lt;/p&gt;
&lt;p&gt;This presentation discusses the tradeoff between statistical models and neural network-based techniques, the later receiving a lot of attention in the data science community in the past few years. This talk also demonstrates how to apply them to a real problem: How to forecast a high-risk asset, which price can unpredictably increase or decrease over a short period of time, that can also be influenced by a wide range of factors. In other words, what’s gonna be the bitcoin's price? Lastly, this piece compares the advantages and disadvantages of these methods. What will attendees learn: This talk aims to demonstrate that we can apply complex machine-learning knowledge to our daily routine. Not just to forecast Bitcoin, but anything else that looks too complicated or out of reach. It also demonstrates how to use techniques of machine learning and python libraries to build a prediction model.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Rebeca Sarai</dc:creator><pubDate>Fri, 05 Oct 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-10-05:pygotham-2018/a-worked-example-of-using-statistical-and-machine-learning-models-to-time-series-prediction.html</guid></item><item><title>Automating Code Quality: Next Level</title><link>https://pyvideo.org/pygotham-2018/automating-code-quality-next-level.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Checking Python code quality by hand can be both tough and tedious. Fortunately, there exist many code quality tools that let you offload these quality checks to a machine. You are likely familiar with many of the popular tools such as &lt;cite&gt;flake8&lt;/cite&gt;, &lt;cite&gt;pylint&lt;/cite&gt;, and &lt;cite&gt;coverage&lt;/cite&gt;. And that’s good! These tools will catch many different code quality issues such as: not following Python standards, code smells, and potential bugs. However, these basic tools won’t catch all potential code quality issues that you care about.  For example, you may want to catch code standard issues outside of PEP 8, bugs related to incorrect type assumptions, and invalid documentation examples. So, does that mean you sit idly by and continue to catch these issues by hand? Of course not! You find ways to offload the quality checks onto a machine because it will be faster, more accurate, and more consistent than you.&lt;/p&gt;
&lt;p&gt;Building on previous talks about automating code quality, I will be diving into the more advanced types of quality checks that you can use (or even write yourself!) to further automate your development workflow. Using examples from real-world open source projects, you will learn about:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Usage of more advanced, lesser-known quality checkers such as &lt;cite&gt;mypy&lt;/cite&gt;&lt;/li&gt;
&lt;li&gt;Writing custom checkers for existing code quality tools such as &lt;cite&gt;pylint&lt;/cite&gt; and &lt;cite&gt;flake8&lt;/cite&gt;&lt;/li&gt;
&lt;li&gt;Using and writing checkers for documentation quality tools&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kyle Knapp</dc:creator><pubDate>Fri, 05 Oct 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-10-05:pygotham-2018/automating-code-quality-next-level.html</guid></item><item><title>Best Intentions, Least Measured</title><link>https://pyvideo.org/pygotham-2018/best-intentions-least-measured.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The fact that tech is struggling to hire or retain employees from diverse backgrounds has been written about and discussed thoroughly, particularly in the last few years.  The economic, societal, and moral benefits of diversity are also well documented.  Why is it hard, then, for well-intentioned organizations to shift their demographics?  There are a number of reasons, but one that doesn’t appear to have been thoroughly discussed already is the challenge of gathering and responding to data about diversity within a company’s hiring pool and existing employees.&lt;/p&gt;
&lt;p&gt;Many organizations have at least made some efforts to increase diversity, inclusion, or both; but how do you know which strategies were successful? What does success mean, and how do you measure the results of your effort?  Where do you even start?&lt;/p&gt;
&lt;p&gt;Data driven decision making is very popular in tech, but in order to measure an increase, you first need to know your starting point, and then you need to set up a repeatable data collection process to measure the change over time.&lt;/p&gt;
&lt;p&gt;We will describe the barriers to collecting information from employees and the candidate pool that prevent organizations from knowing what’s working, pitfalls to watch out for, and some tools that have helped us obtain data necessary to make informed choices and improve our diversity and inclusion.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nicole Zuckerman</dc:creator><pubDate>Fri, 05 Oct 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-10-05:pygotham-2018/best-intentions-least-measured.html</guid></item><item><title>Clean architecture in Python</title><link>https://pyvideo.org/pygotham-2018/clean-architecture-in-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Believe me or not, but your database is not your application. Neither are ORM models or even your framework. They are not reasons for building yet another project. The real motivation is to satisfy some business needs. Unfortunately, it might get out of sight due to years spent on writing Django- or Rails-like web applications. Their ORMs usually dominates in applications, coupling business logic to the framework and making it impossible to (unit) test it without database access. The fact is you can develop and test features without even thinking about how business objects map into database tables. Software engineering brought several solutions over last few years, and I want to share with you one of them, called Clean Architecture.&lt;/p&gt;
&lt;p&gt;Clean Architecture is an approach that puts your customer's concerns in the centre of your software. All other issues, such as persistence are treated as implementation details. This is achieved thanks to a careful layering of the project. There are few interesting outcomes. Firstly, business rules layer knows nothing about a framework or a database. Therefore you can develop and test all business logic without saving results anywhere. Secondly, upgrading or even swapping a framework is less painful. The same is true for every third-party service as they are abstracted away. Thirdly, Clean Architecture makes introducing new team members to the project much simpler since everything has its place. Last, but certainly not least - as time passes and project grows Clean Architecture lets you maintain order remain flexible.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sebastian Buczyński</dc:creator><pubDate>Fri, 05 Oct 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-10-05:pygotham-2018/clean-architecture-in-python.html</guid></item><item><title>Creative Music Applications in Python</title><link>https://pyvideo.org/pygotham-2018/creative-music-applications-in-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;### Creative Music Applications in Python
We are lucky to live in times when Python is the go-to programming language for machine learning,  neural networks research, web applications, as well as for developments of generative media and digital art. Using a wide variety of Python open-source packages and RNN models, the Python community is now becoming the center stage for experimental media projects and creative applications.&lt;/p&gt;
&lt;p&gt;The goal of this talk is to introduce attendees to the increasing variety of packages and pre-trained machine learning models for audio analysis, music creation, and text generation, that is now available in Python!&lt;/p&gt;
&lt;p&gt;### Talk Overview
The talk will start with a presentation of Dror's recent award-winning project, [Soundscape](&lt;a class="reference external" href="http://www.soundsca.pe"&gt;http://www.soundsca.pe&lt;/a&gt;) -  An online platform, that allows music lovers to record loops, and sync them with music by other people around the world automatically.&lt;/p&gt;
&lt;p&gt;We will breakdown Soundscape's building blocks and see how to use audio analysis Python packages, such as [LibROSA](&lt;a class="reference external" href="https://librosa.github.io/librosa/index.html"&gt;https://librosa.github.io/librosa/index.html&lt;/a&gt;) and [madmom](&lt;a class="reference external" href="http://madmom.readthedocs.io/en/latest/index.html"&gt;http://madmom.readthedocs.io/en/latest/index.html&lt;/a&gt;) (Recurrent Neural Network). Furthermore, we will learn how to overcome the challenges of serving these type of applications using the [Django Web Framework](&lt;a class="reference external" href="https://www.djangoproject.com/"&gt;https://www.djangoproject.com/&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Then, we will talk about easy ways to build similar applications using Python packages, such as [AudioOwl](&lt;a class="reference external" href="https://github.com/dodiku/audioowl"&gt;https://github.com/dodiku/audioowl&lt;/a&gt;) and [MixingBear](&lt;a class="reference external" href="https://github.com/dodiku/MixingBear"&gt;https://github.com/dodiku/MixingBear&lt;/a&gt;), which were created recently by Dror Ayalon.&lt;/p&gt;
&lt;p&gt;![AudioOwl.py and MixingBear.py](&lt;a class="reference external" href="https://s3.amazonaws.com/soundscape-images-dev/AudioOwl_MixingBear.png"&gt;https://s3.amazonaws.com/soundscape-images-dev/AudioOwl_MixingBear.png&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Following the project presentation, we will review a few other Python open-source projects and tools, such as Google Magenta's Recurrent Neural Networks for generative music, WaveGAN for generative raw audio, and textgenrnn for text generation.&lt;/p&gt;
&lt;p&gt;We will wrap-up with a few interesting projects to burst our inspiration!&lt;/p&gt;
&lt;p&gt;### About The Speaker
[Dror Ayalon](&lt;a class="reference external" href="https://www.drorayalon.com"&gt;https://www.drorayalon.com&lt;/a&gt;) is a software engineer, product manager, and interaction designer. He researches and develops innovative music creation tools, using music information retrieval (MIR) techniques, digital signal processing (DSP), and machine learning algorithms, that will allow musicians to compose music in a variety of new ways and formats. Dror recently received his master's degree from NYU and now works full time for the Google Creative Lab in NYC.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dror Ayalon</dc:creator><pubDate>Fri, 05 Oct 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-10-05:pygotham-2018/creative-music-applications-in-python.html</guid></item><item><title>Critical Incidents: a guide for developers</title><link>https://pyvideo.org/pygotham-2018/critical-incidents-a-guide-for-developers.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;As developers we know (too well) there’s no such thing as bug-free software.
Whether you work in a small or big production software, incidents are
inevitable and being prepared is key. How would you handle, for example, a
database outage if it happened now? Or a critical bug that is affecting half
of your users?&lt;/p&gt;
&lt;p&gt;Navigating in crisis mode is never easy, but having a great company culture
and recovery plan gives you guidance and mitigates damage. In this talk, I
will share some success cases, such as GitLab database outage recovery, and
my personal experience as a project manager overcoming a critical incident
in a subscription system built with Django.&lt;/p&gt;
&lt;p&gt;What can you do to prepare your team? When should you enter crisis mode? How
to assemble a recovery plan? To answer these and other questions, I will
provide a step-by-step guide, from an Modern Agile perspective, starting
with the bug discovery, and handling the client’s expectations, through the
data recovery, until your incident postmortem.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lais Varejão</dc:creator><pubDate>Fri, 05 Oct 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-10-05:pygotham-2018/critical-incidents-a-guide-for-developers.html</guid></item><item><title>Database Testing with pytest</title><link>https://pyvideo.org/pygotham-2018/database-testing-with-pytest.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Options for testing relational databases aren't as renown as what's available for application testing. We've all heard of unittest and pytest, but testing database objects are sometimes forgotten about, or tested through the application. However, pytest’s flexibility along with Python's rich library of modules means that we can accomplish database testing in a way familar to Python developers.&lt;/p&gt;
&lt;p&gt;We'll be exploring how to use PyTest to create a suite of tests for database objects. This will include setting up our testing environment, populating conftest.py with our fixtures, and using transactions to our advantage. As we'll be testing against a real live Microsoft SQL Server database, we'll see how to use pyodbc to set up a connection to it. Then we'll dive into a few tests to show how we can gain confidence in our DB functions and stored procedures. Of course there are alternative ways to do this, and I'll share a few of them along with the benefits and drawbacks of using pytest.&lt;/p&gt;
&lt;p&gt;If time allows we'll show an Postgres equivalent to illustrate that this approach is not limited to a single product.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dan Clark</dc:creator><pubDate>Fri, 05 Oct 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-10-05:pygotham-2018/database-testing-with-pytest.html</guid></item><item><title>Diversity and Inclusion for all!</title><link>https://pyvideo.org/pygotham-2018/diversity-and-inclusion-for-all.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The average tech company has a rough female representation of 25%. The question that is always asked is: Why are there not more women and minorities in the tech industry?&lt;/p&gt;
&lt;p&gt;At Kyruus, we have been thinking about how to tackle this issue and address the lack of diversity by:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Improving our hiring pipeline&lt;/li&gt;
&lt;li&gt;Addressing challenges during the interview process&lt;/li&gt;
&lt;li&gt;Holding focus groups and sharing with the entire company&lt;/li&gt;
&lt;li&gt;Discussing how to think about career growth&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The majority of these efforts started with us, the software engineers. We continue our efforts because there is so much more that we can do to improve diversity in the tech industry. This talk will address what we have done, but also some of the challenges that we faced.&lt;/p&gt;
&lt;p&gt;Come to this talk to learn more about what your company can be doing to make your workplace more inclusive. Everyone can help!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michelle Chen</dc:creator><pubDate>Fri, 05 Oct 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-10-05:pygotham-2018/diversity-and-inclusion-for-all.html</guid></item><item><title>Egad! How Do We Start Writing (Better) Tests?</title><link>https://pyvideo.org/pygotham-2018/egad-how-do-we-start-writing-better-tests.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Some have never automated tests and can’t check themselves before they wreck themselves. Others have 1000s of tests that are flaky, duplicative, and slow. Wa-do-we-do? GOOD testing is hard but not impossible. To show how to get it done, we will follow the story of “Amanda the Panda” (representing the everyday Pythoneer) as she jumps into testing and automation with Python.&lt;/p&gt;
&lt;p&gt;Her journey includes:
1. How do I play “buzzword bingo” for testing?
2. Why do I need feature tests and not just unit tests?
3. What skills do I need?
4. What framework should I use?
5. How do I avoid duplicating test code?
6. How do I handle test data?
7. There are too many tests! Which ones should I automate?
8. How do I run tests in continuous integration?
9. How do I make tests reliable so they stop failing again and again?
10. How do I hire Software Engineers in Test?&lt;/p&gt;
&lt;p&gt;All examples will be given in Python (of course).&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrew Knight</dc:creator><pubDate>Fri, 05 Oct 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-10-05:pygotham-2018/egad-how-do-we-start-writing-better-tests.html</guid></item><item><title>Everyday security issues and how to avoid them</title><link>https://pyvideo.org/pygotham-2018/everyday-security-issues-and-how-to-avoid-them.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;These days virtually all software and computer hardware is connected to the
internet. Ultimately the internet is a hostile place and filled with people
that will attempt to abuse any vulnerability for fun, profit or more
sinister reasons. Therefore every software developer and administrator
should have at least a basic understanding how to develop and run code
securely. After all you don’t want to become the laughing stock on hacker
news or cause your company to loose billions in shareholder value.&lt;/p&gt;
&lt;p&gt;This talk won’t turn you into a security specialist over night, but you will
learn how to avoid common mistakes in your daily work. I will introduce you
to best practices and prevalent security bugs, hilarious anecdotes and some
real life examples from my daily work as security engineer. The presentation
features airplanes, squirrels, ducks, and the most efficient password
cracking method: not as brutucal as XKCD 538 and much more delicious.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Christian Heimes</dc:creator><pubDate>Fri, 05 Oct 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-10-05:pygotham-2018/everyday-security-issues-and-how-to-avoid-them.html</guid></item><item><title>Gathering Related Functionality: Patterns for Clean API Design</title><link>https://pyvideo.org/pygotham-2018/gathering-related-functionality-patterns-for-clean-api-design.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;What do you do when you have to choose between designing your function for one of two common use cases?&lt;/p&gt;
&lt;p&gt;How about when the same logical operations (say, multiplication or concatenation) need to have different implementations depending on the type of the arguments they are applied to?&lt;/p&gt;
&lt;p&gt;These kinds of questions can be vexing when trying to design a clean, well-scoped API.&lt;/p&gt;
&lt;p&gt;This talk will cover several strategies for grouping related functionality in a way that presents a logically clean interface to both humans and static analysis tools like type checkers and document generators.&lt;/p&gt;
&lt;p&gt;This talk covers:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Alternate constructors with &lt;cite&gt;&amp;#64;classmethod&lt;/cite&gt;&lt;/li&gt;
&lt;li&gt;Namespacing functions under a class with &lt;cite&gt;&amp;#64;staticmethod&lt;/cite&gt;&lt;/li&gt;
&lt;li&gt;Dispatch by type&lt;/li&gt;
&lt;li&gt;A new convention for namespacing functions: &lt;cite&gt;variants&lt;/cite&gt;&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Paul Ganssle</dc:creator><pubDate>Fri, 05 Oct 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-10-05:pygotham-2018/gathering-related-functionality-patterns-for-clean-api-design.html</guid></item><item><title>Gradient Descent, Demystified</title><link>https://pyvideo.org/pygotham-2018/gradient-descent-demystified.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Gradient descent (GD) is a fundamental optimization algorithm that sounds much scarier than it is. Many users of Scikit-learn et al can apply GD through these tools, but do not &lt;cite&gt;grok&lt;/cite&gt; what GD is really doing. Other more engineering-oriented practitioners are put off entirely by the seeming complexity. I walk through a live coding practicum (in a RISE Jupyter Notebook slideshow) in which I implement an initial gradient descent algorithm for logistic and linear regression, demonstrating the flexibility of the optimization technique and the decidedly un-scary code required to get our prototype up-and-running. I compare the results of our hand coded algorithm to those generated by Scikit-learn (and the closed-form normal equation, for linear regression) and show equality.&lt;/p&gt;
&lt;p&gt;The focus of this talk is on the practicum of implementation one’s own GD algorithm, though I review the most important mathematical and theoretical components of GD to ground the practicum for attendees. Mathematical review touches on the nature of gradients, what they are, how they relate to derivates, and how they enable iterative optimization over a parameter space. This talk does not include a formal derivation of, eg, the loss functions used in linear and logistic regression, nor does it require mastery of calculus. Attendees will leave the talk with a better understanding of iterative optimization and a template of their own for implementing GD in Python, should they feel this would enrich their understanding.&lt;/p&gt;
&lt;p&gt;I also tweet a 257 character working gradient descent method at the end of the talk, to underscore that gradient descent isn't scary! (and also for fun!)&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michael (Stu) Stewart</dc:creator><pubDate>Fri, 05 Oct 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-10-05:pygotham-2018/gradient-descent-demystified.html</guid></item><item><title>Great Engineering in the Worst Work Environment</title><link>https://pyvideo.org/pygotham-2018/great-engineering-in-the-worst-work-environment.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Imagine the worst possible engineering work environment: Strict dress code, fast employee turnaround with median age of 19, people gone for 2 weeks in the middle of a project, requirements and priorities that change monthly. Oh, and there's no internet access.
Welcome to the Israeli Intelligence Unit, which despite its limitations produces world-class results.
Learn how all these workplace disadvantages turned to the unit's advantage, and what lessons you can take from it.&lt;/p&gt;
&lt;p&gt;This talk presents a peek into a different development environment - where the tools of the trade and the goals of work are unlike what you're used to.
There's no technical background knowledge required. It helps to know first-hand how a 30-40 people organization works, to appreciate the nuances of the difficulties.&lt;/p&gt;
&lt;p&gt;You'll leave the talk with some insights on turning limitations into advantages, and how to extract the most out of them.
At the very least, you'll know you definitely don't have the worst working conditions in tech.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Eyal Yavor</dc:creator><pubDate>Fri, 05 Oct 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-10-05:pygotham-2018/great-engineering-in-the-worst-work-environment.html</guid></item><item><title>How Etsy Handles “Peeking” in A/B Testing</title><link>https://pyvideo.org/pygotham-2018/how-etsy-handles-peeking-in-ab-testing.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;At Etsy, we leverage our internal A/B testing tool when we launch new campaigns, polish the look and feel of our site, or even make changes to our search and recommendation algorithms. As our experimentation platform scales and the velocity of experimentation increases rapidly across the company, we also face a number of challenges. In this talk, I will talk about how we utilize Python to investigate and evaluate one of the problems, “peeking” at results early in order to detect maximum significance with minimum sample size.&lt;/p&gt;
&lt;p&gt;We assessed the overall problem and how it affected experiments at Etsy. We then evaluated a few solutions that have been proposed and applied in industry and academia, keeping in mind the unique challenges we face as a fast-paced e-commerce company. After going through the analysis and evaluation, I will discuss the approach we at Etsy took to tackle the peeking problem.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kelly Shen</dc:creator><pubDate>Fri, 05 Oct 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-10-05:pygotham-2018/how-etsy-handles-peeking-in-ab-testing.html</guid></item><item><title>How to Trick SQL into Doing All the Work for You</title><link>https://pyvideo.org/pygotham-2018/how-to-trick-sql-into-doing-all-the-work-for-you.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Consider the process of importing data into a SQL database with a SQL COPY within your Python app. As data grows, it becomes more and more important that your preprocessing steps are as efficient as possible.&lt;/p&gt;
&lt;p&gt;You must validate and reformat before importing the data. If SQL has control over the import step, most would think that at least one additional iteration is needed to validate and format before sending to COPY. But what if you tricked the copy step into doing the validating and formatting for you?&lt;/p&gt;
&lt;p&gt;In this talk, I will demonstrate how to create a file-like object that COPY will use to validate and reformat the data as it is read. This will remove inefficiencies when processing large data sets and prevent execution time from growing. While this talk explores sending a file-like object to a copy command, the technique can be extended to any method that reads from an object.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Molly Leen</dc:creator><pubDate>Fri, 05 Oct 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-10-05:pygotham-2018/how-to-trick-sql-into-doing-all-the-work-for-you.html</guid></item><item><title>Interpretable Machine Learning: Methods for understanding complex models</title><link>https://pyvideo.org/pygotham-2018/interpretable-machine-learning-methods-for-understanding-complex-models.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Today, businesses use algorithmic decision-making in various applications, such as determining who gets a bank loan, evaluating a teacher's performance, and other areas that greatly affect people's livelihood. In these applications, understanding why a statistical model makes a particular prediction can be as important as its accuracy. However often times, these models are complex black-boxes that are difficult or impossible to understand by humans.  For persons whose lives are impacted by these algorithms, this lack of interpretability creates serious problems as these individuals are unable to improve their outcome. In this talk, I will discuss various definitions of global and local interpretability for machine learning models.  Next, I will discuss methodologies for better understanding how a model created a prediction for a particular test instance.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Manojit Nandi</dc:creator><pubDate>Fri, 05 Oct 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-10-05:pygotham-2018/interpretable-machine-learning-methods-for-understanding-complex-models.html</guid></item><item><title>I've Been Awaiting for an URL Like You</title><link>https://pyvideo.org/pygotham-2018/ive-been-awaiting-for-an-url-like-you.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The [InterPlanetary File System (IPFS)](&lt;a class="reference external" href="https://ipfs.io/"&gt;https://ipfs.io/&lt;/a&gt;) is a peer-to-peer hypermedia protocol to make the web faster, safer, and more open.  It's one of the leading open projects in the decentralization space, and Python developers should be able to use libraries that support the API protocol.  The best way to interact with a network protocol like IPFS in Python is to utilize the asynchronous asyncio library that comes with Python 3.  This talk will cover the basics of how asyncio and IPFS work, and will then take deep dive on what it was like to convert the InterPlanetary File System Python 2 library to async enabled Python 3.  The talk will cover suggestions around when a conversion to asyncio may be useful, and when it may not be recommended.  General practices for code refactoring and Python 3 upgrades will be covered as well.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Brian Muller</dc:creator><pubDate>Fri, 05 Oct 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-10-05:pygotham-2018/ive-been-awaiting-for-an-url-like-you.html</guid></item><item><title>Keep it secret, keep it safe! Preserving anonymity by subverting stylometry</title><link>https://pyvideo.org/pygotham-2018/keep-it-secret-keep-it-safe-preserving-anonymity-by-subverting-stylometry.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk, I will introduce you to adversarial stylometry and demonstrate several techniques with a web tool I built that uses Flask, the Natural Language Toolkit (NLTK), and Scikit-learn.&lt;/p&gt;
&lt;p&gt;What’s stylometry? If you wish to remain anonymous, you can use any number of privacy technologies, but you could still be identified simply by the words you use. Using machine learning, stylometry can identify authors of anonymous documents by analyzing the frequency of function words (“of” and “was,” for example) and comparing results to known writing samples. Your writing style is therefore uniquely quantifiable and can serve reliably as a biometric. Writers who wish to remain anonymous — like whistleblowers, activists, and cryptocurrency inventors — should consider using “adversarial” stylometric techniques to outsmart authorship attribution software. In this presentation, I will explain how this is possible and demonstrate a few ways to preserve your anonymity, including using a synonym replacer programmed in Python.&lt;/p&gt;
&lt;p&gt;As a relatively new programmer, I took advantage of several Python libraries to help me build this tool. I will touch on calculating word frequency with NLTK and using Scikit-learn to classify documents. This talk is geared toward people who want to use Python to analyze, transform, and generate written language.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Robin Camille Davis</dc:creator><pubDate>Fri, 05 Oct 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-10-05:pygotham-2018/keep-it-secret-keep-it-safe-preserving-anonymity-by-subverting-stylometry.html</guid></item><item><title>Making Sense of Flask APIs A Billion Requests at a Time</title><link>https://pyvideo.org/pygotham-2018/making-sense-of-flask-apis-a-billion-requests-at-a-time.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;You’ve got a Flask, Django, or other API. How are people using it? Is anything going wrong? How does it perform? These questions become increasingly hard to answer once manually &lt;tt class="docutils literal"&gt;tail&lt;/tt&gt;’ing your log files becomes impractical.&lt;/p&gt;
&lt;p&gt;This talk will describe how to effectively answer these questions. I’ll demonstrate a suite of tools we use to quickly visualize insights across dozens of API endpoints and billions of requests. I’ll show logging techniques to more consistently store, organize, and process the right data to make sense of it all. I’ll talk about the processes we’ve put in place to routinely revisit these questions and quickly alert when things go awry. Finally, despite all the pretty graphs I’ll show you, I’ll discuss how at the end of the day it is the team and cultural aspects that keep any API in line and growing.&lt;/p&gt;
&lt;p&gt;These stories, best practices, and advice come from my experience building and scaling the Nylas APIs. Our APIs allow developers to GET, POST and PUT email threads, calendar events, contacts, and any other item you’d find in an Exchange, GSuite, or IMAP mailbox. Hundreds of thousands of mailboxes later, and over a hundred million requests a day, making sense of what’s going on in the system at any given time present challenges I’m excited to share.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Evan Morikawa</dc:creator><pubDate>Fri, 05 Oct 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-10-05:pygotham-2018/making-sense-of-flask-apis-a-billion-requests-at-a-time.html</guid></item><item><title>MFA the Right Way: One-Time Passwords with PyOTP</title><link>https://pyvideo.org/pygotham-2018/mfa-the-right-way-one-time-passwords-with-pyotp.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Multi-factor authentication is a must-have for modern secure applications. Thankfully, with PyOTP, enabling MFA is a breeze! We'll start by learning about the two flavors of one time passwords, HMAC-based and time-based. Then we'll live-code adding MFA to an application, complete with QR codes for syncing with your phone via Authy or Google Authenticator.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Collin Stedman</dc:creator><pubDate>Fri, 05 Oct 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-10-05:pygotham-2018/mfa-the-right-way-one-time-passwords-with-pyotp.html</guid></item><item><title>Pluggable Libs Through Design Patterns</title><link>https://pyvideo.org/pygotham-2018/pluggable-libs-through-design-patterns.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Design Patterns are a standardized way to talk about certain code architectures. They've been first formally introduced through the book &amp;quot;Design Patterns: Elements of Reusable Object-Oriented Software&amp;quot; and we are still discovering new ones. They are such a good way to architecture code that even Python comes with some of them, such as the iterator, built into the language.&lt;/p&gt;
&lt;p&gt;In this talk I'll will walk the audience through 3 popular design patterns: Adapter, Strategy and Pipeline. Some of the best examples of use cases for those are open source libraries. Open source libraries heavily rely on patterns to allow flexibility and pluggability. A very good example of this if the Python Social Auth (PSA) project. PSA allows applications to integrate with a huge number of web authentication service providers. It works with frameworks such as Django, Flask, Tornado and Pyramid and knows how to handle OAuth1, OAuth2, OpenID and SAML (and its slight customizations through each provider). This kind of flexibility is only possible because PSA has design patterns in its core.&lt;/p&gt;
&lt;p&gt;Before observing patterns in the libraries, attendees will be presented to real world situations being tackled with poorly designed software. This will give context before we move on to understand how we can use a pattern to improve the quality of it and a give a more detailed explanation on how it works. This will lead to examples of tools that implement that pattern and an exploration of the architecture and the source code.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Filipe Ximenes</dc:creator><pubDate>Fri, 05 Oct 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-10-05:pygotham-2018/pluggable-libs-through-design-patterns.html</guid></item><item><title>Practical Cryptography</title><link>https://pyvideo.org/pygotham-2018/practical-cryptography.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;From TLS to authentication, &amp;quot;crypto&amp;quot; is used for a lot more than just currencies. In 2018 security should be part of every engineer's toolkit and cryptography is a foundation we can master together. This talk will dive into modern cryptography, the math behind how it works, and its everyday use cases. By looking at the origins of cryptography we'll follow the progression of methods and algorithms as humans and computers evolved.&lt;/p&gt;
&lt;p&gt;You'll leave understanding the difference between symmetric and asymmetric cryptography, why you would have a public and private key, and how those get used in a variety of applications. We'll look at how to encrypt and decrypt data using Python's &lt;cite&gt;cryptography&lt;/cite&gt; library and discuss the reasons you should never roll your own crypto. This will &lt;em&gt;not&lt;/em&gt; be a talk about bitcoin, but will dive into how cryptography helps secure anonymous transactions and keeps your identity and data safe.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kelley Robinson</dc:creator><pubDate>Fri, 05 Oct 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-10-05:pygotham-2018/practical-cryptography.html</guid></item><item><title>Pushing the Bounds with Descriptors</title><link>https://pyvideo.org/pygotham-2018/pushing-the-bounds-with-descriptors.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The problem with most online tutorials is that they lack depth, often involving trivially simple examples. In the case of descriptors, the issue is compounded by the complexity of interface exposed by the protocol itself. Here, simplified examples are chosen so that other issues can be discussed such as the avoidance or management of global state. This deprives the audience of a deep exploration of the rich dynamics descriptors lend to the object oriented nature of Python.&lt;/p&gt;
&lt;p&gt;In this talk, we'll go beyond basic &amp;#64;property templates. Building along a central theme, a solution will evolve to handle more demanding needs. As the approach changes, we'll discuss encapsulating behavior, immutable and partially persistent data structures, and then delve into the interplay between multi-level, dependent object hierarchies.&lt;/p&gt;
&lt;p&gt;The goal of all this? To expand the realm of possibilities in your own pattern library and enrich the tool set you bring with you to new problems.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Owein Reese</dc:creator><pubDate>Fri, 05 Oct 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-10-05:pygotham-2018/pushing-the-bounds-with-descriptors.html</guid></item><item><title>Python Oddities Explained</title><link>https://pyvideo.org/pygotham-2018/python-oddities-explained.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A number of Python features often seem counter-intuitive at first glance, especially when moving from another programming language to Python. Often what at first seems like a bug, will later reveal itself to be a misunderstood feature.&lt;/p&gt;
&lt;p&gt;During this talk we'll look at a number of Python's unique features and quirks and attempt to re-shape our mental models of Python to better match reality. By the end of this talk you'll have a deeper understanding of Python's rules behind objects, scope, and variables.&lt;/p&gt;
&lt;p&gt;Warning: this talk will include many Python head scratchers so show up prepared to think on your feet!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Trey Hunner</dc:creator><pubDate>Fri, 05 Oct 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-10-05:pygotham-2018/python-oddities-explained.html</guid></item><item><title>Software Freedom And Ethical Technology</title><link>https://pyvideo.org/pygotham-2018/software-freedom-and-ethical-technology.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;As a lawyer and free software enthusiast with a life-critical medical
device implanted in their body, Karen Sandler has come to understand how the
critical choices we are making about software will have huge societal
impact. In the age of corporate surveillance and walled-garden platforms,
where every week there is a new known software vulnerability, software
freedom is more important than ever.&lt;/p&gt;
&lt;p&gt;Karen will touch on potential avenues for accountability, transparency, and
access to remedies as we hurtle towards an Internet of Things built on
proprietary source code that prevents us from knowing exactly how these
vital devices work, what data they are collecting and to what ends, what
their vulnerabilities might be, and the extent to which their closed,
proprietary nature keeps us from developing societal mechanisms and review
processes to keep us safe.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Karen M. Sandler</dc:creator><pubDate>Fri, 05 Oct 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-10-05:pygotham-2018/software-freedom-and-ethical-technology.html</guid></item><item><title>Start ‘em young: Tips for teaching Python to kids</title><link>https://pyvideo.org/pygotham-2018/start-em-young-tips-for-teaching-python-to-kids.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Whether you’re an experienced educator or you’re still wondering how to get started teaching others, this is a great opportunity to pick up some tips. In this talk, we’ll use a new Python and Earth Science curriculum piloted at the American Museum of Natural History as a model to share best practices for teaching Python to young students. We’ll discuss the value of collaborating with content experts, using online tools, and introducing coding concepts with games and hands-on activities. You’ll even get to walk through an example activity yourself!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Gabrielle Rabinowitz</dc:creator><pubDate>Fri, 05 Oct 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-10-05:pygotham-2018/start-em-young-tips-for-teaching-python-to-kids.html</guid></item><item><title>Tracking the International Space Station in Django with Redis-Queue and RQ Scheduler</title><link>https://pyvideo.org/pygotham-2018/tracking-the-international-space-station-in-django-with-redis-queue-and-rq-scheduler.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The international space station (ISS) is an orbital outpost circling high above our heads. Given a location on Earth (latitude, longitude) the ISS Open Notify API will compute the next &lt;cite&gt;n&lt;/cite&gt; number of times that the ISS will be overhead. I will cover step by step how to build a web application that notifies users via text message when the ISS is passing over them.&lt;/p&gt;
&lt;p&gt;In this session, attendees will learn how to:
- Access and interpret data from the [ISS Open Notify API](&lt;a class="reference external" href="http://open-notify.org/Open-Notify-API/ISS-Pass-Times/"&gt;http://open-notify.org/Open-Notify-API/ISS-Pass-Times/&lt;/a&gt;) on the exact timing on when the ISS will next pass a given geolocation.
- Use Redis Queue as a lightweight alternative to Celery for executing asynchronous tasks.
- Use RQ Scheduler to schedule tasks to be performed at a specific datetime.
- Integrate RQ and RQ Scheduler into a Django web application.
- Respond to webhook requests with Django.
- Access client-side geolocation data using JavaScript.
- Send text message notifications using the Twilio SMS API.&lt;/p&gt;
&lt;p&gt;In the Django app built during this talk, Redis will be used to store subscriber information such as a user's phone number and geolocation. RQ and RQ Scheduler will be used to execute a function that sends a text message notification using the Twilio API at a given datetime.&lt;/p&gt;
&lt;p&gt;At the end of my talk, I will send a text message containing the code I wrote, and a walkthrough on how to get it running to all of the audience members who interacted with the live-coded web application from my session.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sam Agnew</dc:creator><pubDate>Fri, 05 Oct 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-10-05:pygotham-2018/tracking-the-international-space-station-in-django-with-redis-queue-and-rq-scheduler.html</guid></item><item><title>Using Python, Travis CI, and GitHub to Effectively Teach Programming</title><link>https://pyvideo.org/pygotham-2018/using-python-travis-ci-and-github-to-effectively-teach-programming.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Real-world software engineering is collaborative, commonly involving the use of Git, GitHub, and continuous integration with Travis CI. Suitable for both full-time educators and members of industry who educate their colleagues, this presentation will explain how to use these technologies and platforms to teach interdisciplinary and introductory courses in computer programming and software engineering.&lt;/p&gt;
&lt;p&gt;The presentation will first show how to create a GitHub organization connected to a GitHub Classroom with unlimited private repositories that contain instructor solutions and starter kits and submissions from both individual and team-based assignments. The talk will next explain how to connect GitHub repositories to continuous integration servers hosted by Travis CI, thus supporting the cloud-based execution of tests and checks.&lt;/p&gt;
&lt;p&gt;The presentation will subsequently introduce the design and implementation of and the testing strategy for a Python program that supports the local and cloud-based checking of the source code and technical writing for a project. Designed to complement the automated checks performed by a test suite, this tool, called [GatorGrader](&lt;a class="reference external" href="https://github.com/GatorEducator/gatorgrader"&gt;https://github.com/GatorEducator/gatorgrader&lt;/a&gt;), can verify that a submission contains the required number of comments and produces the correct number of lines of console output. It can also, for instance, ensure that a student makes the requisite number of commits to a GitHub repository and implements a program in a specified fashion.&lt;/p&gt;
&lt;p&gt;Ultimately, people who attend this talk will learn more about how to use platforms like GitHub and Travis CI, open-source Python packages, and Python programming language features to effectively deliver instructional materials and assess assignment submissions.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Gregory M. Kapfhammer</dc:creator><pubDate>Fri, 05 Oct 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-10-05:pygotham-2018/using-python-travis-ci-and-github-to-effectively-teach-programming.html</guid></item></channel></rss>