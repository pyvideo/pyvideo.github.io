<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org - Samuel Colvin</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_samuel-colvin.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2025-05-15T00:00:00+00:00</updated><subtitle></subtitle><entry><title>Python's Parallel Programming Possibilities - 4 levels of concurrency</title><link href="https://pyvideo.org/europython-2019/pythons-parallel-programming-possibilities-4-levels-of-concurrency.html" rel="alternate"></link><published>2019-07-10T00:00:00+00:00</published><updated>2019-07-10T00:00:00+00:00</updated><author><name>Samuel Colvin</name></author><id>tag:pyvideo.org,2019-07-10:/europython-2019/pythons-parallel-programming-possibilities-4-levels-of-concurrency.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;I'm going to talk about the 4 main levels of parallelism in modern
Computing:&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;- multiple (virtual) machines&lt;/div&gt;
&lt;div class="line"&gt;- multiple processes&lt;/div&gt;
&lt;div class="line"&gt;- multiple threads&lt;/div&gt;
&lt;div class="line"&gt;- multiple green threads, aka asyncio&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Why you might use each of them, how to go about doing so with python and
some of the pitfalls you might fall …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;I'm going to talk about the 4 main levels of parallelism in modern
Computing:&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;- multiple (virtual) machines&lt;/div&gt;
&lt;div class="line"&gt;- multiple processes&lt;/div&gt;
&lt;div class="line"&gt;- multiple threads&lt;/div&gt;
&lt;div class="line"&gt;- multiple green threads, aka asyncio&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Why you might use each of them, how to go about doing so with python and
some of the pitfalls you might fall into along the way.&lt;/p&gt;
&lt;p&gt;To do so, I'll give short examples in code of achieving each level:&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;- leveraging multiple hosts using RQ, and also the possibility of RPC
with HTTP&lt;/div&gt;
&lt;div class="line"&gt;- multiprocessing and threading using their respective modules from
the python standard library&lt;/div&gt;
&lt;div class="line"&gt;- asyncio demonstrated with AIOHTTP&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;That sounds great, but there are &amp;quot;gotchas&amp;quot; you should know about before
you get started, for example:&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;- multiple machines can actually be multiple virtual machines on the
same host&lt;/div&gt;
&lt;div class="line"&gt;- effectively communicating between processes is hard, how can we go
about making it easier?&lt;/div&gt;
&lt;div class="line"&gt;- the limitations of threading and the GIL&lt;/div&gt;
&lt;div class="line"&gt;- run_in_executor - do we ever really need to use multiprocessing or
threading directly again&lt;/div&gt;
&lt;div class="line"&gt;- use of asyncio when dealing with both networking between hosts and
between processes - you end up using two different kinds of
concurrency at the same time. That can be confusing, but also awesome.&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;I'll finish of by showcasing a library I built, arq which is a job
queueing and RPC library for python which uses asyncio and Redis.&lt;/p&gt;
</content><category term="EuroPython 2019"></category><category term="ASYNC / Concurrency"></category><category term="Messaging and Job Queues"></category><category term="Multi-Processing"></category><category term="Multi-Threading"></category><category term="python"></category></entry><entry><title>How Pydantic V2 leverages Rust's Superpowers</title><link href="https://pyvideo.org/pycon-us-2023/how-pydantic-v2-leverages-rusts-superpowers.html" rel="alternate"></link><published>2023-04-22T00:00:00+00:00</published><updated>2023-04-22T00:00:00+00:00</updated><author><name>Samuel Colvin</name></author><id>tag:pyvideo.org,2023-04-22:/pycon-us-2023/how-pydantic-v2-leverages-rusts-superpowers.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;a class="reference external" href="https://pydantic-docs.helpmanual.io/"&gt;Pydantic&lt;/a&gt; is a data validation
library for Python that has seen massive adoption over the last few
years - it is estimated that Pydantic is now used by about 10% of
professional web developers!&lt;/p&gt;
&lt;p&gt;Over the last year I've been working full time to rebuild Pydantic from
the ground up …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;a class="reference external" href="https://pydantic-docs.helpmanual.io/"&gt;Pydantic&lt;/a&gt; is a data validation
library for Python that has seen massive adoption over the last few
years - it is estimated that Pydantic is now used by about 10% of
professional web developers!&lt;/p&gt;
&lt;p&gt;Over the last year I've been working full time to rebuild Pydantic from
the ground up, using Rust for virtually all the validation and
serialization logic. Pydantic V2, with these changes included, has
recently been released.&lt;/p&gt;
&lt;p&gt;In this talk I will give a brief introduction to Pydantic and the new
features in Pydantic V2 before diving into how the use of Rust has
allowed us to completely change the architecture of Pydantic to make it
easier to extend and maintain while also improving performance
significantly.&lt;/p&gt;
&lt;p&gt;The majority of the talk will be devoted to using examples from the
pydantic V2 code base to demonstrate the advantages (and disadvantages)
of writing libraries like Pydantic in Rust. I'll cover the real life
trade-offs and design decisions you might face while implementing logic
in Rust rather than Python.&lt;/p&gt;
&lt;p&gt;This talk should be interesting to any Python developer who's interested
in combining Python and Rust - no knowledge of Rust or Pydantic is
required. However if you'd like to get some context or learn more about
the topics discussed, here are some useful resources:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pydantic-docs.helpmanual.io/blog/pydantic-v2/"&gt;Pydantic V2
Plan&lt;/a&gt; -
blog post about the plan for Pydantic V2&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/pydantic/pydantic-core"&gt;pydantic-core&lt;/a&gt; - the
python package that provides Rust logic in pydantic&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pyo3.rs/"&gt;PyO3 docs&lt;/a&gt; - the amazing library that allows
Rust to be embedded in Python&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=FolV-xUD3Ko"&gt;Build your Python Extensions with Rust! by Paul
Ganssle&lt;/a&gt; - good intro
to building Python extensions in Rust&lt;/li&gt;
&lt;/ul&gt;
</content><category term="PyCon US 2023"></category></entry><entry><title>Introducing Pydantic's new platform (Sponsor: Pydantic)</title><link href="https://pyvideo.org/pycon-us-2024/introducing-pydantics-new-platform-sponsor-pydantic.html" rel="alternate"></link><published>2024-05-16T00:00:00+00:00</published><updated>2024-05-16T00:00:00+00:00</updated><author><name>Samuel Colvin</name></author><id>tag:pyvideo.org,2024-05-16:/pycon-us-2024/introducing-pydantics-new-platform-sponsor-pydantic.html</id><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Come and be the first to hear about what the Pydantic team have been
building!&lt;/p&gt;
&lt;p&gt;We will make a public announcement before PyCon US about what we're
building, and in this presentation we'll explain all and give a demo.&lt;/p&gt;
</content><category term="PyCon US 2024"></category></entry><entry><title>Building AI Applications the Pydantic Way (Sponsor: Pydantic)</title><link href="https://pyvideo.org/pycon-us-2025/building-ai-applications-the-pydantic-way-sponsor-pydantic.html" rel="alternate"></link><published>2025-05-15T00:00:00+00:00</published><updated>2025-05-15T00:00:00+00:00</updated><author><name>Samuel Colvin</name></author><id>tag:pyvideo.org,2025-05-15:/pycon-us-2025/building-ai-applications-the-pydantic-way-sponsor-pydantic.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;AI is becoming an increasingly common part of software development, but best practices for building and maintaining AI-powered applications are still evolving. Many developers are experimenting with LLMs, but figuring out how to structure AI applications effectively—let alone debug and monitor them—can be a challenge. The good …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;AI is becoming an increasingly common part of software development, but best practices for building and maintaining AI-powered applications are still evolving. Many developers are experimenting with LLMs, but figuring out how to structure AI applications effectively—let alone debug and monitor them—can be a challenge. The good news? AI development is just software development—with a few unique twists. You don't need to reinvent engineering principles to work with LLMs, but you do need the right design patterns and development tools to build reliable AI applications efficiently. In this talk, we'll share an opinionated blueprint for AI development in Python, covering both PydanticAI, an open-source AI agent framework, and Pydantic Logfire, an observability platform that helps you understand and debug your AI applications. You'll learn practical techniques for structuring LLM-powered systems, tracking and evaluating model behavior, and integrating AI features into larger software projects—using familiar tools and proven patterns. Whether you're already building AI applications or just curious about how best to approach them, this session will give you a clear, pragmatic foundation for writing AI-powered software in Python.&lt;/p&gt;
</content><category term="PyCon US 2025"></category></entry></feed>