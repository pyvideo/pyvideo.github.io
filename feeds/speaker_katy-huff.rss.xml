<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Sat, 20 May 2017 00:00:00 +0000</lastBuildDate><item><title>Keynote: Do It For Science</title><link>https://pyvideo.org/pycon-us-2017/keynote-do-it-for-science.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Saturday morning keynote by Katy Huff&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Katy Huff</dc:creator><pubDate>Sat, 20 May 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-05-20:pycon-us-2017/keynote-do-it-for-science.html</guid></item><item><title>Keynote</title><link>https://pyvideo.org/pydata-chicago-2016/keynote.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyData Chicago 2016&lt;/p&gt;
&lt;p&gt;Slides: &lt;a class="reference external" href="https://katyhuff.github.io/2016-08-27-pydata/#/"&gt;https://katyhuff.github.io/2016-08-27-pydata/#/&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Katy Huff</dc:creator><pubDate>Sat, 27 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-27:pydata-chicago-2016/keynote.html</guid><category>keynote</category></item><item><title>Version Control and Unit Testing for Scientific Software, SciPy2013 Tutorial, Part 3 of 3</title><link>https://pyvideo.org/scipy-2013/version-control-and-unit-testing-for-scientific-s.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Presenters: Matt Davis, Katy Huff&lt;/p&gt;
&lt;p&gt;Description&lt;/p&gt;
&lt;p&gt;Writing software can be a frustrating process but developers have come
up with ways to make it less stressful and error prone. Version control
saves the history of your project and makes it easier for multiple
people to participate in development. Unit testing and testing
frameworks help ensure the correctness of your code and help you find
errors by quickly executing and testing your entire code base. These
tools can save you time and stress and are valuable to anyone writing
software of any description.&lt;/p&gt;
&lt;p&gt;This collaborative, hands-on tutorial will cover version control with
Git plus writing and running unit tests in Python (and IPython!) using
the nose testing framework. Attendees should be comfortable with the
basics of Python and the command line but no experience with scientific
Python is necessary.&lt;/p&gt;
&lt;p&gt;Outline&lt;/p&gt;
&lt;p&gt;The tutorial will be split into two two-hour lessons. The first lesson
will cover git/GitHub and the second lesson will cover unit testing.
Throughout the entirety of the tutorial students will be working in
pairs. Our teaching style is to have frequent, short exercises for
students. Ideally instructors aren't talking for more than a few minutes
before they stop and students do something on their own machines.
Instructors then give an explanation and example, then move on to the
next item.&lt;/p&gt;
&lt;p&gt;Lesson 1: git/GitHub&lt;/p&gt;
&lt;p&gt;Students will work in pairs and in each pair one student will make a
GitHub repo, then give the other student commit access on that repo.
Students will take turns making modifications to learn various bits of
git functionality.&lt;/p&gt;
&lt;p&gt;Lesson 2: Unit Testing&lt;/p&gt;
&lt;p&gt;Continuing to work in pairs, students will use test driven development
to construct a small scientific program in the IPython Notebook and then
take their work to .py files to see how nose works from the command
line.&lt;/p&gt;
&lt;p&gt;Required Packages&lt;/p&gt;
&lt;p&gt;In addition to standard Python this tutorial will require the nose
testing framework, the IPython Notebook, and the command line interface
to Git. Installing Git varies by platform. Windows users should install
Git Bash (aka msysgit), Mac users should install the Mac OS X Command
Line Tools, and Linux users should use the packaging system for their
particular Linux distribution. The Anaconda CE Python installer includes
nose and the IPython Notebook.&lt;/p&gt;
&lt;p&gt;Documentation&lt;/p&gt;
&lt;p&gt;Material will be adapted from existing Software Carpentry lessons,
especially:
&lt;a class="reference external" href="https://github.com/swcarpentry/boot-camps/tree/master/version-control/git/git-and-github"&gt;https://github.com/swcarpentry/boot-camps/tree/master/version-control/git/git-and-github&lt;/a&gt;
&lt;a class="reference external" href="https://github.com/swcarpentry/boot-camps/tree/master/python/sw_engineering"&gt;https://github.com/swcarpentry/boot-camps/tree/master/python/sw_engineering&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Other links: &lt;a class="reference external" href="http://software-carpentry.org/"&gt;http://software-carpentry.org/&lt;/a&gt; - The software carpentry
organization with links to many lessons and past boot camps.
&lt;a class="reference external" href="https://github.com/swcarpentry/boot-camps"&gt;https://github.com/swcarpentry/boot-camps&lt;/a&gt; - Standard Software Carpentry
boot camp curriculum. &lt;a class="reference external" href="https://github.com/thehackerwithin/PyTrieste/wiki"&gt;https://github.com/thehackerwithin/PyTrieste/wiki&lt;/a&gt;
- Early Software Carpentry curriculum from a two week boot camp at the
International Center for Theoretical Physics.
&lt;a class="reference external" href="https://code.google.com/p/hacker-within/w/list"&gt;https://code.google.com/p/hacker-within/w/list&lt;/a&gt; - Lesson notes for a
three hour lightning lesson at the American Nuclear Society Conference
2011.
&lt;a class="reference external" href="http://software-carpentry.org/blog/2012/02/trieste-italy-workshop-week-1.html"&gt;http://software-carpentry.org/blog/2012/02/trieste-italy-workshop-week-1.html&lt;/a&gt;
- A blog post about the first week of the two week ICTP boot camp.
&lt;a class="reference external" href="http://software-carpentry.org/blog/2012/04/lessons-learned-at-the-university-of-chicago.html"&gt;http://software-carpentry.org/blog/2012/04/lessons-learned-at-the-university-of-chicago.html&lt;/a&gt;
- A blog post about a two day boot camp at the University of Chicago.
&lt;a class="reference external" href="http://software-carpentry.org/blog/2011/11/knowledge-of-the-second-kind.html"&gt;http://software-carpentry.org/blog/2011/11/knowledge-of-the-second-kind.html&lt;/a&gt;
- A blog post about what the hacker within did before it was absorbed
into Software Carpentry (it's no longer really its own entity).&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Matt Davis</dc:creator><pubDate>Thu, 27 Jun 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-06-27:scipy-2013/version-control-and-unit-testing-for-scientific-s.html</guid><category>lightning talks</category><category>Tech</category></item><item><title>You Win or You SciPy</title><link>https://pyvideo.org/scipy-2014/you-win-or-you-scipy.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Reflections on the State of Scientific Python&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python is currently one of the most popular programming languages and it
seems that that Scientific Python has truly hit its stride in recent
years. With fame comes a deluge of users, but not necessarily any more
developers. Scientific Python is often held up as one of the core
strengths of the Python language. Why is this so? And how much does it
actually help us? This talk intends to be a frank discussion on the
great parts of the SciPy community and the parts that need work.&lt;/p&gt;
&lt;p&gt;As a confederation of packages and projects, there are several issues
that affect everyone. Sometimes these issues fall through the cracks and
other times they are vigorously tackled head on. In either case, I posit
that greater communication about these global topics is necessary to
support and scale to the next wave of SciPy users and developers.&lt;/p&gt;
&lt;p&gt;Points of discussion in this talk may include:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Packaging,&lt;/li&gt;
&lt;li&gt;Education,&lt;/li&gt;
&lt;li&gt;Matplotlib - aged or awesome,&lt;/li&gt;
&lt;li&gt;Competition from other languages,&lt;/li&gt;
&lt;li&gt;Diversity,&lt;/li&gt;
&lt;li&gt;Employing our own,&lt;/li&gt;
&lt;li&gt;Interfacing with the broader Python community,&lt;/li&gt;
&lt;li&gt;The legal status of projects, and&lt;/li&gt;
&lt;li&gt;Maintaining critical packages in the ecosystem (when devs have moved
on).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Historically, the SciPy conference has not had many overview talks,
talks about the community itself, what we are doing right, and what we
are doing wrong.&lt;/p&gt;
&lt;p&gt;They were often relegated to keynotes if they were present at all. This
talk is a boots-on-the-ground attempt to rectify that.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andy Terrel</dc:creator><pubDate>Wed, 09 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-09:scipy-2014/you-win-or-you-scipy.html</guid></item></channel></rss>