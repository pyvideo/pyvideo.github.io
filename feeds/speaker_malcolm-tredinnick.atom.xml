<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_malcolm-tredinnick.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2012-09-05T00:00:00+00:00</updated><entry><title>Functional Programming in Python</title><link href="https://pyvideo.org/pycon-philippines-2012/functional-programming-in-python.html" rel="alternate"></link><published>2012-06-30T00:00:00+00:00</published><updated>2012-06-30T00:00:00+00:00</updated><author><name>Malcolm Tredinnick</name></author><id>tag:pyvideo.org,2012-06-30:pycon-philippines-2012/functional-programming-in-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Intro to functional programming using Python.&lt;/p&gt;
</summary><category term="functional programming"></category></entry><entry><title>Maps of Imaginary Lands</title><link href="https://pyvideo.org/pycon-philippines-2012/maps-of-imaginary-lands.html" rel="alternate"></link><published>2012-06-30T00:00:00+00:00</published><updated>2012-06-30T00:00:00+00:00</updated><author><name>Malcolm Tredinnick</name></author><id>tag:pyvideo.org,2012-06-30:pycon-philippines-2012/maps-of-imaginary-lands.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Assemble the components necessary to create a map of an imaginary location.&lt;/p&gt;
</summary><category term="cartography"></category><category term="mapping"></category><category term="maps"></category><category term="gimp"></category></entry><entry><title>DjangoCon 2008: Code Writing and Design</title><link href="https://pyvideo.org/djangocon-us-2008/djangocon-2008-code-writing-and-design.html" rel="alternate"></link><published>2008-09-06T00:00:00+00:00</published><updated>2008-09-06T00:00:00+00:00</updated><author><name>Malcolm Tredinnick</name></author><id>tag:pyvideo.org,2008-09-06:djangocon-us-2008/djangocon-2008-code-writing-and-design.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Speaker: Malcolm Tredinnick&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.djangocon.org"&gt;http://www.djangocon.org&lt;/a&gt;&lt;/p&gt;
</summary><category term="Django"></category><category term="djangocon"></category><category term="djangocon2008"></category></entry><entry><title>DjangoCon 2008: Inside the ORM</title><link href="https://pyvideo.org/djangocon-us-2008/djangocon-2008-inside-the-orm.html" rel="alternate"></link><published>2008-09-06T00:00:00+00:00</published><updated>2008-09-06T00:00:00+00:00</updated><author><name>Malcolm Tredinnick</name></author><id>tag:pyvideo.org,2008-09-06:djangocon-us-2008/djangocon-2008-inside-the-orm.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Speaker: Malcolm Tredinnick&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http:/www.djangocon.org"&gt;http:/www.djangocon.org&lt;/a&gt;&lt;/p&gt;
</summary><category term="Django"></category><category term="djangocon"></category><category term="djangocon2008"></category></entry><entry><title>DjangoCon 2008 Panel: Django Technical Design</title><link href="https://pyvideo.org/djangocon-us-2008/djangocon-2008-panel-django-technical-design.html" rel="alternate"></link><published>2008-09-06T00:00:00+00:00</published><updated>2008-09-06T00:00:00+00:00</updated><author><name>Michael Trier</name></author><id>tag:pyvideo.org,2008-09-06:djangocon-us-2008/djangocon-2008-panel-django-technical-design.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Moderated by Michael Trier&lt;/p&gt;
&lt;p&gt;Panelists: Jacob Kaplan-Moss, Adrian Holovaty, Simon Willison, James Bennett, Malcolm Tredinnick&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.djangocon.org"&gt;http://www.djangocon.org&lt;/a&gt;&lt;/p&gt;
</summary><category term="Django"></category><category term="panel"></category><category term="djangocon"></category><category term="djangocon2008"></category></entry><entry><title>Multi-database patterns</title><link href="https://pyvideo.org/djangocon-us-2010/djangocon-2010--multi-database-patterns.html" rel="alternate"></link><published>2010-09-09T00:00:00+00:00</published><updated>2010-09-09T00:00:00+00:00</updated><author><name>Malcolm Tredinnick</name></author><id>tag:pyvideo.org,2010-09-09:djangocon-us-2010/djangocon-2010--multi-database-patterns.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A tour through four common &amp;quot;multiple database&amp;quot; usage patterns and how
they can be implemented and utilised with Django. We'll talk about the
strengths and weaknesses of each pattern and why you might not need any
of them.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;There are a few good reasons a system might want to interact regularly
with multiple databases. “Because it’s what cool people do” is not one
of those reasons. Most multi-database usages fall into one of four main
classes:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Separation by function. All data of one type in one database, all
data of another type in some other database.&lt;/li&gt;
&lt;li&gt;Separation by sharding. Data of a particular type (e.g. user records)
is split across multiple databases, each database holding a shard of
the whole data.&lt;/li&gt;
&lt;li&gt;Data replication (separation by access). Some pieces of data are
synchronized to multiple machines. Writes might go into one or more
masters and reads normally come from the slaves.&lt;/li&gt;
&lt;li&gt;Data augmentation/shadowing. Data in one database is added to or
entirely replaced by data from another database. Can happen during
development when reading from a production snapshot whilst trying out
changes to some tables or data only against a local database.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Obviously, combinations of these classes are possible, such as
replicated sharded data in a huge site. There are tricks and traps to
the way a developer talks to each of these sorts of setups. I'll spend a
few minutes showing credible examples of the usage of each as well as
when you might be over- engineering by going that way. All four access
patterns are possible in Django 1.2, with varying degrees of ease of use
and I'll show the type of code required in each case.&lt;/p&gt;
</summary><category term="database"></category><category term="djangocon"></category><category term="djangocon2010"></category><category term="multipledatabases"></category></entry><entry><title>Modeling challenges</title><link href="https://pyvideo.org/djangocon-us-2010/djangocon-2010--modeling-challenges.html" rel="alternate"></link><published>2010-09-08T00:00:00+00:00</published><updated>2010-09-08T00:00:00+00:00</updated><author><name>Malcolm Tredinnick</name></author><id>tag:pyvideo.org,2010-09-08:djangocon-us-2010/djangocon-2010--modeling-challenges.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;How would you model players, umpires and coaches in baseball data when
the same person can switch roles over the course of their life? How
about servers in racks with power boards attached (and cords running
across the room to remote boards)? Come along to see one approach to
create minimal and well- performing models for such real-life
situations.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;The slightly over-simplified but useful rule of thumb when creating
database schema is “normalize until it hurts, [then] denormalize until
it works.” If only people didn’t skip the first step so often. Using a
data modeling layer, such as Django's models, doesn't absolve the system
architects from the need to create good design. It also doesn't require
them to do so, since you can get away with a lot of sub-optimality with
many data sets.&lt;/p&gt;
&lt;p&gt;The real difficulty here, though, is that the trade-off between
text-book ideal modeling and easy to use is difficult to judge and takes
practice to develop.&lt;/p&gt;
&lt;p&gt;This talk will walk some interesting cases of model design that I've
encountered recently. I'll explain how I approached the problem and what
we ended up with. These will include:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Modeling people who might simultaneously play different roles in the
system. For example, a person who was a baseball player and then
became a coach — each role has different attributes attached to it.&lt;/li&gt;
&lt;li&gt;Modeling what appears to be a triangular dependency relationship with
minimal redundancy in the data description and without needing really
long query filters to access things.&lt;/li&gt;
&lt;li&gt;Handling date ranges (or other measured data) of different degrees of
accuracy and precision.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This won't be a talk on theoretical database design. Rather, concrete
examples of creating such designs and guiding the decisions by what
might work best in the final Django code. Hopefully, by listening to one
person's approach (mine!), people faced with similar challenges will
have another possible attack method in their toolbox.&lt;/p&gt;
</summary><category term="djangocon"></category><category term="djangocon2010"></category><category term="model"></category></entry><entry><title>Maps of Imaginary Lands</title><link href="https://pyvideo.org/djangocon-us-2010/djangocon-2010--maps-of-imaginary-lands.html" rel="alternate"></link><published>2010-09-07T00:00:00+00:00</published><updated>2010-09-07T00:00:00+00:00</updated><author><name>Malcolm Tredinnick</name></author><id>tag:pyvideo.org,2010-09-07:djangocon-us-2010/djangocon-2010--maps-of-imaginary-lands.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The GIS features of Django aren't restricted to being applied to real
world maps and planets. This talk will show how to display and interact
with maps of imaginary lands, such as game maps or lands in science
fiction novels. We'll uncover a bit of how Django GIS works in the
process, separating the map display from the modeling.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;Whilst django.contrib.gis isn't particularly difficult to get started
with, particularly if you follow the tutorials, it can sometimes seem a
bit overwhelming in the way it goes from zero to fancy maps in only a
couple of steps. I'd like to demystify some of the pieces of the stack,
pulling apart the modeling support — specifying the data are we trying
to work with — from the display and client-side portion.&lt;/p&gt;
&lt;p&gt;To make this more than a dry technical dive, I'll show how to add extras
to an imaginary map, rather than something pulled from Google Maps or
Open Street Map. We'll take on the task of plotting features on a
landscape from a potential role-playing game and show how the GIS data
manipulation features, such as calculating region intersections, nearby
points, and javascript client-side display work the in a familiar way
against this slightly unusual background.&lt;/p&gt;
&lt;p&gt;Some basic familiarity with Django's GIS features would be useful for
this talk, although it might also serve as a motivating introduction to
trying things out. The code shown will be available for download after
the talk.&lt;/p&gt;
</summary><category term="djangocon"></category><category term="djangocon2010"></category><category term="geodjango"></category><category term="gis"></category></entry><entry><title>The Dungeon Master's guide to Django's ORM</title><link href="https://pyvideo.org/djangocon-us-2012/the-dungeon-masters-guide-to-djangos-orm.html" rel="alternate"></link><published>2012-09-05T00:00:00+00:00</published><updated>2012-09-05T00:00:00+00:00</updated><author><name>Malcolm Tredinnick</name></author><id>tag:pyvideo.org,2012-09-05:djangocon-us-2012/the-dungeon-masters-guide-to-djangos-orm.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;If you've ever been curious about Django's ORM implementation, you will
have noticed the required learning curve. Some of the code is fairly
complicated. Other bits are worse. Here comes a 30 or 40 minute guided
tour of the uncharted realms: how the pieces fit together, where to look
for things, why the current design is what it is. A portion of this is
my fault; I should probably explain myself.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Django's database layer is a necessarily complicated piece of code. It
is a very powerful API that works more or less seamlessly across
multiple database storage systems, smoothing over many of the
inconsistencies and implementation differences that go with the
territory. This is great for developers who use Django.&lt;/p&gt;
&lt;p&gt;It's a little less awesome for the maintainers of that code; working in
that environment is fairly difficult. Still, we all like a challenge.
Problem is: where to start? Coming to grips with the ORM code isn't
easy. The code is well written and documented, but the entry points are
particularly well highlighted and, really, the sheer mass of code is an
obstacle to be overcome.&lt;/p&gt;
&lt;p&gt;This talk will look at the various layers of the ORM, from the public
gateways, to the semi-public doors into the implementation, to the
deeper internals and down to the interaction with databases. In effect,
following the journey of a couple of adventurous young queries as they
traverse the pathways to bring back some data, smelted into just the
right format.&lt;/p&gt;
&lt;p&gt;The goal is to provide some kind of mental map of the code. Some tips
for orienting yourself in the future and how to examine new nooks and
corners without losing your mind. We obviously cannot cover everything,
but let's go over the common paths and show how the other pieces hang
off that backbone.&lt;/p&gt;
&lt;p&gt;Along the way, we'll put some of the details into historical
perspective. Getting inside the mind of previous adventurers might help
understand why things are the way they are.&lt;/p&gt;
</summary><category term="django"></category><category term="django-orm"></category></entry><entry><title>PyConAU 2010: Displaying Australian datasets with Django</title><link href="https://pyvideo.org/pycon-au-2010/pyconau-2010--displaying-australian-datasets-with.html" rel="alternate"></link><published>2010-06-26T00:00:00+00:00</published><updated>2010-06-26T00:00:00+00:00</updated><author><name>Malcolm Tredinnick</name></author><id>tag:pyvideo.org,2010-06-26:pycon-au-2010/pyconau-2010--displaying-australian-datasets-with.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Displaying Australian datasets with Django&lt;/p&gt;
&lt;p&gt;Presented by Malcolm Tredinnick&lt;/p&gt;
&lt;p&gt;The last 18 months or so in Australia have seen an increased number of
government and public sector organisations releasing datasets to the
public under reasonable reuse terms (often Creative Commons license).
This talk will take a couple of those local real-world datasets and
create a minimal website for remixing them, using Django as the
underlying framework. The goals are to provide a short walk through the
process of importing and extracting such data in practice, show how to
incorporate Django's GIS features into an application, as well as
highlighting that real world is messy and so is the data it produces.
Working with datasets for journalism or research purposes, or simply
fun, requires a certain attention to detail.&lt;/p&gt;
&lt;p&gt;Basic knowledge of Django is assumed, although the GIS components will
be introduced carefully as they are less familiar to many developers.&lt;/p&gt;
</summary><category term="datasets"></category><category term="gis"></category><category term="pyconau"></category><category term="pyconau2010"></category></entry><entry><title>Behaviour Driven Development</title><link href="https://pyvideo.org/pycon-au-2011/behaviour-driven-development.html" rel="alternate"></link><published>2011-08-22T00:00:00+00:00</published><updated>2011-08-22T00:00:00+00:00</updated><author><name>Malcolm Tredinnick</name></author><id>tag:pyvideo.org,2011-08-22:pycon-au-2011/behaviour-driven-development.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Writing software in an organisation or for ourselves, many people feel
that they &amp;quot;should&amp;quot; somehow be doing Test Driven Development (TDD)
because &amp;quot;everybody else&amp;quot; is and it's cool, somewhere between necessary
and useful and they heard testing was good. When informed that must of
TDD isn't about testing (despite the name!), confusion reigns. Behaviour
Driven Development is a different way of approaching the &amp;quot;how to
validate your code&amp;quot; problem.&lt;/p&gt;
</summary><category term="tdd"></category><category term="testing"></category></entry><entry><title>Panel: Python in the webs</title><link href="https://pyvideo.org/pycon-au-2011/panel-python-in-the-webs.html" rel="alternate"></link><published>2011-08-22T00:00:00+00:00</published><updated>2011-08-22T00:00:00+00:00</updated><author><name>Dylan Jay</name></author><id>tag:pyvideo.org,2011-08-22:pycon-au-2011/panel-python-in-the-webs.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;This will be a panel discussion wherein we wax philosophical about the
state of web frameworks in Python - talking about invention,
reinvention, multitudes of choice, how all of them suck, etc. Panelists
will include Dylan Jay, Malcolm Tredinnick, Russell Keith-Magee and
Richard Jones.&lt;/p&gt;
</summary><category term="panel"></category><category term="web"></category></entry></feed>