<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_mike-biglan.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2012-09-06T00:00:00+00:00</updated><entry><title>Where Django Caching Busts at the Seams</title><link href="https://pyvideo.org/djangocon-us-2012/where-django-caching-busts-at-the-seams.html" rel="alternate"></link><published>2012-09-06T00:00:00+00:00</published><updated>2012-09-06T00:00:00+00:00</updated><author><name>Kyle Rimkus</name></author><id>tag:pyvideo.org,2012-09-06:djangocon-us-2012/where-django-caching-busts-at-the-seams.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Most mid-sized Django websites thrive by relying on memcached. Though
what happens when basic memcached is not enough? And how can one
identify when the caching architecture is becoming a bottleneck? We'll
cover the problems we've encountered and solutions we've put in place.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Most mid-sized Django websites thrive by relying on memcached. Though
what happens when basic memcached is not enough? And how can one
identify when the caching architecture is becoming a bottleneck? We'll
cover the problems we've encountered and solutions we've put in place.&lt;/p&gt;
&lt;p&gt;The following highlight the issues we'll discuss during the talk:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Cache Warming. For content that will likely be in demand, getting it
ready in cache before use is a helpful start.&lt;/li&gt;
&lt;li&gt;Two-tier caching. In multi-server environments, certain content that
changes infrequently and has high-demand can be cached locally on
each server. In these cases, having methods to burn the cache on each
server becomes critical.&lt;/li&gt;
&lt;li&gt;Categorizing Cache. If good estimates exist for the expected demand
of certain cache as well as the frequency of change, this can lead to
better insight into when to warm that content as well as whether to
cache it locally.&lt;/li&gt;
&lt;li&gt;Caching comparison with memcached vs. reddis vs. mongo&lt;/li&gt;
&lt;li&gt;Cachemodel. Our open-source, mini-framework for simplifying caching
in Django.&lt;/li&gt;
&lt;li&gt;Adding servers to memcached. And consistent hashing algorithms to
avoid having to burn all cache when the cache cluster changes in
size.&lt;/li&gt;
&lt;li&gt;Elasticache on AWS.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As caching problems become more common, better layers and
mini-frameworks will help simplify and elegantly solve some of these
problems.&lt;/p&gt;
</summary><category term="caching"></category><category term="django"></category></entry></feed>