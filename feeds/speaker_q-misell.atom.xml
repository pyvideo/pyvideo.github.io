<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_q-misell.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2018-09-16T00:00:00+00:00</updated><entry><title>Running (a subset) of python on the BBC Micro</title><link href="https://pyvideo.org/pycon-uk-2018/running-a-subset-of-python-on-the-bbc-micro.html" rel="alternate"></link><published>2018-09-16T00:00:00+00:00</published><updated>2018-09-16T00:00:00+00:00</updated><author><name>Q Misell</name></author><id>tag:pyvideo.org,2018-09-16:pycon-uk-2018/running-a-subset-of-python-on-the-bbc-micro.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Yes, the one from the 80's. Yes, I'm a little mad.&lt;/p&gt;
&lt;p&gt;Following on from my talk last year on making a C compiler for the BBC
Micro, I will be using said compiler to write and run a python
interpreter that can run on the BBC Micro. Come to learn about how
compilers work in general, how python is technically a compiled and
interpreted language, the struggles I had fitting as much as possible of
python into 64K of RAM and ROM, and some interesting things I learnt
about python along the way. If you already know a lot about compilers
then this may be the talk for you, as it's not every day you have to fit
a compiler into such limited RAM, and such a limited instruction set.&lt;/p&gt;
</summary></entry></feed>