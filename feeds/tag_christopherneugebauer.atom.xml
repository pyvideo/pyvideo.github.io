<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org - ChristopherNeugebauer</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/tag_christopherneugebauer.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2021-09-11T00:00:00+00:00</updated><subtitle></subtitle><entry><title>Practicality Beats Purity: The Zen of Python’s Escape Hatch?</title><link href="https://pyvideo.org/pycon-au-2020/practicality-beats-purity-the-zen-of-pythons-escape-hatch.html" rel="alternate"></link><published>2020-09-05T00:00:00+00:00</published><updated>2020-09-05T00:00:00+00:00</updated><author><name>Christopher Neugebauer</name></author><id>tag:pyvideo.org,2020-09-05:/pycon-au-2020/practicality-beats-purity-the-zen-of-pythons-escape-hatch.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Christopher Neugebauer&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://2020.pycon.org.au/program/VVNEZR"&gt;https://2020.pycon.org.au/program/VVNEZR&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;When you type “import this” into a Python interpreter, you get PEP-20, 20* aphorisms that describe what “Good” Python code looks like. Most of these are prescriptive, and have been used to settle countless arguments about how Python should grow …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Christopher Neugebauer&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://2020.pycon.org.au/program/VVNEZR"&gt;https://2020.pycon.org.au/program/VVNEZR&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;When you type “import this” into a Python interpreter, you get PEP-20, 20* aphorisms that describe what “Good” Python code looks like. Most of these are prescriptive, and have been used to settle countless arguments about how Python should grow, or how new ideas should be implemented.&lt;/p&gt;
&lt;p&gt;But in these 20 aphorisms (which you may know as the “Zen of Python”), there are some inherent contradictions.&lt;/p&gt;
&lt;p&gt;When “explicit is better than implicit” and “simple is better than complex”, what does it mean when being explicit means you must introduce complexity?&lt;/p&gt;
&lt;p&gt;When “readability counts” and “special cases aren’t special enough to break the rules”, what does it mean when making code more readable presents a special case in your codebase?&lt;/p&gt;
&lt;p&gt;The answer lies in one often-forgotten aphorism: “practicality beats purity”. When you can weigh practicality as a factor, you can decide that other factors are restrictive, and discard them as “impractical”. This idea shows up in many places in Python:&lt;/p&gt;
&lt;p&gt;Type hints can help you to be explicit, but they introduce complexity. Focusing on practicality means you can adopt type hints only when you need them. Decorators are simple, but can be used to introduce ambiguity. In many cases, the practical benefits of decorators outweigh their potential for misuse.&lt;/p&gt;
&lt;p&gt;But how far can the pursuit of practicality let you go? Does practicality let you treat the other 19 aphorisms as optional? Does practicality give you an escape hatch from the rest of the Zen of Python?&lt;/p&gt;
&lt;p&gt;In this talk, we’ll look at how practicality has been a guiding principle in the evolution of Python. We’ll look at how to weigh practicality in the face of the other 19 aphorisms of PEP-20, and we’ll look at how focusing on practicality can guide you towards these other attributes of good Python.&lt;/p&gt;
&lt;p&gt;(* per PEP-20, the Zen of Python contains “20 aphorisms, only 19 of which have been written down.”)&lt;/p&gt;
&lt;p&gt;Produced by NDV: &lt;a class="reference external" href="https://youtube.com/channel/UCQ7dFBzZGlBvtU2hCecsBBg?sub_confirmation=1"&gt;https://youtube.com/channel/UCQ7dFBzZGlBvtU2hCecsBBg?sub_confirmation=1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Python, PyCon, PyConAU, PyConline&lt;/p&gt;
&lt;p&gt;Sat Sep  5 10:25:00 2020 at Curlyboi&lt;/p&gt;
</content><category term="PyCon AU 2020"></category><category term="ChristopherNeugebauer"></category><category term="PyCon"></category><category term="PyConAU"></category><category term="PyConline"></category><category term="Python"></category><category term="pyconau"></category><category term="pyconau_2020"></category></entry><entry><title>Lightning talks</title><link href="https://pyvideo.org/pycon-au-2021/lightning-talks.html" rel="alternate"></link><published>2021-09-11T00:00:00+00:00</published><updated>2021-09-11T00:00:00+00:00</updated><author><name>Christopher Neugebauer</name></author><id>tag:pyvideo.org,2021-09-11:/pycon-au-2021/lightning-talks.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;(Christopher Neugebauer, Libby Berrie) The well-loved PyCon AU Lightning talks is back!&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://2021.pycon.org.au/program/83XWJW/"&gt;https://2021.pycon.org.au/program/83XWJW/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;0:00 Introduction
1:40 Tyson Clugg - Python in ALL the files!
7:01 Daniel - Racing networkx and Tackling Code Complexity
12:16 Geoffrey Pidcock - 2 minutes of meditation
17 …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;(Christopher Neugebauer, Libby Berrie) The well-loved PyCon AU Lightning talks is back!&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://2021.pycon.org.au/program/83XWJW/"&gt;https://2021.pycon.org.au/program/83XWJW/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;0:00 Introduction
1:40 Tyson Clugg - Python in ALL the files!
7:01 Daniel - Racing networkx and Tackling Code Complexity
12:16 Geoffrey Pidcock - 2 minutes of meditation
17:45 Tim Savage - LED Curlyboi
23:14 Matt Cengia - Workplace accommodations for neurodivergent accessbility
28:00 Jens Harbers - Statistics of Grassland in Lower Saxony
32:15 Quentin Lovett - obfuscational logic: binary adders where they shouldn't be
36:25 Wytamma Wirth - Finding parasites with python
41:34 Zac - I wrote code to write your tests!
46:54 Riley Clement - Where are the stairs?
51:51 Evan Kohilas - My email
55:40 Apollo Bradshaw - Welcome to my quantum gender reveal party
1:01:07 David Vo - N git commands you didn't know about
1:04:30 Paul Leopardi - Privacy preservation in machine learning: wondering out loud
1:07:40 Peter Hall - Help set my alarm clock
1:13:18 Caitlin M - Speedrunning Lessons
1:18:50 Marius Mather - Generating metal band names with tensorflow&lt;/p&gt;
&lt;p&gt;python, pycon, australia, programming, conference, technical, pyconline, developers, panel, sessions, libraries, frameworks, community, sysadmins, students, education, data, science&lt;/p&gt;
&lt;p&gt;Videos licensed as CC-BY-NC-SA 4.0&lt;/p&gt;
&lt;p&gt;PyCon AU is the national conference for the Python programming community, bringing together professional, student and enthusiast developers, sysadmins and operations folk, students, educators, scientists, statisticians, and many others besides, all with a love for working with Python.&lt;/p&gt;
&lt;p&gt;PyCon AU informs the country’s Python developers with presentations, tutorials and panel sessions by experts and core developers of Python, as well as the libraries and frameworks that they rely on.&lt;/p&gt;
&lt;p&gt;Produced by Next Day Video Australia: &lt;a class="reference external" href="https://nextdayvideo.com.au"&gt;https://nextdayvideo.com.au&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Sun Sep 12 11:00:00 2021 at Curlyboi Theatre&lt;/p&gt;
</content><category term="PyCon AU 2021"></category><category term="ChristopherNeugebauer"></category><category term="LibbyBerrie"></category><category term="pyconau"></category><category term="pyconau_2021"></category></entry><entry><title>On the Use and Misuse of Decorators</title><link href="https://pyvideo.org/pycon-au-2021/on-the-use-and-misuse-of-decorators.html" rel="alternate"></link><published>2021-09-11T00:00:00+00:00</published><updated>2021-09-11T00:00:00+00:00</updated><author><name>Christopher Neugebauer</name></author><id>tag:pyvideo.org,2021-09-11:/pycon-au-2021/on-the-use-and-misuse-of-decorators.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;(Christopher Neugebauer) What is a decorator? You might say it's a function that accepts a function and returns a function. That's wrong.&lt;/p&gt;
&lt;p&gt;So what's the right answer?&lt;/p&gt;
&lt;p&gt;Join us for a deep (but standard talk-length) dive into decorators!  You’ll learn what decorators actually are, how they work, how …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;(Christopher Neugebauer) What is a decorator? You might say it's a function that accepts a function and returns a function. That's wrong.&lt;/p&gt;
&lt;p&gt;So what's the right answer?&lt;/p&gt;
&lt;p&gt;Join us for a deep (but standard talk-length) dive into decorators!  You’ll learn what decorators actually are, how they work, how to write your own decorators, and how decorators enable you to do extremely weird things in Python. Most importantly, you’ll understand how to use decorators responsibly, and definitely not to confuse your friends and colleagues.&lt;/p&gt;
&lt;p&gt;python, pycon, australia, programming, conference, technical, pyconline, developers, panel, sessions, libraries, frameworks, community, sysadmins, students, education, data, science&lt;/p&gt;
&lt;p&gt;Videos licensed as CC-BY-NC-SA 4.0&lt;/p&gt;
&lt;p&gt;PyCon AU is the national conference for the Python programming community, bringing together professional, student and enthusiast developers, sysadmins and operations folk, students, educators, scientists, statisticians, and many others besides, all with a love for working with Python.&lt;/p&gt;
&lt;p&gt;PyCon AU informs the country’s Python developers with presentations, tutorials and panel sessions by experts and core developers of Python, as well as the libraries and frameworks that they rely on.&lt;/p&gt;
&lt;p&gt;Produced by Next Day Video Australia: &lt;a class="reference external" href="https://nextdayvideo.com.au"&gt;https://nextdayvideo.com.au&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Sat Sep 11 10:30:00 2021 at Platypus Hall&lt;/p&gt;
</content><category term="PyCon AU 2021"></category><category term="ChristopherNeugebauer"></category><category term="pyconau"></category><category term="pyconau_2021"></category></entry></feed>