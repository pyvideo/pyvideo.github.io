<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/event_pycon-japan-2016.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2016-09-22T00:00:00+00:00</updated><entry><title>Building a data preparation pipeline with Pandas and AWS Lambda</title><link href="https://pyvideo.org/pycon-japan-2016/building-a-data-preparation-pipeline-with-pandas-and-aws-lambda.html" rel="alternate"></link><published>2016-09-22T00:00:00+00:00</published><updated>2016-09-22T00:00:00+00:00</updated><author><name>Fabian Dubois</name></author><id>tag:pyvideo.org,2016-09-22:pycon-japan-2016/building-a-data-preparation-pipeline-with-pandas-and-aws-lambda.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;When working on a data project, you will be often be facing messy input files with lots of missing or ill formatted values. Data providers may update manually, making the data source even more error prone. Once you geed the data to a data visualization or a dashboard, this will create many issues. I will show how to create a data preparation pipeline using with Pandas running on AWS Lambda.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;In the talk, I will first review typical cases where a data scientist or data application developper may be faced with dirty data in unpractical formats (think excel files). I will in particular discuss my experience building data visualization in a data journalism environment here data is gathered and updated manually.&lt;/p&gt;
&lt;p&gt;I will present alternative tools that are available on the market (Talend Dataprep, Trifacta wrangler for example), and explain why you may want to roll out your own solution. Then we will see how we can use python and pandas to clean the data, first by interacting with it in a jupyter notebook, then making it into a script.&lt;/p&gt;
&lt;p&gt;Finally, we will see how to streamline the preparation using AWS Lambda, in an example where will will automatically run our process whenever data is updated in a google spreadsheet, and uploading the clean dataset on AWS S3.&lt;/p&gt;
</summary></entry><entry><title>Building An Interpreter In RPython</title><link href="https://pyvideo.org/pycon-japan-2016/building-an-interpreter-in-rpython.html" rel="alternate"></link><published>2016-09-22T00:00:00+00:00</published><updated>2016-09-22T00:00:00+00:00</updated><author><name>Juozas Kaziukenas</name></author><id>tag:pyvideo.org,2016-09-22:pycon-japan-2016/building-an-interpreter-in-rpython.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;To understand how dynamic programming languages get executed I set out to build a PHP interpreter. Not a joke, I really did it and it worked! The final result was a well-tested piece of Python code, which could be compiled to be very performant as well. The goal of this talk is to introduce you to the basics of interpreters and the tools available in RPython to build one.&lt;/p&gt;
&lt;div class="section" id="abstract"&gt;
&lt;h4&gt;Abstract&lt;/h4&gt;
&lt;p&gt;To understand how dynamic programming languages get executed I set out to build a PHP interpreter. Not a joke, I really did it and it worked! The final result was a well-tested piece of Python code, which could be compiled to be very performant as well. It's available as an open source project on github &lt;a class="reference external" href="http://github.com/juokaz/pyhp"&gt;http://github.com/juokaz/pyhp&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>はじめて作るDjangoプラグイン</title><link href="https://pyvideo.org/pycon-japan-2016/hazimetezuo-rudjangopuraguin.html" rel="alternate"></link><published>2016-09-22T00:00:00+00:00</published><updated>2016-09-22T00:00:00+00:00</updated><author><name>Kohki Miki</name></author><id>tag:pyvideo.org,2016-09-22:pycon-japan-2016/hazimetezuo-rudjangopuraguin.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python製のWeb ApplicationフレームワークであるDjango向けのプラグイン開発を題材に、Pythonライブラリをホスティングするためのベストプラクティスをお伝えします。 また、開発したDjangoプラグインを複数バージョンのPython2, 3とDjangoに対応し、テストを記述する方法やCI環境の構築、テスティング手法、PYPIへのサブミットまでの手順を紹介します。&lt;/p&gt;
&lt;div class="section" id="abstract"&gt;
&lt;h4&gt;Abstract&lt;/h4&gt;
&lt;p&gt;簡単なDjangoプラグインを開発し、公開するまでの一連の流れについてご紹介します。&lt;/p&gt;
&lt;p&gt;このセッションはDjangoユーザーだけではなく、Pythonプラグイン開発をしてみたい全ての開発者を対象としています。&lt;/p&gt;
&lt;p&gt;また、プラグインを開発するだけではなく、以下のような内容について中心に説明し、利用しやすいライブラリの開発を目指します。&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h5&gt;複数バージョン対応&lt;/h5&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;近年のDjangoのバージョンごとの違いに触れ、後方互換性を持ったプラグインの作成する&lt;/li&gt;
&lt;li&gt;Python2, 3両方で動作可能なコードを記述する&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h5&gt;テスト手法&lt;/h5&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Django標準のテストフレームワークを使ったテストの記述方法&lt;/li&gt;
&lt;li&gt;toxを利用した複数バージョンのテスト&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h5&gt;ドキュメンテーション&lt;/h5&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Sphinxを用いてドキュメントを記述し、公開する&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="ci"&gt;
&lt;h5&gt;CI&lt;/h5&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Travis CIを用いたCI環境の構築手法&lt;/li&gt;
&lt;li&gt;Coveralls, requires.ioなど、便利な開発者向けサービスの利用事例&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary></entry><entry><title>Lightning Talks. Pycon JP 2016-09-22</title><link href="https://pyvideo.org/pycon-japan-2016/lightning-talks-pycon-jp-2016-09-22.html" rel="alternate"></link><published>2016-09-22T00:00:00+00:00</published><updated>2016-09-22T00:00:00+00:00</updated><author><name>Various speakers</name></author><id>tag:pyvideo.org,2016-09-22:pycon-japan-2016/lightning-talks-pycon-jp-2016-09-22.html</id><summary type="html"></summary><category term="lightning talks"></category></entry><entry><title>メタプログラミングPython</title><link href="https://pyvideo.org/pycon-japan-2016/metapuroguramingupython.html" rel="alternate"></link><published>2016-09-22T00:00:00+00:00</published><updated>2016-09-22T00:00:00+00:00</updated><author><name>tell-k</name></author><id>tag:pyvideo.org,2016-09-22:pycon-japan-2016/metapuroguramingupython.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Pythonで出来るメタプログラミングの概要を一通り説明します。普段はあまり意識しないフレームワークやライブラリの中で駆使されているメタプログラミングの世界をは覗いてみませんか？ 本セッションではそもそもPythonにおけるメタプログラミングの概要から、それがどのような場面で利用されているかをお話しします。&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;普段Pythonを書いているけど、いざ上級者の書いたコードや、著名なライブラリの コードを覗いた時に、なにやってるか分からないと思ったことはありませんか？&lt;/p&gt;
&lt;p&gt;本セッションでは、Pythonにおけるメタプログラミングに類する機能の 概要を説明します、以下のようなトピックを扱います&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Decorator&lt;/li&gt;
&lt;li&gt;Descriptor&lt;/li&gt;
&lt;li&gt;MetaClass&lt;/li&gt;
&lt;li&gt;SpecialMethod&lt;/li&gt;
&lt;li&gt;その他&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例えばMetaClassの仕組みを理解すれば、クラス定義の仕組みそのものを カスタマイズすることが可能になります。&lt;/p&gt;
&lt;p&gt;これらの機能がどのような用途で使われているか、代表的なフレームワークや ライブラリの例を説明していき、メタプログラミングがどのように活用されているか を知っていただくことができます。&lt;/p&gt;
</summary></entry><entry><title>pandasによる時系列データ処理</title><link href="https://pyvideo.org/pycon-japan-2016/pandasniyorushi-xi-lie-detachu-li.html" rel="alternate"></link><published>2016-09-22T00:00:00+00:00</published><updated>2016-09-22T00:00:00+00:00</updated><author><name>Masaaki Horikoshi</name></author><id>tag:pyvideo.org,2016-09-22:pycon-japan-2016/pandasniyorushi-xi-lie-detachu-li.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;データ分析ライブラリであるpandasを利用して、時系列データのグループ化や集計、サンプリングなどの処理を簡単・高速に行う方法を説明します。また、統計解析パッケージであるstatsmodelsを用いて簡単な時系列モデリングを行います。&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;データ分析では売上データやログデータなどの時系列での傾向を分析したいことがあります。こういった時系列のデータについて、データ分析ライブラリであるpandasを利用してグループ化や集計、サンプリングなどの処理を簡単・高速に行う方法を説明します。pandasでは以下のような処理を少ないコード量で直感的に記述することができます。&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;日時文字列のパース処理&lt;/li&gt;
&lt;li&gt;適当な日時単位(年月, 四半期...)でのグループ化、集計&lt;/li&gt;
&lt;li&gt;サンプリング、フィルタ (移動平均など)&lt;/li&gt;
&lt;li&gt;タイムゾーン&lt;/li&gt;
&lt;li&gt;可視化&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;また、API上の利便性と処理のパフォーマンスを両立するために行っているデータの内部表現と内部処理についてもご説明します。&lt;/p&gt;
&lt;p&gt;最後に、統計解析パッケージであるstatsmodelsを用いて簡単な時系列モデリングを行い、 時系列中のトレンドや季節性を抽出するとともに、将来の予測を行います。&lt;/p&gt;
</summary><category term="pandas"></category></entry><entry><title>Pausable Unittest on EFI Stackless Python</title><link href="https://pyvideo.org/pycon-japan-2016/pausable-unittest-on-efi-stackless-python.html" rel="alternate"></link><published>2016-09-22T00:00:00+00:00</published><updated>2016-09-22T00:00:00+00:00</updated><author><name>Masamitsu Murase</name></author><id>tag:pyvideo.org,2016-09-22:pycon-japan-2016/pausable-unittest-on-efi-stackless-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;組込み機器などのテストでは「再起動を繰り返しながらテストを実行する」ことが多くあります。今回開発したPausable Unittestライブラリを使うと、標準ライブラリのunittestのようにテストを記述でき、かつ、「Pythonインタプリタを一度終了し、再起動後に続きを実行する」場合のテストも、簡単に記述できます。実例をEFI上に移植したStackless Pythonを用いて説明します。&lt;/p&gt;
&lt;div class="section" id="abstract"&gt;
&lt;h4&gt;Abstract&lt;/h4&gt;
&lt;div class="section" id="pausable-unittest-on-efi-stackless-python"&gt;
&lt;h5&gt;Pausable Unittest on EFI Stackless Python&lt;/h5&gt;
&lt;p&gt;家電機器などの組込みデバイスやPCなどのテストでは、「システムの再起動を途中にはさみながら、テストを継続する」ことが多くあります。 こういった場合、Python でテストスクリプトを書こうとすると、再起動によって Python インタプリタが終了してしまうので、再起動後に続きからテストを実行するのは困難です。 しかし、例えば下記のテストスクリプトのように、 (*1) でレジスタの値を読み、 (*2) でシステムを再起動し、再起動後に (*3) から実行してくれると便利です。 また、再起動後の (*4) では、再起動前に (*1) で保存した変数も、特別にセーブ/ロードしなくても参照できると便利です。&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;read_register&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;   &lt;span class="c1"&gt;# (*1)&lt;/span&gt;
    &lt;span class="n"&gt;reboot&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;              &lt;span class="c1"&gt;# (*2)&lt;/span&gt;
    &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;read_register&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;   &lt;span class="c1"&gt;# (*3)&lt;/span&gt;
    &lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;     &lt;span class="c1"&gt;# (*4)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Pausable Unittest ライブラリは、 Stackless Python もしくは PyPy の機能を活用することで、このようなテストスクリプトの記述を可能とします。&lt;/p&gt;
&lt;p&gt;発表では、EFI 仕様に準拠した最近の PC で起動できる「EFI Shell」環境に移植した Stackless Python の説明とともに、実際の挙動を含め、下記について説明します。&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;「再起動を途中にはさみながらテストを継続する」際の問題点
変数の退避と復旧、関数を途中から実行させることの必要性について、説明します。&lt;/li&gt;
&lt;li&gt;Stackless Python の tasklet と、PyPy の continulet でできること
それぞれを使ってできる「関数の途中状態の保存と復旧」について、説明します。&lt;/li&gt;
&lt;li&gt;Pausable Unittest が可能とすること
再起動にまつわるテストの問題点を解決する Pausable Unittest について、説明します。
特に、 unittest の pickle 対応について説明します。&lt;/li&gt;
&lt;li&gt;Stackless Python の EFI Shell 上への移植
実際の適用例として用いた、PC の Pre-OS 環境である EFI Shell 上への Stackless Python の移植について、説明します。
移植するうえで一部アセンブラの知識が必要な個所についても簡単に触れる予定です。&lt;/li&gt;
&lt;li&gt;上記を用いた実例
実際に VirtualBox/VMWare 上で実挙動を実演します。&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;h5&gt;サンプルデモ&lt;/h5&gt;
&lt;p&gt;なお、 EFI Shell 上で、「3回の再起動を行い、起動速度を測定し、それが 8秒未満かをテストする」という (やや恣意的な) シナリオの場合、下記のようにテストスクリプトを書くことができます。
下記のスクリプトでは、 (*1) のループの中で、 (*2) で再起動を行い、平均を求めて一回の再起動にかかる時間を測定しています。
動作の様子は &lt;a class="reference external" href="https://youtu.be/gb7-UKnkjrM"&gt;YouTube&lt;/a&gt; で見ることができます。&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pausable_unittest&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pausable_unittest.efipauser&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Sample&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pausable_unittest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_reboot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;reboot_time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;                      &lt;span class="c1"&gt;# (*1)&lt;/span&gt;
            &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Reboot &lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s2"&gt;...&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reboot&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;                       &lt;span class="c1"&gt;# (*2)&lt;/span&gt;
            &lt;span class="n"&gt;end&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

            &lt;span class="n"&gt;reboot_time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;avg_time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reboot_time&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reboot_time&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertLess&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;avg_time&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;pausable_unittest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pausable_unittest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;efipauser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Pauser&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="pausable-unittest-efi-stackless-python"&gt;
&lt;h5&gt;Pausable Unittest と EFI Stackless Python の入手先&lt;/h5&gt;
&lt;p&gt;現在開発中の Pausable Unittest は以下の URL で公開しています。 &lt;a class="reference external" href="https://github.com/masamitsu-murase/pausable_unittest"&gt;https://github.com/masamitsu-murase/pausable_unittest&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;日本語の README は以下にあります。 &lt;a class="reference external" href="https://github.com/masamitsu-murase/pausable_unittest/blob/master/README.ja.md"&gt;https://github.com/masamitsu-murase/pausable_unittest/blob/master/README.ja.md&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;また、EFI Shell 上に移植した Stackless Python は、以下のブランチにあります。 &lt;a class="reference external" href="https://github.com/masamitsu-murase/edk2formruby/tree/stacklesspython279release"&gt;https://github.com/masamitsu-murase/edk2formruby/tree/stacklesspython279release&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary></entry><entry><title>Pycon JP Opening〜Keynote 2016-09-22</title><link href="https://pyvideo.org/pycon-japan-2016/pycon-jp-opening-keynote-2016-09-22.html" rel="alternate"></link><published>2016-09-22T00:00:00+00:00</published><updated>2016-09-22T00:00:00+00:00</updated><author><name>Andrey Vlasovskikh</name></author><id>tag:pyvideo.org,2016-09-22:pycon-japan-2016/pycon-jp-opening-keynote-2016-09-22.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Keynote (10:15)&lt;/p&gt;
</summary><category term="keynote"></category></entry><entry><title>Python データーベースドライバーの作り方</title><link href="https://pyvideo.org/pycon-japan-2016/python-detabesudoraibanozuo-rifang.html" rel="alternate"></link><published>2016-09-22T00:00:00+00:00</published><updated>2016-09-22T00:00:00+00:00</updated><author><name>Hajime Nakagami</name></author><id>tag:pyvideo.org,2016-09-22:pycon-japan-2016/python-detabesudoraibanozuo-rifang.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python のデーターベースドライバーを作る場合のコツ、留意点、既存のドライバーのソースコードを読む場合のポイントを解説します&lt;/p&gt;
&lt;div class="section" id="abstract"&gt;
&lt;h4&gt;Abstract&lt;/h4&gt;
&lt;p&gt;PEP-249 についての説明&lt;/p&gt;
&lt;p&gt;他のプログラミング言語での DBAPI との比較&lt;/p&gt;
&lt;p&gt;各RDBMS アクセスのネットワークプロトコルについての解説&lt;/p&gt;
&lt;p&gt;プレースフォルダーの扱いについて（プロトコルとして prepare statement をサポートするか、文字列をフォーマットするか）&lt;/p&gt;
&lt;p&gt;各データーベースドライバーソースコードリーディング MySQL/PostgreSQL/Firebird/SQLServer&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>PythonではじめるOpenAI Gymトレーニング</title><link href="https://pyvideo.org/pycon-japan-2016/pythondehazimeruopenai-gymtoreningu.html" rel="alternate"></link><published>2016-09-22T00:00:00+00:00</published><updated>2016-09-22T00:00:00+00:00</updated><author><name>Takahiro Kubo (icoxfog417)</name></author><id>tag:pyvideo.org,2016-09-22:pycon-japan-2016/pythondehazimeruopenai-gymtoreningu.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;OpenAI Gymをご存知でしょうか。これは名前の通り&amp;quot;AI&amp;quot;をトレーニングするためのジムで、様々なゲームなどで自分の開発したAIを&amp;quot;トレーニング(学習)&amp;quot;させることができます。 本セッションでは、強化学習を用いたAIの開発方法と、OpenAI Gymを用いたトレーニングのさせ方について解説します。&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;※基本的な流れは、Qiitaに掲載済みのこちらの記事に沿って行います &lt;a class="reference external" href="http://qiita.com/icoxfog417/items/242439ecd1a477ece312"&gt;http://qiita.com/icoxfog417/items/242439ecd1a477ece312&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ロボットから自動運転車、はては囲碁・将棋といったゲームまで、昨今多くの「AI」が世間をにぎわせています。 その中のキーワードとして、「強化学習」というものがあります。そうした意味では、数ある機械学習の手法の中で最も注目されている(そして誇張されている・・・)手法ともいえるかもしれません。&lt;/p&gt;
&lt;p&gt;本発表では、その強化学習という手法について、基礎から最近目覚ましい精度を出しているDeep Q-learningまで、その発展の流れと仕組みについて解説をしていきたいと思います。そして、最終的にはPythonでそのアルゴリズムを実装し、OpenAIという強化学習のトレーニング用ライブラリを用いて学習させてみたいと思います。&lt;/p&gt;
&lt;p&gt;発表アウトライン&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;強化学習の特性&lt;/li&gt;
&lt;li&gt;強化学習のモデル化(Markov Decision Process)&lt;/li&gt;
&lt;li&gt;モデルの学習方法
-   Value Iteration/Policy Iteration
-   Q-learning&lt;/li&gt;
&lt;li&gt;Deep Q-learning&lt;/li&gt;
&lt;li&gt;実践
-   Deep Q-learningの実装
-   OpenAI Gymを用いた実践&lt;/li&gt;
&lt;/ul&gt;
</summary></entry><entry><title>Sleepy: How to suspend and resume your cpython process from inside</title><link href="https://pyvideo.org/pycon-japan-2016/sleepy-how-to-suspend-and-resume-your-cpython-process-from-inside.html" rel="alternate"></link><published>2016-09-22T00:00:00+00:00</published><updated>2016-09-22T00:00:00+00:00</updated><author><name>David Weil</name></author><id>tag:pyvideo.org,2016-09-22:pycon-japan-2016/sleepy-how-to-suspend-and-resume-your-cpython-process-from-inside.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk we'll propose and explain how it is possible suspend &amp;amp; resume a python process execution from within python using no external-help. Pure-python-ffi-free code. This kind of tool is useful with the proliferation of cloud serv since they offer restricted execution env in terms of time/mem and process relocation/prio is required. Besides we’ll get unexpected debugger improvements.&lt;/p&gt;
&lt;div class="section" id="detailed-abstract"&gt;
&lt;h4&gt;Detailed Abstract&lt;/h4&gt;
&lt;p&gt;People will be introduced to a simple case of what continuations are, i.e.: suspending a whole python process and resuming it from where it was saved.&lt;/p&gt;
&lt;p&gt;We'll present some scenarios where it would be useful:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;restricted time execution environments&lt;/li&gt;
&lt;li&gt;distributed computing farms&lt;/li&gt;
&lt;li&gt;tasks would become dynamic, meaning they could be switched from one host to another at the user's will -run- time code problems evaluation by code re-execution, etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A comparison to different alternatives will be shown:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;other languages features&lt;/li&gt;
&lt;li&gt;operating system provided features&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We'll present a method to persist execution state and then explain how to restore it. To do that, we use python's debugger in order to restore the state.&lt;/p&gt;
&lt;p&gt;Some problems arise in that process such as:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;how to persist and restore objects created in C&lt;/li&gt;
&lt;li&gt;how to restore process execution using debugger's functions&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To persist and restore objects created in C, I created python wrappers which would replicate C-created objects and expose their own methods and instance variables.&lt;/p&gt;
&lt;p&gt;To restore a process execution in a given point, we use the python debugger. With it, is possible to start the code in a programmatic way instrumenting to jump directly into the function call belonging to frames present in saved call-stack.&lt;/p&gt;
&lt;p&gt;The main problem here lies in the fact that the debugger is not powerful enough to jump from any function entrypoint into arbitrary points inside the funcion, i.e.: you can’t jump inside a block of code!&lt;/p&gt;
&lt;p&gt;For that, I present 3 different approaches to workaround that:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;block-unrolling : ie: pasting and compiling block’s code in the same place it is located and also, after function end, in an unrolled way (check added block1 after return) :&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;something&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;some_iterator&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;block1&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt;
&lt;span class="n"&gt;block1&lt;/span&gt;
&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;the alternative is to replace the expressions which control loops with assisted functions, like:&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;something&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;my_library_controlled_iterator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;original_iterator&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;block1&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt;
&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;letting us control the debugger and execute the loop instructions (returning controlled value from the assisted function iterator), and then jump again to call the function for the next frame in the call-stack.&lt;/li&gt;
&lt;li&gt;it is possible to rewrite python’s byte-code to have no block byte-codes. This is the method I chose for my implementation, and I will explain how the bytecode will be rewritten for each control structure found.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After that, major problems are solved and we have a working prototype.&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>型ヒントについて考えよう!</title><link href="https://pyvideo.org/pycon-japan-2016/xing-hintonitsuitekao-eyou.html" rel="alternate"></link><published>2016-09-22T00:00:00+00:00</published><updated>2016-09-22T00:00:00+00:00</updated><author><name>Yusuke Miyazaki</name></author><id>tag:pyvideo.org,2016-09-22:pycon-japan-2016/xing-hintonitsuitekao-eyou.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python 3.5 に導入された型ヒント (Type Hints) は、プログラム中に型アノテーションを記述する方法を標準化し、型チェッカーなどのツールで利用できるようになっています。このセッションでは Python の型ヒントについて紹介した後、他の言語での同様の機能について紹介し、Python の型ヒントの優れているところ、劣っているところを明らかにし、今後の型ヒントの活用方法について考えます。&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.python.org/dev/peps/pep-0484/"&gt;PEP 484&lt;/a&gt; で標準化され、Python 3.5 から導入された型ヒント (Type Hints) は、Python プログラムの中に型アノテーションを記述する方法を標準化します。型ヒントは PEP 484 の元になった mypy などの型チェッカーで利用できますが、2016年現在あまり広く利用されているとは言い難い状況です。&lt;/p&gt;
&lt;p&gt;このセッションではまず、 Python の型ヒントが何を標準化していて、何をすることができるのか、型チェッカーの &lt;a class="reference external" href="http://mypy-lang.org/"&gt;mypy&lt;/a&gt; や IDE の &lt;a class="reference external" href="https://www.jetbrains.com/pycharm/"&gt;PyCharm&lt;/a&gt; などの例を通して紹介し、Python の型ヒントの現状を理解します。&lt;/p&gt;
&lt;p&gt;次に、Python の型ヒントの元となった漸進的型付け (Gradual Typing) の考えが導入されている、&lt;a class="reference external" href="https://www.typescriptlang.org/"&gt;TypeScript&lt;/a&gt; や &lt;a class="reference external" href="http://hacklang.org/"&gt;Hack&lt;/a&gt; などの他の言語で型アノテーションがどのように利用されているかを紹介し、Python の型ヒントが他の言語に比べて優れている部分や、劣っている部分について明らかにします。&lt;/p&gt;
&lt;p&gt;最後に、これまでの議論を踏まえて、Python の型ヒントをどのように利用していくのが良いかを、様々な視点から考えます。&lt;/p&gt;
</summary></entry><entry><title>ビッグデータとPythonではじめる野球の統計分析</title><link href="https://pyvideo.org/pycon-japan-2016/bitsugudetatopythondehazimeruye-qiu-notong-ji-fen-xi.html" rel="alternate"></link><published>2016-09-21T00:00:00+00:00</published><updated>2016-09-21T00:00:00+00:00</updated><author><name>Shinichi Nakagawa</name></author><id>tag:pyvideo.org,2016-09-21:pycon-japan-2016/bitsugudetatopythondehazimeruye-qiu-notong-ji-fen-xi.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;野球統計学「セイバーメトリクス」および、高性能スピードガン「PITCHf/x」の登場で近年最高の盛り上がりをみせている野球のビッグデータを用いたデータ分析・可視化をPythonとその周辺技術（OSSなど）を用いて行う実践例を紹介します.&lt;/p&gt;
&lt;div class="section" id="abstract"&gt;
&lt;h4&gt;Abstract&lt;/h4&gt;
&lt;div class="section" id="pythonanalyzing-baseball-data-with-python"&gt;
&lt;h5&gt;ビッグデータとPythonではじめる野球の統計分析〜Analyzing Baseball Data With Python&lt;/h5&gt;
&lt;div class="section" id="id1"&gt;
&lt;h6&gt;あらすじ&lt;/h6&gt;
&lt;p&gt;メジャーリーグをはじめとして、日本プロ野球や他の球技において、競技データの収集、分析、可視化が盛んに行われています。日本でも少しずつではありますが、野球統計学「セイバーメトリクス」が市民権を得始め、「打率より出塁率」「勝利よりQS（Quality Start）」といった議論ができるようになってきました.&lt;/p&gt;
&lt;p&gt;一方、野球データ分析の最先端を行くメジャーリーグでは、スコアデータを元にした従来のセイバーメトリクスは過去のモノになりつつあり、&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;外野手の肩や足は守備にどれだけ影響をあたえるのか？&lt;/li&gt;
&lt;li&gt;先発投手の健康状態や疲労はデータで分析できるのではないか？&lt;/li&gt;
&lt;li&gt;捕手によってストライクかボールが変動するのでは？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;といった仮説の元、選手の「投げる」「打つ」「走る」「守る」をより詳細なデータで可視化・分析を行うのがトレンドとなっています。&lt;/p&gt;
&lt;p&gt;そんな最先端の野球をメジャーリーグのビックデータとPythonで楽しんでみませんか？&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="keyword"&gt;
&lt;h5&gt;Keyword&lt;/h5&gt;
&lt;div class="section" id="python"&gt;
&lt;h6&gt;Python&lt;/h6&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Beautifulsoup&lt;/li&gt;
&lt;li&gt;Jupyter(IPython notebook)&lt;/li&gt;
&lt;li&gt;Pandas&lt;/li&gt;
&lt;li&gt;pitchpx(PITCHf/x dataset library) ※Speaker(&amp;#64;shinyorke)が独自に開発・OSS化&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h6&gt;野球&lt;/h6&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;セイバーメトリクス(野球統計学)&lt;/li&gt;
&lt;li&gt;PITCHf/x&lt;/li&gt;
&lt;li&gt;Stats Cast&lt;/li&gt;
&lt;li&gt;ビッグデータベースボール&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary></entry><entry><title>Building Distributed System with Celery on Docker Swarm</title><link href="https://pyvideo.org/pycon-japan-2016/building-distributed-system-with-celery-on-docker-swarm.html" rel="alternate"></link><published>2016-09-21T00:00:00+00:00</published><updated>2016-09-21T00:00:00+00:00</updated><author><name>Wei Lin</name></author><id>tag:pyvideo.org,2016-09-21:pycon-japan-2016/building-distributed-system-with-celery-on-docker-swarm.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk, the basic mechanisms of Celery and Docker-Swarm will be explained. With Docker-Swarm , a cluster will be built upon two Raspberry Pi machines. Hadoop entry-level &amp;quot;Word Count&amp;quot; program will be re-writen in Python and executed parallelly via Celery on the cluster. An example of distributed system modeling nerual-network will also be explained.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;In the territory of Python, Celery is a famous distributed task queue framework, its Canvas mechanism is specially powerful in building complex workflow.
Celery can function in distributed environment and go perfectly along with Docker-Swarm: Docker-Swarm provides a cluster environment and the worker containers to sustain Celery; worker containers and processes and be dynamically scaled and expanded to fulfill Celery's need, work together parallelly to accomplish the computation.
With Celery and Docker-Swarm, an example will be provided, in which a cluster of 8 containers will be built upon two Raspberry Pi machines. Hadoop entry-level &amp;quot;Word Count&amp;quot; program will be re-writen in Python and executed parallelly via Celery on the cluster.&lt;/p&gt;
&lt;p&gt;Regarding concurrent/distributed computing, IoT, microservices, serverless-computing are all well known paradigms. Based on MQTT, IBM Bluemix is one of the leaders in this field, however, free of charge only for 30 days.
With Celery and Docker-Swarm, and with respect to Bluemix, we can actually build a private IoT-liked system in minutes, free of any charge. To provide an example, a distributed system using Celery and Docker-Swarm modeling a neural-network will be explained.&lt;/p&gt;
</summary></entry><entry><title>Deep Learning with Python &amp; TensorFlow</title><link href="https://pyvideo.org/pycon-japan-2016/deep-learning-with-python-tensorflow.html" rel="alternate"></link><published>2016-09-21T00:00:00+00:00</published><updated>2016-09-21T00:00:00+00:00</updated><author><name>Ian Lewis</name></author><id>tag:pyvideo.org,2016-09-21:pycon-japan-2016/deep-learning-with-python-tensorflow.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;TensorFlow is a new Open Source framework created at Google for building Deep Learning applications. I will discuss how it compares to other Python machine learning libraries like Theano or Chainer. Finally, I will discuss how trained TensorFlow models could be deployed into a production system using TensorFlow Serve.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;Python has lots of scientific, data analysis, and machine learning libraries. But there are many problems. Which do you use? How do they compare to each other? How can you use a model that has been trained in your production application?&lt;/p&gt;
&lt;p&gt;TensorFlow is a new Open Source framework created at Google for building Deep Learning applications. Tensorflow allows you to construct easy to understand data flow graphs which form a mathematical and logical pipeline. Creating data flow graphs allow easier visualization of complicated algorithms as well as running the training operations over multiple hardware GPUs.&lt;/p&gt;
&lt;p&gt;Tensorflow data flow graphs and operations are written in Python. In this talk I will discuss how you can use TensorFlow to create Deep Learning applications. I will discuss how it compares to other Python machine learning libraries like Theano or Chainer. Finally, I will discuss how trained TensorFlow models could be deployed into a production system using TensorFlow Serve.&lt;/p&gt;
</summary><category term="tensorflow"></category><category term="deep learning"></category></entry><entry><title>f2pyとmatplotlibを用いたブラウン粒子動力学のリアルタイム可視化</title><link href="https://pyvideo.org/pycon-japan-2016/f2pytomatplotlibwoyong-itaburaunli-zi-dong-li-xue-noriarutaimuke-shi-hua.html" rel="alternate"></link><published>2016-09-21T00:00:00+00:00</published><updated>2016-09-21T00:00:00+00:00</updated><author><name>Hidemitsu Hayashi</name></author><id>tag:pyvideo.org,2016-09-21:pycon-japan-2016/f2pytomatplotlibwoyong-itaburaunli-zi-dong-li-xue-noriarutaimuke-shi-hua.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Fortran言語で記述された、大気中に浮遊してブラウン運動する微小粒子の運動解析プログラムを、f2pyによりPythonプログラムと結合し、matplotlibを用いて粒子運動をリアルタイムで可視化した。その結果、運動解析中に粒子の大きさや大気温度を変更可能となり、これらの変数に依存してブラウン運動が変化する様子を視覚的に把握する事が出来る様になった。&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;リアルタイム可視化とは&lt;/p&gt;
&lt;p&gt;数値シミュレーションの結果をディスクに保存した後、それを描画プログラムが読み込んで可視化する事をポスト処理と呼ぶ。それとは異なり、数値シミュレーションプログラムの終了を待たずに、シミュレーション結果を逐次描画プログラムが受取り、可視化する事を、本talkではリアルタイム可視化と呼ぶ。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code literal-block"&gt;
ポスト処理 ： 数値計算 → 結果をディスクに保存 → 描画プロブラム
リアルタイム可視化 ： 数値計算 → (ネットワーク or メモリ) → 描画プログラム
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;可視化するプログラムの説明&lt;/p&gt;
&lt;p&gt;近年、大気汚染に関する情報として、毎朝の天気予報においてPM2.5の数値が公表されるようになった。PM2.5とは、直径2.5ミクロン以下の微小粒子(PM)が1立方メートル当り何μg含まれるかを示す指標であるが、本talkで取り上げるのはこのPM2.5の振る舞いを記述する数値計算プログラムである。計算手法としてはBrown動力学法を用いており、Fortran言語を用いてコーディングされている。Brown動力学法は、人為的なランダムウオークとは異なり、粒子の大きさや大気温度に応じて粒子の振る舞いを正確に記述する事を述べる&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code literal-block"&gt;
Brown動力学法 = Langevin方程式を(コンピュータで)数値的に解く手法
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;FortranプログラムとPythonプログラムの結合&lt;/p&gt;
&lt;p&gt;Fortran言語で書かれてたBrown動力学法プログラムから、f2pyを用いて、Pythonのモジュールを生成する。その際に留意すべき点を述べる。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code literal-block"&gt;
Fortranプログラム → (main + interface)に分割 → f2py → brown.so
f2py -c -m brown --fcompiler=intelem interface.f90 main.o
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;matplotlibによるリアルタイム可視化&lt;/p&gt;
&lt;p&gt;matplotlibのリアルタイム描画には複数の方法があるのでそれらを簡単に紹介した後、モジュール化されたBrown動力学法プログラムが微小粒子の位置を計算し、これをPythonプログラムが逐次受取り、matplotlibで粒子位置を軌跡もしくは点としてリアルタイムで描画してお見せする。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code literal-block"&gt;
import matplotlib.pyplot as plt
import matplotlib.animation as animation
import brown
・・・
&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;matplotlibによるGUIプログラム作成&lt;/p&gt;
&lt;p&gt;微小粒子の運動を追跡中に、matplotlibのイベント処理やwidgetを用いて、粒子の大きさや大気温度を変更し、粒子運動が変化する様子を可視化してお見せする。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code literal-block"&gt;
from mpl_toolkits.mplot3d import Axes3D
from matplotlib.widgets import Slider, Button
import brown
・・・
&lt;/pre&gt;
</summary></entry><entry><title>複数の言語からなるプロジェクトを作るということ</title><link href="https://pyvideo.org/pycon-japan-2016/fu-shu-noyan-yu-karanarupuroziekutowozuo-rutoiukoto.html" rel="alternate"></link><published>2016-09-21T00:00:00+00:00</published><updated>2016-09-21T00:00:00+00:00</updated><author><name>Kosuke Kusano</name></author><id>tag:pyvideo.org,2016-09-21:pycon-japan-2016/fu-shu-noyan-yu-karanarupuroziekutowozuo-rutoiukoto.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;1つのプロジェクトが1つのプログラミング言語で完結することが少なくなっています。言語的にキメラ(chimera)なプログラミング技法についてこれまであまり議論されてきませんでした。PythonとRustを用いたmulti-threaddingについて取り上げながら、Pythonの不得意とする処理を他の言語に委譲する方法論を議論し、chimeraに対する議論を深めようと思います。&lt;/p&gt;
&lt;div class="section" id="abstract"&gt;
&lt;h4&gt;Abstract&lt;/h4&gt;
&lt;div class="section" id="intro"&gt;
&lt;h5&gt;intro&lt;/h5&gt;
&lt;p&gt;私の研究の中でNP困難な問題を解く必要がでてきました。並列計算をする必要がありGILのあるPythonのみでは困難でした。これまでの研究はすべてPythonとIPython notebook上で行っており、これまでの資産がありました。この資産を捨て、Python以外の言語で再実装するのはナンセンスです。そのため、NP困難な問題のソルバーをRust・C++/Cythonを用いて構築し、Pythonから実行可能にすることを考えます。&lt;/p&gt;
&lt;p&gt;より抽象的に考えた際に、プログラミング言語の仕様・ライブラリ・文化に対し、得意な処理/不得意な処理があるということです。先の例では、Pythonの不得意な処理(並列計算)に対し、並列計算の得意なRustで実装するという手段を取りました。同様に分散処理をactor modelで組もうと考えた際は、Pythonよりerlangのほうで実装したくなります。そのような状況では、あるコンポーネントはある言語で書きたいが別のコンポーネントは違う言語で書きたいという欲求がでてきます。&lt;/p&gt;
&lt;p&gt;この1つのプロジェクトに対し複数の言語が混ざった(この状態をchimeraと命名)場合に考えるべきことを、実際に実装を行った上で議論します。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id1"&gt;
&lt;h5&gt;事例&lt;/h5&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;numpy&lt;/li&gt;
&lt;li&gt;CORBA&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="chimera"&gt;
&lt;h5&gt;実際にchimeraでいくつかのプログラムを実装する&lt;/h5&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Python,Rust&lt;/li&gt;
&lt;li&gt;Python,C++,Cython&lt;/li&gt;
&lt;li&gt;Python,erlang&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h5&gt;設計上の考慮点&lt;/h5&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;コンポーネント間の関係(対等/所有)
-   host/process/thread?&lt;/li&gt;
&lt;li&gt;コンポーネントのインターフェイス&lt;/li&gt;
&lt;li&gt;結合度&lt;/li&gt;
&lt;li&gt;基本的に従来の設計と考えることは変わらない
-   各言語仕様や文化を考慮する必要はあるが&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h5&gt;実装上の考慮点&lt;/h5&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;コンポーネント依存グラフのrootをだれにするか(人?setup.py?)&lt;/li&gt;
&lt;li&gt;build toolはどうするか?&lt;/li&gt;
&lt;li&gt;依存しているライブラリの数が言語により爆発する、debugの難しさ
-   dockerによる環境の固定化&lt;/li&gt;
&lt;li&gt;serializeは如何にするか
-   protocol buffers
-   json&lt;/li&gt;
&lt;li&gt;通信手段は如何にするか(host/process/thread間?)
-   zmq
-   shared memory&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id4"&gt;
&lt;h5&gt;保守上の考慮点&lt;/h5&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;全員がすべての言語を理解する必要があるのか&lt;/li&gt;
&lt;li&gt;現状では十分なノウハウがない&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h5&gt;現状の問題点&lt;/h5&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;ノウハウがない(best practice, anti-pattern)&lt;/li&gt;
&lt;li&gt;議論してる人が居ない(ようにみえる)&lt;/li&gt;
&lt;li&gt;本当の意味でのglue言語&lt;/li&gt;
&lt;li&gt;build tool(no setup.py)&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="chimera-python"&gt;
&lt;h5&gt;(chimeraから見た)Pythonの今後&lt;/h5&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Pythonの長所/短所を把握する必要性&lt;/li&gt;
&lt;li&gt;如何にPythonの資産を活かすか&lt;/li&gt;
&lt;li&gt;容易にPythonの短所を委任できるようにできるか&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary></entry><entry><title>How Python helped create the visual effects for an Emmy nominated TV show</title><link href="https://pyvideo.org/pycon-japan-2016/how-python-helped-create-the-visual-effects-for-an-emmy-nominated-tv-show.html" rel="alternate"></link><published>2016-09-21T00:00:00+00:00</published><updated>2016-09-21T00:00:00+00:00</updated><author><name>Engin Arslan</name></author><id>tag:pyvideo.org,2016-09-21:pycon-japan-2016/how-python-helped-create-the-visual-effects-for-an-emmy-nominated-tv-show.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Almost all the software packages that are used in VFX have a Python API. From the workings of the studio pipeline to the front-end of VFX production where viewer facing visuals are created, Python facilitates delivery of effects on time and on budget. Learn how specifically Python is leveraged in production to deliver award winning VFX that captivate the imagination of millions of viewers.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;The extent to which programming is used in the production of Visual Effects can be somewhat of a mystery to an outsider of the field. Broadly speaking, it is used by 4 sets of people / categories with overlapping responsibilities.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Computer Graphics Engineers, Math, CS, Physics PhD’s and others in similar positions undertake the responsibility of very low level research and development such as creation of ‘shading’ and ‘rendering’ solutions, implementation of physics simulation algorithms, etc. Their development efforts help create the core toolset artists utilize when creating visuals. They either extend the possibilities that existing 3D software packages offer (like Maya, 3DS Max, Houdini and more) or create entirely new tools.&lt;/li&gt;
&lt;li&gt;Pipeline TD’s and Engineers build and maintain the visual effects studio pipeline and help facilitate the production efficiently by managing the data-flow. This mainly involves building tools and plugins that interface with the 3D software packages that are in use or creating stand-alone desktop applications.&lt;/li&gt;
&lt;li&gt;Technical Directors for each department address the particular needs of their departments by building scripts, tools, plugins — whatever the problem at hand requires. They usually interface with the tools that Engineers upstream build and with the 3D software packages that are already in use to achieve the solutions that they are after.&lt;/li&gt;
&lt;li&gt;Eager Artists aka Budding Programmers are artists that are frustrated by the limitations of the toolset that they are given and devise automation solutions using the API of the software in use to build scripts and tools that helps with the redundant, repetitive, boilerplate tasks.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Almost all the software packages that are used in VFX nowadays have a Python API. Moreover programs are moving towards using PySide in implementing their visual interface, which further enables artists to utilize this toolkit to build their own GUI solutions — either integrated to the software or as a standalone desktop application. Wherever you look, Python dominates the VFX landscape — except for tasks that are performance critical. From the low level workings of the studio pipeline to the front-end of Visual Effects production where viewer facing visuals are created, Python facilitates delivery of cutting edge effects on time and on budget.&lt;/p&gt;
&lt;p&gt;When a group of visual effects artists were asked to deliver an episode for an immensely popular TV Show involving one of the biggest CG battle scenes to be ever seen on the TV so far, it was obvious that Python was going to play a huge part in their workflow.&lt;/p&gt;
&lt;p&gt;This talk focuses on the perspective of the artists and technical directors in this VFX landscape and various ways they utilize Python in production to come up with solutions for movies and shows that entertains millions of people around the globe.&lt;/p&gt;
</summary></entry><entry><title>import community</title><link href="https://pyvideo.org/pycon-japan-2016/import-community.html" rel="alternate"></link><published>2016-09-21T00:00:00+00:00</published><updated>2016-09-21T00:00:00+00:00</updated><author><name>Fernando Masanori</name></author><id>tag:pyvideo.org,2016-09-21:pycon-japan-2016/import-community.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Ten different PyCon's and three Django Girls in two year's: lessons on diversity that I learned. Namibia, UK, Japan, Brazil, Italy, Argentina, Uruguay, Germany, Canada, USA and Spain.&lt;/p&gt;
&lt;div class="section" id="abstract"&gt;
&lt;h4&gt;Abstract&lt;/h4&gt;
&lt;p&gt;One of the biggest differences, in the Python community, in relation to other communities, is its effort to improve diversity. There is even a Diversity Statement at PSF: “We have created this diversity statement because we believe that a diverse Python community is stronger and more vibrant. A diverse community where people treat each other with respect has more potential contributors and more sources for ideas.” In last two years I was fortunate enough to take part in ten PyCon’s in eleven different countries: Namibia, UK, Japan, Brazil, Italy, Argentina, Uruguay, Germany, Canada, USA and Spain. Some were not national conferences, but were EuroPython or PyConUS. I was coach in three Django Girls at PyCon Namibia, Argentina and Brazil. I always took note of experiences on how to improve diversity, that could be useful and replicable in my local community and would like to share at PyCon Japan. There are other reports that I also would like to share, which are only beautiful personal stories of how Python reaches the most distant people and places you may never have imagined.&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>基礎から学ぶWebアプリケーションフレームワークの作り方</title><link href="https://pyvideo.org/pycon-japan-2016/ji-chu-karaxue-buwebapurikeshiyonhuremuwakunozuo-rifang.html" rel="alternate"></link><published>2016-09-21T00:00:00+00:00</published><updated>2016-09-21T00:00:00+00:00</updated><author><name>Masashi Shibata</name></author><id>tag:pyvideo.org,2016-09-21:pycon-japan-2016/ji-chu-karaxue-buwebapurikeshiyonhuremuwakunozuo-rifang.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PythonのWebアプリケーションフレームワークを開発するために必要な知識を実際のPythonのコードをベースに解説していきます。&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;Web開発を行う際は、FlaskやDjango等のWebアプリケーションフレームワークを活用することが多く、日頃の開発の中でそのフレームワークの実装まで意識しているという方は少ないのではないでしょうか。&lt;/p&gt;
&lt;p&gt;本発表では、Pythonの具体的なコードをベースにWebアプリケーションフレームワークを作る上で必要となる知識について解説します。Hello Worldをスタートとして、ルーティングやリクエスト・レスポンスのハンドリング方法、CSSやJS等の静的ファイルの扱いなどWebアプリケーションフレームワークに必要な機能とその実装方法を解説します。&lt;/p&gt;
&lt;p&gt;次に私が開発しているKobinというフレームワークと、それを用いた実際のアプリケーションを紹介します。Kobinは本発表で紹介した機能を全て実装していますが、その実装は800行に満たない程度(5/17現在)と非常に短く、勉強用途としては最適なWebフレームワークとなっています。またType Hintsを活用しているためコードを読む上での手がかりとなる情報も既存のフレームワークに比べ多いでしょう。&lt;/p&gt;
&lt;p&gt;下の画像は実際にKobinとAngular2を使用して作成したアプリケーションの動作の様子です(&lt;a class="reference external" href="https://github.com/c-bata/kobin-example"&gt;https://github.com/c-bata/kobin-example&lt;/a&gt;)。&lt;/p&gt;
</summary></entry><entry><title>Lightning Talks. Pycon JP 2016-09-21</title><link href="https://pyvideo.org/pycon-japan-2016/lightning-talks-pycon-jp-2016-09-21.html" rel="alternate"></link><published>2016-09-21T00:00:00+00:00</published><updated>2016-09-21T00:00:00+00:00</updated><author><name>Various speakers</name></author><id>tag:pyvideo.org,2016-09-21:pycon-japan-2016/lightning-talks-pycon-jp-2016-09-21.html</id><summary type="html"></summary><category term="lightning talks"></category></entry><entry><title>パッケージングを支える技術</title><link href="https://pyvideo.org/pycon-japan-2016/patsukezinguwozhi-eruji-shu.html" rel="alternate"></link><published>2016-09-21T00:00:00+00:00</published><updated>2016-09-21T00:00:00+00:00</updated><author><name>aodag</name></author><id>tag:pyvideo.org,2016-09-21:pycon-japan-2016/patsukezinguwozhi-eruji-shu.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;pypiを中心としたパッケージエコシステムや、pypaが管理しているツール、関連PEPの動向を解説します。&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;pythonパッケージングに利用されるツール pip,wheel,setuptoolsの更新情報 関連PEPの採用動向や新規PEPの問題提起など&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;今日のsetuptools&lt;/li&gt;
&lt;li&gt;pypaツール&lt;/li&gt;
&lt;li&gt;関連PEP&lt;ul&gt;
&lt;li&gt;PEP 513 -- A Platform Tag for Portable Linux Built Distributions&lt;/li&gt;
&lt;li&gt;PEP 516 -- Build system abstraction for pip/conda etc&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Linux向けwheelバイナリの生成&lt;/li&gt;
&lt;li&gt;パッケージングを支える技術&lt;ul&gt;
&lt;li&gt;python標準の仕組み&lt;/li&gt;
&lt;li&gt;setuptoolsによる仕組み&lt;/li&gt;
&lt;li&gt;wheelの仕組み&lt;/li&gt;
&lt;li&gt;metadata&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;setup.pyがなくなる日&lt;/li&gt;
&lt;/ul&gt;
</summary></entry><entry><title>Plone5のOSSにおける進化と適応 〜 PyCon (US) 2016 Keynoteの日本語での再演</title><link href="https://pyvideo.org/pycon-japan-2016/plone5noossniokerujin-hua-toshi-ying-pycon-us-2016-keynotenori-ben-yu-denozai-yan.html" rel="alternate"></link><published>2016-09-21T00:00:00+00:00</published><updated>2016-09-21T00:00:00+00:00</updated><author><name>Zenichiro Yasuda</name></author><id>tag:pyvideo.org,2016-09-21:pycon-japan-2016/plone5noossniokerujin-hua-toshi-ying-pycon-us-2016-keynotenori-ben-yu-denozai-yan.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python madeのエンタープライズCMS Ploneは15年の歴史を持ちます。 本講演では、USのPyCon2016におけるCris Ewing (Plone Foundation所属)のキーノート講演&amp;quot;Adaptation in OSS&amp;quot; を日本語で再現し、15年の進化と適応がどのようにPlone5に結実したかをご紹介します。&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;本講演は、Plone FoundationのCris EwingによるPyCon (US) 2016 キーノート講演 &amp;quot;Adaptation in OSS&amp;quot; を日本語で再現するものです。&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h4&gt;1. イントロダクション (適応の定義と種類)&lt;/h4&gt;
&lt;p&gt;これはPythonで作られたオープンソースCMS Ploneとコミュニティについての誕生から現在に至るまでのAdaptation =「適応」の物語です。適応とは、生物の形態が環境の変化に応じて変わることです。このトークではPloneの適応を生物界になぞらえて「擬似適応」「収斂進化(しゅうれんしんか)」「比喩的な意味での適応」という3つに分けてお話します。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="plone"&gt;
&lt;h4&gt;2.   Ploneの誕生と普及&lt;/h4&gt;
&lt;p&gt;進化のはじまりは誕生から。前段としてPloneがどのようにして生まれたのかをお話します。&lt;/p&gt;
&lt;p&gt;内容は以下ととなります。 - Ploneを支えるミドルウェアZope誕生の経緯 - Zopeのキーとなるアイデア - トラバーサルとオブジェクトパブリッシング - CMFの登場 - Ploneの誕生 - Ploneコミュニティの成長&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h4&gt;3. Ploneに訪れた変化&lt;/h4&gt;
&lt;p&gt;Ploneは広く普及するのと同時にいくつか大きな問題を抱えていました。これらに対応することが後の適応につながりました。&lt;/p&gt;
&lt;p&gt;ここでの内容は以下となります。 - そもそもCMSの目的とは何か - Plone の抱えていた問題点 - ウェブ経由でのカスタマイズ(TTW) - TTW との決別 - さらなる問題の顕現とコミュニティの対応&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="plone5"&gt;
&lt;h4&gt;4. 適応を果たしたPlone5&lt;/h4&gt;
&lt;p&gt;この結果、進化の過程を経て適応を果たしたPlone5が生まれました。その適応の内容とはどのようなものなのか。おもに技術的な面をお話します。&lt;/p&gt;
&lt;p&gt;内容は以下になります。&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;擬似適応&lt;/strong&gt; - plone.apiのファサードパターンとZCAのアダプターパターン
*   plone.apiのファサードパターン&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;plone.api はソフトウェア設計における「ファサード・パターン」の優れた事例です。 このファサードにより クリーンかつモダンで完全にPythonicなプラグインが書けるようになりました！&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Zope Component Architectureのアダプターパターン&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ZCAに実装されたデザインパターンのひとつがアダプターパターンです。このデザインパターンはPloneのような大規模で複雑なシステムで有効で、数々の厄介な問題を解決するために役立っています。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;収斂進化&lt;/strong&gt; - オブジェクトパブリッシングの問題への対処&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
Ploneはアダプターを採用することで、オブジェクトパブリッシングがよりシンプルになり、カスタマイズしやすくなっています。&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;strong&gt;比喩的な意味での適応&lt;/strong&gt; - Diazoによるテーミング&lt;/p&gt;
&lt;p&gt;Plone5のテーマは、HTMLレイアウトとCSS、JavaScriptに加えてコンテンツをどこに配置するかを記述したDiazoのルールファイルで構成されています。最近のHTMLフレームワークをPloneに組み込むことに何ら問題はありません。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;実際にPlone5のテーミングのデモを行います。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h4&gt;5. さいごに&lt;/h4&gt;
&lt;p&gt;適応の考え方はWebシステムだけに限ったものではありません。このパワフルなコンセプトは他のソフトウェアプロジェクトでも使えるものです。Webの世界は休みなく変化していますが、Ploneはその適応力で将来に置いてもその独自の地位を確保し続けるものと思います。&lt;/p&gt;
&lt;/div&gt;
</summary><category term="plone"></category></entry><entry><title>Pycon JP Opening〜Keynote 2016-09-21</title><link href="https://pyvideo.org/pycon-japan-2016/pycon-jp-opening-keynote-2016-09-21.html" rel="alternate"></link><published>2016-09-21T00:00:00+00:00</published><updated>2016-09-21T00:00:00+00:00</updated><author><name>Jessica McKellar</name></author><id>tag:pyvideo.org,2016-09-21:pycon-japan-2016/pycon-jp-opening-keynote-2016-09-21.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Keynote (10:29): Breaking the rules&lt;/p&gt;
</summary><category term="keynote"></category></entry><entry><title>Python を支える技術: モジュール・インポートシステム編</title><link href="https://pyvideo.org/pycon-japan-2016/python-wozhi-eruji-shu-moziyuruinpotoshisutemubian.html" rel="alternate"></link><published>2016-09-21T00:00:00+00:00</published><updated>2016-09-21T00:00:00+00:00</updated><author><name>Nozomu Kaneko</name></author><id>tag:pyvideo.org,2016-09-21:pycon-japan-2016/python-wozhi-eruji-shu-moziyuruinpotoshisutemubian.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python で書かれたほとんどすべてのプログラムには import 文が使われていますが、普段あまりその仕組みを気にすることはないのではないでしょうか。モジュールをインポートする際には、実はその背後で適切なモジュールを検索してロードするための様々な仕組みが働いています。この発表では、インポートが動く仕組みについて概説するとともに Python 上でそれを拡張する方法について説明します。&lt;/p&gt;
</summary></entry><entry><title>PythonでもPythonじゃなくても使える汎用的なMicroservice実行環境</title><link href="https://pyvideo.org/pycon-japan-2016/pythondemopythonziyanakutemoshi-erufan-yong-de-namicroserviceshi-xing-huan-jing.html" rel="alternate"></link><published>2016-09-21T00:00:00+00:00</published><updated>2016-09-21T00:00:00+00:00</updated><author><name>Yosuke Suzuki</name></author><id>tag:pyvideo.org,2016-09-21:pycon-japan-2016/pythondemopythonziyanakutemoshi-erufan-yong-de-namicroserviceshi-xing-huan-jing.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;日本経済新聞 電子版ではDjango/PythonでのWebAPIを、Microserviceアーキテクチャーを採用して、開発しています。DockerコンテナーをElasticBeanstalk上で動かす方式は非常に汎用性が高く、Django以外の環境でも利用できています。この方式について説明しつつ、運用上の工夫、メリット・デメリットについて話をします。&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;日本経済新聞 電子版ではMicroserviceアーキテクチャーを採用して、WebAPIやWebフロントエンドのサービス開発を行っている。DockerコンテナーをElasticbeanstalk上で稼働させる方式を採用、Django/Pythonのアプリケーション・サーバー以外にも、rundeckのバッチサーバー、nodejsのフロントエンドアプリケーションなどPython以外の実行環境でも同じ方式を採用している。GithubからCircleCIを経由して、Blue/Greenデプロイメントできるようにすることで、インフラ運用の負荷を上げないようにしている。&lt;/p&gt;
</summary></entry><entry><title>Pythonでpyftpdlibを使ってFTPサーバーを作る際に使ったテクニックの紹介</title><link href="https://pyvideo.org/pycon-japan-2016/pythondepyftpdlibwoshi-tsuteftpsabawozuo-ruji-nishi-tsutatekunitsukunoshao-jie.html" rel="alternate"></link><published>2016-09-21T00:00:00+00:00</published><updated>2016-09-21T00:00:00+00:00</updated><author><name>Shinya Okano</name></author><id>tag:pyvideo.org,2016-09-21:pycon-japan-2016/pythondepyftpdlibwoshi-tsuteftpsabawozuo-ruji-nishi-tsutatekunitsukunoshao-jie.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Pythonでちょっとしたツールを作る際、コードの書き方やパッケージング、自動テストの仕方など、どのようにしようか、考えるかと思います。 私がツールを作る際にどのようにしているか、具体的にFTPサーバーアプリケーションを例に紹介します。&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;pyftpdlibという、PythonでFTPサーバーを実装するためのモジュールを使って、FTPサーバーアプリケーションを作ってみました。&lt;/p&gt;
&lt;p&gt;このアプリケーションは、個人的な用途で作ったものですが、PyPIに登録していて、pipでインストールしてすぐに利用できるようにしています。&lt;/p&gt;
&lt;p&gt;また、設定ファイルでいろいろな環境で動かせるようにしたり、テストコードを書いたりもしています。 個人用のちょっとしたツールであっても、品質良く、使いやすいものを作れるように工夫するのは良いことだと思います。&lt;/p&gt;
&lt;p&gt;このアプリケーションを例に、どのようにツールを作っていくとよいのか紹介します。&lt;/p&gt;
&lt;p&gt;紹介するコードは、GitHubで公開しています。&lt;/p&gt;
</summary></entry><entry><title>Pythonで入門するApache Spark</title><link href="https://pyvideo.org/pycon-japan-2016/pythonderu-men-suruapache-spark.html" rel="alternate"></link><published>2016-09-21T00:00:00+00:00</published><updated>2016-09-21T00:00:00+00:00</updated><author><name>Tatsuya Atsumi</name></author><id>tag:pyvideo.org,2016-09-21:pycon-japan-2016/pythonderu-men-suruapache-spark.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;現在、世界的に普及が進んでいる大規模分散処理フレームワークのApache Sparkについて、その基礎及び、Python APIを通じた各種ライブラリの使い方について、Sparkについて触れた事がない方でもわかるように基本から解説します。 Sparkは集計処理のような従来の操作のほか、機械学習のような複雑なワークロードにも対応しているため、様々な大規模分散処理を簡単に実装することが可能になります。
Abstract&lt;/p&gt;
&lt;p&gt;Apache Sparkは2013年にApache Software Foundationに寄贈されて以来、Hadoop MapReduceに変わる新たな大規模分散処理フレームワークとして急速な進化と普及を続けています。&lt;/p&gt;
&lt;p&gt;Sparkは早くからPythonを重要な言語と位置付けており、Scala, Javaに加えPythonのAPIが公式から提供されています。そのため、JavaやScalaといった言語の経験がない方でも手軽に大規模分散処理を実装することができる点も非常に魅力的です。&lt;/p&gt;
&lt;p&gt;また、Sparkには近年のAIブームにより注目を集めている機械学習を扱うためのライブラリであるMLlibや、SQLで処理を記述するためのSpark SQL、ストリーミング処理を記述するSpark Streamingなど、近年のトレンドに応じたライブラリが公式に提供されているため、単純な集計処理以外にも様々なワークロードに対応することが可能です。&lt;/p&gt;
&lt;p&gt;本講演では、Python APIを通じてApache Sparkの使い方及び各種ライブラリの使い方について基本からご説明いたします。&lt;/p&gt;
</summary></entry><entry><title>Pythonで実現する4コマ漫画の分析・評論</title><link href="https://pyvideo.org/pycon-japan-2016/pythondeshi-xian-suru4komaman-hua-nofen-xi-ping-lun.html" rel="alternate"></link><published>2016-09-21T00:00:00+00:00</published><updated>2016-09-21T00:00:00+00:00</updated><author><name>Shinji Sato</name></author><id>tag:pyvideo.org,2016-09-21:pycon-japan-2016/pythondeshi-xian-suru4komaman-hua-nofen-xi-ping-lun.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;日本に限らず海外でも漫画表現として用いられる「4コマ(yonkoma)」。近年ではアニメの題材にもなることが多く、より良い表現を考慮すべく、その技術解析・分析・評論を行い、読者・漫画家・編集者を含めてその成果を共有することは文化的に大きな価値があると言えます。本Talkでは、その序論として4コマ漫画のデータを抜き出し並びに、統計や機械学習を用いた分析をPythonで一気通貫に行う手法を紹介します。&lt;/p&gt;
&lt;div class="section" id="abstract"&gt;
&lt;h4&gt;Abstract&lt;/h4&gt;
&lt;p&gt;紹介予定のコード: &lt;a class="reference external" href="https://github.com/esuji5/yonkoma2data"&gt;https://github.com/esuji5/yonkoma2data&lt;/a&gt;&lt;/p&gt;
&lt;div class="section" id="talk"&gt;
&lt;h5&gt;本Talkの目的&lt;/h5&gt;
&lt;div class="section" id="id1"&gt;
&lt;h6&gt;なぜ4コマ漫画なのか&lt;/h6&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;ある程度決まった形式の表現なので機械的に処理しやすい&lt;/li&gt;
&lt;li&gt;WEB上で目にすることの多い漫画表現、アニメ原作に選出される頻度が多くなってきた等の文化的価値&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h6&gt;分析結果をどう使うか&lt;/h6&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;カメラワーク、キャラクター配置、会話パターンのレコメンド&lt;/li&gt;
&lt;li&gt;4コマ漫画をラフネームレベルで自動生成&lt;ul&gt;
&lt;li&gt;フリー素材のイラストを用いて配置することで自動生成もできるかも？&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h5&gt;データを集める&lt;/h5&gt;
&lt;div class="section" id="id4"&gt;
&lt;h6&gt;基本データの収集&lt;/h6&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;それぞれのコマに切り出す&lt;ul&gt;
&lt;li&gt;(PDFファイル名を背表紙のバーコードから自動リネーム)&lt;/li&gt;
&lt;li&gt;PDFからページごとのPNG画像へ&lt;/li&gt;
&lt;li&gt;PNG画像から1コマ毎の画像へ&lt;/li&gt;
&lt;li&gt;コマからセリフや人物がはみ出すものが失敗しやすい&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;扉絵を切り出す&lt;/li&gt;
&lt;li&gt;柱ネタ&lt;/li&gt;
&lt;li&gt;おまけページ&lt;/li&gt;
&lt;li&gt;奥付&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id5"&gt;
&lt;h6&gt;コマ上に配置されたデータ&lt;/h6&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;人物&lt;ul&gt;
&lt;li&gt;アニメ顔検出器で正面の顔は結構取れる&lt;ul&gt;
&lt;li&gt;↑をベースに発展させた検出器とかつくれないか&lt;/li&gt;
&lt;li&gt;アニメ顔検出器で取った画像を元に学習させてさらに検出器を…&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;吹き出し&lt;ul&gt;
&lt;li&gt;画像認識ベースである程度できそう？&lt;/li&gt;
&lt;li&gt;ただの白背景との識別はどうするか&lt;/li&gt;
&lt;li&gt;逆に文字を検出してからの吹き出し検出はどうか&lt;/li&gt;
&lt;li&gt;赤松健氏のマンガ図書館Zで、自動翻訳のために機械学習で吹き出し検出をやろうとしているらしい&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;セリフを抜き出す&lt;ul&gt;
&lt;li&gt;吹き出し検出&lt;/li&gt;
&lt;li&gt;OCR&lt;ul&gt;
&lt;li&gt;Google Cloud Vision APIで縦書きも認識できているのでこちらをメインで使う&lt;/li&gt;
&lt;li&gt;吹き出し別にセリフが取れるように設定が必要&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;背景&lt;/li&gt;
&lt;li&gt;セリフ、人物、状況から該当コマを検索するシステム&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id6"&gt;
&lt;h5&gt;データを分析する&lt;/h5&gt;
&lt;div class="section" id="id7"&gt;
&lt;h6&gt;人物配置・カメラワークの分析&lt;/h6&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;人物配置のパターン&lt;ul&gt;
&lt;li&gt;イマジナリーライン超えの率&lt;/li&gt;
&lt;li&gt;同ポジション率&lt;/li&gt;
&lt;li&gt;他、どんなパターンがあるのか&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id8"&gt;
&lt;h6&gt;会話内容の分析&lt;/h6&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;頻出語を調べる&lt;/li&gt;
&lt;li&gt;会話遷移のパターン&lt;ul&gt;
&lt;li&gt;話を振る、話を広げる、ツッコむ&lt;/li&gt;
&lt;li&gt;ギャグを言う、受けない、ディスコミュニケーション&lt;ul&gt;
&lt;li&gt;助け舟で話を広げる、更に話を広げる、ギャグを再度繰り出す、グッドコミュニケーション&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="id9"&gt;
&lt;h6&gt;まとめ&lt;/h6&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;泥臭い画像処理が必要&lt;/li&gt;
&lt;li&gt;etc...&lt;/li&gt;
&lt;li&gt;まだまだ大変なので、一緒にやってくれる方を募集しています&lt;/li&gt;
&lt;li&gt;アニメでも色々やりたいのでお待ちしてます&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary></entry><entry><title>Pythonistaよ、Pythonistaを知っているか 〜こんなの欲しかった！ iOSアプリ開発環境Pythonista〜</title><link href="https://pyvideo.org/pycon-japan-2016/pythonistayo-pythonistawozhi-tsuteiruka-konnanoyu-shikatsuta-iosapurikai-fa-huan-jing-pythonista.html" rel="alternate"></link><published>2016-09-21T00:00:00+00:00</published><updated>2016-09-21T00:00:00+00:00</updated><author><name>Mitsuki Sugiya</name></author><id>tag:pyvideo.org,2016-09-21:pycon-japan-2016/pythonistayo-pythonistawozhi-tsuteiruka-konnanoyu-shikatsuta-iosapurikai-fa-huan-jing-pythonista.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Pythonista はPythonでiOS開発・実行する環境を備えたアプリです。 このtalkでは、実際にPythonistaで作成したアプリをもとに、Pythonistaの基本的な使い方や特徴などを説明していきます。&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;「自分が求める iOSアプリが欲しい、開発してみたい！でも他の言語を一から学んで作るのはちょっとしんどいかも...」&lt;/p&gt;
&lt;p&gt;そんなあなたに朗報です。&lt;/p&gt;
&lt;p&gt;「Pythonista」なら慣れ親しんだPythonでiOSアプリを開発できちゃいます。&lt;/p&gt;
&lt;p&gt;PythonistaはPythonでiOS開発・実行する環境を備えたアプリです。 iPhoneにインストールするだけで、エディタ、ローカル実行環境が使えるようになっています。また、他アプリとの連携はもちろん、豊富なUIキット、pipが使用できる等々、アプリ開発をするにあたっての幅広いサポート機能が備わっています。&lt;/p&gt;
&lt;p&gt;本talkでは、私が実際に作成したiOSアプリの制作の流れをもとに、Pythonistaの基本的な使い方や特徴などを説明していきます。&lt;/p&gt;
</summary></entry><entry><title>Raspberry Piで日本の子供たちにプログラミングのパッションを伝えよう</title><link href="https://pyvideo.org/pycon-japan-2016/raspberry-pideri-ben-nozi-gong-tachinipuroguramingunopatsushiyonwochuan-eyou.html" rel="alternate"></link><published>2016-09-21T00:00:00+00:00</published><updated>2016-09-21T00:00:00+00:00</updated><author><name>Antoine Choppin</name></author><id>tag:pyvideo.org,2016-09-21:pycon-japan-2016/raspberry-pideri-ben-nozi-gong-tachinipuroguramingunopatsushiyonwochuan-eyou.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Raspberry Piを頭脳にした「Kano」と言う子供向けのパソコンには、プログラミングを学ぶためのPythonアプリが沢山載っています。これらのアプリを日本語化し、日本の子供達にコードの情熱を伝えるプロジェクトを紹介します。&lt;/p&gt;
&lt;div class="section" id="abstract"&gt;
&lt;h4&gt;Abstract&lt;/h4&gt;
&lt;p&gt;プログラミングのパッションを子供たちにどう伝えるか？&lt;/p&gt;
&lt;p&gt;KanoはRaspberry Piを頭脳にした簡単なパソコンで、プログラミングを身につける為のPythonアプリを沢山含んでいます。日本の子供たちにコーディングを楽しんでもらうためにKanoアプリを日本語化しました。Pythonアプリの多重言語化のテクニックや注意点についてお話しします。また、Raspberry Piを使ったプログラミング・ワークショップを紹介します。&lt;/p&gt;
&lt;p&gt;自分の周りの子供たちを巻き込んで、あなたもプログラミングのパッションを伝えてみませんか？&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>Robot Frameworkでブラウザテストやってみた話</title><link href="https://pyvideo.org/pycon-japan-2016/robot-frameworkdeburauzatesutoyatsutemitahua.html" rel="alternate"></link><published>2016-09-21T00:00:00+00:00</published><updated>2016-09-21T00:00:00+00:00</updated><author><name>Yasushi Masuda</name></author><id>tag:pyvideo.org,2016-09-21:pycon-japan-2016/robot-frameworkdeburauzatesutoyatsutemitahua.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Pythonで書かれた受け入れテストフレームワーク、 Robot Framework をご存知でしょうか？ 簡単なテキストファイルでテストパターンを記述でき、 軽快かつ柔軟にテストスイートを構築できます。 Selenium を使ったブラウザテストをはじめ、色々なテストに応用でき、もちろんPythonで拡張できます。 この講演では、 Robot Framework の機能を解説し、業務で使ってみたエピソードを紹介します。&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;Pythonで書かれた受け入れテストフレームワーク、 Robot Framework をご存知でしょうか？ 簡単なテキストファイルでテストパターンを記述でき、 軽快かつ柔軟にテストスイートを構築できます。 Selenium を使ったブラウザテストをはじめ、色々なテストに応用でき、もちろんPythonで拡張できます。 この講演では、 Robot Framework の機能を解説し、業務で使ってみたエピソードを紹介します。&lt;/p&gt;
</summary></entry><entry><title>無料でできる、Cloud9上で開発してHerokuにデプロイする手順を共有します</title><link href="https://pyvideo.org/pycon-japan-2016/wu-liao-dedekiru-cloud9shang-dekai-fa-shiteherokunidepuroisurushou-shun-wogong-you-shimasu.html" rel="alternate"></link><published>2016-09-21T00:00:00+00:00</published><updated>2016-09-21T00:00:00+00:00</updated><author><name>Takeshi Sugiyama</name></author><id>tag:pyvideo.org,2016-09-21:pycon-japan-2016/wu-liao-dedekiru-cloud9shang-dekai-fa-shiteherokunidepuroisurushou-shun-wogong-you-shimasu.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Pythonを勉強してWebアプリを作ってみたはいいが、サーバーがないのでスマホや会社のPCから使えるようなアプリにはできない、という初心者は多いと思います。そこでこの発表ではHerokuとCloud9というクラウドサービスを無料枠の範囲で使って、簡単な蔵書管理をおこなうWebアプリを立ち上げる方法を順を追って説明します。使用するのはPython3,django,PostgreSQLです。&lt;/p&gt;
&lt;div class="section" id="abstract"&gt;
&lt;h4&gt;Abstract&lt;/h4&gt;
&lt;div class="section" id="web"&gt;
&lt;h5&gt;せっかく自分で書いたWebアプリ、スマホからも使いたいですよね&lt;/h5&gt;
&lt;p&gt;Pythonを始めて半年くらい、いろいろ勉強した結果、自分で簡単なWebアプリが書けるようになってくると、自分のパソコン上だけでなく、スマホや会社のパソコンからもアクセスしたくなってきます。例えば蔵書管理アプリ。自宅の蔵書をデータベース化したら、ブックオフの店頭で「あれ、この本この前買ったんだっけ？」みたいになったときに、さっとスマホで検索したいですよね。 でも自宅のPCに外出先からアクセスできる環境や、インターネット上に自作アプリを載せられるサーバーを持っている人は多くないです。 そこで気軽に無料に始められるPaaS(Platform as a Service), Herokuです。&lt;/p&gt;
&lt;p&gt;私の場合、10年以上昔にPHP+PostgreSQLでゴリゴリ書いた蔵書管理アプリがあまりに使いにくい（特にiPhoneから開いたときのレイアウトがかなりいけてない）ので、Python3+django+PostgreSQLで書き直して、もっと使いやすくてかっこいいアプリにしたい！というのがきっかけでした。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="pc"&gt;
&lt;h5&gt;思いついたことをちょっと試してみたいけど、今日はPC持ってない&lt;/h5&gt;
&lt;p&gt;私は趣味のプログラマで、平日はがっつり残業ありの事務系サラリーマンなので、プライベートのパソコンを毎日持ち歩いたりはしないです。 でも週末は週末で家族サービスで忙しかったりして、なかなか時間がとれないので会社の昼休みなんかに、ちょっとデバッグができたらいいな、と思うことがよくあります。 そこで気軽に無料で始められるクラウド上の開発環境、Cloud9です。 ご存知ない方のために軽く補足しておくと、Cloud9はクラウド上に自分専用のワークスペースを作って、PyCharmみたいな感じのIDEを使って開発作業ができるクラウドサービスです。無料の場合、CPU1コア/メモリ1GB/HDD5GBで非公開のワークスペースは1つだけという制約がありますが、蔵書管理くらいの軽いアプリなら全然問題ありません。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="herokucloud9"&gt;
&lt;h5&gt;HerokuやCloud9って、便利らしいけどちょっとハードルが・・・&lt;/h5&gt;
&lt;p&gt;HerokuもCloud9も、個人で趣味の範囲で使う分には無料サービスの範囲で十分楽しめるのが最大の魅力です。 でも公式サイトはヘルプもドキュメントも英語だし、なかなかとっつきにくいですよね。&lt;/p&gt;
&lt;p&gt;そこで日本語の情報を探してネット上をさまようわけですが、知りたいことがずばり書いてあることはめったにありません。 Herokuは当初Ruby on Rails向けに開発されたこともあり、Rails系の記事が多くPython3系の情報を選び出すだけでもなかなか苦労します。 Cloud9のほうは「便利だよ」という紹介記事は多いのですが、具体的にCloud9を使ったPython3系の開発についての情報となると、これまたなかなか苦労します。&lt;/p&gt;
&lt;p&gt;結局は英語の公式ドキュメントを調べたりStack Overflowの質問と回答を追っかけてみたりしながら試行錯誤でかなりの時間を費やすことになります。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="cloud9python3-djangoheroku"&gt;
&lt;h5&gt;Cloud9で開発したPython3+djangoのアプリをHerokuにデプロイする手順を共有します&lt;/h5&gt;
&lt;p&gt;私が自作の蔵書管理アプリをHerokuにあげた経験を通して会得した、Cloud9上でPython3+django+PostgreSQLのアプリの開発環境を構築する手順と、Cloud9からHerokuにスムースにデプロイする手順を共有します。&lt;/p&gt;
&lt;p&gt;文字にするとたったこれだけのことですが、いくつもはまりポイントがあります。&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Cloud9でのPythonはデフォルトでは2.7なのでワークスペースを作ったあとで3.5に切り替える必要がある&lt;/li&gt;
&lt;li&gt;Cloud9のPythonを3.5に切り替えると、ワークスペースを作ったときに一緒に入れていたはずのdjangoは再インストールが必要&lt;/li&gt;
&lt;li&gt;Herokuが公式にオススメしているdjangoの設定があるが、デフォルトで構築されるdjangoの設定とは異なるので調整が必要&lt;/li&gt;
&lt;li&gt;djangoはデフォルトではSQLiteだが、Heroku上ではSQLiteのテーブルは消えてしまうことがあるのでPostgreSQLにすることが必要&lt;/li&gt;
&lt;li&gt;Cloud9上でPostgreSQLのデータベース初期化が一筋縄ではいかない&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;これらのはまりポイントをどうやって切り抜けるかを、発表の中でできるだけわかりやすく説明する予定です。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary></entry><entry><title>You Might Not Want Async (in Python)</title><link href="https://pyvideo.org/pycon-japan-2016/you-might-not-want-async-in-python.html" rel="alternate"></link><published>2016-09-21T00:00:00+00:00</published><updated>2016-09-21T00:00:00+00:00</updated><author><name>Tzu-ping Chung</name></author><id>tag:pyvideo.org,2016-09-21:pycon-japan-2016/you-might-not-want-async-in-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Async programming is hot®, but also difficult. Since Python is fundamentally designed for sequential (as in “not parallel”) programming, asynchrony doesn’t feel natural, and requires more mentally to comprehend than, say, a language that can go async directly (bad pun intended).
Abstract&lt;/p&gt;
&lt;p&gt;Asynchrony in Python had gathered much momentum recently, with interests from core developers, as evidenced by the introduction of &lt;tt class="docutils literal"&gt;asyncio&lt;/tt&gt; in Python 3.4, and a great boom of related third-party projects following it. By utilising more functionalities from the underlying operating system, it is a great solution to many existing problems in Python applications, gaining practical concurrency without working around the well-known GIL (global interpreter lock) problem.&lt;/p&gt;
&lt;p&gt;With all its advantages, asynchrony is, however, still a relatively new concept in Python, and as a result could be somewhat mistaken, even misunderstood by some people. One of these misconceptions, probably the most serious, is to mistake concurrency through asynchrony for parallelism. Although &lt;tt class="docutils literal"&gt;asyncio&lt;/tt&gt; (and other similar solutions) lets multiple parts of your program executes without interfering each other, it does not allow them to run together—this is still impossible, at least in CPython, due to the continued existence of the GIL. This makes asynchrony suitable for only a certain, instead of all, kinds of problems. Evaluation is therefore required before a programmer can decide whether the asynchrony model is suitable for a particular application.&lt;/p&gt;
&lt;p&gt;Furthermore, partly due to its relatively short existence, paradigms in asynchrony programming do not necessarily fit well with other parts of Python, including libraries, either built-in or third-party ones. Since only blocking libraries were available in most of Python’s history, many assumptions they made may not work well with async programs out-of-the-box. Adopting asynchrony, at least at the present time, will therefore introduce more technical debt to your program. These are all important aspects that require much consideration before you dive head-first into asynchrony.&lt;/p&gt;
</summary></entry><entry><title>[招待講演 / Invited Talk] 確率的ニューラルネットの学習と Chainer による実装</title><link href="https://pyvideo.org/pycon-japan-2016/zhao-dai-jiang-yan-invited-talk-que-lu-de-niyurarunetsutonoxue-xi-to-chainer-niyorushi-zhuang.html" rel="alternate"></link><published>2016-09-21T00:00:00+00:00</published><updated>2016-09-21T00:00:00+00:00</updated><author><name>Seiya Tokui</name></author><id>tag:pyvideo.org,2016-09-21:pycon-japan-2016/zhao-dai-jiang-yan-invited-talk-que-lu-de-niyurarunetsutonoxue-xi-to-chainer-niyorushi-zhuang.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;『PyCon JP参加者と接点が少ない分野の方々を招待し、参加者と講演者とが交流できる場所を提供する』ことを目的に招待講演を行います。&lt;/p&gt;
&lt;div class="section" id="abstract"&gt;
&lt;h4&gt;Abstract&lt;/h4&gt;
&lt;p&gt;研究者の方と話してみたいという方は、この機会にぜひ講演を聞きに来てください。&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>Blockchain for Pythonistas</title><link href="https://pyvideo.org/pycon-japan-2016/blockchain-for-pythonistas.html" rel="alternate"></link><published>2016-09-20T00:00:00+00:00</published><updated>2016-09-20T00:00:00+00:00</updated><author><name>あべんべん</name></author><id>tag:pyvideo.org,2016-09-20:pycon-japan-2016/blockchain-for-pythonistas.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;まずはFintechが、どれぐらいPythonと関連が深いのかを説明します。 他のデータ基盤とブロックチェーンの違いについて説明します。 ブロックチェーンを簡単な概要と、金融や金融以外の動向を紹介します。 後半はPython技術を利用した事例と今後の可能性について解説します。&lt;/p&gt;
&lt;div class="section" id="abstract"&gt;
&lt;h4&gt;Abstract&lt;/h4&gt;
&lt;p&gt;FintechのビジネスはビッグデータやAIの技術に注目が集まっているので、ここではPythonの利用が活発になってきています。&lt;/p&gt;
&lt;p&gt;そのFintechの基盤技術の一つであるブロックチェーンは、分散型のアーキテクチャーとして注目を浴びていますが、金融業界以外のPythonistaには、ブロックチェーンがビジネスや顧客への価値にどう結びつくのかイメージがしずらいので、わかりやすい解説を行ってから、金融と金融以外でのそれぞれ動向について紹介します。&lt;/p&gt;
&lt;p&gt;後半はPythonの技術を利用したブロックチェーンの事例を紹介し、これからの可能性について解説します。&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Fintechについて&lt;/li&gt;
&lt;li&gt;仮想通貨（ビットコイン）について&lt;/li&gt;
&lt;li&gt;ブロックチェーンの概要&lt;/li&gt;
&lt;li&gt;国内外での最新動向&lt;/li&gt;
&lt;li&gt;Pythonの技術を利用した事例&lt;/li&gt;
&lt;li&gt;ブロックチェーンの可能性について&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary></entry><entry><title>Building a Simple Japanese Content-Based Recommender System in Python</title><link href="https://pyvideo.org/pycon-japan-2016/building-a-simple-japanese-content-based-recommender-system-in-python.html" rel="alternate"></link><published>2016-09-20T00:00:00+00:00</published><updated>2016-09-20T00:00:00+00:00</updated><author><name>Charles Vallantin Dulac</name></author><id>tag:pyvideo.org,2016-09-20:pycon-japan-2016/building-a-simple-japanese-content-based-recommender-system-in-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Online stores such as Amazon but also news/blogs websites suffer from information overload. Customers can easily get lost in their large variety (millions) of products or articles. Recommendation engines help users narrow down the large variety by presenting possible suggestions. In this talk, I will show how to create a simple Japanese content-based recommendation system in Python for blog posts.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;Wikipedia states recommendation systems have become extremely common in recent years and are utilized in a variety of areas: some popular applications include movies, music, news, books, research articles, search queries, social tags, and products in general.&lt;/p&gt;
&lt;p&gt;Content-based recommendation engines typically produce a list of recommendations in one of two ways – through collaborative or content-based filtering. Collaborative filtering approaches building a model from a user's past behavior (items previously purchased or selected and/or numerical ratings given to those items) as well as similar decisions made by other users. This model is then used to predict items (or ratings for items) that the user may have an interest in. Content-based filtering approaches utilize a series of discrete characteristics of an item in order to recommend additional items with similar properties.&lt;/p&gt;
&lt;p&gt;This current talk will focus on building a simple Japanese content-based recommendation engine.&lt;/p&gt;
&lt;p&gt;To abstract the features of the items in the system, an item presentation algorithm is applied. A widely used algorithm is the TF–IDF representation (also called vector space representation). It assumes that words in the sentence are separated by spaces in spite of that the assumption is not true in most east Asian languages. MeCab, a fast Japanese morphological analyzer, helps us to solve this problem by extracting from the document all the unique tokens constituting the markup and allow us to apply a TF–IDF on top of them.&lt;/p&gt;
&lt;p&gt;To create suggestions based on these keywords, we use Word2Vec which is an unsupervised algorithm for learning the meaning behind words. Word2vec takes an input as a large corpus of text and produces a high-dimensional space (typically of several hundred dimensions), with each unique word in the corpus being assigned a corresponding vector in the space. By computing vectors of our keywords and computing distances between them, we can find similar words and suggest articles which contain them.&lt;/p&gt;
</summary></entry><entry><title>Getting started with chatops in python with errbot</title><link href="https://pyvideo.org/pycon-japan-2016/getting-started-with-chatops-in-python-with-errbot.html" rel="alternate"></link><published>2016-09-20T00:00:00+00:00</published><updated>2016-09-20T00:00:00+00:00</updated><author><name>Guillaume Binet</name></author><id>tag:pyvideo.org,2016-09-20:pycon-japan-2016/getting-started-with-chatops-in-python-with-errbot.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;ChatOps is about bringing your devops tools into your team chatroom. Some common operations implemented with chatops includes deployments, provisioning, monitoring, graphs, development tracking... In this presentation I will present Errbot a chatbot, written and extensible in Python. This talk will show you how to get started and the interesting pythonic features available through the API.&lt;/p&gt;
&lt;div class="section" id="abstract"&gt;
&lt;h4&gt;Abstract&lt;/h4&gt;
&lt;p&gt;ChatOps is about bringing your devops tools into your team chatroom. The recent rise of professional chatting services like Slack or Hipchat shows that people are embracing a new way of collaborating. Bringing your tools within those conversations tightens the feedback loop, improves information sharing and onboarding new people in your team. Some common operations implemented with chatops includes deployments, provisioning, monitoring, graphs, development tracking... Those are often implemented with the help of a chat bot like in this presentation Errbot. If your chatops system can be easily extended, for example here in Python, we will see that a team culture can crystallize around it with fun additions. This presentation's goal is to show you how easy it is to get started with chatops in Python, with some technical tips (installation, security, architecture...) but also some social tips to make your company understand better its potential for your team.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="errbot"></category></entry><entry><title>マイクロサービスを利用する側のパフォーマンス向上策</title><link href="https://pyvideo.org/pycon-japan-2016/maikurosabisuwoli-yong-suruce-nopahuomansuxiang-shang-ce.html" rel="alternate"></link><published>2016-09-20T00:00:00+00:00</published><updated>2016-09-20T00:00:00+00:00</updated><author><name>Atsushi Kanaya</name></author><id>tag:pyvideo.org,2016-09-20:pycon-japan-2016/maikurosabisuwoli-yong-suruce-nopahuomansuxiang-shang-ce.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;マイクロサービスを利用する側として処理速度を向上するために、非同期IOやmultiprocessingを使った場合の事例を紹介します。&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;モノタロウではマイクロサービスを進めており、開発効率の向上など一定の成果を上げております。 マイクロサービスを利用する側もHTTP APIを利用する実装が済んでおり、現在は1リクエストあたりの処理効率を上げる取り組みを進めています。 マイクロサービスを利用する側として、Pythonにおける非同期IOやmultiprocessingを使った場合に、どのくらいリクエストの処理効率が向上するのか、実際に適用した場合にコーディングがどの程度複雑になるのかを説明します。&lt;/p&gt;
</summary></entry><entry><title>Mezzanine, the best CMS on Python</title><link href="https://pyvideo.org/pycon-japan-2016/mezzanine-the-best-cms-on-python.html" rel="alternate"></link><published>2016-09-20T00:00:00+00:00</published><updated>2016-09-20T00:00:00+00:00</updated><author><name>Hiroki KIYOHARA</name></author><id>tag:pyvideo.org,2016-09-20:pycon-japan-2016/mezzanine-the-best-cms-on-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Mezzanine &lt;a class="reference external" href="http://mezzanine.jupo.org/"&gt;http://mezzanine.jupo.org/&lt;/a&gt; is one of CMSs on Python. I've used Mezzanine to host djangoproject.jp. On this session, you can learn the best way to host web sites on Python.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;Want you create nice, rich Web site by Python? Try Mezzanine.Mezzanine is one of CMSs on Python. I've used Mezzanine to host djangoproject.jp. On this session, you can learn the best way to host web sites on Python.
Mezzanine features&lt;/p&gt;
&lt;p&gt;Want you create nice, rich Web site by Python? Try Mezzanine. You can create pages, posting news and uploading images though nice Web interfaces. But also it can manage users flexibly, adding redirects and customize easily.&lt;/p&gt;
&lt;p&gt;I'll tell you why I choiced Mezzanine. There's a lot of alternative CMSs in the world. Wordpress, django-cms, Plone and so on. Benefits and disadvantages of each CMSs is thene.&lt;/p&gt;
&lt;p&gt;Ofcause I'll tell you way to start the project and deplay Mezzanine server to the Web. and way to customize Mezzanine. There's some nice themes. and you can change the page and design very easily. And it created by Python and Django, so If you can use them, you can add your own features very, very easily.&lt;/p&gt;
</summary><category term="mezzanine"></category></entry><entry><title>ニューラルネットワークのフレームワークであるChainerで始める対話Botの作成</title><link href="https://pyvideo.org/pycon-japan-2016/niyurarunetsutowakunohuremuwakudearuchainerdeshi-merudui-hua-botnozuo-cheng.html" rel="alternate"></link><published>2016-09-20T00:00:00+00:00</published><updated>2016-09-20T00:00:00+00:00</updated><author><name>Masaya Ogushi</name></author><id>tag:pyvideo.org,2016-09-20:pycon-japan-2016/niyurarunetsutowakunohuremuwakudearuchainerdeshi-merudui-hua-botnozuo-cheng.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;2016年はFacebook, LINEなどがAPIを公開し対話Botを作成して自由に使える、使ってもらえる環境になってきています。今回は人工知能の分野で話題のニューラルネットワークが使用可能なフレームワークのChainerを用いて対話Botを作成する手法を紹介したいとおもいます。&lt;/p&gt;
&lt;div class="section" id="abstract"&gt;
&lt;h4&gt;Abstract&lt;/h4&gt;
&lt;div class="section" id="chainerbot"&gt;
&lt;h5&gt;ニューラルネットワークのフレームワークであるChainerで始める対話Botの作成&lt;/h5&gt;
&lt;p&gt;2016年はLINE, FacebookなどがAPIを公開したことでBotの活躍する場がますます増えてきています。決めうちで回答を返したり、各企業が提供しているAPIを使って対話用のBotを作成することも可能ですが、ご自身で中身を理解しつつ賢くなる対話Botを作成したくありませんか？&lt;/p&gt;
&lt;p&gt;今回は下記の内容をご紹介致します。&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;話題の推定方法&lt;/li&gt;
&lt;li&gt;対話内容の学習方法&lt;/li&gt;
&lt;li&gt;Slackなどの各種APIとの連携&lt;/li&gt;
&lt;li&gt;Dockerによる開発環境の提供&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;バージョンアップ後に追加予定内容&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Botのキャラクター性の変換方法&lt;/li&gt;
&lt;li&gt;Botを用いた検索システム&lt;/li&gt;
&lt;li&gt;感情を考慮するBot&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;発表までにバージョンアップすれば上記の内容以上のことをお話すると思います。 あなたも対話Botの作成にチャレンジしてみませんか？&lt;/p&gt;
&lt;p&gt;PS:発表が決まれば、発表者のバージョンアップのやる気が上がります。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary></entry><entry><title>Pythonで作るTiny DAW (Digitai Audio Workstation)</title><link href="https://pyvideo.org/pycon-japan-2016/pythondezuo-rutiny-daw-digitai-audio-workstation.html" rel="alternate"></link><published>2016-09-20T00:00:00+00:00</published><updated>2016-09-20T00:00:00+00:00</updated><author><name>Ransui Iso</name></author><id>tag:pyvideo.org,2016-09-20:pycon-japan-2016/pythondezuo-rutiny-daw-digitai-audio-workstation.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;ある日YouTubeを見ているとボタンがいっぱいついたデバイスでライブパフォーマンスをしている動画が目に留まりました。調べてみるとnovation社のLaunchPadというデバイスを使っているようです。これは面白そうと早速入手しましたが、付属しているDAWソフトウェアはプロユースにも対応するレベルのもので、難しくてとても使いこなせません。どうしましょう。そうです。Pythonを使って自分が使いやすいDAWを作ってしまえばいいのです！&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;このセッションでは、Pythonで実装したDigital Audio Workstation(DAW)ソフトウェアを紹介します。このDAWはプロユースや市販のものに比べてれば非常にコンパクトなものですが、音遊びの目的には十分に使えるものです。入力デバイスにはnovation社のLaunchPadを使います。&lt;/p&gt;
&lt;p&gt;DAWを作成するためには、音声サンプルデータの読み込み・管理・出力、MIDIデバイスとの通信、リアルタイムイベント管理、ユーザが操作するGUI等、複数のトピックを取り扱う必要があります。DAWというシステム全体を見ると、とても複雑で難しそうに思えますが、構成要素ごとに分解して、1つ1つの部品ごとに実装し、動作を確認しながら徐々に積み上げていく事で、モチベーションを保ちながら、楽しくプログラミングしていけます。&lt;/p&gt;
&lt;p&gt;Pythonには豊富なライブラリがあり、また、ドキュメンテーションを大切にする文化があります。本当に難しい部分は、先人スーパーハッカーの手によってほとんど解決されており、これらの成果をすぐに利用できるという非常に大きなアドバンテージがあるのです。そして、一旦部品がそろってしまえば、これらを組み合わせるのはPythonの得意分野。拡張も自由自在です。これは、ちょうど、先人たちの偉大なライブラリを組み合わせて何かを作っていくこととまったく同じことなのです。&lt;/p&gt;
&lt;p&gt;LaunchPadは音楽用のデバイスとして開発されていますが、汎用的な入出力装置として、潜在的な高い可能性を秘めています。セッションではこれらの可能性や応用事例についてもお話しできればと思っています。&lt;/p&gt;
&lt;p&gt;(LaunchPadとはどういうものかを知りたい方は、YouTubeで検索して動画を見てみてください。きっと興味が沸くと思いますよ!)&lt;/p&gt;
</summary></entry><entry><title>Pythonで作るWebクローラ入門</title><link href="https://pyvideo.org/pycon-japan-2016/pythondezuo-ruwebkuroraru-men.html" rel="alternate"></link><published>2016-09-20T00:00:00+00:00</published><updated>2016-09-20T00:00:00+00:00</updated><author><name>Ai Makabi</name></author><id>tag:pyvideo.org,2016-09-20:pycon-japan-2016/pythondezuo-ruwebkuroraru-men.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Pythonの代表的なクローラ構築フレームワークScrapyを利用して，目的に応じたクローラを構築する方法について学びます．発表中では，クロール対象のサイトやサービスに迷惑をかけないようなテクニックについて言及すると共に，BeautifulSoup4の利用方法を中心に，クロールして集めたデータの抽出（スクレイピング）・加工方法についても紹介します．&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;データ分析分野が急成長すると共に，分析対象となる情報をWeb上から自動的に収集する「Webクローラ（Web crawler）」と呼ばれる技術が注目を集めています． 本発表ではPythonの代表的なクローラ構築フレームワークScrapyを利用して，目的に応じたクローラを構築・運用する方法について学びます．ここでいう目的に応じたクローラとは，特定のWebサイトやサービスの情報に着目し選択的にクローリングしてくるクローラを指します．発表中では，クローラ構築方法に加えてクロール対象のサイトやサービスに迷惑をかけないような紳士的なクローラ構築方法について言及します． 更にBeautifulSoup4の利用方法を中心に，クロールして集めたデータの抽出（スクレイピング）・加工方法について紹介します． 主に取り上げる予定のライブラリは以下です．&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;aiohttp&lt;/li&gt;
&lt;li&gt;asyncio&lt;/li&gt;
&lt;li&gt;BeautifulSoup4&lt;/li&gt;
&lt;li&gt;lxml&lt;/li&gt;
&lt;li&gt;pyquery&lt;/li&gt;
&lt;li&gt;requests&lt;/li&gt;
&lt;li&gt;Scrapy&lt;/li&gt;
&lt;li&gt;scrapy-splash&lt;/li&gt;
&lt;li&gt;Selenium&lt;/li&gt;
&lt;/ul&gt;
</summary></entry><entry><title>仕事で使うちょっとしたコードをOSSとして開発メンテしていく - Django Redshift Backend の開発</title><link href="https://pyvideo.org/pycon-japan-2016/shi-shi-deshi-uchiyotsutoshitakodowoosstoshitekai-fa-menteshiteiku-django-redshift-backend-nokai-fa.html" rel="alternate"></link><published>2016-09-20T00:00:00+00:00</published><updated>2016-09-20T00:00:00+00:00</updated><author><name>Takayuki Shimizukawa</name></author><id>tag:pyvideo.org,2016-09-20:pycon-japan-2016/shi-shi-deshi-uchiyotsutoshitakodowoosstoshitekai-fa-menteshiteiku-django-redshift-backend-nokai-fa.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;AWSの「Redshift」は、Postgresqlベースで作られたデータウェアハウスです。ポスグレベースなのでpsqlで接続したりPythonのpostgres用ドライバが使えます。Djangoもポスグレ用ドライバで使えます、と思ったら色々問題あった。仕事で必要なんですけど。しょうがないので、Djangoに不慣れな私が手探りでDjangoのバックエンドを作って、公開して、バグレポに対応して、テストを書いて、テスト自動化して。OSS活動の各段階でどうやって進めてきたのか、紹介します。&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;手探りでDjangoのバックエンドを作って、公開して、バグレポに対応して、テストを書いて、テスト自動化して。OSS活動の各段階でどうやって進めてきたのか、紹介します。&lt;/p&gt;
&lt;p&gt;DjangoのRedshift用データベースバックエンドを実装したのは、仕事で必要だったからです。 最初はSELECTでのみ動作確認していて、使える使える～と思ってたんですが、Django Adminでレコードを追加しようとしたら問題が起きました。Djangoが発行するSQLにRedshiftが対応してなかったんです。もうプロジェクトは進んでいて、そこ確認してなかったのかよ！状態。さてどうする？ということでDjangoのRedshift用バックエンドを実装しました。データベース接続する「ドライバー」はデータベースサーバーと通信しないといけないので実装とか大変そうに見えるんですが、今回作ったのはドライバではなくバックエンド。DjangoのデータベースバックエンドはDjangoのORMのやりたいことをSQLで組み立ててドライバに伝える中間層です。つまり、DjangoのコードどこかにあるSQL組み立て部分をハックして別のSQLを組み立てさせれば良い、ということです。それくらいなら、と思って作ってみたらコメント空白行除いて30行程度でした。しかもほとんど元コードのコピペです。これが django-redshift-backend の最初のバージョンでした。&lt;/p&gt;
&lt;p&gt;そういったコードをどうして業務外の時間で実装したのか、どうしてPyPIに公開したのか、どうやって育てていったのか。また、自分が使っていない用途に対する利用者からの要望にどう対応していったのか。OSSコードを書いてメンテナンスしていくモチベーションは何か。Djangoのdatabase backendがどういう仕組みで書かれているのか、Djangoのようなフレームワークの中身のテストの書き方はどう調べたのか。django-redshift-backendの開発を題材に紹介します。&lt;/p&gt;
&lt;p&gt;アウトライン&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;DjangoとRedshiftの紹介&lt;/li&gt;
&lt;li&gt;Redshiftはポスグレ互換！からの～&lt;/li&gt;
&lt;li&gt;django-redshift-backend 紹介&lt;/li&gt;
&lt;li&gt;最初の実装、最初のPull Request、PyPIへの公開&lt;/li&gt;
&lt;li&gt;なぜ仕事で使うコードを個人の時間で実装してOSSで公開したの？&lt;/li&gt;
&lt;li&gt;OSS開発とどうやってつきあっていくのか&lt;/li&gt;
&lt;/ul&gt;
</summary></entry><entry><title>数学的基礎から学ぶ Deep Learning</title><link href="https://pyvideo.org/pycon-japan-2016/shu-xue-de-ji-chu-karaxue-bu-deep-learning.html" rel="alternate"></link><published>2016-09-20T00:00:00+00:00</published><updated>2016-09-20T00:00:00+00:00</updated><author><name>Junya Kaneko</name></author><id>tag:pyvideo.org,2016-09-20:pycon-japan-2016/shu-xue-de-ji-chu-karaxue-bu-deep-learning.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;みんな大好き state of art の deep learning。そんな 技術を使ってみたい僕らのために沢山ライブラリも出てきたよね。チュートリアルはできた。でも、結局何やってんのかわかんない。 よし、高校生程度の数学の知識から始めて deep learning を行うプログラムを、主に Numpy を用いてスクラッチから作ってみよう！&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;本講演は、Deep learning のライブラリを使ってみたい or 使ってみたけど、何が起こっているのかわからない。何が起こってるのかわからないものから結果がでてきても、気持ち悪くて使えない。&lt;/p&gt;
&lt;p&gt;そんな方向けに、Deep learning を支える数学の基礎的な部分を知り、スクラッチから deep learning を行い、学習過程を確認できるプログラムを自ら作ってみることができるようになるためのエッセンスを、数学とプログラムコードの両面から紹介します。&lt;/p&gt;
&lt;p&gt;今回は Caltech 101 をサンプルとして用いた Deep Convolutional Neural Network (Deep CNN) による一般物体認識を取り上げます。&lt;/p&gt;
</summary><category term="deep learning"></category></entry><entry><title>たった一ファイルの python スクリプトから始める OSS 開発入門</title><link href="https://pyvideo.org/pycon-japan-2016/tatsutayi-huairuno-python-sukuriputokarashi-meru-oss-kai-fa-ru-men.html" rel="alternate"></link><published>2016-09-20T00:00:00+00:00</published><updated>2016-09-20T00:00:00+00:00</updated><author><name>Kei Iwasaki</name></author><id>tag:pyvideo.org,2016-09-20:pycon-japan-2016/tatsutayi-huairuno-python-sukuriputokarashi-meru-oss-kai-fa-ru-men.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;1ファイルのスクリプトを書き捨てる程度でしかコードを書かなかったところから、書いたコードを公開するようになってによって起こった技術的な視野の広がりについて、実際の体験を元にお話します。&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;オペレーション中心のWeb系インフラエンジニアが 1ファイルのシェルスクリプトを書き捨てる程度でしかコードを書かなかったところから python を使い始めたこと、そして更に書いたコードを公開するようになってによってどのような変化が起こったのか、ということを紹介します。&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h4&gt;ストーリー&lt;/h4&gt;
&lt;p&gt;日々のオペレーション中心の業務の片手間でたまに1ファイルのシェルスクリプトを書く程度だったところから python に手をつけ始めたことにより、&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;URLエンコードをした状態のファイルパスで 255byte (アプリケーションのDBカラムのサイズ) を超えるもの一覧を取得する&lt;/li&gt;
&lt;li&gt;便利なPyPIモジュールを使ってやや複雑な条件のCDNキャッシュのパージ&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;といったそれまでなかなか手を付けづらかった調査や作業の効率化ができるようになりました。&lt;/p&gt;
&lt;p&gt;一方で書いたスクリプトは実行したサーバにそのまま放置されてしまい、結果自分でも存在を忘れがちになります。 よその環境で使いたいと思ったときに移植するのが非常に面倒だったりと、せっかくコードで作業をに対するアプローチ方法が増えても、自分に依存してしまうという状況は大きく変わりませんでした。&lt;/p&gt;
&lt;p&gt;そんな中、自分が見ている環境の 複数サーバに変更を加えたりファイルのやり取りを効率的にするためのコマンドラインツールの開発を行い、 踏み台にサーバに導入し当時のチームに展開しました。&lt;/p&gt;
&lt;p&gt;この際に Github Enterprice 上のコードを pip install で導入する形で展開しましたが この体験がパッケージング、PyPIへの登録方法を覚えるきっかけになり、私にとっての一つのブレイクスルーとなりました。&lt;/p&gt;
&lt;p&gt;その結果&lt;/p&gt;
&lt;p&gt;「このコード、実はPyPIに登録(pip install で入るように)すれば便利では？」&lt;/p&gt;
&lt;p&gt;という発想が自然になったのです。&lt;/p&gt;
&lt;p&gt;また公開することを前提にコードを書くということを通じて&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;「普段自分が行っている日々のオペレーションを一般化して捉える」&lt;/li&gt;
&lt;li&gt;「これまで使っていたOSSなソフトウェアを支えいているのもまた自分たちと同じエンジニアなのだ」&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;という視点がより強くなり、 エンジニアとしての自身の考え方の広がりも実感するようになりました。&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="id2"&gt;
&lt;h4&gt;アウトライン&lt;/h4&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;オペレーション、シェルスクリプトから python スクリプトへ&lt;/li&gt;
&lt;li&gt;1 ファイルのpython スクリプトから python を使ったツール開発へ&lt;/li&gt;
&lt;li&gt;ツール開発からパッケージングよる成果物の配布やってみて&lt;/li&gt;
&lt;li&gt;パッケージングをしてみた、「pip install で入れば便利なのでは？」の気づき&lt;/li&gt;
&lt;li&gt;PyPIに公開することを前提にコードを書くようになってよかったこと&lt;/li&gt;
&lt;li&gt;これまで私が公開してきたものの紹介&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</summary></entry><entry><title>[招待講演 / Invited Talk] Pythonを含む多くのプログラミング言語を扱う処理フレームワークとパターン</title><link href="https://pyvideo.org/pycon-japan-2016/zhao-dai-jiang-yan-invited-talk-pythonwohan-muduo-kunopuroguraminguyan-yu-woxi-uchu-li-huremuwakutopatan.html" rel="alternate"></link><published>2016-09-20T00:00:00+00:00</published><updated>2016-09-20T00:00:00+00:00</updated><author><name>Hironori Washizaki</name></author><id>tag:pyvideo.org,2016-09-20:pycon-japan-2016/zhao-dai-jiang-yan-invited-talk-pythonwohan-muduo-kunopuroguraminguyan-yu-woxi-uchu-li-huremuwakutopatan.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;『PyCon JP参加者と接点が少ない分野の方々を招待し、参加者と講演者とが交流できる場所を提供する』ことを目的に招待講演を行います。&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;研究者の方と話してみたいという方は、この機会にぜひ講演を聞きに来てください。&lt;/p&gt;
</summary></entry><entry><title>週末サイエンティストのススメ</title><link href="https://pyvideo.org/pycon-japan-2016/zhou-mo-saienteisutonosusume.html" rel="alternate"></link><published>2016-09-20T00:00:00+00:00</published><updated>2016-09-20T00:00:00+00:00</updated><author><name>Yuta Kashino</name></author><id>tag:pyvideo.org,2016-09-20:pycon-japan-2016/zhou-mo-saienteisutonosusume.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;クラウドサービス等で安価になった計算資源，大量にあるオープンなデータ，そして多様なオープンソースのツール群．これらを利用すれば，勤務外や週末に計算機上で科学的な解析・分析や推測や予測を自分の手で行うことができる時代になっています．本トークでは他の言語に較べて鬼のように豊かなエコシステムをもつ，Pythonの科学計算スタックを屈指し，プライベートプロジェクトとしてサイエンスをすることについて，環境の構築方法，スタックの紹介，そして事例を提示します．計算環境を整え，基礎知識を蓄え，少しのやる気さえあれば，みんながサイエンスのプロジェクトを行うことができます．普段の職業は「みんなちがって」も「みんな」が計算機上でサイエンスが可能になっている「いい」時代にいるのです．みんなちがってみんないい．Pythonの科学計算スタックはそれを可能にすることを本トークで実感することができたら幸いです．&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;科学プロジェクトの民主化，プライベートプロジェクト化，それが可能になっていることを伝えるのが，本トーク「週末サイエンティストのススメ」の目的です．それが可能になってきたのは以下の理由があります．&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;まず，安価にコンピューティングリソースが手に入れることができること．Amazon Web Service, Google Cloud Platform, Microsoft Azure, さくらインターネット等のクラウドホスティングや専用サーバサービスを利用すれば，それほどお金をかけることなく好きなだけコンピューティングリソースを手に入れることが出来ます．科学の営みは不断なる試行錯誤を行うことです．その試行錯誤をスケールさせるために，安価なコンピュータリソースが必要になるのは言うまでもありません．&lt;/li&gt;
&lt;li&gt;次に，公的にオープンなデータを手に入れることができること．Kaggleなどの機械学習コンペのデータが比較的自由に手に入りますし，オープンアクセスジャーナルを中心として研究データを公開する論文が増えてます．そしてNASAやCERN，NOAA、NICTなどの各国の科学研究機関が積極的にデータを公開しはじめてますし，各国政府，行政機関がオープンデータの名の下にデータを利用自由に公開しています．大量のオープンデータがあるということは，多様で信頼のある科学プロジェクトの基礎となります．&lt;/li&gt;
&lt;li&gt;そして，オープンソースとしての豊かなPython科学計算スタック．科学計算ライブラリ，数値計算ライブラリ，数学ライブラリ，統計解析・データ分析ライブラリ，データ可視化ライブラリがPythonエコシステムには非常に充実していて，他の言語環境の追随を許しません．それぞれの科学計算スタックの開発プロジェクトは多くの開発者が開発に参加し，頻繁にアップデートが行われています．このPythonの科学計算スタックを利用すれば，大きな苦労をすることなく最新の科学計算手法を利用した科学プロジェクトを行うことが可能になっています．&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最初に，本トークでは，上記の計算機環境/オープンデータ/Python科学計算スタックの充実が「週末サイエンティスト」を可能にすることを伝え，サイエンスプロジェクトが既にみんなが参加できる活動になっていることを提議したいと思います．&lt;/p&gt;
&lt;p&gt;次に本トークでは，Python科学計算スタックをあまり苦労しないで始めるための環境作りについて，そのコツとノウハウをお伝えしたいと思います．計算機をどうするか，OSは何を選択するか，Pythonのディストリビューションはどうするか，科学プロジェクトとして実験をするにはどうすればいいか，そういう話題になります．&lt;/p&gt;
&lt;p&gt;更に本トークでは，たくさんあるPython科学計算スタックを整理し，分類した上で，それぞれのライブラリやツールを紹介したいと思います．Python科学計算スタックのライブラリやツールは非常に多くあります．なぜ数多くのライブラリやツールが存在するかというと，自然や社会を科学で切り取る手法がたくさんあり，その手法ごとに実装が異なるためです．日曜大工に必要な工具でさえ，ドライバー，スパナ，ドリル，グラインダー，サンダー，ジグソー，ハンマー，ブロワーなどたくさんあります．そのことを思えばサイエンスに必要な工具がたくさん必要になることは明らかです．&lt;/p&gt;
&lt;p&gt;最後に，本トークではPython科学計算スタックを利用した科学プロジェクトの事例を具体的に紹介する予定です．機械学習・ニューラルネット，ベイジアン推定，離散問題，疫学などを科学プロジェクトの事例として考えています．このトークで紹介する事例については，Jupyter NotebookやPythonのソースコードを公開し，具体的に参加者が実行することで「週末サイエンティスト」となることができることを実感してもらえれば幸いです．&lt;/p&gt;
</summary></entry></feed>