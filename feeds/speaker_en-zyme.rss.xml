<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Mon, 27 Nov 2017 00:00:00 +0000</lastBuildDate><item><title>Find the farm -- data science insights into real estate pricing</title><link>https://pyvideo.org/pycon-ca-2017/find-the-farm-data-science-insights-into-real-estate-pricing.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Using gmplot, geopy, and Python data science tools we’ll discover realtor farms, and assess the characteristics of sales vs listing price. Real estate transactions tend to be geographically sparse and temporally rare. There is often both a listing and a selling agent in the representing a given property. The sales price is determined by a number of factor. While there has been considerable interest in building pricing models relying on physical parameters, there has been little work done in assessing the contribution of the realtor. The discovery of a ‘farm’ uses cluster identification methods. These farms can then be analyzed for imputed listing prices and the sales price, both of which are negotiated.&lt;/p&gt;
&lt;p&gt;The problem: Most real estate analytics deal only with property description and location. Markets can swing quickly from buyer’s to seller’s advantage, so timing and days on market is important. Agent effects are not well understood and can be a significant factor in determining the actual price. Data source are examined . Python Modules utilized. Application of data science, e.g. modules pycluster, pyclustering, scikit-learn. (the talk is primarily application, not theory)&lt;/p&gt;
&lt;p&gt;Examples of geographic and hidden affinity Analysis of listing price to appraisal and listing agent effect Analysis of over/under-performance of sales price to listing price Determination of listing agent vs selling agent negotiation skills. Effect of dual agency on pricing. Effect of listing agent Farms on neighborhood pricing.&lt;/p&gt;
&lt;p&gt;Consideration as a Machine Learning project using Theano or TensorFlow , Keras, Sonnet tflearn&lt;/p&gt;
&lt;p&gt;Conclusions and future directions Questions&lt;/p&gt;
&lt;p&gt;data, code, notebooks, and graphics will be included&lt;/p&gt;
&lt;p&gt;The methodology presented is likely applicable to other low-volume high-value facilitated transactions.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">en zyme</dc:creator><pubDate>Sat, 18 Nov 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-11-18:pycon-ca-2017/find-the-farm-data-science-insights-into-real-estate-pricing.html</guid></item><item><title>Find the Farm Data Science Insights into Real Estate Pricing</title><link>https://pyvideo.org/pydata-new-york-city-2017/find-the-farm-data-science-insights-into-real-estate-pricing.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Real estate transactions are geographically and temporally sparse. Pricing models traditionally rely on only physical parameters; omitting realtor effects, listing or selling. Realtor farms found by cluster identification, are analyzed for negotiation strength in listing vs sales prices.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">en zyme</dc:creator><pubDate>Mon, 27 Nov 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-11-27:pydata-new-york-city-2017/find-the-farm-data-science-insights-into-real-estate-pricing.html</guid></item><item><title>Beginning Julia: Language and Landscape</title><link>https://pyvideo.org/pydata-seattle-2017/beginning-julia-language-and-landscape.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Math operations are discounted in the small where I/O dominates, yet gate compute costs in the large. Be it square or root, exponential or matrix ops, time/space efficacy matters for science. engineering, and machine learning. Julia provides right sizing for precision, accuracy, and performance. Julia's Type system, Just-in-Time, and Dispatch are introduced via REPL, IJulia, Juno, JuliaBox&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Why is an alternative to Python needed for numerical work? Data Science (clustering) and Machine Learning (neural network activation functions) provide two good reasons to look forward to Julia 1.0. This talk is built on the just released version 0.6.&lt;/p&gt;
&lt;p&gt;Calculation, precision, storage, representation and graphing all need to be considered, especially at scale. Exponential and Matrix operations are prone to underflow, overflow and and accumulated rounding errors could lead to dire consequences. For abritrary precision values, it may take longer to display or transmit the result than to calculate it. Speed does matter when billions of flops are being done. Julia's clever common sense is indeed a &amp;quot;A fresh approach to technical computing.&amp;quot;&lt;/p&gt;
&lt;p&gt;A very brief recap language and version differences. While the focus is Julia, some compare and contrast with Python is appropriate.&lt;/p&gt;
&lt;p&gt;Julia's Type system, Just-in-Time, and Dispatch style are worth a good look. Graphing as well. GrElegance lurks above and under the hood.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">en zyme</dc:creator><pubDate>Thu, 06 Jul 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-07-06:pydata-seattle-2017/beginning-julia-language-and-landscape.html</guid></item><item><title>How to make ** less expensive and more expressive</title><link>https://pyvideo.org/pycon-ca-2016/how-to-make-less-expensive-and-more-expressive.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Exponentiation is the gotcha of math operators. Be it square or square
root, exp, log, tanh, or the complex roots of unity, ** has it's work
cut out. Ints, floats, fractions, and zero don't play nice with **.
Precision, accuracy, and performance aspects of Python can be revealed
by following ** thru the interpreter down to the metal. SciPy, SymPy,
and Machine Learners care, shouldn't you?&lt;/p&gt;
&lt;div class="section" id="en-zyme-bio"&gt;
&lt;h4&gt;en zyme Bio&lt;/h4&gt;
&lt;p&gt;en zyme has been a coder scientist for decades, traversing meteorology,
telecom, biotech, and was into data before it was big.&lt;/p&gt;
&lt;p&gt;en zyme is the founder of Ad, Hock &amp;amp; Nimble [ a data consultancy] and of
40th Parallel Python. en zyme can be reached at
&lt;a class="reference external" href="mailto:en.zyme&amp;#64;40thparallelpython.com"&gt;en.zyme&amp;#64;40thparallelpython.com&lt;/a&gt; or &lt;a class="reference external" href="mailto:enzyme&amp;#64;bu.edu"&gt;enzyme&amp;#64;bu.edu&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">en zyme</dc:creator><pubDate>Sat, 12 Nov 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-11-12:pycon-ca-2016/how-to-make-less-expensive-and-more-expressive.html</guid></item><item><title>What the FORTRAN is **Doing in Python?</title><link>https://pyvideo.org/scipy-2015/what-the-fortran-is-doing-in-python-scipy-2015-en-zyme.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">En Zyme</dc:creator><pubDate>Fri, 10 Jul 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-07-10:scipy-2015/what-the-fortran-is-doing-in-python-scipy-2015-en-zyme.html</guid></item><item><title>What the FORTRAN is ** Doing in Python ?</title><link>https://pyvideo.org/pygotham-2015/what-the-fortran-is-doing-in-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Exponentiation is just extended multiplication, or is it? Only up to a
point. In reality, Real numbers don't really exist, there are only a
finite number of Integers, negative zero is not always the same as
positive zero, and Complex numbers really are. All of which make
exponentiation both subtle and computationally expensive. A
retrospective and prospective of the intricacies of reification of
'number' and the occasional futility of mathematical operations in
particular, **.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">en zyme</dc:creator><pubDate>Sun, 16 Aug 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-08-16:pygotham-2015/what-the-fortran-is-doing-in-python.html</guid></item><item><title>Pythons are Deaf, So are Some Pythonistas</title><link>https://pyvideo.org/pycon-us-2015/pythons-are-deaf-so-are-some-pythonistas.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;ASL, like Python, is a language which is both fun and powerful. We have
used Python to build a tool, ASL-CLeaR (American Sign Language Concept
Learning Resource) for the DHH community which will teach STEM
terminology using ASL exclusively. We are also building a summer program
to teach Python in English/ASL to DHH students.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">en zyme</dc:creator><pubDate>Sun, 12 Apr 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-04-12:pycon-us-2015/pythons-are-deaf-so-are-some-pythonistas.html</guid></item></channel></rss>