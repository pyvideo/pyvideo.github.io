<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_russel-winder.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2017-10-26T17:00:00+01:00</updated><entry><title>On Big Computation and Python</title><link href="https://pyvideo.org/pycon-uk-2017/on-big-computation-and-python.html" rel="alternate"></link><published>2017-10-26T17:00:00+01:00</published><updated>2017-10-26T17:00:00+01:00</updated><author><name>Russel Winder</name></author><id>tag:pyvideo.org,2017-10-26:pycon-uk-2017/on-big-computation-and-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python is a programming language slow of execution but fast of program development – except for some sorts of bug that a statically compiled language catch easily. Lots of science folk are using Python because of ease of development and the great libraries, not to mention the great communities. Big Data has, it seems become a thing, though most scientists still use what are really very small data sets. What about Big Computation, lots of CPU (and GPGPU) cycles, not really a lot of TB of data?&lt;/p&gt;
&lt;p&gt;To speed up Python code execution we have Cython (not exactly Python, but…), NumPy (a whole new subsystem, but everyone like Matplotlib), and Numba. But are these really good for Big Computation. Should we be looking as polyglot systems? C is a non-starter. Is C++ good enough? Can Go or Rust help? Is D a player? Have you ever tried Chapel?&lt;/p&gt;
&lt;p&gt;In this session we'll try some stuff out, then you can make up your own mind.&lt;/p&gt;
</summary></entry><entry><title>Making Computations Execute Very Quickly</title><link href="https://pyvideo.org/pydata-london-2015/making-computations-execute-very-quickly.html" rel="alternate"></link><published>2015-06-20T00:00:00+00:00</published><updated>2015-06-20T00:00:00+00:00</updated><author><name>Russel Winder</name></author><id>tag:pyvideo.org,2015-06-20:pydata-london-2015/making-computations-execute-very-quickly.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;This session is about using native code with Python to ensure
computationally intensive programs execute as fast as is possible.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python is well known as a language that does not execute computationally
intensive programs quickly. Traditionally, Cython and/or NumPy have been
the tools to speed things up. There is interest in Numba as a new way
forward. However C++14, D, Chapel, and possibly Rust, maybe Go, are
there, are much easier to work with than you might think, and lead to
very high performance and easily maintained code.&lt;/p&gt;
&lt;p&gt;In this session we will look at a couple of example codes to provide
signposts as to how we can take a more polyglot approach to the
construction of computationally intensive systems.&lt;/p&gt;
</summary></entry><entry><title>Making Python Computations Fast</title><link href="https://pyvideo.org/pycon-uk-2015/making-python-computations-fast.html" rel="alternate"></link><published>2015-09-18T00:00:00+00:00</published><updated>2015-09-18T00:00:00+00:00</updated><author><name>Russel Winder</name></author><id>tag:pyvideo.org,2015-09-18:pycon-uk-2015/making-python-computations-fast.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python is slow at computing things. Some people try to use Cython, Numba
or even NumPy to get round this. However the best way forward is to use
a specialist native code language. No not C. Some people will use C++,
but the real cogniscenti will use D or Chapel. This session will show
how to do this using a small example.&lt;/p&gt;
</summary></entry><entry><title>A RaspberryPi super computer in a briefcase</title><link href="https://pyvideo.org/pycon-uk-2016/a-raspberrypi-super-computer-in-a-briefcase.html" rel="alternate"></link><published>2016-09-20T00:00:00+00:00</published><updated>2016-09-20T00:00:00+00:00</updated><author><name>Russel Winder</name></author><id>tag:pyvideo.org,2016-09-20:pycon-uk-2016/a-raspberrypi-super-computer-in-a-briefcase.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Russel Winder&lt;/p&gt;
&lt;p&gt;Russel Winder will be leading a project at PyCon UK 2016 to develop a new open-source supercomputer, based on Raspberry Pis in clusters.&lt;/p&gt;
&lt;p&gt;This talk will introduce the project, and explain how you can join in.&lt;/p&gt;
&lt;p&gt;Following the talk on our open day, Russel will hold a planning and introduction session that day. On Monday work on the project will begin in earnest during the sprints.&lt;/p&gt;
&lt;p&gt;Everyone's welcome. You don't need to be an expert or an advanced programmer to join in. It's meant to be a fun project and an opportunity to learn. However, if you have an actual briefcase and some skills that would help make the finished project look impressive, you'll be especially warmly welcomed...&lt;/p&gt;
&lt;p&gt;You can just turn up and join in, but you can also contact Russel if you'd like to help plan the project.&lt;/p&gt;
&lt;p&gt;Don't forget to bring your Raspberry Pis with you.&lt;/p&gt;
&lt;p&gt;Apologies for some of the picture corruption in this video and a/v sync issues. We had a some first day glitches in our recording set up.&lt;/p&gt;
</summary></entry></feed>