<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/tag_nose.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2012-09-06T00:00:00+00:00</updated><entry><title>Django's Nasal Passage</title><link href="https://pyvideo.org/djangocon-us-2012/djangos-nasal-passage.html" rel="alternate"></link><published>2012-09-06T00:00:00+00:00</published><updated>2012-09-06T00:00:00+00:00</updated><author><name>Erik Rose</name></author><id>tag:pyvideo.org,2012-09-06:djangocon-us-2012/djangos-nasal-passage.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Django's testrunner gets you started quickly, but you soon hit your head
on its limitations as your project grows. By trading it for nose, a
testing framework popular in the wider Python community, we can reduce
boilerplate, boost performance, and improve testing UI, with only a few
lines of setting changes. Re-use your test DBs, integrate with Jenkins,
split your suite into pieces, and more.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;ul class="simple"&gt;
&lt;li&gt;Why nose?&lt;ul&gt;
&lt;li&gt;Pain points with standard Django testing&lt;/li&gt;
&lt;li&gt;Extensibility without writing custom, uncombineable testrunner
subclasses&lt;/li&gt;
&lt;li&gt;Rich ecosystem of helpful plugins&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;django-nose&lt;ul&gt;
&lt;li&gt;Testing just your apps, not all the random installed stuff&lt;/li&gt;
&lt;li&gt;Test-selection tricks: running just failed tests, running a
module, etc.&lt;/li&gt;
&lt;li&gt;Killing the boilerplate:&lt;/li&gt;
&lt;li&gt;No more imports into &lt;strong&gt;init&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;No more class name collisions and accidental shadowing&lt;/li&gt;
&lt;li&gt;With all this freedom, how best should you organize your tests?&lt;/li&gt;
&lt;li&gt;Going 4 times faster with fixture bundling&lt;/li&gt;
&lt;li&gt;Troubleshooting&lt;/li&gt;
&lt;li&gt;Fixtures are evil&lt;/li&gt;
&lt;li&gt;Where do I put the factories?&lt;/li&gt;
&lt;li&gt;Speeding startup with test DB reuse&lt;/li&gt;
&lt;li&gt;Writing faster TransactionTestCases with hygienic base classes&lt;/li&gt;
&lt;li&gt;Background on Django's handling of TransactionTestCases&lt;/li&gt;
&lt;li&gt;How to improve matters&lt;/li&gt;
&lt;li&gt;Test-only models: what's the best practice?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;nose-progressive&lt;ul&gt;
&lt;li&gt;Dots considered harmful. When will my tests be done?&lt;/li&gt;
&lt;li&gt;Patience is for the dead. Show me my tracebacks as they happen!&lt;/li&gt;
&lt;li&gt;My terminal is only this big. Don't waste my space.&lt;/li&gt;
&lt;li&gt;Hiding pointless stack frames&lt;/li&gt;
&lt;li&gt;Editor round-tripping for quick debugging&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Splitting into sub-suites&lt;ul&gt;
&lt;li&gt;An introduction to the attr plugin&lt;/li&gt;
&lt;li&gt;Have some run only on CI machines, some constantly, others before
checkin&lt;/li&gt;
&lt;li&gt;Choosing tests with regexes&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Other fun plugins&lt;ul&gt;
&lt;li&gt;f7u12, for when your tests get angry&lt;/li&gt;
&lt;li&gt;Coverage&lt;/li&gt;
&lt;li&gt;xunit, for your continual integration pleasure&lt;/li&gt;
&lt;li&gt;Profiling&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="django"></category><category term="nose"></category><category term="testing"></category></entry></feed>