<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_ravi-chandra.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2013-09-14T00:00:00+00:00</updated><entry><title>Fake it till you make it</title><link href="https://pyvideo.org/kiwi-pycon-2013/fake-it-till-you-make-it.html" rel="alternate"></link><published>2013-09-14T00:00:00+00:00</published><updated>2013-09-14T00:00:00+00:00</updated><author><name>Ravi Chandra</name></author><id>tag:pyvideo.org,2013-09-14:kiwi-pycon-2013/fake-it-till-you-make-it.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;A practical introduction to unit testing decoupled, service-oriented,
Python applications using with Mock library. A three-tiered (server,
client, and view) Flask web application is used as a motivating example
across the talk. Mock helps to isolate functionality specific to a layer
to facilitate fast, compact, unit testing while avoiding writing
specific mock classes or using fixtures.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&amp;#64; Kiwi PyCon 2013 - Saturday, 07 Sep 2013 - Track 1&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Audience level&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Intermediate&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In practise most of us have found testing to be much harder to achieve
in the &amp;quot;real world&amp;quot;. That is often because the application architecture
is modular with some level of service abstraction, and the ensuing
layers of code.&lt;/p&gt;
&lt;p&gt;The premise of this talk is: do not test someone else's code. They are a
good developer. They would have tested it so it must work.&lt;/p&gt;
&lt;p&gt;Taking this perspective allows us to develop fast and compact unit tests
for our application functionality while ignoring bigger picture
integration issues (these can be addresses using other types of tests!).
In our experience this unburdens developers so they can really practice
test-driven development much more diligently.&lt;/p&gt;
&lt;p&gt;Implementation of this approach is simplified thanks to the mock
library. Mock provides a core MagicMock class that obviates the need for
custom stubs throughout the code. Moreover, its supports patching
specific methods, properties, and more. Mocking is used to patch calls
to external code within our unit tests, since we don't need to test
them, in a non-non-invasive way to our application.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Slides&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://speakerdeck.com/nzpug/ravi-chandra-fake-it-till-you-make-it"&gt;https://speakerdeck.com/nzpug/ravi-chandra-fake-it-till-you-make-it&lt;/a&gt;&lt;/p&gt;
</summary></entry></feed>