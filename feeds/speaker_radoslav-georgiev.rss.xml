<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Fri, 12 Jul 2019 00:00:00 +0000</lastBuildDate><item><title>Software patterns for productive teams</title><link>https://pyvideo.org/europython-2019/software-patterns-for-productive-teams.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Software development is a team game.&lt;/p&gt;
&lt;p&gt;When we want to deliver more work, one of the variables that we can
change is the team size. But as we all know, increasing the team size
does not automatically translate into increased productivity &amp;amp; more
features shipped.&lt;/p&gt;
&lt;p&gt;If things are left unmanaged, people can step on each other toes, block
each other &amp;amp; generally decrease the overall productivity of a given
software project.&lt;/p&gt;
&lt;p&gt;In this talk we'll identify different problems teams can face &amp;amp; see how
we can solve them using different strategies &amp;amp; patterns.&lt;/p&gt;
&lt;p&gt;In the end, we want to enable the team to perform better &amp;amp; ship features
with high confidence. We want enable the team &amp;amp; put its potential into
building good software.&lt;/p&gt;
&lt;p&gt;Problems we are going to cover:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Constant merge conflicts / working in the same files&lt;/li&gt;
&lt;li&gt;Blocking each other on different features / Feature deadlock&lt;/li&gt;
&lt;li&gt;Constantly switching between bugfixing &amp;amp; feature development&lt;/li&gt;
&lt;li&gt;Constant regressions and things breaking down&lt;/li&gt;
&lt;li&gt;Fighting with local setup &amp;amp; not being able to properly test things,
especially when working with 3rd parties&lt;/li&gt;
&lt;li&gt;Merge strategies &amp;amp; improving the work with git &amp;amp; GitHub&lt;/li&gt;
&lt;li&gt;Communication between team members &amp;amp; ego fights&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For each problem, we are going to propose different solutions with
provided real-life examples from our experience &amp;amp; projects.&lt;/p&gt;
&lt;p&gt;The examples show are going to be in the context of large Python /
Django projects.&lt;/p&gt;
&lt;p&gt;This talk is the natural sequel of the following talks from previous
EuroPythons:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;EuroPython 2017 - Practical Debugging - Tips, Tricks and Ways to
think - &lt;a class="reference external" href="https://www.youtube.com/watch?v=9Ys4gCUtTh8"&gt;https://www.youtube.com/watch?v=9Ys4gCUtTh8&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;EuroPython 2018 - Django structure for scale and longevity -
&lt;a class="reference external" href="https://www.youtube.com/watch?v=yG3ZdxBb1oo"&gt;https://www.youtube.com/watch?v=yG3ZdxBb1oo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Radoslav Georgiev</dc:creator><pubDate>Fri, 12 Jul 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-07-12:europython-2019/software-patterns-for-productive-teams.html</guid><category>Abstractions</category><category>Best Practice</category><category>Communication</category><category>Django Projects</category><category>Management</category></item><item><title>PyCon Balkan Belgrade 2018 - Day 3 - LIVE STREAM</title><link>https://pyvideo.org/pycon-balkan-belgrade-2018/pycon-balkan-belgrade-2018-day-3-live-stream.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ridhwana Khan</dc:creator><pubDate>Sun, 18 Nov 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-11-18:pycon-balkan-belgrade-2018/pycon-balkan-belgrade-2018-day-3-live-stream.html</guid></item><item><title>PyCon Balkan Belgrade 2018 - LIVE STREAM</title><link>https://pyvideo.org/pycon-balkan-belgrade-2018/pycon-balkan-belgrade-2018-live-stream.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Luka Kladarić</dc:creator><pubDate>Fri, 16 Nov 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-11-16:pycon-balkan-belgrade-2018/pycon-balkan-belgrade-2018-live-stream.html</guid></item><item><title>Django structure for scale and longevity</title><link>https://pyvideo.org/europython-2018/django-structure-for-scale-and-longevity.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;div class="section" id="why"&gt;
&lt;h4&gt;Why&lt;/h4&gt;
&lt;p&gt;Django is great.&lt;/p&gt;
&lt;p&gt;But as we add new features, as our dev team grows &amp;amp; the software needs
to be stable on production, things can get quite messy.&lt;/p&gt;
&lt;p&gt;We are going to look at some common patterns, derived from experience,
on how to structure your Django project for scale and longevity.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what"&gt;
&lt;h4&gt;What&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Main topics are:&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Django service layer or where should business logic live?&lt;/li&gt;
&lt;li&gt;Using Django Rest Framework in a clean &amp;amp; repeatable way &amp;amp; combining
it with the service layer.&lt;/li&gt;
&lt;li&gt;Testing everything that matters, without repeating ourselves in
different tests.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We are going to talk about when to rely on existing abstraction so it’s
actually helpful &amp;amp; when to avoid existing abstraction, and code things
ourselves.&lt;/p&gt;
&lt;p&gt;The examples showed in this talk are derived from working with Django in
the last 5 years on projects with:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Daily production usage &amp;amp; production deploys.&lt;/li&gt;
&lt;li&gt;Dozens of apps.&lt;/li&gt;
&lt;li&gt;Hundreds of models &amp;amp; APIs.&lt;/li&gt;
&lt;li&gt;Tens of integrations working simultaneously.&lt;/li&gt;
&lt;li&gt;Teams of 5 to 10 people.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="who"&gt;
&lt;h4&gt;Who&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Key takeaways from the talk:&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Increased productivity when developing with Django.&lt;/li&gt;
&lt;li&gt;Deeper understanding of the software development process with Django.&lt;/li&gt;
&lt;li&gt;Demo project with everything mentioned in it.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The talk is great for all levels of Django knowledge - from beginners to
advanced users &amp;amp; teams.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="how"&gt;
&lt;h4&gt;How&lt;/h4&gt;
&lt;p&gt;The main way of getting the point across is going to be by showing
regular code, talking how it can get messy &amp;amp; then following up with
examples of improving that code. Hopefully this talk will start a lot of
discussion afterwards.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Breakdown of the talk:&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Django service layer&lt;ul&gt;
&lt;li&gt;Fat models or fat views?&lt;/li&gt;
&lt;li&gt;Where do I put my business logic?&lt;/li&gt;
&lt;li&gt;What is a service &amp;amp; what goes into a service?&lt;/li&gt;
&lt;li&gt;What is a selector &amp;amp; what goes into a selector?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;General Django structure&lt;ul&gt;
&lt;li&gt;How many apps should I have?&lt;/li&gt;
&lt;li&gt;Structuring your code so youр team can be more productive and have
less conflicts.&lt;/li&gt;
&lt;li&gt;Common modules &amp;amp; utilities.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Doing APIs with Django Rest Framework&lt;ul&gt;
&lt;li&gt;Splitting APIs in 2 groups - “giving data” and “taking data”&lt;/li&gt;
&lt;li&gt;Using a lot of generics for “give data”&lt;/li&gt;
&lt;li&gt;When do to selectors?&lt;/li&gt;
&lt;li&gt;Using no generics for “take data” (APIView + Services)&lt;/li&gt;
&lt;li&gt;Handling errors from services&lt;/li&gt;
&lt;li&gt;Inlining serializers &amp;amp; avoiding serializers reuse&lt;/li&gt;
&lt;li&gt;A neat &lt;tt class="docutils literal"&gt;inline_serializer&lt;/tt&gt; util&lt;/li&gt;
&lt;li&gt;Introducing general error formatting for your API&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Testing all of that - what should be &amp;amp; not be tested?&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Radoslav Georgiev</dc:creator><pubDate>Thu, 26 Jul 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-07-26:europython-2018/django-structure-for-scale-and-longevity.html</guid></item><item><title>Practical Debugging - Tips, Tricks and Ways to think</title><link>https://pyvideo.org/europython-2017/practical-debugging-tips-tricks-and-ways-to-think.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;When we write code, oftentimes things are not working as expected. We
followed the tutorial and yet we got an error. We introduce a new
feature but something else broke.&lt;/p&gt;
&lt;p&gt;Having to deal with bugs is inevitable. Trying to &amp;quot;debug&amp;quot; what
happened or what caused the problem can be really frustrating and
timewasting.&lt;/p&gt;
&lt;p&gt;The aim of this talk is go give ways to think &amp;amp; steps to take
when we are faced with the process of debugging.&lt;/p&gt;
&lt;p&gt;The language for the examples is going to be Python &amp;amp; the tools
used - from the python ecosystem.&lt;/p&gt;
&lt;p&gt;The talk will be practical, with a lot of real-world examples.&lt;/p&gt;
&lt;p&gt;The goal is to cover the following scenarios by showing different ways to approch the problem:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;You followed a tutorial but it's not working. What to do?&lt;/li&gt;
&lt;li&gt;You introduce new feature but things broke somewhere else in the project. What to do?&lt;/li&gt;
&lt;li&gt;You are using a popular 3rd party library but something breaks. What to do?&lt;/li&gt;
&lt;li&gt;A bug occurs and you have no idea what or who caused it. What to do?&lt;/li&gt;
&lt;li&gt;You can't fix or find the bug. What now?&lt;/li&gt;
&lt;li&gt;You want to generalize your debugging skills. How to do that?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We will be talking about critical changes, binary search, problem
isolation, interactive debuggers, printing, testing, greping and
other interesting things.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Radoslav Georgiev</dc:creator><pubDate>Fri, 14 Jul 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-07-14:europython-2017/practical-debugging-tips-tricks-and-ways-to-think.html</guid></item></channel></rss>