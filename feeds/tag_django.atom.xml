<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/tag_django.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2019-08-24T00:00:00+00:00</updated><entry><title>Django Tutorial Adventure Part 2</title><link href="https://pyvideo.org/python-frederick/django-tutorial-adventure-part-2.html" rel="alternate"></link><published>2018-12-13T00:00:00+00:00</published><updated>2018-12-13T00:00:00+00:00</updated><author><name>Patrick Pierson</name></author><id>tag:pyvideo.org,2018-12-13:python-frederick/django-tutorial-adventure-part-2.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;At the December 2018 Python Frederick event, Patrick walked through the second half of the Django 2.1 tutorial. Since Patrick is a DevOps engineer instead of a web developer, the group got to share in the experience in a novice.&lt;/p&gt;
&lt;p&gt;The Django tutorial is very large so we picked up from where we left off from the previous presentation. If you want to watch that experience, check out &lt;a class="reference external" href="https://www.youtube.com/watch?v=ZSs2eZ-yFps"&gt;https://www.youtube.com/watch?v=ZSs2eZ-yFps&lt;/a&gt;&lt;/p&gt;
</summary><category term="django"></category><category term="web development"></category></entry><entry><title>Django Tutorial Adventure</title><link href="https://pyvideo.org/python-frederick/django-tutorial-adventure.html" rel="alternate"></link><published>2018-08-09T00:00:00+00:00</published><updated>2018-08-09T00:00:00+00:00</updated><author><name>Patrick Pierson</name></author><id>tag:pyvideo.org,2018-08-09:python-frederick/django-tutorial-adventure.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;At the August 2018 Python Frederick event, Patrick walked through the Django 2.1 tutorial. Since Patrick is a DevOps engineer instead of a web developer, the group got to share in the experience in a novice.&lt;/p&gt;
&lt;p&gt;The Django tutorial is very large so we only managed to complete parts 1 and 2 of the tutorial.&lt;/p&gt;
</summary><category term="django"></category><category term="web development"></category></entry><entry><title>Python web frameworks shootout</title><link href="https://pyvideo.org/python-frederick/python-web-frameworks-shootout.html" rel="alternate"></link><published>2017-10-11T00:00:00+00:00</published><updated>2017-10-11T00:00:00+00:00</updated><author><name>Matt Layman</name></author><id>tag:pyvideo.org,2017-10-11:python-frederick/python-web-frameworks-shootout.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;At the October 2017 Python Frederick meetup, we looked at API Star, Falcon, Flask, Django, and Pyramid and did a comparison of their features to see which would be the best fit for your future web project.&lt;/p&gt;
</summary><category term="api star"></category><category term="falcon"></category><category term="flask"></category><category term="django"></category><category term="pyramid"></category></entry><entry><title>Using Python, Django, and ruthlessness to protect people from social media harassment.</title><link href="https://pyvideo.org/kiwi-pycon-2019/using-python-django-and-ruthlessness-to-protect-people-from-social-media-harassment.html" rel="alternate"></link><published>2019-08-24T00:00:00+00:00</published><updated>2019-08-24T00:00:00+00:00</updated><author><name>Tom Eastman</name></author><id>tag:pyvideo.org,2019-08-24:kiwi-pycon-2019/using-python-django-and-ruthlessness-to-protect-people-from-social-media-harassment.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk, I present 'secateur', a tool for Twitter users to protect themselves from some forms of online harassment. I discuss using Python and Django to create tools that integrate with Twitter, use its APIs, and block lots of people (LOTS of people).&lt;/p&gt;
</summary><category term="twitter"></category><category term="APIs"></category><category term="secateur"></category><category term="django"></category></entry><entry><title>GraphQL in Python üçì</title><link href="https://pyvideo.org/europython-2019/graphql-in-python.html" rel="alternate"></link><published>2019-07-11T00:00:00+00:00</published><updated>2019-07-11T00:00:00+00:00</updated><author><name>Patrick Arminio</name></author><id>tag:pyvideo.org,2019-07-11:europython-2019/graphql-in-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Over the past few years GraphQL has gained much traction, but what‚Äôs the
state of GraphQL in Python. This talk describes what GraphQL is, why it
has been created and the current state of GraphQL libraries in Python.&lt;/p&gt;
&lt;p&gt;There will be a short history of GraphQL, some examples of what makes it
shine and why it can be preferred to REST.&lt;/p&gt;
&lt;p&gt;We will also analyse the current state of GraphQL in Python, having a
brief overview of the current libraries and then having an in-depth look
at Strawberry a new library based on dataclasses that makes it easy to
create GraphQl APIs in Python.&lt;/p&gt;
</summary><category term="Django"></category><category term="RESTful"></category><category term="Web"></category><category term="Web General"></category><category term="Web Servers and MicroFWs"></category></entry><entry><title>Writing a Python autoreloader</title><link href="https://pyvideo.org/europython-2019/writing-a-python-autoreloader.html" rel="alternate"></link><published>2019-07-10T00:00:00+00:00</published><updated>2019-07-10T00:00:00+00:00</updated><author><name>Tom Forbes</name></author><id>tag:pyvideo.org,2019-07-10:europython-2019/writing-a-python-autoreloader.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Reloading your code changes quickly is an integral part of the
development experience in frameworks like Django and Flask that
developers have come to rely on. But how do they work under the hood and
what challenges do you face while writing one?&lt;/p&gt;
&lt;p&gt;In this talk I will explore how I refactored the autoreload
implementation in Django 2.2 and the lessons I learned along the way
(hint: it's surprisingly complex!). I will also be introducing a library
I've developed to simplify this if you ever find yourself writing your
own.&lt;/p&gt;
</summary><category term="Architecture"></category><category term="Development"></category><category term="Django"></category><category term="Python 3"></category><category term="Software Design"></category></entry><entry><title>Decoupling Django with Django REST (and a sprinkle of React)</title><link href="https://pyvideo.org/pycon-italia-2019/decoupling-django-with-django-rest-and-a-sprinkle-of-react.html" rel="alternate"></link><published>2019-05-05T00:00:00+00:00</published><updated>2019-05-05T00:00:00+00:00</updated><author><name>Valentino Gagliardi</name></author><id>tag:pyvideo.org,2019-05-05:pycon-italia-2019/decoupling-django-with-django-rest-and-a-sprinkle-of-react.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;div class="section" id="abstract"&gt;
&lt;h4&gt;Abstract&lt;/h4&gt;
&lt;p&gt;With the rise of JavaScript as the lingua-franca of the web and the
steady growth of libraries like React, today‚Äôs web developers can build
rich and well structured frontend experiences. Pair that with Django and
Django REST framework and you get the perfect combination. But it‚Äôs not
all bells and whistles. What challenges are we going to face when
decoupling Django with Django REST? What are the best practices? How to
structure such a project? In this talk I‚Äôll guide Django developers
(both beginners and intermediate) from 0 to structuring a decoupled
Django project.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="description"&gt;
&lt;h4&gt;Description&lt;/h4&gt;
&lt;p&gt;The goal of this talk is to give Django developers an overview of a
Django REST project, paired with React, as well as the tradeoffs of the
decoupled approach. By the end of the talk the developer should be able
to configure a new Django REST project and use a frontend library for
interacting with the API.&lt;/p&gt;
&lt;div class="section" id="why-and-when-to-decouple-django"&gt;
&lt;h5&gt;1. Why and when to decouple Django&lt;/h5&gt;
&lt;p&gt;There are many ways for decoupling a Django application and each one
depends on the use case. In this section we‚Äôll outline what decoupling
is, why decoupling is a great approach and why sometimes it is not the
right thing to do. We‚Äôll see what the challenges of such approach are
and how to deal with authentication in a decoupled context.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="django-rest-fundamentals"&gt;
&lt;h5&gt;2. Django REST fundamentals&lt;/h5&gt;
&lt;p&gt;Django REST framework is a Django application for exposing API endpoints
from a Django project. It this section we‚Äôll see the building blocks of
a Django API app: the model, the serializer and the view. Models should
not be a surprise for the audience, they come from Django. Serializers
instead are provided by Django REST. We‚Äôll also see how a Django REST
view looks like and how to leverage both function based views and
generic views within the project.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="setting-up-the-frontend"&gt;
&lt;h5&gt;3. Setting up the frontend&lt;/h5&gt;
&lt;p&gt;The key for a truly decoupled experience is a frontend for consuming and
interacting with the API. In this section we‚Äôll see how to structure a
Django REST project alongside with React. We will explore two
approaches: fully decoupled frontend and mixed frontend.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="a-note-on-testing-and-closing-words"&gt;
&lt;h5&gt;4. A note on testing and closing words&lt;/h5&gt;
&lt;p&gt;In the context of a decoupled Django site we move from the typical
Django tests to testing the API‚Äôs response instead. We will see how a
simple API test looks like. And for the JavaScript frontend we‚Äôll take a
look at the current available tooling for functional testing.&lt;/p&gt;
&lt;p&gt;Questions?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Feedback form:&lt;/strong&gt; &lt;a class="reference external" href="https://python.it/feedback-1735"&gt;https://python.it/feedback-1735&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;Sunday 5 May&lt;/strong&gt; at 10:15 &lt;a class="reference external" href="/en/sprints/schedule/pycon10/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</summary><category term="javascript"></category><category term="django-rest-framework"></category><category term="REST"></category><category term="django"></category></entry><entry><title>Real world Graphene - lessons learned from building a GraphQL API on top of a large Django project</title><link href="https://pyvideo.org/pycon-italia-2019/real-world-graphene-lessons-learned-from-building-a-graphql-api-on-top-of-a-large-django-project.html" rel="alternate"></link><published>2019-05-05T00:00:00+00:00</published><updated>2019-05-05T00:00:00+00:00</updated><author><name>Marcin Gƒôbala</name></author><id>tag:pyvideo.org,2019-05-05:pycon-italia-2019/real-world-graphene-lessons-learned-from-building-a-graphql-api-on-top-of-a-large-django-project.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Graphene is currently the most popular framework for building a GraphQL
in Python and it‚Äôs also an obvious choice for adding a GraphQL layer to
Django applications. Over the course of a year, we successfully built an
API with about 50 queries and over 100 mutations on top of existing
Django project (Saleor), but we also learned some hard lessons and had
to overcome several shortcomings of the framework along the way.&lt;/p&gt;
&lt;p&gt;In this talk, I‚Äôd like to share some practical tips to overcome the most
common problems that a Django developer might face when building an
optimized and maintainable API with Graphene, such as: - using useful
abstractions to build queries and mutations faster - optimizing database
queries in a graph - structuring a large Graphene project - unified
error handling&lt;/p&gt;
&lt;p&gt;I‚Äôd also like to bring up a few limitations of the framework that we
discovered as we were working on the project and then end the talk with
the most important benefits that adoption of GraphQL brings to modern
web applications development - both for the backend and frontend.&lt;/p&gt;
&lt;p&gt;Prerequisites: - Intermediate knowledge of Django - Familiarity with API
design and concepts in terms of web development - Basic knowledge of
GraphQL or interest in it&lt;/p&gt;
&lt;p&gt;I think the talk would be of great value to anyone working with a
Graphene framework and those who want to know more about building
GraphQL in Python.&lt;/p&gt;
&lt;p&gt;All code examples in the presentation would be based on Saleor
(&lt;a class="reference external" href="https://github.com/mirumee/saleor"&gt;https://github.com/mirumee/saleor&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Feedback form:&lt;/strong&gt; &lt;a class="reference external" href="https://python.it/feedback-1644"&gt;https://python.it/feedback-1644&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;Sunday 5 May&lt;/strong&gt; at 11:45 &lt;a class="reference external" href="/en/sprints/schedule/pycon10/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</summary><category term="API Design"></category><category term="e-commerce"></category><category term="graphql"></category><category term="open-source"></category><category term="django"></category></entry><entry><title>Machine Learning for Inventory Management</title><link href="https://pyvideo.org/pycon-italia-2019/machine-learning-for-inventory-management.html" rel="alternate"></link><published>2019-05-04T00:00:00+00:00</published><updated>2019-05-04T00:00:00+00:00</updated><author><name>Laura De Stefanis</name></author><id>tag:pyvideo.org,2019-05-04:pycon-italia-2019/machine-learning-for-inventory-management.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Material forecast is the process of deciding which items to stock in the
inventory, how much, and when. Aim of the forecast is to increase parts
availability with the less possible impact on inventory, having enough
stock in the warehouse to ensure the business keeps moving but not
enough stock to drain its limited cash reserves. This decision process
is being profoundly revised in its foundational concepts, thanks to new
classification methodologies enabled by Machine Learning. We integrated
domain knowledge and ML to create a new classification and level setting
process, leveraging on 6 years of data and new statistical indicators
for demand patter. These new features are used to run the machine
learning algorithm that classify Make To Stock / Make To Order items in
a single flow approach. The validation phase is reduced at each
iteration as ML model can be re-trained to incorporate past validations,
increasing efficiency and performances. Level setting problem is
addressed benchmarking ML methods (Reinforcement Learning), Montecarlo
simulations and traditional statistical methodologies. Regarding RL and
Montecarlo we established punishments for letting an particular
inventory item run out of stock and we also punish the model for stock
too higher value for too long. For rewards, we primarily focus on
ordering items within a safe window before the demand. First application
of this new methodology brings a 20% reduction of inventory, without
impact on sales, and a workload reduction of about 70%.&lt;/p&gt;
&lt;p&gt;Feedback form: &lt;a class="reference external" href="https://python.it/feedback-1554"&gt;https://python.it/feedback-1554&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;Saturday 4 May&lt;/strong&gt; at 12:15 &lt;a class="reference external" href="/en/sprints/schedule/pycon10/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</summary><category term="logistics"></category><category term="clustering"></category><category term="statistics"></category><category term="Python"></category><category term="Big-Data"></category><category term="gestionali"></category><category term="django"></category><category term="supplychain"></category><category term="sql"></category><category term="Artificial Intelligence"></category></entry><entry><title>Quando la tua applicazione Django non va abbastanza veloce</title><link href="https://pyvideo.org/pycon-italia-2019/quando-la-tua-applicazione-django-non-va-abbastanza-veloce.html" rel="alternate"></link><published>2019-05-04T00:00:00+00:00</published><updated>2019-05-04T00:00:00+00:00</updated><author><name>Riccardo Magliocchetti</name></author><id>tag:pyvideo.org,2019-05-04:pycon-italia-2019/quando-la-tua-applicazione-django-non-va-abbastanza-veloce.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Django mette molta enfasi nel creare applicazioni velocemente. Questo √®
grandioso! Sviluppare applicazioni velocemente per√≤ non sempre significa
sviluppare applicazioni veloci.&lt;/p&gt;
&lt;p&gt;In questo talk mostrer√≤ alcuni problemi di performance che ho incontrato
(o introdotto) nella mia esperienza di sviluppatore. Vedremo esempi in
diversi punti dell‚Äôapplicazione: dai modelli, passando per le viste fino
ai serializzatori. Alcuni di questi si sono rivelati facili da trovare e
risolvere, altri subdoli o addirittura imbarazzanti. Tutti
fortunatamente risolti.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Feedback form:&lt;/strong&gt; &lt;a class="reference external" href="https://python.it/feedback-1611"&gt;https://python.it/feedback-1611&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;Saturday 4 May&lt;/strong&gt; at 10:45 &lt;a class="reference external" href="/en/sprints/schedule/pycon10/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</summary><category term="performance"></category><category term="django"></category><category term="django-rest-framework"></category><category term="databases"></category></entry><entry><title>Building a Celery alternative in Django on Kubernetes</title><link href="https://pyvideo.org/pycon-italia-2019/building-a-celery-alternative-in-django-on-kubernetes.html" rel="alternate"></link><published>2019-05-03T00:00:00+00:00</published><updated>2019-05-03T00:00:00+00:00</updated><author><name>Alec Clowes</name></author><id>tag:pyvideo.org,2019-05-03:pycon-italia-2019/building-a-celery-alternative-in-django-on-kubernetes.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Every used Celery and been frustrated by the complexity of RabbitMQ, the
Redis visibility timeout, or the deprecated Postgres support? Wish there
was better support for composing tasks into workflows and a web UI for
viewing status and logs? I‚Äôve been working with Celery for years; it is
a great tool but I wanted to build something that fit my use cases
better so I started a new task execution framework.&lt;/p&gt;
&lt;p&gt;This talk isn‚Äôt about that framework, however. It is about how to use
Django and React together, how to take advantage of more advanced
Postgres features like recursive queries and select-for-update row
locking, and how to deploy the resulting application onto Google Cloud
Platform‚Äôs hosted Kubernetes solution. I hope it is valuable as a how-to
guide covering many current best practices, from CLI and API design to
high-availability and continuous deployment. Everything is open-sourced
on GitHub at &lt;a class="reference external" href="https://github.com/aclowes/yawn"&gt;https://github.com/aclowes/yawn&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Feedback form: &lt;a class="reference external" href="https://python.it/feedback-1568"&gt;https://python.it/feedback-1568&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;Friday 3 May&lt;/strong&gt; at 17:15 &lt;a class="reference external" href="/en/sprints/schedule/pycon10/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</summary><category term="celery"></category><category term="reactjs"></category><category term="postgresql"></category><category term="kubernetes"></category><category term="django"></category></entry><entry><title>Mappe üó∫Ô∏è con GeoDjango üåé, PostGIS üêò e Leaflet üçÉ</title><link href="https://pyvideo.org/pycon-italia-2019/mappe-con-geodjango-postgis-e-leaflet.html" rel="alternate"></link><published>2019-05-03T00:00:00+00:00</published><updated>2019-05-03T00:00:00+00:00</updated><author><name>Paolo Melchiorre</name></author><id>tag:pyvideo.org,2019-05-03:pycon-italia-2019/mappe-con-geodjango-postgis-e-leaflet.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Una &lt;em&gt;mappa&lt;/em&gt; permette agli utenti di visualizzare e ricercare i dati in
maniera spaziale ed √® comune l‚Äôesigenza di aggiungerne una al proprio
progetto web.&lt;/p&gt;
&lt;blockquote&gt;
In questo talk vedremo come abbiamo integrato una &lt;em&gt;mappa&lt;/em&gt; in un
progetto web gi√† in produzione usando &lt;strong&gt;GeoDjango&lt;/strong&gt; , &lt;strong&gt;PostGIS&lt;/strong&gt; e
&lt;strong&gt;Leaflet&lt;/strong&gt; ed eseguiremo una dimostrazione di integrazione da zero
di una mappa in un progetto &lt;strong&gt;Django&lt;/strong&gt;.&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;GeoDjango&lt;/strong&gt; √® un modulo incluso in &lt;strong&gt;Django&lt;/strong&gt; che lo trasforma in un
&lt;em&gt;framework&lt;/em&gt; Web geografico di classe mondiale.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;PostGIS&lt;/strong&gt; √® un estensione del &lt;em&gt;database&lt;/em&gt; &lt;strong&gt;PostgreSQL&lt;/strong&gt; che aggiunge
il supporto per gli oggetti geografici consentendo di eseguire query
spaziali.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Leaflet&lt;/strong&gt; √® la principale libreria &lt;strong&gt;JavaScript&lt;/strong&gt; &lt;em&gt;open source&lt;/em&gt; per
mappe web interattive ottimizzate per dispositivi mobili.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;Durante il primo meetup &lt;strong&gt;#PyRoma&lt;/strong&gt; del 2019 abbiamo presentato una
versione ridotta di questo talk limitandoci al solo &lt;strong&gt;caso d‚Äôuso&lt;/strong&gt;. Info
qui:
&lt;a class="reference external" href="https://www.paulox.net/2019/01/21/pyroma-2019/"&gt;www.paulox.net/2019/01/21/pyroma-2019/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Feedback form:&lt;/strong&gt; &lt;a class="reference external" href="https://python.it/feedback-1608"&gt;https://python.it/feedback-1608&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;Friday 3 May&lt;/strong&gt; at 18:00 &lt;a class="reference external" href="/en/sprints/schedule/pycon10/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</summary><category term="web"></category><category term="postgresql"></category><category term="javascript"></category><category term="postgis"></category><category term="django"></category><category term="leaflet"></category><category term="maps"></category><category term="geospatial"></category><category term="gis"></category><category term="geodjango"></category><category term="python3"></category></entry><entry><title>Python &amp; Serverless: Refactor your monolith piece by piece</title><link href="https://pyvideo.org/pycon-italia-2019/python-serverless-refactor-your-monolith-piece-by-piece.html" rel="alternate"></link><published>2019-05-03T00:00:00+00:00</published><updated>2019-05-03T00:00:00+00:00</updated><author><name>Giuseppe Vallarelli</name></author><id>tag:pyvideo.org,2019-05-03:pycon-italia-2019/python-serverless-refactor-your-monolith-piece-by-piece.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python &amp;amp; Serverless: Refactor your monolith piece by piece&lt;/p&gt;
&lt;p&gt;The introduction of the Function as a Service (Serverless) technologies
is facilitating the adoption of a microservices based architecture. In
this talk we will discuss why this might be useful (scalability / cost
opportunities / choosing the right tool for the job) and what strategies
we can follow to either extract independent services or add new
capabilities using an event driven architecture style to a django web
application. We will end up our discussion talking about testing and
monitoring of our freshly baked services.&lt;/p&gt;
&lt;p&gt;In this talk we will see:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Serverless/FaaS concepts brief intro&lt;/li&gt;
&lt;li&gt;Breaking up the monolith rationale&lt;/li&gt;
&lt;li&gt;Extracting some modules into independent services&lt;/li&gt;
&lt;li&gt;Adding more capabilities using events as a trigger for our FaaS&lt;/li&gt;
&lt;li&gt;Testing &amp;amp; Monitoring&lt;/li&gt;
&lt;li&gt;References&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The intended audience should be familiar with the concepts related to
web applications, web apis and a smattering of serverless concepts.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Feedback form:&lt;/strong&gt; &lt;a class="reference external" href="https://python.it/feedback-1591"&gt;https://python.it/feedback-1591&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;Friday 3 May&lt;/strong&gt; at 11:15 &lt;a class="reference external" href="/en/sprints/schedule/pycon10/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</summary><category term="serverless"></category><category term="microservices"></category><category term="pyweb"></category><category term="aws"></category><category term="devops"></category><category term="django"></category><category term="lambda-functions"></category><category term="event-driven-architecture"></category><category term="cloud"></category><category term="faas"></category></entry><entry><title>Pushing the ORM to its limits</title><link href="https://pyvideo.org/djangocon-europe-2019/pushing-the-orm-to-its-limits.html" rel="alternate"></link><published>2019-04-20T00:00:00+00:00</published><updated>2019-04-20T00:00:00+00:00</updated><author><name>Sigurd Lj√∏dal</name></author><id>tag:pyvideo.org,2019-04-20:djangocon-europe-2019/pushing-the-orm-to-its-limits.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;You can do a lot more with the Django ORM than you might think, and when something isn't possible using the existing primitives, you can easily add your own. In this talk you will learn about both advanced features of the ORM and how to run your own SQL queries.&lt;/strong&gt;
Django's ORM makes it super simple to run quick queries against your database, but it can do a lot more for you than you might think. Need to get some statistics on a monthly-basis? Easy, just annotate your queryset with year and month using &lt;tt class="docutils literal"&gt;ExtractYear&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;ExtractMonth&lt;/tt&gt;, and you can use &lt;tt class="docutils literal"&gt;.values()&lt;/tt&gt; to get the data aggregated by month.
When you find yourself in need of something that is not already covered by the existing ORM functions, you will often be able to create it yourself. Have you modelled your data with separate date and time fields, but need to compare this to a datetime field? You can make a custom expression in Django for combining the date and time into a datetime in the database.
Starting with Django 1.11, you can easily make subqueries using the Django ORM. In Django 2.0 we got support for window functions. Django 2.1 exposes additional functions that are available in many databases, and version 2.2 will introduce support for custom constraints and extends the primitives for custom indexes.
It is also easy to drop down to writing raw SQL if you need to. It is probably not something you need to do every day, but it's good to know that the option is there, and know how and when to do it.&lt;/p&gt;
</summary><category term="django"></category><category term="orm"></category></entry><entry><title>Django APIs, Versioning and You</title><link href="https://pyvideo.org/pycon-ireland-2018/django-apis-versioning-and-you.html" rel="alternate"></link><published>2018-11-10T00:00:00+00:00</published><updated>2018-11-10T00:00:00+00:00</updated><author><name>Rebecca Martin</name></author><id>tag:pyvideo.org,2018-11-10:pycon-ireland-2018/django-apis-versioning-and-you.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk will attempt to explain how to version an API within the Django framework. Say you need to change the data that your API returns to your users, but any major changes would result in breaking the API for users of any previous versions. This talk will explain how to avoid this problem, which as a developer who works on APIs with the Django framework every day is a constant problem that I would have to face. This talk will cover: 1.) Why do I even have to version my API in the first place? Surely I can just make changes? 2.) Okay, now I understand why to version my API in Django. What about the how? (this will mainly focus on the Django REST framework's library of versioning, but other methods will be considered) 3.) Live Demo of breaking changes (oh no!) and how we can apply our knowledge from the second part of the talk and avoid these.&lt;/p&gt;
</summary><category term="django"></category><category term="APIs"></category></entry><entry><title>Going beyond the Django ORM limitations with Postgres</title><link href="https://pyvideo.org/europython-2013/going-beyond-the-django-orm-limitations-with-postgres.html" rel="alternate"></link><published>2013-07-05T00:00:00+00:00</published><updated>2013-07-05T00:00:00+00:00</updated><author><name>Craig Kerstiens</name></author><id>tag:pyvideo.org,2013-07-05:europython-2013/going-beyond-the-django-orm-limitations-with-postgres.html</id><summary type="html"></summary><category term="django"></category><category term="database"></category></entry><entry><title>Testing Django applications with pytest</title><link href="https://pyvideo.org/europython-2013/testing-django-applications-with-pytest.html" rel="alternate"></link><published>2013-07-05T00:00:00+00:00</published><updated>2013-07-05T00:00:00+00:00</updated><author><name>Andreas Pelme</name></author><id>tag:pyvideo.org,2013-07-05:europython-2013/testing-django-applications-with-pytest.html</id><summary type="html"></summary><category term="testing"></category><category term="tdd"></category><category term="django"></category></entry><entry><title>Designing a Real Time Control System based on Django, ZMQ and WebSockets (wrong cover)</title><link href="https://pyvideo.org/europython-2013/designing-a-real-time-control-system-based-on-django-zmq-and-websockets-wrong-cover.html" rel="alternate"></link><published>2013-07-04T00:00:00+00:00</published><updated>2013-07-04T00:00:00+00:00</updated><author><name>Nahuel Defoss√©</name></author><id>tag:pyvideo.org,2013-07-04:europython-2013/designing-a-real-time-control-system-based-on-django-zmq-and-websockets-wrong-cover.html</id><summary type="html"></summary><category term="web"></category><category term="async"></category><category term="twisted"></category><category term="embedding"></category><category term="django"></category></entry><entry><title>Introduce Django to your old friends</title><link href="https://pyvideo.org/europython-2013/introduce-django-to-your-old-friends.html" rel="alternate"></link><published>2013-07-03T00:00:00+00:00</published><updated>2013-07-03T00:00:00+00:00</updated><author><name>Lynn Root</name></author><id>tag:pyvideo.org,2013-07-03:europython-2013/introduce-django-to-your-old-friends.html</id><summary type="html"></summary><category term="ldap"></category><category term="kerberos"></category><category term="integration"></category><category term="django"></category></entry><entry><title>Speed up your Django apps with Jython and SPDY</title><link href="https://pyvideo.org/europython-2013/speed-up-your-django-apps-with-jython-and-spdy.html" rel="alternate"></link><published>2013-07-03T00:00:00+00:00</published><updated>2013-07-03T00:00:00+00:00</updated><author><name>Emanuele Palazzetti</name></author><id>tag:pyvideo.org,2013-07-03:europython-2013/speed-up-your-django-apps-with-jython-and-spdy.html</id><summary type="html"></summary><category term="spdy"></category><category term="jython"></category><category term="jetty"></category><category term="django"></category></entry><entry><title>Deployability of Python Web Applications</title><link href="https://pyvideo.org/europython-2013/deployability-of-python-web-applications.html" rel="alternate"></link><published>2013-07-02T00:00:00+00:00</published><updated>2013-07-02T00:00:00+00:00</updated><author><name>Bruno Reni√©</name></author><id>tag:pyvideo.org,2013-07-02:europython-2013/deployability-of-python-web-applications.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;When it comes to deploying web applications, it seems the Python and
Django world doesn‚Äôt exactly follows the Zen mantra of ‚ÄúThere should be
one ‚Äì and preferably only one ‚Äì obvious way to do it‚Äù. This talk will
explain a deployment approach based on the &lt;a class="reference external" href="http://12factor.net/"&gt;Twelve-Factor
methodology&lt;/a&gt; that leverages standard Python and
system administration techniques.&lt;/p&gt;
&lt;p&gt;This approach allows easy deployments on various hosting environments
(PaaS or custom-build infrastructure), minimizes dev/prod divergence and
allows interoperability with non-python systems. It is particularly
suited for teams practicing continuous deployment.&lt;/p&gt;
&lt;p&gt;Most examples and techniques will be based on Django but they can easily
be adapted to other Python web frameworks. This talk targets DevOps
people and/or application developers.&lt;/p&gt;
</summary><category term="django"></category><category term="deployment"></category></entry><entry><title>How DISQUS does "it" when "it" isn't Django</title><link href="https://pyvideo.org/europython-2013/how-disqus-does-it-when-it-isnt-django.html" rel="alternate"></link><published>2013-07-02T00:00:00+00:00</published><updated>2013-07-02T00:00:00+00:00</updated><author><name>Adam Hitchcock</name></author><id>tag:pyvideo.org,2013-07-02:europython-2013/how-disqus-does-it-when-it-isnt-django.html</id><summary type="html"></summary><category term="web"></category><category term="realtime"></category><category term="mongodb"></category><category term="zookeeper"></category><category term="scalability"></category><category term="django"></category><category term="celery"></category><category term="optimization"></category><category term="gevent"></category><category term="concurrency"></category><category term="performance"></category></entry><entry><title>Obey the Testing Goat! Rigorous Test-Driven Web Development with Django and Selenium - Part 1</title><link href="https://pyvideo.org/europython-2013/obey-the-testing-goat-rigorous-test-driven-web-development-with-django-and-selenium-part-1.html" rel="alternate"></link><published>2013-07-02T00:00:00+00:00</published><updated>2013-07-02T00:00:00+00:00</updated><author><name>Harry Percival</name></author><id>tag:pyvideo.org,2013-07-02:europython-2013/obey-the-testing-goat-rigorous-test-driven-web-development-with-django-and-selenium-part-1.html</id><summary type="html"></summary><category term="testing"></category><category term="selenium"></category><category term="tdd"></category><category term="django"></category></entry><entry><title>Obey the Testing Goat! Rigorous Test-Driven Web Development with Django and Selenium - Part 2</title><link href="https://pyvideo.org/europython-2013/obey-the-testing-goat-rigorous-test-driven-web-development-with-django-and-selenium-part-2.html" rel="alternate"></link><published>2013-07-02T00:00:00+00:00</published><updated>2013-07-02T00:00:00+00:00</updated><author><name>Harry Percival</name></author><id>tag:pyvideo.org,2013-07-02:europython-2013/obey-the-testing-goat-rigorous-test-driven-web-development-with-django-and-selenium-part-2.html</id><summary type="html"></summary><category term="testing"></category><category term="selenium"></category><category term="tdd"></category><category term="django"></category></entry><entry><title>Obidire alla capra! TDD con Python i Selenium</title><link href="https://pyvideo.org/europython-2013/obidire-alla-capra-tdd-con-python-i-selenium.html" rel="alternate"></link><published>2013-07-02T00:00:00+00:00</published><updated>2013-07-02T00:00:00+00:00</updated><author><name>Harry Percival</name></author><id>tag:pyvideo.org,2013-07-02:europython-2013/obidire-alla-capra-tdd-con-python-i-selenium.html</id><summary type="html"></summary><category term="testing"></category><category term="selenium"></category><category term="tdd"></category><category term="django"></category></entry><entry><title>Python on the blockchain: Triumphs and tribulations in a crypto startup</title><link href="https://pyvideo.org/pycon-de-2018/python-on-the-blockchain-triumphs-and-tribulations-in-a-crypto-startup.html" rel="alternate"></link><published>2018-10-25T00:00:00+00:00</published><updated>2018-10-25T00:00:00+00:00</updated><author><name>Danny McDonald</name></author><id>tag:pyvideo.org,2018-10-25:pycon-de-2018/python-on-the-blockchain-triumphs-and-tribulations-in-a-crypto-startup.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;While many cryptographic components of blockchain protocols can be
extremely complex, blockchain systems themselves are relatively easy to
understand when viewed from a distance. To take the example of Bitcoin,
users store digital currency in hardware or software wallets, and use
private keys to sign and broadcast transactions. Broadcasted
transactions are grouped together into a block through a cryptographic
process known as mining, with miners rewarded through the collection of
transaction fees and the issuance of new coins. The mined block of
transactions is appended to the existing chain, and verified by a global
network of nodes. This process repeats in perpetuity, with each newly
added block adding to the trustedness and security of data stored on the
chain.&lt;/p&gt;
&lt;p&gt;Increased interest in and demand for cryptocurrencies has brought about
a need for places where digital assets can easily be bought, sold or
traded. Our platform, Bitpanda, accomplishes this with a backend written
in Python, and relying heavily on Django and MySQL databases. In our
presentation, we begin by providing a brief overview of how blockchains
work. Following this, we describe the Python architecture that (e.g.)
generates cryptocurrency wallets, builds, signs and sends transactions,
and monitors blockchains for new, relevant data. Key challenges,
solutions and failures encountered during the development of the system,
and growth of our team, are presented.&lt;/p&gt;
&lt;p&gt;Throughout our talk, we also highlight a number of broader social
implications of blockchains, and our work with them. More specifically,
we describe the need for open-innovation based approaches to blockchain
development, the value of open-source within the blockchain community,
and the current lack of critical discourse surrounding the potential
uses of blockchains as mechanisms of surveillance and control.&lt;/p&gt;
</summary><category term="Business &amp; Start-Ups"></category><category term="Community"></category><category term="Django"></category><category term="Infrastructure"></category><category term="Python"></category></entry><entry><title>What's new in Python 3.7?</title><link href="https://pyvideo.org/pycon-de-2018/whats-new-in-python-37.html" rel="alternate"></link><published>2018-10-25T00:00:00+00:00</published><updated>2018-10-25T00:00:00+00:00</updated><author><name>Stephane Wirtel</name></author><id>tag:pyvideo.org,2018-10-25:pycon-de-2018/whats-new-in-python-37.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Scheduled for release in mid-June after the conference, Python 3.7 is
shaping up to be a feature-packed release! This talk will cover all the
new features of Python 3.7, including the Data Classes and the Context
Variables for the asynchronous programming with asyncio.&lt;/p&gt;
</summary><category term="Community"></category><category term="Django"></category><category term="DevOps"></category></entry><entry><title>Developing ecommerce platform with Django Oscar</title><link href="https://pyvideo.org/pycon-de-2018/developing-ecommerce-platform-with-django-oscar.html" rel="alternate"></link><published>2018-10-24T00:00:00+00:00</published><updated>2018-10-24T00:00:00+00:00</updated><author><name>Alexander Gaevsky</name></author><id>tag:pyvideo.org,2018-10-24:pycon-de-2018/developing-ecommerce-platform-with-django-oscar.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Modern technologies has changed the way how we buy and sell in the
Internet nowadays. Thus, we also constantly evolve the way how we build
projects to sell and buy goods using our technologies of choice - Python
and Django. Ease of customization and flexibility made Oscar application
of my choice for building custom ecommerce platforms on top of Django,
allowing to satisfy client requirements without necessity of
implementing solution from scratch, since Oscar have ready-made
applications for basket, checkout, shipping etc, available for the
further tweak and refinement.&lt;/p&gt;
&lt;p&gt;I‚Äôve been using and contributing to Django Oscar since 2015, designed
and supported various ecommerce projects in different fields (food,
accessories, shoes) and sizes during this time. In this talk I‚Äôm going
to share some of the experience and conclusions about building complex
ecommerce platform using Django, and eventually, Django Oscar.&lt;/p&gt;
&lt;p&gt;I will go through the next topics:&lt;/p&gt;
</summary><category term="Business &amp; Start-Ups"></category><category term="Code-Review"></category><category term="Django"></category></entry><entry><title>Choose Your Own Adventure for Client Web Services with GraphQL</title><link href="https://pyvideo.org/pycon-italia-2018/choose-your-own-adventure-for-client-web-services-with-graphql.html" rel="alternate"></link><published>2018-04-22T00:00:00+00:00</published><updated>2018-04-22T00:00:00+00:00</updated><author><name>David Anderson</name></author><id>tag:pyvideo.org,2018-04-22:pycon-italia-2018/choose-your-own-adventure-for-client-web-services-with-graphql.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;div class="section" id="summary"&gt;
&lt;h4&gt;Summary&lt;/h4&gt;
&lt;p&gt;In this talk, we discuss Facebook‚Äôs graphql standard, an a la carte way
for front end clients to consume data from the backend, the python
implementation of that standard (graphine), basic queries and mutations,
and some advanced techniques. We‚Äôll work up from shared principals with
traditional REST web services to the new paradigm of data specific to
each client request and how this makes backend and frontend developers
happier and more productive.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="audience-experience"&gt;
&lt;h4&gt;Audience Experience&lt;/h4&gt;
&lt;p&gt;Intermediate (requires some knowledge of Python, Django, REST web
services, etc. But will try to build a shared understanding of the core
concepts).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="duration"&gt;
&lt;h4&gt;Duration&lt;/h4&gt;
&lt;p&gt;45 minutes&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;About me, Prologue to the Adventure (5m)&lt;/li&gt;
&lt;li&gt;Chapter 1 - Architecture and Design (15m)&lt;/li&gt;
&lt;li&gt;Chapter 2 - Advanced Considerations (Authentication, Scaling,
Performance, Rate Limiting, etc.) (10m)&lt;/li&gt;
&lt;li&gt;Chapter 3 - Authentication and Building a Rich Client Web Application
(10m)&lt;/li&gt;
&lt;li&gt;Epilogue + Questions (5m)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;in __on &lt;strong&gt;domenica 22 aprile&lt;/strong&gt; at 11:15 &lt;a class="reference external" href="/p3/schedule/pycon9/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</summary><category term="Relay"></category><category term="reactjs"></category><category term="django"></category><category term="graphql"></category><category term="Graphine"></category><category term="Apollo"></category></entry><entry><title>Dalla User Story al test automatico in Django: un percorso step by step per dormire sonni tranquilli</title><link href="https://pyvideo.org/pycon-italia-2018/dalla-user-story-al-test-automatico-in-django-un-percorso-step-by-step-per-dormire-sonni-tranquilli.html" rel="alternate"></link><published>2018-04-22T00:00:00+00:00</published><updated>2018-04-22T00:00:00+00:00</updated><author><name>Filippo Morelli</name></author><id>tag:pyvideo.org,2018-04-22:pycon-italia-2018/dalla-user-story-al-test-automatico-in-django-un-percorso-step-by-step-per-dormire-sonni-tranquilli.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Le specifiche poco chiare o approssimative sono una delle piaghe degli
sviluppatori, e portano all‚Äôodioso fenomeno dei task non accettati o
rimandati indietro etichettati come BUG.&lt;/p&gt;
&lt;p&gt;Spesso, tuttavia, non c‚Äô√® proprio nulla di rotto ma solo una serie di
incomprensioni dovute alla scarsa qualit√† dell‚Äôanalisi, che provocano,
generalmente, molta frustrazione in chi ha scritto il codice.&lt;/p&gt;
&lt;p&gt;Nel corso del talk vedremo come tutto questo sia evitabile grazie
all‚Äôapproccio &lt;strong&gt;BDD&lt;/strong&gt; , all‚Äôutilizzo di &lt;strong&gt;User Stories&lt;/strong&gt; con
&lt;strong&gt;Acceptance Tests&lt;/strong&gt; scritti usando il linguaggio &lt;em&gt;Gherkin&lt;/em&gt; e
all‚Äôesecuzione di test automatici.&lt;/p&gt;
&lt;p&gt;In pi√π, mostreremo una applicazione pratica su un progetto &lt;em&gt;Django&lt;/em&gt;
usando &lt;em&gt;Behave&lt;/em&gt; con &lt;em&gt;behave_django&lt;/em&gt; e &lt;em&gt;Selenium&lt;/em&gt; con &lt;em&gt;splinter&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;domenica 22 aprile&lt;/strong&gt; at 12:00 &lt;a class="reference external" href="/p3/schedule/pycon9/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</summary><category term="bdd"></category><category term="continuous-integration"></category><category term="agile"></category><category term="selenium"></category><category term="django"></category><category term="behave"></category></entry><entry><title>Django-freeradius</title><link href="https://pyvideo.org/pycon-italia-2018/django-freeradius.html" rel="alternate"></link><published>2018-04-22T00:00:00+00:00</published><updated>2018-04-22T00:00:00+00:00</updated><author><name>Fiorella De Luca</name></author><id>tag:pyvideo.org,2018-04-22:pycon-italia-2018/django-freeradius.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;a class="reference external" href="https://freeradius.org/"&gt;Freeradius&lt;/a&gt; √® il server Radius open source
pi√π popolare e diffuso al mondo e supporta tutti i protocolli di
autenticazione pi√π comuni. Per renderne pi√π agevole l‚Äôutilizzo,
all‚Äôinterno della comunit√† OpenWISP √® stato deciso di sviluppare
django-freeradius. Si tratta di un‚Äôinterfaccia web per gestire i
database Freeradius basata su Django che si avvale delle RESTful API per
gestire l‚Äôautorizzazione, la post autenticazione e l‚Äôaccounting di
freeradius. Django-freeradius √® un‚Äô app riutilizzabile ed estensibile.
In questo talk vi parler√≤ di come ho implementato questo primo nucleo di
django-freeradius durante il Google Summer of Code 2017.&lt;/p&gt;
&lt;p&gt;Lo scopo di questo talk √® di presentare le potenzialit√† di
django-freeradius, inoltre verr√† mostrato un caso d‚Äôuso e le
informazioni necessarie per poterlo installare e utilizzare nella vostra
infrastruttura.&lt;/p&gt;
&lt;p&gt;Il talk √® rivolto a sviluppatori web con esperienza in django e/o a
programmatori con conoscenze di freeradius.&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;domenica 22 aprile&lt;/strong&gt; at 12:45 &lt;a class="reference external" href="/p3/schedule/pycon9/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</summary><category term="Python"></category><category term="web"></category><category term="radius"></category><category term="django-rest-framework"></category><category term="django"></category></entry><entry><title>Django Girls Italia: entrare in contatto con le donne tecnologiche, davvero</title><link href="https://pyvideo.org/pycon-italia-2018/django-girls-italia-entrare-in-contatto-con-le-donne-tecnologiche-davvero.html" rel="alternate"></link><published>2018-04-21T00:00:00+00:00</published><updated>2018-04-21T00:00:00+00:00</updated><author><name>Laura Bartoli</name></author><id>tag:pyvideo.org,2018-04-21:pycon-italia-2018/django-girls-italia-entrare-in-contatto-con-le-donne-tecnologiche-davvero.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Parlare di inclusivit√† e tematiche di genere √® ormai una moda.
Affrontare il tema donne che lavorano nell‚Äôindustria IT con toni
tragici, come si trattasse di esseri mitologici, lo √® ancora di pi√π.
Come passare oltre il ‚Äúvelo di Maya‚Äù e bypassare la disinformazione?&lt;/p&gt;
&lt;p&gt;Nel 2015 insieme alla community Python Italiana abbiamo gettato le basi
per portare in Italia Django Girls, workshop nato per contribuire a
colmare quel gender gap di cui si parla tanto. In tre anni di ‚Äúduro
lavoro‚Äù come organizzatrice di laboratori in Italia, sono entrata in
contatto con oltre 400 donne appassionate di tecnologia: studentesse di
ingegneria informatica, architetti, insegnanti, casalinghe, web
desinger. E anche con sviluppatori pronti a supportare la causa ( s√¨,
potete essere una ‚ÄúDjango Girl‚Äù anche se avete la barba) che hanno
contribuito a far crescere la community con il loro entusiasmo.&lt;/p&gt;
&lt;p&gt;45 minuti per conoscere la mission Django Girls, entrare in contatto con
la community italiana e per sfatare i falsi miti. Un talk entry level
per tutti, per chi √® interessato a portare il progetto nella propria
citt√†, per chi vorrebbe fare il coach e per chi semplicemente vorrebbe
sapere di pi√π sull‚Äôiniziativa.&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;sabato 21 aprile&lt;/strong&gt; at 12:00 &lt;a class="reference external" href="/p3/schedule/pycon9/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</summary><category term="women"></category><category term="inclusion"></category><category term="diversity"></category><category term="django"></category></entry><entry><title>Going Isomorphic with Django and React</title><link href="https://pyvideo.org/pycon-italia-2018/going-isomorphic-with-django-and-react.html" rel="alternate"></link><published>2018-04-21T00:00:00+00:00</published><updated>2018-04-21T00:00:00+00:00</updated><author><name>Mattia Larentis</name></author><id>tag:pyvideo.org,2018-04-21:pycon-italia-2018/going-isomorphic-with-django-and-react.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In web development, an isomorphic application is one whose code (in this
case, JavaScript) can run both in the server (in this case, Django) and
the client. In this talk we will understand how it works and why it can
be useful in the daily life. This talk is for developers (both
backenders and frontenders) who believe in ‚ÄúDRY‚Äù and will love to learn
something new.&lt;/p&gt;
&lt;p&gt;repo: &lt;a class="reference external" href="https://github.com/nostalgiaz/django-react-ssr"&gt;https://github.com/nostalgiaz/django-react-ssr&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;sabato 21 aprile&lt;/strong&gt; at 18:30 &lt;a class="reference external" href="/p3/schedule/pycon9/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</summary><category term="typescript"></category><category term="Python"></category><category term="reactjs"></category><category term="isomorphic"></category><category term="django"></category><category term="rendering"></category><category term="javascript"></category><category term="browser"></category></entry><entry><title>GraphQL in Python</title><link href="https://pyvideo.org/pycon-italia-2018/graphql-in-python.html" rel="alternate"></link><published>2018-04-21T00:00:00+00:00</published><updated>2018-04-21T00:00:00+00:00</updated><author><name>Patrick Guido Arminio</name></author><id>tag:pyvideo.org,2018-04-21:pycon-italia-2018/graphql-in-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In questo talk si parler√† di GraphQL, un ‚Äúdata query language‚Äù creato da
Facebook come alternativa al famoso REST. Verrano elencate la varie
differenze e i vantaggi/svantaggi rispetto ad una tradizionale API REST.&lt;/p&gt;
&lt;p&gt;Verr√† inoltre mostrato come utilizzare GraphQL con Python con un piccolo
approfondimento su come utilizzarlo con Django. In caso ci sia
abbastanza tempo, verrano elencate anche alcune informazioni avanzate,
come Authentication, Caching, Security e Realtime.&lt;/p&gt;
&lt;p&gt;Takeaway: l‚Äôobiettivo del talk √® di dare una prima occhiata a GraphQL,
dando alcuni input su perch√© usarlo e sopratutto come iniziare ad usarlo
in Python con e senza Django.&lt;/p&gt;
&lt;p&gt;Audience: il talk √® rivolto a sviluppatori web con un po‚Äô di esperienza
di API web.&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;sabato 21 aprile&lt;/strong&gt; at 14:45 &lt;a class="reference external" href="/p3/schedule/pycon9/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</summary><category term="flask"></category><category term="web"></category><category term="graphql"></category><category term="REST"></category><category term="django"></category></entry><entry><title>Heroku: come deployare un'app Django in 10 minuti!</title><link href="https://pyvideo.org/pycon-italia-2018/heroku-come-deployare-unapp-django-in-10-minuti.html" rel="alternate"></link><published>2018-04-21T00:00:00+00:00</published><updated>2018-04-21T00:00:00+00:00</updated><author><name>Sabatino Severino</name></author><id>tag:pyvideo.org,2018-04-21:pycon-italia-2018/heroku-come-deployare-unapp-django-in-10-minuti.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Se sei stanco di occuparti di &lt;em&gt;load balancing&lt;/em&gt; , &lt;em&gt;routing&lt;/em&gt; e &lt;em&gt;cloud
monitoring&lt;/em&gt; e vorresti dedicarti solo a &lt;em&gt;lambda function&lt;/em&gt; , &lt;em&gt;list
comprehension&lt;/em&gt; o &lt;em&gt;class-based view&lt;/em&gt; allora questo √® il talk che fa per
te.&lt;/p&gt;
&lt;p&gt;Heroku √® la piattaforma PaaS ( &lt;em&gt;Platform as a Service&lt;/em&gt; ) che consente
agli sviluppatori di creare, eseguire e gestire applicazioni interamente
nel cloud. Ad essere fornito come servizio non c‚Äô√® solo l‚Äôhardware, ma
anche la piattaforma che astrae l‚Äôhardware stesso e permette di
usufruire di funzionalit√† che consentono di ottenere bilanciamenti
automatici, gestione del deployment e altro ancora.&lt;/p&gt;
&lt;p&gt;Il vantaggio per l‚Äôutente √® quello di concentrarsi solo ed
esclusivamente sullo sviluppo dell‚Äôapplicazione senza perdersi
nell‚Äôanalisi di problematiche legate all‚Äôambiente in cui essa deve
essere distribuita ottenendo cos√¨ la scalabilit√† e l‚Äôaffidabilit√†
necessaria.&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;sabato 21 aprile&lt;/strong&gt; at 15:30 &lt;a class="reference external" href="/p3/schedule/pycon9/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</summary><category term="paas"></category><category term="continuous-integration"></category><category term="github"></category><category term="continuous-delivery"></category><category term="Python"></category><category term="pipeline"></category><category term="django"></category><category term="heroku"></category><category term="git"></category><category term="deployment"></category><category term="web development"></category></entry><entry><title>Monitoraggio di applicazioni Django con Prometheus (e Grafana)</title><link href="https://pyvideo.org/pycon-italia-2018/monitoraggio-di-applicazioni-django-con-prometheus-e-grafana.html" rel="alternate"></link><published>2018-04-21T00:00:00+00:00</published><updated>2018-04-21T00:00:00+00:00</updated><author><name>Davide Setti</name></author><id>tag:pyvideo.org,2018-04-21:pycon-italia-2018/monitoraggio-di-applicazioni-django-con-prometheus-e-grafana.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Prometheus.io √® un sistema di whitebox monitoring creato a Soundcloud da
ex- googlers. Non serve essere google per usarlo e in questa talk vorrei
mostrare come sia semplice (e utile!) integrarlo in un‚Äôapplicazione
Django. Non monitori i tuoi website? Purtroppo sono non violento ma
cercher√≤ in qualche modo di convincerti a farlo.&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;sabato 21 aprile&lt;/strong&gt; at 17:45 &lt;a class="reference external" href="/p3/schedule/pycon9/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</summary><category term="monitoring"></category><category term="devops"></category><category term="django"></category><category term="prometheus"></category><category term="performance"></category><category term="grafana"></category></entry><entry><title>Panino Digitale: una applicazione pratica di educazione creativa</title><link href="https://pyvideo.org/pycon-italia-2018/panino-digitale-una-applicazione-pratica-di-educazione-creativa.html" rel="alternate"></link><published>2018-04-21T00:00:00+00:00</published><updated>2018-04-21T00:00:00+00:00</updated><author><name>Mauro Angioni</name></author><id>tag:pyvideo.org,2018-04-21:pycon-italia-2018/panino-digitale-una-applicazione-pratica-di-educazione-creativa.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;L‚Äôistruzione tecnica √® stata introdotta ai tempi della rivoluzione
industriale anche in funzione della necessit√† di avere operai
specializzati, una volta formato l‚Äôoperaio svolgeva pressoch√© la stessa
mansione per tutta la vita. Dalla Rivoluzione Industriale a oggi, il
lavoro si √® evoluto in modo considerevole. Tuttavia, queste grandi
trasformazioni del passato sono state graduali, mentre oggi i
cambiamenti sono repentini, trasversali e dirompenti. La formazione
scolastica √® rimasta ancorata a schemi tradizionali. Il fine ultimo
della scuola dovrebbe essere quello di fare uscire ragazzi
intraprendenti e capaci di trarre soddisfazione dallo stesso
apprendimento, e le esperienze di alternanza scuola-lavoro nelle aziende
assumono un ruolo importante per la loro formazione, per le soft skill,
per mantenere alto l‚Äôinteresse, per rendere lo studente protagonista e
consapevole.&lt;/p&gt;
&lt;p&gt;Questa √® la storia di un gruppo di studenti di un istituto tecnico
superiore, appassionati di Python e provenienti da esperienze di
alternanza e di partecipazione alle conferenze di comunit√†, che hanno
immaginato di sviluppare autonomamente Panino Digitale, un‚Äôapplicazione
basata sul framework Django, con cui gli studenti possano prenotare il
panino al bar della scuola. Per realizzarla concretamente, hanno
coinvolto i loro docenti, condiviso l‚Äôidea con la loro comunit√†
scolastica, raccolto nuovi contributori tra i loro compagni, e chiesto
supporto, affiancamento e strumenti alla community Python e ai suoi
membri.&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;sabato 21 aprile&lt;/strong&gt; at 12:45 &lt;a class="reference external" href="/p3/schedule/pycon9/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</summary><category term="Python"></category><category term="istruzione"></category><category term="community"></category><category term="django"></category></entry><entry><title>Quando Django incontra PostgreSQL!</title><link href="https://pyvideo.org/pycon-italia-2018/quando-django-incontra-postgresql.html" rel="alternate"></link><published>2018-04-21T00:00:00+00:00</published><updated>2018-04-21T00:00:00+00:00</updated><author><name>Leonardo Cecchi</name></author><id>tag:pyvideo.org,2018-04-21:pycon-italia-2018/quando-django-incontra-postgresql.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Vi siete mai chiesti cosa succede quando due strumenti potenti si
completano?&lt;/p&gt;
&lt;p&gt;Vedremo come ottenere un ambiente di sviluppo molto veloce e come
analizzare i tempi delle query in produzione per isolare i colli di
bottiglia. Analizzeremo cosa ci offre Django per gestire i pool di
connessioni e l‚Äôuso di pgbouncer.&lt;/p&gt;
&lt;p&gt;Esploreremo le strade che si aprono utilizzando i campi JSON ed i campi
ARRAY, che sono i pi√π comunemente usati, ma anche di come utilizzare
PostgreSQL come un gestore di code.&lt;/p&gt;
&lt;p&gt;Requisiti: conoscenze basilari di Python, di Django ed uso di PostgreSQL&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;sabato 21 aprile&lt;/strong&gt; at 17:00 &lt;a class="reference external" href="/p3/schedule/pycon9/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</summary><category term="MessageQueues"></category><category term="django-orm"></category><category term="database"></category><category term="postgresql"></category><category term="django"></category></entry><entry><title>Building real time applications with Django</title><link href="https://pyvideo.org/pycon-italia-2018/building-real-time-applications-with-django.html" rel="alternate"></link><published>2018-04-20T00:00:00+00:00</published><updated>2018-04-20T00:00:00+00:00</updated><author><name>Iacopo Spalletti</name></author><id>tag:pyvideo.org,2018-04-20:pycon-italia-2018/building-real-time-applications-with-django.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Since the introduction of Channels, real time web has become much easier
to work with in Django. It‚Äôs now possible to build real time
applications with much less effort in managing the idiosyncrasies of the
async programming and a lot of batteries are included. Starting with a
brief introduction to Channels, we will see how to build a real time
application, both on the Django and the frontend side and how easy it‚Äôs
to start experimenting with it. The talk has a very hands-on approach,
to allow the attendees to experiment with the proposed solution and
approach and starting immediately building their own real time
applications with Django.&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;venerd√¨ 20 aprile&lt;/strong&gt; at 14:30 &lt;a class="reference external" href="/p3/schedule/pycon9/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</summary><category term="web"></category><category term="javascript"></category><category term="websockets"></category><category term="django"></category></entry><entry><title>DjangoProject.com - Ricerca Full-Text con PostgreSQL</title><link href="https://pyvideo.org/pycon-italia-2018/djangoprojectcom-ricerca-full-text-con-postgresql.html" rel="alternate"></link><published>2018-04-20T00:00:00+00:00</published><updated>2018-04-20T00:00:00+00:00</updated><author><name>Paolo Melchiorre</name></author><id>tag:pyvideo.org,2018-04-20:pycon-italia-2018/djangoprojectcom-ricerca-full-text-con-postgresql.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Il sito web ufficiale del progetto &lt;strong&gt;Django&lt;/strong&gt; (
&lt;a class="reference external" href="http://www.djangoproject.com"&gt;www.djangoproject.com&lt;/a&gt; ) √® basato
sull‚Äôultima versione stabile di Django, la &lt;strong&gt;documentazione&lt;/strong&gt; del
progetto √® generata con &lt;strong&gt;Sphinx&lt;/strong&gt; ed i documenti generati sono poi
memorizzati su &lt;strong&gt;PostgreSQL&lt;/strong&gt; per essere visualizzati sul sito.&lt;/p&gt;
&lt;p&gt;Il modulo per la &lt;strong&gt;ricerca&lt;/strong&gt; della documentazione nel sito del progetto
Django √® molto utilizzato e fino a poco tempo fa era &lt;strong&gt;basato&lt;/strong&gt; su
&lt;strong&gt;Elasticsearch&lt;/strong&gt;. L‚Äôutilizzo di Elasticsearch ha causato &lt;strong&gt;problemi&lt;/strong&gt;
nella sincronizzazione dei dati e nell‚Äôaggiornamento dei driver di
connessione.&lt;/p&gt;
&lt;blockquote&gt;
In questo talk vedremo &lt;strong&gt;come&lt;/strong&gt; ho &lt;strong&gt;aggiornato&lt;/strong&gt; la funzione di
&lt;a class="reference external" href="https://docs.djangoproject.com/en/dev/search/?q=full+text+search"&gt;ricerca&lt;/a&gt;
del &lt;strong&gt;sito del progetto Django&lt;/strong&gt; utilizzando il modulo di &lt;strong&gt;Ricerca
Full- Text&lt;/strong&gt; di Django basato direttamente su &lt;strong&gt;PostgreSQL&lt;/strong&gt;. Questo
ha &lt;strong&gt;semplificato&lt;/strong&gt; molto l‚Äôinfrastruttura e &lt;strong&gt;velocizzato&lt;/strong&gt; l‚Äô
&lt;strong&gt;aggiornamento&lt;/strong&gt; della documentazione, senza perdere nessuna delle
precedenti &lt;strong&gt;funzioni&lt;/strong&gt; di ricerca ma anzi migliorandole ed
aggiungendone altre da tempo richieste dagli &lt;strong&gt;utenti&lt;/strong&gt;.&lt;/blockquote&gt;
&lt;p&gt;Tramite questo talk potrai &lt;strong&gt;imparare&lt;/strong&gt; come &lt;strong&gt;aggiungere&lt;/strong&gt; una nuova
funzione di &lt;strong&gt;Ricerca Full-Text&lt;/strong&gt; nel &lt;strong&gt;tuo progetto&lt;/strong&gt; basato su Django
e PostgreSQL. In alternativa potreai imparare come &lt;strong&gt;aggiornare&lt;/strong&gt; la
ricerca esistente nel tuo sito se usi Elasticsearch o &lt;strong&gt;motori di
ricerca&lt;/strong&gt; simili .&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;&lt;em&gt;Per una **introduzione*&lt;/em&gt; ai temi del talk puoi leggere il mio articolo
sulla &lt;a class="reference external" href="http://www.paulox.net/2017/12/22/full-text-search-in-django-with-%20postgresql/"&gt;&amp;quot;Ricerca Full-Text in Django con
PostgreSQL&amp;quot;&lt;/a&gt;
basato sul mio talk presentato al &lt;a class="reference external" href="https://www.pycon.it/conference/talks/ricerca-full-text-in-django-con-%20postgresql"&gt;PyCon
Otto&lt;/a&gt;
nel 2017.*&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;Friday 20 April&lt;/strong&gt; at 16:45 &lt;a class="reference external" href="/en/sprints/schedule/pycon9/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</summary><category term="web"></category><category term="search"></category><category term="postgresql"></category><category term="postgres"></category><category term="database"></category><category term="Python"></category><category term="documentation"></category><category term="django"></category><category term="elasticsearch"></category><category term="sphinx"></category><category term="Full Text Search"></category><category term="python3"></category></entry><entry><title>Designing fast and scalable Python MicroServices with django</title><link href="https://pyvideo.org/pycon-sk-2018/designing-fast-and-scalable-python-microservices-with-django.html" rel="alternate"></link><published>2018-03-10T00:00:00+00:00</published><updated>2018-03-10T00:00:00+00:00</updated><author><name>Dinesh Joshi</name></author><id>tag:pyvideo.org,2018-03-10:pycon-sk-2018/designing-fast-and-scalable-python-microservices-with-django.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;django, combined with the django REST framework, makes it very easy to
build RESTful MicroServices. However, django is perceived to have some
overhead making it hard to build fast and scalable MicroServices. This
talk shows you how to squeeze the last bit of performance from django.
We will focus on django‚Äôs key architectural components and the right way
to use them. Using profiling, we will identify bottlenecks and fix them
enabling you to build scalable RESTful services that play to django‚Äôs
strengths. At the end of the talk you will have a good handle on
building scalable MicroServices with django.&lt;/p&gt;
</summary><category term="Django"></category><category term="Django REST framework"></category><category term="MicroServices"></category><category term="PyCon SK"></category><category term="Python"></category><category term="RESTful services"></category></entry><entry><title>Django 2.0 : What's new?</title><link href="https://pyvideo.org/pycon-nigeria-2018/django-20-whats-new.html" rel="alternate"></link><published>2018-09-13T00:00:00+00:00</published><updated>2018-09-13T00:00:00+00:00</updated><author><name>Ibrahim Diop</name></author><id>tag:pyvideo.org,2018-09-13:pycon-nigeria-2018/django-20-whats-new.html</id><summary type="html"></summary><category term="Django"></category></entry><entry><title>Django Lessons Learned @BeProud</title><link href="https://pyvideo.org/pycon-japan-2012/django-lessons-learned-beproud.html" rel="alternate"></link><published>2012-09-16T00:00:00+00:00</published><updated>2012-09-16T00:00:00+00:00</updated><author><name>„Ç§„Ç¢„É≥ „É´„Ç§„Çπ</name></author><id>tag:pyvideo.org,2012-09-16:pycon-japan-2012/django-lessons-learned-beproud.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;3Âπ¥‰ª•‰∏äDjango„Çí‰Ωø„Å£„Å¶ÈñãÁô∫„Çí„Åó„Å¶„Åç„ÅüBeProud„Åß„ÄÅ ÁµåÈ®ì„Åó„Åü„Åì„Å®„ÄÅÂãâÂº∑„Å´„Å™„Å£„Åü„Åì„Å®„ÇíÂÖ±Êúâ&lt;/p&gt;
</summary><category term="django"></category></entry><entry><title>Web„Éï„É¨„Éº„É†„ÉØ„Éº„ÇØ„Éë„Éç„É´</title><link href="https://pyvideo.org/pycon-japan-2012/webhuremuwakupaneru.html" rel="alternate"></link><published>2012-09-16T00:00:00+00:00</published><updated>2012-09-16T00:00:00+00:00</updated><author><name>Yoshifumi Yamaguchi</name></author><id>tag:pyvideo.org,2012-09-16:pycon-japan-2012/webhuremuwakupaneru.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;ÂéªÂπ¥Â•ΩË©ï„Å†„Å£„Åü„Éë„Éç„É´„Éá„Ç£„Çπ„Ç´„ÉÉ„Ç∑„Éß„É≥„Çí‰ªäÂπ¥„ÇÇË°å„ÅÑ„Åæ„Åô„ÄÇ
‰ªäÂπ¥„ÅØFlask„ÅÆ‰ΩúËÄÖ„Åß„ÅÇ„ÇäÂü∫Ë™øË¨õÊºî„ÇíË°å„ÅÜArmin Ronacher„ÇíÂàù„ÇÅ„Å®„Åó„ÅüÂêÑ„Éï„É¨„Éº„É†„ÉØ„Éº„ÇØ„ÅÆÁ¨¨‰∏Ä‰∫∫ËÄÖ„ÇíËøé„Åà„ÄÅ Flask, Django, Pyramid, Google App Engine „ÅÆÂà©ÁÇπ„Å®Ê¨†ÁÇπ„ÇíËµ§Ë£∏„ÄÖ„Å´Ë®éË´ñ„Åó„Å¶È†Ç„Åç„Åæ„Åô„ÄÇ
„Åì„ÅÆË®éË´ñ„ÇíËÅ¥„ÅÑ„Å¶È†Ç„Åë„Çå„Å∞„ÄÅÁä∂Ê≥Å„Å´Âøú„Åò„Åüweb„Éï„É¨„Éº„É†„ÉØ„Éº„ÇØ„ÅÆÈÅ∏Êäû„ÅåÂá∫Êù•„Çã„Çà„ÅÜ„Å´„Å™„Çã„ÅØ„Åö„Åß„Åô„ÄÇ&lt;/p&gt;
</summary><category term="panel"></category><category term="framework"></category><category term="flask"></category><category term="django"></category><category term="pyramid"></category><category term="googleappengine"></category></entry><entry><title>Django„ÇíÊ¥ªÁî®„Åó„ÅüM2M„ÇØ„É©„Ç¶„Éâ„Éó„É©„ÉÉ„Éà„Éï„Ç©„Éº„É†</title><link href="https://pyvideo.org/pycon-japan-2012/djangowohuo-yong-shitam2mkuraudopuratsutohuomu.html" rel="alternate"></link><published>2012-09-15T00:00:00+00:00</published><updated>2012-09-15T00:00:00+00:00</updated><author><name>ÊùæÊùë Á´ú‰πã‰ªã</name></author><id>tag:pyvideo.org,2012-09-15:pycon-japan-2012/djangowohuo-yong-shitam2mkuraudopuratsutohuomu.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Django„ÇíÂà©Áî®„Åó„ÅüM2M„Çµ„Éº„Éê„ÅÆÂÆü‰æã„Å´„Å§„ÅÑ„Å¶Á¥π‰ªã&lt;/p&gt;
</summary><category term="django"></category><category term="m2m-server"></category></entry><entry><title>‰Ωø„Åà„Çã Django 1.4</title><link href="https://pyvideo.org/pycon-japan-2012/shi-eru-django-14.html" rel="alternate"></link><published>2012-09-15T00:00:00+00:00</published><updated>2012-09-15T00:00:00+00:00</updated><author><name>Ê∏ÖÂéü ÂºòË≤¥</name></author><id>tag:pyvideo.org,2012-09-15:pycon-japan-2012/shi-eru-django-14.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Django„Å´„Å§„ÅÑ„Å¶
1.0 ‰ª•Èôç„ÅÆÊñ∞„Åó„ÅÑ„Åì„Å®
„ÇØ„É©„Çπ„Éô„Éº„ÇπÊ±éÁî®„Éì„É•„Éº
app template (django-skel)&lt;/p&gt;
</summary><category term="django"></category></entry><entry><title>Mobile apps with Python, Quick! - Part 1</title><link href="https://pyvideo.org/pycon-india-2012/mobile-apps-with-python-quick-part-1.html" rel="alternate"></link><published>2012-09-30T00:00:00+00:00</published><updated>2012-09-30T00:00:00+00:00</updated><author><name>Supreet Sethi</name></author><id>tag:pyvideo.org,2012-09-30:pycon-india-2012/mobile-apps-with-python-quick-part-1.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;With &amp;quot;mobile first&amp;quot; as vision statement, we harness significant power of using Python and django to produce clean back-ends especially using django-piston as key library.
The Django framework is quite well known. It is a extremely quick and easy way to develop web sites and apps. Backed by strong developer community and wealth of knowledge available online, it is natural first choice for web-development. But in this case, we use it as an excellent web-app back-end which we drive a mobile front-end.
Sencha is fast becoming an important framework for developing mobile apps which runs elegantly on both Android and iPhone. With almost native API like look and feel, it works like a charm on Android and iPhone platform reducing development time dramatically.
I will try to address the classic problem of disconnect between mobile and web-apps. Putting the system of producing both within single development cycle. Using django-piston as center piece library. We will use extensively to create well defined APIs. These APIs will in turn be used with Sencha based front-ends.
Extending further we will take a look at integration testing of this framework towards creating a rock solid mobile experience. This will be followed by discussion on merits of using browser over native app frameworks.&lt;/p&gt;
</summary><category term="mobile"></category><category term="mobile first"></category><category term="sencha"></category><category term="django"></category></entry><entry><title>Mobile apps with Python, Quick! - Part 2</title><link href="https://pyvideo.org/pycon-india-2012/mobile-apps-with-python-quick-part-2.html" rel="alternate"></link><published>2012-09-30T00:00:00+00:00</published><updated>2012-09-30T00:00:00+00:00</updated><author><name>Supreet Sethi</name></author><id>tag:pyvideo.org,2012-09-30:pycon-india-2012/mobile-apps-with-python-quick-part-2.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;With &amp;quot;mobile first&amp;quot; as vision statement, we harness significant power of using Python and django to produce clean back-ends especially using django-piston as key library.
The Django framework is quite well known. It is a extremely quick and easy way to develop web sites and apps. Backed by strong developer community and wealth of knowledge available online, it is natural first choice for web-development. But in this case, we use it as an excellent web-app back-end which we drive a mobile front-end.
Sencha is fast becoming an important framework for developing mobile apps which runs elegantly on both Android and iPhone. With almost native API like look and feel, it works like a charm on Android and iPhone platform reducing development time dramatically.
I will try to address the classic problem of disconnect between mobile and web-apps. Putting the system of producing both within single development cycle. Using django-piston as center piece library. We will use extensively to create well defined APIs. These APIs will in turn be used with Sencha based front-ends.
Extending further we will take a look at integration testing of this framework towards creating a rock solid mobile experience. This will be followed by discussion on merits of using browser over native app frameworks.&lt;/p&gt;
</summary><category term="mobile"></category><category term="mobile first"></category><category term="sencha"></category><category term="django"></category></entry><entry><title>Mobile apps with Python, Quick! - Part 3</title><link href="https://pyvideo.org/pycon-india-2012/mobile-apps-with-python-quick-part-3.html" rel="alternate"></link><published>2012-09-30T00:00:00+00:00</published><updated>2012-09-30T00:00:00+00:00</updated><author><name>Supreet Sethi</name></author><id>tag:pyvideo.org,2012-09-30:pycon-india-2012/mobile-apps-with-python-quick-part-3.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;With &amp;quot;mobile first&amp;quot; as vision statement, we harness significant power of using Python and django to produce clean back-ends especially using django-piston as key library.
The Django framework is quite well known. It is a extremely quick and easy way to develop web sites and apps. Backed by strong developer community and wealth of knowledge available online, it is natural first choice for web-development. But in this case, we use it as an excellent web-app back-end which we drive a mobile front-end.
Sencha is fast becoming an important framework for developing mobile apps which runs elegantly on both Android and iPhone. With almost native API like look and feel, it works like a charm on Android and iPhone platform reducing development time dramatically.
I will try to address the classic problem of disconnect between mobile and web-apps. Putting the system of producing both within single development cycle. Using django-piston as center piece library. We will use extensively to create well defined APIs. These APIs will in turn be used with Sencha based front-ends.
Extending further we will take a look at integration testing of this framework towards creating a rock solid mobile experience. This will be followed by discussion on merits of using browser over native app frameworks.&lt;/p&gt;
</summary><category term="mobile"></category><category term="mobile first"></category><category term="sencha"></category><category term="django"></category></entry><entry><title>Mobile apps with Python, Quick! - part4</title><link href="https://pyvideo.org/pycon-india-2012/mobile-apps-with-python-quick-part4.html" rel="alternate"></link><published>2012-09-30T00:00:00+00:00</published><updated>2012-09-30T00:00:00+00:00</updated><author><name>Supreet Sethi</name></author><id>tag:pyvideo.org,2012-09-30:pycon-india-2012/mobile-apps-with-python-quick-part4.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;With &amp;quot;mobile first&amp;quot; as vision statement, we harness significant power of using Python and django to produce clean back-ends especially using django-piston as key library.
The Django framework is quite well known. It is a extremely quick and easy way to develop web sites and apps. Backed by strong developer community and wealth of knowledge available online, it is natural first choice for web-development. But in this case, we use it as an excellent web-app back-end which we drive a mobile front-end.
Sencha is fast becoming an important framework for developing mobile apps which runs elegantly on both Android and iPhone. With almost native API like look and feel, it works like a charm on Android and iPhone platform reducing development time dramatically.
I will try to address the classic problem of disconnect between mobile and web-apps. Putting the system of producing both within single development cycle. Using django-piston as center piece library. We will use extensively to create well defined APIs. These APIs will in turn be used with Sencha based front-ends.
Extending further we will take a look at integration testing of this framework towards creating a rock solid mobile experience. This will be followed by discussion on merits of using browser over native app frameworks.&lt;/p&gt;
</summary><category term="mobile"></category><category term="mobile first"></category><category term="sencha"></category><category term="django"></category></entry><entry><title>Taking Django Async</title><link href="https://pyvideo.org/pycon-us-2018/taking-django-async.html" rel="alternate"></link><published>2018-05-11T00:00:00+00:00</published><updated>2018-05-11T00:00:00+00:00</updated><author><name>Andrew Godwin</name></author><id>tag:pyvideo.org,2018-05-11:pycon-us-2018/taking-django-async.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The Django Channels project has taken a major turn with version 2.0, embracing Python's async functionality and building applications around an async event loop rather than worker processes.&lt;/p&gt;
&lt;p&gt;Doing this, however, wasn't easy. We'll look through some of the techniques used to make Django coexist in this async world, including handing off between async and sync code, writing fully asynchronous HTTP and WebSocket handling, and what this means for the future of Django, and maybe Python web frameworks in general.&lt;/p&gt;
</summary><category term="django"></category><category term="async"></category><category term="django channels"></category></entry><entry><title>API-Driven Django</title><link href="https://pyvideo.org/pycon-us-2018/api-driven-django.html" rel="alternate"></link><published>2018-05-10T00:00:00+00:00</published><updated>2018-05-10T00:00:00+00:00</updated><author><name>Philip James</name></author><id>tag:pyvideo.org,2018-05-10:pycon-us-2018/api-driven-django.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;As the web continues to evolve, the demand for data-driven backends matched with rich frontend experiences grows every day. Django comes with a robust templating system and rendering engine, but more and more web applications using Django are just focusing on it‚Äôs API abilities.&lt;/p&gt;
&lt;p&gt;What if we could have the best of both worlds? What if we could use Django and django-rest-framework to write views that let us prototype quickly using the Django templating system, and have those same views return API responses to rich clients?&lt;/p&gt;
&lt;p&gt;In this tutorial, we‚Äôll build a sample data collection and display web application, taking advantage of the ways Django and django-rest-framework work together. The end result will be a web application you could adapt for many kinds of data collection needs, and you‚Äôll come away knowing how to get a rich API and a frontend prototype out of just one Django view.&lt;/p&gt;
</summary><category term="django"></category></entry><entry><title>Beyond Django Basics</title><link href="https://pyvideo.org/pycon-us-2018/beyond-django-basics.html" rel="alternate"></link><published>2018-05-10T00:00:00+00:00</published><updated>2018-05-10T00:00:00+00:00</updated><author><name>Shauna Gordon-McKeon</name></author><id>tag:pyvideo.org,2018-05-10:pycon-us-2018/beyond-django-basics.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Finished with the official Django getting started guide, and not sure what to do next?  This tutorial has you covered.&lt;/p&gt;
&lt;p&gt;We'll extend the blog built in the official guide, using a variety of slightly more advanced Django features.  Topics to be covered include: extending the in-built user model, using the in-built login system, enhancing forms, using view mixins and overriding view methods, and changing up your database backend.&lt;/p&gt;
&lt;p&gt;With each extension, we'll talk about not just how to use these features but also &lt;em&gt;why&lt;/em&gt; you'd want to use them.  We'll conclude by talking about other Django features you may want to learn about as you grow more proficient with this versatile framework.&lt;/p&gt;
</summary><category term="django"></category></entry><entry><title>Intermediate testing with Django: Outside-in TDD and Mocking effectively</title><link href="https://pyvideo.org/pycon-us-2018/intermediate-testing-with-django-outside-in-tdd-and-mocking-effectively.html" rel="alternate"></link><published>2018-05-10T00:00:00+00:00</published><updated>2018-05-10T00:00:00+00:00</updated><author><name>Harry  Percival</name></author><id>tag:pyvideo.org,2018-05-10:pycon-us-2018/intermediate-testing-with-django-outside-in-tdd-and-mocking-effectively.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Once developers have got the hang of the basics of testing, problems of applying it in the real world soon start to manifest themselves, and common questions come up.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;What order should I write my tests and code in to avoid wasting time on blind alleys?&lt;/li&gt;
&lt;li&gt;If I'm using Mocks in my tests to avoid external dependencies, how do I avoid getting stuck with unwieldy, unreadable tests that don't actually tell me when things have gone wrong?&lt;/li&gt;
&lt;li&gt;Unit tests vs integration tests vs functional tests, which should I use when, and what are the trade-offs?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In this tutorial we'll work through an example of using an existing Django codebase, adding a new feature, and experimenting with different testing techniques along the way to illustrate the pros and cons of each&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;bottom-up vs outside-in development&lt;/li&gt;
&lt;li&gt;double-loop TDD&lt;/li&gt;
&lt;li&gt;using Mocks to isolate application layers from each other&lt;/li&gt;
&lt;li&gt;&amp;quot;listen to your tests&amp;quot;, and learning to use ugly or convoluted tests as a signal for improving design.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Some familiarity with Django is desirable, although skills learned in other web frameworks are transferrable.  By the end, you'll be able to go back to your own projects with practical experience, and a new way of thinking about how to optimise your tests for your own circumstances.&lt;/p&gt;
</summary><category term="django"></category><category term="tdd"></category><category term="mock"></category></entry><entry><title>Introduction to TDD with Django</title><link href="https://pyvideo.org/pycon-us-2018/introduction-to-tdd-with-django.html" rel="alternate"></link><published>2018-05-10T00:00:00+00:00</published><updated>2018-05-10T00:00:00+00:00</updated><author><name>Harry  Percival</name></author><id>tag:pyvideo.org,2018-05-10:pycon-us-2018/introduction-to-tdd-with-django.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Over the past few years, automated software testing has moved from being a niche interest to being the default assumption.  This tutorial is an introduction to Test-Driven Development (TDD) for the world of web development in Python using the Django framework.&lt;/p&gt;
&lt;p&gt;The tutorial is suitable for people who are new to either testing, or Django, or both, although some basic working knowledge of Python syntax (or programming in another language) is assumed.&lt;/p&gt;
&lt;p&gt;Learn about:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Unit testing and Functional testing&lt;/li&gt;
&lt;li&gt;the Selenium browser automation tool&lt;/li&gt;
&lt;li&gt;Python's unittest standard library module&lt;/li&gt;
&lt;li&gt;Django models, views and templates&lt;/li&gt;
&lt;li&gt;testing front-end and back-end code&lt;/li&gt;
&lt;li&gt;refactoring, using tests&lt;/li&gt;
&lt;li&gt;the unit-test/code cycle, or Red-Green-Refactor, TDD workflow&lt;/li&gt;
&lt;li&gt;and the Testing Goat, Python's unofficial mascot for testing!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Come prepared!  You'll need a Python 3.6 virtualenv with Django and Selenium installed.  Detailed instructions are provided &lt;a class="reference external" href="https://www.obeythetestinggoat.com/book/pre-requisite-installations.html"&gt;here&lt;/a&gt;.&lt;/p&gt;
</summary><category term="tdd"></category><category term="django"></category></entry><entry><title>Building Rich Applications with Django and Ember.js</title><link href="https://pyvideo.org/pytexas-2012/building-rich-applications-with-django-and-emberjs.html" rel="alternate"></link><published>2012-09-15T00:00:00+00:00</published><updated>2012-09-15T00:00:00+00:00</updated><author><name>Gabriel Grant</name></author><id>tag:pyvideo.org,2012-09-15:pytexas-2012/building-rich-applications-with-django-and-emberjs.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;After several years in the depths of high-performance computing, I returned to the web world a couple years ago and discovered that Django's awesome-to-pain ratio had tipped strongly in it's favor. I've been hooked ever since. As web lead at dotCloud for the past year, I've gotten to work on making Django deployment awesome at DotCloud in San Francisco. I'm now spending more of my time doing developer advocacy -- acting as dotCloud's &amp;quot;customer-in-residence&amp;quot; to ensure the company is producing a product developers love. I maintain and contribute to a number of open source projects: &lt;a class="reference external" href="https://github.com/gabrielgrant"&gt;https://github.com/gabrielgrant&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In this talk, learn how Django and Ember.js can compliment each other: how to integrate them where their functionality overlaps and reconcile the differences where their approaches contradict. Django helps quickly express a data model and handle HTTP requests, but using it alone isn't conducive to building highly-dynamic interfaces. Ember, on the other hand, is a client-side framework designed with precisely these interfaces in mind, but doesn't tackle the server-side at all. Both Django and Ember.js are large, ambitious and opinionated frameworks. This is what gives them their power over their more minimalist colleagues (Flask and Backbone.js, respectively) but because their opinions sometimes differ, it can be difficult to make them play together. In this talk, I'll briefly introduce Ember.js, compare and contrast how Django and Ember.js handle the various layers of an application, and show how to bridge between these two worlds.&lt;/p&gt;
&lt;p&gt;Topics covered:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Ember's interpretation of MVC in Django terms&lt;/li&gt;
&lt;li&gt;Overlap in functionality: which pieces of each framework to keep, modify and throw away&lt;/li&gt;
&lt;li&gt;Compiling Assets&lt;/li&gt;
&lt;li&gt;Connecting Ember to Django with Ember-data and Django REST framework&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="django"></category><category term="ember.js"></category></entry><entry><title>A Web App in Four Frameworks</title><link href="https://pyvideo.org/pycascades-2018/a-web-app-in-four-frameworks.html" rel="alternate"></link><published>2018-01-22T00:00:00+00:00</published><updated>2018-01-22T00:00:00+00:00</updated><author><name>Nicholas Hunt-Walker</name></author><id>tag:pyvideo.org,2018-01-22:pycascades-2018/a-web-app-in-four-frameworks.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk we take a tour of some Python web frameworks through the lens of an API for the same web application: a simple To Do list. We'll see how the same problems are handled across Django, Flask, Pyramid, and Tornado, and why you might choose one over the rest.&lt;/p&gt;
</summary><category term="framework"></category><category term="Django"></category><category term="Flask"></category><category term="Pyramid"></category><category term="Tornado"></category></entry><entry><title>Plugin ecosystems for Python web-applications</title><link href="https://pyvideo.org/pycon-de-2017/plugin-ecosystems-for-python-web-applications.html" rel="alternate"></link><published>2017-10-25T00:00:00+00:00</published><updated>2017-10-25T00:00:00+00:00</updated><author><name>Raphael Michel</name></author><id>tag:pyvideo.org,2017-10-25:pycon-de-2017/plugin-ecosystems-for-python-web-applications.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Raphael Michel&lt;/strong&gt; (&amp;#64;rami)&lt;/p&gt;
&lt;p&gt;I‚Äòm a software developer working with the web for more than ten years and with Python and Django for over four years. I work as a freelancer and maintain multiple open source projects. The most notable Django-based one is pretix, a full-featured and free conference ticketing software.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The power of some popular web applications like WordPress comes from a flexible plugin system. This talk will show how to implement such plugin architectures for Python web applications including real-world examples. I'll give examples with Django, but the important bits aren't Django-specific.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;It is probably common sense by now that modular architectures win over monolithic architectures in a number of ways. Django gives us reusable apps, but just because they are reusable doesn‚Äôt mean they automatically integrate nicely with each other and a Python programmer is still required to glue them together. In this talk I will show how to build a rich Django application that provides a well-defined plugin API. The API will allow plugins to seamlessly integrate with the main application. The talk will show various patterns around URL routing, Django‚Äòs signal system and the use of setuptools to provide auto-detection of installed plugins. Installing a plugin should not be much more complicated than a simple pip install.&lt;/p&gt;
&lt;p&gt;Django is only used as an example, most parts could be easily transferred to other web frameworks as well. The explained architecture has been in use for some years in the pretix open source project and made it possible to us to grow a rich plugin ecosystem.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Recorded at&lt;/strong&gt; PyCon.DE 2017 Karlsruhe: &lt;a class="reference external" href="https://de.pycon.org/"&gt;https://de.pycon.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Video editing&lt;/strong&gt;: Sebastian Neubauer &amp;amp; Andrei Dan&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Tools&lt;/strong&gt;: Blender, Avidemux &amp;amp; Sonic Pi&lt;/p&gt;
</summary><category term="django"></category><category term="python"></category><category term="web"></category></entry><entry><title>Crash test of Django ORM</title><link href="https://pyvideo.org/pycon-italia-2017/crash-test-of-django-orm.html" rel="alternate"></link><published>2017-04-09T00:00:00+00:00</published><updated>2017-04-09T00:00:00+00:00</updated><author><name>Andrii Soldatenko</name></author><id>tag:pyvideo.org,2017-04-09:pycon-italia-2017/crash-test-of-django-orm.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The world is swimming in articles and books about Django and Django ORM
itself. All this sources cover only basic use cases of Django ORM
comparing to real world examples. This talk is dedicated to the
proposition to crash test Django ORM 80% of functionalities in 20% of
the time. Also I‚Äôm going to show the important features and capabilities
of Django ORM compare to most of SQL features. Traditionally, ORM is
presented in a ‚Äúbottom-up‚Äù fashion, but I would like to propose
approach, on the other hand, is ‚Äútop-down‚Äù. We begin by identifying a
rather short list of standard questions, or precisely types of
questions, that are often asked of relations databases. We then show how
these standard questions are posted in Django ORM, introducing and
motivating the use of its capabilities and features as they become
relevant.&lt;/p&gt;
</summary><category term="django-orm"></category><category term="performance"></category><category term="postgresql"></category><category term="python3"></category><category term="django"></category></entry><entry><title>Indicizzare e cercare tonnellate di dati con ElasticSearch e Django</title><link href="https://pyvideo.org/pycon-italia-2017/indicizzare-e-cercare-tonnellate-di-dati-con-elasticsearch-e-django.html" rel="alternate"></link><published>2017-04-09T00:00:00+00:00</published><updated>2017-04-09T00:00:00+00:00</updated><author><name>Ernesto Arbitrio</name></author><id>tag:pyvideo.org,2017-04-09:pycon-italia-2017/indicizzare-e-cercare-tonnellate-di-dati-con-elasticsearch-e-django.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Cercare in maniera efficente e veloce in grandi quantit√† di dati risulta
essere, almeno nel mio campo e nelle mie esperienze, un problema
abbastanza diffuso. In questo talk sar√† affrontato da un punto di vista
tecnico/sistemistico la parte di indicizzazione di grandi volumi di
dati, le accortenze da avere quando si indicizzano dati in un engine di
search e anlaytics e la parte di monitoring del cluster ELK. Nella
seconda parte invece verr√† mostrata l‚Äôinterazione di una web interface
(Django based) con elasticsearch. Conoscenze necessarie per il talk:
concetti base di serializzazione, restful web services, django&lt;/p&gt;
</summary><category term="elasticsearch"></category><category term="json"></category><category term="Full Text Search"></category><category term="REST"></category><category term="django"></category></entry><entry><title>Open edX, soluzione per l'e-learning basata su Django</title><link href="https://pyvideo.org/pycon-italia-2017/open-edx-soluzione-per-le-learning-basata-su-django.html" rel="alternate"></link><published>2017-04-09T00:00:00+00:00</published><updated>2017-04-09T00:00:00+00:00</updated><author><name>Davide Corio</name></author><id>tag:pyvideo.org,2017-04-09:pycon-italia-2017/open-edx-soluzione-per-le-learning-basata-su-django.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Open edX √® una soluzione open source basata (quasi) interamente su
Django per l‚Äôerogazione di Massive Open Online Courses (MOOC). La
soluzione √® stata concepita dal Massachusetts Institute of Technology
(MIT) e dalla Harvard University. Anche se al team di lavoro si sono ora
uniti altri nomi illustri come la Stanford University, Microsoft e molti
altri.&lt;/p&gt;
&lt;p&gt;In questo talk approfondiremo le funzionalit√† offerte da Open edX, la
sua architettura e qualche cenno di sviluppo di estensioni e moduli
aggiuntivi.&lt;/p&gt;
</summary><category term="Python"></category><category term="E-learning"></category><category term="MOOC"></category><category term="django"></category></entry><entry><title>Digital Analytics Data Aggregation: un case study dal mondo reale utilizzando SQL, NoSQL e Pandas</title><link href="https://pyvideo.org/pycon-italia-2017/digital-analytics-data-aggregation-un-case-study-dal-mondo-reale-utilizzando-sql-nosql-e-pandas.html" rel="alternate"></link><published>2017-04-08T00:00:00+00:00</published><updated>2017-04-08T00:00:00+00:00</updated><author><name>Alessandro Pelliciari</name></author><id>tag:pyvideo.org,2017-04-08:pycon-italia-2017/digital-analytics-data-aggregation-un-case-study-dal-mondo-reale-utilizzando-sql-nosql-e-pandas.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;I clienti enterprise si trovano sempre pi√π spesso ad avere difficolt√†
nel recuperare informazioni essenziali per capire nel complesso dove il
brand sta funzionando e dove invece serve un intervento tempestivo,
perch√® sono inondati di dati di dettaglio che spesso non sono facilmente
aggregabili e visualizzabili insieme con frequenza giornaliera.&lt;/p&gt;
&lt;p&gt;Per rispondere a questa esigenza, in azienda, nel nostro reparto R&amp;amp;D,
abbiamo sviluppato una dashboard che permette a clienti con diversi
brand e properties (siti) di aggregare i principali KPI da monitorare
(sia KPI standard che KPI personalizzati). I KPI sono i key performance
indicators, ovvero metriche che aiutano a valutare le performance).&lt;/p&gt;
&lt;p&gt;Ma i dati da visualizzare e aggregare, provenienti da diverse fonti
(Google Analytics, Adobe Analytics, tools SEO), hanno strutture diverse
e non √® possibile a priori prevedere quali sono le strutture
disponibili.&lt;/p&gt;
&lt;p&gt;Perci√≤, in questo talk vedremo insieme come abbiamo gestito questo caso
reale attraverso un mix di tecnologie SQL (MySQL attraverso Django) e
NoSQL (MongoDb), utilizzando i dataframe di Pandas come layer intermedio
attraverso il quale lavorare il dato velocemente.&lt;/p&gt;
&lt;p&gt;La soluzione realizzata ci ha permesso di integrare rapidamente nuove
fonti e nuovi KPI, e di gestire volumi elevati di dati (attualmente 200+
siti contemporaneamente) con ottime performance.&lt;/p&gt;
&lt;p&gt;Vedremo poi (se rimane tempo) come questi dati vengono forniti
attraverso API Rest (grazie a Django Rest Framework) e consumati
attraverso AngularJS sul client.&lt;/p&gt;
&lt;p&gt;Vorremmo infine coinvolgervi chiedendovi come avreste gestito questa
difficolt√† - non √® assolutamente detto che la nostra soluzione sia per
forza quella ottimale!&lt;/p&gt;
</summary><category term="django-rest-framework"></category><category term="mongodb"></category><category term="django"></category><category term="API Design"></category><category term="web-development"></category><category term="angularjs"></category><category term="mysql"></category><category term="google-analytics"></category><category term="pandas"></category></entry><entry><title>Django Rest Framework - Tips&amp;Tricks</title><link href="https://pyvideo.org/pycon-italia-2017/django-rest-framework-tipstricks.html" rel="alternate"></link><published>2017-04-08T00:00:00+00:00</published><updated>2017-04-08T00:00:00+00:00</updated><author><name>Luca Zacchetti</name></author><id>tag:pyvideo.org,2017-04-08:pycon-italia-2017/django-rest-framework-tipstricks.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Developing Web APIs for Django websites have never been so easy.
Starting from a real world use case, I‚Äôll explain why DRF became our
weapon of choice to develop in a fast and easy way all the APIs we need
at Cloud Academy.&lt;/p&gt;
&lt;p&gt;We‚Äôll start talking about the main benefits that DRF brings to Django
projects, then we‚Äôll use our real world use case to describe the best
practices we use to build fast, secure and maintainable APIs diving into
DRF main features and functionalities.&lt;/p&gt;
&lt;p&gt;The scope of this talk is to explain in a very practical way how DRF can
be integrated into Django projects to build beautiful web APIs. We‚Äôll
use a lot of code examples and performance benchmarks to describe the
various features explored during the talk. No prior experience on DRF is
required but at least some basic knowledge of Django is suggested for
attendees.&lt;/p&gt;
</summary><category term="django-rest-framework"></category><category term="REST API Frameworks"></category><category term="API Design"></category><category term="REST"></category><category term="django"></category><category term="optimization"></category><category term="performance"></category></entry><entry><title>Ricerca full text in Django con PostgreSQL</title><link href="https://pyvideo.org/pycon-italia-2017/ricerca-full-text-in-django-con-postgresql.html" rel="alternate"></link><published>2017-04-08T00:00:00+00:00</published><updated>2017-04-08T00:00:00+00:00</updated><author><name>Paolo Melchiorre</name></author><id>tag:pyvideo.org,2017-04-08:pycon-italia-2017/ricerca-full-text-in-django-con-postgresql.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Dalla versione 1.10 di &lt;strong&gt;Django&lt;/strong&gt; √® presente il modulo che facilita
l‚Äôutilizzo del motore di &lt;strong&gt;ricerca full text&lt;/strong&gt; di PostgreSQL. Dal
momento che &lt;strong&gt;PostgreSQL&lt;/strong&gt; √® utilizzato in molti progetti Django,
sfruttare il suo motore di ricerca full text permette di avere questa
funzionalit√† molto facilmente, senza dover configurare prodotti esterni
e senza doversi preoccupare di mantenere sincronizzati i dati tra
differenti sistemi. Vedremo come abbiamo sfruttato questa funzionalit√†
di ricerca full text in un &lt;strong&gt;progetto reale&lt;/strong&gt;.&lt;/p&gt;
</summary><category term="Full Text Search"></category><category term="search"></category><category term="postgresql"></category><category term="python3"></category><category term="django"></category></entry><entry><title>Deploy automatizzato di un progetto Python 3/Django con Ansible</title><link href="https://pyvideo.org/pycon-italia-2017/deploy-automatizzato-di-un-progetto-python-3django-con-ansible.html" rel="alternate"></link><published>2017-04-07T00:00:00+00:00</published><updated>2017-04-07T00:00:00+00:00</updated><author><name>Marco Santamaria</name></author><id>tag:pyvideo.org,2017-04-07:pycon-italia-2017/deploy-automatizzato-di-un-progetto-python-3django-con-ansible.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;La mia applicazione √® pronta e funziona senza problemi sulla mia
macchina con il server di sviluppo, ma non ho chiaro come portarla in un
ambiente di produzione. Ci sono parecchi servizi che permettono il
deploy con un solo click, adatti soprattutto a semplici siti, ma essi
non sono pienamente configurabili e nascondono il modo in cui il server
√® effettivamente organizzato. Anche se molti usano ingegnose soluzioni
PaaS, vale ancora la pena capire come costruire da zero un ambiente di
produzione con Linux, Python 3, Django e uWSGI. Nel talk questo classico
stack verr√† brevemente introdotto e si mostrer√† poi come automatizzare
la configurazione e la procedura di deploy con un &lt;a class="reference external" href="https://github.com/marco-santamaria/django-%20ansible-deploy"&gt;playbook
Ansible&lt;/a&gt;
che verr√† messo a disposizione. Una particolare enfasi verr√† data
all‚Äôuso di variabili d‚Äôambiente per la configurazione del progetto
seguendo l‚Äôapproccio delle twelve-factor-app. Inoltre verranno spiegati
i concetti pi√π importanti di Ansible (playbook, ruoli, template, moduli,
inventari).&lt;/p&gt;
</summary><category term="deploy"></category><category term="devops"></category><category term="automation"></category><category term="nginx"></category><category term="ansible"></category><category term="best-practices"></category><category term="django"></category><category term="uwsgi"></category></entry><entry><title>Presenting pysftpserver: OpenSSH SFTP service with Python</title><link href="https://pyvideo.org/pycon-italia-2017/presenting-pysftpserver-openssh-sftp-service-with-python.html" rel="alternate"></link><published>2017-04-07T00:00:00+00:00</published><updated>2017-04-07T00:00:00+00:00</updated><author><name>Filippo Morelli</name></author><id>tag:pyvideo.org,2017-04-07:pycon-italia-2017/presenting-pysftpserver-openssh-sftp-service-with-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Have you ever needed to connect to an OpenSSH SFTP server and keep track
of the user activities? Or maybe limit user permissions? Or define
specific callbacks to react to user actions?&lt;/p&gt;
&lt;p&gt;&lt;em&gt;pysftpserver&lt;/em&gt; is an OpenSSH SFTP wrapper, written purely in Python. It
is yet another cool example of what you might already know: how powerful
Python can be while staying extremely simple.&lt;/p&gt;
&lt;p&gt;This talk aims at presenting the tool and a few use cases in which it
was harnessed, including one with Django and Django REST Framework. It
requires a good knowledge of Python and Django and understanding the
basics of a SFTP service.&lt;/p&gt;
</summary><category term="SFTP"></category><category term="command-line"></category><category term="django-rest-framework"></category><category term="storage"></category><category term="django"></category><category term="ssh"></category><category term="servers"></category></entry><entry><title>Building a startup with Django</title><link href="https://pyvideo.org/pyconweb-2017/building-a-startup-with-django.html" rel="alternate"></link><published>2017-05-28T00:00:00+00:00</published><updated>2017-05-28T00:00:00+00:00</updated><author><name>Michael Schilonka</name></author><id>tag:pyvideo.org,2017-05-28:pyconweb-2017/building-a-startup-with-django.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Blueshoe was founded in 2014. Since the beginning of our company we used Python and the web framework Django to build web pages and applications. With respect to technology, there have been many ups and downs in the past 2 ¬Ω years. This is an experience report about building a startup with Django.&lt;/p&gt;
</summary><category term="django"></category></entry><entry><title>Google AMP for Django</title><link href="https://pyvideo.org/pyconweb-2017/google-amp-for-django.html" rel="alternate"></link><published>2017-05-28T00:00:00+00:00</published><updated>2017-05-28T00:00:00+00:00</updated><author><name>Robert Stein</name></author><id>tag:pyvideo.org,2017-05-28:pyconweb-2017/google-amp-for-django.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;What actually is Google AMP, what‚Äôs its use case and should I use it? AMP could be a new kind of SEO coming up, even though it isn‚Äôt yet. Still it brings some good insights and best practices for web developers. This talk is about the technology, what‚Äôs behind it and how you can use it with Django.&lt;/p&gt;
</summary><category term="django"></category></entry><entry><title>Oh, I found a Security Issue</title><link href="https://pyvideo.org/pyconweb-2017/oh-i-found-a-security-issue.html" rel="alternate"></link><published>2017-05-28T00:00:00+00:00</published><updated>2017-05-28T00:00:00+00:00</updated><author><name>Markus Holtermann</name></author><id>tag:pyvideo.org,2017-05-28:pyconweb-2017/oh-i-found-a-security-issue.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A talk together with Florian Apolloner&lt;/p&gt;
&lt;p&gt;Ever thought about what happens when somebody finds a security issue in Django? How does one responsibly disclose the issue? What happens after that? How does the Django team work on it? What happens until a Django security release is published? What comes afterwards?
Also, Django is ‚Äúreassuringly secure‚Äù. Let‚Äôs look at the history ;-)&lt;/p&gt;
&lt;p&gt;We'll give an insight on how the Django team handles security issues,
which can serve as a guideline and followed in own projects. We'll
will also review the history of Django's security issues to identify
hotspots and areas to look out for.&lt;/p&gt;
</summary><category term="django"></category><category term="security"></category></entry><entry><title>Django and the new frontend era</title><link href="https://pyvideo.org/pyconweb-2017/django-and-the-new-frontend-era.html" rel="alternate"></link><published>2017-05-27T00:00:00+00:00</published><updated>2017-05-27T00:00:00+00:00</updated><author><name>Patrick Arminio</name></author><id>tag:pyvideo.org,2017-05-27:pyconweb-2017/django-and-the-new-frontend-era.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;React, Ember, Vue - these are just some of the big beasts of the frontend world. How do they fit in a Django world? Is Django still suited for how we are now developing web apps?&lt;/p&gt;
&lt;p&gt;I work as Full stack developer so I often jump from Django to frontend frameworks like React and Vue JS. I‚Äôd like to share the way we structure Django apps in order to work well with frontend frameworks.&lt;/p&gt;
</summary><category term="django"></category></entry><entry><title>Real-Time Data with Django</title><link href="https://pyvideo.org/pyconweb-2017/real-time-data-with-django.html" rel="alternate"></link><published>2017-05-27T00:00:00+00:00</published><updated>2017-05-27T00:00:00+00:00</updated><author><name>Rachel Willmer</name></author><id>tag:pyvideo.org,2017-05-27:pyconweb-2017/real-time-data-with-django.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;For several years, Rachel Willmer has been searching for the perfect real-time data solution for her Django-based website, Luzme.&lt;/p&gt;
&lt;p&gt;The two most recent candidates under the microscope are Google Firebase (a paid service) and the new Django Channels (free and open source).&lt;/p&gt;
&lt;p&gt;Rachel shares her experiences of both and compares the relative advantages and disadvantages.&lt;/p&gt;
</summary><category term="keynote"></category><category term="django"></category></entry><entry><title>To index or not, that's not the question</title><link href="https://pyvideo.org/pyconweb-2017/to-index-or-not-thats-not-the-question.html" rel="alternate"></link><published>2017-05-27T00:00:00+00:00</published><updated>2017-05-27T00:00:00+00:00</updated><author><name>Markus Holtermann</name></author><id>tag:pyvideo.org,2017-05-27:pyconweb-2017/to-index-or-not-thats-not-the-question.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Database indexes play a key role in every database query. Hence, it's not a question that you should be able to define them through Django. While you're already kind of able to do that with &lt;cite&gt;dbindex=true&lt;/cite&gt; and &lt;cite&gt;index_together&lt;/cite&gt;, these options are rather limiting. Django 1.11 comes with a new feature to allow you to express your index requirements much more granular.&lt;/p&gt;
</summary><category term="django"></category></entry><entry><title>Ansible &amp; Terraform for Django: Move Faster, break fewer things</title><link href="https://pyvideo.org/pycon-se-2017/ansible-terraform-for-django-move-faster-break-fewer-things.html" rel="alternate"></link><published>2017-09-06T00:00:00+00:00</published><updated>2017-09-06T00:00:00+00:00</updated><author><name>Ezequiel Golub</name></author><id>tag:pyvideo.org,2017-09-06:pycon-se-2017/ansible-terraform-for-django-move-faster-break-fewer-things.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Intro level talk about using Ansible and Terraform together. These tools allow you to provision cloud resources such as Virtual Servers or CDN and to set up your servers with whatever software is needed. This allows to treat infrastructure as code, a cornerstone of DevOps.&lt;/p&gt;
</summary><category term="ansible"></category><category term="terraform"></category><category term="django"></category></entry><entry><title>Moving our Django Monolith to Google Cloud</title><link href="https://pyvideo.org/pycon-se-2017/moving-our-django-monolith-to-google-cloud.html" rel="alternate"></link><published>2017-09-06T00:00:00+00:00</published><updated>2017-09-06T00:00:00+00:00</updated><author><name>Arthur Koziel</name></author><id>tag:pyvideo.org,2017-09-06:pycon-se-2017/moving-our-django-monolith-to-google-cloud.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;We transitioned our Django monolith from bare-metal to Google Cloud Container Engine (Kubernetes). We will share our findings during this journey.&lt;/p&gt;
</summary><category term="django"></category></entry><entry><title>Flask vs Django</title><link href="https://pyvideo.org/pycon-es-2017/flask-vs-django.html" rel="alternate"></link><published>2017-09-24T14:00:00+02:00</published><updated>2017-09-24T14:00:00+02:00</updated><author><name>Dario Varotto</name></author><id>tag:pyvideo.org,2017-09-24:pycon-es-2017/flask-vs-django.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Flask or Django? Which one is better? We know the answer: it depends!
In RavenPack, we use both frameworks in big projects and for that, we have been dealing with its strengths and weaknesses in a real-world environment.&lt;/p&gt;
</summary><category term="flask"></category><category term="django"></category></entry><entry><title>Fullstack Single Page Applications con Django + Webpack + Vue.js</title><link href="https://pyvideo.org/pycon-es-2017/fullstack-single-page-applications-con-django-webpack-vuejs.html" rel="alternate"></link><published>2017-09-24T12:30:00+02:00</published><updated>2017-09-24T12:30:00+02:00</updated><author><name>Javier Abad√≠a</name></author><id>tag:pyvideo.org,2017-09-24:pycon-es-2017/fullstack-single-page-applications-con-django-webpack-vuejs.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Veremos c√≥mo montar una app fullstack usando Django y Vue.js con todos los ingredientes necesarios:
- c√≥mo integrar webpack para empaquetar la parte de cliente (Javascript, CSS y otros recursos) a partir de los fuentes
- c√≥mo configurar el entorno de desarrollo para disfrutar de la super productividad que aporta hot-module-reloading en el flujo de trabajo normal
- c√≥mo crear REST endpoints en Django
- c√≥mo gestionar la autenticaci√≥n de usuarios y las sesiones con Django.&lt;/p&gt;
&lt;p&gt;La charla ser√° una demo de c√≥mo crear una app de este estilo de principio a fin.&lt;/p&gt;
</summary><category term="django"></category><category term="webpack"></category><category term="vue.js"></category></entry><entry><title>Exprimiendo el ORM de Django</title><link href="https://pyvideo.org/pycon-es-2017/exprimiendo-el-orm-de-django.html" rel="alternate"></link><published>2017-09-24T12:00:00+02:00</published><updated>2017-09-24T12:00:00+02:00</updated><author><name>H√©ctor Pablos L√≥pez</name></author><id>tag:pyvideo.org,2017-09-24:pycon-es-2017/exprimiendo-el-orm-de-django.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Muchas veces nos resulta mucho m√°s f√°cil escribir una consulta a base de datos en SQL plano que lidiar con las limitaciones del ORM de Django, perdiendo as√≠ la gran potencia y limpieza que este nos ofrece.&lt;/p&gt;
&lt;p&gt;Los operadores Q() y F() son, muchas veces, algo que copiamos de la documentaci√≥n sin entender completamente. Hacer joins simples puede no ser posible, y no hablemos de joins con claves for√°neas de m√°s de una columna.&lt;/p&gt;
&lt;p&gt;Acabamos abusando del m√©todo extra() y la clase RawSQL cuando, en realidad, pueden no ser necesarios.&lt;/p&gt;
&lt;p&gt;La experiencia nos ha ense√±ado a sacar el m√°ximo partido de esta funcionalidad y exprimir al m√°ximo sus posiblidades, limitando al m√°ximo la escritura de c√≥digo SQL plano. Explicaremos c√≥mo, mediante la definici√≥n de algunos elementos b√°sicos e intermedios para manipular querysets y la presentaci√≥n de algunos trucos √∫tiles.&lt;/p&gt;
&lt;p&gt;Puede que te ahorre un par de consultas a la documentaci√≥n y que descubras alguna cosa nueva, o simplemente que vuelvas a apreciar el ORM de Django.&lt;/p&gt;
</summary><category term="django"></category><category term="orm"></category></entry><entry><title>Aplicaciones Geogr√°ficas con Django</title><link href="https://pyvideo.org/pycon-es-2017/aplicaciones-geograficas-con-django.html" rel="alternate"></link><published>2017-09-24T11:30:00+02:00</published><updated>2017-09-24T11:30:00+02:00</updated><author><name>Alicia P√©rez</name></author><id>tag:pyvideo.org,2017-09-24:pycon-es-2017/aplicaciones-geograficas-con-django.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;La 'ubicaci√≥n' es una de las variables m√°s importantes en cualquier problema, y es una de las m√°s complicadas de manejar.&lt;/p&gt;
&lt;p&gt;Django - sin ser un servidor geogr√°fico de primera clase - proporciona una buena plataforma para incorporar el &amp;quot;d√≥nde&amp;quot; en nuestras aplicaciones.&lt;/p&gt;
&lt;p&gt;Presentaremos - de forma pr√°ctica - las capacidades geogr√°ficas de Django (acceso a BB.DD espaciales, consultas geogr√°ficas) y sus limitaciones, indicando herramientas complementarias (p.ej. Leaflet) o stacks alternativos.&lt;/p&gt;
</summary><category term="gis"></category><category term="django"></category></entry><entry><title>Sysadmin vs Django</title><link href="https://pyvideo.org/pycon-es-2017/sysadmin-vs-django.html" rel="alternate"></link><published>2017-09-24T09:30:00+02:00</published><updated>2017-09-24T09:30:00+02:00</updated><author><name>Juan Diego Godoy Robles</name></author><id>tag:pyvideo.org,2017-09-24:pycon-es-2017/sysadmin-vs-django.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Basado en una historia real xP ‚Ä¶ se mostrar√° como es posible desarrollar una webapp con Python afrontando un deadline ajustado y sin experiencia previa en desarrollo frontend.&lt;/p&gt;
&lt;p&gt;Este proyecto se convirti√≥ en una experiencia altamente gratificante aunque no exenta de escollos, solventados con mayor o menor fortuna. Precisamente estos tips pr√°cticos ser√°n los que protagonicen la charla con un objetivo claro, intentar facilitar el transito del novato al mundo Django.&lt;/p&gt;
&lt;p&gt;Alguno de los puntos que trataremos:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;La elecci√≥n del framework con Django como opci√≥n natural.&lt;/li&gt;
&lt;li&gt;¬øC√≥mo me monto mi entorno de desarrollo? (docker-compose)&lt;/li&gt;
&lt;li&gt;¬øQu√© motor de BBDD elijo?&lt;/li&gt;
&lt;li&gt;Estructuraci√≥n del proyecto&lt;/li&gt;
&lt;li&gt;settings.py y .env&lt;/li&gt;
&lt;li&gt;Esquema de urls&lt;/li&gt;
&lt;li&gt;Autenticaci√≥n / Registro&lt;/li&gt;
&lt;li&gt;Modelos y Vistas ... tal para cual&lt;/li&gt;
&lt;li&gt;Django Rest Framework o el Santo Grial de nuestro Backend&lt;/li&gt;
&lt;li&gt;C√≥mo dise√±ar nuestro Frontend, el mundo de los templates&lt;/li&gt;
&lt;li&gt;Gesti√≥n de permisos .. cada oveja con su pareja&lt;/li&gt;
&lt;li&gt;JS, Bootstrap , ¬øeso que es lo es?&lt;/li&gt;
&lt;li&gt;Ya tengo mi web ¬øahora qu√©? Estrategias de despliegue&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Nos iremos con una app en el port√°til y con suerte quedareis tan enganchados como yo al universo Django.&lt;/p&gt;
</summary><category term="django"></category></entry><entry><title>Tu web est√° lista, ¬ølo sabe Google?</title><link href="https://pyvideo.org/pycon-es-2017/tu-web-esta-lista-lo-sabe-google.html" rel="alternate"></link><published>2017-09-23T17:00:00+02:00</published><updated>2017-09-23T17:00:00+02:00</updated><author><name>Beatriz Gonz√°lez</name></author><id>tag:pyvideo.org,2017-09-23:pycon-es-2017/tu-web-esta-lista-lo-sabe-google.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Llevas meses pele√°ndote con el c√≥digo, luchando con bugs‚Ä¶ Y por fin terminas el proyecto y lo haces p√∫blico. Pero no entra nadie...&lt;/p&gt;
&lt;p&gt;¬øSe te olvida algo? ¬øEst√°s seguro de que has hecho todo lo posible en cada fase del desarrollo para que la web se posicione en Google? ¬øHas elegido las URLs correctas o los t√≠tulos adecuados? ¬øTe acordaste de bloquear la indexaci√≥n de los entornos de prueba?&lt;/p&gt;
</summary><category term="seo"></category><category term="django"></category></entry><entry><title>Desplegando webapps con Django en Kubernetes</title><link href="https://pyvideo.org/pyday-galicia-2017/desplegando-webapps-con-django-en-kubernetes.html" rel="alternate"></link><published>2017-06-10T17:40:00+02:00</published><updated>2017-06-10T17:40:00+02:00</updated><author><name>Jos√© Corral</name></author><id>tag:pyvideo.org,2017-06-10:pyday-galicia-2017/desplegando-webapps-con-django-en-kubernetes.html</id><summary type="html"></summary><category term="pyday"></category><category term="Galicia"></category><category term="django"></category><category term="kubernetes"></category></entry><entry><title>DjangoCon 2008: Chairman Opening Keynote</title><link href="https://pyvideo.org/djangocon-us-2008/djangocon-2008-chairman-opening-keynote.html" rel="alternate"></link><published>2008-09-06T00:00:00+00:00</published><updated>2008-09-06T00:00:00+00:00</updated><author><name>Robert Lofthouse</name></author><id>tag:pyvideo.org,2008-09-06:djangocon-us-2008/djangocon-2008-chairman-opening-keynote.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Conference Chair Robert Lofthouse, Jacob Kaplan-Moss and Leslie Hawthorn welcome attendees to DjangoCon 2008.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.djangocon.org"&gt;http://www.djangocon.org&lt;/a&gt;&lt;/p&gt;
</summary><category term="Django"></category><category term="djangocon"></category><category term="djangocon2008"></category></entry><entry><title>DjangoCon 2008: Code Writing and Design</title><link href="https://pyvideo.org/djangocon-us-2008/djangocon-2008-code-writing-and-design.html" rel="alternate"></link><published>2008-09-06T00:00:00+00:00</published><updated>2008-09-06T00:00:00+00:00</updated><author><name>Malcolm Tredinnick</name></author><id>tag:pyvideo.org,2008-09-06:djangocon-us-2008/djangocon-2008-code-writing-and-design.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Speaker: Malcolm Tredinnick&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.djangocon.org"&gt;http://www.djangocon.org&lt;/a&gt;&lt;/p&gt;
</summary><category term="Django"></category><category term="djangocon"></category><category term="djangocon2008"></category></entry><entry><title>DjangoCon 2008: Django on Jython</title><link href="https://pyvideo.org/djangocon-us-2008/djangocon-2008-django-on-jython.html" rel="alternate"></link><published>2008-09-06T00:00:00+00:00</published><updated>2008-09-06T00:00:00+00:00</updated><author><name>Jim Baker</name></author><id>tag:pyvideo.org,2008-09-06:djangocon-us-2008/djangocon-2008-django-on-jython.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Speakers: Jim Baker and Leo Soto&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.djangocon.org"&gt;http://www.djangocon.org&lt;/a&gt;&lt;/p&gt;
</summary><category term="Django"></category><category term="djangocon"></category><category term="djangocon2008"></category></entry><entry><title>DjangoCon 2008: GeoDjango</title><link href="https://pyvideo.org/djangocon-us-2008/djangocon-2008-geodjango.html" rel="alternate"></link><published>2008-09-06T00:00:00+00:00</published><updated>2008-09-06T00:00:00+00:00</updated><author><name>Justin Bronn</name></author><id>tag:pyvideo.org,2008-09-06:djangocon-us-2008/djangocon-2008-geodjango.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Speaker: Justin Bronn&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.djangocon.org"&gt;http://www.djangocon.org&lt;/a&gt;&lt;/p&gt;
</summary><category term="Django"></category><category term="djangocon"></category><category term="djangocon2008"></category></entry><entry><title>DjangoCon 2008: High Performance Django</title><link href="https://pyvideo.org/djangocon-us-2008/djangocon-2008-high-performance-django.html" rel="alternate"></link><published>2008-09-06T00:00:00+00:00</published><updated>2008-09-06T00:00:00+00:00</updated><author><name>David Cramer</name></author><id>tag:pyvideo.org,2008-09-06:djangocon-us-2008/djangocon-2008-high-performance-django.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Speaker: David Cramer&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.djangocon.org"&gt;http://www.djangocon.org&lt;/a&gt;&lt;/p&gt;
</summary><category term="Django"></category><category term="djangocon"></category><category term="djangocon2008"></category></entry><entry><title>DjangoCon 2008: Inside the ORM</title><link href="https://pyvideo.org/djangocon-us-2008/djangocon-2008-inside-the-orm.html" rel="alternate"></link><published>2008-09-06T00:00:00+00:00</published><updated>2008-09-06T00:00:00+00:00</updated><author><name>Malcolm Tredinnick</name></author><id>tag:pyvideo.org,2008-09-06:djangocon-us-2008/djangocon-2008-inside-the-orm.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Speaker: Malcolm Tredinnick&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http:/www.djangocon.org"&gt;http:/www.djangocon.org&lt;/a&gt;&lt;/p&gt;
</summary><category term="Django"></category><category term="djangocon"></category><category term="djangocon2008"></category></entry><entry><title>DjangoCon 2008 Keynote: Adrian Holovaty &amp; Jacob Kaplan-Moss</title><link href="https://pyvideo.org/djangocon-us-2008/djangocon-2008-keynote-adrian-holovaty-jacob-kaplan-moss.html" rel="alternate"></link><published>2008-09-06T00:00:00+00:00</published><updated>2008-09-06T00:00:00+00:00</updated><author><name>Adrian Holovaty</name></author><id>tag:pyvideo.org,2008-09-06:djangocon-us-2008/djangocon-2008-keynote-adrian-holovaty-jacob-kaplan-moss.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Adrian Holovaty and Jacob Kaplan-Moss deliver keynote address &amp;quot;Django's Future&amp;quot;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.djangocon.org"&gt;http://www.djangocon.org&lt;/a&gt;&lt;/p&gt;
</summary><category term="Django"></category><category term="keynote"></category><category term="djangocon"></category><category term="djangocon2008"></category></entry><entry><title>DjangoCon 2008 Keynote: Cal Henderson</title><link href="https://pyvideo.org/djangocon-us-2008/djangocon-2008-keynote-cal-henderson.html" rel="alternate"></link><published>2008-09-06T00:00:00+00:00</published><updated>2008-09-06T00:00:00+00:00</updated><author><name>Cal Henderson</name></author><id>tag:pyvideo.org,2008-09-06:djangocon-us-2008/djangocon-2008-keynote-cal-henderson.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Cal Henderson delivers keynote address: &amp;quot;Why I Hate Django&amp;quot;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.djangocon.org"&gt;http://www.djangocon.org&lt;/a&gt;&lt;/p&gt;
</summary><category term="Django"></category><category term="keynote"></category><category term="djangocon"></category><category term="djangocon2008"></category></entry><entry><title>DjangoCon 2008 Keynote: Guido van Rossum</title><link href="https://pyvideo.org/djangocon-us-2008/djangocon-2008-keynote-guido-van-rossum.html" rel="alternate"></link><published>2008-09-06T00:00:00+00:00</published><updated>2008-09-06T00:00:00+00:00</updated><author><name>Guido van Rossum</name></author><id>tag:pyvideo.org,2008-09-06:djangocon-us-2008/djangocon-2008-keynote-guido-van-rossum.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Guido van Rossum, creator of Python, on Django and Google App Engine.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.djangocon.org"&gt;http://www.djangocon.org&lt;/a&gt;&lt;/p&gt;
</summary><category term="Django"></category><category term="keynote"></category><category term="djangocon"></category><category term="djangocon2008"></category></entry><entry><title>DjangoCon 2008 Keynote: Mark Ramm</title><link href="https://pyvideo.org/djangocon-us-2008/djangocon-2008-keynote-mark-ramm.html" rel="alternate"></link><published>2008-09-06T00:00:00+00:00</published><updated>2008-09-06T00:00:00+00:00</updated><author><name>Mark Ramm</name></author><id>tag:pyvideo.org,2008-09-06:djangocon-us-2008/djangocon-2008-keynote-mark-ramm.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Mark Ramm delivers keynote address: &amp;quot;Building a better framework - A Turbogears guy on what Django should learn from Zope.&amp;quot;&lt;/p&gt;
</summary><category term="Django"></category><category term="keynote"></category><category term="djangocon"></category><category term="djangocon2008"></category></entry><entry><title>DjangoCon 2008 Keynote Questions: State of Django</title><link href="https://pyvideo.org/djangocon-us-2008/djangocon-2008-keynote-questions-state-of-django.html" rel="alternate"></link><published>2008-09-06T00:00:00+00:00</published><updated>2008-09-06T00:00:00+00:00</updated><author><name>Jacob Kaplan-Moss</name></author><id>tag:pyvideo.org,2008-09-06:djangocon-us-2008/djangocon-2008-keynote-questions-state-of-django.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Jacob Kaplan-Moss &amp;amp; Adrian Holovaty answer attendee questions following their &amp;quot;State of Django&amp;quot; Keynote&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.djangocon.org"&gt;http://www.djangocon.org&lt;/a&gt;&lt;/p&gt;
</summary><category term="Django"></category><category term="keynote"></category><category term="djangocon"></category><category term="djangocon2008"></category></entry><entry><title>DjangoCon 2008 Lightning Talks</title><link href="https://pyvideo.org/djangocon-us-2008/djangocon-2008-lightning-talks.html" rel="alternate"></link><published>2008-09-06T00:00:00+00:00</published><updated>2008-09-06T00:00:00+00:00</updated><author><name>Various speakers</name></author><id>tag:pyvideo.org,2008-09-06:djangocon-us-2008/djangocon-2008-lightning-talks.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Various speakers give short talks on Django and related topics.&lt;/p&gt;
</summary><category term="lightning talks"></category><category term="Django"></category><category term="djangocon"></category><category term="djangocon2008"></category></entry><entry><title>DjangoCon 2008 Panel: Django in Journalism</title><link href="https://pyvideo.org/djangocon-us-2008/djangocon-2008-panel-django-in-journalism.html" rel="alternate"></link><published>2008-09-06T00:00:00+00:00</published><updated>2008-09-06T00:00:00+00:00</updated><author><name>Adrian Holovaty</name></author><id>tag:pyvideo.org,2008-09-06:djangocon-us-2008/djangocon-2008-panel-django-in-journalism.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Moderator:
Adrian Holovaty&lt;/p&gt;
&lt;p&gt;Panelists:
Matt Waite, Maura Chace, Matt Croydon, Ben Welsh&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.djangocon.org"&gt;http://www.djangocon.org&lt;/a&gt;&lt;/p&gt;
</summary><category term="Django"></category><category term="panel"></category><category term="djangocon"></category><category term="djangocon2008"></category></entry><entry><title>DjangoCon 2008 Panel: Django Success Stories</title><link href="https://pyvideo.org/djangocon-us-2008/djangocon-2008-panel-django-success-stories.html" rel="alternate"></link><published>2008-09-06T00:00:00+00:00</published><updated>2008-09-06T00:00:00+00:00</updated><author><name>Jacob Kaplan-Moss</name></author><id>tag:pyvideo.org,2008-09-06:djangocon-us-2008/djangocon-2008-panel-django-success-stories.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Moderator:
Jacob Kaplan-Moss&lt;/p&gt;
&lt;p&gt;Panelists:
Matt Croydon, Michael Greer, Joshua Jag Ginsberg, Leah Culver, Andy McCurdy, Jason Yan&lt;/p&gt;
</summary><category term="Django"></category><category term="panel"></category><category term="djangocon"></category><category term="djangocon2008"></category></entry><entry><title>DjangoCon 2008 Panel: Django Technical Design</title><link href="https://pyvideo.org/djangocon-us-2008/djangocon-2008-panel-django-technical-design.html" rel="alternate"></link><published>2008-09-06T00:00:00+00:00</published><updated>2008-09-06T00:00:00+00:00</updated><author><name>Michael Trier</name></author><id>tag:pyvideo.org,2008-09-06:djangocon-us-2008/djangocon-2008-panel-django-technical-design.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Moderated by Michael Trier&lt;/p&gt;
&lt;p&gt;Panelists: Jacob Kaplan-Moss, Adrian Holovaty, Simon Willison, James Bennett, Malcolm Tredinnick&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.djangocon.org"&gt;http://www.djangocon.org&lt;/a&gt;&lt;/p&gt;
</summary><category term="Django"></category><category term="panel"></category><category term="djangocon"></category><category term="djangocon2008"></category></entry><entry><title>DjangoCon 2008 Panel: Schema Evolution</title><link href="https://pyvideo.org/djangocon-us-2008/djangocon-2008-panel-schema-evolution.html" rel="alternate"></link><published>2008-09-06T00:00:00+00:00</published><updated>2008-09-06T00:00:00+00:00</updated><author><name>Michael Trier</name></author><id>tag:pyvideo.org,2008-09-06:djangocon-us-2008/djangocon-2008-panel-schema-evolution.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Moderator:
Michael Trier&lt;/p&gt;
&lt;p&gt;Panelists:
Simon Willison, Russ Keith-Magee, Andrew Godwin&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.djangocon.org"&gt;http://www.djangocon.org&lt;/a&gt;&lt;/p&gt;
</summary><category term="Django"></category><category term="panel"></category><category term="djangocon"></category><category term="djangocon2008"></category></entry><entry><title>DjangoCon 2008: Pinax</title><link href="https://pyvideo.org/djangocon-us-2008/djangocon-2008-pinax.html" rel="alternate"></link><published>2008-09-06T00:00:00+00:00</published><updated>2008-09-06T00:00:00+00:00</updated><author><name>James Tauber</name></author><id>tag:pyvideo.org,2008-09-06:djangocon-us-2008/djangocon-2008-pinax.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Speaker: James Tauber&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.djangocon.org"&gt;http://www.djangocon.org&lt;/a&gt;&lt;/p&gt;
</summary><category term="Django"></category><category term="djangocon"></category><category term="djangocon2008"></category></entry><entry><title>DjangoCon 2008: Reusable Apps</title><link href="https://pyvideo.org/djangocon-us-2008/djangocon-2008-reusable-apps.html" rel="alternate"></link><published>2008-09-06T00:00:00+00:00</published><updated>2008-09-06T00:00:00+00:00</updated><author><name>James Bennett</name></author><id>tag:pyvideo.org,2008-09-06:djangocon-us-2008/djangocon-2008-reusable-apps.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Speaker: James Bennett&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.djangocon.org"&gt;http://www.djangocon.org&lt;/a&gt;&lt;/p&gt;
</summary><category term="Django"></category><category term="djangocon"></category><category term="djangocon2008"></category></entry><entry><title>DjangoCon 2008: ReviewBoard</title><link href="https://pyvideo.org/djangocon-us-2008/djangocon-2008-reviewboard.html" rel="alternate"></link><published>2008-09-06T00:00:00+00:00</published><updated>2008-09-06T00:00:00+00:00</updated><author><name>Christian Hammond</name></author><id>tag:pyvideo.org,2008-09-06:djangocon-us-2008/djangocon-2008-reviewboard.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Speakers: Christian Hammond &amp;amp; David Trowbridge&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.djangocon.org"&gt;http://www.djangocon.org&lt;/a&gt;&lt;/p&gt;
</summary><category term="Django"></category><category term="djangocon"></category><category term="djangocon2008"></category></entry></feed>