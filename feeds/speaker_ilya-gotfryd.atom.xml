<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_ilya-gotfryd.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2019-07-27T16:30:00+00:00</updated><entry><title>Sipping the Nectar of Amazon from the Serverless Chalice</title><link href="https://pyvideo.org/pyohio-2019/sipping-the-nectar-of-amazon-from-the-serverless-chalice.html" rel="alternate"></link><published>2019-07-27T16:30:00+00:00</published><updated>2019-07-27T16:30:00+00:00</updated><author><name>Ilya Gotfryd</name></author><id>tag:pyvideo.org,2019-07-27:pyohio-2019/sipping-the-nectar-of-amazon-from-the-serverless-chalice.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;It never seems to be the right time to enter the sweet world of
microservices. Each time you use &amp;quot;serverless&amp;quot; in a conversation, it dies
right there near the water-cooler. How do you produce a POC, tests, a
build, and proper security if your teammates can’t come along? In this
talk you will learn to: build, debug, validate, test, secure, and deploy
with a build pipeline using a Python framework.&lt;/p&gt;
&lt;p&gt;You have a small piece of functionality that doesn’t elegantly fit into
various domains your existing application already covers. You’re of
course concerned about delivering that functionality to production, and
making it securely available to the end user. All of this is followed
with an “if only I could” stream of thoughts, and cautious conversations
with your Ops team that don’t go anywhere beyond hypotheticals. This is
a perfect time to look into a serverless framework like Chalice. In this
session, we will discover the flexibility, robustness, and ease of use
inherent in serverless frameworks. We will dig deeper into ways to
package production level code, including security, deployment, and load
considerations. We will also touch on alternatives and general concerns
for such architectural decisions.&lt;/p&gt;
</summary></entry></feed>