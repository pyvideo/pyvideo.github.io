<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Sat, 26 Mar 2016 00:00:00 +0000</lastBuildDate><item><title>Hybrid Recommender Systems in Python</title><link>https://pyvideo.org/pydata-amsterdam-2016/hybrid-recommender-systems-in-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyData Amsterdam 2016&lt;/p&gt;
&lt;p&gt;Systems based on collaborative filtering are the workhorse of recommender systems. They yield great results when abundant data is available. Unfortunately, their performance suffers when encountering new items or new users.&lt;/p&gt;
&lt;p&gt;In this talk, I'm going to talk about hybrid approaches that alleviate this problem, and introduce a mature, high-performance Python recommender package called LightFM.&lt;/p&gt;
&lt;p&gt;Introduction to collaborative filtering.
Works well when data is abundant (MovieLens, Amazon), but poorly when new users and items are common.
Introduce hybrid approaches: metadata embeddings.
This is implemented in LightFM.
LightFM has a couple of tricks up its sleeve: multicore training, training with superior ranking losses.&lt;/p&gt;
&lt;p&gt;Slides available here: &lt;a class="reference external" href="https://speakerdeck.com/maciejkula/hybrid-recommender-systems-at-pydata-amsterdam-2016"&gt;https://speakerdeck.com/maciejkula/hybrid-recommender-systems-at-pydata-amsterdam-2016&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Maciej Kula</dc:creator><pubDate>Sat, 26 Mar 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-03-26:pydata-amsterdam-2016/hybrid-recommender-systems-in-python.html</guid><category>lightfm</category></item></channel></rss>