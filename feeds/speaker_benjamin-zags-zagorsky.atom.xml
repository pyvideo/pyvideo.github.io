<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org - Benjamin "Zags" Zagorsky</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_benjamin-zags-zagorsky.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2024-09-24T00:00:00+00:00</updated><subtitle></subtitle><entry><title>Rapid Prototyping in Django</title><link href="https://pyvideo.org/djangocon-us-2021/rapid-prototyping-in-django.html" rel="alternate"></link><published>2021-10-23T00:00:00+00:00</published><updated>2021-10-23T00:00:00+00:00</updated><author><name>Benjamin "Zags" Zagorsky</name></author><id>tag:pyvideo.org,2021-10-23:/djangocon-us-2021/rapid-prototyping-in-django.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Building a usable prototype in a weekend is the dream of startups and established business alike.  This is the lean startup approach.  You have many ideas.  Not all of those ideas will work, and all of them take attention away from known ways of making money.  So, you need …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Building a usable prototype in a weekend is the dream of startups and established business alike.  This is the lean startup approach.  You have many ideas.  Not all of those ideas will work, and all of them take attention away from known ways of making money.  So, you need to validate those ideas as cheaply as possible.  This means you need to build MVPs (minimum viable products) as fast as possible.  But there is a danger; if you cut the wrong corners and one of these new products takes off, that MVP will be the seed for a massive product and you will be stuck with your mistakes for years to come.  This talk will show you the tools and techniques to build a rapid prototype in Django, as well as how to minimize regrets later.&lt;/p&gt;
&lt;p&gt;I'm the CTO of Zagaran, Inc., a contract software company based in Boston.  We've built dozens of Django websites.  Many of our projects have started with building a prototype on a small budget, and Django is one of our favorite technologies for doing this.  In this talk, we'll cover the following technologies and more:
* [Django's model forms](&lt;a class="reference external" href="https://docs.djangoproject.com/en/dev/topics/forms/modelforms/"&gt;https://docs.djangoproject.com/en/dev/topics/forms/modelforms/&lt;/a&gt;) (minimizes boilerplate code for HTML form rendering and validation)
* [django-crispy-forms](&lt;a class="reference external" href="https://django-crispy-forms.readthedocs.io"&gt;https://django-crispy-forms.readthedocs.io&lt;/a&gt;) (gives you out of the box styling of forms and more backend control over layout)
* [django-environ](&lt;a class="reference external" href="https://django-environ.readthedocs.io"&gt;https://django-environ.readthedocs.io&lt;/a&gt;) (improved ability to configure environment variables)
* [django-storages](&lt;a class="reference external" href="https://django-storages.readthedocs.io"&gt;https://django-storages.readthedocs.io&lt;/a&gt;) (production-grade seamless file storage)
* [social-auth-app-django](&lt;a class="reference external" href="https://python-social-auth.readthedocs.io/en/latest/configuration/django.html"&gt;https://python-social-auth.readthedocs.io/en/latest/configuration/django.html&lt;/a&gt;) (makes oAuth logins easy)
* [django-extensions](&lt;a class="reference external" href="https://django-extensions.readthedocs.io"&gt;https://django-extensions.readthedocs.io&lt;/a&gt;) (makes debugging much easier)
* [The Django Admin](&lt;a class="reference external" href="https://docs.djangoproject.com/en/dev/ref/contrib/admin/"&gt;https://docs.djangoproject.com/en/dev/ref/contrib/admin/&lt;/a&gt;) (easy creation of CRUD interfaces for internal users)&lt;/p&gt;
&lt;p&gt;See [Zagaran's Django project template](&lt;a class="reference external" href="https://github.com/zagaran/sample-django-app"&gt;https://github.com/zagaran/sample-django-app&lt;/a&gt;) for an example of these technologies in action.&lt;/p&gt;
</content><category term="DjangoCon US 2021"></category></entry><entry><title>Django Migrations: Pitfalls and Solutions</title><link href="https://pyvideo.org/djangocon-us-2022/django-migrations-pitfalls-and-solutions.html" rel="alternate"></link><published>2022-10-18T00:00:00+00:00</published><updated>2022-10-18T00:00:00+00:00</updated><author><name>Benjamin "Zags" Zagorsky</name></author><id>tag:pyvideo.org,2022-10-18:/djangocon-us-2022/django-migrations-pitfalls-and-solutions.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Django's migration system is one of its greatest strengths as a framework.  It can automatically generate migrations based on your changes to your models and can detect which migrations need to be applied to a database.  But, as the size of your development team and user base scale, there …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Django's migration system is one of its greatest strengths as a framework.  It can automatically generate migrations based on your changes to your models and can detect which migrations need to be applied to a database.  But, as the size of your development team and user base scale, there are pitfalls that you need to be aware of.  Not all migrations can be safely reversed, and trying to rewind bad migrations on a production database can cause a data disaster.  Not all migrations can be safely deployed without downtime, and trying to deploy them can give your users and your engineers a wall of errors.&lt;/p&gt;
&lt;p&gt;This talk will cover the following:
1. How to manage migrations across multiple code branches
2. Reversible migrations: how to write migrations so that they can be safely undone
3. Backwards compatible migrations: which migrations can be run as part of a deploy without causing downtime or errors
4. Handling failed migrations as part of a deployment&lt;/p&gt;
&lt;p&gt;This talk assumes familiarity with the management commands &lt;cite&gt;makemigrations&lt;/cite&gt; and &lt;cite&gt;migrate&lt;/cite&gt;.  It's likely to be most helpful for people working on a Django project where there are many branches being worked on simultaneously or for those working on applications with moderate to high uptime requirements.&lt;/p&gt;
</content><category term="DjangoCon US 2022"></category></entry><entry><title>Hosting and DevOps for Django</title><link href="https://pyvideo.org/djangocon-us-2023/hosting-and-devops-for-django.html" rel="alternate"></link><published>2023-10-16T00:00:00+00:00</published><updated>2023-10-16T00:00:00+00:00</updated><author><name>Benjamin "Zags" Zagorsky</name></author><id>tag:pyvideo.org,2023-10-16:/djangocon-us-2023/hosting-and-devops-for-django.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Production server infrastructure is a complicated beast that requires configuring and coordinating dozens of tools and services.  You have a new Django application and you're ready to deploy it; what next?  You have an existing Django application and you set up the servers yourself; what can you do better …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Production server infrastructure is a complicated beast that requires configuring and coordinating dozens of tools and services.  You have a new Django application and you're ready to deploy it; what next?  You have an existing Django application and you set up the servers yourself; what can you do better?  One mistake in a server setup can lead to major downtime or a security breach of a website.  Short of that, it can cause a lot of headaches for developers as complexity spirals out of control.&lt;/p&gt;
&lt;p&gt;I’m the co-founder CTO of [Zagaran, Inc.](&lt;a class="reference external" href="https://zagaran.com"&gt;https://zagaran.com&lt;/a&gt;), a software consulting company.  Over the past 10 years, we’ve built, maintained, and deployed dozens of Django websites, and have an extensive playbook for how to do that well.  In this talk, I draw from that playbook and go through the main ingredients for creating a robust and secure Django deployment.  For each piece, we'll look at the technologies and techniques to do it well.  We'll focus on AWS as a hosting platform, but these approaches work on any major cloud provider.&lt;/p&gt;
&lt;p&gt;This talk is aimed at anyone that is working with the servers and/or deployment process of a production Django project.  For people setting up a new set of servers for a Django project, this talk should be a good overview of the approach they need to take.  For people with an existing server setup for a Django project, this talk should help them identify issues that they had missed and ways to make their servers easier to manage.&lt;/p&gt;
&lt;p&gt;In this talk, we'll look at three main ways to host an application:
1. Platform as a Service
2. Managed Container Service
3. Kubernetes&lt;/p&gt;
&lt;p&gt;With that as framing, we'll cover the following other aspects of DevOps:
* Application hosting
* Server security
* Automating deployments
* Databases and migrations
* Secrets management
* File storage
* Server monitoring
* Server maintenance
* (and more!)&lt;/p&gt;
</content><category term="DjangoCon US 2023"></category></entry><entry><title>Fighting Homelessness with Django</title><link href="https://pyvideo.org/djangocon-us-2024/fighting-homelessness-with-django.html" rel="alternate"></link><published>2024-09-24T00:00:00+00:00</published><updated>2024-09-24T00:00:00+00:00</updated><author><name>Benjamin "Zags" Zagorsky</name></author><id>tag:pyvideo.org,2024-09-24:/djangocon-us-2024/fighting-homelessness-with-django.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;My company built CHAMP, the online application for state-aided subsidized housing for the state of Massachusetts.  We did it in Django.  This site is used to find housing for thousands of low-income and homeless applicants a year.  The site handles over 10,000 monthly users at all times of …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;My company built CHAMP, the online application for state-aided subsidized housing for the state of Massachusetts.  We did it in Django.  This site is used to find housing for thousands of low-income and homeless applicants a year.  The site handles over 10,000 monthly users at all times of day.  We've supported it in production for over five years, and deployed major new features continuously throughout that time.&lt;/p&gt;
&lt;p&gt;In this talk, we'll cover the best tricks of Django we used to build the site, as well as the biggest challenges we faced and how we solved them.  This includes:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Using Django with Vue&lt;/li&gt;
&lt;li&gt;Keeping the site running fast despite high user load and large data volumes&lt;/li&gt;
&lt;li&gt;Managing duplicate applications in the system&lt;/li&gt;
&lt;li&gt;Regularly replicating gigabytes of data to a data warehouse&lt;/li&gt;
&lt;li&gt;Migrating data from 230 organizations into the system&lt;/li&gt;
&lt;li&gt;Zero-downtime deployments&lt;/li&gt;
&lt;li&gt;And more!&lt;/li&gt;
&lt;/ul&gt;
</content><category term="DjangoCon US 2024"></category></entry><entry><title>Handling Timezones in Python</title><link href="https://pyvideo.org/pycon-us-2022/handling-timezones-in-python.html" rel="alternate"></link><published>2022-04-27T00:00:00+00:00</published><updated>2022-04-27T00:00:00+00:00</updated><author><name>Benjamin "Zags" Zagorsky</name></author><id>tag:pyvideo.org,2022-04-27:/pycon-us-2022/handling-timezones-in-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Does your code use datetimes? There's a chance it has bugs that show up every night after 7pm!&lt;/p&gt;
&lt;p&gt;Timezones and daylight savings time are problems that plague most systems. Even if your system is designed for use in a singe timezone, you still need to be aware of timezones …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Does your code use datetimes? There's a chance it has bugs that show up every night after 7pm!&lt;/p&gt;
&lt;p&gt;Timezones and daylight savings time are problems that plague most systems. Even if your system is designed for use in a singe timezone, you still need to be aware of timezones, both figuratively and literally to avoid bugs (Python datetimes that are correctly instantiated are referred to as &amp;quot;timezone aware&amp;quot;).&lt;/p&gt;
&lt;p&gt;This talk will cover: * Common mistakes with dates and datetimes in Python * How to use timezone aware datetimes in Python * Recipes for common datetime use cases * Recipes for Django&lt;/p&gt;
</content><category term="PyCon US 2022"></category></entry></feed>