<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org - Thomas Nicholas</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Mon, 11 Jul 2022 00:00:00 +0000</lastBuildDate><item><title>SciPy Tools Plenary Day 1</title><link>https://pyvideo.org/scipy-2021/scipy-tools-plenary-day-1.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">K. Jarrod Millman</dc:creator><pubDate>Mon, 12 Jul 2021 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2021-07-12:/scipy-2021/scipy-tools-plenary-day-1.html</guid><category>SciPy 2021</category></item><item><title>Enabling Petabyte-scale Ocean Data Analytics</title><link>https://pyvideo.org/scipy-2022/enabling-petabyte-scale-ocean-data-analytics.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The largest oceanographic simulations available are petabyte-scale, presenting a huge challenge when computing even relatively simple analysis functions. Furthermore, doing vector calculus with data living on a staggered grid requires specific numerical schemes to guarantee correctness.&lt;/p&gt;
&lt;p&gt;XGCM solves both these problems - it applies common vector calculus operations in a grid-aware manner, and now uses the minimum number of dask tasks. This works by applying operations atomically as a “grid ufunc”, using a protocol which generalises numpy ufuncs to specify the input and output grids for a given computation. Using this approach in conjunction with another package, xhistogram, we computed vorticity-strain histograms in different ocean basins globally.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Thomas Nicholas</dc:creator><pubDate>Mon, 11 Jul 2022 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2022-07-11:/scipy-2022/enabling-petabyte-scale-ocean-data-analytics.html</guid><category>SciPy 2022</category></item></channel></rss>