<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_bryan-catanzaro.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2012-07-18T00:00:00+00:00</updated><entry><title>Copperhead: Data Parallel Python</title><link href="https://pyvideo.org/scipy-2012/copperhead-data-parallel-python.html" rel="alternate"></link><published>2012-07-18T00:00:00+00:00</published><updated>2012-07-18T00:00:00+00:00</updated><author><name>Bryan Catanzaro</name></author><id>tag:pyvideo.org,2012-07-18:scipy-2012/copperhead-data-parallel-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Copperhead is a data parallel language embedded in Python, which aims to
provide both a productive programming environment as well as excellent
computational efficiency on heterogeneous parallel hardware. Copperhead
programs are written in a small, restricted subset of Python, using
standard constructs like map and reduce, along with traditional data
parallel primitives like scan and sort. Copperhead programs are written
in standard Python modules and interoperate with existing Python
numerical and visualization libraries such as NumPy, SciPy, and
Matplotlib. The Copperhead runtime compiles Copperhead programs to
target either CUDA-enabled GPUs or multicore CPUs using OpenMP or
Threading Building Blocks. On several example applications from Computer
Vision and Machine Learning, Copperhead programs achieve between 45-100%
of the performance of hand-coded CUDA code, running on NVIDIA GPUs. In
this talk, we will discuss the subset of Python that forms the
Copperhead language, the open source Copperhead runtime and compiler,
and selected example programs.&lt;/p&gt;
</summary><category term="hpc"></category></entry></feed>