<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Fri, 19 Feb 2010 00:00:00 +0000</lastBuildDate><item><title>Creating Rich Client Applications Using Dabo</title><link>https://pyvideo.org/pycon-us-2010/creating-rich-client-applications-using-dabo.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Creating Rich Client Applications Using Dabo&lt;/p&gt;
&lt;p&gt;Presented by Ed Leafe and Paul McNett&lt;/p&gt;
&lt;p&gt;While web applications seem to get all the attention these days, many
businesses still rely on desktop, or &amp;quot;rich client&amp;quot;, applications to run
their business. For those who prefer to do their coding with Python,
Dabo is the only full-featured desktop app framework.&lt;/p&gt;
&lt;p&gt;In this tutorial, we'll cover the general structure and approach to
application development used in Dabo, including lots of interactive work
where we will all develop applications that will be able to query a
database, display the results, allow the user to edit the data, and then
save it back to the database. We will cover the various tools available
in Dabo to help you develop your applications, and how they work
together.&lt;/p&gt;
&lt;p&gt;Intended Audience&lt;/p&gt;
&lt;p&gt;Developers with basic to intermediate Python experience.&lt;/p&gt;
&lt;p&gt;Class Outline&lt;/p&gt;
&lt;p&gt;Introduction: The thinking and design approach behind the framework. (15
min).&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Explanation of the framework design. Frameworks are great if you're
working with them, but not if you're constantly fighting them! We'll
outline the various parts of the framework, and how they work
together to create applications.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Building an app in 30 seconds. (15 min)&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;You can use the AppWizard to create a completely functional CRUD
application in less than 30 seconds. We'll demonstrate how to use the
AppWizard, and how you can build on and further customize the
application it creates.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The primary non-UI classes in Dabo (15 min)&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;There are lots of classes in Dabo, but only a few main ones that are
used in every app. This section will cover them: the application
class, the business object class, and the DBAPI data adapter class.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Introduction to the Dabo Tools (30 min)&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;One of the benefits of a framework is that the mundane, repetitive
tasks are handled by the framework, leaving you to focus on the
creative parts of app development. In this section we'll discuss
several of the visual tools available to help you create Dabo
applications faster and easier.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Developing an actual application, part 1 (15 min)&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Talk is fine, but here's where we begin creating an actual
application. Attendees will learn how to create a new Dabo app, along
with database connections, menus and a main form. In the second half
of the tutorial we'll use this app as the basis for more complex
development.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;REFRESHMENT BREAK&lt;/p&gt;
&lt;p&gt;Overview of UI Classes (30 min)&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;This is where we talk about the &amp;quot;rich&amp;quot; in &amp;quot;rich client&amp;quot;. Dabo has a
full set of UI widgets, based on the wxPython toolkit. We've taken
those widget classes and added a consistent interface, so that the
developer uses the same properties and methods to accomplish the same
thing in all the classes, making developing smoother and more
intuitive. We'll cover all of the most-commonly used controls, and
how to work with them.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Developing an actual application, part 2 (30 min)&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The basic app created in the first half was an impressive result for
such a short amount of time, but here's where we'll start to make it
more interesting. We'll create several related business objects, bind
them to the UI elements, and have it all work seamlessly with a
database. After that, we'll show how to create and run reports
against that same data. We'll then wrap up by explaining how to
deploy your finished application.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Rich Client Web Applications with Dabo (10 min)&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;HTML web apps are trying to get a richer client experience through
the increased use and sophistication of Javascript-based tools.
That's great if you like spending your time in Javascript, but not so
great if you are a Python dev. We take the opposite approach: taking
our rich-client apps and deploying them over the web so that users
can run them without first installing the app.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Future plans for Dabo (5 min)&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Dabo is being actively developed, and we have plans for future
enhancements that we'll cover here.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Wrap-up and Final Questions (15 min)&lt;/p&gt;
&lt;p&gt;Requirements&lt;/p&gt;
&lt;p&gt;Students do not need to have a computer, but they will not get as much
out of the session if they cannot actively participate in creating the
example applications. They should have the following prerequisites
installed, using the latest available stable releases except where
specific version numbers are indicated:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Python 2.5.4&lt;/li&gt;
&lt;li&gt;wxPython 2.8.10.1 unicode&lt;/li&gt;
&lt;li&gt;MySQLdb&lt;/li&gt;
&lt;li&gt;reportlab&lt;/li&gt;
&lt;li&gt;Python Imaging Library&lt;/li&gt;
&lt;li&gt;Dabo 0.9.2&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ed Leafe</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/creating-rich-client-applications-using-dabo.html</guid><category>dabo</category><category>pycon</category><category>pycon2010</category><category>tutorial</category></item><item><title>Dude, Where's My Database? (#133)</title><link>https://pyvideo.org/pycon-us-2010/dude-wheres-my-database-133.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Dude, Where's My Database?&lt;/p&gt;
&lt;p&gt;Presented by Eric Florenzano (Django)&lt;/p&gt;
&lt;p&gt;There are so many great open source databases out on the market right
now-- we're really in the golden age of databases. Fortunately, Python
can talk to virtually all of them. With so many databases at our
disposal, how do we choose which one to use for our particular use case?&lt;/p&gt;
&lt;p&gt;This talk will go over the many different classes of databases,
introduce some of the particular implementations for each class of
database, and describe the strengths and weaknesses of each. By weighing
the pros and cons of each type of database, the speaker hopes to dispel
the many rumors and misconceptions that people have about what's out
there today.&lt;/p&gt;
&lt;p&gt;[VIDEO HAS ISSUES: Audio cuts out at about 20 seconds in, then gets out
of sync until around 3:10.]&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Eric Florenzano</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/dude-wheres-my-database-133.html</guid><category>databases</category><category>pycon</category><category>pycon2010</category></item><item><title>Evolving Your Framework Under Fire (#150)</title><link>https://pyvideo.org/pycon-us-2010/evolving-your-framework-under-fire-150.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Evolving your framework under fire&lt;/p&gt;
&lt;p&gt;Presented by Tres Seaver (Agendaless Consulting, Inc.)&lt;/p&gt;
&lt;p&gt;Writing frameworks is fun, which is why we have so many of them in the
Python web development world. Making your shiny new framework stand up
under the load of a demanding application can be painful, but can lead
to substantial improvements.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Tres Seaver</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/evolving-your-framework-under-fire-150.html</guid><category>framework</category><category>pycon</category><category>pycon2010</category></item><item><title>How Python is guiding infrastructure construction in Africa (#84)</title><link>https://pyvideo.org/pycon-us-2010/how-python-is-guiding-infrastructure-construction.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;How Python is guiding infrastructure construction in Africa&lt;/p&gt;
&lt;p&gt;Presented by Roy Hyunjin Han (InvisibleRoads)&lt;/p&gt;
&lt;p&gt;A whirlwind tour of the roles of different Python modules in the
architecture of a geospatial infrastructure planning system.&lt;/p&gt;
&lt;p&gt;We used Python to transform an elaborate, multistep process for finding
and connecting households in villages into a single, streamlined
planning experience. I'll explain how Python's freely available
libraries empowered a small team of developers under a minimal budget
and timeframe. Now just imagine if we had to do the same thing with
Java.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Roy Hyunjin Han</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/how-python-is-guiding-infrastructure-construction.html</guid><category>africa</category><category>casestudy</category><category>infrastructure</category><category>pycon</category><category>pycon2010</category></item><item><title>Keynote: State of CPython</title><link>https://pyvideo.org/pycon-us-2010/keynote-state-of-cpython.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Uses the Twitter feed for PyCon and a floor mic for a Q&amp;amp;A; session
covering the state of CPython and what's in the future.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Guido van Rossum</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/keynote-state-of-cpython.html</guid><category>cpython</category><category>pycon</category><category>pycon2010</category></item><item><title>Pycon 2010: 508 and You: Taking the Pain out of Accessibility (#119)</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--508-and-you--taking-the-pain-out-of-a.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;508 and You: Taking the Pain out of Accessibility&lt;/p&gt;
&lt;p&gt;Presented by Katie A Cunningham (NASA/Indyne)&lt;/p&gt;
&lt;p&gt;Thinking about scoring a government contract, but haven't heard of 508
compliance yet? Interested in making your site accessible to people with
disabilities? Never thought about compliance, but want to know why it's
a good idea?&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Katie Cunningham</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--508-and-you--taking-the-pain-out-of-a.html</guid><category>accessibility</category><category>pycon</category><category>pycon2010</category></item><item><title>Actors: What, Why, and How (#161)</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--actors--what--why--and-how---161.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Actors: What, Why and How&lt;/p&gt;
&lt;p&gt;Presented by Donovan Preston&lt;/p&gt;
&lt;p&gt;Since the dawn of concurrency research, there have been two camps:
shared everything, and shared nothing. Most modern applications use
threads for concurrency, a shared everything architecture.&lt;/p&gt;
&lt;p&gt;Actors, however, use a shared nothing architecture where lightweight
processes communicate with each other using message passing. Actors can
change their state, create a new Actor, send a message to any Actor it
has the Address of, and wait for a specific kind of message to arrive in
it's mailbox.&lt;/p&gt;
&lt;p&gt;We will discuss the benefits of using the Actor architecture and
strategies for implementing an Actor system in Python.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://bitbucket.org/fzzzy/python-%20actors/"&gt;http://bitbucket.org/fzzzy/python-actors/&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Donovan Preston</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--actors--what--why--and-how---161.html</guid><category>concurrency</category><category>eventlet</category><category>infrastructure</category><category>pycon</category><category>pycon2010</category><category>rest</category><category>scaling</category><category>wsgi</category></item><item><title>Advanced String Formatting (#117)</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--advanced-string-formatting---117.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Advanced String Formatting&lt;/p&gt;
&lt;p&gt;Eric Smith (True Blade Systems, Inc.)&lt;/p&gt;
&lt;p&gt;Advanced string formatting (str.format, described in PEP 3101) was added
in Python 2.6 and 3.0 as a more powerful, flexible, and extensible
alternative to the existing %-based string formatting.&lt;/p&gt;
&lt;p&gt;This talk will discuss how to use str.format, how your own types can
benefit from it, its strengths and weaknesses, how to migrate to it, and
advanced topics such as implementing your own templating language.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Unknown</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--advanced-string-formatting---117.html</guid><category>formatting</category><category>pycon</category><category>pycon2010</category></item><item><title>An Underwater Python: Tortuga the Python Powered Robot (#175)</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--an-underwater-python--tortuga-the-pyt.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;An Underwater Python: Tortuga the Python Powered Robot&lt;/p&gt;
&lt;p&gt;Presented by Joseph Lisee (Robotics &amp;#64; Maryland)&lt;/p&gt;
&lt;p&gt;Learn about Tortuga, the python powered Autonomous Underwater Vehicle
(AUV) developed by Robotics &amp;#64; Maryland (&lt;a class="reference external" href="http://ram.umd.edu"&gt;http://ram.umd.edu&lt;/a&gt;). See how
python provides a flexible and efficient way to build the software that
commands, simulates and controls Tortuga. Also learn about the trials,
tribulations, and glory experienced developing, competing, losing, and
winning with Tortuga in AUVSI AUV Competition
(&lt;a class="reference external" href="http://www.auvsi.org/competitions/water.cfm"&gt;http://www.auvsi.org/competitions/wate
r.cfm&lt;/a&gt;).&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Joseph Lisee</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--an-underwater-python--tortuga-the-pyt.html</guid><category>pycon</category><category>pycon2010</category><category>tortuga</category></item><item><title>Pycon 2010: Analysis: The other kind of testing (#185)</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--analysis--the-other-kind-of-testing--.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Analysis: The other kind of testing&lt;/p&gt;
&lt;p&gt;Presented by Bob Ippolito&lt;/p&gt;
&lt;p&gt;Software testing helps verify that your code meets a specification, but
not how to improve the specification. How can you stay competitive when
most of the big names today are using analysis to guide product
evolution? Level the playing field and make better products by learning
how to design experiments, collect data, make measurements, and optimize
your specifications.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Bob Ippolito</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--analysis--the-other-kind-of-testing--.html</guid><category>analysis</category><category>pycon</category><category>pycon2010</category><category>testing</category></item><item><title>Building Leafy Chat, DjangoDose, and Hurricane, Lessons Learned on the Real-Time Web with Python (#24)</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--building-leafy-chat--djangodose--and-.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Building Leafy Chat, DjangoDose, and Hurricane. Lessons learned on the
real- time web with Python&lt;/p&gt;
&lt;p&gt;Presented by Alex Gaynor (Eldarion)&lt;/p&gt;
&lt;p&gt;Websites are getting increasingly dynamic and realtime in order to
compete with desktop applications. This talk is an examination of 3
websites/tools I've built, all using Python. I'm going to try to explain
what we did to build these, and how you can do the same.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alex Gaynor</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--building-leafy-chat--djangodose--and-.html</guid><category>pycon</category><category>pycon2010</category><category>realtime</category><category>web</category></item><item><title>Cooperative Multitasking with Twisted: Getting Things Done Concurrently. (#11)</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--cooperative-multitasking-with-twisted.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Cooperative Multitasking with Twisted: Getting Things Done Concurrently&lt;/p&gt;
&lt;p&gt;Presented by David A Reid&lt;/p&gt;
&lt;p&gt;Twisted is a framework for building asynchronous networking
applications. It also provides powerful tools for writing non-blocking
non-network code, tools which are vital for building real large scale
applications in Twisted. I hope to give a comprehensive overview of
these tools to help the intermediate Twisted user get things done
concurrently.&lt;/p&gt;
&lt;p&gt;[VIDEO HAS ISSUES: Picture out of focus at the beginning]&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">David A Reid</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--cooperative-multitasking-with-twisted.html</guid><category>pycon</category><category>pycon2010</category><category>twisted</category></item><item><title>Creating RESTful Web services with restish (#17)</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--creating-restful-web-services-with-re.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Creating RESTful Web Services with restish&lt;/p&gt;
&lt;p&gt;Presented by Grig Gheorghiu&lt;/p&gt;
&lt;p&gt;Roy Fielding described REST in his Ph.D. dissertation in the year 2000.
Almost ten years later, Web developers are still confused as to how to
apply the REST principles in their applications. Examples of poorly
designed 'REST' APIs abound, and I will make use of them in my talk.&lt;/p&gt;
&lt;p&gt;In this presentation, I will give an overview of REST and its design
principles, and I will show a concrete example of a RESTful Web service
implemented in the restish framework. My examples will include CRUD
operations, as well as transactions. I will also show how to consume
this Web service using both httplib2 and curl. I would be remiss if I
didn't describe ways to test the Web service with WebTest and twill.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Grig Gheorghiu</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--creating-restful-web-services-with-re.html</guid><category>pycon</category><category>pycon2010</category><category>rest</category><category>restish</category><category>testing</category><category>web</category></item><item><title>Cross platform application development and distribution (#116)</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--cross-platform-application-developmen.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Cross platform application development and distribution&lt;/p&gt;
&lt;p&gt;Presented by Stani Michiels and Nadia Alramli&lt;/p&gt;
&lt;p&gt;You think Python gives you native cross platform applications for free?
Think twice. Are you interested in distributing your application to
other platforms but not sure how?&lt;/p&gt;
&lt;p&gt;We will give tips and examples on how to enhance the native feel of your
application: notifications, registration of file types and more. The
talk will also help you to avoid common pitfalls and provides solutions
for designing cross platform user interfaces. (Although we use wxPython
as an example, the principles are valid for other toolkits as well.)
We'll show you where to start if you want to distribute your application
to different platforms, briefly discussing tools like py2exe, py2app and
Debian/Ubuntu packaging ecosystem. This talk is based on our experience
from developing Phatch (Photo Batch Processor) and SPE (Python Editor).&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nadia Alramli</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--cross-platform-application-developmen.html</guid><category>crossplatform</category><category>packaging</category><category>py2app</category><category>py2exe</category><category>pycon</category><category>pycon2010</category><category>wxpython</category></item><item><title>Customizing your editor for maximum productivity (#171)</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--customizing-your-editor-for-maximum-p.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Customizing your editor for maximum productivity&lt;/p&gt;
&lt;p&gt;Presented by Justin Lilly&lt;/p&gt;
&lt;p&gt;This will be an overview of the sorts of things that editors can offer
to make your programming life easier. It will also include specifics of
how to get these features working in a basic editor. (Vim or Emacs, yet
undecided)&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Justin Lilly</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--customizing-your-editor-for-maximum-p.html</guid><category>emacs</category><category>pycon</category><category>pycon2010</category><category>vim</category></item><item><title>Dealing with unsightly data in the real world. (#156)</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--dealing-with-unsightly-data-in-the-re.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Dealing with unsightly data in the real world&lt;/p&gt;
&lt;p&gt;Presented by Alexander Dutton&lt;/p&gt;
&lt;p&gt;Drawing on experiences writing &lt;a class="reference external" href="http://m.ox.ac.uk/"&gt;http://m.ox.ac.uk/&lt;/a&gt;, we'll explore the art
of getting data out of unhelpful systems. We'll start with working out
how to interact with a system, move on to techniques for parsing the
data it gives you, and round off by implementing a shinier interface
over the top.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Dutton</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--dealing-with-unsightly-data-in-the-re.html</guid><category>pycon</category><category>pycon2010</category><category>scraping</category><category>web</category></item><item><title>Debating 'til Dawn: Topics to keep you up all night (#183)</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--debating---39-til-dawn--topics-to-kee.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Debating 'til Dawn: Topics to keep you up all night&lt;/p&gt;
&lt;p&gt;Mike C. Fletcher (VRPlumber Consulting Inc.)&lt;/p&gt;
&lt;p&gt;PyCon is about staying up all night hacking. When you're tired, you
don't sleep, you debate ideas with your sprint-mates! This presentation
will attempt to condense the best of the last few years of PyGTA into a
30-minute jumping off point full of wild assertions, unreasonable
assumptions, and just plain wrong-headed ideas to kick-start those
heated discussions that just keep going long into the night. What are
your programming mantras? What million-dollar ideas do you have to
improve Python? Should there be programmer liability? Is there art in
programming and should there be? Are you a cowboy coder or an
straight-laced engineer? Is PyCon really about staying up all night
discussing ideas? We'll have a feedback channel to share your thoughts,
we'll keep it moving, and we'll see if we can't make this the most
sleepless PyCon yet.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Unknown</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--debating---39-til-dawn--topics-to-kee.html</guid><category>pycon</category><category>pycon2010</category></item><item><title>Deconstruction of an Object (#62)</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--deconstruction-of-an-object---62.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Deconstruction of an Object&lt;/p&gt;
&lt;p&gt;Presented by Jeff Rush (Tau Productions Inc.)&lt;/p&gt;
&lt;p&gt;An incremental deconstruction of a class definition identifying the key
elements such as layered namespaces, common attributes, lifecycle and
access controls. We'll also look at calling into, out of and through an
object, making classes extensible and various object behaviors like
containment, sequence, iteration and arithmetic.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jeff Rush</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--deconstruction-of-an-object---62.html</guid><category>deconstruction</category><category>pycon</category><category>pycon2010</category></item><item><title>Decorators From Basics to Class Decorators to Decorator Libraries (#138)</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--decorators-from-basics-to-class-decor.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Decorators from Basics to Class Decorators to Decorator Libraries&lt;/p&gt;
&lt;p&gt;Presented by Charles Merriam&lt;/p&gt;
&lt;p&gt;Decorators simplify design and improve readability and reliability. This
tutorial starts from the beginning with basic decorators, showing how
simple tasks like restricting administration functions are clearer and
more readable with decorators, and exactly how the decorators work. A
simple library of decorators for tracing, logging, and caching results
is presented. This leads into writing your own decorators and
parameterized decorators either from scratch or by using libraries like
Simionato's Decorator Decorator and &amp;quot;&amp;#64;call_before(fn)&amp;quot;. Finally, using
Python 3.x class decorators in place of metaclasses for most common
dictionary modifications is covered.&lt;/p&gt;
&lt;p&gt;[VIDEO HAS ISSUES: Missing about 1 minute at start, because of technical
problems.]&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Charles Merriam</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--decorators-from-basics-to-class-decor.html</guid><category>decorators</category><category>pycon</category><category>pycon2010</category></item><item><title>Demystifying Non-Blocking and Asynchronous I/O (#164)</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--demystifying-non-blocking-and-asynchr.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Demystifying non-blocking and asynchronous I/O&lt;/p&gt;
&lt;p&gt;Presented by Peter A Portante&lt;/p&gt;
&lt;p&gt;We will first define what blocking, non-blocking, synchronous and
asynchronous I/O are under the POSIX interfaces. We'll cover how and
when these four types of I/O should be used, and their individual
effects on a Python based application. The notion of concurrency will be
discussed by comparing a simple threaded blocking I/O application to a
simple single threaded non-blocking I/O application by walking the
attendees through the python code for those applications.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter A Portante</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--demystifying-non-blocking-and-asynchr.html</guid><category>asynchronous</category><category>pycon</category><category>pycon2010</category></item><item><title>Designing to Scale: The Story of ShootQ (#5)</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--designing-to-scale--the-story-of-shoo.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Designing to Scale: The story of ShootQ&lt;/p&gt;
&lt;p&gt;Jonathan LaCour (ShootQ)&lt;/p&gt;
&lt;p&gt;ShootQ is a web-based studio management solution for professional
photography studios, designed to automate and simplify the task of
running a small business. In this talk, Jonathan LaCour, the CTO of
ShootQ, hopes to share his experience designing a web application that
can scale up to meet the demands of a rapidly growing customer base. The
talk will cover a variety of topics including TurboGears 2.0, WSGI,
horizontal and vertical scaling, database replication, load balancing,
deployment, and more.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Unknown</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--designing-to-scale--the-story-of-shoo.html</guid><category>deployment</category><category>loadbalancing</category><category>pycon</category><category>pycon2010</category><category>replication</category><category>scaling</category><category>turbogears</category><category>wsgi</category></item><item><title>Distributed Programming with Pyro (#7)</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--distributed-programming-with-pyro---7.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Distributed Programming with Pyro&lt;/p&gt;
&lt;p&gt;Presented by Alfredo Deza&lt;/p&gt;
&lt;p&gt;Create distributed code that communicates trivially over the network
with objects that answer as if they were local.&lt;/p&gt;
&lt;p&gt;Send, receive and manage data with this powerful library. Presentation
will include real life example for restarting a load balanced web
instance running two Apache web servers and a MySQL database.&lt;/p&gt;
&lt;p&gt;Although Python allows you to perform simple network operations, Pyro
creates a nice layer between core networking essentials and your code,
allowing you to concentrate more in developing your application.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alfredo Deza</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--distributed-programming-with-pyro---7.html</guid><category>pycon</category><category>pycon2010</category><category>pyro</category></item><item><title>Diversity as a Dependency (#49)</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--diversity-as-a-dependency---49.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Diversity as a Dependency&lt;/p&gt;
&lt;p&gt;Presented by Anna M Ravenscroft (PSF)&lt;/p&gt;
&lt;p&gt;The PSF recently adopted a diversity statement. While some argue that we
should do this just because it's &amp;quot;the right thing to do&amp;quot;, others
question why we, as a technical community, should even worry about
diversity. This talk addresses the diversity question, not in moralistic
or ethical terms, but in pragmatic ones. Studies on creativity and
productivity demonstrate the potential benefits of diversity for the
Python community. Making Python the best language it can be is not
merely helped by increasing diversity, but may be dependent on
diversity.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Anna M Ravenscroft</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--diversity-as-a-dependency---49.html</guid><category>community</category><category>psf</category><category>pycon</category><category>pycon2010</category></item><item><title>Django Deployment Workshop</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--django-deployment-workshop.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Django Deployment Workshop&lt;/p&gt;
&lt;p&gt;Presented by Jacob Kaplan-Moss&lt;/p&gt;
&lt;p&gt;So you've written a Django site... now what? Writing the application is
just the beginning; now you've got to put it into production! In this
hands-on workshop we'll walk through the creation of a full Django
deployment environment running on a cluster of (virtual) machines.&lt;/p&gt;
&lt;p&gt;This class will introduce students to a wide variety of technologies,
including Amazon's EC2 and S3, Fabric, Varnish, nginx, mod_wsgi,
memcached, PostgreSQL, pgpool, pg_standby, and more.&lt;/p&gt;
&lt;p&gt;By the end of the class, each student will have created an environment
featuring:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Multiple levels of caching and load balancing.&lt;/li&gt;
&lt;li&gt;Multiple web application servers.&lt;/li&gt;
&lt;li&gt;Shared media servers.&lt;/li&gt;
&lt;li&gt;Redundant replicated database servers.&lt;/li&gt;
&lt;li&gt;Separate caching servers.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We'll create this whole stack on Amazon EC2 virtual machines, so
students will be able to take home a complete copy of all the deployment
configuration for future review at their leisure.&lt;/p&gt;
&lt;p&gt;Note: the example application used in this class with be a Django site,
and the class assumes at least a moderate comfort level with Django.
However, the tools and techniques apply just as well to other Python web
frameworks, so users of other tools will likely be able to follow along
fairly easily.&lt;/p&gt;
&lt;div class="section" id="intended-audience"&gt;
&lt;h4&gt;Intended Audience&lt;/h4&gt;
&lt;p&gt;Intermediate to advanced Django users with sites nearing or in
production. Python developers using other web frameworks will likely be
able to follow along -- see the note in the summary, above.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="class-outline"&gt;
&lt;h4&gt;Class Outline&lt;/h4&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Introduction: the deployment question&lt;/li&gt;
&lt;li&gt;Application server: mod_wsgi&lt;/li&gt;
&lt;li&gt;Database server: PostgreSQL&lt;/li&gt;
&lt;li&gt;Automated deployment with Fabric&lt;/li&gt;
&lt;li&gt;Multiple web servers; load balancing with nginx&lt;/li&gt;
&lt;li&gt;Adding memcached&lt;/li&gt;
&lt;li&gt;Database connection middleware: pgpool&lt;/li&gt;
&lt;li&gt;Database redundancy: warm standby&lt;/li&gt;
&lt;li&gt;Upstream caching: Varnish&lt;/li&gt;
&lt;li&gt;Final load testing: how'd we do?&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="requirements"&gt;
&lt;h4&gt;Requirements&lt;/h4&gt;
&lt;p&gt;Students will need a computer and Amazon EC2 and S3 accounts, and will
be asked to familiarize themselves with the process of starting and
stopping EC2 virtual machines before the class.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://us.pycon.org/20%2010/tutorials/kaplanmoss_django"&gt;http://us.pycon.org/2010/tutorials/kaplanmoss_django/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jacob Kaplan-Moss</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--django-deployment-workshop.html</guid><category>pycon</category><category>pycon2010</category></item><item><title>Django in Depth</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--django-in-depth.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Django In Depth&lt;/p&gt;
&lt;p&gt;Presented by James Bennett&lt;/p&gt;
&lt;p&gt;Most books, tutorials and other documentation for Django take a
high-level approach to its components and APIs, and so barely scratch
the surface of the framework. In this tutorial, however, we'll take a
detailed look under the hood, covering everything from the guts of the
ORM to the innards of the template system to how the admin interface
really works.&lt;/p&gt;
&lt;p&gt;Whether you're the newest of newbies or the most seasoned of application
developers, you'll come away with a deeper knowledge of Django, and a
plethora of new tips and tricks you can use in your own applications.&lt;/p&gt;
&lt;p&gt;Intended Audience&lt;/p&gt;
&lt;p&gt;Beginning to intermediate users of the Django web framework.&lt;/p&gt;
&lt;p&gt;Class Outline&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Introduction: going beyond Django's documentation&lt;/li&gt;
&lt;li&gt;Under the hood of the ORM&lt;/li&gt;
&lt;li&gt;Forms and validation&lt;/li&gt;
&lt;li&gt;Inside the template system&lt;/li&gt;
&lt;li&gt;How Django processes requests&lt;/li&gt;
&lt;li&gt;Understanding the view layer&lt;/li&gt;
&lt;li&gt;The admin interface, inside and out&lt;/li&gt;
&lt;li&gt;Q&amp;amp;A;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;[VIDEO HAS ISSUES: Cam frezz from time to time]&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">James Bennett</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--django-in-depth.html</guid><category>class</category><category>pycon</category><category>pycon2010</category></item><item><title>Easy command-line applications with cmd and cmd2 (#153)</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--easy-command-line-applications-with-c.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Easy command-line applications with cmd and cmd2&lt;/p&gt;
&lt;p&gt;Presented by Catherine Devlin (IntelliTech Systems)&lt;/p&gt;
&lt;p&gt;The Python Standard Library's cmd module makes it absurdly simple to
write command-line interpreters - non-graphical programs that
communicate with users interactively through a simple text interface.
The third-party cmd2 module adds high-powered &amp;quot;batteries&amp;quot; to
applications written for cmd.&lt;/p&gt;
&lt;p&gt;This presentation teaches attendees how to easily make their own
powerful command-line interpreters with cmd and cmd2. It also describes
the tricks cmd2 uses for some of its more interesting functionality so
that they can implement them in their own programs (even unrelated
ones). It ends with a brief demonstration of sqlpython, a cmd2-based
application that improves on existing ad-hoc SQL applications.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Catherine Devlin</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--easy-command-line-applications-with-c.html</guid><category>cmd</category><category>cmd2</category><category>pycon</category><category>pycon2010</category></item><item><title>Ecommerce in Python: Introduction to Satchmo and GetPaid (#146)</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--ecommerce-in-python--introduction-to-.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Ecommerce in Python: Introduction to Satchmo and GetPaid&lt;/p&gt;
&lt;p&gt;Presented by Christopher Johnson (ifPeople); Chris Moffitt (Satchmo)&lt;/p&gt;
&lt;p&gt;The world of open source ecommerce is dominated by PHP-based solutions.
However, in the past few years, there has been significant progress in
building robust python-based alternatives. This discussion will cover 2
different python approaches. Satchmo is based on the Django framework
and GetPaid is a framework for credit card processing in Plone. These
solutions share a similar philosophy and approach but can be used in
very different ways. This discussion will increase awareness of these
applications, feature successful projects, explain how they can be used
in your projects, and help you connect with the open source community.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Moffitt</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--ecommerce-in-python--introduction-to-.html</guid><category>pycon</category><category>pycon2010</category><category>satchmo</category></item><item><title>Eventlet: Asynchronous I/O with a synchronous interface (#141)</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--eventlet--asynchronous-i-o-with-a-syn.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Eventlet: Asynchronous I/O with a synchronous interface&lt;/p&gt;
&lt;p&gt;Presented by Donovan Preston&lt;/p&gt;
&lt;p&gt;Network servers which scale to thousands of simultaneous connections
have always been possible in Python thanks to libraries such as asyncore
and twisted. More recently, FriendFeed's new open source project Tornado
has stirred debate in this area. These libraries allow a Python process
to scale to many simultaneous connections using non-blocking I/O (also
known as asynchronous I/O). However these projects require that the
programmer learn a custom API to abstract away the complexities of using
a callback-style API.&lt;/p&gt;
&lt;p&gt;Eventlet uses greenlet, which provides coroutines as described in &amp;quot;The
Art of Computer Programming&amp;quot;, to implement efficient cooperative
concurrency while retaining synchronous semantics. Eventlet also
provides an implementation of the standard library's socket module. Code
written to use Python's standard socket library can be transparently
converted to use nonblocking I/O and green threads with eventlet. This
leads to much greater code reuse and programmer efficiency.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.eventlet.net/"&gt;http://www.eventlet.net/&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Donovan Preston</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--eventlet--asynchronous-i-o-with-a-syn.html</guid><category>asynchronous</category><category>eventlet</category><category>greenlet</category><category>i/o</category><category>pycon</category><category>pycon2010</category></item><item><title>Extending Java Applications with Jython (#65)</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--extending-java-applications-with-jyth.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Extending Java Applications with Jython&lt;/p&gt;
&lt;p&gt;Presented by Frank J Wierzbicki (Jython)&lt;/p&gt;
&lt;p&gt;Jython is an implementation of Python for the JVM. This talk covers the
options available for integrating Jython and Java code, especially Java
calling into Jython, since this is the trickier case. This talk will
also cover some Java specific deployment options, such as deploying your
Jython application as a jar file. Jar files allow you to package
Java/Jython applications into a single archive. In many environments a
user can click on a jar file to launch the contained application.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Frank J Wierzbicki</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--extending-java-applications-with-jyth.html</guid><category>jython</category><category>pycon</category><category>pycon2010</category></item><item><title>Faster Python Programs Through Optimization</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--faster-python-programs-through-optimi.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Faster Python Programs Through Optimization&lt;/p&gt;
&lt;p&gt;Mike MÃ¼ller&lt;/p&gt;
&lt;p&gt;Although Python programs may be slow for certain types of tasks, there
are many different ways to improve performance. This tutorial will
introduce optimization strategies and demonstrate techniques to
implement them. Another of the objectives of this course is to give
participants the ability to decide what might be the optimal solution
for a certain performance problem. Participants are strongly recommended
to bring laptops because all techniques are introduced with examples and
exercises.&lt;/p&gt;
&lt;p&gt;Intended Audience&lt;/p&gt;
&lt;p&gt;Python programmers with intermediate knowledge.&lt;/p&gt;
&lt;p&gt;Class Outline&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;How Fast is Fast Enough?&lt;/li&gt;
&lt;li&gt;Optimization Guidelines&lt;ul&gt;
&lt;li&gt;Premature optimization&lt;/li&gt;
&lt;li&gt;Optimization rules&lt;/li&gt;
&lt;li&gt;Seven steps for incremental optimization&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Optimization strategy&lt;ul&gt;
&lt;li&gt;Measuring in stones&lt;/li&gt;
&lt;li&gt;Profiling CPU usage&lt;/li&gt;
&lt;li&gt;Profiling memory usage&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Algorithms and Anti-patterns&lt;ul&gt;
&lt;li&gt;String Concatenation&lt;/li&gt;
&lt;li&gt;List and Generator Comprehensions&lt;/li&gt;
&lt;li&gt;The Right Data Structure&lt;/li&gt;
&lt;li&gt;Caching&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The Example&lt;/li&gt;
&lt;li&gt;Testing Speed&lt;/li&gt;
&lt;li&gt;Pure Python&lt;/li&gt;
&lt;li&gt;Meet Psyco, the JIT&lt;/li&gt;
&lt;li&gt;Numpy for Numeric Arrays&lt;/li&gt;
&lt;li&gt;Using multiple CPUs with pyprocessing/multiprocessing&lt;/li&gt;
&lt;li&gt;Combination of optimization strategies&lt;/li&gt;
&lt;li&gt;Results of Different Example Implementations&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The following third-party packages are needed:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;psyco (version 1.5.2 or higher)&lt;/li&gt;
&lt;li&gt;numpy (version 1.2 or higher)&lt;/li&gt;
&lt;li&gt;pyprocessing (2.5 or lower only)&lt;/li&gt;
&lt;li&gt;Guppy_PE framework&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Unknown</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--faster-python-programs-through-optimi.html</guid><category>optimization</category><category>pycon</category><category>pycon2010</category><category>tutorial</category></item><item><title>Hacking the Social Web with Python</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--hacking-the-social-web-with-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Open Stack: Hacking the Social Web&lt;/p&gt;
&lt;p&gt;Presented by David Recordon/Mike Malone&lt;/p&gt;
&lt;p&gt;In this tutorial we'll explain what the Open Stack is and how you can
use tools like OAuth, OpenID, and Portable Contacts to integrate your
app with the rest of the web. We'll cover each component in depth, and
walk through example Python implementations for a variety of scenarios.&lt;/p&gt;
&lt;p&gt;Intended Audience&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Beginning to intermediate Python programmers interested in Web
Development&lt;/li&gt;
&lt;li&gt;Python programmers who provide or consumer web service APIs&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Class Outline&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Intro: what is the &amp;quot;Open Stack&amp;quot;&lt;/li&gt;
&lt;li&gt;Working with HTTP in Python&lt;/li&gt;
&lt;li&gt;Working with responses: JSON, XML, Atom, RSS, HTML&lt;/li&gt;
&lt;li&gt;Decentralized identity with OpenID&lt;ul&gt;
&lt;li&gt;Implementing a Provider in Python&lt;/li&gt;
&lt;li&gt;Implementing a Relying Party in Python&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Delegated authorization with OAuth&lt;ul&gt;
&lt;li&gt;Implementing a Provider in Python&lt;/li&gt;
&lt;li&gt;Implementing a Consumer in Python&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Exchanging contacts with Portable Contacts&lt;/li&gt;
&lt;li&gt;Aggregating activity with Activity Streams&lt;/li&gt;
&lt;li&gt;Discovering how to communicate: LRDD + XRD&lt;/li&gt;
&lt;li&gt;Making markup structured: microformats&lt;/li&gt;
&lt;li&gt;The future of the Open Stack&lt;/li&gt;
&lt;li&gt;Learn more &amp;amp; get involved: resources and communities&lt;/li&gt;
&lt;li&gt;Q&amp;amp;A;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Requirements&lt;/p&gt;
&lt;p&gt;Some experience doing web development or working with web service APIs&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">David Recordon</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--hacking-the-social-web-with-python.html</guid><category>atom</category><category>http</category><category>json</category><category>oauth</category><category>openid</category><category>pycon</category><category>pycon2010</category><category>rss</category><category>tutorial</category><category>xml</category></item><item><title>Hg and Git : Can't we all just get along? (#154)</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--hg-and-git---can--39-t-we-all-just-ge.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Hg and Git: Can't we all just get along?&lt;/p&gt;
&lt;p&gt;Presented by Scott Chacon&lt;/p&gt;
&lt;p&gt;There is a fair amount of unnecessary animosity between developers about
version control systems, especially between Mercurial and Git users. In
reality, these two systems are very similar and can actually cooperate
pretty well. In this talk we will show just how similar Git and
Mercurial are, look at some of their technical differences, and see how
they can work together by looking at hg-git, the bidirectional
Git/Mercurial bridge, implemented in Python.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Scott Chacon</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--hg-and-git---can--39-t-we-all-just-ge.html</guid><category>git</category><category>hg</category><category>mercurial</category><category>pycon</category><category>pycon2010</category></item><item><title>How and why Python is being used to by the Military to model real-world battlefield scenarios (#13)</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--how-and-why-python-is-being-used-to-b.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;How and why Python is being used by the Military to model real-world
battlefield scenarios&lt;/p&gt;
&lt;p&gt;Mr. Eric Silverman (ALATEC Inc. / US Army)&lt;/p&gt;
&lt;p&gt;Leveraging the power of Python, military analyst and software developers
out at White Sands Missile Range in New Mexico have converted a
closed-form model, which was developed for scripted Cold War scenarios,
into a more sophisticated and adaptive system. COMBATXXI is a premium
wargaming model, which now is poised to answer questions that have a
direct effect on military operations currently in theater, in large part
because of Python.&lt;/p&gt;
&lt;p&gt;[VIDEO HAS ISSUES: High pitched noise on audio]&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Unknown</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--how-and-why-python-is-being-used-to-b.html</guid><category>casestudy</category><category>pycon</category><category>pycon2010</category></item><item><title>How Are Large Applications Embedding Python? (#6)</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--how-are-large-applications-embedding-.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;How Are Large Applications Embedding Python?&lt;/p&gt;
&lt;p&gt;Presented by Peter Shinners&lt;/p&gt;
&lt;p&gt;An examination of the ways Python is being embedded and deployed in the
large applications used for computer graphics; like Renderman, Maya,
Houdini, and Nuke.&lt;/p&gt;
&lt;p&gt;This session is for those interested in the popular techniques of
embedding the Python interpreter. The survey will determine the best
practices for embedding Python at the core of a large application.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter Shinners</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--how-are-large-applications-embedding-.html</guid><category>deploying</category><category>embedded</category><category>pycon</category><category>pycon2010</category></item><item><title>How does Enthought distribute packages? (#108)</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--how-does-enthought-distribute-package.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;How does Enthought distribute packages?&lt;/p&gt;
&lt;p&gt;Presented by Dr. Ilan Schnell&lt;/p&gt;
&lt;p&gt;This presentation gives an overview of how packages are build and
distributed for different operating systems in the Enthought Python
Distribution. Enstaller (&lt;a class="reference external" href="http://pypi.python.org/pypi/Enstaller/4.0.0"&gt;http://pypi.python.org/pypi/Enstaller/4.0.0&lt;/a&gt;) is
a tool I wrote for installing egg-based packages, which are not
necessarily Python packages, such as SWIG or HDF5. I will discuss the
architecture of Enstaller, and in particular the egg-based distribution
format.&lt;/p&gt;
&lt;p&gt;[VIDEO HAS ISSUES: Frezz frame in the start of the video]&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dr. Ilan Schnell</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--how-does-enthought-distribute-package.html</guid><category>enstaller</category><category>enthought</category><category>pycon</category><category>pycon2010</category></item><item><title>How Python, TurboGears, and MongoDB are Transforming SourceForge.net (#47)</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--how-python--turbogears--and-mongodb-a.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;How Python, TurboGears, and MongoDB are transforming SourceForge.net&lt;/p&gt;
&lt;p&gt;Presented by Rick Copeland&lt;/p&gt;
&lt;p&gt;In mid-2009, SourceForge embarked on a quest to modernize our websites,
starting with the download (consumer) flow on SourceForge.net. A small
team was tasked the rewrite, converting a site originally implemented in
PHP with Python. Using a customized TurboGears as a core component, the
rewrite was completed and the new site deployed in under 2 months. This
talk tells the story of that rewrite and explains our new technology
stack, which includes TurboGears, MongoDB, and Jinja templates.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Rick Copeland</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--how-python--turbogears--and-mongodb-a.html</guid><category>jinja</category><category>mongodb</category><category>pycon</category><category>pycon2010</category><category>turbogears</category></item><item><title>How to write cross-interpreter Python programs (#101)</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--how-to-write-cross-interpreter-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;How to write cross-interpreter Python programs&lt;/p&gt;
&lt;p&gt;Presented by Maciej Fijalkowski (merlinux GmbH, pypy)&lt;/p&gt;
&lt;p&gt;This talk will cover basics about writing cross-interpreter python
programs. What to do and most of all what not to do. This will help you
if you want at some point in time to run program on for example Java
platform or faster python interpreter, but also if you want to keep it
running between CPython releases.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Maciej Fijalkowski</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--how-to-write-cross-interpreter-python.html</guid><category>pycon</category><category>pycon2010</category></item><item><title>Implementing Domain Specific Languages In Python</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--implementing-domain-specific-language.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Implementing Domain Specific Languages In Python&lt;/p&gt;
&lt;p&gt;Presented by Sean Jensen-Grey&lt;/p&gt;
&lt;p&gt;Intended Audience&lt;/p&gt;
&lt;p&gt;Intermediate&lt;/p&gt;
&lt;p&gt;Class Outline&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;What are DSLs? Internal/External&lt;/li&gt;
&lt;li&gt;Why DSLs?&lt;/li&gt;
&lt;li&gt;How can they be expressed in Python?&lt;/li&gt;
&lt;li&gt;Mini Language Design&lt;/li&gt;
&lt;li&gt;Implementing External DSLs&lt;/li&gt;
&lt;li&gt;Web / AI / Enterprise&lt;/li&gt;
&lt;li&gt;Testing&lt;/li&gt;
&lt;li&gt;Documenting&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Requirements&lt;/p&gt;
&lt;p&gt;Students should have their own computer with Python 2.6 installed&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sean Jensen-Grey</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--implementing-domain-specific-language.html</guid><category>dsl</category><category>pycon</category><category>pycon2010</category><category>tutorial</category></item><item><title>Import this, that, and the other thing: custom importers (#9)</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--import-this--that--and-the-other-thin.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Import this, that, and the other thing. Custom importers&lt;/p&gt;
&lt;p&gt;Presented by Brett Cannon&lt;/p&gt;
&lt;p&gt;Since Python 2.3, the ability has existed to customize the import
process so that one can support code stored in alternative formats, e.g.
zipimport and its support of importing code from a zip file. The aim of
this talk is to make sure you understand how the custom import mechanism
works and how to write your own custom importers using importlib from
Python 3.1.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Brett Cannon</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--import-this--that--and-the-other-thin.html</guid><category>import</category><category>importers</category><category>importing</category><category>pycon</category><category>pycon2010</category></item><item><title>Interfaces, Adapters and Factories (#181)</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--interfaces--adapters-and-factories---.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Interfaces, Adapters, and Factories&lt;/p&gt;
&lt;p&gt;Presented by Jeff Rush&lt;/p&gt;
&lt;p&gt;A step-by-step introduction to the idea of object interfaces and
adapters using incremental code examples, based on the zope.interface
module. The case for adaption to ease code brittleness will be made and
how we can reason about interfaces. I'll show how to automatically check
code for conformance to your interfaces and then cover where objects
come from, the several kinds of object factories in Python and how one
kind can be based on interfaces.&lt;/p&gt;
&lt;p&gt;[VIDEO HAS ISSUES: Beginning out of focus]&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jeff Rush</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--interfaces--adapters-and-factories---.html</guid><category>adapters</category><category>interfaces</category><category>pycon</category><category>pycon2010</category><category>zope.interface</category></item><item><title>Internationalizing your Django project (#74)</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--internationalizing-your-django-projec.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Internationalizing your Django project&lt;/p&gt;
&lt;p&gt;Presented by Matt Croydon (Mediaphormedia)&lt;/p&gt;
&lt;p&gt;Internationalizing your Django application isn't as hard as it sounds.
This session introduces the topic of internationalization and walks
through what it takes to use Django's internationalization tools,
including how to mark models, views, and templates for translation and
how to enable internationalization in your application. We will also
step through localizing your application in a new language.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Matt Croydon</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--internationalizing-your-django-projec.html</guid><category>i18n</category><category>internationalization</category><category>pycon</category><category>pycon2010</category></item><item><title>Introduction to Django</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--introduction-to-django.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Introduction to Django&lt;/p&gt;
&lt;p&gt;Presented by Chander Ganesan&lt;/p&gt;
&lt;p&gt;The Django framework is a fast, flexible, easy to learn, and easy to use
framework for designing and deploying web sites and services using
Python. In this session, we'll cover the fundamentals of development
with Django, generate a Django data model, and put together a simple web
site using the framework.&lt;/p&gt;
&lt;p&gt;Intended Audience&lt;/p&gt;
&lt;p&gt;Beginner to Intermediate Python programmers&lt;/p&gt;
&lt;p&gt;Class Outline&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Django Overview and Basic Introduction (~ 5 min)&lt;/li&gt;
&lt;li&gt;Downloading &amp;amp; Installing Dango (~ 10 min)&lt;/li&gt;
&lt;li&gt;Creating a new project (~ 5 min)&lt;/li&gt;
&lt;li&gt;Choosing a database (~ 5 min)&lt;/li&gt;
&lt;li&gt;Creating a new application (~ 5 min)&lt;/li&gt;
&lt;li&gt;Installing &amp;amp; Using Django contrib applications (~ 7 min)&lt;/li&gt;
&lt;li&gt;Overview of Django flow (i.e., URLconf expression, view function,
HTTPResponse object, etc.) (~7 min)&lt;/li&gt;
&lt;li&gt;Generating Simple Dango Views (~ 5 min)&lt;/li&gt;
&lt;li&gt;Configuring a URLConf for basic views (~ 5 min)&lt;/li&gt;
&lt;li&gt;Creating Django Templates (template syntax, common filters and tags,
loops, etc) (~ 10 min)&lt;/li&gt;
&lt;li&gt;Creating &amp;amp; using Template Context objects (~ 5 min)&lt;/li&gt;
&lt;li&gt;Introduction to Django Models (~ 10 min)&lt;/li&gt;
&lt;li&gt;Defining basic Django models (~ 15 min)&lt;/li&gt;
&lt;li&gt;Understanding basic model fields &amp;amp; options (~ 15 min)&lt;/li&gt;
&lt;li&gt;Generating &amp;amp; Reviewing Model SQL (~ 5 min)&lt;/li&gt;
&lt;li&gt;Adding data to a model (~ 7 min)&lt;/li&gt;
&lt;li&gt;Simple data retrieval using models (~ 7 min)&lt;/li&gt;
&lt;li&gt;Working with QUerySets (filters, slicing, ordering, common methods)
(~ 10 min)&lt;/li&gt;
&lt;li&gt;Overview of Q objects (~ 5 min)&lt;/li&gt;
&lt;li&gt;Using the Admin interface (~ 10 min)&lt;/li&gt;
&lt;li&gt;Using Generic views (~ 10 min)&lt;/li&gt;
&lt;li&gt;Access control with sessions &amp;amp; users (~ 10 min)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Requirements&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Attendees wishing to try the examples should have Python 2.6
pre-installed (&lt;a class="reference external" href="http://www.python.org"&gt;http://www.python.org&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Attendees should have Django pre-downloaded or pre-installed.
(&lt;a class="reference external" href="http://www.djangoproject.com"&gt;http://www.djangoproject.com&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chander Ganesan</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--introduction-to-django.html</guid><category>pycon</category><category>pycon2010</category><category>tutorial</category></item><item><title>Introduction to Internet Programming</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--introduction-to-internet-programming.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Introduction to Internet Programming (Wesley J. Chun)&lt;/p&gt;
&lt;p&gt;Python is an interpreted, cross-platform, object-oriented programming
language that is popular for a wide range of applications, one of which
is Internet programming. This tutorial introduces current Python
programmers to 3-4 distinct areas of Internet programming, each in
self-contained lectures with a demonstration of code following each
lecture topic. Intended Audience&lt;/p&gt;
&lt;p&gt;Developers familiar with Python who are interested in exploring
client/server network programming with sockets, Internet client (FTP,
NNTP, e-mail), development and web programming.&lt;/p&gt;
&lt;p&gt;Class Outline&lt;/p&gt;
&lt;p&gt;Python is an interpreted, cross-platform, object-oriented programming
language that is popular for a wide range of applications, one of which
is Internet programming. This tutorial introduces current Python
programmers to distinct areas of Internet programming, each in
self-contained lectures with a demonstration of code following these
lecture topics (each ranging from 20-60min in length):&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Network Programming using Sockets&lt;/li&gt;
&lt;li&gt;Internet Client Programming&lt;/li&gt;
&lt;li&gt;Web/CGI Programming and Concepts&lt;/li&gt;
&lt;li&gt;Intro to Django (time-permitting)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We start at the lowest layer, where one creates communication channels
directly between clients and servers using sockets then move up one
level to discuss well-known Internet protocols such as FTP. Then we move
up even higher to address the concept of web programming, including a
description and purpose of all &amp;quot;CGI&amp;quot; interfaces, and finally, if there's
time, to give a high-level quick introduction to one of the most popular
Python web frameworks today, Django. We'll try build and implement a
simple blog in 15-20 minutes! This is especially for those of you who
couldn't sign up for the intro to Django tutorial at this PyCon which
will likely be full.&lt;/p&gt;
&lt;p&gt;About the Instructor&lt;/p&gt;
&lt;p&gt;WESLEY J. CHUN, MSCS, is the author of Prentice Hall's bestseller, &amp;quot;Core
Python Programming&amp;quot;, its video training course, &amp;quot;Python Fundamentals&amp;quot;
(LiveLessons DVD), and co-author of &amp;quot;Python Web Development with
Django&amp;quot;. In addition to being a software architect and Developer
Advocate for Google, he runs CyberWeb, a consulting business
specializing in Python software engineering and technical training. He
has over 25 years of programming, teaching, and writing experience,
including more than a decade of Python. While at Yahoo!, he helped
create Yahoo! Mail and Yahoo! People Search using Python. He holds
degrees in Computer Science, Mathematics, and Music from the University
of California.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Unknown</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--introduction-to-internet-programming.html</guid><category>pycon</category><category>pycon2010</category><category>tutorial</category><category>web</category></item><item><title>Introduction to SQLAlchemy</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--introduction-to-sqlalchemy.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Introduction to SQLAlchemy&lt;/p&gt;
&lt;p&gt;Presented by Johnathan Ellis&lt;/p&gt;
&lt;p&gt;SQLAlchemy is the premier SQL toolkit for Python. SQLAlchemy exposes the
full power of SQL while remaining easy to use for the basics, and is
flexible enough to work with existing database schemas as well as fresh
designs. SQLAlchemy is used in production by leading Python web
frameworks Pylons and Turbogears as well as many other web and non-web
developers.&lt;/p&gt;
&lt;p&gt;This tutorial teaches SQLAlchemy's object-relational mapping to automate
painlessly loading and persisting objects from and to your database,
even when complex relationships exist.&lt;/p&gt;
&lt;p&gt;Intended Audience&lt;/p&gt;
&lt;p&gt;Python experience: intermediate. You should already have some hands-on
experience with Python and be comfortable reading modern Python code.&lt;/p&gt;
&lt;p&gt;SQL experience: beginning. You should know how to SELECT, INSERT, and
DELETE, and how to read queries involving JOINs, but we will only be
reading the SQL generated by SA, not writing our own.&lt;/p&gt;
&lt;p&gt;ORM experience: prior experience with an object-relational mapper is not
necessary.&lt;/p&gt;
&lt;p&gt;Class Outline&lt;/p&gt;
&lt;p&gt;Introduction:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Philosophy&lt;/li&gt;
&lt;li&gt;SA features&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Fundamentals:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Introduction to ORM&lt;/li&gt;
&lt;li&gt;Data Mapper pattern vs Active Record&lt;/li&gt;
&lt;li&gt;Tables&lt;/li&gt;
&lt;li&gt;Mapping basics&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Queries:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Conditions, operators&lt;/li&gt;
&lt;li&gt;Joins&lt;/li&gt;
&lt;li&gt;lazy / eager loading&lt;/li&gt;
&lt;li&gt;Relation-based queries&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Sessions &amp;amp; identity map:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;detatching, attaching objects&lt;/li&gt;
&lt;li&gt;Lifecycle relations&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;More Mapping:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;one to one, many to many&lt;/li&gt;
&lt;li&gt;backreferences&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Extensions, etc.:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;DDL&lt;/li&gt;
&lt;li&gt;Migrate&lt;/li&gt;
&lt;li&gt;FormAlchemy&lt;/li&gt;
&lt;li&gt;SqlSoup&lt;/li&gt;
&lt;li&gt;Elixir&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Requirements&lt;/p&gt;
&lt;p&gt;Laptop with Python 2.5 or 2.6 and SQLAlchemy 0.6 installed. Code samples
may also work with Python 2.4 but will not be tested on that platform.
SQLAlchemy also supports Jython and cPython 3.x, but this tutorial will
be using &amp;quot;classic&amp;quot; cPython.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Johnathan Ellis</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--introduction-to-sqlalchemy.html</guid><category>ddl</category><category>elixer</category><category>formalchemy</category><category>migrate</category><category>orm</category><category>pycon</category><category>pycon2010</category><category>sqlalchemy</category><category>sqlsoup</category><category>tutorial</category></item><item><title>Introduction to Traits</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--introduction-to-traits.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Introduction to Traits&lt;/p&gt;
&lt;p&gt;Presented by Corran Webster&lt;/p&gt;
&lt;p&gt;The Traits project allows you to simply add validation, initialization,
delegation, notification and a graphical user interface to Python object
attributes. In this tutorial we will explore the Traits toolset and
learn how to dramatically reduce the amount of boilerplate code you
write, do rapid GUI application development, and understand the ideas
which underly other parts of the Enthought Tool Suite (such as MayaVi
and Chaco plotting toolkits).&lt;/p&gt;
&lt;p&gt;Traits and the Enthought Tool Suite are open source projects licensed
under a BSD-style license.&lt;/p&gt;
&lt;p&gt;Intended Audience&lt;/p&gt;
&lt;p&gt;Intermediate to advanced Python programmers&lt;/p&gt;
&lt;p&gt;Class Outline&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Introduction to ETS and Traits&lt;/li&gt;
&lt;li&gt;Basic Traits + Trait types + Property Traits + Trait Validation&lt;/li&gt;
&lt;li&gt;Traits UI + Basic Traits UI + Tour of the Trait editors + Advanced
Trait editors&lt;/li&gt;
&lt;li&gt;Notification in Traits + Static notification + Dynamic notification&lt;/li&gt;
&lt;li&gt;Advanced Traits UI + Customizing Views, Groups and Items + Traits UI
Handlers + Buttons, Menus and Toolbars + Drag and Drop&lt;/li&gt;
&lt;li&gt;Q&amp;amp;A;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Requirements&lt;/p&gt;
&lt;p&gt;Laptop recommended (any major OS is fine), with the following software
installed:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Python 2.5 or 2.6 (www.python.org)&lt;/li&gt;
&lt;li&gt;Either wxPython (&lt;a class="reference external" href="http://www.wxpython.org/"&gt;http://www.wxpython.org/&lt;/a&gt;) or PyQt
(&lt;a class="reference external" href="http://www.riverbankcomputing.co.uk/software/pyqt/intro"&gt;http://www.riverbankcomputing.co.uk/software/pyqt/intro&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Numpy and Scipy (&lt;a class="reference external" href="http://www.scipy.org"&gt;http://www.scipy.org&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Enthought Tool Suite 3.2 or higher
(&lt;a class="reference external" href="http://code.enthought.com/projects"&gt;http://code.enthought.com/projects&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All required software can be obtained by installing the free trial
version of the Enthought Python Distribution v5 or later
(&lt;a class="reference external" href="http://www.enthought.com/products/epd.php"&gt;http://www.enthought.com/products/epd.php&lt;/a&gt;).&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Corran Webster</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--introduction-to-traits.html</guid><category>pycon</category><category>pycon2010</category><category>traits</category><category>tutorial</category></item><item><title>Introduction to Twisted</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--introduction-to-twisted.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Introduction to Twisted&lt;/p&gt;
&lt;p&gt;Presented by Chander Ganesan&lt;/p&gt;
&lt;p&gt;Interested in faster networking with Python? Twisted is an event-driven
networking engine written in Python that allows developers to quickly
and easily develop and deploy network services.&lt;/p&gt;
&lt;p&gt;In this tutorial, attendees will learn what twisted is, why to use it,
how it works, and how to install, develop, and deploy simple clients and
servers using Twisted.&lt;/p&gt;
&lt;p&gt;Attendees should bring a laptop if possible, to try out code examples in
class.&lt;/p&gt;
&lt;p&gt;Intended Audience&lt;/p&gt;
&lt;p&gt;Intermediate Python Programmers with an understanding of Pythons object
oriented syntax (classes, inheritance, etc.)&lt;/p&gt;
&lt;p&gt;Class Outline&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Introduction to Twisted (15 min) - Basic Concepts&lt;ul&gt;
&lt;li&gt;Event-Driven model, cooperative multi-tasking&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Installing Twisted &amp;amp; Verifying Installation (10 min)&lt;/li&gt;
&lt;li&gt;Starting the Event loop (10 min)&lt;/li&gt;
&lt;li&gt;Timed Events (10 min)&lt;/li&gt;
&lt;li&gt;Understanding Twisted Factories &amp;amp; their use (15 min)&lt;/li&gt;
&lt;li&gt;Understanding Protocol Objects &amp;amp; their use (15 min)&lt;/li&gt;
&lt;li&gt;Creating a simple Twisted Client (25 min)&lt;ul&gt;
&lt;li&gt;Using twisted.internet.reactor.connectTCP()&lt;/li&gt;
&lt;li&gt;Creating a Client Factory&lt;/li&gt;
&lt;li&gt;Creating a Protocol&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Creating a simple Twisted Server (Server Factory) (25 min)&lt;ul&gt;
&lt;li&gt;Using twisted.internet.reactor.listenTCP()&lt;/li&gt;
&lt;li&gt;Creating a Server Factory&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Using Twisted SMTP to Send Mail (15 min)&lt;/li&gt;
&lt;li&gt;Twisted Web Basics (25 min)&lt;/li&gt;
&lt;li&gt;Introduction to the twist Daemonizer &amp;amp; tac files (15 min)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Requirements&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;An understanding of Object Oriented Python (OOP concepts,
inheritance, classes, etc.)&lt;/li&gt;
&lt;li&gt;Attendees wishing to try the examples should have Python 2.4 or newer
and Twisted pre-installed.&lt;/li&gt;
&lt;li&gt;Attendees wishing to try the examples should have Python 2.4 or newer
and Twisted pre-downloaded (we'll go over installation)&lt;/li&gt;
&lt;li&gt;Twisted may be downloaded at
&lt;a class="reference external" href="http://www.twistedmatrix.com"&gt;http://www.twistedmatrix.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Windows users will require the Win32 extensions for Python as well
&lt;a class="reference external" href="http://starship.python.net/crew/mhammond/win32/Downloads.html"&gt;http://starship.python.net/crew/mhammond/win32/Downloads.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chander Ganesan</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--introduction-to-twisted.html</guid><category>pcyon2010</category><category>pycon</category><category>tutorial</category><category>twisted</category></item><item><title>Introduction to unittest (a.k.a. PyUnit) (#96)</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--introduction-to-unittest--a-k-a--pyun.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Introduction to Unittest (a.k.a. PyUnit)&lt;/p&gt;
&lt;p&gt;Presented by Chander K Ganesan&lt;/p&gt;
&lt;p&gt;The PyUnit (unittest) unit testing framework provides an easy-to-use set
of tools and techniques to add robust unit testing to your Python code.
By integrating unit testing in their code, developers allow for a robust
set of tools to quickly and easily identify &amp;quot;broken&amp;quot; code.&lt;/p&gt;
&lt;p&gt;In this session we'll explore the unittest module and demonstrate how to
leverage PyUnit for unit testing.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chander Ganesan</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--introduction-to-unittest--a-k-a--pyun.html</guid><category>pycon</category><category>pycon2010</category><category>pyunit</category><category>testing</category><category>unittest</category></item><item><title>IronPython Tooling (#67)</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--ironpython-tooling---67.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;IronPython Tooling&lt;/p&gt;
&lt;p&gt;Presented by Dino E Viehland (Microsoft)&lt;/p&gt;
&lt;p&gt;One of the most popular requests for the IronPython team is tooling
support. During this talk Iâ€™ll show you some of the existing tools
available to help create IronPython applications. Iâ€™ll also look at
the latest IronPython features which can help you debug, profile and
improve your applications. Iâ€™ll also compare and contrast these with
the solutions available for CPython that you may already be familiar
with.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dino E Viehland</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--ironpython-tooling---67.html</guid><category>ironpython</category><category>pycon</category><category>pycon2010</category><category>tools</category></item><item><title>Keynote: Building the Python Community</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--keynote--building-the-python-communit.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Keynote: Building the Python Community&lt;/p&gt;
&lt;p&gt;Presented by Steve Holden&lt;/p&gt;
&lt;p&gt;Steve addresses the Python community, thanks helpers for PyCon 2010, and
talks about the PSF and where it's at.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Holden</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--keynote--building-the-python-communit.html</guid><category>pycon</category><category>pycon2010</category></item><item><title>Keynote: Cadence, Quality and Design</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--keynote--cadence--quality-and-design.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Keynote: Cadence, Quality and Design&lt;/p&gt;
&lt;p&gt;Presented by Mark Shuttleworth&lt;/p&gt;
&lt;p&gt;Talks about things we can do as a community to accelerate the
development of software, increase collaboration, and build better
applications. Approaches this by talking about cadence, quality and
design.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mark Shuttleworth</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--keynote--cadence--quality-and-design.html</guid><category>pycon</category><category>pycon2010</category></item><item><title>Keynote: Relentlessly Pursuing Opportunities With Python, or why the AIs will Spare Us All!</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--keynote--relentlessly-pursuing-opport.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Keynote: Relentlessly pursuing opportunities with Python, or why the AIs
will Spare us all!&lt;/p&gt;
&lt;p&gt;Presented by Antonio Rodriguez&lt;/p&gt;
&lt;p&gt;Talks about how in every startup, success is defined by how many people
you can get to hack.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Antonio Rodriguez</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--keynote--relentlessly-pursuing-opport.html</guid><category>pycon</category><category>pycon2010</category></item><item><title>Keynote: State of PyPy</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--keynote--state-of-pypy.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Keynote: State of PyPy&lt;/p&gt;
&lt;p&gt;Presented by Maciej Fijalkowski&lt;/p&gt;
&lt;p&gt;Talks about the current state of PyPy.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Maciej Fijalkowski</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--keynote--state-of-pypy.html</guid><category>pycon</category><category>pycon2010</category><category>pypy</category></item><item><title>Keynote: State of Unladen Swallow</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--keynote--state-of-unladen-swallow.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Keynote: State of Unladen Swallow&lt;/p&gt;
&lt;p&gt;Presented by Collin Winter&lt;/p&gt;
&lt;p&gt;Talks about the current state of Unladen Swallow.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Collin Winter</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--keynote--state-of-unladen-swallow.html</guid><category>pycon</category><category>pycon2010</category><category>unladenswallow</category></item><item><title>Learning Hosting Best-Practices From WebFaction (#57)</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--learning-hosting-best-practices-from-.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Learning Hosting Best-Practices From WebFaction&lt;/p&gt;
&lt;p&gt;Brandon Craig Rhodes (Rhodes Mill Studios, Inc.)&lt;/p&gt;
&lt;p&gt;The rise of WebFaction has been dramatic in the world of Python-friendly
hosting services. What are the secrets to getting the most out of their
features? From the point of view of a customer with no other affiliation
with WebFaction â€” as a customer advising other customers â€” this talk
offers lessons learned in using WebFaction to host everything from lone
static content to multiple Python web applications and services
co-existing together. WebFaction uses some unique techniques to support
both user-local &lt;em&gt;and&lt;/em&gt; application-local Python packages. Should you use
their special installation techniques, or install and use virtualenv on
your own initiative? Learn the trade-offs, and learn how &lt;em&gt;not&lt;/em&gt; to get
yourself in trouble while running &lt;tt class="docutils literal"&gt;easy_install&lt;/tt&gt; on WebFaction, my
favorite hosting service.&lt;/p&gt;
&lt;p&gt;[VIDEO HAS ISSUES: Audio slightly clipping]&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Unknown</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--learning-hosting-best-practices-from-.html</guid><category>hosting</category><category>pycon</category><category>pycon2010</category><category>webfaction</category></item><item><title>Managing the world's oldest Django project (#80)</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--managing-the-world--39-s-oldest-djang.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Managing the world's oldest Django project&lt;/p&gt;
&lt;p&gt;Presented by James Bennett&lt;/p&gt;
&lt;p&gt;Or, &amp;quot;how we cut 40,000 lines of code and learned to love unit testing.&amp;quot;&lt;/p&gt;
&lt;p&gt;This talk will cover some of the development history behind Ellington,
the CMS which spawned the open-source Django web framework, and some of
the issues involved in developing and maintaining a codebase of this age
and size. Highlights include branch management, the advantages of
open-sourcing non- critical functionality, the pain of porting and the
joy that can only be found in a passing test suite.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">James Bennett</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--managing-the-world--39-s-oldest-djang.html</guid><category>pycon</category><category>pycon2010</category></item><item><title>Mastering Python 3 I/O (part 1)</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--mastering-python-3-i-o.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Mastering Python 3 I/O&lt;/p&gt;
&lt;p&gt;Presented by David Beazley&lt;/p&gt;
&lt;p&gt;As most Python programmers know, Python 3 breaks backwards compatibility
with Python 2 in a number of significant ways. Although guides to Python
3 tend to focus on superficial incompatibilities such as the new print
function, changes to exception handling, or new language features, the
most substantial changes concern the strict separation of Unicode and
bytes as well as the new I/O stack. Not only do these changes have
far-reaching effects throughout the standard library, but changes to I/O
are likely to be the most major source of problems for anyone porting an
existing Python application to Python 3. In this tutorial, we're going
to take a top-to-bottom tour of the entire Python 3 I/O system. We'll
focus on how to properly handle both text and binary data, changes to
standard library modules, examine advanced features such as the buffer
API, perform some performance experiments, and end with practical advice
for programmers working on porting applications from Python 2 to 3.
Intended Audience&lt;/p&gt;
&lt;p&gt;Intermediate to advanced Python programmers who are either developing
new applications or contemplating a migration to Python 3. Attendees
should already be familiar with the basics of Python programming
including standard datatypes and commonly used library modules. A
background in systems programming topics such as file handling,
subprocesses, and socket programming is also recommended. Class Outline&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Introducing Python 3 (with a focus on I/O)&lt;/li&gt;
&lt;li&gt;Text Processing&lt;/li&gt;
&lt;li&gt;Binary Data Handling&lt;/li&gt;
&lt;li&gt;Dealing with System Interfaces and External Programs&lt;/li&gt;
&lt;li&gt;The New io library&lt;/li&gt;
&lt;li&gt;Network programming&lt;/li&gt;
&lt;li&gt;The revised buffer API and direct I/O&lt;/li&gt;
&lt;li&gt;Porting from Python 2 to 3.&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">David Beazley</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--mastering-python-3-i-o.html</guid><category>io</category><category>pycon</category><category>pycon2010</category><category>python3</category><category>tutorial</category></item><item><title>Mastering Team Play: Four powerful examples of composing Python tools (#184)</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--mastering-team-play--four-powerful-ex.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Mastering Team Play: Four powerful examples of composing Python tools&lt;/p&gt;
&lt;p&gt;Presented by Raymond Hettinger&lt;/p&gt;
&lt;p&gt;Starts with a quick review of the performance characteristics of major
individual tools in Python: bisect, heapq, lists, deques, sets,
frozensets, class structures, sorts, and weakreferences. Show how these
tools can be powerfully combined to create elegant solutions to four
hard problems.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Random sampling: when one data structure isn't enough. Discuss how
the nature of the problem dictates when to use one of two alternate
data structures.&lt;/li&gt;
&lt;li&gt;Ordered dictionaries: with the right compostion of dictionaries,
linked lists, and weak references, a dictionary can remember its
insertion order without any impact on its big-Oh running times.&lt;/li&gt;
&lt;li&gt;NFA to DFA conversion. The classic, but difficult, algorithm for
lexical analysis becomes simple when composing Python's dicts and
frozensets.&lt;/li&gt;
&lt;li&gt;Running median: the obvious approaches are horribly slow. The problem
centers around how to efficiently maintain sorted data while
advancing a large sliding window one value at a time. A list of
deques provides a dramatic and scalable improvement in running time.&lt;/li&gt;
&lt;/ol&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Raymond Hettinger</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--mastering-team-play--four-powerful-ex.html</guid><category>bisect</category><category>dequeues</category><category>frozensets</category><category>heapq</category><category>lists</category><category>pycon</category><category>pycon2010</category><category>sets</category><category>sorts</category><category>weakreferences</category></item><item><title>Modern version control: Mercurial internals (#113)</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--modern-version-control--mercurial-int.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Modern version control: Mercurial internals&lt;/p&gt;
&lt;p&gt;Presented by Dirkjan Ochtman&lt;/p&gt;
&lt;p&gt;In this talk, I'd like to talk a bit about Mercurial. This will not be a
beginner-level talk on DVCS or hg; it aims to be a higher-level
discussion of the concepts employed in Mercurial. After having discussed
these, I'd also like to compare Mercurial and git based on UI,
performance and underlying concepts.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dirkjan Ochtman</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--modern-version-control--mercurial-int.html</guid><category>hg</category><category>mercurial</category><category>pycon</category><category>pycon2010</category></item><item><title>New *and* Improved: Coming changes to unittest, the standard library test framework (#52)</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--new--and--improved--coming-changes-to.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;New &lt;em&gt;and&lt;/em&gt; Improved: Coming changes to unittest, the standard library
test framework&lt;/p&gt;
&lt;p&gt;Presented by Michael J Foord&lt;/p&gt;
&lt;p&gt;In Python 2.7 and 3.2 a whole bunch of improvements to unittest will
arrive. unittest is the Python standard library testing framework and
for several years it has languished whilst other Python testing
frameworks have innovated. Some of the best innovations have made their
way into unittest which has had quite a renovation.&lt;/p&gt;
&lt;p&gt;This talk will go through the major changes, like the new assert
methods, test discovery and the load_tests protocol, and also explain
how they can be used with earlier versions of Python.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michael Foord</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--new--and--improved--coming-changes-to.html</guid><category>pycon</category><category>pycon2010</category><category>unittest</category></item><item><title>Optimal Resource Allocation using Python (#36)</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--optimal-resource-allocation-using-pyt.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Optimal Resource Allocation using Python&lt;/p&gt;
&lt;p&gt;Presented by Ryan J O'Neil&lt;/p&gt;
&lt;p&gt;A brief introduction to modeling and solving resource allocation and
scheduling problems using Python and SCIP.&lt;/p&gt;
&lt;p&gt;At times a programmer is faced with difficult, possibly NP-Hard,
optimization problems such as scheduling or assignment. Sophisticated
techniques exist for modeling and solving these sorts of problems which
are well implemented in optimization solvers. This talk introduces some
of these techniques using the ZIB Optimization Suite and its new Python
interface.&lt;/p&gt;
&lt;p&gt;[VIDEO HAS ISSUES: Audio buzzing]&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ryan J O'Neil</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--optimal-resource-allocation-using-pyt.html</guid><category>pycon</category><category>pycon2010</category><category>zib</category></item><item><title>Optimizations And Micro-Optimizations In CPython (#38)</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--optimizations-and-micro-optimizations.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Optimizations and Micro-Optimizations in CPython&lt;/p&gt;
&lt;p&gt;Presented by Mr. Larry Hastings&lt;/p&gt;
&lt;p&gt;CPython mostly gets faster from one version to the next. And when
CPython gets faster, your programs get faster. This talk is a survey of
optimizations made to CPython, recent and historical, large and small.
Audience doesn't need to be familiar with CPython internals, but should
be familiar with Python and conversant in C.&lt;/p&gt;
&lt;p&gt;[VIDEO HAS ISSUES: Audio interference]&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Larry Hastings</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--optimizations-and-micro-optimizations.html</guid><category>cpython</category><category>optimization</category><category>pycon</category><category>pycon2010</category></item><item><title>Panel: Form Generator Generators (#28)</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--panel--form-generator-generators---28.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Panel: Form Generator Generators&lt;/p&gt;
&lt;p&gt;Christopher Perkins; Brandon Craig Rhodes (Rhodes Mill Studios, Inc.);
Chris P McDonough (Agendaless Consulting); Jacob Kaplan-Moss
(&lt;a class="reference external" href="mailto:jacob&amp;#64;jacobian.org"&gt;jacob&amp;#64;jacobian.org&lt;/a&gt;); Jonathan Ellis&lt;/p&gt;
&lt;p&gt;It seems that almost every python web framework in existence has solved
the problem of automatically generating forms. Some have straight
forward techniques, some are unique or even an unusual approach to the
problem. The question is: &amp;quot;what can we learn from each other?&amp;quot;. This
panel will examine the different ways developers generate forms by
offering examples, and summarizing the functionality, differences, and
similarities between these valuable web development tools.&lt;/p&gt;
&lt;p&gt;[VIDEO HAS ISSUES: Feedback galore when moving between mics, cover your
ears]&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Unknown</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--panel--form-generator-generators---28.html</guid><category>forms</category><category>panel</category><category>pycon</category><category>pycon2010</category><category>restish</category><category>turbogears</category><category>web</category><category>web2py</category><category>zope</category></item><item><title>Pay only for what you eat: A tour of the Repoze.BFG repository and philosophy (#174)</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--pay-only-for-what-you-eat--a-tour-of-.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Pay only for what you eat: A tour of the Repoze.BFG repository and
philosophy&lt;/p&gt;
&lt;p&gt;Presented by Carlos de la Guardia&lt;/p&gt;
&lt;p&gt;BFG is a Python web application framework based on WSGI. It is a &amp;quot;pay
only for what you eat&amp;quot; framework. Meaning that you can get started
easily and learn new concepts as you go, and only if you need them. It's
simple, well tested, well documented, and fast. It also tries to make
development fun.&lt;/p&gt;
&lt;p&gt;This talk will introduce the framework and its philosophy, including
similarities and differences with other frameworks. I will then show
some of the software available in its repository and discuss the
inclusive, loose connection approach that the BFG community prefers for
creating a flexible web development platform.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Carlos de la Guardia</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--pay-only-for-what-you-eat--a-tour-of-.html</guid><category>pycon</category><category>pycon2010</category><category>repoze.bfg</category><category>wsgi</category></item><item><title>Persistent Graphs in Python with Neo4j (#140)</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--persistent-graphs-in-python-with-neo4.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Persistent Graphs in Python with Neo4j&lt;/p&gt;
&lt;p&gt;Presented by Tobias Ivarsson&lt;/p&gt;
&lt;p&gt;Databases that employ a data model other than the relational model are
increasingly a hot topic. Neo4j is an open source database where the
data model is a graph. Data in Neo4j is stored as Nodes and
Relationships in between nodes. A lot of the data we model in
applications every day is actually graph oriented, having a database
that persists such data natively is a huge benefit. In this presentation
we will see how to use Neo4j in Python, and demonstrate this with a web
application in Django.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Tobias Ivarsson</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--persistent-graphs-in-python-with-neo4.html</guid><category>neo4j</category><category>pycon</category><category>pycon2010</category></item><item><title>Plenary: Friday Evening Lightning Talks</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--plenary--friday-evening-lightning-tal.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Plenary: Friday Evening Lightning Talks&lt;/p&gt;
&lt;p&gt;(00:00) Jacob Kaplan-Moss - lightning talk about lightning talks&lt;/p&gt;
&lt;p&gt;(03:50) Van Lindberg - What an Open Source Lawyer Actually Does&lt;/p&gt;
&lt;p&gt;(09:40) Greg Wilson - The Next Big Programming Book and How You Can Make
it Happen (&lt;a class="reference external" href="http://www.third-bit.com/"&gt;http://www.third-bit.com/&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;(14:25) Moshe Zadka - Don't Write Big Applications (more info
&lt;a class="reference external" href="http://moshez.wordpress.com/2010/02/17/dont-write-big-applications-a%20-lightning-talk/"&gt;here&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;(19:35) Ned Batchelder - What's new in coverage.py
(&lt;a class="reference external" href="http://nedbatchelder.com/"&gt;http://nedbatchelder.com/&lt;/a&gt;,
&lt;a class="reference external" href="http://nedbatchelder.com/code/coverage/"&gt;coverage.py&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;(25:10) Mike Maccana - Python Docx
(&lt;a class="reference external" href="http://github.com/mikemaccana/python-docx/"&gt;http://github.com/mikemaccana/python-
docx/&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;(29:25) Trent Mick - ActiveState Code v3/Python Cookbook v3
(&lt;a class="reference external" href="http://code.activestate.com/"&gt;http://code.activestate.com/&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;(34:40) Daniel Holth - Writing a SQLAlchemy Dialect&lt;/p&gt;
&lt;p&gt;(37:30) Dave Malcolm - Better Ways of Debugging the CPython Runtime&lt;/p&gt;
&lt;p&gt;(43:00) David Huggins-Daines - Recognizing Speech With Python
(&lt;a class="reference external" href="http://cmusphinx.sourceforge.net/"&gt;http://cmusphinx.sourceforge.net/&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;(48:00) Lucio Torre - Ubuntu One and Windows&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jacob Kaplan-Moss</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--plenary--friday-evening-lightning-tal.html</guid><category>lightning talks</category><category>activestate</category><category>bigapps</category><category>cmusphinx</category><category>coverage.py</category><category>cpython</category><category>lawyers</category><category>programmingbook</category><category>pycon</category><category>pycon2010</category><category>python-cookbook</category><category>sqlalchemy</category><category>ubuntuone</category></item><item><title>Plenary: Intro to sprints</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--plenary--intro-to-sprints.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Plenary: Intro to Sprinting and Intro to Sprints&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Unknown</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--plenary--intro-to-sprints.html</guid><category>pycon</category><category>pycon2010</category></item><item><title>Plenary: Saturday Evening Lightning Talks</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--plenary--saturday-evening-lightning-t.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Saturday Evening Lightning Talks&lt;/p&gt;
&lt;p&gt;(00:00) Jacob Kaplan-Moss - Introduction&lt;/p&gt;
&lt;p&gt;(00:30) Guido van Rossum - PSF community service awards&lt;/p&gt;
&lt;p&gt;(02:42) Ka-Ping Yee - Using scrape.py to test your web apps&lt;/p&gt;
&lt;p&gt;(07:35) Ayman Hourieh - Python debugging techniques&lt;/p&gt;
&lt;p&gt;(12:28) Robin Mills - Geo-tagging and Phatch&lt;/p&gt;
&lt;p&gt;(17:30) Allen Short - Big brother's design rules&lt;/p&gt;
&lt;p&gt;(21:25) David Goodger - PyCon swag&lt;/p&gt;
&lt;p&gt;(25:00) David Ewing - Python in tiny embedded systems for the Smart Grid
and beyond&lt;/p&gt;
&lt;p&gt;(30:15) Dmitry Jemerov - Introducing PyCharm&lt;/p&gt;
&lt;p&gt;(33:50) Dirkjan Ochtman - PEP 385: hg conversion&lt;/p&gt;
&lt;p&gt;(37:30) Jesse Noller - Python: Hell Yeah.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Various speakers</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--plenary--saturday-evening-lightning-t.html</guid><category>lightning talks</category><category>debugging</category><category>embedded</category><category>hg</category><category>phatch</category><category>pycharm</category><category>pycon</category><category>pycon2010</category><category>scrape.py</category></item><item><title>PLY and PyParsing (#93)</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--ply-and-pyparsing---93.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PLY and PyParsing&lt;/p&gt;
&lt;p&gt;Presented by Andrew Dalke&lt;/p&gt;
&lt;p&gt;Got a text parsing problem? In most cases using string manipulation and
regular expressions will solve it for you. But when the input is
complex, try reaching for a parsing system to help out.&lt;/p&gt;
&lt;p&gt;The two most popular in Python are PLY and PyParsing. PLY follows the
lex/yacc tradition with a domain specific language to describe the
tokens and grammar. It was built with both error diagnostics and
performance in mind. PyParsing is a recursive descent parser which
expresses the format as a Python data structure. It make no distinction
between lexer and grammar and has a uniform callback system which makes
certain types of data extraction very easy.&lt;/p&gt;
&lt;p&gt;In my talk I'll show the basics of how to use both systems for several
different format parsing tasks, of different complexity. This will let
you see how to use the parsers and understand more of the tradeoffs
between complexity, readability, error handling, and performance.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrew Dalke</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--ply-and-pyparsing---93.html</guid><category>ply</category><category>pycon</category><category>pycon2010</category><category>pyparsing</category></item><item><title>Powerful Pythonic Patterns (#186)</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--powerful-pythonic-patterns---186.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Powerful Pythonic Patterns video&lt;/p&gt;
&lt;p&gt;Presented by Alex Martelli&lt;/p&gt;
&lt;p&gt;An extremely misguided meme is going around: that Python doesn't have,
or need, any Design Patterns. Maybe the meme springs from not realizing
what the Gang Of Four state so plainly in their historical &amp;quot;Design
Patterns&amp;quot; book: which design patterns are useful DOES depend on the
programming language one targets -- design is NOT independent of
implementation, as the epic-fail &amp;quot;Waterfall&amp;quot; Methodology Pattern would
suggest. If you examine a &amp;quot;classic DP&amp;quot; that's basically a workaround for
some other language's lack of garbage collection, or for a clumsy
static-typing system, it may indeed be worthless for Python. But many
other DPs are still perfectly useful and applicable, and indeed Python's
strengths as a language afford riffing on them to develop highly
Pythonic, powerful, productive variants.&lt;/p&gt;
&lt;p&gt;In this talk, I analyze some of my favorite pattern families -- e.g.,
Template Method and its variants, Dependency Injection and its ilk,
Callback and friends -- in a highly Pythonic context. Non-pattern
Idioms, and Patterns that aren't really Design Patterns but rather
Architecture or Methodology ones, also make cameo appearances.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alex Martelli</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--powerful-pythonic-patterns---186.html</guid><category>designpatterns</category><category>pycon</category><category>pycon2010</category><category>python-advanced</category></item><item><title>Powering the real-time web with Python: PubSubHubbub on App Engine (#173)</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--powering-the-real-time-web-with-pytho.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Powering the real-time web with Python: PubSubHubbub on App Engine&lt;/p&gt;
&lt;p&gt;Presented by Brett Slatkin&lt;/p&gt;
&lt;p&gt;PubSubHubbub is an open protocol that turns Atom and RSS feeds into
real-time streams. I built the reference Hub run by Google using Python
and App Engine. In this talk you will learn how I made the real-time
system work: An intro to the protocol, asynchronous processing on App
Engine, fault-tolerance, and scalability.&lt;/p&gt;
&lt;p&gt;For details on PubSubHubbub and the Hub's source code, see
&lt;a class="reference external" href="http://code.google.com/p/pubsubhubbub/"&gt;http://code.google
.com/p/pubsubhubbub/&lt;/a&gt;.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Brett Slatkin</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--powering-the-real-time-web-with-pytho.html</guid><category>pubsubhubbub</category><category>pycon</category><category>pycon2010</category></item><item><title>py.test - Rapid Testing with Minimal Effort</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--py-test---rapid-testing-with-minimal-.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;py.test I - rapid testing with minimal effort&lt;/p&gt;
&lt;p&gt;Presented by Holger Krekel&lt;/p&gt;
&lt;p&gt;Want to learn writing tests in Python? This tutorial introduces basic
practises using the popular py.test (&lt;a class="reference external" href="http://pytest.org"&gt;http://pytest.org&lt;/a&gt;) tool. We start
with an overview on testing and tools in Python and then discuss and
exercise basic idioms in a step-by-step manner. We cover the basic
writing, organisation and running of tests and debugging options. In the
second part we discuss setup and teardown of test state, usage and
configuration of test functions arguments and introduce coverage
testing. We will close with time to answer questions and discuss topics
from the participants.&lt;/p&gt;
&lt;p&gt;Intended Audience&lt;/p&gt;
&lt;p&gt;beginner programmers&lt;/p&gt;
&lt;p&gt;Perequisites/knowledge: basic knowledge of python programming&lt;/p&gt;
&lt;p&gt;Requirements: Laptop with Python 2.4 or greater installed. Pairing
welcome. outline&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;why automated testing?&lt;/li&gt;
&lt;li&gt;Developer oriented automated tests&lt;/li&gt;
&lt;li&gt;The test tool question&lt;/li&gt;
&lt;li&gt;py.test basics&lt;/li&gt;
&lt;li&gt;py.test fundamental features&lt;/li&gt;
&lt;li&gt;cross-project test tool&lt;/li&gt;
&lt;li&gt;A Typical Python test layout&lt;/li&gt;
&lt;li&gt;Another typical test layout&lt;/li&gt;
&lt;li&gt;Choosing a test layout&lt;/li&gt;
&lt;li&gt;automatic test discovery&lt;/li&gt;
&lt;li&gt;mind the &lt;strong&gt;init&lt;/strong&gt;.py files&lt;/li&gt;
&lt;li&gt;no boilerplate python test code&lt;/li&gt;
&lt;li&gt;assert introspection&lt;/li&gt;
&lt;li&gt;asserting expected exceptions&lt;/li&gt;
&lt;li&gt;print() debugging / output capturing&lt;/li&gt;
&lt;li&gt;Getting Started, basic usage [0]&lt;/li&gt;
&lt;li&gt;Failure / Traceback Demo [0]&lt;/li&gt;
&lt;li&gt;Skipping tests&lt;/li&gt;
&lt;li&gt;Dynamically skipping tests&lt;/li&gt;
&lt;li&gt;Marking test functions&lt;/li&gt;
&lt;li&gt;Marking a test for conditional skip&lt;/li&gt;
&lt;li&gt;Marking a test as expected to fail&lt;/li&gt;
&lt;li&gt;Conditional expected to fail&lt;/li&gt;
&lt;li&gt;Marking / Skipping exercise [0]&lt;/li&gt;
&lt;li&gt;Applying Marks to classes or modules&lt;/li&gt;
&lt;li&gt;break&lt;/li&gt;
&lt;li&gt;warm up: boilerplate test code&lt;/li&gt;
&lt;li&gt;&amp;quot;myscan&amp;quot; Exercises of this tutorial&lt;/li&gt;
&lt;li&gt;sketching our &amp;quot;myscan&amp;quot; project&lt;/li&gt;
&lt;li&gt;Starting Exercise [1]&lt;/li&gt;
&lt;li&gt;The example Solution [1]&lt;/li&gt;
&lt;li&gt;The &amp;quot;test setup&amp;quot; and fixture Problem&lt;/li&gt;
&lt;li&gt;test functions and funcargs&lt;/li&gt;
&lt;li&gt;How do funcargs work?&lt;/li&gt;
&lt;li&gt;funcarg factory notes&lt;/li&gt;
&lt;li&gt;builtin funcargs&lt;/li&gt;
&lt;li&gt;usage example: per-test temporary directory&lt;/li&gt;
&lt;li&gt;next step: adding more tests [2]&lt;/li&gt;
&lt;li&gt;observation on new tmpdir-using tests&lt;/li&gt;
&lt;li&gt;The mysetup pattern&lt;/li&gt;
&lt;li&gt;How the mysetup pattern works&lt;/li&gt;
&lt;li&gt;next step: introducing &amp;quot;mysetup&amp;quot; pattern [3]&lt;/li&gt;
&lt;li&gt;The new test function using &amp;quot;mysetup&amp;quot;&lt;/li&gt;
&lt;li&gt;a simple hook: adding a command line opt&lt;/li&gt;
&lt;li&gt;the py.test config object&lt;/li&gt;
&lt;li&gt;exercise: implement a new command line option [4]&lt;/li&gt;
&lt;li&gt;myscan example completed&lt;/li&gt;
&lt;li&gt;py.test hooks and plugins&lt;/li&gt;
&lt;li&gt;Installing &amp;quot;global&amp;quot; plugins&lt;/li&gt;
&lt;li&gt;exercise: use the &amp;quot;figleaf&amp;quot; plugin&lt;/li&gt;
&lt;li&gt;local plugins: conftest.py&lt;/li&gt;
&lt;li&gt;a simple config: ignoring directories&lt;/li&gt;
&lt;li&gt;a simple default option: verbose&lt;/li&gt;
&lt;li&gt;quick discussion of advanced usages&lt;/li&gt;
&lt;li&gt;Summary / questions and answers&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Holger Krekel</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--py-test---rapid-testing-with-minimal-.html</guid><category>pycon</category><category>pycon2010</category><category>py.test</category><category>tutorial</category></item><item><title>Pynie: Python 3 on Parrot (#148)</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--pynie--python-3-on-parrot---148.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Pyine: Python 3 on Parrot&lt;/p&gt;
&lt;p&gt;Presented by Allison Randal&lt;/p&gt;
&lt;p&gt;Pynie is an implementation of Python 3 on Parrot. The goal of Pynie is
to duplicate the pure-Python behavior of CPython 3.x, and perhaps
eventually a C API compatibility layer. Parrot provides a set of
compiler tools and core functionality common to many dynamic languages,
so the core code of Pynie is lightweight. Pynie allows Python 3
libraries to be shared between multiple languages. This talk is an
overview of the features Pynie currently supports and the work left to
be done, together with an introduction to the internals of Pynie.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Allison Randal</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--pynie--python-3-on-parrot---148.html</guid><category>parrot</category><category>pycon</category><category>pycon2010</category><category>pyine</category><category>python3</category></item><item><title>Python's Dusty Corners (#182)</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--python--39-s-dusty-corners---182.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python's Dusty Corners&lt;/p&gt;
&lt;p&gt;Presented by Jack Diederich&lt;/p&gt;
&lt;p&gt;The talk will be a brief overview of all the features in python that you
don't need to know about right up until the moment you do. The list
includes how comparisons work, descriptors, iterators, context managers,
namespaces, else clauses on for/while loops (suggested by Hettinger).
The narrative of the talk is that these are features that you don't need
and/or shouldn't use in your day-to-day code but that you need to keep
in the back of your mind because other people's code and the stdlib do
use them. As Alex Martelli pointed out in his wonderful talk
&amp;quot;Abstractions as Leverage&amp;quot; you can't successfully function at one level
of abstraction if you don't know what is going on at the next level
down. This talk is a whirlwind tour of the next level down.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jack Diederich</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--python--39-s-dusty-corners---182.html</guid><category>contextmanagers</category><category>descripters</category><category>else</category><category>iterators</category><category>namespaces</category><category>pycon</category><category>pycon2010</category></item><item><title>Python 101</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--python-101.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python 101&lt;/p&gt;
&lt;p&gt;Presented by Stuart Williams&lt;/p&gt;
&lt;p&gt;This half-day tutorial presents the basics of Python to beginning and
intermediate programmers. It pairs well with ''Python 102'' which
follows a similar outline but goes much deeper.&lt;/p&gt;
&lt;p&gt;Rather than starting with &amp;quot;Hello, world!&amp;quot;, we use the interactive Python
interpreter shell to get hands-on familiarity with much of core Python
before covering blocks and scripts.&lt;/p&gt;
&lt;p&gt;The tutorial is divided into short sections, each with presentation and
hands- on exercises, to quickly cover lots of ground.&lt;/p&gt;
&lt;p&gt;Advanced topics are introduced throughout and covered in &amp;quot;extra credit&amp;quot;
exercises such that more advanced participants can learn at their own
pace.&lt;/p&gt;
&lt;p&gt;Intended Audience&lt;/p&gt;
&lt;p&gt;Programmers with experience in other languages who want a fast hands-on
introduction to Python. Content will target both Python 3.1 and 2.6.&lt;/p&gt;
&lt;p&gt;Requirements&lt;/p&gt;
&lt;p&gt;Bring a laptop computer with Python 2.6 or 3.1 installed. Try to get as
much of an overview of Python before the tutorial as you have time to in
order to get more out of the tutorial. Two angles on this are the Python
Quick Reference and the Python website's tutorial.&lt;/p&gt;
&lt;p&gt;Class Outline&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Numbers and operators&lt;/li&gt;
&lt;li&gt;Strings - immutability, operators, methods, functions, and formatting&lt;/li&gt;
&lt;li&gt;Introspection/Discovery&lt;/li&gt;
&lt;li&gt;Tuples and Lists&lt;/li&gt;
&lt;li&gt;List Comprehensions&lt;/li&gt;
&lt;li&gt;Objects and Names&lt;/li&gt;
&lt;li&gt;Dictionaries&lt;/li&gt;
&lt;li&gt;Loops and Blocks&lt;/li&gt;
&lt;li&gt;Iterables&lt;/li&gt;
&lt;li&gt;Generator Expressions&lt;/li&gt;
&lt;li&gt;Functions&lt;/li&gt;
&lt;li&gt;Generators&lt;/li&gt;
&lt;li&gt;Namespaces&lt;/li&gt;
&lt;li&gt;Simple Classes&lt;/li&gt;
&lt;li&gt;Exceptions&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The handouts at
&lt;a class="reference external" href="http://swilliams.ca%20/python-tutorials"&gt;http://swilliams.ca/python-tutorials&lt;/a&gt;.
If you're interested in the software I wrote to deliver the talk drop me
a line. My address is in the handouts.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Stuart Williams</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--python-101.html</guid><category>pycon</category><category>pycon2010</category><category>python-basics</category><category>tutorial</category></item><item><title>Python 102</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--python-102.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python 102&lt;/p&gt;
&lt;p&gt;Presented by Stuart Williams&lt;/p&gt;
&lt;p&gt;This half-day tutorial presents intermediate and some advanced features
of Python to beginning and intermediate programmers. It pairs well with
Python 101 which follows a similar outline but at a more introductory
level.&lt;/p&gt;
&lt;p&gt;Rather than starting with &amp;quot;Hello, world!&amp;quot;, we use the interactive Python
interpreter shell to get hands-on familiarity with much of core Python
before covering blocks and scripts.&lt;/p&gt;
&lt;p&gt;The tutorial is divided into short sections, each with presentation and
hands- on exercises, to quickly cover lots of ground.&lt;/p&gt;
&lt;p&gt;Advanced topics are introduced throughout and covered in &amp;quot;extra credit&amp;quot;
exercises such that more advanced participants can learn at their own
pace.&lt;/p&gt;
&lt;p&gt;Intended Audience&lt;/p&gt;
&lt;p&gt;Programmers with experience in other languages who want a fast hands-on
introduction to intermediate and some advanced features of Python.
Content will target both Python 3.1 and 2.6.&lt;/p&gt;
&lt;p&gt;Class Outline&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Numbers and Strings - operators, functions and methods&lt;/li&gt;
&lt;li&gt;Introspection&lt;/li&gt;
&lt;li&gt;Sequences - overview, concepts, and methods&lt;/li&gt;
&lt;li&gt;Objects&lt;/li&gt;
&lt;li&gt;Dictionaries&lt;/li&gt;
&lt;li&gt;Files&lt;/li&gt;
&lt;li&gt;Classes&lt;/li&gt;
&lt;li&gt;Namespaces&lt;/li&gt;
&lt;li&gt;Dynamic Classes&lt;/li&gt;
&lt;li&gt;Iterators and Generators&lt;/li&gt;
&lt;li&gt;Functions&lt;/li&gt;
&lt;li&gt;Exceptions&lt;/li&gt;
&lt;li&gt;Standard Library&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Requirements&lt;/p&gt;
&lt;p&gt;Bring a laptop computer with Python 2.6 or 3.1 installed. Try to get as
much of an overview of Python before the tutorial as you have time to in
order to get more out of the tutorial. Two angles on this are the Python
Quick Reference and the Python website's tutorial.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Stuart Williams</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--python-102.html</guid><category>pycon</category><category>pycon2010</category><category>python-basics</category><category>tutorial</category></item><item><title>Python 201: How to Solve It Using Python</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--python-201--how-to-solve-it-using-pyt.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python 201: How to Solve it using Python&lt;/p&gt;
&lt;p&gt;Presented by Senthil Kumaran&lt;/p&gt;
&lt;p&gt;One good way to develop applications is to divide the problem into
smaller manageable chunks and the build those. Once we identify and
define those smaller piece of tasks, our problem becomes incredibly
easy.&lt;/p&gt;
&lt;p&gt;But we are still faced with the question of what is the best way to do
that smaller task in Python? This tutorial will answer those questions.&lt;/p&gt;
&lt;p&gt;In this tutorial, we will identify the commonly occurring tasks that
would fit into to bigger problems and learn how do we solve it using
Python.&lt;/p&gt;
&lt;p&gt;The aim of the tutorial is help you develop the correct intuition when
developing applications using Python.&lt;/p&gt;
&lt;p&gt;Intended Audience&lt;/p&gt;
&lt;p&gt;Beginning to intermediate Python Programmers. Familiarity with Python's
syntax and usage is assumed.&lt;/p&gt;
&lt;p&gt;This tutorial will use Python 3.1 examples (with changes from Python 2.6
explained, when it is required).&lt;/p&gt;
&lt;p&gt;The source code and the handout will contain the snippets written in
both Python 2.6 and Python 3.1.&lt;/p&gt;
&lt;p&gt;Class Outline&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Outline of the Tutorial and a Brief Overview of Standard Library.&lt;/li&gt;
&lt;li&gt;Lets start with Strings.&lt;/li&gt;
&lt;li&gt;Files - We deal with them often.&lt;/li&gt;
&lt;li&gt;Date time related tasks.&lt;/li&gt;
&lt;li&gt;Dealing with Database stuff.&lt;/li&gt;
&lt;li&gt;Process Handling.&lt;/li&gt;
&lt;li&gt;Processing XMLs.&lt;/li&gt;
&lt;li&gt;Web Programming&lt;/li&gt;
&lt;li&gt;Programming tasks.&lt;/li&gt;
&lt;li&gt;Unit Testing&lt;/li&gt;
&lt;li&gt;How to Convert Python 2 to Python 3.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Requirements&lt;/p&gt;
&lt;p&gt;Attendees are welcome to bring their laptops with Python installed (
version 3.1 and version 2.6 both installed).&lt;/p&gt;
&lt;p&gt;Some snippets will be using Twisted Matrix Framework, those who would
like to try those recipes, would like to have Twisted Package installed
for their Python Distribution.&lt;/p&gt;
&lt;p&gt;[VIDEO HAS ISSUES: Some missing sections of video due to technical
issues (approx 3 mins in)]&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Senthil Kumaran</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--python-201--how-to-solve-it-using-pyt.html</guid><category>pycon</category><category>pycon2010</category><category>python-basics</category><category>testing</category><category>tutorial</category><category>xml</category></item><item><title>Python 3: The Next Generation (#48)</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--python-3--the-next-generation---48.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python 3: The Next Generation&lt;/p&gt;
&lt;p&gt;Presented by Wesley J. Chun&lt;/p&gt;
&lt;p&gt;This talk is about the evolution of Python. We will discuss Python 2 and
Python 3: what the compatibility issues are, what the main differences
are, and also talk about migration, Python 2.6, and other transition
tools.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Wesley J. Chun</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--python-3--the-next-generation---48.html</guid><category>2to3</category><category>pycon</category><category>pycon2010</category><category>python3</category></item><item><title>Python for Large Astronomical Data Reduction and Analysis Systems (#107)</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--python-for-large-astronomical-data-re.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python for Large Astronomical Data Reduction and Analysis Systems&lt;/p&gt;
&lt;p&gt;Presented by Francesco Pierfederici (Harvard-Smithsonian Center for
Astrophysics)&lt;/p&gt;
&lt;p&gt;We describe how Python is used in a large astronomy project to
automatically process data from several telescopes in both the
hemispheres. We introduce the general problem and discuss challenges and
lessons learned.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Francesco Pierfederici</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--python-for-large-astronomical-data-re.html</guid><category>astronomy</category><category>casestudy</category><category>concurrency</category><category>pycon</category><category>pycon2010</category></item><item><title>Python in the Browser (#71)</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--python-in-the-browser---71.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python in the Browser&lt;/p&gt;
&lt;p&gt;Presented by Jimmy Schementi&lt;/p&gt;
&lt;p&gt;You write your server code in Python because you want to. You write your
browser code in JavaScript because you have to. But with IronPython and
Silverlight, you can write your browser code in Python and leave
JavaScript behind. This talk provides an overview of Silverlight for
Python developers, including out of browser applications as well as the
new â€œjust textâ€ model where Python code is embedded directly in HTML
pages. Even if you develop on Linux or Mac, you can still take advantage
of Silverlight in the browser&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jimmy Schementi</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--python-in-the-browser---71.html</guid><category>pycon</category><category>pycon2010</category><category>silverlight</category></item><item><title>Python Metaprogramming (#64)</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--python-metaprogramming---64.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python Metaprogramming&lt;/p&gt;
&lt;p&gt;Presented by Nicolas Lara&lt;/p&gt;
&lt;p&gt;Python makes a great metaprogramming languages. Metaprogramming is great
for solving problems faster, in a more generic way and providing rich
APIs. This talk explores the different options provided in python to do
metaprogramming and the right way to use them.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nicolas Lara</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--python-metaprogramming---64.html</guid><category>metaprogramming</category><category>pycon</category><category>pycon2010</category></item><item><title>Rapid multi-purpose testing (#81)</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--rapid-multi-purpose-testing---81.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Rapid multi-purpose testing&lt;/p&gt;
&lt;p&gt;Presented by Holger Krekel&lt;/p&gt;
&lt;p&gt;Want to rapidly test code, javascript or documents on different Python
Interpreters and versions? This talk gives an overview on new py.test
features of the last year. I'll discuss the minimal-boilerplate testing
and new plugin model and give an overview on which testing needs are
covered so far, for example:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;run tests written for nose or unittest&lt;/li&gt;
&lt;li&gt;ad-hoc distribute tests to local or remote Python environments&lt;/li&gt;
&lt;li&gt;test compatibility with Python3&lt;/li&gt;
&lt;li&gt;run javascript unit-tests in real browsers&lt;/li&gt;
&lt;li&gt;coverage testing&lt;/li&gt;
&lt;li&gt;django-specific testing&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I'll conclude with upcoming features regarding testing-in-the-cloud and
plans on more test tool convergence. (URL:
&lt;a class="reference external" href="http://pytest.org/"&gt;http://pytest.org&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;[VIDEO HAS ISSUES: first 47 seconds or so are really quiet]&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Holger Krekel</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--rapid-multi-purpose-testing---81.html</guid><category>pycon</category><category>pycon2010</category><category>py.test</category><category>testing</category></item><item><title>Relational Database Applications</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--relational-database-applications.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Turbogears Database Applications (Relational Database Applications)&lt;/p&gt;
&lt;p&gt;Presented by Chris Perkins&lt;/p&gt;
&lt;p&gt;TurboGears2 provides a rich toolset to provide developers with a
platform for developing web applications with existing databases. This
â€œun-tutorialâ€ has a simple goal. The participants may bring in their
own databases, and we will explore how TurboGears can use this database
to create a working web application. If the student does not want to use
her own database, one will be provided. This tutorial will focus on the
TurboGears Admin system, along with relational databases.&lt;/p&gt;
&lt;p&gt;This tutorial is intended to be an un-tutorial. The idea is simple.
Bring a public database, (or 4) and share with the class as we explore
the new admin- level RESTful features that TurboGears2 employs.&lt;/p&gt;
&lt;p&gt;At the end of the class, the goal is for everyone to have a working TG2
application, with a working admin, at least one customized form or
table, based on a database they, or another student brought to class.&lt;/p&gt;
&lt;p&gt;Requirements&lt;/p&gt;
&lt;p&gt;Laptop with Python 2.5 or 2.6 installed. Database system of your choice
(Postgres, Sqlite, MySQL) Python drivers for your desired database
system installed. (psychopg2, pg8000, pysqlite, mysql-python)&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Perkins</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--relational-database-applications.html</guid><category>database</category><category>pycon</category><category>pycon2010</category><category>turbogears</category><category>tutorial</category></item><item><title>Remixing Music Pythonically (#157)</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--remixing-music-pythonically---157.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Remixing Music Pythonically&lt;/p&gt;
&lt;p&gt;Presented by Adam T. Lindsay&lt;/p&gt;
&lt;p&gt;The Echo Nest Remix API (&lt;a class="reference external" href="http://code.google.com/p/echo-nest-remix/"&gt;http://code.google.com/p/echo-nest-
remix/&lt;/a&gt;) was made open
source by The Echo Nest, a &amp;quot;music intelligence&amp;quot; company based in the
Boston area in the autumn of 2008. This talk will offer details on the
concise expressivity offered when editing multimedia driven by
content-based features, and some insights on what Pythonic magic did and
didn't work in the development of the modules. Audio and video examples
of the fun-yet-odd outputs that are possible will be shown.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Adam T. Lindsay</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--remixing-music-pythonically---157.html</guid><category>echo-nest-remix</category><category>music</category><category>pycon</category><category>pycon2010</category></item><item><title>Revisioned Databases for MultiUser Editing (#86)</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--revisioned-databases-for-multiuser-ed.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Revisioned Databases for MultiUser Editing&lt;/p&gt;
&lt;p&gt;Presented by John Rittenhouse (CCP Games)&lt;/p&gt;
&lt;p&gt;At CCP Games (www.ccpgames.com), we work on large MMO projects with tens
of content editors editing the same data. To make this possible, we
created a Revisioned Database framework that allows for us to create new
multiuser editing systems without data synchronization between users
having to be a major concern. In this talk, solutions we've tried are
discussed, the basic layout of our revision database shown, the Python
layer which handles it transparently for the programmer detailed, and
how the Python layer is used in practice. All of this is focused on
discussing what worked well and what pitfalls we ran into during
development.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">John Rittenhouse</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--revisioned-databases-for-multiuser-ed.html</guid><category>databases</category><category>pycon</category><category>pycon2010</category></item><item><title>Scaling Python webapps from zero to 50 million users - A top-down approach. (#134)</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--scaling-python-webapps-from-zero-to-5.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Scaling Python webapps from zero to 50 million users - A top-down
approach&lt;/p&gt;
&lt;p&gt;Presented by Jinal Jhaveri&lt;/p&gt;
&lt;p&gt;LOLapps is one of the top providers of social games and user generated
applications with 50+ million monthly uniques on Facebook, MySpace and
Bebo. This session will focus on the top-down approach we took to scale
our webapps for millions of users. Here are the 6 topics we will cover:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Why is performance a big issue for Social Media&lt;/li&gt;
&lt;li&gt;How we profiled our apps and found bottlenecks using custom developed
and existing middleware&lt;/li&gt;
&lt;li&gt;The web application best practices we applied and results obtained&lt;/li&gt;
&lt;li&gt;How we traced database connection leaks&lt;/li&gt;
&lt;li&gt;Our caching strategies and the changes we made to speed up the
memcache client&lt;/li&gt;
&lt;li&gt;Results of our experiment using Paster and Tornado as our web
servers.&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jinal Jhaveri</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--scaling-python-webapps-from-zero-to-5.html</guid><category>casestudy</category><category>database</category><category>memcache</category><category>paster</category><category>profiling</category><category>pycon</category><category>pycon2010</category><category>tornado</category></item><item><title>Scaling your Python application on EC2 (#191)</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--scaling-your-python-application-on-ec.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Scaling Your Python Application on EC2&lt;/p&gt;
&lt;p&gt;Presented by Jeremy Edberg&lt;/p&gt;
&lt;p&gt;Come hear about the trials and tribulations of moving reddit's Python
application from physical hardware to EC2's cloud infrastructure, and
how they have scaled since moving. Will include general discussion of
their learnings about scaling as well cloud specific issues.&lt;/p&gt;
&lt;p&gt;[VIDEO HAS ISSUES: Missing audio first few seconds]&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jeremy Edberg</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--scaling-your-python-application-on-ec.html</guid><category>pycon</category><category>pycon2010</category><category>reddit</category><category>scaling</category><category>web</category></item><item><title>Scrape the Web: Strategies for programming websites that don't expect it</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--scrape-the-web--strategies-for-progra.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;We'll discuss the basics of web scraping, and then dive into the details
of different methods and where they are most applicable. You'll leave
with an understanding of when to apply different tools, and learn about
automating a full web browser, a &amp;quot;heavy hammer&amp;quot; that I picked up at a
project for the Electronic Frontier Foundation.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Scrape the Web: Strategies for programming websites that don't expect it&lt;/p&gt;
&lt;p&gt;Presented by Asheesh Laroia&lt;/p&gt;
&lt;p&gt;Do you find yourself faced with websites that have data you need to
extract? Would your life be simpler if you could programmatically input
data into web applications, even those tuned to resist interaction by
bots?&lt;/p&gt;
&lt;p&gt;Year by year, the web is becoming a stronger force. Learn how to get the
best of it.&lt;/p&gt;
&lt;p&gt;We'll discuss the basics of web scraping, and then dive into the details
of different methods and where they are most applicable. You'll leave
with an understanding of when to apply different tools, and learn about
automating a full web browser, a &amp;quot;heavy hammer&amp;quot; that I picked up at a
project for the Electronic Frontier Foundation.&lt;/p&gt;
&lt;p&gt;Atendees should bring a laptop, if possible, to try the examples we
discuss and optionally take notes. Code samples will be made available
after class with no restrictions. Intended Audience&lt;/p&gt;
&lt;p&gt;Intermediate (or better) Python programmers, probably without extensive
web testing experience&lt;/p&gt;
&lt;p&gt;Class Outline&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;My motto: &amp;quot;The website is the API.&amp;quot;&lt;/li&gt;
&lt;li&gt;Choosing a parser: BeautifulSoup, lxml, HTMLParse, and html5lib.&lt;/li&gt;
&lt;li&gt;Extracting information, even in the face of bad HTML: Regular
expressions, BeautifulSoup, SAX, and XPath.&lt;/li&gt;
&lt;li&gt;Automatic template reverse-engineering tools.&lt;/li&gt;
&lt;li&gt;Submitting to forms.&lt;/li&gt;
&lt;li&gt;Playing with XML-RPC&lt;/li&gt;
&lt;li&gt;DO NOT BECOME AN EVIL COMMENT SPAMMER.&lt;/li&gt;
&lt;li&gt;Countermeasures, and circumventing them:&lt;ul&gt;
&lt;li&gt;IP address limits&lt;/li&gt;
&lt;li&gt;Hidden form fields&lt;/li&gt;
&lt;li&gt;User-agent detection&lt;/li&gt;
&lt;li&gt;JavaScript&lt;/li&gt;
&lt;li&gt;CAPTCHAs&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Plenty of full source code to working examples:&lt;ul&gt;
&lt;li&gt;Submitting to forms for text-to-speech.&lt;/li&gt;
&lt;li&gt;Downloading music from web stores.&lt;/li&gt;
&lt;li&gt;Automating Firefox with Selenium RC to navigate a pure-JavaScript
service.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Q&amp;amp;A; and workshopping&lt;/li&gt;
&lt;li&gt;Use your power for good, not evil.&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Asheesh Laroia</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--scrape-the-web--strategies-for-progra.html</guid><category>pycon</category><category>pycon2010</category><category>scraping</category><category>web</category></item><item><title>Seattle: A Python-based Platform for Easy Development and Deployment of Networked Systems and Applications (#162)</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--seattle--a-python-based-platform-for-.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A Python-based Platform for Easy Development and Deployment of Networked
Systems and Applications&lt;/p&gt;
&lt;p&gt;Presented by Ivan Beschastnikh, Justin Samuel, and Justin Cappos&lt;/p&gt;
&lt;p&gt;Seattle is an open-source platform for developing and deploying
networked applications. Core feature of Seattle is that it allows safe
execution of untrusted code on end-user systems. In our talk we look at
how we used Python to build a safe, restricted code execution
environment for Seattle that not only provides execution safety but also
enforces strict resource consumption limits. In addition, Seattle
includes a high-level API to hide inconsistent OS-specific behaviors
from developers. What results is a platform that welcomes the
participation of end-user machines for general-purpose distributed
programming and creates new possibilities for developers.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://seattle.cs.washington.edu/"&gt;http://seattle.cs.washington.edu/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[VIDEO HAS ISSUES: Beginning of talk missing, due to technical
problems.]&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ivan Beschastnikh</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--seattle--a-python-based-platform-for-.html</guid><category>api</category><category>language</category><category>mobile</category><category>network</category><category>p2p</category><category>pycon</category><category>pycon2010</category><category>seattle</category><category>security</category><category>university</category></item><item><title>Simple WSGI composition: story of one refactoring (#51)</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--simple-wsgi-composition--story-of-one.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Simple WSGI composition: story of one refactoring&lt;/p&gt;
&lt;p&gt;Presented by Max Ischenko&lt;/p&gt;
&lt;p&gt;Story of a refactoring I did to split one big, monolithic Pylons app
into a bunch of smaller ones, using power of WSGI and nginx. The devil
is in the details: how to handle common auth, site-wide look and feel,
common utilities, database management. Pros and cons of the approach,
possible alternatives.&lt;/p&gt;
&lt;p&gt;The talk assumes listeners know what WSGI is and preferably have used
some WSGI-centered framework like Pylons, Werkzeug, Paste or other.&lt;/p&gt;
&lt;p&gt;The application this talk describes powers developers.org.ua.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Max Ischenko</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--simple-wsgi-composition--story-of-one.html</guid><category>nginx</category><category>pycon</category><category>pycon2010</category><category>pylons</category><category>wsgi</category></item><item><title>Sprox: data driven web development (#137)</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--sprox--data-driven-web-development---.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Sprox: data driven web development&lt;/p&gt;
&lt;p&gt;Presented by Jorge L Vargas&lt;/p&gt;
&lt;p&gt;Sprox is a web frontend tool built to handle the creation and
manipulation of data.&lt;/p&gt;
&lt;p&gt;Sprox is smart about your data. You should never write repetitive code
again. Sane defaults and easy overwrites is what makes Sprox guess what
you need for your fields.&lt;/p&gt;
&lt;p&gt;This talk will give an overview of Sprox, what it does and how to use
it. Then we'll explore the available backends (SQLAlchemy, MongoDB) and
dive into the tgext.admin package, which is the &amp;quot;Admin Tool&amp;quot; for the
TurboGears2 framework.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jorge L Vargas</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--sprox--data-driven-web-development---.html</guid><category>mongodb</category><category>pycon</category><category>pycon2010</category><category>sprox</category><category>sqlalchemy</category></item><item><title>Sunday Afternoon Lightning Talks</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--sunday-afternoon-lightning-talks.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Plenary: Afternoon Lightning Talks&lt;/p&gt;
&lt;p&gt;(02:20) Steve Holden - Lightning talk about lightning talks&lt;/p&gt;
&lt;p&gt;(02:55) Michael Foord - Little Bit of Python podcast, upcoming unittest
stuff, mock&lt;/p&gt;
&lt;p&gt;(08:00) Harald Armin Massa - The real harm of functional programming&lt;/p&gt;
&lt;p&gt;(11:41) Karl ? - FreeBSD certiciation&lt;/p&gt;
&lt;p&gt;(13:50) Peter Fein - Please Pirate&lt;/p&gt;
&lt;p&gt;(19;15) Chris McDonough - writing books with Sphinx
(&lt;a class="reference external" href="http://bfg.repoze.org/book"&gt;repoze.bfg&lt;/a&gt;);
&lt;a class="reference external" href="https://www.createspace.com/"&gt;createspace&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;(22:05) Chris Petrilli - celery, distributed task queue&lt;/p&gt;
&lt;p&gt;(26:30) Godefroid Chapelle - vim and pdb&lt;/p&gt;
&lt;p&gt;(29:20) ? - fork() vs. threads&lt;/p&gt;
&lt;p&gt;(33:40) - doing pyweek game with a large number of contributors&lt;/p&gt;
&lt;p&gt;(38:05) Jason Huggins - Orbison&lt;/p&gt;
&lt;p&gt;(43:20) Noufal Brahim - State of Python community in India&lt;/p&gt;
&lt;p&gt;(47:40) Mike Müller - EuroSciPy 2010&lt;/p&gt;
&lt;p&gt;(49:50) David gives away stuff, sprint intros, ...&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Holden</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--sunday-afternoon-lightning-talks.html</guid><category>lightning talks</category><category>celery</category><category>euroscipy</category><category>euroscipy2010</category><category>fork</category><category>freebsd</category><category>functionalprogramming</category><category>india</category><category>orbison</category><category>pdb</category><category>pycon</category><category>pycon2010</category><category>pyweek</category><category>sphinx</category><category>threads</category><category>unittest</category><category>vim</category></item><item><title>Sunday Morning Lightning Talks</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--sunday-morning-lightning-talks.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Sunday morning lightning talks&lt;/p&gt;
&lt;p&gt;(00:20) Tim Cooper - Lightning sound bytes&lt;/p&gt;
&lt;p&gt;(01:05) Gregg Lind, Dan Callahan - Python spring cleanup, contributing
to FLOSS projects&lt;/p&gt;
&lt;p&gt;(05:30) Natalia Bidart, MatÃ­as Bordese, Facundo Batista - PyAr&lt;/p&gt;
&lt;p&gt;(10:40) D Huggins - You got your Cython in my NumPy&lt;/p&gt;
&lt;p&gt;(16:05) Ken Elkabany - PiCloud&lt;/p&gt;
&lt;p&gt;(21:20) Tim Fernando - Mobile web in Django&lt;/p&gt;
&lt;p&gt;(26:40) ? - Running a standard webapp on stackless; monkeypatching&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Various speakers</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--sunday-morning-lightning-talks.html</guid><category>lightning talks</category><category>contributing</category><category>cython</category><category>floss</category><category>pyar</category><category>pycloud</category><category>pycon</category><category>pycon2010</category><category>stackless</category></item><item><title>Supercharging Web Communications: Integrating Python-based Apps with Salesforce.com CRM (#152)</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--supercharging-web-communications--int.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Supercharging Web Communications: Integrating Python-based Apps with
Salesforce.com CRM&lt;/p&gt;
&lt;p&gt;Presented by Christopher Johnson&lt;/p&gt;
&lt;p&gt;Salesforce.com is a leading provider of Customer Relationship Management
(CRM) for enterprises (over 55,000 customers) and nonprofits (over 6,000
customers). While it handles sales, marketing and support processes, it
can be extended to automate any business process, making it a core part
of business operations. Python developers working with companies using
salesforce.com need to be able to integrate applications with
Salesforce. Luckily, Salesforce.com has an elegant and powerful SOAP
API. This presentation will introduce an example of using the Python
wrapper for the Salesforce.com API (Beatbox) in an interactive website.
While the library itself is powerful and can be used in custom Python
applications, the Python community can also leverage the advanced
integration between the Plone Content Management System (CMS) and
salesforce.com. We will demonstrate how a Plone website can post forms,
ecommerce transactions, and event RSVPs to salesforce. Additionally, we
will show how developers can make Salesforce.com data interactive in a
Plone website.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Christopher Johnson</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--supercharging-web-communications--int.html</guid><category>cms</category><category>crm</category><category>plone</category><category>pycon</category><category>pycon2010</category><category>web</category></item><item><title>Teaching compilers with python (#87)</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--teaching-compilers-with-python---87.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Teaching compilers with python&lt;/p&gt;
&lt;p&gt;Presented by Dr. Matthieu Amiguet&lt;/p&gt;
&lt;p&gt;Why choose Python to teach compilers?&lt;/p&gt;
&lt;p&gt;In the University of Applied Sciences ARC, compilers are taught in a
relatively short amount of time. Focus is put on the main conceptual
ideas, letting aside many technical details. Still, the students are
expected to write a full compiler within a few weeks' time.&lt;/p&gt;
&lt;p&gt;After trying the traditional C/Lex/Yacc based approach, and a more
education- oriented Java/Jaccie solution, we settled on Python and PLY,
plus a few enhancements (syntax tree graphical representation, decorator
to achieve better code separation).&lt;/p&gt;
&lt;p&gt;As a result, the students get a better understanding of the compiler
concepts and produce more interesting and creative projects.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dr. Matthieu Amiguet</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--teaching-compilers-with-python---87.html</guid><category>ply</category><category>pycon</category><category>pycon2010</category></item><item><title>Tests and Testability (#188)</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--tests-and-testability---188.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Tests and Testability&lt;/p&gt;
&lt;p&gt;Presented by Ned Batchelder&lt;/p&gt;
&lt;p&gt;Testing software is difficult. Large complex systems don't lend
themselves naturally to automated testing. This isn't just because they
are large, it's because developers often don't consider how testable
their code is. Testability is as important as all the other -ilities in
your code (portability, maintainability, efficiency, etc).&lt;/p&gt;
&lt;p&gt;Testability is a characteristic of your code that makes it easier to
test. Increased testability can give you better tests, but it also gives
you just plain better code. Improving testability generally means
considering the interfaces to your internal modules and improving them
to provide better modularity. This improvement often has benefits in
your product code.&lt;/p&gt;
&lt;p&gt;I'll discuss specific examples to demonstrate how code can be made more
testable. Mocks, dependency injection, and crisp API design are just a
few of the techniques that can improve your code's testability and make
you a happier person.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ned Batchelder</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--tests-and-testability---188.html</guid><category>pycon</category><category>pycon2010</category><category>testing</category></item><item><title>The Meaty Parts of Python: Closures, Decorators, List Comprehension, and Functional Constructs</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--the-meaty-parts-of-python--closures--.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The Meaty Parts of Python: Closures, Decorators, List Comprehension, and
Functional Constructs&lt;/p&gt;
&lt;p&gt;Presented by Matt Harrison&lt;/p&gt;
&lt;p&gt;Are you new to Python and want to learn how to step it up to the next
level? Have you wondered about functional programming, closures,
decorators, generators or list comprehensions and when you should use
them? This hands-on tutorial will cover these intermediate subjects in
detail, by explaining the theory behind them then walking through
examples. It will also cover how to test such programs. The session will
conclude with some basic problems to work through.&lt;/p&gt;
&lt;p&gt;Outline:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Testing (45 min)&lt;ul&gt;
&lt;li&gt;unittest&lt;/li&gt;
&lt;li&gt;doctest&lt;/li&gt;
&lt;li&gt;brief code coverage intro&lt;/li&gt;
&lt;li&gt;other testing tools&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Functional Programming (15 min)&lt;ul&gt;
&lt;li&gt;lambda&lt;/li&gt;
&lt;li&gt;map&lt;/li&gt;
&lt;li&gt;reduce&lt;/li&gt;
&lt;li&gt;filter&lt;/li&gt;
&lt;li&gt;Substitutes for above constructs&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Functions (20 min)&lt;ul&gt;
&lt;li&gt;callables&lt;/li&gt;
&lt;li&gt;arguments (args, kw)&lt;/li&gt;
&lt;li&gt;mutable parameters&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Scoping (10 min)&lt;/li&gt;
&lt;li&gt;Closures (5 min)&lt;/li&gt;
&lt;li&gt;Decorators (20 min)&lt;ul&gt;
&lt;li&gt;Simple decorators&lt;/li&gt;
&lt;li&gt;parameterized decorators&lt;/li&gt;
&lt;li&gt;mangling&lt;/li&gt;
&lt;li&gt;templates for decorators&lt;/li&gt;
&lt;li&gt;classmethod staticmethod&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Properties (5 min)&lt;/li&gt;
&lt;li&gt;List comprehensions (10 min)&lt;/li&gt;
&lt;li&gt;Iterator pattern (5 min)&lt;/li&gt;
&lt;li&gt;Generators (15 min )&lt;/li&gt;
&lt;li&gt;Hands-on application (50 min)&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Matt Harrison</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--the-meaty-parts-of-python--closures--.html</guid><category>callables</category><category>closures</category><category>decorators</category><category>functionalprogramming</category><category>functions</category><category>generators</category><category>iterators</category><category>listcomprehensions</category><category>pycon</category><category>pycon2010</category><category>python-advanced</category></item><item><title>The Python and the Elephant: Large Scale Natural Language Processing with NLTK and Dumbo (#120)</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--the-python-and-the-elephant--large-sc.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The Python and the Elephant: Large Scale Natural Language Processing
with NLTK and Dumbo&lt;/p&gt;
&lt;p&gt;Presented by Nitin Madnani (University of Maryland, College Park); Dr.
Jimmy J Lin (University of Maryland)&lt;/p&gt;
&lt;p&gt;A practical look at NLTK and Dumbo, python-powered and open-source
toolkits and APIs for processing natural language on a large scale.&lt;/p&gt;
&lt;p&gt;For people like us who make a living trying to make a computer
&amp;quot;understand&amp;quot; human language, Python is a very powerful language, given
its rapid prototyping abilities, native unicode support and a stellar
standard library. This relationship has been strengthened further by an
open-source, python- based Natural Language ToolKit
(&lt;a class="reference external" href="http://www.nltk.org/"&gt;www.nltk.org&lt;/a&gt;) which is being widely used in
the community for both teaching and research purposes and gaining
traction in the general Python community as well
(&lt;a class="reference external" href="http://www.nltk.org/book"&gt;www.nltk.org/book&lt;/a&gt;). Recently, the Python
community has seen the release of Dumbo
(&lt;a class="reference external" href="http://wiki.github.com/klbostee/dumbo"&gt;http://wiki.github.com/klbostee/dumb
o&lt;/a&gt;), an open-source,
python-based cloud-computing API (based on Hadoop) via the hands of
Klaas Bosteels.&lt;/p&gt;
&lt;p&gt;In this talk, we show how the amalgamation of Python, NLTK and Dumbo can
allow for very large-scale natural language processing efficiently and
elegantly.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dr. Jimmy J Lin</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--the-python-and-the-elephant--large-sc.html</guid><category>dumbo</category><category>nltk</category><category>pycon</category><category>pycon2010</category></item><item><title>The speed of PyPy (#83)</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--the-speed-of-pypy---83.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The Speed of PyPy&lt;/p&gt;
&lt;p&gt;Presented by Maciej Fijalkowski (merlinux GmbH, pypy)&lt;/p&gt;
&lt;p&gt;The first part of the talk will cover PyPy's speed achievements
resulting from the last year's work on the Just-In-Time Compiler. I'll
present and discuss a number of benchmarks and compare against other
Python-speed projects. I'll also cover the basics of how the JIT works
and what sort of programs it can greatly speedup (and which ones it
can't).&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Maciej Fijalkowski</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--the-speed-of-pypy---83.html</guid><category>pycon</category><category>pycon2010</category><category>pypy</category></item><item><title>The state of Packaging (#63)</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--the-state-of-packaging---63.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The state of Packaging&lt;/p&gt;
&lt;p&gt;Presented by Tarek Ziadé&lt;/p&gt;
&lt;p&gt;The Python Package Index (PyPI) became over the last years an essential
tool to share your Python programs. As long as you use Distutils
standards, you can register and upload your work at PyPI in a few
seconds.&lt;/p&gt;
&lt;p&gt;Projects like Setuptools and Pip added great features on the top of this
: the ability to fetch PyPI to install a project and its dependencies.
So you can &amp;quot;easy_install A-Program&amp;quot; and everything is done
automatically for you.&lt;/p&gt;
&lt;p&gt;But all these features have shown the flaws and limitations of the
current Distutils design, and the urgency to make it evolve with respect
to the existing OS-specific packaging systems.&lt;/p&gt;
&lt;p&gt;This talk will detail the biggest issues that need to be solved, and the
work that is being done. It will end up with a presentation of the
Distutils roadmap, and an overview of the Distribute project, the
Setuptools replacer.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Tarek Ziadé</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--the-state-of-packaging---63.html</guid><category>distribute</category><category>distutils</category><category>easy_install</category><category>packaging</category><category>pip</category><category>pycon</category><category>pycon2010</category><category>pypi</category><category>setuptools</category></item><item><title>The Zen of CherryPy (#111)</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--the-zen-of-cherrypy---111.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The Zen of CherryPy&lt;/p&gt;
&lt;p&gt;Presented by Robert E Brewer&lt;/p&gt;
&lt;p&gt;CherryPy will be 8 years old in June 2010! This presentation will look
at the &amp;quot;Zen of CherryPy&amp;quot;: a set of 10 design guidelines which CherryPy
has developed over those years, explaining why they're useful, why some
are uniquely Python, and how to apply them in your own projects.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Robert E Brewer</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--the-zen-of-cherrypy---111.html</guid><category>cherrypy</category><category>pycon</category><category>pycon2010</category></item></channel></rss>