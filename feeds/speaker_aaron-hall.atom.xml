<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_aaron-hall.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2017-05-20T00:00:00+00:00</updated><entry><title>Slot or not: higher performance custom objects in pure Python</title><link href="https://pyvideo.org/pycon-us-2017/slot-or-not-higher-performance-custom-objects-in-pure-python.html" rel="alternate"></link><published>2017-05-20T00:00:00+00:00</published><updated>2017-05-20T00:00:00+00:00</updated><author><name>Aaron Hall</name></author><id>tag:pyvideo.org,2017-05-20:pycon-us-2017/slot-or-not-higher-performance-custom-objects-in-pure-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;tt class="docutils literal"&gt;__slots__&lt;/tt&gt; are versatile for certain kinds of uses and users, if you
know how they work.&lt;/p&gt;
&lt;p&gt;At first glance, they seem like a free lunch, with improvements in both
time and space. At second glance, they seem to have so many caveats to
make them not worth using.&lt;/p&gt;
&lt;p&gt;This talk is a deep dive into how &lt;tt class="docutils literal"&gt;__slots__&lt;/tt&gt; work, how to wring every
benefit out, as well as the actual caveats and alternatives, with
recommendations for writers of core libraries as well as end users.&lt;/p&gt;
</summary></entry><entry><title>Best Practices for Writing Reusable Python</title><link href="https://pyvideo.org/pygotham-2016/best-practices-for-writing-reusable-python.html" rel="alternate"></link><published>2016-07-16T00:00:00+00:00</published><updated>2016-07-16T00:00:00+00:00</updated><author><name>Aaron Hall</name></author><id>tag:pyvideo.org,2016-07-16:pygotham-2016/best-practices-for-writing-reusable-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;We all want to write reusable maintainable code that follows best practices, but how? The &amp;quot;what&amp;quot; is easy, but the nuts and bolts are elusive. This talk discusses various ways of accomplishing this with multiple tested pathways. Who should come to this talk? Data Scientists, Web-Devs, Dev-Ops, if you've written code you want others to use, if you want to write code that others will use, this is for you. Who shouldn't come to this talk? If you already publish your own packages on PyPI and you get no joy out of critiquing people who give Best Practices talks, you might benefit more from one of the other talks.&lt;/p&gt;
</summary></entry><entry><title>The Python Datamodel: When and how to write objects</title><link href="https://pyvideo.org/pygotham-2015/the-python-datamodel-when-and-how-to-write-objec.html" rel="alternate"></link><published>2015-08-16T00:00:00+00:00</published><updated>2015-08-16T00:00:00+00:00</updated><author><name>Aaron Hall</name></author><id>tag:pyvideo.org,2015-08-16:pygotham-2015/the-python-datamodel-when-and-how-to-write-objec.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;We've been told to stop writing objects. We've been told to write more
objects.&lt;/p&gt;
&lt;p&gt;In this talk, we cover the Python datamodel, when to begin writing
objects, what methods to start with that leverage the Python data model,
and how to use the &amp;quot;magic&amp;quot; methods of Python. This talk assumes you know
a few of the basic builtin data structures of Python (dicts) and have at
least passing familiarity with operators (+, -, * , /, in, etc...)&lt;/p&gt;
&lt;p&gt;Which should we be doing? When? How?&lt;/p&gt;
</summary></entry></feed>