<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_vlad-temian.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2015-08-03T00:00:00+00:00</updated><entry><title>gitfs - building a filesystem in Python</title><link href="https://pyvideo.org/europython-2015/europython-2015-vlad-temian-gitfs-building-a-filesystem-in-python.html" rel="alternate"></link><published>2015-08-03T00:00:00+00:00</published><updated>2015-08-03T00:00:00+00:00</updated><author><name>Vlad Temian</name></author><id>tag:pyvideo.org,2015-08-03:europython-2015/europython-2015-vlad-temian-gitfs-building-a-filesystem-in-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Vlad Temian - gitfs - building a filesystem in Python
[EuroPython 2015]
[23 July 2015]
[Bilbao, Euskadi, Spain]&lt;/p&gt;
&lt;p&gt;gitfs is an open-source[1] filesystem which was designed to bring the
full powers of Git to everyone, no matter how little they know about
versioning. A user can mount any repository and all the his changes
will be automatically converted into commits. gitfs will also expose
the history of the branch you’re currently working on by simulating
snapshots of every commit.&lt;/p&gt;
&lt;p&gt;gitfs is useful in places where you want to keep track of all your
files, but at the same time you don’t have the possibility of
organizing everything into commits yourself. A FUSE filesystem for git
repositories, with local cache.&lt;/p&gt;
&lt;p&gt;In this talk we will take a look at some of the crucial aspects
involved in building a reliable FUSE filesystem, the steps that we
took in building gitfs, especially in handling the git objects (http
://git-scm.com/book/en/v2/Git-Internals-Git-Objects), what testing
methods we have used for it and also we will share the most important
lessons learned while building it.&lt;/p&gt;
&lt;p&gt;The prerequisites for this talk are:
A good understanding of how Git works
Basic understaning of Operating Systems concepts&lt;/p&gt;
&lt;p&gt;[1] You can get the source here - &lt;a class="reference external" href="https://github.com/PressLabs/gitfs"&gt;https://github.com/PressLabs/gitfs&lt;/a&gt;; you cand find more details here - &lt;a class="reference external" href="http://www.presslabs.com/gitfs/"&gt;http://www.presslabs.com/gitfs/&lt;/a&gt;.&lt;/p&gt;
</summary></entry><entry><title>gitfs - building a filesystem in Python</title><link href="https://pyvideo.org/pycon-italia-2015/gitfs-building-a-filesystem-in-python.html" rel="alternate"></link><published>2015-05-29T00:00:00+00:00</published><updated>2015-05-29T00:00:00+00:00</updated><author><name>Emanuel Danci</name></author><id>tag:pyvideo.org,2015-05-29:pycon-italia-2015/gitfs-building-a-filesystem-in-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;gitfs is an open-source[1] filesystem which was designed to bring the
full powers of Git to everyone, no matter how little they know about
versioning. A user can mount any repository and all the his changes will
be automatically converted into commits. gitfs will also expose the
history of the branch you’re currently working on by simulating
snapshots of every commit. gitfs is useful in places where you want to
keep track of all your files, but at the same time you don’t have the
possibility of organizing everything into commits yourself. A FUSE
filesystem for git repositories, with local cache. In this talk we will
take a look at some of the crucial aspects involved in building a
reliable FUSE filesystem, the steps that we took in building gitfs,
especially in handling the git objects
(&lt;a class="reference external" href="http://git-scm.com/book/en/v2/Git-Internals-Git-Objects"&gt;http://git-scm.com/book/en/v2/Git-Internals-Git-Objects&lt;/a&gt;), what testing
methods we have used for it and also we will share the most important
lessons learned while building it. The prerequisites for this talk are:&lt;/p&gt;
&lt;p&gt;A good understanding of how Git works Basic understaning of Operating
Systems concepts&lt;/p&gt;
&lt;p&gt;[1] You can get the source here - &lt;a class="reference external" href="https://github.com/PressLabs/gitfs"&gt;https://github.com/PressLabs/gitfs&lt;/a&gt;;
you cand find more details here - &lt;a class="reference external" href="http://www.presslabs.com/gitfs/"&gt;http://www.presslabs.com/gitfs/&lt;/a&gt;.&lt;/p&gt;
</summary></entry><entry><title>GitFs: Building a file system in Python</title><link href="https://pyvideo.org/pycon-se-2015/gitfs-building-a-file-system-in-python.html" rel="alternate"></link><published>2015-06-04T00:00:00+00:00</published><updated>2015-06-04T00:00:00+00:00</updated><author><name>Vlad Temian</name></author><id>tag:pyvideo.org,2015-06-04:pycon-se-2015/gitfs-building-a-file-system-in-python.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;GitFs is an open-source filesystem which was designed to bring the full
powers of Git to everyone, no matter how little they know about
versioning. In this talk we will take a look at some of the crucial
aspects involved in building a reliable FUSE filesystem, the steps that
we took in building GitFs, especially in handling the git objects, what
testing methods we have used for it and also we will share the most
important lessons learned while building it.&lt;/p&gt;
</summary></entry></feed>