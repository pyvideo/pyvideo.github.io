<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_andrew-godwin.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2019-09-25T00:00:00+00:00</updated><entry><title>Just Add Await: Retrofitting Async Into Django</title><link href="https://pyvideo.org/djangocon-us-2019/just-add-await-retrofitting-async-into-django.html" rel="alternate"></link><published>2019-09-25T00:00:00+00:00</published><updated>2019-09-25T00:00:00+00:00</updated><author><name>Andrew Godwin</name></author><id>tag:pyvideo.org,2019-09-25:djangocon-us-2019/just-add-await-retrofitting-async-into-django.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;DjangoCon 2019 - Just Add Await: Retrofitting Async Into Django by Andrew Godwin&lt;/p&gt;
&lt;p&gt;Writing async code from scratch is hard; trying to add it into a large, existing framework is harder. Learn about the problems we face trying to make Django async while maintaining backwards compatibility, as well as the problems maintaining hybrid sync-and-async Python codebases in general.&lt;/p&gt;
&lt;p&gt;This talk was presented at: &lt;a class="reference external" href="https://2019.djangocon.us/talks/just-add-await-retrofitting-async-into/"&gt;https://2019.djangocon.us/talks/just-add-await-retrofitting-async-into/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;LINKS:
Follow Andrew Godwin ðŸ‘‡
On Twitter: &lt;a class="reference external" href="https://twitter.com/andrewgodwin"&gt;https://twitter.com/andrewgodwin&lt;/a&gt;
Official homepage: &lt;a class="reference external" href="http://www.aeracode.org"&gt;http://www.aeracode.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Follow DjangCon US ðŸ‘‡
&lt;a class="reference external" href="https://twitter.com/djangocon"&gt;https://twitter.com/djangocon&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Follow DEFNA ðŸ‘‡
&lt;a class="reference external" href="https://twitter.com/defnado"&gt;https://twitter.com/defnado&lt;/a&gt;
&lt;a class="reference external" href="https://www.defna.org/"&gt;https://www.defna.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Intro music: &amp;quot;This Is How We Quirk It&amp;quot; by Avocado Junkie.
Video production by Confreaks TV.
Captions by White Coat Captioning.&lt;/p&gt;
</summary></entry><entry><title>Just Add Await: Retrofitting Async Into Django</title><link href="https://pyvideo.org/pycon-au-2019/just-add-await-retrofitting-async-into-django.html" rel="alternate"></link><published>2019-08-02T00:00:00+00:00</published><updated>2019-08-02T00:00:00+00:00</updated><author><name>Andrew Godwin</name></author><id>tag:pyvideo.org,2019-08-02:pycon-au-2019/just-add-await-retrofitting-async-into-django.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Writing async code from scratch is hard; trying to add it into a large, existing framework is harder. Learn about the problems we face trying to make Django async while maintaining backwards compatibility, as well as the problems maintaining hybrid sync-and-async Python codebases in general.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://2019.pycon-au.org/talks/just-add-await-retrofitting-async-into-django"&gt;https://2019.pycon-au.org/talks/just-add-await-retrofitting-async-into-django&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Fri Aug  2 14:10:00 2019 at C3.3&lt;/p&gt;
</summary></entry><entry><title>Terrain, Art, Python and LiDAR</title><link href="https://pyvideo.org/pycon-us-2019/terrain-art-python-and-lidar.html" rel="alternate"></link><published>2019-05-03T11:30:00+00:00</published><updated>2019-05-03T11:30:00+00:00</updated><author><name>Andrew Godwin</name></author><id>tag:pyvideo.org,2019-05-03:pycon-us-2019/terrain-art-python-and-lidar.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Seeing the Earth from above is truly breathtaking, but it takes a lot of
time, fuel and opportunity - so instead, why not make miniature art of
the world's famous terrains?&lt;/p&gt;
&lt;p&gt;This talk explores using Python to take raw terrain data - from aerial
lidar and space-based radar scans - and processing it into 3D models,
and CAD/CAM toolpaths, with the ultimate result of making Python-powered
artwork of some of Earth's natural wonders.&lt;/p&gt;
&lt;p&gt;See how to reduce each National Park to a small, intricately-milled
metal carving, how to laser-cut a side-on relief of a whole Hawaiian
island, or how to 3D print tiny versions of cities where you can make
out each individual building - and the strengths and challenges of using
Python to handle 3D and GIS data.&lt;/p&gt;
&lt;p&gt;We'll also look at some basic 3D modelling code, discuss the wonders of
different map projections, and how personal LiDAR is slowly, but surely,
becoming affordable.&lt;/p&gt;
</summary><category term="talk"></category></entry><entry><title>Taking Django Async</title><link href="https://pyvideo.org/pycon-es-2018/taking-django-async.html" rel="alternate"></link><published>2018-10-06T00:00:00+00:00</published><updated>2018-10-06T00:00:00+00:00</updated><author><name>Andrew Godwin</name></author><id>tag:pyvideo.org,2018-10-06:pycon-es-2018/taking-django-async.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The Django Channels project has taken a major turn with version 2.0, embracing Python's async functionality and building applications around an async event loop rather than worker processes. But why the big change? And what does it mean for Django?&lt;/p&gt;
&lt;p&gt;We'll look at the progress Channels is making in turning more of the request/response cycle into native async code - how far can we get down the stack before making APIs async becomes hard? Can we make it as far as the ORM? How do we bridge between Django's synchronous world and the async world when we do reach that boundary?&lt;/p&gt;
&lt;p&gt;We also take a look at how it's changed both Channels consumers, opening up the possibility of mixing async calls in with your synchronous code, and how it's changed what the ASGI spec looks like and what that might mean for adoption.&lt;/p&gt;
&lt;p&gt;And, finally, we'll look what's next for Django and Channels, and maybe how it will affect the Python web world as a whole.&lt;/p&gt;
</summary><category term="django async"></category></entry><entry><title>Taking Channels Async</title><link href="https://pyvideo.org/djangocon-europe-2018/taking-channels-async.html" rel="alternate"></link><published>2018-05-24T00:00:00+00:00</published><updated>2018-05-24T00:00:00+00:00</updated><author><name>Andrew Godwin</name></author><id>tag:pyvideo.org,2018-05-24:djangocon-europe-2018/taking-channels-async.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;We take a look at Channels 2.0 and the changes it brings by going fully async, examining not only why the change makes things better, but also how we've managed to bridge between Django's synchronous world and the async world, and what the future might hold for Django and Channels.&lt;/p&gt;
&lt;p&gt;The Channels project has taken a major turn with version 2.0, embracing Python's async functionality and building applications around an async event loop rather than worker processes. But why the big change? And what does it mean for Django?&lt;/p&gt;
&lt;p&gt;We'll look at the progress Channels is making in turning more of the request/response cycle into native async code - how far can we get down the stack before making APIs async becomes hard? Can we make it as far as the ORM? How do we bridge between Django's synchronous world and the async world when we do reach that boundary?&lt;/p&gt;
&lt;p&gt;We also take a look at how it's changed both Channels consumers, opening up the possibility of mixing async calls in with your synchronous code, and how it's changed what the ASGI spec looks like and what that might mean for adoption.&lt;/p&gt;
&lt;p&gt;And, finally, we'll look what's next for Django and Channels, and maybe how it will affect the Python web world as a whole.&lt;/p&gt;
&lt;p&gt;Andrew Godwin&lt;/p&gt;
</summary></entry><entry><title>You Have Control - Learning lessons from aviation</title><link href="https://pyvideo.org/pycon-au-2018/you-have-control-learning-lessons-from-aviation.html" rel="alternate"></link><published>2018-08-26T00:00:00+00:00</published><updated>2018-08-26T00:00:00+00:00</updated><author><name>Andrew Godwin</name></author><id>tag:pyvideo.org,2018-08-26:pycon-au-2018/you-have-control-learning-lessons-from-aviation.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Software (and Python) is growing to power ever more of the world, and itâ€™s only getting more complex. How do we handle large distributed systems? Handle cascading failure? Prepare for emergencies and downtime? Aviation has been through it all, and weâ€™ll look at how we can learn from them.&lt;/p&gt;
</summary></entry><entry><title>Taking Django Async</title><link href="https://pyvideo.org/pycon-au-2018/taking-django-async.html" rel="alternate"></link><published>2018-08-24T00:00:00+00:00</published><updated>2018-08-24T00:00:00+00:00</updated><author><name>Andrew Godwin</name></author><id>tag:pyvideo.org,2018-08-24:pycon-au-2018/taking-django-async.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;We take a look at Django and Channels 2.0 and the changes it brings by going fully async - Examining not only why the change makes things better, but also how it's managed to bridge between Django's synchronous world and the async world. Plus, what might the future hold for Django and Channels?&lt;/p&gt;
</summary></entry><entry><title>You Have Control: Learning From Aviation</title><link href="https://pyvideo.org/pycon-israel-2018/you-have-control-learning-from-aviation.html" rel="alternate"></link><published>2018-06-04T00:00:00+00:00</published><updated>2018-06-04T00:00:00+00:00</updated><author><name>Andrew Godwin</name></author><id>tag:pyvideo.org,2018-06-04:pycon-israel-2018/you-have-control-learning-from-aviation.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;As we move forward into the world of distributed systems, microservices, and hosted platforms, we find ourselves in a world where there are more moving parts and potential points of failure than ever, in an industry that traditionally has a poor approach to error handling and failure. What are these problems? How do we solve them not only through code, but through training and processes? And how can we learn from other industries that have tackled them before?&lt;/p&gt;
</summary></entry><entry><title>Taking Django Async</title><link href="https://pyvideo.org/pycon-us-2018/taking-django-async.html" rel="alternate"></link><published>2018-05-11T00:00:00+00:00</published><updated>2018-05-11T00:00:00+00:00</updated><author><name>Andrew Godwin</name></author><id>tag:pyvideo.org,2018-05-11:pycon-us-2018/taking-django-async.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The Django Channels project has taken a major turn with version 2.0, embracing Python's async functionality and building applications around an async event loop rather than worker processes.&lt;/p&gt;
&lt;p&gt;Doing this, however, wasn't easy. We'll look through some of the techniques used to make Django coexist in this async world, including handing off between async and sync code, writing fully asynchronous HTTP and WebSocket handling, and what this means for the future of Django, and maybe Python web frameworks in general.&lt;/p&gt;
</summary><category term="django"></category><category term="async"></category><category term="django channels"></category></entry><entry><title>Closing Keynote</title><link href="https://pyvideo.org/pycon-singapore-2015/closing-keynote.html" rel="alternate"></link><published>2015-06-19T00:00:00+00:00</published><updated>2015-06-19T00:00:00+00:00</updated><author><name>Andrew Godwin</name></author><id>tag:pyvideo.org,2015-06-19:pycon-singapore-2015/closing-keynote.html</id><summary type="html"></summary><category term="keynote"></category></entry><entry><title>Scaling Down: Running Large Sites Locally</title><link href="https://pyvideo.org/pycon-au-2017/scaling-down-running-large-sites-locally.html" rel="alternate"></link><published>2017-08-05T00:00:00+00:00</published><updated>2017-08-05T00:00:00+00:00</updated><author><name>Andrew Godwin</name></author><id>tag:pyvideo.org,2017-08-05:pycon-au-2017/scaling-down-running-large-sites-locally.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;At Eventbrite we have a moderately complex site - lots of different services, datastores, caches and other moving parts. It's all managed by our wonderful Ops team in production, and scaling up there is a problem we're working on, but what about scaling down? How do you get over a hundred moving parts to run on hundreds of developer laptops with limited RAM and big demands on productivity and development speed?&lt;/p&gt;
&lt;p&gt;We'll go through how we developed a custom development environment based around Docker containers and a Python-based tool called &lt;cite&gt;bay&lt;/cite&gt; that manages not only what containers to run but also how to interlink them, how changes propagate through the system, and how to keep up with all the changes streaming in from outside.&lt;/p&gt;
</summary></entry><entry><title>Horrors of Distributed Systems</title><link href="https://pyvideo.org/pycon-au-2017/horrors-of-distributed-systems.html" rel="alternate"></link><published>2017-08-04T00:00:00+00:00</published><updated>2017-08-04T00:00:00+00:00</updated><author><name>Andrew Godwin</name></author><id>tag:pyvideo.org,2017-08-04:pycon-au-2017/horrors-of-distributed-systems.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Many projects grow to the point where distributed systems are needed - or even more excitingly, plunge into it headfirst my adopting microservices - but along with the obvious challenges of more servers and more storage, there's all sorts of hidden dangers that you might never even have planned for.&lt;/p&gt;
&lt;p&gt;Learn about the wonders of hardware issues, networks that can't even fail correctly, delivery tradeoffs, cosmic rays and problems with time itself, and how you can be a bit more prepared for these sorts of challenges in the future - even if you're still a small project.&lt;/p&gt;
</summary></entry><entry><title>Services, Architecture &amp; Channels</title><link href="https://pyvideo.org/djangocon-europe-2017/services-architecture-channels.html" rel="alternate"></link><published>2017-04-03T00:00:00+00:00</published><updated>2017-04-03T00:00:00+00:00</updated><author><name>Andrew Godwin</name></author><id>tag:pyvideo.org,2017-04-03:djangocon-europe-2017/services-architecture-channels.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Powering a website with services and microservices has both benefits and challenges; learn about both as we look at the challenges of porting code from a monolith to run as individual services, and the variety of ways you can structure services and communication.&lt;/p&gt;
&lt;p&gt;We'll also take a detailed look at using the underlying components of Channels (ASGI) for service transport, and how the tradeoffs it's built upon affect service architecture and deployment, including real world examples and experiences.&lt;/p&gt;
</summary></entry><entry><title>Optimising Queries For Fun And Profit</title><link href="https://pyvideo.org/pycon-ukraine-2012/optimising-queries-for-fun-and-profit.html" rel="alternate"></link><published>2012-10-20T00:00:00+00:00</published><updated>2012-10-20T00:00:00+00:00</updated><author><name>Andrew Godwin</name></author><id>tag:pyvideo.org,2012-10-20:pycon-ukraine-2012/optimising-queries-for-fun-and-profit.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Lean about some common optimisations and anti-patterns before going on a deeper dive into relational databases - schema changes with no downtime, tuning indexes, using special column types and more, as well as some of the new features appearing in relational databases. The talk will have a focus on Django and PostgreSQL, but will also cover other databases and be helpful to people writing database code in any environment.&lt;/p&gt;
</summary></entry><entry><title>Andrew Godwin about Channels at Django: Under The Hood 2016</title><link href="https://pyvideo.org/django-under-the-hood-2016/andrew-godwin-about-channels-at-django-under-the-hood-2016.html" rel="alternate"></link><published>2016-11-03T00:00:00+00:00</published><updated>2016-11-03T00:00:00+00:00</updated><author><name>Andrew Godwin</name></author><id>tag:pyvideo.org,2016-11-03:django-under-the-hood-2016/andrew-godwin-about-channels-at-django-under-the-hood-2016.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Slides: &lt;a class="reference external" href="https://speakerdeck.com/andrewgodwin/channels-under-the-hood"&gt;https://speakerdeck.com/andrewgodwin/channels-under-the-hood&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Django: Under The Hood: &lt;a class="reference external" href="http://djangounderthehood.com/"&gt;http://djangounderthehood.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Django: Under The Hood is an annual Django conference for experienced Django developers. Come and learn about the internals of Django, and help to shape its future.&lt;/p&gt;
</summary></entry><entry><title>Django migrations</title><link href="https://pyvideo.org/django-under-the-hood-2014/django-migrations.html" rel="alternate"></link><published>2014-11-14T00:00:00+00:00</published><updated>2014-11-14T00:00:00+00:00</updated><author><name>Andrew Godwin</name></author><id>tag:pyvideo.org,2014-11-14:django-under-the-hood-2014/django-migrations.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Slides: &lt;a class="reference external" href="https://speakerdeck.com/andrewgodwin/migrations-under-the-hood"&gt;https://speakerdeck.com/andrewgodwin/migrations-under-the-hood&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Django: Under The Hood: &lt;a class="reference external" href="http://djangounderthehood.com/"&gt;http://djangounderthehood.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Django: Under The Hood is an annual Django conference for experienced Django developers. Come and learn about the internals of Django, and help to shape its future.&lt;/p&gt;
</summary></entry><entry><title>Reinventing Django for the Real-Time Web</title><link href="https://pyvideo.org/djangocon-au-2016/reinventing-django-for-the-real-time-web.html" rel="alternate"></link><published>2016-08-12T00:00:00+00:00</published><updated>2016-08-12T00:00:00+00:00</updated><author><name>Andrew Godwin</name></author><id>tag:pyvideo.org,2016-08-12:djangocon-au-2016/reinventing-django-for-the-real-time-web.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Andrew Godwin
&lt;a class="reference external" href="https://2016.pycon-au.org/schedule/28/view_talk"&gt;https://2016.pycon-au.org/schedule/28/view_talk&lt;/a&gt;
Django's new Channels feature takes Django beyond the world of HTTP's request-response protocol and into the modern Web protocol world of WebSockets and real-time communication - but it also does a lot more. Learn how Django can now respond to WebSockets, emails or instant messages as easily as HTTP, and we re-architected Django to support all these changes while keeping a clean API and backwards compatibility, and the implications it has for the wider Python ecosystem.&lt;/p&gt;
</summary></entry><entry><title>DjangoCon 2008 Panel: Schema Evolution</title><link href="https://pyvideo.org/djangocon-us-2008/djangocon-2008-panel-schema-evolution.html" rel="alternate"></link><published>2008-09-06T00:00:00+00:00</published><updated>2008-09-06T00:00:00+00:00</updated><author><name>Michael Trier</name></author><id>tag:pyvideo.org,2008-09-06:djangocon-us-2008/djangocon-2008-panel-schema-evolution.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Moderator:
Michael Trier&lt;/p&gt;
&lt;p&gt;Panelists:
Simon Willison, Russ Keith-Magee, Andrew Godwin&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.djangocon.org"&gt;http://www.djangocon.org&lt;/a&gt;&lt;/p&gt;
</summary><category term="Django"></category><category term="panel"></category><category term="djangocon"></category><category term="djangocon2008"></category></entry><entry><title>Good schema design - and why it matters!</title><link href="https://pyvideo.org/djangocon-europe-2014/good-schema-design-and-why-it-matters.html" rel="alternate"></link><published>2014-05-15T00:00:00+00:00</published><updated>2014-05-15T00:00:00+00:00</updated><author><name>Andrew Godwin</name></author><id>tag:pyvideo.org,2014-05-15:djangocon-europe-2014/good-schema-design-and-why-it-matters.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Pretty much every website is underpinned by a database or two - and how
you're storing data in there really matters. This talk will cover the
best ways to set up your schema to store your data, how to change your
schema without any downtime, and how to use the brand-new migration
features in Django 1.7 to your best advantage.&lt;/p&gt;
&lt;p&gt;We'll take a look at database normalisation (and why it's not always a
good idea), denormalisation, schemaless data, how to best set up your
tables and indexes for different load types (heavy read/heavy
write/balanced), and how to scale up your database and its schema as you
grow.&lt;/p&gt;
</summary></entry><entry><title>Django, Channels, and Distributed Systems</title><link href="https://pyvideo.org/pybay-2016/django-channels-and-distributed-systems.html" rel="alternate"></link><published>2016-08-21T00:00:00+00:00</published><updated>2016-08-21T00:00:00+00:00</updated><author><name>Andrew Godwin</name></author><id>tag:pyvideo.org,2016-08-21:pybay-2016/django-channels-and-distributed-systems.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Learn about the Django Channels project, how it makes WebSockets easy, how it's not just limited to Django, and the difficulty of building WebSocket and other stateful protocol handling at scale.
â€‹
Abstract
Django Channels' headline feature is bringing WebSocket support to Django, but what it provides is far more useful than that. Underlying it is a robust, generic cross-process communication mechanism, built to support and scale with stateful protocols like WebSockets.&lt;/p&gt;
&lt;p&gt;This talk will look at the design of this mechanism - codenamed ASGI - and the difficulties of building an entire system to support WebSockets and broadcast systems across a large number of servers, and how Django encapsulates this to provide you a simple but powerful interface with good performance characteristics.&lt;/p&gt;
&lt;p&gt;We'll also take a brief look at how parts of Channels are useable outside of Django with other web frameworks or pure Python code, and how it lets us build better systems overall.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bio:&lt;/strong&gt; Andrew is a Python programmer, Django core developer and Senior Engineer at Eventbrite. He's behind Django's migration and channels systems, and in his spare time enjoys mountains, archery, and cheese.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://speakerdeck.com/pybay2016/andrew-godwin-django-channels-and-distributed-systems"&gt;https://speakerdeck.com/pybay2016/andrew-godwin-django-channels-and-distributed-systems&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>DjangoCon EU 2013: Andrew Godwin - Migrating The Future</title><link href="https://pyvideo.org/djangocon-europe-2013/djangocon-eu-2013-andrew-godwin-migrating-the-future.html" rel="alternate"></link><published>2013-05-15T00:00:00+00:00</published><updated>2013-05-15T00:00:00+00:00</updated><author><name>Andrew Godwin</name></author><id>tag:pyvideo.org,2013-05-15:djangocon-europe-2013/djangocon-eu-2013-andrew-godwin-migrating-the-future.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Videos from DjangoCon Europe 2013 are kindly provided by Heroku, a cloud application platform -- a new way of building and deploying web apps: &lt;a class="reference external" href="http://heroku.com/"&gt;http://heroku.com/&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Reinventing Django for the Real-Time Web</title><link href="https://pyvideo.org/pycon-au-2016/reinventing-django-for-the-real-time-web.html" rel="alternate"></link><published>2016-08-15T00:00:00+00:00</published><updated>2016-08-15T00:00:00+00:00</updated><author><name>Andrew Godwin</name></author><id>tag:pyvideo.org,2016-08-15:pycon-au-2016/reinventing-django-for-the-real-time-web.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Andrew Godwin
&lt;a class="reference external" href="https://2016.pycon-au.org/schedule/28/view_talk"&gt;https://2016.pycon-au.org/schedule/28/view_talk&lt;/a&gt;
Django's new Channels feature takes Django beyond the world of HTTP's request-response protocol and into the modern Web protocol world of WebSockets and real-time communication - but it also does a lot more. Learn how Django can now respond to WebSockets, emails or instant messages as easily as HTTP, and we re-architected Django to support all these changes while keeping a clean API and backwards compatibility, and the implications it has for the wider Python ecosystem.&lt;/p&gt;
</summary><category term="django"></category></entry><entry><title>Keynote: Architecting with Channels</title><link href="https://pyvideo.org/djangocon-us-2016/keynote-architecting-with-channels.html" rel="alternate"></link><published>2016-08-14T00:00:00+00:00</published><updated>2016-08-14T00:00:00+00:00</updated><author><name>Andrew Godwin</name></author><id>tag:pyvideo.org,2016-08-14:djangocon-us-2016/keynote-architecting-with-channels.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Keynote: Architecting with Channels by Andrew Godwin&lt;/p&gt;
</summary></entry><entry><title>Lightning Talks Day 1</title><link href="https://pyvideo.org/djangocon-us-2017/lightning-talks-day-1.html" rel="alternate"></link><published>2017-08-14T00:00:00+00:00</published><updated>2017-08-14T00:00:00+00:00</updated><author><name>Andrew Godwin</name></author><id>tag:pyvideo.org,2017-08-14:djangocon-us-2017/lightning-talks-day-1.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;DjangoCon US 2017 - Lightning Talks Day 1 by Various Speakers&lt;/p&gt;
&lt;p&gt;00:00 Andrew Godwin
04:14 Simon Willison
09:16 Katie McLaughlin
13:21 Dr. Russell Keith-Magee
18:00 Andrew Pinkham
20:27 Adam Fast
25:13 Josh Schneier
30:09 Kojo Idrissa&lt;/p&gt;
</summary></entry><entry><title>Taking Django Distributed</title><link href="https://pyvideo.org/djangocon-us-2017/taking-django-distributed.html" rel="alternate"></link><published>2017-08-14T00:00:00+00:00</published><updated>2017-08-14T00:00:00+00:00</updated><author><name>Andrew Godwin</name></author><id>tag:pyvideo.org,2017-08-14:djangocon-us-2017/taking-django-distributed.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;DjangoCon US 2017 - Taking Django Distributed by Andrew Godwin&lt;/p&gt;
&lt;p&gt;While some code happily lives on a single server forever, most big projects will have to cross the boundary into running both their application and storing their data across multiple systems. The basic strategies are well-known, but weâ€™ll take a look at what to do as you cross the painful threshold where you canâ€™t run your app as a monolith or store everything on a single database server.&lt;/p&gt;
&lt;p&gt;Among other things, weâ€™ll look at how to split up business logic and application code to run on different servers, how to scale to handle different kinds of web traffic (read-heavy, write-heavy, and long-connections/WebSockets), when and how to make parts of your code not run inline with HTTP processing, strategies for storing data across multiple machines, and how to structure your engineering team to best cope with all these changes.&lt;/p&gt;
&lt;p&gt;Weâ€™ll also look at a few apparently innocuous decisions and the spiral of bad performance they lead to, and how to recognise some of these common problems so you can avoid them yourself in future.&lt;/p&gt;
</summary></entry><entry><title>A Brief History of Channels</title><link href="https://pyvideo.org/djangocon-europe-2016/a-brief-history-of-channels.html" rel="alternate"></link><published>2016-03-31T00:00:00+00:00</published><updated>2016-03-31T00:00:00+00:00</updated><author><name>Andrew Godwin</name></author><id>tag:pyvideo.org,2016-03-31:djangocon-europe-2016/a-brief-history-of-channels.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;You can find more about this talk on &lt;a class="reference external" href="https://2016.djangocon.eu/speakers/7"&gt;djangocon.eu&lt;/a&gt;. This video is hosted by &lt;a class="reference external" href="http://opbeat.com/community/posts/a-brief-history-of-channels-by-andrew-godwin/"&gt;opbeat.com&lt;/a&gt;.&lt;/p&gt;
</summary><category term="django"></category></entry><entry><title>Reinventing Django for the Real-Time Web</title><link href="https://pyvideo.org/pycon-us-2016/andrew-godwin-reinventing-django-for-the-real-time-web-pycon-2016.html" rel="alternate"></link><published>2016-05-31T00:00:00+00:00</published><updated>2016-05-31T00:00:00+00:00</updated><author><name>Andrew Godwin</name></author><id>tag:pyvideo.org,2016-05-31:pycon-us-2016/andrew-godwin-reinventing-django-for-the-real-time-web-pycon-2016.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Speaker: Andrew Godwin&lt;/p&gt;
&lt;p&gt;Django has long been tied to the request-response pattern, but the upcoming &amp;quot;&amp;quot;channels&amp;quot;&amp;quot; project changes this and allows Django to natively support WebSockets, running tasks after responses, easily handle long-polling and more. Come and learn about the design, how we're trying to keep things as Django-like as possible, and how you can use it in your projects.&lt;/p&gt;
&lt;p&gt;Slides can be found at: &lt;a class="reference external" href="https://speakerdeck.com/pycon2016"&gt;https://speakerdeck.com/pycon2016&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/PyCon/2016-slides"&gt;https://github.com/PyCon/2016-slides&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>The first software engineer</title><link href="https://pyvideo.org/djangocon-europe-2015/andrew-godwin-the-first-software-engineer-at-2015.html" rel="alternate"></link><published>2015-08-10T00:00:00+00:00</published><updated>2015-08-10T00:00:00+00:00</updated><author><name>Andrew Godwin</name></author><id>tag:pyvideo.org,2015-08-10:djangocon-europe-2015/andrew-godwin-the-first-software-engineer-at-2015.html</id><summary type="html"></summary></entry><entry><title>Django: The Conspiracy</title><link href="https://pyvideo.org/django-birthday/django-the-conspiracy.html" rel="alternate"></link><published>2015-07-11T00:00:00+00:00</published><updated>2015-07-11T00:00:00+00:00</updated><author><name>Andrew Godwin</name></author><id>tag:pyvideo.org,2015-07-11:django-birthday/django-the-conspiracy.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Ten years after the project known as &amp;quot;Django&amp;quot; was released to the
public, there are still unanswered questions. Why did one of the
original authors flee the country? What happened to all the removed
magic? And, more importantly, why are there secret messages hidden in
the template parser's regular expressions? I'll be attempting to throw
light on some of the dark secrets of Django and, perhaps, finally divine
its true purpose, after almost a decade of searching.&lt;/p&gt;
</summary></entry><entry><title>Database Migrations, South, And You</title><link href="https://pyvideo.org/djangocon-us-2009/database-migrations--south--and-you.html" rel="alternate"></link><published>2009-09-08T00:00:00+00:00</published><updated>2009-09-08T00:00:00+00:00</updated><author><name>Andrew Godwin</name></author><id>tag:pyvideo.org,2009-09-08:djangocon-us-2009/database-migrations--south--and-you.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Database migrations, south and you&lt;/p&gt;
&lt;p&gt;Presented by Andrew Godwin&lt;/p&gt;
&lt;p&gt;Talks about south which makes it easier to do database migrations.&lt;/p&gt;
&lt;p&gt;[VIDEO HAS ISSUES: audio tends towards left speaker]&lt;/p&gt;
</summary><category term="databasemigration"></category><category term="djangocon"></category><category term="djangocon2009"></category><category term="south"></category></entry><entry><title>Step Away From That Database</title><link href="https://pyvideo.org/djangocon-us-2010/djangocon-2010--step-away-from-that-database.html" rel="alternate"></link><published>2010-09-08T00:00:00+00:00</published><updated>2010-09-08T00:00:00+00:00</updated><author><name>Andrew Godwin</name></author><id>tag:pyvideo.org,2010-09-08:djangocon-us-2010/djangocon-2010--step-away-from-that-database.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A look at the large array of database types now available: where each
one excels, why NoSQL isn't always best, and the best ways to integrate
them into your Django project.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;In the last few years we've seen an explosion in the number of
production- ready databases available for web applications. From
relational to document- oriented, key-value and more, there's a
staggering array of choice.&lt;/p&gt;
&lt;p&gt;This talk covers the various basic types of database now available, and
highlights their weaknesses, their strengths, and the features you just
can't get from traditional databases.&lt;/p&gt;
&lt;p&gt;Then, after a short rant about the term &amp;quot;NoSQL&amp;quot;, learn how to best
integrate them into your Django projects, why being schemaless isn't as
good as it looks at first, and how relational databases are keeping up
with the times.&lt;/p&gt;
</summary><category term="databasemigration"></category><category term="databasemigrations"></category><category term="djangocon"></category><category term="djangocon2010"></category><category term="migration"></category><category term="migrations"></category><category term="south"></category></entry><entry><title>Deployment, Daemons and Datacenters</title><link href="https://pyvideo.org/djangocon-us-2011/djangocon-2011--deployment--daemons-and-datacente.html" rel="alternate"></link><published>2011-09-05T00:00:00+00:00</published><updated>2011-09-05T00:00:00+00:00</updated><author><name>Andrew Godwin</name></author><id>tag:pyvideo.org,2011-09-05:djangocon-us-2011/djangocon-2011--deployment--daemons-and-datacente.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Deployment, Daemons, and Datacenters&lt;/p&gt;
&lt;p&gt;Presented by Andrew Godwin&lt;/p&gt;
&lt;p&gt;A tour through the systems that power &lt;a class="reference external" href="http://ep.io/"&gt;ep.io&lt;/a&gt;, the
Python hosting platform, from the array of daemons powering the system,
to how redundancy is set up, and also covering general best practices
for hosting Django sites yourself.&lt;/p&gt;
</summary><category term="daemons"></category><category term="datacenters"></category><category term="deployment"></category><category term="djangocon"></category><category term="djangocon2011"></category><category term="epio"></category><category term="ep.io"></category><category term="hosting"></category></entry><entry><title>Models and Migrations and Schemas - oh my!</title><link href="https://pyvideo.org/djangocon-us-2012/models-and-migrations-and-schemas-oh-my.html" rel="alternate"></link><published>2012-09-06T00:00:00+00:00</published><updated>2012-09-06T00:00:00+00:00</updated><author><name>Andrew Godwin</name></author><id>tag:pyvideo.org,2012-09-06:djangocon-us-2012/models-and-migrations-and-schemas-oh-my.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;A look at the past, current and future of schemas, migrations and
Django, and what it means for both website developers and ops staff.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Django has a long and varied history of dealing with changing schema
requirements - from the early projects like django-evolution and the two
aborted attempts to provide migrations in Django itself, through to
projects like South and now looking ahead to a more integrated solution
with Django itself once more.&lt;/p&gt;
&lt;p&gt;This talk will cover some of that history - helpful to get some kind of
context when it comes to current developments - as well as exploring
some of the common problems a migration system (and its users)
encounter, and how those lessons and ideas are being used to help
improve Django itself to better support schema migrations.&lt;/p&gt;
</summary><category term="django"></category><category term="models"></category></entry><entry><title>Everybody Loves Migrations</title><link href="https://pyvideo.org/djangocon-us-2013/everybody-loves-migrations.html" rel="alternate"></link><published>2013-10-03T00:00:00+00:00</published><updated>2013-10-03T00:00:00+00:00</updated><author><name>Andrew Godwin</name></author><id>tag:pyvideo.org,2013-10-03:djangocon-us-2013/everybody-loves-migrations.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Everybody Loves Migrations&lt;/p&gt;
&lt;p&gt;Wednesday 2:45 p.m.--3:30 p.m.&lt;/p&gt;
&lt;p&gt;Audience level: Intermediate&lt;/p&gt;
&lt;p&gt;Description&lt;/p&gt;
&lt;p&gt;Times are changing - schema migrations are finding their way into core
Django and becoming quite different in the process. Come and learn
what's happening, why it's being done this way, and how you can best
start using them. Abstract&lt;/p&gt;
&lt;p&gt;This year has seen a lot of changes on the migration front. After a
successful Kickstarter, schema migrations have been finding their way
into core Django, and they're not quite the South migrations you're used
to.&lt;/p&gt;
&lt;p&gt;Don't worry though - behind every one of the new features or changes is
five years of learning and experimentation, and this is where you can
come and hear not only what's new and how best to use it, but also why
it was done that way and the challenges that came up as part of it.&lt;/p&gt;
&lt;p&gt;Among other topics, this should cover squashing, branch merge detection,
custom fields, using raw SQL and data migrations with Python code.&lt;/p&gt;
</summary></entry><entry><title>Digging Into Django's Migrations</title><link href="https://pyvideo.org/djangocon-us-2014/digging-into-djangos-migrations.html" rel="alternate"></link><published>2014-09-16T00:00:00+00:00</published><updated>2014-09-16T00:00:00+00:00</updated><author><name>Andrew Godwin</name></author><id>tag:pyvideo.org,2014-09-16:djangocon-us-2014/digging-into-djangos-migrations.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;An in-depth look at Django's new migrations framework, explaining the
component architecture, highlighting issues with multiple database
backends, and showing how management commands typically get routed
through the software.&lt;/p&gt;
&lt;p&gt;Help us caption &amp;amp; translate this video!&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://amara.org/v/FOPT/"&gt;http://amara.org/v/FOPT/&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Real World Django Q&amp;A</title><link href="https://pyvideo.org/djangocon-us-2014/real-world-django-q-a.html" rel="alternate"></link><published>2014-09-16T00:00:00+00:00</published><updated>2014-09-16T00:00:00+00:00</updated><author><name>Andrew Godwin</name></author><id>tag:pyvideo.org,2014-09-16:djangocon-us-2014/real-world-django-q-a.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Have questions about getting better performance out of Django or scaling
it up large? We've assembled a group of knowledgable Django experts who
have been there to answer the questions you have. While every site has
its own challenges most follow similar patterns that are often easy to
solve.&lt;/p&gt;
&lt;p&gt;Help us caption &amp;amp; translate this video!&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://amara.org/v/FOPS/"&gt;http://amara.org/v/FOPS/&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Lightning Talks</title><link href="https://pyvideo.org/djangocon-us-2015/djangocon-2015-lightning-talks.html" rel="alternate"></link><published>2015-09-18T00:00:00+00:00</published><updated>2015-09-18T00:00:00+00:00</updated><author><name>Ricardo Ferraz Leal</name></author><id>tag:pyvideo.org,2015-09-18:djangocon-us-2015/djangocon-2015-lightning-talks.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Lightning Talks&lt;/p&gt;
&lt;p&gt;Ricardo Ferraz Leal &amp;quot;Leveraging Neutron Sciences with Django&amp;quot;&lt;/p&gt;
&lt;p&gt;Grant Jenks &amp;quot;Python Sorted Containers Module&amp;quot;&lt;/p&gt;
&lt;p&gt;Tracy Osborn &amp;quot;Hello Web App Kickstarter Campaign&amp;quot;&lt;/p&gt;
&lt;p&gt;Dan Dietz &amp;quot;Fabric Bolt&amp;quot;&lt;/p&gt;
&lt;p&gt;Andrew Godwin &amp;quot;Channels Everywhere&amp;quot;&lt;/p&gt;
</summary><category term="lightning talks"></category></entry><entry><title>Dubious Database Design</title><link href="https://pyvideo.org/djangocon-us-2015/dubious-database-design-by-andrew-godwin.html" rel="alternate"></link><published>2015-09-16T00:00:00+00:00</published><updated>2015-09-16T00:00:00+00:00</updated><author><name>Andrew Godwin</name></author><id>tag:pyvideo.org,2015-09-16:djangocon-us-2015/dubious-database-design-by-andrew-godwin.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Dubious Database Design by Andrew Godwin&lt;/p&gt;
&lt;p&gt;Everyone has seen plenty of articles about how to design data storage
solutions well - but nobody is getting up there and talking about how
bad their storage design is.&lt;/p&gt;
&lt;p&gt;Rather than just listen to more things to do and vague reasons why, come
and see some truly awful examples of storage design, and the lessons we
can learn from it. What happens when you end up reimplementing indexes?
Why shouldn't you turn off durability? Why not make a table for every
user? And how can you render templates purely in the database?&lt;/p&gt;
&lt;p&gt;All this, and more, as we delve into the realm of datastores and
examples both historic and current that you can learn from, and
hopefully come away with a better idea why the rest of us design things
the way we do.&lt;/p&gt;
&lt;p&gt;Help us caption &amp;amp; translate this video!&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://amara.org/v/HGSe/"&gt;http://amara.org/v/HGSe/&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>South, New and Old</title><link href="https://pyvideo.org/djangocon-europe-2010/djangoconeu-andrewgodwinsouthnewandold425flv.html" rel="alternate"></link><published>2010-05-25T00:00:00+00:00</published><updated>2010-05-25T00:00:00+00:00</updated><author><name>Andrew Godwin</name></author><id>tag:pyvideo.org,2010-05-25:djangocon-europe-2010/djangoconeu-andrewgodwinsouthnewandold425flv.html</id><summary type="html"></summary></entry><entry><title>Building a hosting platform with Python</title><link href="https://pyvideo.org/europython-2011/building-a-hosting-platform-with-python.html" rel="alternate"></link><published>2011-07-20T00:00:00+00:00</published><updated>2011-07-20T00:00:00+00:00</updated><author><name>Andrew Godwin</name></author><id>tag:pyvideo.org,2011-07-20:europython-2011/building-a-hosting-platform-with-python.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Andrew Godwin - 20 June 2011 in &amp;quot;Track Lasagne&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;At ep.io we built a Python hosting platform from the ground up, designed
to run large numbers of web applications on a small number of physical
machines both securely and in a reasonably scalable way. This talk will
show you how we built our infrastructure - using Redis, eventlet,
PostgreSQL and more - and what lessons we learnt from our first few
thousand deploys.&lt;/p&gt;
&lt;p&gt;See how we split services into multiple processes and greenthreads; the
pains of building a cooperatively-multitasking PTY module; how Redis
isn't the answer to everything, but is still very useful; how to
persuade third-party software to work securely in a shared environment;
and how important it is to have good logging, especially when you have
more than five servers.&lt;/p&gt;
</summary><category term="ep.io"></category><category term="hosting"></category><category term="infrastructure"></category><category term="postgresql"></category><category term="redis"></category><category term="scalable"></category><category term="web"></category></entry><entry><title>Designing Django's Migrations</title><link href="https://pyvideo.org/pycon-us-2014/designing-djangos-migrations.html" rel="alternate"></link><published>2014-04-13T00:00:00+00:00</published><updated>2014-04-13T00:00:00+00:00</updated><author><name>Andrew Godwin</name></author><id>tag:pyvideo.org,2014-04-13:pycon-us-2014/designing-djangos-migrations.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Django finally has built-in migrations, and they're a long way from the
designs of South or django-evolution. Learn the key design decisions we
made, ideas we discarded, and the unique treatment we have to give each
of our four official database backends.&lt;/p&gt;
</summary></entry><entry><title>What can programmers learn from pilots?</title><link href="https://pyvideo.org/pycon-us-2015/what-can-programmers-learn-from-pilots.html" rel="alternate"></link><published>2015-04-11T00:00:00+00:00</published><updated>2015-04-11T00:00:00+00:00</updated><author><name>Andrew Godwin</name></author><id>tag:pyvideo.org,2015-04-11:pycon-us-2015/what-can-programmers-learn-from-pilots.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;What can Python-based software teams learn from aviation? Why should
software always fail hard? What's wrong with too many error logs? And
why are ops people already like pilots? Learn all this, and about
planes, too.&lt;/p&gt;
</summary></entry></feed>