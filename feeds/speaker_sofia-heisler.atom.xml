<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_sofia-heisler.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2017-05-20T00:00:00+00:00</updated><entry><title>No More Sad Pandas: Optimizing Pandas Code for Speed and Efficiency</title><link href="https://pyvideo.org/pycon-us-2017/no-more-sad-pandas-optimizing-pandas-code-for-speed-and-efficiency.html" rel="alternate"></link><published>2017-05-20T00:00:00+00:00</published><updated>2017-05-20T00:00:00+00:00</updated><author><name>Sofia Heisler</name></author><id>tag:pyvideo.org,2017-05-20:pycon-us-2017/no-more-sad-pandas-optimizing-pandas-code-for-speed-and-efficiency.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;When I first began working with the Python Pandas library, I was told by
an experienced Python engineer: &amp;quot;Pandas is fine for prototyping a bit of
calculations, but it's too slow for any time-sensitive applications.&amp;quot;
Over multiple years of working with the Pandas library, I have realized
that this was only true if not enough care is put into identifying
proper ways to optimize the code's performance. This talk will review
some of the most common beginner pitfalls that can cause otherwise
perfectly good Pandas code to grind to a screeching halt, and walk
through a set of tips and tricks to avoid them. Using a series of
examples, we will review the process for identifying the elements of the
code that may be causing a slowdown, and discuss a series of
optimizations, ranging from good practices of input data storage and
reading, to the best methods for avoiding inefficient iterations, to
using the power of vectorization to optimize functions for Pandas
dataframes.&lt;/p&gt;
</summary></entry></feed>