<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org - Alireza Farhidzadeh</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_alireza-farhidzadeh.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2023-04-23T00:00:00+00:00</updated><subtitle></subtitle><entry><title>Getting Around the GIL: Parallelizing Python for Better Performance</title><link href="https://pyvideo.org/pycon-us-2023/getting-around-the-gil-parallelizing-python-for-better-performance.html" rel="alternate"></link><published>2023-04-23T00:00:00+00:00</published><updated>2023-04-23T00:00:00+00:00</updated><author><name>Alireza Farhidzadeh</name></author><id>tag:pyvideo.org,2023-04-23:/pycon-us-2023/getting-around-the-gil-parallelizing-python-for-better-performance.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;One of the ever-present banes of a data scientist’s life is the constant
wait for the data processing code to finish executing. Slow code affects
almost every step of a typical data pipeline: data collection, data
pre-processing/parsing, feature engineering, etc. Many times, the
lengthy execution times force …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;One of the ever-present banes of a data scientist’s life is the constant
wait for the data processing code to finish executing. Slow code affects
almost every step of a typical data pipeline: data collection, data
pre-processing/parsing, feature engineering, etc. Many times, the
lengthy execution times force data scientists to work with only a subset
of data, depriving him/her of the insights and performance improvements
that could be obtained with a larger dataset. One of the tools that can
mitigate this problem and speed up data science pipelines (and CPU-bound
programs) is parallelization.&lt;/p&gt;
&lt;p&gt;Parallelization is a useful way to work around the limitations of the
Global Interpreter Lock (GIL), a key feature of Python that prevents
code from fully utilizing multiple processor cores and can impact
performance. In this session, we’ll walk through several ways to
parallelize Python code, depending on the specific needs of your program
and the type of parallelism you want to achieve.&lt;/p&gt;
</content><category term="PyCon US 2023"></category></entry></feed>