<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org - Rahul Jha</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Fri, 03 Jun 2022 00:00:00 +0000</lastBuildDate><item><title>Using Vulture to improve used-to-unused code ratio of your Python Programs - Rahul Jha</title><link>https://pyvideo.org/pycon-india-2019/using-vulture-to-improve-used-to-unused-code-ratio-of-your-python-programs-rahul-jha.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Rahul Jha</dc:creator><pubDate>Sat, 12 Oct 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-10-12:/pycon-india-2019/using-vulture-to-improve-used-to-unused-code-ratio-of-your-python-programs-rahul-jha.html</guid><category>PyCon India 2019</category></item><item><title>Vulture eats some Python</title><link>https://pyvideo.org/pycon-italia-2022/vulture-eats-some-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Vulture eats some Python - PyCon Italia 2022&lt;/p&gt;
&lt;p&gt;Maintaining a high level of code quality is important for any serious
project. One aspect of this is ensuring that all code is actually used.
Finding and removing dead code allows to keep the code base clean and
reduces bugs. This is a practical guide on using and configuring Vulture
to do so. This talk is focused on how we can use Vulture to find dead
code. There are many reasons for dead code ending up in a project. The
most common is refactoring, but another is misspellings, which are only
detected at runtime for dynamic languages. Vulture helps you find unused
code in Python programs, and it is useful for cleaning up and finding
errors in large codebases. If you run Vulture on both your library and
test suite, you can find untested code.&lt;/p&gt;
&lt;p&gt;Due to Python’s dynamic nature, static code analyzers like Vulture are
likely to miss some dead code. Also, code that is only called implicitly
(e.g., using getattr) may be reported as unused. Nonetheless, Vulture
can be a very helpful tool for higher code quality.&lt;/p&gt;
&lt;p&gt;The second part of this talk investigates ways to improve Vulture’s
reporting such that the results are actionable and optimized for a low
number of false positives. It also discusses how to automate testing for
dead code with Vulture – there are quite a few options available: 1. Add
a step in your continuous integration testing. 2. As a pre-commit hook.
3. Run a script using Vulture API for more fine-grained control.&lt;/p&gt;
&lt;p&gt;The third and last part of this talk discusses a brief overview of the
internal workings of the tool, along with the scope of future
improvements. After all, the motive of this talk is not only to
encourage developers to prioritize code hygiene but also to inspire them
to come up with ideas to &lt;em&gt;enable&lt;/em&gt; it.&lt;/p&gt;
&lt;p&gt;Speaker: Rahul Jha&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Rahul Jha</dc:creator><pubDate>Fri, 03 Jun 2022 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2022-06-03:/pycon-italia-2022/vulture-eats-some-python.html</guid><category>PyCon Italia 2022</category><category>best practice</category><category>clean code</category><category>code analysis</category><category>static analysis</category><category>tooling</category></item></channel></rss>