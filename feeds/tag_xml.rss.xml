<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Sat, 08 Apr 2017 00:00:00 +0000</lastBuildDate><item><title>Validazione e decodifica di file XML con Python</title><link>https://pyvideo.org/pycon-italia-2017/validazione-e-decodifica-di-file-xml-con-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Per la schematizzazione di documenti XML sono disponibili diversi
standard, tra questi XML Schema. La prima problematica è quella di poter
validare file XML secondo il loro rispettivo schema. Un’altra esigenza è
la conversione dell’XML in strutture dati in cui siano valorizzati i
tipi base definiti nello schema e la struttura nidificata in cui sono
inseriti, similmente a quello che è già reso disponibile per JSON.&lt;/p&gt;
&lt;p&gt;In ambito scientifico, nell’ambito delle attività del progetto europeo
MaX (Materials design at the Exascale), per semplificare l’interscambio
di dati dati XML tra diversi software di simulazione, si è deciso di
adottare un approccio unitario e sistematico alla validazione e alla
decodifica dei dati XML prodotti.&lt;/p&gt;
&lt;p&gt;Pertanto è in fase di sviluppo una nuova libreria (xmlschema), basata
sulla libreria standard ElementTree di Python, che permette di validare
e decodificare dati XML con schemi XSD. La decodifica di un documento
XML produce un dizionario nidificato con i valori terminali appartenenti
ai corrispondenti tipi elementari.&lt;/p&gt;
&lt;p&gt;Nella presentazione parlerei delle problematiche degli schemi XSD,
dell’ambito scientifico in cui è stata sviluppata la libreria e della
struttura della libreria stessa, illustrando e magari raccogliendo
qualche idea per migliorarla.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Davide Brunato</dc:creator><pubDate>Sat, 08 Apr 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-04-08:pycon-italia-2017/validazione-e-decodifica-di-file-xml-con-python.html</guid><category>xml</category><category>mathematical-modelling</category><category>encoding</category><category>Python</category><category>simulation</category><category>validation</category><category>physics</category><category>metadata</category></item><item><title>Paver: the build tool you missed</title><link>https://pyvideo.org/europython-2011/paver-the-build-tool-you-missed.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Lukaš Linhart - 22 June 2011 in &amp;quot;Track Tagliatelle &amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Build tools are not very popular in Python environment. In this talk,
I'd like to show how useful it is to have one, even if you do just
simple web applications. A nice, single point of entry instead of hairy
shell scripts, fabric fabfiles and django admin commands all over the
place.&lt;/p&gt;
&lt;p&gt;Written in the neat, friendly Python instead of some Anty XML jumbo, you
are about to have a refreshing cleanup.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lukáš Linhart</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-13:europython-2011/paver-the-build-tool-you-missed.html</guid><category>django</category><category>fabric</category><category>web</category><category>xml</category></item><item><title>Python Enterprise: vento di libertà</title><link>https://pyvideo.org/europython-2011/python-enterprise-vento-di-liberta.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Simone Federici - 23 June 2011 in &amp;quot;Track Italiana Big
Mac &amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Nell’enterprise la scalabilità verticale è ferma, l'HTTP Session è un
dramma, XML è considerato un bug, i DB vengono messi in discussione, JMS
è saturo, SOA un bluff. Parlerò di una diversa filosofia per le
architetture Enterprise. Python è dinamico, object oriented, offre un
forte supporto all'integrazione ed è fornito di una estesa libreria
standard e, non da poco, può essere imparato in pochi giorni. Molti
programmatori Python possono confermare un sostanziale aumento di
produttività e ritengono che il linguaggio incoraggi allo sviluppo di
codice di qualità e manutenibilità superiori. In questo talk parlerò
quindi di produttività e qualità. Il talk è un chiaro mezzo per
diffondere python.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Simone Federici</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-13:europython-2011/python-enterprise-vento-di-liberta.html</guid><category>xml</category></item><item><title>Dependency injection is your friend</title><link>https://pyvideo.org/europython-2011/dependency-injection-is-your-friend.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Alan Franzoni - 24 June 2011 in &amp;quot;Track Spaghetti&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Dependency injection is a technique that has been around since long, and
it's widely used in many programming languages and environments, but
it's not that widespread in the Python world.&lt;/p&gt;
&lt;p&gt;Many think that using dependency injection will force writing large-and-
complex xml blobs, break encapsulation, or reduce code readability, or
just that it's unneeded in an highly expressive language like Python is.&lt;/p&gt;
&lt;p&gt;On the contrary, I'll show you that DI: - doesn't require any library or
framework; - encourages peer role identification; - helps keeping a
class focused and cohesive; - encourages separation between wiring from
applicative code; - makes your code more reusable, expressive and
testable; - doesn't break encapsulation; - turns part of your coding
efforts into configuration&lt;/p&gt;
&lt;p&gt;Large applications, by the way, might just get a great maintenance boost
by using a real DI container, hence I'll briefly cover Pydenji, the
Python(ic) dependency injection toolkit, and what it can do for your
application.&lt;/p&gt;
&lt;p&gt;A basic knowledge of object oriented design and SOLID principles is
required in order to fully appreciate the content of this talk.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alan Franzoni</dc:creator><pubDate>Thu, 07 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-07:europython-2011/dependency-injection-is-your-friend.html</guid><category>design</category><category>maintenance</category><category>xml</category></item><item><title>XML generieren mit lxml</title><link>https://pyvideo.org/pycon-de-2013/xml-generieren-mit-lxml.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;&lt;a class="reference external" href="http://lxml.de/"&gt;lxml&lt;/a&gt; ist der Platzhirsch unter den XML-Tools für
Python. Über das übliche Parsen hinaus bietet es auch einige schöne
Möglichkeiten, XML-Dokumente effizient zu generieren. Der Vortrag bietet
eine Einführung in die Teile von lxml, die das Erzeugen von XML einfach
und übersichtlich machen.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Stefan Behnel</dc:creator><pubDate>Wed, 16 Oct 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-10-16:pycon-de-2013/xml-generieren-mit-lxml.html</guid><category>lxml</category><category>xml</category></item><item><title>Hacking the Social Web with Python</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--hacking-the-social-web-with-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Open Stack: Hacking the Social Web&lt;/p&gt;
&lt;p&gt;Presented by David Recordon/Mike Malone&lt;/p&gt;
&lt;p&gt;In this tutorial we'll explain what the Open Stack is and how you can
use tools like OAuth, OpenID, and Portable Contacts to integrate your
app with the rest of the web. We'll cover each component in depth, and
walk through example Python implementations for a variety of scenarios.&lt;/p&gt;
&lt;p&gt;Intended Audience&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Beginning to intermediate Python programmers interested in Web
Development&lt;/li&gt;
&lt;li&gt;Python programmers who provide or consumer web service APIs&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Class Outline&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Intro: what is the &amp;quot;Open Stack&amp;quot;&lt;/li&gt;
&lt;li&gt;Working with HTTP in Python&lt;/li&gt;
&lt;li&gt;Working with responses: JSON, XML, Atom, RSS, HTML&lt;/li&gt;
&lt;li&gt;Decentralized identity with OpenID&lt;ul&gt;
&lt;li&gt;Implementing a Provider in Python&lt;/li&gt;
&lt;li&gt;Implementing a Relying Party in Python&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Delegated authorization with OAuth&lt;ul&gt;
&lt;li&gt;Implementing a Provider in Python&lt;/li&gt;
&lt;li&gt;Implementing a Consumer in Python&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Exchanging contacts with Portable Contacts&lt;/li&gt;
&lt;li&gt;Aggregating activity with Activity Streams&lt;/li&gt;
&lt;li&gt;Discovering how to communicate: LRDD + XRD&lt;/li&gt;
&lt;li&gt;Making markup structured: microformats&lt;/li&gt;
&lt;li&gt;The future of the Open Stack&lt;/li&gt;
&lt;li&gt;Learn more &amp;amp; get involved: resources and communities&lt;/li&gt;
&lt;li&gt;Q&amp;amp;A;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Requirements&lt;/p&gt;
&lt;p&gt;Some experience doing web development or working with web service APIs&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">David Recordon</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--hacking-the-social-web-with-python.html</guid><category>atom</category><category>http</category><category>json</category><category>oauth</category><category>openid</category><category>pycon</category><category>pycon2010</category><category>rss</category><category>tutorial</category><category>xml</category></item><item><title>Python 201: How to Solve It Using Python</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--python-201--how-to-solve-it-using-pyt.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python 201: How to Solve it using Python&lt;/p&gt;
&lt;p&gt;Presented by Senthil Kumaran&lt;/p&gt;
&lt;p&gt;One good way to develop applications is to divide the problem into
smaller manageable chunks and the build those. Once we identify and
define those smaller piece of tasks, our problem becomes incredibly
easy.&lt;/p&gt;
&lt;p&gt;But we are still faced with the question of what is the best way to do
that smaller task in Python? This tutorial will answer those questions.&lt;/p&gt;
&lt;p&gt;In this tutorial, we will identify the commonly occurring tasks that
would fit into to bigger problems and learn how do we solve it using
Python.&lt;/p&gt;
&lt;p&gt;The aim of the tutorial is help you develop the correct intuition when
developing applications using Python.&lt;/p&gt;
&lt;p&gt;Intended Audience&lt;/p&gt;
&lt;p&gt;Beginning to intermediate Python Programmers. Familiarity with Python's
syntax and usage is assumed.&lt;/p&gt;
&lt;p&gt;This tutorial will use Python 3.1 examples (with changes from Python 2.6
explained, when it is required).&lt;/p&gt;
&lt;p&gt;The source code and the handout will contain the snippets written in
both Python 2.6 and Python 3.1.&lt;/p&gt;
&lt;p&gt;Class Outline&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Outline of the Tutorial and a Brief Overview of Standard Library.&lt;/li&gt;
&lt;li&gt;Lets start with Strings.&lt;/li&gt;
&lt;li&gt;Files - We deal with them often.&lt;/li&gt;
&lt;li&gt;Date time related tasks.&lt;/li&gt;
&lt;li&gt;Dealing with Database stuff.&lt;/li&gt;
&lt;li&gt;Process Handling.&lt;/li&gt;
&lt;li&gt;Processing XMLs.&lt;/li&gt;
&lt;li&gt;Web Programming&lt;/li&gt;
&lt;li&gt;Programming tasks.&lt;/li&gt;
&lt;li&gt;Unit Testing&lt;/li&gt;
&lt;li&gt;How to Convert Python 2 to Python 3.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Requirements&lt;/p&gt;
&lt;p&gt;Attendees are welcome to bring their laptops with Python installed (
version 3.1 and version 2.6 both installed).&lt;/p&gt;
&lt;p&gt;Some snippets will be using Twisted Matrix Framework, those who would
like to try those recipes, would like to have Twisted Package installed
for their Python Distribution.&lt;/p&gt;
&lt;p&gt;[VIDEO HAS ISSUES: Some missing sections of video due to technical
issues (approx 3 mins in)]&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Senthil Kumaran</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--python-201--how-to-solve-it-using-pyt.html</guid><category>pycon</category><category>pycon2010</category><category>python-basics</category><category>testing</category><category>tutorial</category><category>xml</category></item></channel></rss>