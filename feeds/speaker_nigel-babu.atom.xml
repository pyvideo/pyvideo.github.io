<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_nigel-babu.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2017-02-16T00:00:00+00:00</updated><entry><title>Building Trust in Releases</title><link href="https://pyvideo.org/pycon-pune-2017/building-trust-in-releases.html" rel="alternate"></link><published>2017-02-16T00:00:00+00:00</published><updated>2017-02-16T00:00:00+00:00</updated><author><name>Nigel Babu</name></author><id>tag:pyvideo.org,2017-02-16:pycon-pune-2017/building-trust-in-releases.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Releasing an open source project is easy. Push code on Github and
(optionally) release the package on PyPI and distribution packages. How
do you build trust into releases so that your users can trust your
product? If your product is critical to someone’s infrastructure, trust
is even more critical. This talk aims to lay down basic guidelines for
releases. I’ll be specifically taking examples of requests, Gluster, and
Gerrit to talk about trust.&lt;/p&gt;
&lt;p&gt;This talk is intended to remind the audience about their users. A good
product is not only about good code. It’s also about good experience and
empathy for solving your user’s problems. For instance, your users are
not going to be happy if you force large changes after an upgrade.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Trust and importance of trust in releases&lt;/li&gt;
&lt;li&gt;What not to do.&lt;/li&gt;
&lt;li&gt;Importance of publically visible tests: Linting, Unit tests,
Functional tests, API tests.&lt;/li&gt;
&lt;li&gt;Everything cannot be tested, some things may need to be manually
done. Build your pipeline so you &lt;em&gt;only&lt;/em&gt; test what cannot be
automated.&lt;/li&gt;
&lt;li&gt;The need for Release notes and Upgrade guides.&lt;/li&gt;
&lt;li&gt;Remember to create a good experience for all your consumers - end
users, sysadmins, and developers.&lt;/li&gt;
&lt;li&gt;Lessons from &lt;tt class="docutils literal"&gt;requests&lt;/tt&gt; for developer experience.&lt;/li&gt;
&lt;li&gt;Lessons from &lt;tt class="docutils literal"&gt;ansible&lt;/tt&gt; for for sysadmin experience.&lt;/li&gt;
&lt;li&gt;Lessons from Gerrit for user experience and upgrade experience.&lt;/li&gt;
&lt;/ul&gt;
</summary></entry></feed>