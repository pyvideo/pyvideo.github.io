<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org - Web Servers and MicroFWs (Flask/Tornado/Nginx/...)</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/tag_web-servers-and-microfws-flasktornadonginx.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2020-07-23T00:00:00+00:00</updated><subtitle></subtitle><entry><title>An ASGI Server from scratch</title><link href="https://pyvideo.org/europython-2020/an-asgi-server-from-scratch.html" rel="alternate"></link><published>2020-07-23T00:00:00+00:00</published><updated>2020-07-23T00:00:00+00:00</updated><author><name>Philip Jones</name></author><id>tag:pyvideo.org,2020-07-23:/europython-2020/an-asgi-server-from-scratch.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Echo server to a basic ASGI server in a talk&lt;/p&gt;
&lt;p&gt;I intend for this to be a fairly advanced talk that shows the steps required to go from a TCP echo server to a basic HTTP/1 ASGI server using asyncio for the IO. This is aimed at people ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Echo server to a basic ASGI server in a talk&lt;/p&gt;
&lt;p&gt;I intend for this to be a fairly advanced talk that shows the steps required to go from a TCP echo server to a basic HTTP/1 ASGI server using asyncio for the IO. This is aimed at people who've read about asyncio, coroutines, etc and want to see them used in practice.&lt;/p&gt;
&lt;p&gt;This is a tutorial on how to build a HTTP/1 ASGI server using asyncio. I plan to start by building a TCP echo server and then add HTTP parsing and ASGI compliance.&lt;/p&gt;
</content><category term="EuroPython 2020"></category><category term="europython"></category><category term="europython-2020"></category><category term="europython-online"></category><category term="ASYNC / Concurreny"></category><category term="Web"></category><category term="Web Protocols"></category><category term="Web Servers and MicroFWs (Flask/Tornado/Nginx/...)"></category></entry><entry><title>API-schema-based testing with schemathesis</title><link href="https://pyvideo.org/europython-2020/api-schema-based-testing-with-schemathesis.html" rel="alternate"></link><published>2020-07-23T00:00:00+00:00</published><updated>2020-07-23T00:00:00+00:00</updated><author><name>Alexander Hultn√©r</name></author><id>tag:pyvideo.org,2020-07-23:/europython-2020/api-schema-based-testing-with-schemathesis.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Automatically generate test-cases based on your API-schemas.&lt;/p&gt;
&lt;p&gt;The goal with this talk is to introduce the audience to property-based testing for API‚Äôs using schemas to automatically generate test scenarios, enabling them to write more powerful tests faster.&lt;/p&gt;
&lt;p&gt;The talk will focus on a subset of the field of ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Automatically generate test-cases based on your API-schemas.&lt;/p&gt;
&lt;p&gt;The goal with this talk is to introduce the audience to property-based testing for API‚Äôs using schemas to automatically generate test scenarios, enabling them to write more powerful tests faster.&lt;/p&gt;
&lt;p&gt;The talk will focus on a subset of the field of property-based testing where we focus on testing by automatically generating properties and test strategies from the API Schemas that we often already have. These tests ensure that our APIs conform to their specified schema and enables us to write a much larger amount of tests in less time.&lt;/p&gt;
&lt;p&gt;I will focus on the schemathesis library which leverages the strong hypothesis library as well as the hypothesis-JSONSchema extension strategies, and will in the future also support GraphQL via the hypothesis-graphql strategies. I‚Äôm a contributor to schemathesis and currently working on the future GraphQL support with schemathesis creator, Dmitry Dygalo.&lt;/p&gt;
&lt;p&gt;I will also compare it with its predecessor ‚Äúswagger-conformance‚Äù, pure property-based testing through hypothesis, schema strategies with hypothesis-graphql and hypothesis-jsonschema, and discuss their advantages and disadvantages. I will also briefly talk about ‚ÄúQuickREST: Property-based Test Generation of OpenAPI-Described RESTful APIs‚Äù (&lt;a class="reference external" href="https://arxiv.org/abs/1912.09686"&gt;https://arxiv.org/abs/1912.09686&lt;/a&gt;), the research paper that‚Äôs part of the inspiration for these tools.&lt;/p&gt;
&lt;p&gt;By focusing on property-based test generation using schemas we already have, I will show that a field like property-based testing, which can seem quite daunting at first, actually can have a low barrier to entry while yielding large amounts of value in return and is useful for most common web projects today.&lt;/p&gt;
&lt;p&gt;The talk will show how formal schemas for APIs can and will continue to provide additional value outside the scope of documentation.&lt;/p&gt;
</content><category term="EuroPython 2020"></category><category term="europython"></category><category term="europython-2020"></category><category term="europython-online"></category><category term="APIs"></category><category term="RESTful"></category><category term="Test Libraries (pytest/nose/...)"></category><category term="Testing"></category><category term="Web Servers and MicroFWs (Flask/Tornado/Nginx/...)"></category></entry><entry><title>Bringing your Python script to more users!</title><link href="https://pyvideo.org/europython-2020/bringing-your-python-script-to-more-users.html" rel="alternate"></link><published>2020-07-23T00:00:00+00:00</published><updated>2020-07-23T00:00:00+00:00</updated><author><name>Takuya Futatsugi</name></author><id>tag:pyvideo.org,2020-07-23:/europython-2020/bringing-your-python-script-to-more-users.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Quick tour from CLI through GUI to Web app with image size reduction script&lt;/p&gt;
&lt;p&gt;It is wonderful to automate boring stuffs with Python.
In Japan, new introductory books are being published every month and more and more Pythonistas are working on automation.
A Python script that is useful to ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Quick tour from CLI through GUI to Web app with image size reduction script&lt;/p&gt;
&lt;p&gt;It is wonderful to automate boring stuffs with Python.
In Japan, new introductory books are being published every month and more and more Pythonistas are working on automation.
A Python script that is useful to you may be useful to others.
So I talk about how to enable others to use your script.&lt;/p&gt;
&lt;p&gt;In this talk, I use a simple script which can reduce the width and the height of a specified image in your computer.
I assume someone who's read the introductory book can understand the script.&lt;/p&gt;
&lt;p&gt;First, I introduce Command Line Interface (CLI) to solve hardcoding in the sample script.
After implementing CLI, you don't need to edit the script.
Second, I introduce Grafical User Interface (GUI) to make the script more user-friendly.
Finally, I introduce web application so that users can the script without installation. All users have to do is connecting the Internet!&lt;/p&gt;
&lt;p&gt;The timeline is supposed to be the following:&lt;/p&gt;
&lt;p&gt;# Introduction (3min)
- self-introduction
- motivation of this talk
- sample script (pathlib, Pillow)&lt;/p&gt;
&lt;p&gt;# CLI (5min)
- problem: need to edit the script
- introduce argparse module (pass target file path from command line)
- about positional arguments and optional arguments
- check whether a path points an existing file (type parameter of add_argument())&lt;/p&gt;
&lt;p&gt;# GUI (9min)
- problem: CLI is not easy to handle than GUI
- introduce eel
- eel's elements: HTML, CSS, JavaScript
- hello world in eel
- file access in eel app
- convert sample script to eel app (user can see which image is specified as targetüòÉ)
- how to distribute&lt;/p&gt;
&lt;p&gt;# Web app (9min)
- problem: Users need to install
- introduce Web app
- server / client
- actually eel's elements are used in web app (we can recycle codes)
- introduce Flask
- hello world in flask
- static files in web app
- how to deploy (heroku)&lt;/p&gt;
&lt;p&gt;# wrap up (1min)
# Q&amp;amp;A (3min)&lt;/p&gt;
</content><category term="EuroPython 2020"></category><category term="europython"></category><category term="europython-2020"></category><category term="europython-online"></category><category term="Beginners"></category><category term="Command-Line"></category><category term="Web Servers and MicroFWs (Flask/Tornado/Nginx/...)"></category></entry><entry><title>Django Clone From Scratch With Flask</title><link href="https://pyvideo.org/europython-2020/django-clone-from-scratch-with-flask.html" rel="alternate"></link><published>2020-07-23T00:00:00+00:00</published><updated>2020-07-23T00:00:00+00:00</updated><author><name>Abdur-Rahmaan Janhangeer</name></author><id>tag:pyvideo.org,2020-07-23:/europython-2020/django-clone-from-scratch-with-flask.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;How to effectively mimick most of Django features with Flask, apps included.&lt;/p&gt;
&lt;p&gt;With Python, when thinking of web frameworks, two that come into mind are Django and Flask. Instead of having to choose one of the two, this session shows how you can engineer Flask to achieve a simili-Django ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;How to effectively mimick most of Django features with Flask, apps included.&lt;/p&gt;
&lt;p&gt;With Python, when thinking of web frameworks, two that come into mind are Django and Flask. Instead of having to choose one of the two, this session shows how you can engineer Flask to achieve a simili-Django app. It's a dive into the internal components of Django and the idea behind. The session covers different Flask development patterns to finally finish with an app that's functionally similar to Django with some extra features in for free. It also lists some caveats identified with such a pattern. This session requires attendees to know Flask and having used Django for building at least one project. At the very least it assumes the knowledge of models, views, controller, templates and migrations. It discusses along the way the educational and pedagogical aspect of learning web frameworks and proposes a syllabus. It discusses the benefits of learning Flask and the necessity of learning the two as a Pythonista. Django is the go-to framework for web development and it's no surprise that most freelancing jobs require Django. Flask is appreciated for the flexibility it gives. The session also touches about how we can better promote Flask through education. The session finishes with the hurdles identified when getting started with web development in Python, pulled from personal teaching experience.&lt;/p&gt;
</content><category term="EuroPython 2020"></category><category term="europython"></category><category term="europython-2020"></category><category term="europython-online"></category><category term="Web Servers and MicroFWs (Flask/Tornado/Nginx/...)"></category></entry><entry><title>Train. Serve. Deploy! Story of a NLP Model ft. PyTorch, Docker, Uwsgi and Nginx</title><link href="https://pyvideo.org/europython-2020/train-serve-deploy-story-of-a-nlp-model-ft-pytorch-docker-uwsgi-and-nginx.html" rel="alternate"></link><published>2020-07-23T00:00:00+00:00</published><updated>2020-07-23T00:00:00+00:00</updated><author><name>Shreya Khurana</name></author><id>tag:pyvideo.org,2020-07-23:/europython-2020/train-serve-deploy-story-of-a-nlp-model-ft-pytorch-docker-uwsgi-and-nginx.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Quickly prototype a machine translation model from scratch and learn how to serve it in production&lt;/p&gt;
&lt;p&gt;Natural language processing has seen leaps of technology progress with Machine Learning becoming the norm of solving the major problems in this area, with Machine translation being one of the major problems in ‚Ä¶&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Quickly prototype a machine translation model from scratch and learn how to serve it in production&lt;/p&gt;
&lt;p&gt;Natural language processing has seen leaps of technology progress with Machine Learning becoming the norm of solving the major problems in this area, with Machine translation being one of the major problems in this area. Neural machine translation systems are now used to convert sentences or phrases from one language to another, or in general, for sequence to sequence modeling. In this talk, we‚Äôll be covering the steps from scratch to preprocess, train and serve a NMT model using PyTorch. While building a highly accurate model is a prerequisite to getting good quality translations, often in industry, we also need to make sure we can serve the model to customers without getting timeouts or delays. The practice of serving models requires creating a web app to get client requests and process them in a way the model would understand. For this, we‚Äôll use  the various components of the application server environment - Flask, Docker, uwsgi and nginx. This talk is suitable for audience who is working in general with ML models and want to learn how to serve them or working specifically with NMT and want to learn about some quick prototyping tips.&lt;/p&gt;
&lt;p&gt;Prerequisites: Audience should be comfortable with the basic ML terminology and procedure of training models. NLP knowledge will be good, but is not a necessity as the focus will be on quick prototyping in production.&lt;/p&gt;
&lt;p&gt;By the end of the talk, the audience will have:
- Learnt how to preprocess data for NLP systems
- Learnt how to quickly prototype and train a translation model
- Learnt how to create a web app for the NLP model using Flask
- Learnt how to containerize a pytorch model using Docker
- Learnt how to serve the model as an app using uwsgi, nginx and&lt;/p&gt;
&lt;p&gt;Outline:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Introduction to translation systems, machine translation framework&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ML Modelling
- Preprocessing data
- Training
- Generating new translations&lt;/p&gt;
&lt;p&gt;Serving and prototyping
- Flask app
- Docker container
- Nginx + uwsgi + supervisord configurations
- Putting it all together&lt;/p&gt;
&lt;p&gt;Good practices
Q/A (optional?)&lt;/p&gt;
</content><category term="EuroPython 2020"></category><category term="europython"></category><category term="europython-2020"></category><category term="europython-online"></category><category term="Data Science"></category><category term="Deep Learning"></category><category term="Machine-Learning"></category><category term="Natural Language Processing"></category><category term="Web Servers and MicroFWs (Flask/Tornado/Nginx/...)"></category></entry></feed>