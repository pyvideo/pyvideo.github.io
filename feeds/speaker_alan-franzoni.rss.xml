<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Mon, 20 Jun 2016 00:00:00 +0000</lastBuildDate><item><title>Python Good Practices</title><link>https://pyvideo.org/europython-2013/python-good-practices.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alan Franzoni</dc:creator><pubDate>Wed, 03 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-03:europython-2013/python-good-practices.html</guid><category>design</category><category>deploy</category><category>patterns</category><category>teamwork</category><category>architecture</category><category>best-practices</category></item><item><title>Delivery isnt magic anymore</title><link>https://pyvideo.org/pycon-italia-2016/delivery-isnt-magic-anymore.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alan Franzoni</dc:creator><pubDate>Mon, 20 Jun 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-06-20:pycon-italia-2016/delivery-isnt-magic-anymore.html</guid></item><item><title>Dependency injection is your friend</title><link>https://pyvideo.org/europython-2011/dependency-injection-is-your-friend.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Alan Franzoni - 24 June 2011 in &amp;quot;Track Spaghetti&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Dependency injection is a technique that has been around since long, and
it's widely used in many programming languages and environments, but
it's not that widespread in the Python world.&lt;/p&gt;
&lt;p&gt;Many think that using dependency injection will force writing large-and-
complex xml blobs, break encapsulation, or reduce code readability, or
just that it's unneeded in an highly expressive language like Python is.&lt;/p&gt;
&lt;p&gt;On the contrary, I'll show you that DI: - doesn't require any library or
framework; - encourages peer role identification; - helps keeping a
class focused and cohesive; - encourages separation between wiring from
applicative code; - makes your code more reusable, expressive and
testable; - doesn't break encapsulation; - turns part of your coding
efforts into configuration&lt;/p&gt;
&lt;p&gt;Large applications, by the way, might just get a great maintenance boost
by using a real DI container, hence I'll briefly cover Pydenji, the
Python(ic) dependency injection toolkit, and what it can do for your
application.&lt;/p&gt;
&lt;p&gt;A basic knowledge of object oriented design and SOLID principles is
required in order to fully appreciate the content of this talk.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alan Franzoni</dc:creator><pubDate>Thu, 07 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-07:europython-2011/dependency-injection-is-your-friend.html</guid><category>design</category><category>maintenance</category><category>xml</category></item><item><title>Language alone won't pay your bills</title><link>https://pyvideo.org/europython-2012/language-alone-wont-pay-your-bills.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2012] Alan Franzoni - 5 JULY 2012 in &amp;quot;Track Spaghetti&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;What’s Python like? Is it ready for the “enterprise”? Does it scale well
in the “cloud”? How does it stand against its old, bearded enemies like
Java, or new threats like Ruby? A lot of work on Python is focused on
the language itself, making it quite pleasant to read and write, and
catering hordes of language lovers that swear by it. Nowadays, though,
we don’t just choose a language: we pick a platform - which includes a
runtime, APIs, and a lot of tools - along with its strengths and
weaknesses, and many factors should be considered before doing so -
mostly because we don’t usually have a “best choice ever” and we must
face some sort of tradeoff with each design choice. Java is ubiquitous
in the “enterprise software” world despite its cumbersomeness - why? Is
it really just a matter of slow adoption rate, or does it still stand
strong in some fields? We’ll explore where Python already works well and
where it falls beyond others, not just in terms of language beauty, but
in terms of tools and team productivity. We won’t be able to go really
deep into each aspect since time is limited, but questions are welcome.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alan Franzoni</dc:creator><pubDate>Fri, 06 Jul 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-07-06:europython-2012/language-alone-wont-pay-your-bills.html</guid></item></channel></rss>