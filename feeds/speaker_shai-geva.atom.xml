<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org - Shai Geva</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_shai-geva.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2023-04-22T00:00:00+00:00</updated><subtitle></subtitle><entry><title>10 Ways To Shoot Yourself In The Foot With Tests</title><link href="https://pyvideo.org/pycon-us-2023/10-ways-to-shoot-yourself-in-the-foot-with-tests.html" rel="alternate"></link><published>2023-04-22T00:00:00+00:00</published><updated>2023-04-22T00:00:00+00:00</updated><author><name>Shai Geva</name></author><id>tag:pyvideo.org,2023-04-22:/pycon-us-2023/10-ways-to-shoot-yourself-in-the-foot-with-tests.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Tests are great.&lt;/p&gt;
&lt;p&gt;Except when they’re not.&lt;/p&gt;
&lt;p&gt;Almost every developer who’s worked with tests has encountered a test
suite that caused a lot of pain.&lt;/p&gt;
&lt;p&gt;Some of them just don’t protect us when we need them, some are flaky,
some keep breaking because of unrelated changes …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Tests are great.&lt;/p&gt;
&lt;p&gt;Except when they’re not.&lt;/p&gt;
&lt;p&gt;Almost every developer who’s worked with tests has encountered a test
suite that caused a lot of pain.&lt;/p&gt;
&lt;p&gt;Some of them just don’t protect us when we need them, some are flaky,
some keep breaking because of unrelated changes, some take hours to
debug whenever they fail.&lt;/p&gt;
&lt;p&gt;And while every company is different, there are definitely patterns. A
lot of these problems are the result of some common pitfalls that trap
many teams. These pitfalls might be common, but they're not easy to spot
- I’ve seen all of them happen in strong, capable, experienced teams.
Most of these I fell into myself at least once.&lt;/p&gt;
&lt;p&gt;In this session, we'll take a look at a selection of problematic testing
choices, with examples that show these in the context of common Python
frameworks and libraries. We'll discuss how to identify them, what
problems they might cause and what alternatives we have so we can save
ourselves the pain.&lt;/p&gt;
</content><category term="PyCon US 2023"></category></entry></feed>