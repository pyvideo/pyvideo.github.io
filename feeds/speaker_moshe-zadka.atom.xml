<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_moshe-zadka.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2019-10-05T00:00:00+00:00</updated><entry><title>Boring Object Orientation</title><link href="https://pyvideo.org/pycolorado-2019/boring-object-orientation.html" rel="alternate"></link><published>2019-09-07T00:00:00+00:00</published><updated>2019-09-07T00:00:00+00:00</updated><author><name>Moshe Zadka</name></author><id>tag:pyvideo.org,2019-09-07:pycolorado-2019/boring-object-orientation.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The strengths and weaknesses of Python lend themselves to a different style of object oriented programming. By accepting several constraints on how we design and implement classes, we make our code more robust, more testable, and easier to adapt to changing circumstances&lt;/p&gt;
</summary></entry><entry><title>Boring Object Orientation</title><link href="https://pyvideo.org/pybay-2019/boring-object-orientation.html" rel="alternate"></link><published>2019-08-17T00:00:00+00:00</published><updated>2019-08-17T00:00:00+00:00</updated><author><name>Moshe Zadka</name></author><id>tag:pyvideo.org,2019-08-17:pybay-2019/boring-object-orientation.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk was presented at PyBay2019 - 4th annual Bay Area Regional Python conference. See pybay.com for more details about PyBay and click SHOW MORE for more information about this talk.&lt;/p&gt;
&lt;p&gt;Description
The strengths and weaknesses of Python lend themselves to a different style of object oriented programming. By accepting several constraints on how we design and implement classes, we make our code more robust, more testable, and easier to adapt to changing circumstances.&lt;/p&gt;
&lt;p&gt;Abstract
Detailed outline
Introduction (2m)
Python and object oriented programming (1m)
Why OO design principles? (1m)
Interfaces (4m)
Delve into the best practices of explicit (sometimes called &amp;quot;goosely typed&amp;quot;) interfaces in Python, and showing how to use those with the zope.interface system.&lt;/p&gt;
&lt;p&gt;Why declare interfaces?
Declaring interfaces with zope.interface.
Implementing and providing interfaces with zope.interface.
Testing for interface provision.
Boring constructors (4m)
Newcomers to Python often put non-trivial code in the constructors. This is often a bad idea. This section will cover why, and show where is the right place to put non-trivial initialization logic.&lt;/p&gt;
&lt;p&gt;Boring vs. interesting constructors.
Why boring constructors.
Moving interesting stuff to class methods.
Using attrs.
Boring objects (4m)
&amp;quot;Objects are data and behavior&amp;quot; -- following this principle in a naive way leads to putting a lot of code inside objects, creating unwieldy objects and unwieldy interfaces. This section will discuss why that is problematic, and show-case some alternatives.&lt;/p&gt;
&lt;p&gt;Why make objects boring? (1m)
What's singledispatch (1m)
Example using functools.singledispatch (2m)
Immutability (4m)
Shared mutable state is the root of all evil -- and in Python, a lot of things are shared! One way to avoid evil is to reduce mutability. This section will discuss how to avoid mutability while keeping reasonable performance and ergonomic APIs.&lt;/p&gt;
&lt;p&gt;Immutability as bug-avoidance (1m)
Immutability as simpler interfaces (1m)
Frozen attrs
Efficiently immutable data structures
Avoiding Private Methods (4m)
Private methods are often under-documented crutches. This section will discuss the kind of problems they can cause, and describe good alternatives as well as an almost-mechanical refactoring to avoid private methods.&lt;/p&gt;
&lt;p&gt;What's wrong with private methods? (1m)
Using private attributes (1m)
Refactoring private methods away (2m)
Composition (4m)
Traditional object-orientation stressed inheritance. However, for a long time, it has been known that inheritance is problematic -- even the GoF &amp;quot;Design Patterns&amp;quot; covers how to avoid it. This section will cover the problems it causes, and good alternatives.&lt;/p&gt;
&lt;p&gt;Inheritance-as-API (1m)
Problems with inheritance-as-API (1m)
What is composition? (1m)
Composition-as-API (1m)
Summary (3m)
Bringing this all to a close, the summary will show the common thread in all of these -- that keepings objects simple and predictable (&amp;quot;boring&amp;quot;) leads to code that is easier to maintain.&lt;/p&gt;
&lt;p&gt;Python affords near-infinite freedom (1m)
Choices have consequences (1m)
Know the rules to break the rules (1m)&lt;/p&gt;
&lt;p&gt;Original slides: &lt;a class="reference external" href="https://t.ly/6g1rZ"&gt;https://t.ly/6g1rZ&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;About the speaker
Moshe has been in the open source community since 1995 and in the Python community since 1999. He has been a core contributor to Python, and is a core contributor, and an early member, of the Twisted project.&lt;/p&gt;
&lt;p&gt;Moshe has given talks at the International Python Conference, PyCon, PyBay, PyTexas and several Python and Docker meetups.&lt;/p&gt;
&lt;p&gt;Sponsor Acknowledgement
This and other PyBay2019 videos are via the help of our media partner AlphaVoice (&lt;a class="reference external" href="https://www.alphavoice.io/"&gt;https://www.alphavoice.io/&lt;/a&gt;)!&lt;/p&gt;
&lt;p&gt;#pybay #pybay2019 #python #python3&lt;/p&gt;
</summary></entry><entry><title>A Time Traveler's Perspective on Software Developer Code of Ethics</title><link href="https://pyvideo.org/pygotham-2019/a-time-travelers-perspective-on-software-developer-code-of-ethics.html" rel="alternate"></link><published>2019-10-05T00:00:00+00:00</published><updated>2019-10-05T00:00:00+00:00</updated><author><name>Moshe Zadka</name></author><id>tag:pyvideo.org,2019-10-05:pygotham-2019/a-time-travelers-perspective-on-software-developer-code-of-ethics.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In the history part in &amp;quot;Ethics for Software Developer&amp;quot;, I have heard that
there was no code of ethics for software developers in the 21st century. Now
that I have time-traveled here from the 23rd century, I realized it was
true. I will share the accepted wisdom from the 23rd century about how code
of ethics and licensing looks like.&lt;/p&gt;
&lt;p&gt;Content Warning: There will be brief mentions of pornography
and pornography-centric applications.&lt;/p&gt;
</summary></entry><entry><title>Exploration-Oriented Programming</title><link href="https://pyvideo.org/north-bay-python-2018/exploration-oriented-programming.html" rel="alternate"></link><published>2018-11-03T00:00:00+00:00</published><updated>2018-11-03T00:00:00+00:00</updated><author><name>Moshe Zadka</name></author><id>tag:pyvideo.org,2018-11-03:north-bay-python-2018/exploration-oriented-programming.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Can Jupyter change how we develop software? Instead of having an
edit-debug cycle, we can iterativey build up code snippets with
confidence, seeing how they process their inputs. Jupyter lets us refine
ideas in real time, integrating testing with development.
Exploration-oriented programming is developing inside an interactive
environment.&lt;/p&gt;
</summary></entry><entry><title>Immutable Data Structures in Python</title><link href="https://pyvideo.org/pyninsula-2017/immutable-data-structures-in-python.html" rel="alternate"></link><published>2018-01-06T00:00:00+00:00</published><updated>2018-01-06T00:00:00+00:00</updated><author><name>Moshe Zadka</name></author><id>tag:pyvideo.org,2018-01-06:pyninsula-2017/immutable-data-structures-in-python.html</id><summary type="html"></summary></entry><entry><title>The Tox Talk</title><link href="https://pyvideo.org/pyninsula-2017/the-tox-talk.html" rel="alternate"></link><published>2017-06-27T00:00:00+00:00</published><updated>2017-06-27T00:00:00+00:00</updated><author><name>Moshe Zadka</name></author><id>tag:pyvideo.org,2017-06-27:pyninsula-2017/the-tox-talk.html</id><summary type="html"></summary></entry><entry><title>Sunday Morning Lightning Talks + Keynote</title><link href="https://pyvideo.org/pycon-us-2018/sunday-morning-lightning-talks-keynote.html" rel="alternate"></link><published>2018-05-13T00:00:00+00:00</published><updated>2018-05-13T00:00:00+00:00</updated><author><name>Brett Cannon</name></author><id>tag:pyvideo.org,2018-05-13:pycon-us-2018/sunday-morning-lightning-talks-keynote.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Keynote Speaker: Brett Cannon&lt;/p&gt;
</summary><category term="keynote"></category><category term="lightning talks"></category></entry><entry><title>Web Applications, A to Z</title><link href="https://pyvideo.org/pycon-us-2018/web-applications-a-to-z.html" rel="alternate"></link><published>2018-05-09T00:00:00+00:00</published><updated>2018-05-09T00:00:00+00:00</updated><author><name>Moshe Zadka</name></author><id>tag:pyvideo.org,2018-05-09:pycon-us-2018/web-applications-a-to-z.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Modern web applications have gotten complicated -- backend logic, front-end logic, storage and deployment options abound.&lt;/p&gt;
&lt;p&gt;This tutorial will take a tour of all the pieces that go into making a web application, and show how they all fit together -- using specific choices, specific examples and a lot of hands-on programming, to give participants a chance to  actually write a web applications: all the parts.&lt;/p&gt;
&lt;p&gt;We will use some external third-party services, but care is taken to fit into the free tier.&lt;/p&gt;
</summary></entry><entry><title>Moving Towards Best Practices in Legacy Code Bases</title><link href="https://pyvideo.org/pybay-2017/moving-towards-best-practices-in-legacy-code-bases.html" rel="alternate"></link><published>2017-08-12T00:00:00+00:00</published><updated>2017-08-12T00:00:00+00:00</updated><author><name>Moshe Zadka</name></author><id>tag:pyvideo.org,2017-08-12:pybay-2017/moving-towards-best-practices-in-legacy-code-bases.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;When a company is young, getting the product out the door is the most important thing. Time to market and lopsided hiring of inexperienced developers often ends up delivering a product that works, but is riddled with Python anti-patterns. How to move towards best practices while maintaining development velocity and product stability?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Real life is messy. Real companies doubly so. While, of course, the decision to use Python is a good one, often developers are hired who are either inexperienced or are new to Python. Following best practices, or even learning what they are, or even avoiding replicating Java/C++ in Python, are treated as luxuries reserved for bigger companies.&lt;/p&gt;
&lt;p&gt;After enough pain-- in the form of production outages-- is experienced, it is often possible to convince companies that efforts need to be made to bring their code up to date. What is the best way to achieve that?&lt;/p&gt;
&lt;p&gt;We will talk about practices to update to the newest version of Python, and the newest versions of libraries, while avoiding (most) risk. We will cover techniques to introduce static analysis, and better unit testing, to reduce the chance of customer-facing problems. We will also cover how to refactor large mono-repos into manageable pieces using pip, pants and pex. Finally, we will cover how to introduce a microservice architecture gradually, in order to isolate faults.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bios&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Moshe is a core Twisted contributor, and has contributed to core Python. He has building and deploying web applications since 2001.&lt;/p&gt;
&lt;p&gt;Kurt B. Rose has been developing in Python since 2008 in the areas of web, networking, and security at Samsung, PayPal, and several startups.&lt;/p&gt;
</summary></entry><entry><title>Building Python Applications with Docker</title><link href="https://pyvideo.org/pytexas-2017/building-python-applications-with-docker.html" rel="alternate"></link><published>2017-11-18T00:00:00+00:00</published><updated>2017-11-18T00:00:00+00:00</updated><author><name>Moshe Zadka</name></author><id>tag:pyvideo.org,2017-11-18:pytexas-2017/building-python-applications-with-docker.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Containers are new, and Docker is a fast moving platform. Best practices evolve quickly, while examples in existing code-bases fall behind. I will cover best practices for delivering small, secure, reproducible containers of Python applications using recent Docker versions.&lt;/p&gt;
</summary></entry><entry><title>Lightning Talks</title><link href="https://pyvideo.org/pytexas-2017/lightning-talks.html" rel="alternate"></link><published>2017-11-18T00:00:00+00:00</published><updated>2017-11-18T00:00:00+00:00</updated><author><name>Walker Hale</name></author><id>tag:pyvideo.org,2017-11-18:pytexas-2017/lightning-talks.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;table border="1" class="colwidths-given docutils"&gt;
&lt;caption&gt;Lightning Talks&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col width="10%" /&gt;
&lt;col width="30%" /&gt;
&lt;col width="60%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Time&lt;/th&gt;
&lt;th class="head"&gt;Speaker&lt;/th&gt;
&lt;th class="head"&gt;Title&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=w3Z3P0aDwN4&amp;amp;t=00m00s"&gt;00:00&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Walker Hale&lt;/td&gt;
&lt;td&gt;Conda packages for bash scripts&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=w3Z3P0aDwN4&amp;amp;t=05m10s"&gt;05:10&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Ricky Whitaker&lt;/td&gt;
&lt;td&gt;Becoming Comfortable in Discomfort: A few life lessons from quitting my job&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=w3Z3P0aDwN4&amp;amp;t=12m26s"&gt;12:26&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Moshe Zadka&lt;/td&gt;
&lt;td&gt;Introducing NColony&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=w3Z3P0aDwN4&amp;amp;t=17m05s"&gt;17:05&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Peter Graham&lt;/td&gt;
&lt;td&gt;Safely using read replica with postgres&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=w3Z3P0aDwN4&amp;amp;t=24m12s"&gt;24:12&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;John Arbelaez&lt;/td&gt;
&lt;td&gt;The pyslackers community&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=w3Z3P0aDwN4&amp;amp;t=30m52s"&gt;30:52&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Caroline D Dikibo&lt;/td&gt;
&lt;td&gt;OSS Project Awareness: Zulip&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=w3Z3P0aDwN4&amp;amp;t=39m22s"&gt;39:22&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Dustin Ingram&lt;/td&gt;
&lt;td&gt;Good Hacker; Bad Hacker&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</summary><category term="lightning talks"></category></entry><entry><title>BayPIGgies April 2017 talk: Annual PyCon Preview</title><link href="https://pyvideo.org/bay-piggies/baypiggies-april-2017-talk-annual-pycon-preview.html" rel="alternate"></link><published>2017-04-27T00:00:00+00:00</published><updated>2017-04-27T00:00:00+00:00</updated><author><name>Moshe Zadka</name></author><id>tag:pyvideo.org,2017-04-27:bay-piggies/baypiggies-april-2017-talk-annual-pycon-preview.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Video courtesy of our meeting host, LinkedIn.
1. Automate AWS With Python - Moshe Zadka
AWS is one of the best-known cloud vendors. Using the Web UI is fine when starting out, but automating cloud operations is important. Boto3 provides a great Pythonic API to AWS, but using it correctly can be subtle.
The talk will cover how to automate AMI builds, building Cloud Formation Templates and automating S3 bucket management.
Speaker Bio
Moshe has been involved with Python since 1998, when he helped obsolete math-related modules. Since then, he made some contributions that were not just deleting code to core Python, and has been a contributor on the Twisted project since its inception.
Abstract
2. Yes, It's Time to Learn Regular Expressions - Al Sweigart
Regular expressions have a reputation as opaque and inscrutable. However, the basic concepts behind &amp;quot;regex&amp;quot; and text pattern recognition are simple to grasp. This talk is for any programmer who isn't familiar with Python's re module and its best practices. Stop putting it off, it's time to learn regular expressions!
Speaker Bio
Al Sweigart is a software developer and the author of Automate the Boring Stuff with Python, Invent Your Own Computer Games with Python, Making Games with Python &amp;amp; Pygame, and Hacking Secret Ciphers with Python. These books are freely available under a Creative Commons license at &lt;a class="reference external" href="http://inventwithpython.com"&gt;http://inventwithpython.com&lt;/a&gt;.
Al enjoys haunting coffee shops, writing educational materials, cat whispering, and making useful software. He lives in San Francisco.
3. Type uWSGI; press enter; what happens? - Asheesh Laroia and Philip James
You're a pretty knowledgeable Python web application developer, but how does that web application get served to the world? For many of us, uWSGI is the magic that makes our application available, and in this talk we'll look at how uWSGI works with the OS and the networking stack to make the magic happen.
Speaker Bios
Asheesh Laroia
By day, Asheesh Laroia is a member of the technical staff at Sandstorm in Palo Alto. By night, he is volunteer President at OpenHatch, helping create workshops that teach students how to get involved in open source. His technical background touches machine learning, security, and linguistics. He helped start the Boston Python Workshop for women and their friends, has been teaching Python to newcomers since 2004, including at Noisebridge and the EFF, and has advised user groups on how to make their events more newcomer-friendly and gender-diverse.
Philip James
Philip James is a Software Engineer at Stripe, a Civic Technologist and a Director for the City of Alameda Democratic Club and the East Bay Young Democrats. In his free time he builds ContactOtter, a smart address book you can share.&lt;/p&gt;
</summary></entry><entry><title>Automate AWS With Python</title><link href="https://pyvideo.org/pycon-us-2017/automate-aws-with-python.html" rel="alternate"></link><published>2017-05-20T00:00:00+00:00</published><updated>2017-05-20T00:00:00+00:00</updated><author><name>Moshe Zadka</name></author><id>tag:pyvideo.org,2017-05-20:pycon-us-2017/automate-aws-with-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;AWS is one of the best-known cloud vendors. Using the Web UI is fine
when starting out, but automating cloud operations is important. Boto3
provides a great Pythonic API to AWS, but using it correctly can be
subtle.&lt;/p&gt;
&lt;p&gt;The talk will cover how to automate AMI builds, building Cloud Formation
Templates and automating S3 bucket management.&lt;/p&gt;
</summary></entry><entry><title>Creating And Consuming Modern Web Services with Twisted</title><link href="https://pyvideo.org/pycon-us-2017/creating-and-consuming-modern-web-services-with-twisted.html" rel="alternate"></link><published>2017-05-18T00:00:00+00:00</published><updated>2017-05-18T00:00:00+00:00</updated><author><name>Moshe Zadka</name></author><id>tag:pyvideo.org,2017-05-18:pycon-us-2017/creating-and-consuming-modern-web-services-with-twisted.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This tutorial will show students how to write applications and services
which efficiently publish and consume services and APIs.&lt;/p&gt;
&lt;p&gt;To do so, we will combine 4 Python-based technologies:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Jupyter is a real-time development environment.&lt;/li&gt;
&lt;li&gt;Twisted is a powerful platform for network programming that supports
many protocols, including HTTP.&lt;/li&gt;
&lt;li&gt;Klein is a Twisted-based web application framework.&lt;/li&gt;
&lt;li&gt;Treq is a Requests-style HTTP client based on Twisted.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;By combining all of these we will guide students through &lt;em&gt;interactively
prototyping&lt;/em&gt; a production quality web application that &lt;em&gt;publishes&lt;/em&gt; both
&lt;em&gt;service APIs&lt;/em&gt; and web resources such as HTML, and that can &lt;em&gt;efficiently
consume many back-end services&lt;/em&gt; such as 3rd-party APIs.&lt;/p&gt;
</summary></entry><entry><title>Pants, or How I Learned to Stop Worrying and Love Builds</title><link href="https://pyvideo.org/pybay-2016/pants-or-how-i-learned-to-stop-worrying-and-love-builds.html" rel="alternate"></link><published>2016-08-21T00:00:00+00:00</published><updated>2016-08-21T00:00:00+00:00</updated><author><name>Moshe Zadka</name></author><id>tag:pyvideo.org,2016-08-21:pybay-2016/pants-or-how-i-learned-to-stop-worrying-and-love-builds.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;For integrated services, it makes sense to keep several logical Python projects in a single repository -- a common library, a web front end and a back end service. For such repositories, Pants (build in Python for Python, Java, C++ and more) helps maintain dependencies and build (mostly) stand-alone executables which simplify deployment.
​
Abstract
Pants is a modern build system written in Python. It can build Python, Java, C++, Go and more. Twitter, Square and FourSquare use it internally, and contribute to it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bio:&lt;/strong&gt;
Moshe is a Twisted contributor, and has contributed to core Python. He loves infrastructure for building, monitoring and making services highly available.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://speakerdeck.com/pybay2016/moshe-zadka-pants-building-python-for-fun-and-profit"&gt;https://speakerdeck.com/pybay2016/moshe-zadka-pants-building-python-for-fun-and-profit&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Lightning Talks - 2016-06-01</title><link href="https://pyvideo.org/pycon-us-2016/lightning-talks-2016-06-01.html" rel="alternate"></link><published>2016-06-01T00:00:00+00:00</published><updated>2016-06-01T00:00:00+00:00</updated><author><name>Hayley Denbraver</name></author><id>tag:pyvideo.org,2016-06-01:pycon-us-2016/lightning-talks-2016-06-01.html</id><summary type="html"></summary><category term="lightning talks"></category></entry><entry><title>Plenary: Friday Evening Lightning Talks</title><link href="https://pyvideo.org/pycon-us-2010/pycon-2010--plenary--friday-evening-lightning-tal.html" rel="alternate"></link><published>2010-02-19T00:00:00+00:00</published><updated>2010-02-19T00:00:00+00:00</updated><author><name>Jacob Kaplan-Moss</name></author><id>tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--plenary--friday-evening-lightning-tal.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Plenary: Friday Evening Lightning Talks&lt;/p&gt;
&lt;p&gt;(00:00) Jacob Kaplan-Moss - lightning talk about lightning talks&lt;/p&gt;
&lt;p&gt;(03:50) Van Lindberg - What an Open Source Lawyer Actually Does&lt;/p&gt;
&lt;p&gt;(09:40) Greg Wilson - The Next Big Programming Book and How You Can Make
it Happen (&lt;a class="reference external" href="http://www.third-bit.com/"&gt;http://www.third-bit.com/&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;(14:25) Moshe Zadka - Don't Write Big Applications (more info
&lt;a class="reference external" href="http://moshez.wordpress.com/2010/02/17/dont-write-big-applications-a%20-lightning-talk/"&gt;here&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;(19:35) Ned Batchelder - What's new in coverage.py
(&lt;a class="reference external" href="http://nedbatchelder.com/"&gt;http://nedbatchelder.com/&lt;/a&gt;,
&lt;a class="reference external" href="http://nedbatchelder.com/code/coverage/"&gt;coverage.py&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;(25:10) Mike Maccana - Python Docx
(&lt;a class="reference external" href="http://github.com/mikemaccana/python-docx/"&gt;http://github.com/mikemaccana/python-
docx/&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;(29:25) Trent Mick - ActiveState Code v3/Python Cookbook v3
(&lt;a class="reference external" href="http://code.activestate.com/"&gt;http://code.activestate.com/&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;(34:40) Daniel Holth - Writing a SQLAlchemy Dialect&lt;/p&gt;
&lt;p&gt;(37:30) Dave Malcolm - Better Ways of Debugging the CPython Runtime&lt;/p&gt;
&lt;p&gt;(43:00) David Huggins-Daines - Recognizing Speech With Python
(&lt;a class="reference external" href="http://cmusphinx.sourceforge.net/"&gt;http://cmusphinx.sourceforge.net/&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;(48:00) Lucio Torre - Ubuntu One and Windows&lt;/p&gt;
</summary><category term="lightning talks"></category><category term="activestate"></category><category term="bigapps"></category><category term="cmusphinx"></category><category term="coverage.py"></category><category term="cpython"></category><category term="lawyers"></category><category term="programmingbook"></category><category term="pycon"></category><category term="pycon2010"></category><category term="python-cookbook"></category><category term="sqlalchemy"></category><category term="ubuntuone"></category></entry><entry><title>Make Sure Your Programs Crash</title><link href="https://pyvideo.org/pycon-us-2012/make-sure-your-programs-crash.html" rel="alternate"></link><published>2012-03-09T00:00:00+00:00</published><updated>2012-03-09T00:00:00+00:00</updated><author><name>Moshe Zadka</name></author><id>tag:pyvideo.org,2012-03-09:pycon-us-2012/make-sure-your-programs-crash.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;With Python, segmentation faults and the like simply don't happen --
programs do not crash. However, the world is a messy, chaotic place.
What happens when your programs crash? I will talk about how to make
sure that your application survives crashes, reboots and other nasty
problems.&lt;/p&gt;
</summary></entry></feed>