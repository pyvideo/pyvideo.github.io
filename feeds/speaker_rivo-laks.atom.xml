<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_rivo-laks.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2018-10-04T00:00:00+00:00</updated><entry><title>Creating solid API's</title><link href="https://pyvideo.org/pycon-estonia-2018/creating-solid-apis.html" rel="alternate"></link><published>2018-10-04T00:00:00+00:00</published><updated>2018-10-04T00:00:00+00:00</updated><author><name>Rivo Laks</name></author><id>tag:pyvideo.org,2018-10-04:pycon-estonia-2018/creating-solid-apis.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyCon Estonia talk&lt;/p&gt;
</summary></entry><entry><title>Creating Solid APIs</title><link href="https://pyvideo.org/djangocon-europe-2018/creating-solid-apis.html" rel="alternate"></link><published>2018-05-23T00:00:00+00:00</published><updated>2018-05-23T00:00:00+00:00</updated><author><name>Rivo Laks</name></author><id>tag:pyvideo.org,2018-05-23:djangocon-europe-2018/creating-solid-apis.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Increasingly, our apps are used not by humans but by other apps - via their APIs. Thus it is increasingly important that your APIs are well-designed and easy to consume for other developers.
I will share tips and good practices on authentication, versioning, documentation, response structure, and why it all matters.&lt;/p&gt;
&lt;p&gt;Adding a few API endpoints to your application for internal consumption is easy. Creating APIs that other developers will love to use is a much harder problem.
You'll need to think about solving variety of topics such as versioning, authentication, response structure, documentation and more. There are existing good practices for each of them, but often developers who haven't done a lot of API work aren't familiar with them.&lt;/p&gt;
&lt;p&gt;My talk will show how to build on top of Django and DRF and find reasonable solutions for those problems.
I will talk about JSON API, OAuth2, and other technologies and show how they fit into the puzzle.
Benefits of standardized response structure, as well as auto-generated documentation will also be discussed.&lt;/p&gt;
&lt;p&gt;I'll introduce OAuth2, discussing when it is a good choice and when not, as well as some trickier parts of it.
Next we'll look at why a standardized response structure such as JSON API makes lives of 3rd-party developers easier. We'll then move on to versioning and how you can change your API without breaking all existing apps. And the talk wouldn't be complete without looking at documenting your APIs and why the docs should be auto-generated.&lt;/p&gt;
&lt;p&gt;Rivo Laks&lt;/p&gt;
</summary></entry><entry><title>Creating Solid APIs</title><link href="https://pyvideo.org/europython-2018/creating-solid-apis.html" rel="alternate"></link><published>2018-07-27T00:00:00+00:00</published><updated>2018-07-27T00:00:00+00:00</updated><author><name>Rivo Laks</name></author><id>tag:pyvideo.org,2018-07-27:europython-2018/creating-solid-apis.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Increasingly, our apps are used not by humans but by other apps - via
their APIs. Thus it is increasingly important that your APIs are
well-designed and easy to consume for other developers.&lt;/p&gt;
&lt;p&gt;Adding a few API endpoints to your application for internal consumption
is easy. Creating APIs that other developers will love to use is a much
harder problem. You’ll need to think about solving variety of topics
such as versioning, authentication, response structure, documentation
and more. There are existing good practices for each of them, but often
developers who haven’t done a lot of API work aren’t familiar with them.&lt;/p&gt;
&lt;p&gt;My talk will show how to find reasonable solutions for those problems. I
will talk about importance and intricacies of good documentation and why
auto- generating it from your code is useful. I’ll show how to make use
of familiarity by using standards such as JSON API and show benefits
brought by its standardized response structure that makes lives of
3rd-party developers easier.&lt;/p&gt;
&lt;p&gt;Authentication will be discussed, including introduction to OAuth2. I’ll
talk about when OAuth2 is a good choice and when not, as well as dig
into some trickier parts of it. We’ll then move on to versioning and how
you can change your API without breaking all existing apps. Finally
we’ll wrap it all up by looking at some major APIs that are using the
same principles.&lt;/p&gt;
</summary></entry><entry><title>Creating Solid APIs</title><link href="https://pyvideo.org/pycon-au-2018/creating-solid-apis.html" rel="alternate"></link><published>2018-08-24T00:00:00+00:00</published><updated>2018-08-24T00:00:00+00:00</updated><author><name>Rivo Laks</name></author><id>tag:pyvideo.org,2018-08-24:pycon-au-2018/creating-solid-apis.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Increasingly, our apps are used not by humans but by other apps - via their APIs. Thus your APIs need to be well-designed and easy to consume for other developers.
I will share tips and good practices on authentication, versioning, documentation, response structure, and why it all matters.&lt;/p&gt;
</summary></entry><entry><title>Django and React in Modern Web Apps</title><link href="https://pyvideo.org/pycon-lt-2017/django-and-react-in-modern-web-apps.html" rel="alternate"></link><published>2017-05-13T11:40:00+03:00</published><updated>2017-05-13T11:40:00+03:00</updated><author><name>Rivo Laks</name></author><id>tag:pyvideo.org,2017-05-13:pycon-lt-2017/django-and-react-in-modern-web-apps.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;a class="reference external" href="http://pycon.lt/2017.html"&gt;http://pycon.lt/2017.html&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Docker Lessons from Real-World Projects</title><link href="https://pyvideo.org/djangocon-europe-2017/docker-lessons-from-real-world-projects.html" rel="alternate"></link><published>2017-04-05T00:00:00+00:00</published><updated>2017-04-05T00:00:00+00:00</updated><author><name>Rivo Laks</name></author><id>tag:pyvideo.org,2017-04-05:djangocon-europe-2017/docker-lessons-from-real-world-projects.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Docker has received a lot of hype since it became available a few years ago. While lots of developers have played around with it, going through tutorials and small demo projects, we often lack practical experience of bigger, real-world projects. Docker can be quite useful in these contexts due to provided service isolation and build reproducability, among other benefits.
This talk begins by exploring reasons for using Docker in the first place. I will then demonstrate how to convert projects with multiple dependent services and build steps to use Docker and how it changes the usual Django development workflow. Next I will go through some of the subtleties and pain points we've encountered when doing so. Some general advice for moving towards production will be offered as well.&lt;/p&gt;
</summary></entry><entry><title>Django and the real-time web</title><link href="https://pyvideo.org/djangocon-europe-2015/rivo-laks-django-and-the-real-time-web-at-europe.html" rel="alternate"></link><published>2015-08-08T00:00:00+00:00</published><updated>2015-08-08T00:00:00+00:00</updated><author><name>Rivo Laks</name></author><id>tag:pyvideo.org,2015-08-08:djangocon-europe-2015/rivo-laks-django-and-the-real-time-web-at-europe.html</id><summary type="html"></summary></entry></feed>