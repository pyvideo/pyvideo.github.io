<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_francesco-crippa.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2011-07-13T00:00:00+00:00</updated><entry><title>Implementing distributed applications using ZeroMQ, Python and other bad guys...</title><link href="https://pyvideo.org/europython-2011/implementing-distributed-applications-using-zerom.html" rel="alternate"></link><published>2011-07-13T00:00:00+00:00</published><updated>2011-07-13T00:00:00+00:00</updated><author><name>Francesco Crippa</name></author><id>tag:pyvideo.org,2011-07-13:europython-2011/implementing-distributed-applications-using-zerom.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Francesco Crippa - 24 June 2011 in &amp;quot;Track Spaghetti&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Cloud Computing and Large Scale environments require sometime
applications based on complex and distributed architecturesâ€¦ and this
usually means a huge overhead in the design and confusion out of control
in the code (network wise race conditions, single points of failure and
so on)&lt;/p&gt;
&lt;p&gt;Introducing elements like *MQ and IPC frameworks in this kind of
applications is the only way to reduce the complexity and enable a fluid
design (in other words: mess-under-control)&lt;/p&gt;
&lt;p&gt;The talk is focused on describing how to design a distributed
application in different scenarios, using ZeroMQ (a modern broker-less
MQ system) as core framework, with examples and demos.&lt;/p&gt;
</summary><category term="design"></category><category term="distributed"></category><category term="zeromq"></category></entry></feed>