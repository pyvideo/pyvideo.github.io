<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org - Charles D Lindsey</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_charles-d-lindsey.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2023-07-10T00:00:00+00:00</updated><subtitle></subtitle><entry><title>Bayesian Statistics with Python No Resampling Necessary</title><link href="https://pyvideo.org/scipy-2023/bayesian-statistics-with-python-no-resampling-necessary.html" rel="alternate"></link><published>2023-07-10T00:00:00+00:00</published><updated>2023-07-10T00:00:00+00:00</updated><author><name>Charles D Lindsey</name></author><id>tag:pyvideo.org,2023-07-10:/scipy-2023/bayesian-statistics-with-python-no-resampling-necessary.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;TensorFlow Probability is a powerful library for statistical analysis in Python. Using TensorFlow Probability’s implementation of Bayesian methods, modelers can incorporate prior information and obtain parameter estimates and a quantified degree of belief in the results. Resampling methods like Markov Chain Monte Carlo can also be used to …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;TensorFlow Probability is a powerful library for statistical analysis in Python. Using TensorFlow Probability’s implementation of Bayesian methods, modelers can incorporate prior information and obtain parameter estimates and a quantified degree of belief in the results. Resampling methods like Markov Chain Monte Carlo can also be used to perform Bayesian analysis. As an alternative, we show how to use numerical optimization to estimate model parameters, and then show how numerical differentiation can be used to get a quantified degree of belief. How to perform simulation in Python to corroborate our results is also demonstrated.&lt;/p&gt;
</content><category term="SciPy 2023"></category></entry></feed>