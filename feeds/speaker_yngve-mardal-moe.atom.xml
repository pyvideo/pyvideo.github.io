<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org - Yngve Mardal Moe</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_yngve-mardal-moe.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2025-05-17T00:00:00+00:00</updated><subtitle></subtitle><entry><title>The creative art of algorithmic embroidery</title><link href="https://pyvideo.org/pycon-us-2023/the-creative-art-of-algorithmic-embroidery.html" rel="alternate"></link><published>2023-04-22T00:00:00+00:00</published><updated>2023-04-22T00:00:00+00:00</updated><author><name>Marie Roald</name></author><id>tag:pyvideo.org,2023-04-22:/pycon-us-2023/the-creative-art-of-algorithmic-embroidery.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;For thousands of years, people have created beautiful patterns through
intricate needlework. Many of these patterns utilize algorithmic
concepts like repetition, recursion and variation to build complex
motives from simple rules. In this talk, we explore the art of
embroidery through Python programming and show how you can create …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;For thousands of years, people have created beautiful patterns through
intricate needlework. Many of these patterns utilize algorithmic
concepts like repetition, recursion and variation to build complex
motives from simple rules. In this talk, we explore the art of
embroidery through Python programming and show how you can create your
own patterns with code.&lt;/p&gt;
&lt;p&gt;We will turn straightforward commands into elaborate and intricate
artworks with loops, randomness and recursive functions using only the
&lt;a class="reference external" href="https://docs.python.org/3/library/turtle.html"&gt;built-in turtle
library&lt;/a&gt; in Python.
Then, we will show how you can turn your art into embroidery patterns
that are readable by an embroidery machine using the &lt;a class="reference external" href="https://turtlethread.com"&gt;TurtleThread
library&lt;/a&gt; and how you can use Python to
&lt;a class="reference external" href="https://turtlethread.com/main/en/christmas/index.html"&gt;create decorative ornaments for your Christmas
tree&lt;/a&gt;. This
talk is for anyone interested in the intersection between Python
programming, creative coding and arts and crafts!&lt;/p&gt;
</content><category term="PyCon US 2023"></category></entry><entry><title>Why `len('😶‍🌫️') == 4` and other weird things you should know about strings in Python</title><link href="https://pyvideo.org/pycon-us-2025/why-len-4-and-other-weird-things-you-should-know-about-strings-in-python.html" rel="alternate"></link><published>2025-05-17T00:00:00+00:00</published><updated>2025-05-17T00:00:00+00:00</updated><author><name>Marie Roald</name></author><id>tag:pyvideo.org,2025-05-17:/pycon-us-2025/why-len-4-and-other-weird-things-you-should-know-about-strings-in-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Strings in Python behave in all sorts of unexpected ways: len('😶‍🌫️') == 4, 'ñ' != 'ñ', 'dlrow olleh'.split()[1] == 'olleh'! How is this possible? And importantly, why should you care?&lt;/p&gt;
&lt;p&gt;In this presentation, we’ll give a brief introduction to text encoding, the different Unicode standards and how Python encodes …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Strings in Python behave in all sorts of unexpected ways: len('😶‍🌫️') == 4, 'ñ' != 'ñ', 'dlrow olleh'.split()[1] == 'olleh'! How is this possible? And importantly, why should you care?&lt;/p&gt;
&lt;p&gt;In this presentation, we’ll give a brief introduction to text encoding, the different Unicode standards and how Python encodes strings before we dive deep into Unicode oddities. We’ll cover how one code point can represent multiple characters, why converting between upper-case and lower-case characters should be locale-dependent and how emoji’s work. Finally, we will discuss some best practices for handling unicode input in Python.&lt;/p&gt;
&lt;p&gt;After this talk, you'll have a better understanding of strings in Python, the Unicode character encoding and you’ll be aware of some common pitfalls and how to avoid them.&lt;/p&gt;
</content><category term="PyCon US 2025"></category></entry></feed>