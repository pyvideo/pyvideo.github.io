<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Sun, 21 May 2017 15:00:00 +0200</lastBuildDate><item><title>Blockchain and smart contracts explained (and simplified)</title><link>https://pyvideo.org/pydata-barcelona-2017/blockchain-and-smart-contracts-explained-and-simplified.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Blockchain is the next big thing that will revolutionize everything, but no one knows how. The same can be said about smart contracts. Bitcoin and Ethereum are great technologies, but too complex for most cases. This talk will explain why smart contracts are hard, and why they don't need to be. Finally, a simple ledger for smart contracts in python (pyledger) will be presented.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Smart contracts are an old and simple concept. They are just computer programs that facilitate the negotiation and settlement of contracts by several parties. Their goal is to lower the transaction latency and cost associated with human middlemen. The blockchain technology brought the possibility to sanction contracts when peers do not trust each other, which is necessary for applications like virtual currencies. However, due to the CAP theorem and the cost of the Byzantine consensus, their performance tends to be quite bad.&lt;/p&gt;
&lt;p&gt;Current smart contract platforms such as Ethereum are general (one can issue any kind of contract), distributed (an updated copy is present at all the nodes within the same network), shared (an arbitrary amount of contracts are served within the same infrastructure) and secure (there is no way to tamper with the stored data). All those properties are undeniably good, but the consequence of keeping all those promises is that the infrastructure is exceedingly complex. Such an extense architecture does not add any functionality to a smart contract, it makes it trustworthy.&lt;/p&gt;
&lt;p&gt;If one understands the raw concepts behind the Blockchain consensus, and we are willing to sacrifice some of the properties mentioned earlier, one can design and implement a simple ledger for smart contracts like pyledger (pyledger.readthedocs.io). Pyledger was designed as a platform for fast prototyping of smart contracts, and for experimentation, but in some particular cases can be good enough to be used in real-world cases.&lt;/p&gt;
&lt;p&gt;Finally... Fun time! All the concepts will be exemplified with a Q&amp;amp;A contest implemented as a smart contract where all attendants can play.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Guillem Borrell Nogueras</dc:creator><pubDate>Sun, 21 May 2017 15:00:00 +0200</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-05-21:pydata-barcelona-2017/blockchain-and-smart-contracts-explained-and-simplified.html</guid><category>blockchain</category><category>pyledger</category></item><item><title>How to manage complexity in distributed applications</title><link>https://pyvideo.org/pydata-barcelona-2017/how-to-manage-complexity-in-distributed-applications.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Complexity is tricky. Some years ago we got how to scale the performance of distributed applications, and that's why everyone is talking about Big Data. But the challenge now is scaling the complexity within a fast-changing environment without penalizing the performance. These are the conclusions after one year developing a library trying to handle this issue, and using it in production.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The development of large-scale distributed applications is an engineering challenge by itself. Development has to be orthogonal to be scalable, as you may know if you have heard about the Mythical Man-Month and the Conway's law: trying to make your application faster may slow down your development. Managing complexity is a new technology trend, and NFQ and the Carlos III University of Madrid have developed a library to make large-scale distributed applications more sensible called pylm (&lt;a class="reference external" href="https://pylm.readthedocs.io"&gt;https://pylm.readthedocs.io&lt;/a&gt;). Since this library has been already used in production, it is time to summarize what are the challenges one faces when building something more intricate than a Spark cluster.&lt;/p&gt;
&lt;p&gt;This talk is about the value of developing in-house tools and obtaining deep technological insight opposed to the successive integration of trendy technologies. The latter is suitable to implement one-shot tools for isolated projects, but when facing a multi-year complex project, the former becomes a more solid ground for long-term maintenance. Complexity piles up nonlinearly, and the most popular tools nowadays cringe when they have to be tightly integrated, since in the long term it is impossible to isolate the technical and the human aspects of development.&lt;/p&gt;
&lt;p&gt;Complexity's weight is getting heavier in this scalability-obsessed world, and it's time to talk about it.&lt;/p&gt;
&lt;p&gt;This project has been funded by the Spanish Ministry of Economy and Competitivity under the grant IDI-20150936, cofinanced with FEDER funds&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Guillem Borrell Nogueras</dc:creator><pubDate>Sat, 20 May 2017 12:00:00 +0200</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-05-20:pydata-barcelona-2017/how-to-manage-complexity-in-distributed-applications.html</guid><category>pylm</category></item></channel></rss>