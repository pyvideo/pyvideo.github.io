<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_mircea-zetea.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2016-08-05T00:00:00+00:00</updated><entry><title>Managing technical debt</title><link href="https://pyvideo.org/europython-2016/managing-technical-debt.html" rel="alternate"></link><published>2016-08-05T00:00:00+00:00</published><updated>2016-08-05T00:00:00+00:00</updated><author><name>Mircea Zetea</name></author><id>tag:pyvideo.org,2016-08-05:europython-2016/managing-technical-debt.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Mircea Zetea - Managing technical debt
[EuroPython 2016]
[18 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/managing-technical-debt"&gt;https://ep2016.europython.eu//conference/talks/managing-technical-debt&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Technical debt lives among us regardless if we are in the services
business or building products.
We discuss about it, we try to fix it or live with it, but can we
actually prevent it?
My reason for discussing this openly is because once it is there you
do not only deal with the technical debt itself but also with the
interest you must pay.
What qualifies as debt? What qualifies as interest? How do we manage
it? Is it really unavoidable?&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;Technical debt lives among us regardless if we are in the services
business or building products.
We discuss about it, we try to fix it or live with it, but can we
actually prevent it?
My reason for discussing this openly is because once it is there you
do not only deal with the technical debt itself but also with the
interest you must pay.
My reason for discussing this openly is because once it is there you
do not only deal with the technical debt itself but also with the
interest you must pay. Comparing the two, probably the highest cost
that we see is with the interest.
As our code base grows and our deadlines get tougher we tend to
forget about the cost our project will have to pay for every
functionality that we implement in a hurry, for which we “forget”
about tests or for which we write in a comment “this needs to be
refactored” or “this is a temporary solution. refactor later”.
What qualifies as debt? What qualifies as interest? How do we manage
it? At what levels in our projects can we see the debt and the
interest? Is it really unavoidable?&lt;/p&gt;
</summary></entry></feed>