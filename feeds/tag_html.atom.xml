<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/tag_html.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2017-04-07T00:00:00+00:00</updated><entry><title>Getting started with Plone CMS development - Part 1</title><link href="https://pyvideo.org/europython-2013/getting-started-with-plone-cms-development-part-1.html" rel="alternate"></link><published>2013-07-05T00:00:00+00:00</published><updated>2013-07-05T00:00:00+00:00</updated><author><name>Nejc Zupan</name></author><id>tag:pyvideo.org,2013-07-05:europython-2013/getting-started-with-plone-cms-development-part-1.html</id><summary type="html"></summary><category term="scm"></category><category term="web"></category><category term="continuous-integration"></category><category term="testing"></category><category term="buildout"></category><category term="javascript"></category><category term="framework"></category><category term="html"></category><category term="zope"></category><category term="best-practices"></category><category term="CMS"></category><category term="plone"></category><category term="tutorial"></category></entry><entry><title>Getting started with Plone CMS development - Part 2</title><link href="https://pyvideo.org/europython-2013/getting-started-with-plone-cms-development-part-2.html" rel="alternate"></link><published>2013-07-05T00:00:00+00:00</published><updated>2013-07-05T00:00:00+00:00</updated><author><name>Nejc Zupan</name></author><id>tag:pyvideo.org,2013-07-05:europython-2013/getting-started-with-plone-cms-development-part-2.html</id><summary type="html"></summary><category term="scm"></category><category term="web"></category><category term="continuous-integration"></category><category term="testing"></category><category term="buildout"></category><category term="javascript"></category><category term="framework"></category><category term="html"></category><category term="zope"></category><category term="best-practices"></category><category term="CMS"></category><category term="plone"></category><category term="tutorial"></category></entry><entry><title>Web Applications on Python3 and Python2 with TurboGears - Part 1</title><link href="https://pyvideo.org/europython-2013/web-applications-on-python3-and-python2-with-turbogears-part-1.html" rel="alternate"></link><published>2013-07-04T00:00:00+00:00</published><updated>2013-07-04T00:00:00+00:00</updated><author><name>Alessandro Molina</name></author><id>tag:pyvideo.org,2013-07-04:europython-2013/web-applications-on-python3-and-python2-with-turbogears-part-1.html</id><summary type="html"></summary><category term="web"></category><category term="WSGI"></category><category term="sqlalchemy"></category><category term="HTTP"></category><category term="turbogears"></category><category term="mongodb"></category><category term="html"></category><category term="python3"></category></entry><entry><title>Web Applications on Python3 and Python2 with TurboGears - Part 2</title><link href="https://pyvideo.org/europython-2013/web-applications-on-python3-and-python2-with-turbogears-part-2.html" rel="alternate"></link><published>2013-07-04T00:00:00+00:00</published><updated>2013-07-04T00:00:00+00:00</updated><author><name>Alessandro Molina</name></author><id>tag:pyvideo.org,2013-07-04:europython-2013/web-applications-on-python3-and-python2-with-turbogears-part-2.html</id><summary type="html"></summary><category term="web"></category><category term="WSGI"></category><category term="sqlalchemy"></category><category term="HTTP"></category><category term="turbogears"></category><category term="mongodb"></category><category term="html"></category><category term="python3"></category></entry><entry><title>Realizzare stampe HTML e PDF usando solo Python</title><link href="https://pyvideo.org/pycon-italia-2017/realizzare-stampe-html-e-pdf-usando-solo-python.html" rel="alternate"></link><published>2017-04-07T00:00:00+00:00</published><updated>2017-04-07T00:00:00+00:00</updated><author><name>Saverio Porcari</name></author><id>tag:pyvideo.org,2017-04-07:pycon-italia-2017/realizzare-stampe-html-e-pdf-usando-solo-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Uno dei compiti più noiosi per chi fa software orientato al business ma
non solo, è quello di generare stampe con layout complessi e specifici
sulle esigenze del committente. Creare documenti come fatture, moduli
d’ordine, bolle di lavorazione e trasporto, schede prodotto o qualsiasi
cosa il cliente abbia il desiderio di vedere sulla stramaledetta carta è
una cosa che di norma comporta diverse criticità. Infatti ci troviamo a
dover ingabbiare dati, che solitamente rappresentiamo a video con layout
elastici e responsivi, in strutture grafiche rigide che devono risultare
sempre uguali, misurate in millimetri e ben leggibili una volta
stampate. Per rispondere a questa necessità &lt;strong&gt;Genropy&lt;/strong&gt; mette a
disposizione la libreria &lt;em&gt;gnrhtml&lt;/em&gt; che permette di descrivere in Python
layout complessi ed annidati, ottenendo come risultato un documento HTML
ed eventualmente PDF tramite il comando &lt;em&gt;wkhtmltopdf&lt;/em&gt;. La libreria
&lt;em&gt;gnrhtml&lt;/em&gt; è perfettamente integrata con il framework &lt;strong&gt;Genropy&lt;/strong&gt;, ma può
essere facilmente utilizzata anche al di fuori da questo ambiente.
Durante il talk spiegheremo il funzionamento della libreria e ne
mosteremo l’utilizzo con un caso d’esempio realizzato sia &lt;strong&gt;Genropy&lt;/strong&gt;
che in &lt;strong&gt;Django&lt;/strong&gt;.&lt;/p&gt;
</summary><category term="pdf"></category><category term="prints"></category><category term="html"></category><category term="business"></category><category term="genropy"></category></entry><entry><title>Writing Books using Python &amp; Open Source Software</title><link href="https://pyvideo.org/europython-2011/writing-books-using-python-open-source-software.html" rel="alternate"></link><published>2011-07-13T00:00:00+00:00</published><updated>2011-07-13T00:00:00+00:00</updated><author><name>Wesley J. Chun</name></author><id>tag:pyvideo.org,2011-07-13:europython-2011/writing-books-using-python-open-source-software.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] wesley chun - 20 June 2011 in &amp;quot;Track Ravioli&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;All of us are familiar with using open source tools to develop software
applications with, but instead of writing code, it is also possible to
create the manuscript of a book in very much the same way. These days,
authors have many choices in terms of the tools which are available to
aid them in writing a book. Gone are the times when the only option is
using a proprietary word processor, so why not try it using open source
tools? It's especially attractive to those who develop software using
open source tools as well those who are writing books about open source
tools. Both code and the written word are created in plain text files.
These files are easily archived using some version control system. They
can be shared easily via e-mail and can also be backed up in the same
manner. In the end, the final product is shipped to the customer: in the
case of software, it's distribution via CD or DVD, or perhaps a release
for installation on a server, and for a book, it's delivering a
manuscript to the publisher, perhaps in a format such as HTML or PDF®.&lt;/p&gt;
&lt;p&gt;Upon some reflection, writing a book is, in many ways, similar to
writing an application: you create text or code which is saved to a file
(or files- typically one but could be more) file in some format,
proprietary or otherwise. Additions, changes, or deletions are made to
the file(s), which is then updated when the file is (re)saved. Backups
need to be made, some versioning may be required to keep track of
multiple files during the course of development, and finally, the
resulting file(s) have to be delivered, as described above. Because of
all the similarities described, we assert that it is possible to use a
development environment utilizing Python and other open source tools to
not only write application with, but also be able to create the entire
manuscript for a book as well! While this entire concept should not
really be mind-blowing, it does represent a trend seemingly growing in
popularity in the open source world.&lt;/p&gt;
&lt;p&gt;In particular, we highlight the following requirements that are
necessary when creating a manuscript, especially with co-authors:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Text Formatting&lt;/li&gt;
&lt;li&gt;Editing&lt;/li&gt;
&lt;li&gt;Versioning and Backups&lt;/li&gt;
&lt;li&gt;Automated Testing of Code&lt;/li&gt;
&lt;li&gt;HTML/PDF® Generation&lt;/li&gt;
&lt;li&gt;Author Communication&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In this talk, we highlight one particular case study, the development of
Addison Wesley's 2009 publication, &amp;quot;Python Web Development with Django&amp;quot;,
as well as provide some insight into other projects created using
similar tools. Open source software has radically affected how
applications are built today, and this phenomenon has the ability to
affect the book publishing world in the same way.&lt;/p&gt;
</summary><category term="cd"></category><category term="html"></category><category term="testing"></category><category term="web"></category></entry><entry><title>Robert Coup - /me wants it. Scraping sites to get data.</title><link href="https://pyvideo.org/kiwi-pycon-2009/robert-coup----me-wants-it--scraping-sites-to-get.html" rel="alternate"></link><published>2009-11-07T00:00:00+00:00</published><updated>2009-11-07T00:00:00+00:00</updated><author><name>Robert Coup</name></author><id>tag:pyvideo.org,2009-11-07:kiwi-pycon-2009/robert-coup----me-wants-it--scraping-sites-to-get.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;/me wants it. Scraping sites to get data.&lt;/p&gt;
&lt;p&gt;Presented by Robert Coup&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;Building scrapers for grabbing data from websites. Tools, techniques,
and tips.&lt;/p&gt;
&lt;p&gt;Outline&lt;/p&gt;
&lt;p&gt;Life would be so much easier if the data contained in websites was
available raw via APIs. Alas, until that mythical day comes we either
need to deal with unhelpful people via email and phone, or just get it
ourselves. Python has some great tools available to help with building
scrapers and for parsing and formatting the data we get. Starting off
with the basics - tracking what needs to be done, making web requests,
parsing HTML, following links, and extricating data from Excel and PDF
documents. Our scraper needs to be resilient against too-clever content
management systems, Frontpage-era HTML, and plain dodgy data. We may
need to pass through logins and other messiness. There are some
techniques and tips for approaching the problems and keeping your
solution flexible and as simple as possible. We'll discuss some scrapers
built for New Zealand data, and introduce a new project from the NZ open
government data group to provide a RESTful interface to scrapers -
effectively creating a nice API where there isn't one.&lt;/p&gt;
&lt;p&gt;Slides:
&lt;a class="reference external" href="http://www.slideshare.net/rcoup/me-wants-it-scraping-sites-to-get-data"&gt;http://www.slideshare.net/rcoup/me-wants-it-scraping-sites-to-get-
data&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[VIDEO HAS ISSUES: Sound and video are poor. Slides are hard to read.]&lt;/p&gt;
</summary><category term="api"></category><category term="html"></category><category term="kiwipycon"></category><category term="kiwipycon2009"></category><category term="rest"></category><category term="scraping"></category><category term="web"></category></entry><entry><title>Wiki-Restauration aus dem Web Cache</title><link href="https://pyvideo.org/pycon-de-2013/wiki-restauration-aus-dem-web-cache.html" rel="alternate"></link><published>2013-10-16T00:00:00+00:00</published><updated>2013-10-16T00:00:00+00:00</updated><author><name>Reimar Bauer</name></author><id>tag:pyvideo.org,2013-10-16:pycon-de-2013/wiki-restauration-aus-dem-web-cache.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Nach einem Totalschaden ist bei Webanwendungen nicht unbedingt alles
verloren. Die Inhalte sind in der Regel auf eine begrenzte Zeit in
Suchmaschinen wieder zu finden.&lt;/p&gt;
&lt;p&gt;Der Vortrag beschreibt ein Verfahren das Anfang des Jahres zum Einsatz
kam um Wiki-Seiten aus dem HTML Webcache zurück in Wiki-Seiten Markup zu
übersetzen.&lt;/p&gt;
</summary><category term="adapter pattern"></category><category term="html"></category><category term="markup"></category><category term="moinmoin"></category><category term="python"></category></entry></feed>