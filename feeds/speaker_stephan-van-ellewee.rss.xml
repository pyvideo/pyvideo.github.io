<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Thu, 06 Oct 2016 00:00:00 +0000</lastBuildDate><item><title>Some less obvious uses of SQLite</title><link>https://pyvideo.org/pycon-za-2016/some-less-obvious-uses-of-sqlite.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;SQLite is arguably the most widely used database system if it's website
is to be believed. From applications in aviation to the cellphone
industry.&lt;/p&gt;
&lt;p&gt;Yet another practical application that has been suggested by it's
creator is that of an application file format. To quote the website:
&amp;quot;SQLite does not compete with client/server databases. SQLite competes
with fopen().&amp;quot;&lt;/p&gt;
&lt;p&gt;In other words, instead of rolling out your own file format, why not use
a file format that is accessible via a commonly known language (SQL)?&lt;/p&gt;
&lt;p&gt;SQLite is included by default in a number of operating systems such as
Blackberry 10 OS, Google Android, Net/Open/FreeBSD, Oracle Solaris 10,
Apple OSX 10.4+ and Windows 10 amongst others. Programming languages
with bindings for SQLite are C, C#, C++, Go, Java, Javascript, PHP,
Python, Lisp and others. This means that SQLite can be used across a
very wide range of the most popular devices and environments. Major
operating systems support Sqlite out of the box, making it easy to port
as well without needing to worry about cross-platform compatibility.&lt;/p&gt;
&lt;p&gt;One example of how SQLite and Python could be of use is in incoming
product information processing. We have various CSV or XML product feeds
that provides locations to product images via a cabal of bash scripts.
The idea would be to convert the information into a common format, ie
SQLite rows and tables and allow jobs to process these rows, instead of
creating bespoke scripts to act directly on the feed files themselves.&lt;/p&gt;
&lt;p&gt;The obvious advantage of using SQLite and Python for this task is that
it keeps overhead down and has the advantage of better structure,
exception handling, portability and extensibility&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Stephan Van Ellewee</dc:creator><pubDate>Thu, 06 Oct 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-10-06:pycon-za-2016/some-less-obvious-uses-of-sqlite.html</guid></item></channel></rss>