<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_joe-jevnik.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2019-11-04T00:00:00+00:00</updated><entry><title>Zarr vs. HDF5</title><link href="https://pyvideo.org/pydata-new-york-city-2019/zarr-vs-hdf5.html" rel="alternate"></link><published>2019-11-04T00:00:00+00:00</published><updated>2019-11-04T00:00:00+00:00</updated><author><name>Joe Jevnik</name></author><id>tag:pyvideo.org,2019-11-04:pydata-new-york-city-2019/zarr-vs-hdf5.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Zarr and HDF5 are libraries and data formats for storing chunked, compressed N-dimensional data. This talk will give a brief introduction to the their shared functionality, but then focus on the their differences. This talk cover how show how each library handles compression, data storage, and extension points. This talk should help the audience choose the correct tool for their problem.&lt;/p&gt;
</summary></entry><entry><title>A Worked Example of Using Neural Networks for Time Series Prediction</title><link href="https://pyvideo.org/pydata-new-york-city-2017/a-worked-example-of-using-neural-networks-for-time-series-prediction.html" rel="alternate"></link><published>2017-11-27T00:00:00+00:00</published><updated>2017-11-27T00:00:00+00:00</updated><author><name>Joe Jevnik</name></author><id>tag:pyvideo.org,2017-11-27:pydata-new-york-city-2017/a-worked-example-of-using-neural-networks-for-time-series-prediction.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Most neural network examples and tutorials use fake data or present poorly performing models. In this talk, we will walk through the process of implementing a real model, starting from the beginning with data collection and cleaning. We will cover topics like feature selection, window normalization, and feature scaling. We will also present development tips for testing and deploying models.&lt;/p&gt;
</summary></entry><entry><title>Title Available On Request: An Introduction to Lazy Evaluation</title><link href="https://pyvideo.org/pycon-us-2017/title-available-on-request-an-introduction-to-lazy-evaluation.html" rel="alternate"></link><published>2017-05-19T00:00:00+00:00</published><updated>2017-05-19T00:00:00+00:00</updated><author><name>Joe Jevnik</name></author><id>tag:pyvideo.org,2017-05-19:pycon-us-2017/title-available-on-request-an-introduction-to-lazy-evaluation.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Lazy evaluation, also known as &amp;quot;call by need&amp;quot;, is an evaluation strategy
where values are produced only when needed. Lazy evaluation is the
opposite of eager evaluation, Python's normal evaluation model, where
functions are executed as seen and values are produced immediately.&lt;/p&gt;
&lt;p&gt;In this talk we will define lazy evaluation and contrast it with eager
evaluation. We will discuss tools that exist in Python for using lazy
evaluation and show how we can build on the primitives to better
represent computations. We will introduce common vocabulary for
discussing evaluation models, and compare different systems for
implementing lazy evaluation. Finally, we will discuss optimizations
that can be made to optimize lazily evaluated expressions.&lt;/p&gt;
</summary></entry><entry><title>How to Write and Debug C Extension Modules</title><link href="https://pyvideo.org/pycon-us-2017/how-to-write-and-debug-c-extension-modules.html" rel="alternate"></link><published>2017-05-17T00:00:00+00:00</published><updated>2017-05-17T00:00:00+00:00</updated><author><name>Joe Jevnik</name></author><id>tag:pyvideo.org,2017-05-17:pycon-us-2017/how-to-write-and-debug-c-extension-modules.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The CPython interpreter allows us implement modules in C for performance
critical code or to interface with external libraries while presenting
users with a high level Python API. This tutorial will teach you how to
leverage to power of C in your Python projects.&lt;/p&gt;
&lt;p&gt;We will start by explaining the C representation of Python objects and
how to manipulate them from within C. We will then move on to
implementing functions in C for use in Python. We will discuss reference
counting and correct exception handling. We will also talk about how to
package and build your new extension module so that it may be shared on
PyPI. (We will only be covering building extension modules on GNU/Linux
and OSX, not Windows).&lt;/p&gt;
&lt;p&gt;After the break, we will show how to implement a new type in C. This
will cover how to hook into various protocols and properly support
cyclic garbage collection. We will also discuss techniques for debugging
C extension modules with gdb using the CPython gdb extension.&lt;/p&gt;
</summary></entry><entry><title>Playing with Python Bytecode</title><link href="https://pyvideo.org/pygotham-2016/playing-with-python-bytecode.html" rel="alternate"></link><published>2016-07-16T00:00:00+00:00</published><updated>2016-07-16T00:00:00+00:00</updated><author><name>Scott Sanderson</name></author><id>tag:pyvideo.org,2016-07-16:pygotham-2016/playing-with-python-bytecode.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Ever wondered what Python is actually doing when it executes your code? Want to learn to hand-craft artisanal Python bytecode? In this talk, we explain CPython's internal code representation, and we demonstrate techniques for modifying code objects for fun and profit.&lt;/p&gt;
</summary><category term="bytecode"></category></entry><entry><title>Playing with Python Bytecode</title><link href="https://pyvideo.org/pycon-us-2016/scott-sanderson-joe-jevnik-playing-with-python-bytecode-pycon-2016.html" rel="alternate"></link><published>2016-05-31T00:00:00+00:00</published><updated>2016-05-31T00:00:00+00:00</updated><author><name>Scott Sanderson</name></author><id>tag:pyvideo.org,2016-05-31:pycon-us-2016/scott-sanderson-joe-jevnik-playing-with-python-bytecode-pycon-2016.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Speakers: Scott Sanderson, Joe Jevnik&lt;/p&gt;
&lt;p&gt;Ever wondered what Python is actually doing when it executes your code?  Want to learn to hand-craft artisanal Python bytecode?  In this talk, we explain CPython's internal code representation, and we demonstrate techniques for modifying code objects for fun and profit.&lt;/p&gt;
&lt;p&gt;Slides can be found at: &lt;a class="reference external" href="https://speakerdeck.com/pycon2016"&gt;https://speakerdeck.com/pycon2016&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/PyCon/2016-slides"&gt;https://github.com/PyCon/2016-slides&lt;/a&gt;&lt;/p&gt;
</summary></entry></feed>