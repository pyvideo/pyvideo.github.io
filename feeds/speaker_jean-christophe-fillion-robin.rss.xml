<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org - Jean-Christophe Fillion-Robin</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Mon, 08 Jul 2024 00:00:00 +0000</lastBuildDate><item><title>Scikit-build: A build system generator for CPython C extensions</title><link>https://pyvideo.org/pydata-carolinas-2016/scikit-build-a-build-system-generator-for-cpython-c-extensions.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk we present &amp;quot;scikit-build&amp;quot;, an improved build system
generator for CPython C extensions. It provides better support for
additional compilers, build systems, cross compilation, and locating
dependencies and determining their build requirements. We also
describe how Matplotlib and SymEngine are updated to make use of
&amp;quot;scikit-build&amp;quot;&lt;/p&gt;
&lt;p&gt;Although the scientific packages NumPy, SciPy, SymEngine or Matplotlib
can be used from Python today, since they bundle C, C++ or Fortan
extensions, successfully building the associated binary wheels is
complex and prone to errors. This is a significant barrier to allow
use of these scientific packages on a broader set of platforms like
mobile, Raspberry Pi or HPC.&lt;/p&gt;
&lt;p&gt;To facilitate the build process, the scikit-build package is
fundamentally just glue between the setuptools Python module and
CMake. Currently, the package is available to perform builds in a
setup.py file. In the future, the project aims to be a build tool
option in the currently developing pyproject.toml build system
specification.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jean-Christophe Fillion-Robin</dc:creator><pubDate>Thu, 15 Sep 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-09-15:/pydata-carolinas-2016/scikit-build-a-build-system-generator-for-cpython-c-extensions.html</guid><category>PyData Carolinas 2016</category></item><item><title>Reproducible Science: Walking the Walk Part 1</title><link>https://pyvideo.org/scipy-2014/reproducible-science-walking-the-walk-part-1.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;This tutorial will train reproducible research warriors on the practices
and tools that make experimental verification possible with an
end-to-end data analysis workflow. &amp;nbsp;The tutorial will expose attendees
to open science methods during data gathering, storage, analysis up to
publication into a reproducible article. &amp;nbsp;Attendees are expected to have
basic familiarity with scientific Python and Git.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The tutorial will cover four hours with the following topics&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Introduction (10min)&lt;/li&gt;
&lt;li&gt;History of scientific societies and publications&lt;ul&gt;
&lt;li&gt;Leeuwenhoek was the Man !&lt;/li&gt;
&lt;li&gt;The Invisible College&lt;/li&gt;
&lt;li&gt;Nullius in Verba&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Replication of the early microscope experiments by Leeuwenhoek[a][b]&lt;/li&gt;
&lt;li&gt;Image Acquisition (15 min)&lt;ul&gt;
&lt;li&gt;Hands on: Cell camera phone microscope&lt;ul&gt;
&lt;li&gt;With drop of water&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Hands on: Each pair acquires images&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Data Sharing (45min)&lt;ul&gt;
&lt;li&gt;Image gathering, storage, and sharing (15min)&lt;ul&gt;
&lt;li&gt;GitHub (www.github.com)&lt;/li&gt;
&lt;li&gt;Figshare (www.figshare.com)&lt;/li&gt;
&lt;li&gt;Midas (www.midasplatform.com)&lt;/li&gt;
&lt;li&gt;Hands on: Upload the images&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Metadata Identifiers (15 min)&lt;ul&gt;
&lt;li&gt;Citable&lt;/li&gt;
&lt;li&gt;Machine Readable&lt;/li&gt;
&lt;li&gt;Hands on: Create data citation and machine readable metadata&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Hands on: Download data via RESTful API (15min)&lt;ul&gt;
&lt;li&gt;Provenance and&lt;/li&gt;
&lt;li&gt;Python scripts&lt;/li&gt;
&lt;li&gt;Hands on: Download the data via HTTP&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Break (10min)&lt;/li&gt;
&lt;li&gt;Local processing (60min)&lt;ul&gt;
&lt;li&gt;Replication Enablement (20min)&lt;ul&gt;
&lt;li&gt;Package versioning&lt;/li&gt;
&lt;li&gt;Virtual Machines&lt;/li&gt;
&lt;li&gt;Docker&lt;/li&gt;
&lt;li&gt;Cloud services&lt;/li&gt;
&lt;li&gt;Hands on:&lt;ul&gt;
&lt;li&gt;Create a virtualenv&lt;/li&gt;
&lt;li&gt;Run our tutorial package verification script&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Revision Control with Git (20min)&lt;ul&gt;
&lt;li&gt;Keeping track of changes&lt;/li&gt;
&lt;li&gt;Unique hashes&lt;/li&gt;
&lt;li&gt;Hands on:&lt;ul&gt;
&lt;li&gt;Forking a repository in GitHub&lt;/li&gt;
&lt;li&gt;Cloning a repository&lt;/li&gt;
&lt;li&gt;Creating a branch&lt;/li&gt;
&lt;li&gt;Making a commit&lt;/li&gt;
&lt;li&gt;Pushing a branch&lt;/li&gt;
&lt;li&gt;Diffing&lt;/li&gt;
&lt;li&gt;Merging&lt;/li&gt;
&lt;li&gt;Pushing again&lt;/li&gt;
&lt;li&gt;Create pull request&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Python scripts (20min)&lt;ul&gt;
&lt;li&gt;Data analysis, particle counting.&lt;/li&gt;
&lt;li&gt;Hands on:&lt;ul&gt;
&lt;li&gt;Run scripts on new data&lt;/li&gt;
&lt;li&gt;Generate histogram for the data&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Testing (30min)&lt;ul&gt;
&lt;li&gt;Unit testing with known data&lt;/li&gt;
&lt;li&gt;Regression testing with known data&lt;/li&gt;
&lt;li&gt;Hands on:&lt;ul&gt;
&lt;li&gt;Run tests&lt;/li&gt;
&lt;li&gt;Add coverage for another method to the unit tests&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Break (10min)&lt;/li&gt;
&lt;li&gt;Publication Tools (30min)&lt;ul&gt;
&lt;li&gt;Article generation&lt;/li&gt;
&lt;li&gt;RST to HTML&lt;/li&gt;
&lt;li&gt;GitHub replication and sharing&lt;/li&gt;
&lt;li&gt;Hands on:&lt;ul&gt;
&lt;li&gt;Run dexy to generate the document&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Reproducibility Verification (30min)&lt;ul&gt;
&lt;li&gt;Reproducing Works&lt;/li&gt;
&lt;li&gt;Publication of Positive and Negative results&lt;/li&gt;
&lt;li&gt;Hands on:&lt;ul&gt;
&lt;li&gt;Create Open Science Framework (OSF) project&lt;/li&gt;
&lt;li&gt;Connect Figshare and Github to OSF project&lt;/li&gt;
&lt;li&gt;Fork or link another group’s project in the OSF to run dexy on
their work&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Infrastructure:&lt;/p&gt;
&lt;p&gt;Attendees will use software installed in their laptops to gather and
process data, then publish and share a reproducible report.&lt;/p&gt;
&lt;p&gt;They will access repositories in GitHub, upload data to a repository and
publish materials necessary to replicate their data analysis.&lt;/p&gt;
&lt;p&gt;We expect that wireless network will be have moderate bandwidth to allow
all attendees to move data, source code and publications between their
laptops and hosting servers.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Aashish Chaudhary</dc:creator><pubDate>Wed, 09 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-09:/scipy-2014/reproducible-science-walking-the-walk-part-1.html</guid><category>SciPy 2014</category><category>open science</category><category>reproducible research</category><category>tutorial</category></item><item><title>Reproducible Science: Walking the Walk Part 2</title><link>https://pyvideo.org/scipy-2014/reproducible-science-walking-the-walk-part-2.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;This tutorial will train reproducible research warriors on the practices
and tools that make experimental verification possible with an
end-to-end data analysis workflow. &amp;nbsp;The tutorial will expose attendees
to open science methods during data gathering, storage, analysis up to
publication into a reproducible article. &amp;nbsp;Attendees are expected to have
basic familiarity with scientific Python and Git.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The tutorial will cover four hours with the following topics&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Introduction (10min)&lt;/li&gt;
&lt;li&gt;History of scientific societies and publications&lt;ul&gt;
&lt;li&gt;Leeuwenhoek was the Man !&lt;/li&gt;
&lt;li&gt;The Invisible College&lt;/li&gt;
&lt;li&gt;Nullius in Verba&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Replication of the early microscope experiments by Leeuwenhoek[a][b]&lt;/li&gt;
&lt;li&gt;Image Acquisition (15 min)&lt;ul&gt;
&lt;li&gt;Hands on: Cell camera phone microscope&lt;ul&gt;
&lt;li&gt;With drop of water&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Hands on: Each pair acquires images&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Data Sharing (45min)&lt;ul&gt;
&lt;li&gt;Image gathering, storage, and sharing (15min)&lt;ul&gt;
&lt;li&gt;GitHub (www.github.com)&lt;/li&gt;
&lt;li&gt;Figshare (www.figshare.com)&lt;/li&gt;
&lt;li&gt;Midas (www.midasplatform.com)&lt;/li&gt;
&lt;li&gt;Hands on: Upload the images&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Metadata Identifiers (15 min)&lt;ul&gt;
&lt;li&gt;Citable&lt;/li&gt;
&lt;li&gt;Machine Readable&lt;/li&gt;
&lt;li&gt;Hands on: Create data citation and machine readable metadata&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Hands on: Download data via RESTful API (15min)&lt;ul&gt;
&lt;li&gt;Provenance and&lt;/li&gt;
&lt;li&gt;Python scripts&lt;/li&gt;
&lt;li&gt;Hands on: Download the data via HTTP&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Break (10min)&lt;/li&gt;
&lt;li&gt;Local processing (60min)&lt;ul&gt;
&lt;li&gt;Replication Enablement (20min)&lt;ul&gt;
&lt;li&gt;Package versioning&lt;/li&gt;
&lt;li&gt;Virtual Machines&lt;/li&gt;
&lt;li&gt;Docker&lt;/li&gt;
&lt;li&gt;Cloud services&lt;/li&gt;
&lt;li&gt;Hands on:&lt;ul&gt;
&lt;li&gt;Create a virtualenv&lt;/li&gt;
&lt;li&gt;Run our tutorial package verification script&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Revision Control with Git (20min)&lt;ul&gt;
&lt;li&gt;Keeping track of changes&lt;/li&gt;
&lt;li&gt;Unique hashes&lt;/li&gt;
&lt;li&gt;Hands on:&lt;ul&gt;
&lt;li&gt;Forking a repository in GitHub&lt;/li&gt;
&lt;li&gt;Cloning a repository&lt;/li&gt;
&lt;li&gt;Creating a branch&lt;/li&gt;
&lt;li&gt;Making a commit&lt;/li&gt;
&lt;li&gt;Pushing a branch&lt;/li&gt;
&lt;li&gt;Diffing&lt;/li&gt;
&lt;li&gt;Merging&lt;/li&gt;
&lt;li&gt;Pushing again&lt;/li&gt;
&lt;li&gt;Create pull request&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Python scripts (20min)&lt;ul&gt;
&lt;li&gt;Data analysis, particle counting.&lt;/li&gt;
&lt;li&gt;Hands on:&lt;ul&gt;
&lt;li&gt;Run scripts on new data&lt;/li&gt;
&lt;li&gt;Generate histogram for the data&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Testing (30min)&lt;ul&gt;
&lt;li&gt;Unit testing with known data&lt;/li&gt;
&lt;li&gt;Regression testing with known data&lt;/li&gt;
&lt;li&gt;Hands on:&lt;ul&gt;
&lt;li&gt;Run tests&lt;/li&gt;
&lt;li&gt;Add coverage for another method to the unit tests&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Break (10min)&lt;/li&gt;
&lt;li&gt;Publication Tools (30min)&lt;ul&gt;
&lt;li&gt;Article generation&lt;/li&gt;
&lt;li&gt;RST to HTML&lt;/li&gt;
&lt;li&gt;GitHub replication and sharing&lt;/li&gt;
&lt;li&gt;Hands on:&lt;ul&gt;
&lt;li&gt;Run dexy to generate the document&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Reproducibility Verification (30min)&lt;ul&gt;
&lt;li&gt;Reproducing Works&lt;/li&gt;
&lt;li&gt;Publication of Positive and Negative results&lt;/li&gt;
&lt;li&gt;Hands on:&lt;ul&gt;
&lt;li&gt;Create Open Science Framework (OSF) project&lt;/li&gt;
&lt;li&gt;Connect Figshare and Github to OSF project&lt;/li&gt;
&lt;li&gt;Fork or link another group’s project in the OSF to run dexy on
their work&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Infrastructure:&lt;/p&gt;
&lt;p&gt;Attendees will use software installed in their laptops to gather and
process data, then publish and share a reproducible report.&lt;/p&gt;
&lt;p&gt;They will access repositories in GitHub, upload data to a repository and
publish materials necessary to replicate their data analysis.&lt;/p&gt;
&lt;p&gt;We expect that wireless network will be have moderate bandwidth to allow
all attendees to move data, source code and publications between their
laptops and hosting servers.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Aashish Chaudhary</dc:creator><pubDate>Wed, 09 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-09:/scipy-2014/reproducible-science-walking-the-walk-part-2.html</guid><category>SciPy 2014</category><category>open science</category><category>reproducible research</category><category>tutorial</category></item><item><title>Scikit-build: A Build System Generator for CPython C/C++/Fortran/Cython Extensions</title><link>https://pyvideo.org/scipy-2018/scikit-build-a-build-system-generator-for-cpython-ccfortrancython-extensions.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;We present “Scikit-build”, an improved build system generator for
CPython C/C++/Fortran/Cython extensions. It provides improved support
for additional compilers, build systems, cross compilation, and locating
dependencies and determining their build requirements over
distutils/setuptools. We also describe how ITK and VTK C++ scientific
libraries were updated to make use of scikit-build to ultimately be
published as wheels.Presenter(s): Speaker: Jean- Christophe
Fillion-Robin, Kitware, Inc. Speaker: Matthew McCormick, Kitware, Inc.
Speaker: Omar Padron, Kitware, Inc. Speaker: Max Smolens, Kitware, Inc.
Speaker: Michael Grauer, Kitware, Inc. Speaker: Michael Sarahan,
Anaconda, Inc.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jean-Christophe Fillion-Robin</dc:creator><pubDate>Wed, 11 Jul 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-07-11:/scipy-2018/scikit-build-a-build-system-generator-for-cpython-ccfortrancython-extensions.html</guid><category>SciPy 2018</category></item><item><title>The Sheer Joy of Packaging</title><link>https://pyvideo.org/scipy-2018/the-sheer-joy-of-packaging.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Building packages in Python used to be hard, especially the ones
including compiled extensions. Fortunately, it is getting easier thanks
to efforts in the scientific Python community. However, there are still
a lot of challenges and complexities facing the package builder.There
are at least two major packaging systems (pip/wheel and conda), and lots
of different ways to do work with these systems. This tutorial will
cover packaging from start to finish for both PyPI and conda, including
setup.py, flit, wheels, twine, conda-build, scikit-build, anaconda
cloud, and conda-forge. Particular attention will be paid to critical
details, such as binary compatibility and platform
differences.Presenter(s): Speaker: Michael Sarahan, Anaconda, Inc.
Speaker: Matthew McCormick, Kitware, Inc. Speaker: Jean-Christophe
Fillion-Robin, Kitware, Inc. Speaker: Filipe Fernandes, SECOORA Speaker:
Chris Barker, NOAA Speaker: Matt Craig, Minnesota State University
Moorhead Speaker: Jonathan Helmus, Anaconda, Inc. Speaker: Ray Donnelly,
Anaconda, Inc.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michael Sarahan</dc:creator><pubDate>Tue, 10 Jul 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-07-10:/scipy-2018/the-sheer-joy-of-packaging.html</guid><category>SciPy 2018</category><category>tutorial</category></item><item><title>itkwidgets Interactive Web based 3D and 2D Spatial Visualization for Python</title><link>https://pyvideo.org/scipy-2021/itkwidgets-interactive-web-based-3d-and-2d-spatial-visualization-for-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The itkwidgets python package integrates with the Python and Jupyter ecosystem and supports visualization of large imaging, geometry and point set datasets in 3D and 2D. We provide an overview of image volume rendering, slicing, and data probing capabilities and techniques used with these WebGL-based, interactive 3D widgets. We reveal new developments including integration with other ipywidgets in JupyterLab, Voilà applications.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Matt McCormick</dc:creator><pubDate>Mon, 12 Jul 2021 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2021-07-12:/scipy-2021/itkwidgets-interactive-web-based-3d-and-2d-spatial-visualization-for-python.html</guid><category>SciPy 2021</category></item><item><title>Building binary extensions with pybind11, scikit build, and cibuildwheel- Q&amp;A and Panel</title><link>https://pyvideo.org/scipy-2022/building-binary-extensions-with-pybind11-scikit-build-and-cibuildwheel-qa-and-panel.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Henry Schreiner</dc:creator><pubDate>Mon, 11 Jul 2022 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2022-07-11:/scipy-2022/building-binary-extensions-with-pybind11-scikit-build-and-cibuildwheel-qa-and-panel.html</guid><category>SciPy 2022</category></item><item><title>SciPy Tools Plenary Day 1</title><link>https://pyvideo.org/scipy-2023/scipy-tools-plenary-day-1.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;SciPy is a community dedicated to the advancement of scientific computing through open source Python software for mathematics, science, and engineering. The annual SciPy Conference allows participants from all types of organizations to showcase their latest projects, learn from skilled users and developers, and collaborate on code development. SciPy is organized by NumFOCUS, a 501(c)(3) nonprofit organization that promotes open source scientific computing.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Thomas J. Fan</dc:creator><pubDate>Mon, 10 Jul 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-07-10:/scipy-2023/scipy-tools-plenary-day-1.html</guid><category>SciPy 2023</category></item><item><title>A modern build-backend for CPython C/C++/Fortran/Cython extensions</title><link>https://pyvideo.org/scipy-2024/a-modern-build-backend-for-cpython-ccfortrancython-extensions.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Discover how scikit-build-core revolutionizes Python extension building with its seamless integration of CMake and Python packaging standards. Learn about its enhanced features for cross-compilation, multi-platform support, and simplified configuration, which enable writing binary extensions with pybind11, Nanobind, Fortran, Cython, C++, and more. Dive into the transition from the classic scikit-build to the robust scikit-build-core and explore its potential to streamline package distribution across various environments.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jean-Christophe Fillion-Robin</dc:creator><pubDate>Mon, 08 Jul 2024 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2024-07-08:/scipy-2024/a-modern-build-backend-for-cpython-ccfortrancython-extensions.html</guid><category>SciPy 2024</category></item></channel></rss>