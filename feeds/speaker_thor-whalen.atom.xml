<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_thor-whalen.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2019-08-16T00:00:00+00:00</updated><entry><title>Talking to data as you would with built in types</title><link href="https://pyvideo.org/pybay-2019/talking-to-data-as-you-would-with-built-in-types.html" rel="alternate"></link><published>2019-08-16T00:00:00+00:00</published><updated>2019-08-16T00:00:00+00:00</updated><author><name>Thor Whalen</name></author><id>tag:pyvideo.org,2019-08-16:pybay-2019/talking-to-data-as-you-would-with-built-in-types.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk was presented at PyBay2019 - 4th annual Bay Area Regional Python conference. See pybay.com for more details about PyBay and click SHOW MORE for more information about this talk.&lt;/p&gt;
&lt;p&gt;Description
In this talk I will present a project (coined py2store) whose goal is to develop tools that allow developers to interact with a variety of data sources and sinks, local or remote, through a consistent and simple interface.&lt;/p&gt;
&lt;p&gt;How simple? The simplest. Objects that feel like built-ins (dicts, lists, sets).&lt;/p&gt;
&lt;p&gt;Abstract
Py2Store might make you think about ORMs. If so, think again. The intent of py2store is not to map objects to db entries, but rather to offer a consistent interface for basic storage operations. In that sense, py2store is more akin to an implementation of the data access object (DAO) pattern. Of course, the difference between ORM and DAO can be blurry, so all this should be taken with a grain of salt.&lt;/p&gt;
&lt;p&gt;How many times did someone share some data with you in the form of a zip of some nested folders whose structure and naming choices are fascinatingly obscure? And how much time do you then spend to write code to interface with the freakish structure?&lt;/p&gt;
&lt;p&gt;One of the intents of py2store is to make that easier to do. You still need to understand the structure of the data store and how to deserialize these datas into python objects you can manipulate. But with the proper tool, you shouldn't have to do much more than that.&lt;/p&gt;
&lt;p&gt;You have a new project or need to write a new app. You'll need to store stuff and read stuff back. Stuff: Different kinds of resources that your app will need to function. Some people enjoy thinking of how to optimize that aspect. I don't. I'll leave it to the experts to do so when the time comes. Often though, the time is later, if ever. Few proof of concepts and MVPs ever make it to prod.&lt;/p&gt;
&lt;p&gt;So instead, I'd like to just get on with the business logic and write my program. So what I need is an easy way to get some minimal storage functionality. But when the time comes to optimize, I shouldn't have to change my code, but instead just change the way my DAO does things.&lt;/p&gt;
&lt;p&gt;Original slides: &lt;a class="reference external" href="https://t.ly/y8dVb"&gt;https://t.ly/y8dVb&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;About the speaker
Ex-Mathematician, Ex-CTO of OtoSense, sound recognition start-up in the silicon valley, sold to Analog Devices. Now works as a director of AI research at Analog Devices.&lt;/p&gt;
&lt;p&gt;Sponsor Acknowledgement
This and other PyBay2019 videos are via the help of our media partner AlphaVoice (&lt;a class="reference external" href="https://www.alphavoice.io/"&gt;https://www.alphavoice.io/&lt;/a&gt;)!&lt;/p&gt;
&lt;p&gt;#pybay #pybay2019 #python #python3 #gdb&lt;/p&gt;
</summary></entry></feed>