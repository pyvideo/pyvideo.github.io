<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/tag_api-design.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2019-05-05T00:00:00+00:00</updated><entry><title>Real world Graphene - lessons learned from building a GraphQL API on top of a large Django project</title><link href="https://pyvideo.org/pycon-italia-2019/real-world-graphene-lessons-learned-from-building-a-graphql-api-on-top-of-a-large-django-project.html" rel="alternate"></link><published>2019-05-05T00:00:00+00:00</published><updated>2019-05-05T00:00:00+00:00</updated><author><name>Marcin Gębala</name></author><id>tag:pyvideo.org,2019-05-05:pycon-italia-2019/real-world-graphene-lessons-learned-from-building-a-graphql-api-on-top-of-a-large-django-project.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Graphene is currently the most popular framework for building a GraphQL
in Python and it’s also an obvious choice for adding a GraphQL layer to
Django applications. Over the course of a year, we successfully built an
API with about 50 queries and over 100 mutations on top of existing
Django project (Saleor), but we also learned some hard lessons and had
to overcome several shortcomings of the framework along the way.&lt;/p&gt;
&lt;p&gt;In this talk, I’d like to share some practical tips to overcome the most
common problems that a Django developer might face when building an
optimized and maintainable API with Graphene, such as: - using useful
abstractions to build queries and mutations faster - optimizing database
queries in a graph - structuring a large Graphene project - unified
error handling&lt;/p&gt;
&lt;p&gt;I’d also like to bring up a few limitations of the framework that we
discovered as we were working on the project and then end the talk with
the most important benefits that adoption of GraphQL brings to modern
web applications development - both for the backend and frontend.&lt;/p&gt;
&lt;p&gt;Prerequisites: - Intermediate knowledge of Django - Familiarity with API
design and concepts in terms of web development - Basic knowledge of
GraphQL or interest in it&lt;/p&gt;
&lt;p&gt;I think the talk would be of great value to anyone working with a
Graphene framework and those who want to know more about building
GraphQL in Python.&lt;/p&gt;
&lt;p&gt;All code examples in the presentation would be based on Saleor
(&lt;a class="reference external" href="https://github.com/mirumee/saleor"&gt;https://github.com/mirumee/saleor&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Feedback form:&lt;/strong&gt; &lt;a class="reference external" href="https://python.it/feedback-1644"&gt;https://python.it/feedback-1644&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;Sunday 5 May&lt;/strong&gt; at 11:45 &lt;a class="reference external" href="/en/sprints/schedule/pycon10/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</summary><category term="API Design"></category><category term="e-commerce"></category><category term="graphql"></category><category term="open-source"></category><category term="django"></category></entry><entry><title>Gathering Related Functionality: Patterns for Clean API Design</title><link href="https://pyvideo.org/pycon-ca-2018/gathering-related-functionality-patterns-for-clean-api-design.html" rel="alternate"></link><published>2018-11-11T00:00:00+00:00</published><updated>2018-11-11T00:00:00+00:00</updated><author><name>Paul Ganssle</name></author><id>tag:pyvideo.org,2018-11-11:pycon-ca-2018/gathering-related-functionality-patterns-for-clean-api-design.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk will arm you with some tools to design a library that 'just works', but also has obvious escape hatches to handle corner cases. It covers several patterns for cleanly organizing related and overlapping functionality in a way that statisfies both humans and static analysis tools.&lt;/p&gt;
&lt;p&gt;---&lt;/p&gt;
&lt;p&gt;What do you do when you have to choose between designing your function for one of two common use cases?&lt;/p&gt;
&lt;p&gt;How about when the same logical operations (say, multiplication or concatenation) need to have different implementations depending on the type of the arguments they are applied to?&lt;/p&gt;
&lt;p&gt;These kinds of questions can be vexing when trying to design a clean, well-scoped API.&lt;/p&gt;
&lt;p&gt;This talk will cover several strategies for grouping related functionality in a way that presents a logically clean interface to both humans and static analysis tools like type checkers and document generators.&lt;/p&gt;
&lt;p&gt;This talk covers:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Alternate constructors with &amp;#64;classmethod&lt;/li&gt;
&lt;li&gt;Inheritance with &amp;#64;staticmethod and &amp;#64;classmethod&lt;/li&gt;
&lt;li&gt;Dispatch by type&lt;/li&gt;
&lt;li&gt;A new convention for namespacing functions: variants&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="library"></category><category term="api design"></category></entry><entry><title>Building better APIs</title><link href="https://pyvideo.org/pycon-india-2012/building-better-apis.html" rel="alternate"></link><published>2012-09-29T00:00:00+00:00</published><updated>2012-09-29T00:00:00+00:00</updated><author><name>Hemant Kumar</name></author><id>tag:pyvideo.org,2012-09-29:pycon-india-2012/building-better-apis.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A lot of web development today deals with creating APIs that can power mobile apps or even pure Javascript web apps. The objective of this talk is, to share best practices and have open conversation about certain practices which are considered controversial.&lt;/p&gt;
</summary><category term="api design"></category></entry><entry><title>Digital Analytics Data Aggregation: un case study dal mondo reale utilizzando SQL, NoSQL e Pandas</title><link href="https://pyvideo.org/pycon-italia-2017/digital-analytics-data-aggregation-un-case-study-dal-mondo-reale-utilizzando-sql-nosql-e-pandas.html" rel="alternate"></link><published>2017-04-08T00:00:00+00:00</published><updated>2017-04-08T00:00:00+00:00</updated><author><name>Alessandro Pelliciari</name></author><id>tag:pyvideo.org,2017-04-08:pycon-italia-2017/digital-analytics-data-aggregation-un-case-study-dal-mondo-reale-utilizzando-sql-nosql-e-pandas.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;I clienti enterprise si trovano sempre più spesso ad avere difficoltà
nel recuperare informazioni essenziali per capire nel complesso dove il
brand sta funzionando e dove invece serve un intervento tempestivo,
perchè sono inondati di dati di dettaglio che spesso non sono facilmente
aggregabili e visualizzabili insieme con frequenza giornaliera.&lt;/p&gt;
&lt;p&gt;Per rispondere a questa esigenza, in azienda, nel nostro reparto R&amp;amp;D,
abbiamo sviluppato una dashboard che permette a clienti con diversi
brand e properties (siti) di aggregare i principali KPI da monitorare
(sia KPI standard che KPI personalizzati). I KPI sono i key performance
indicators, ovvero metriche che aiutano a valutare le performance).&lt;/p&gt;
&lt;p&gt;Ma i dati da visualizzare e aggregare, provenienti da diverse fonti
(Google Analytics, Adobe Analytics, tools SEO), hanno strutture diverse
e non è possibile a priori prevedere quali sono le strutture
disponibili.&lt;/p&gt;
&lt;p&gt;Perciò, in questo talk vedremo insieme come abbiamo gestito questo caso
reale attraverso un mix di tecnologie SQL (MySQL attraverso Django) e
NoSQL (MongoDb), utilizzando i dataframe di Pandas come layer intermedio
attraverso il quale lavorare il dato velocemente.&lt;/p&gt;
&lt;p&gt;La soluzione realizzata ci ha permesso di integrare rapidamente nuove
fonti e nuovi KPI, e di gestire volumi elevati di dati (attualmente 200+
siti contemporaneamente) con ottime performance.&lt;/p&gt;
&lt;p&gt;Vedremo poi (se rimane tempo) come questi dati vengono forniti
attraverso API Rest (grazie a Django Rest Framework) e consumati
attraverso AngularJS sul client.&lt;/p&gt;
&lt;p&gt;Vorremmo infine coinvolgervi chiedendovi come avreste gestito questa
difficoltà - non è assolutamente detto che la nostra soluzione sia per
forza quella ottimale!&lt;/p&gt;
</summary><category term="django-rest-framework"></category><category term="mongodb"></category><category term="django"></category><category term="API Design"></category><category term="web-development"></category><category term="angularjs"></category><category term="mysql"></category><category term="google-analytics"></category><category term="pandas"></category></entry><entry><title>Django Rest Framework - Tips&amp;Tricks</title><link href="https://pyvideo.org/pycon-italia-2017/django-rest-framework-tipstricks.html" rel="alternate"></link><published>2017-04-08T00:00:00+00:00</published><updated>2017-04-08T00:00:00+00:00</updated><author><name>Luca Zacchetti</name></author><id>tag:pyvideo.org,2017-04-08:pycon-italia-2017/django-rest-framework-tipstricks.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Developing Web APIs for Django websites have never been so easy.
Starting from a real world use case, I’ll explain why DRF became our
weapon of choice to develop in a fast and easy way all the APIs we need
at Cloud Academy.&lt;/p&gt;
&lt;p&gt;We’ll start talking about the main benefits that DRF brings to Django
projects, then we’ll use our real world use case to describe the best
practices we use to build fast, secure and maintainable APIs diving into
DRF main features and functionalities.&lt;/p&gt;
&lt;p&gt;The scope of this talk is to explain in a very practical way how DRF can
be integrated into Django projects to build beautiful web APIs. We’ll
use a lot of code examples and performance benchmarks to describe the
various features explored during the talk. No prior experience on DRF is
required but at least some basic knowledge of Django is suggested for
attendees.&lt;/p&gt;
</summary><category term="django-rest-framework"></category><category term="REST API Frameworks"></category><category term="API Design"></category><category term="REST"></category><category term="django"></category><category term="optimization"></category><category term="performance"></category></entry></feed>