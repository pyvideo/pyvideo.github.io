<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Thu, 03 Oct 2013 00:00:00 +0000</lastBuildDate><item><title>Building Rich Applications with Django and Ember.js</title><link>https://pyvideo.org/pytexas-2012/building-rich-applications-with-django-and-emberjs.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;After several years in the depths of high-performance computing, I returned to the web world a couple years ago and discovered that Django's awesome-to-pain ratio had tipped strongly in it's favor. I've been hooked ever since. As web lead at dotCloud for the past year, I've gotten to work on making Django deployment awesome at DotCloud in San Francisco. I'm now spending more of my time doing developer advocacy -- acting as dotCloud's &amp;quot;customer-in-residence&amp;quot; to ensure the company is producing a product developers love. I maintain and contribute to a number of open source projects: &lt;a class="reference external" href="https://github.com/gabrielgrant"&gt;https://github.com/gabrielgrant&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In this talk, learn how Django and Ember.js can compliment each other: how to integrate them where their functionality overlaps and reconcile the differences where their approaches contradict. Django helps quickly express a data model and handle HTTP requests, but using it alone isn't conducive to building highly-dynamic interfaces. Ember, on the other hand, is a client-side framework designed with precisely these interfaces in mind, but doesn't tackle the server-side at all. Both Django and Ember.js are large, ambitious and opinionated frameworks. This is what gives them their power over their more minimalist colleagues (Flask and Backbone.js, respectively) but because their opinions sometimes differ, it can be difficult to make them play together. In this talk, I'll briefly introduce Ember.js, compare and contrast how Django and Ember.js handle the various layers of an application, and show how to bridge between these two worlds.&lt;/p&gt;
&lt;p&gt;Topics covered:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Ember's interpretation of MVC in Django terms&lt;/li&gt;
&lt;li&gt;Overlap in functionality: which pieces of each framework to keep, modify and throw away&lt;/li&gt;
&lt;li&gt;Compiling Assets&lt;/li&gt;
&lt;li&gt;Connecting Ember to Django with Ember-data and Django REST framework&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Gabriel Grant</dc:creator><pubDate>Sat, 15 Sep 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-09-15:pytexas-2012/building-rich-applications-with-django-and-emberjs.html</guid><category>django</category><category>ember.js</category></item><item><title>Lightning Talk: Python "Pro" - Auto-Reloading and Daemon/Process management</title><link>https://pyvideo.org/pytexas-2012/lightning-talk-python-pro-auto-reloading-and-daemonprocess-management.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Gabriel Grant</dc:creator><pubDate>Sat, 15 Sep 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-09-15:pytexas-2012/lightning-talk-python-pro-auto-reloading-and-daemonprocess-management.html</guid><category>lightning talks</category></item><item><title>Lightning Talks - Wednesday morning</title><link>https://pyvideo.org/djangocon-us-2011/djangocon-2011--lightning-talks---wednesday-morni.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Lightning Talks - Wednesday morning&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;00:00 - Steve Ivy: &lt;a class="reference external" href="http://pushcode.wallrazer.com/"&gt;Pushcode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;05:00 - Jacob Kaplan-Moss: Brief history of Django model syntax&lt;/li&gt;
&lt;li&gt;14:20 - Gabriel Grant: Why the big backpack? Well, I have
t-shirts.... &lt;a class="reference external" href="http://dotcloud.com/"&gt;DotCloud&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;16:20 - ?: Prezi &lt;a class="reference external" href="http://prezi.com/"&gt;Prezi&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steve Ivy</dc:creator><pubDate>Mon, 05 Sep 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-09-05:djangocon-us-2011/djangocon-2011--lightning-talks---wednesday-morni.html</guid><category>lightning talks</category><category>djangocon</category><category>djangocon2011</category><category>dotcloud</category><category>models</category><category>prezi</category><category>pushcode</category></item><item><title>Building Rich Applications with Django and Ember.js</title><link>https://pyvideo.org/djangocon-us-2013/building-rich-applications-with-django-and-ember.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Building Rich Applications with Django and Ember.js&lt;/p&gt;
&lt;p&gt;Wednesday 2 p.m.--2:45 p.m.&lt;/p&gt;
&lt;p&gt;Audience level: Intermediate&lt;/p&gt;
&lt;p&gt;Description&lt;/p&gt;
&lt;p&gt;Ember.js is the most advanced client-side JavaScript framework
available: it provides optimistic server updates, automatically-updating
templates and sensible defaults to dramatically increase developer
productivity. Abstract&lt;/p&gt;
&lt;p&gt;Learn how Django and Ember.js can compliment each other: how to
integrate them where their functionality overlaps and reconcile the
differences where their approaches contradict.&lt;/p&gt;
&lt;p&gt;Django helps quickly express a data model and handle HTTP requests, but
using it alone isn't conducive to building highly-dynamic interfaces.
Ember, on the other hand, is a client-side framework designed with
precisely these interfaces in mind, but doesn't tackle the server-side
at all.&lt;/p&gt;
&lt;p&gt;Both Django and Ember.js are large, ambitious and opinionated
frameworks. This is what gives them their power over their more
minimalist colleagues (Flask and Backbone.js, respectively) but because
their opinions sometimes differ, it can be difficult to make them play
together.&lt;/p&gt;
&lt;p&gt;In this talk, I'll briefly introduce Ember.js, compare and contrast how
Django and Ember.js handle the various layers of an application, and
show how to bridge between these two worlds.&lt;/p&gt;
&lt;p&gt;Topics covered: - Ember's interpretation of MVC in Django terms -
Overlap in functionality: which pieces of each framework to keep, modify
and throw away - Compiling Assets - Connecting Ember to Django with
Ember-data and Django REST framework&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Gabriel Grant</dc:creator><pubDate>Thu, 03 Oct 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-10-03:djangocon-us-2013/building-rich-applications-with-django-and-ember.html</guid></item><item><title>Take My Money: an Intro to Charging for Things with Django</title><link>https://pyvideo.org/djangocon-us-2013/take-my-money-an-intro-to-charging-for-things-with.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;TAKE MY MONEY: AN INTRO TO CHARGING FOR THINGS WITH DJANGO&lt;/p&gt;
&lt;p&gt;Thursday 2 p.m.--2:45 p.m.&lt;/p&gt;
&lt;p&gt;Audience level: Intermediate&lt;/p&gt;
&lt;p&gt;DESCRIPTION Charging for your application can often be almost as
difficult as creating the initial version of the application itself. In
this talk, we'll cover tools and techniques to avoid reinventing the
wheel and get you to your pay-day sooner, no matter what sort of payment
structure you wish to implement.&lt;/p&gt;
&lt;p&gt;ABSTRACT You're got your app ready to go -- your ticket to fame and
fortune. But wait, how are you going to collect that fortune from your
customers? We'll walk through the different payment models common on the
web, and how to charge for each one using Django.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Gabriel Grant</dc:creator><pubDate>Thu, 03 Oct 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-10-03:djangocon-us-2013/take-my-money-an-intro-to-charging-for-things-with.html</guid></item><item><title>Distributed, Real-time Web Apps with Stack.io</title><link>https://pyvideo.org/pycon-ca-2012/distributed-real-time-web-apps-with-stackio.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Stack.io[1] is an open-source tool to quickly build real-time web apps.
By directly linking clients to back-end services via WebSockets,
Stack.io helps decompose complex code into a set of simple components in
Python or Node.js. It augments standard RPC with bi-directional
streaming, and provides a layer of auth and service discovery on top.&lt;/p&gt;
&lt;p&gt;[1]: &lt;a class="reference external" href="https://github.com/dotcloud/stack.io"&gt;https://github.com/dotcloud/stack.io&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Gabriel Grant</dc:creator><pubDate>Sun, 11 Nov 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-11-11:pycon-ca-2012/distributed-real-time-web-apps-with-stackio.html</guid></item><item><title>Storm: the Hadoop of Realtime Stream Processing</title><link>https://pyvideo.org/pycon-us-2012/storm-the-hadoop-of-realtime-stream-processing.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Twitter's new scalable, fault-tolerant, and simple(ish) stream
programming system... with Python!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Gabriel Grant</dc:creator><pubDate>Sat, 10 Mar 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-03-10:pycon-us-2012/storm-the-hadoop-of-realtime-stream-processing.html</guid></item></channel></rss>