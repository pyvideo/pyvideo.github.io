<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Sat, 26 May 2018 00:00:00 +0000</lastBuildDate><item><title>Solving Google Code Jam problems with PyPy - Part 1</title><link>https://pyvideo.org/europython-2013/solving-google-code-jam-problems-with-pypy-part-1.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alessandro Amici</dc:creator><pubDate>Wed, 03 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-03:europython-2013/solving-google-code-jam-problems-with-pypy-part-1.html</guid><category>numpy</category><category>JIT</category><category>networkx</category><category>performance</category><category>scientific-computing</category><category>pypy</category></item><item><title>Solving Google Code Jam problems with PyPy - Part 2</title><link>https://pyvideo.org/europython-2013/solving-google-code-jam-problems-with-pypy-part-2.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alessandro Amici</dc:creator><pubDate>Wed, 03 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-03:europython-2013/solving-google-code-jam-problems-with-pypy-part-2.html</guid><category>numpy</category><category>JIT</category><category>networkx</category><category>performance</category><category>scientific-computing</category><category>pypy</category></item><item><title>Coding competitions with PyPy aka "Python for the win!"</title><link>https://pyvideo.org/europython-2013/coding-competitions-with-pypy-aka-python-for-the-win.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alessandro Amici</dc:creator><pubDate>Tue, 02 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-02:europython-2013/coding-competitions-with-pypy-aka-python-for-the-win.html</guid><category>numpy</category><category>JIT</category><category>networkx</category><category>performance</category><category>scientific-computing</category><category>pypy</category></item><item><title>Programmazione competitiva con PyPy: "Vincere con Python!"</title><link>https://pyvideo.org/europython-2013/programmazione-competitiva-con-pypy-vincere-con-python.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alessandro Amici</dc:creator><pubDate>Tue, 02 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-02:europython-2013/programmazione-competitiva-con-pypy-vincere-con-python.html</guid><category>numpy</category><category>JIT</category><category>networkx</category><category>performance</category><category>scientific-computing</category><category>pypy</category></item><item><title>Learning credit networks with applications in financial industry</title><link>https://pyvideo.org/pydata-amsterdam-2018/learning-credit-networks-with-applications-in-financial-industry.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The purpose of this talk is to illustrate the importance of network-based models in financial industry since the 2007-08 crisis. I will present our novel method to learn a (Bayesian) network using default dependence of financial institutions and show how financial distress can propagate via such a network. I will share some examples where we extensively use NetworkX and bnlearn packages.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sumit Sourabh</dc:creator><pubDate>Sat, 26 May 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-05-26:pydata-amsterdam-2018/learning-credit-networks-with-applications-in-financial-industry.html</guid><category>networkx</category><category>bnlearn</category></item><item><title>Complexity Science</title><link>https://pyvideo.org/pycon-us-2018/complexity-science.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Complexity Science is an approach to modeling systems using tools from discrete mathematics and computer science, including networks, cellular automata, and agent-based models.  It has applications in many areas of natural and social science.&lt;/p&gt;
&lt;p&gt;Python is a particularly good language for exploring and implementing models of complex systems.  In this tutorial, we present material from the draft second edition of &lt;em&gt;Think Complexity&lt;/em&gt;, and from a class we teach at Olin College.  We will work with random networks using NetworkX, with cellular automata using NumPy, and we will implement simple agent-based models.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Allen Downey</dc:creator><pubDate>Thu, 10 May 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-05-10:pycon-us-2018/complexity-science.html</guid><category>networkx</category><category>numpy</category></item><item><title>Master 2.5 GB of unstructured specification documents with ease</title><link>https://pyvideo.org/pycon-de-2017/master-25-gb-of-unstructured-specification-documents-with-ease.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Dr. Andreas Schilling&lt;/strong&gt; is Senior Software Engineer at eXXcellent solutions. In his job, he helps customers to develop software solutions from the early stage of defining the particular requirements to developing information systems which meet their needs.&lt;/p&gt;
&lt;p&gt;Before working at eXXcellent solutions Andreas Schilling studied Information Systems at the University of Bamberg focusing on distributed systems and information management. Thereafter, he pursued his PhD and studied collaboration dynamics in open source projects.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;How Do you kick start a project which is based on 2.5 GB files of unstructured specification documents? To answer this question, we present our lessons learned from developing a Python based knowledge management tool which provides a lightweight and intuitive browser frontend.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In this talk, we present lessons learned from and practical advice on how to deal with a large body of specification documents in your next project. We introduce our approach as well as code excerpts from our powerful toolset to transform a large set of unstructured and partially corrupt specification documents into structured JSON Files. Finally, we showcase a simple, yet powerful Javascript frontend which requires no additional infrastructure to present the compiled artefacts in an intuitive and responsive user interface.&lt;/p&gt;
&lt;p&gt;In particular this talk covers the following topics:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;How to make use of pywin32 to access layout and content information from partially corrupt .doc and .docx files and create simple JSON files with UTF-8 encoding.&lt;/li&gt;
&lt;li&gt;Identify and categorize signal words in your specification.&lt;/li&gt;
&lt;li&gt;Use pandas to compile content based recommender functionality&lt;/li&gt;
&lt;li&gt;Use networkx and py2cytoscape to visualize call sequences and semantic relationships in your specification.&lt;/li&gt;
&lt;li&gt;Present the compiled artefacts and identified relationships in an easy-to-use and lightweight Javascript browser interface without any additional infrastructure (i.e. no webserver and no database server).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Recorded at&lt;/strong&gt; PyCon.DE 2017 Karlsruhe: &lt;a class="reference external" href="https://de.pycon.org/"&gt;https://de.pycon.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Video editing&lt;/strong&gt;: Sebastian Neubauer &amp;amp; Andrei Dan&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Tools&lt;/strong&gt;: Blender, Avidemux &amp;amp; Sonic Pi&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andreas Schilling</dc:creator><pubDate>Wed, 25 Oct 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-10-25:pycon-de-2017/master-25-gb-of-unstructured-specification-documents-with-ease.html</guid><category>networkx</category><category>pandas</category><category>visualization</category><category>knowledge-management</category><category>analytics</category><category>use-case</category><category>python</category><category>business</category></item><item><title>Analyzing code contributions to the CPython project using NetworkX and Matplotlib</title><link>https://pyvideo.org/pydata-barcelona-2017/analyzing-code-contributions-to-the-cpython-project-using-networkx-and-matplotlib.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;It's a well established fact that only a small fraction of developers account for most code contributions to FOSS projects. The CPython project is not an exception, but analyzing code contributions through time reveals that the people that contribute the most is not always the same. I model CPython's contribution dynamics as cooperation networks and analyze them using NetworkX and Matplotlib.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I analyze cooperation on the CPython project by analyzing the code contributions that each participant on the project has done through time. I model these contributions as a succession of bipartite networks where the bipartite node sets are contributors and source code files; each contributor is linked to the source files to which they have contributed, weighted by the number of lines of source code added. Analyzing the structure of these networks using NetworkX and Matplotlib I found an hierarchy of nested groups of developers that corresponds to the developers that do most of the code contributions in the CPython project. This hierarchy, on the one hand, reflects the empirically well established fact that in FOSS projects only a small fraction of the developers account for most of the contributions. And, on the other hand, refutes the naive views of early academic accounts that characterized FOSS projects as a flat hierarchy of peers in which every individual does more or less the same. I argue that the structure of CPython's cooperation network can be characterized as an open elite, where the top levels of this hierarchy are filled with new individuals at a high pace. This feature is key for understanding the mechanisms and dynamics that make FOSS communities able to develop long term projects, with high individual turnover, and yet achieve high impact and coherent results as a result of large scale cooperation.&lt;/p&gt;
&lt;p&gt;You can download the slides for this talk from &lt;a class="reference external" href="https://github.com/jtorrents/thesis/blob/master/presentations/pydata_bcn/cpython_code_contributions.pdf"&gt;https://github.com/jtorrents/thesis/blob/master/presentations/pydata_bcn/cpython_code_contributions.pdf&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jordi Torrents</dc:creator><pubDate>Sat, 20 May 2017 15:00:00 +0200</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-05-20:pydata-barcelona-2017/analyzing-code-contributions-to-the-cpython-project-using-networkx-and-matplotlib.html</guid><category>cpython</category><category>networkx</category><category>matplotlib</category></item><item><title>Networks meet Finance in Python</title><link>https://pyvideo.org/pydata-amsterdam-2016/networks-meet-finance-in-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyData Amsterdam 2016&lt;/p&gt;
&lt;p&gt;Description&lt;/p&gt;
&lt;p&gt;I will talk about network models in finance, and walk through real data and very visual examples using the pydata toolset - pandas, bokeh, pandas, networkx, ipywidgets. Special focus will be given to correlation networks, with applications to market characterization and portfolio risk management (as done in Pozzi 2013) using the latest available market data.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;In the course of the 2008 Lehman and the subsequent European debt crisis, it became clear that both financial industry and regulators had underestimated the degree of interconnectedness and interdependency across financial assets and institutions. This type of information is especially well represented by network models, which had first gained popularity in computer science, biology and social sciences.&lt;/p&gt;
&lt;p&gt;The study of network models in finance is already providing insight into the structure of the financial world and the economy. Network models are proving to be useful tools for providing early-warning signals of systemic risk (e.g. Squartini 2013), measuring liquidity and concentration risk, identifying sectors from time-series correlations (e.g. Fenn 2011) as well as insights into finding diversified baskets of assets in the classical investment framework (e.g. Pozzi 2013).&lt;/p&gt;
&lt;p&gt;I will provide an overview of some of the aforementioned work, and walk through (real data) examples using the pydata toolset. Special focus will be given to the study of correlation networks, with applications to portfolio risk management as in (Pozzi 2013) using the latest available market data. The examples make heavy use of pandas, bokeh, pandas, networkx, ipywidgets.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Miguel Vaz</dc:creator><pubDate>Sat, 26 Mar 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-03-26:pydata-amsterdam-2016/networks-meet-finance-in-python.html</guid><category>pandas</category><category>bokeh</category><category>networkx</category><category>ipywidgets</category></item></channel></rss>