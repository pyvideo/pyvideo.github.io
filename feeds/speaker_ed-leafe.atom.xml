<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_ed-leafe.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2013-08-16T00:00:00+00:00</updated><entry><title>Build Your Infrastructure - with Python!</title><link href="https://pyvideo.org/pytexas-2013/build-your-infrastructure-with-python.html" rel="alternate"></link><published>2013-08-16T00:00:00+00:00</published><updated>2013-08-16T00:00:00+00:00</updated><author><name>Ed Leafe</name></author><id>tag:pyvideo.org,2013-08-16:pytexas-2013/build-your-infrastructure-with-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Cloud computing is changing the way that businesses think about their computing requirements. Instead of ordering hardware, waiting for delivery, allocating space in a data center, installing and wiring it up, and then configuring each piece of the system, you can now do the equivalent with a few clicks on a control panel, but that gets tedious. What's much more interesting is to do all of this programmatically, using our favorite language: Python!&lt;/p&gt;
&lt;p&gt;This session will deep-dive into this topic by using pyrax, the Python SDK for the OpenStack and Rackspace Clouds. It will cover the as much of the following as time permits:&lt;/p&gt;
&lt;p&gt;Getting your cloud account and credentials
Installing pyrax
Creating servers
Saving a customized server as a template image
Creating more servers on demand from your template images.
Creating, attaching, and imaging Block Storage volumes
Using private networks to create a bastion host setup
Managing these servers with a Load Balancer
Creating and managing Cloud Databases
Using pyrax to manage your DNS
Object storage and management using pyrax&lt;/p&gt;
</summary></entry><entry><title>Build your infrastructure - with Python!</title><link href="https://pyvideo.org/pycon-au-2013/build-your-infrastructure-with-python.html" rel="alternate"></link><published>2013-07-07T00:00:00+00:00</published><updated>2013-07-07T00:00:00+00:00</updated><author><name>Ed Leafe</name></author><id>tag:pyvideo.org,2013-07-07:pycon-au-2013/build-your-infrastructure-with-python.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Cloud computing is changing the way that businesses think about their
computing requirements. Instead of ordering hardware, waiting for
delivery, allocating space in a data center, installing and wiring it
up, and then configuring each piece of the system, you can now do the
equivalent with a few clicks on a control panel, but that gets tedious.
What's much more interesting is to do all of this programmatically,
using our favorite language: Python!&lt;/p&gt;
&lt;p&gt;This session will deep-dive into this topic by using pyrax, the Python
SDK for the OpenStack and Rackspace Clouds. It will cover the following:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Getting your cloud account and credentials&lt;/li&gt;
&lt;li&gt;Installing pyrax&lt;/li&gt;
&lt;li&gt;Creating servers&lt;/li&gt;
&lt;li&gt;Saving a customized server as a template image&lt;/li&gt;
&lt;li&gt;Creating more servers on demand from your template images.&lt;/li&gt;
&lt;li&gt;Creating, attaching, and imaging Block Storage volumes.&lt;/li&gt;
&lt;li&gt;Using private networks to create a bastion host setup&lt;/li&gt;
&lt;li&gt;Managing these servers with a Load Balancer&lt;/li&gt;
&lt;li&gt;Creating and managing Cloud Databases&lt;/li&gt;
&lt;li&gt;Using pyrax to manage your DNS&lt;/li&gt;
&lt;li&gt;Object storage and management using pyrax&lt;/li&gt;
&lt;/ul&gt;
</summary></entry><entry><title>Build Your Infrastructure - with Python!</title><link href="https://pyvideo.org/pycon-ca-2013/build-your-infrastructure-with-python-0.html" rel="alternate"></link><published>2013-08-11T00:00:00+00:00</published><updated>2013-08-11T00:00:00+00:00</updated><author><name>Ed Leafe</name></author><id>tag:pyvideo.org,2013-08-11:pycon-ca-2013/build-your-infrastructure-with-python-0.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Cloud computing is changing the way that businesses think about their
infrastructure. Rather than ordering and managing hardware, they can now
provision what they need with a few clicks or API calls. This talk will
demonstrate building infrastructure using our favorite language: Python!&lt;/p&gt;
</summary><category term="talk"></category></entry><entry><title>Creating Rich Client Applications Using Dabo</title><link href="https://pyvideo.org/pycon-us-2010/creating-rich-client-applications-using-dabo.html" rel="alternate"></link><published>2010-02-19T00:00:00+00:00</published><updated>2010-02-19T00:00:00+00:00</updated><author><name>Ed Leafe</name></author><id>tag:pyvideo.org,2010-02-19:pycon-us-2010/creating-rich-client-applications-using-dabo.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Creating Rich Client Applications Using Dabo&lt;/p&gt;
&lt;p&gt;Presented by Ed Leafe and Paul McNett&lt;/p&gt;
&lt;p&gt;While web applications seem to get all the attention these days, many
businesses still rely on desktop, or &amp;quot;rich client&amp;quot;, applications to run
their business. For those who prefer to do their coding with Python,
Dabo is the only full-featured desktop app framework.&lt;/p&gt;
&lt;p&gt;In this tutorial, we'll cover the general structure and approach to
application development used in Dabo, including lots of interactive work
where we will all develop applications that will be able to query a
database, display the results, allow the user to edit the data, and then
save it back to the database. We will cover the various tools available
in Dabo to help you develop your applications, and how they work
together.&lt;/p&gt;
&lt;p&gt;Intended Audience&lt;/p&gt;
&lt;p&gt;Developers with basic to intermediate Python experience.&lt;/p&gt;
&lt;p&gt;Class Outline&lt;/p&gt;
&lt;p&gt;Introduction: The thinking and design approach behind the framework. (15
min).&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Explanation of the framework design. Frameworks are great if you're
working with them, but not if you're constantly fighting them! We'll
outline the various parts of the framework, and how they work
together to create applications.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Building an app in 30 seconds. (15 min)&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;You can use the AppWizard to create a completely functional CRUD
application in less than 30 seconds. We'll demonstrate how to use the
AppWizard, and how you can build on and further customize the
application it creates.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The primary non-UI classes in Dabo (15 min)&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;There are lots of classes in Dabo, but only a few main ones that are
used in every app. This section will cover them: the application
class, the business object class, and the DBAPI data adapter class.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Introduction to the Dabo Tools (30 min)&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;One of the benefits of a framework is that the mundane, repetitive
tasks are handled by the framework, leaving you to focus on the
creative parts of app development. In this section we'll discuss
several of the visual tools available to help you create Dabo
applications faster and easier.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Developing an actual application, part 1 (15 min)&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Talk is fine, but here's where we begin creating an actual
application. Attendees will learn how to create a new Dabo app, along
with database connections, menus and a main form. In the second half
of the tutorial we'll use this app as the basis for more complex
development.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;REFRESHMENT BREAK&lt;/p&gt;
&lt;p&gt;Overview of UI Classes (30 min)&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;This is where we talk about the &amp;quot;rich&amp;quot; in &amp;quot;rich client&amp;quot;. Dabo has a
full set of UI widgets, based on the wxPython toolkit. We've taken
those widget classes and added a consistent interface, so that the
developer uses the same properties and methods to accomplish the same
thing in all the classes, making developing smoother and more
intuitive. We'll cover all of the most-commonly used controls, and
how to work with them.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Developing an actual application, part 2 (30 min)&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The basic app created in the first half was an impressive result for
such a short amount of time, but here's where we'll start to make it
more interesting. We'll create several related business objects, bind
them to the UI elements, and have it all work seamlessly with a
database. After that, we'll show how to create and run reports
against that same data. We'll then wrap up by explaining how to
deploy your finished application.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Rich Client Web Applications with Dabo (10 min)&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;HTML web apps are trying to get a richer client experience through
the increased use and sophistication of Javascript-based tools.
That's great if you like spending your time in Javascript, but not so
great if you are a Python dev. We take the opposite approach: taking
our rich-client apps and deploying them over the web so that users
can run them without first installing the app.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Future plans for Dabo (5 min)&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Dabo is being actively developed, and we have plans for future
enhancements that we'll cover here.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Wrap-up and Final Questions (15 min)&lt;/p&gt;
&lt;p&gt;Requirements&lt;/p&gt;
&lt;p&gt;Students do not need to have a computer, but they will not get as much
out of the session if they cannot actively participate in creating the
example applications. They should have the following prerequisites
installed, using the latest available stable releases except where
specific version numbers are indicated:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Python 2.5.4&lt;/li&gt;
&lt;li&gt;wxPython 2.8.10.1 unicode&lt;/li&gt;
&lt;li&gt;MySQLdb&lt;/li&gt;
&lt;li&gt;reportlab&lt;/li&gt;
&lt;li&gt;Python Imaging Library&lt;/li&gt;
&lt;li&gt;Dabo 0.9.2&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="dabo"></category><category term="pycon"></category><category term="pycon2010"></category><category term="tutorial"></category></entry></feed>