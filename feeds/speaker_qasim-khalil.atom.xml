<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_qasim-khalil.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2018-09-18T00:00:00+00:00</updated><entry><title>Taking down production with simple database migrations</title><link href="https://pyvideo.org/pycon-uk-2018/taking-down-production-with-simple-database-migrations.html" rel="alternate"></link><published>2018-09-18T00:00:00+00:00</published><updated>2018-09-18T00:00:00+00:00</updated><author><name>Qasim Khalil</name></author><id>tag:pyvideo.org,2018-09-18:pycon-uk-2018/taking-down-production-with-simple-database-migrations.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Learning the hard way how not to take down your entire production service, again, and again, and again&lt;/p&gt;
&lt;p&gt;Migrating databases can't be that hard right? Change some fields, auto-
generate the migration files, and deploy. Bam - you're do- Why is
literally everything suddenly giving errors... Wait- why is everything
back to normal now by itself...&lt;/p&gt;
&lt;p&gt;When you're small you write a monolithic application because it is
efficient to do so. However, as your application becomes larger in every
way, certain things can start becoming much more difficult, in
particular, modifying your database schema via your models or fields
becomes hazardous.&lt;/p&gt;
&lt;p&gt;This talk will look at the various ways that I, or someone on my team,
took down our entire production web service with some kind of -
perfectly innocent- looking - database migration. We gradually
accumulated a set of best practices and wrote a comprehensive manual on
how to do them right.&lt;/p&gt;
</summary></entry></feed>