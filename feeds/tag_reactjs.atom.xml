<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/tag_reactjs.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2019-05-03T00:00:00+00:00</updated><entry><title>Building a Celery alternative in Django on Kubernetes</title><link href="https://pyvideo.org/pycon-italia-2019/building-a-celery-alternative-in-django-on-kubernetes.html" rel="alternate"></link><published>2019-05-03T00:00:00+00:00</published><updated>2019-05-03T00:00:00+00:00</updated><author><name>Alec Clowes</name></author><id>tag:pyvideo.org,2019-05-03:pycon-italia-2019/building-a-celery-alternative-in-django-on-kubernetes.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Every used Celery and been frustrated by the complexity of RabbitMQ, the
Redis visibility timeout, or the deprecated Postgres support? Wish there
was better support for composing tasks into workflows and a web UI for
viewing status and logs? I’ve been working with Celery for years; it is
a great tool but I wanted to build something that fit my use cases
better so I started a new task execution framework.&lt;/p&gt;
&lt;p&gt;This talk isn’t about that framework, however. It is about how to use
Django and React together, how to take advantage of more advanced
Postgres features like recursive queries and select-for-update row
locking, and how to deploy the resulting application onto Google Cloud
Platform’s hosted Kubernetes solution. I hope it is valuable as a how-to
guide covering many current best practices, from CLI and API design to
high-availability and continuous deployment. Everything is open-sourced
on GitHub at &lt;a class="reference external" href="https://github.com/aclowes/yawn"&gt;https://github.com/aclowes/yawn&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Feedback form: &lt;a class="reference external" href="https://python.it/feedback-1568"&gt;https://python.it/feedback-1568&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;Friday 3 May&lt;/strong&gt; at 17:15 &lt;a class="reference external" href="/en/sprints/schedule/pycon10/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</summary><category term="celery"></category><category term="reactjs"></category><category term="postgresql"></category><category term="kubernetes"></category><category term="django"></category></entry><entry><title>Choose Your Own Adventure for Client Web Services with GraphQL</title><link href="https://pyvideo.org/pycon-italia-2018/choose-your-own-adventure-for-client-web-services-with-graphql.html" rel="alternate"></link><published>2018-04-22T00:00:00+00:00</published><updated>2018-04-22T00:00:00+00:00</updated><author><name>David Anderson</name></author><id>tag:pyvideo.org,2018-04-22:pycon-italia-2018/choose-your-own-adventure-for-client-web-services-with-graphql.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;div class="section" id="summary"&gt;
&lt;h4&gt;Summary&lt;/h4&gt;
&lt;p&gt;In this talk, we discuss Facebook’s graphql standard, an a la carte way
for front end clients to consume data from the backend, the python
implementation of that standard (graphine), basic queries and mutations,
and some advanced techniques. We’ll work up from shared principals with
traditional REST web services to the new paradigm of data specific to
each client request and how this makes backend and frontend developers
happier and more productive.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="audience-experience"&gt;
&lt;h4&gt;Audience Experience&lt;/h4&gt;
&lt;p&gt;Intermediate (requires some knowledge of Python, Django, REST web
services, etc. But will try to build a shared understanding of the core
concepts).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="duration"&gt;
&lt;h4&gt;Duration&lt;/h4&gt;
&lt;p&gt;45 minutes&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;About me, Prologue to the Adventure (5m)&lt;/li&gt;
&lt;li&gt;Chapter 1 - Architecture and Design (15m)&lt;/li&gt;
&lt;li&gt;Chapter 2 - Advanced Considerations (Authentication, Scaling,
Performance, Rate Limiting, etc.) (10m)&lt;/li&gt;
&lt;li&gt;Chapter 3 - Authentication and Building a Rich Client Web Application
(10m)&lt;/li&gt;
&lt;li&gt;Epilogue + Questions (5m)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;in __on &lt;strong&gt;domenica 22 aprile&lt;/strong&gt; at 11:15 &lt;a class="reference external" href="/p3/schedule/pycon9/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</summary><category term="Relay"></category><category term="reactjs"></category><category term="django"></category><category term="graphql"></category><category term="Graphine"></category><category term="Apollo"></category></entry><entry><title>Going Isomorphic with Django and React</title><link href="https://pyvideo.org/pycon-italia-2018/going-isomorphic-with-django-and-react.html" rel="alternate"></link><published>2018-04-21T00:00:00+00:00</published><updated>2018-04-21T00:00:00+00:00</updated><author><name>Mattia Larentis</name></author><id>tag:pyvideo.org,2018-04-21:pycon-italia-2018/going-isomorphic-with-django-and-react.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In web development, an isomorphic application is one whose code (in this
case, JavaScript) can run both in the server (in this case, Django) and
the client. In this talk we will understand how it works and why it can
be useful in the daily life. This talk is for developers (both
backenders and frontenders) who believe in “DRY” and will love to learn
something new.&lt;/p&gt;
&lt;p&gt;repo: &lt;a class="reference external" href="https://github.com/nostalgiaz/django-react-ssr"&gt;https://github.com/nostalgiaz/django-react-ssr&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;sabato 21 aprile&lt;/strong&gt; at 18:30 &lt;a class="reference external" href="/p3/schedule/pycon9/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</summary><category term="typescript"></category><category term="Python"></category><category term="reactjs"></category><category term="isomorphic"></category><category term="django"></category><category term="rendering"></category><category term="javascript"></category><category term="browser"></category></entry></feed>