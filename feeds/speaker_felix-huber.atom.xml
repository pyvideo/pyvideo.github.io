<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_felix-huber.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2013-10-17T00:00:00+00:00</updated><entry><title>High-Level Programmierung in der Raumfahrt</title><link href="https://pyvideo.org/pycon-de-2013/high-level-programmierung-in-der-raumfahrt.html" rel="alternate"></link><published>2013-10-17T00:00:00+00:00</published><updated>2013-10-17T00:00:00+00:00</updated><author><name>Felix Huber</name></author><id>tag:pyvideo.org,2013-10-17:pycon-de-2013/high-level-programmierung-in-der-raumfahrt.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Field Programmable Gate Arrays (FPGA) werden normalerweise auf
Registerebene programmiert mit Hardwarebeschreibungssprachen wie Verilog
oder VHDL. Dies ist vergleichbar mit Assemblerprogrammierung eines
Mikroprozessors. Die Sprache Handel-C (sic!) hat sich zum Ziel gemacht,
Hardwarebeschreibung mit C-Syntax zu ermöglichen, unabhängig von der zu
Grunde liegenden Hardware. Dazu muß das Problem die Synchronizität durch
die inhärente Parallelität einer Hardwarefunktion gelöst werden. Mit
Handel-C ist es nun möglich, einen Algorithmus in C zu schreiben, auf
einem Rechner zu simulieren und anschließend aus dem identischen
Quellcode eine Hardwareimplementierung zu synthetisieren. Dabei gehen
die Vorteile einer Hochsprache nicht verloren, im Gegenteil: durch den
global optimierenden Compiler werden weniger Ressourcen auf dem FPGA
benötigt. Zusammen mit Bibliotheken für Fest- und Fließkommaarithmetik,
Graphikausgabe und Tastatur bedient sich ein FPGA dann wie ein embedded
Prozessor mit einem Geschwindigkeitszuwachs von Faktor 100.&lt;/p&gt;
</summary></entry></feed>