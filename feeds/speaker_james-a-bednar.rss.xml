<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Sat, 07 Dec 2019 00:00:00 +0000</lastBuildDate><item><title>Panel: Dashboards for PyData</title><link>https://pyvideo.org/pydata-austin-2019/panel-dashboards-for-pydata.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this tutorial, you will see how to use Panel (&lt;a class="reference external" href="https://panel.pyviz.org"&gt;https://panel.pyviz.org&lt;/a&gt;) to add widgets and layouts to the output from just about any plotting program, and then how to share the result as a fully standalone application. You should walk away knowing you can very easily make any of your analyses interactive and shareable, in just a few lines of code!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">James A Bednar</dc:creator><pubDate>Sat, 07 Dec 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-12-07:pydata-austin-2019/panel-dashboards-for-pydata.html</guid><category>panel</category><category>dashboards</category></item><item><title>PyViz: Unifying Python Tools for In-Browser Data Visualization</title><link>https://pyvideo.org/scipy-2018/pyviz-unifying-python-tools-for-in-browser-data-visualization.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python has dozens of plotting libraries, which is a blessing and a
curse. It can be difficult to choose libraries, learn how to use them,
and make them work together when needed. This talk introduces PyViz.org,
a new initiative to integrate existing OSS tools into a full suite that
solves a wide range of problems in data exploration and communication.
Bokeh implements interactive browser-based plotting, Datashader renders
even huge datasets into manageable images, HoloViews makes it simple to
construct Bokeh+Datashader plots, and other PyViz packages tie all these
tools together to allow simple creation of visual applications and
dashboards.Presenter(s): Speaker: James A. Bednar, Solutions Architect,
Anaconda, Inc. Speaker: Jean-Luc Stevens, Software Engineer, Anaconda,
Inc. Speaker: Philipp Rudiger, Software Engineer, Anaconda, Inc.
Speaker: Christopher Ball, Anaconda, Inc. Speaker: Bryan Van de Ven,
Anaconda, Inc.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">James A. Bednar</dc:creator><pubDate>Fri, 13 Jul 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-07-13:scipy-2018/pyviz-unifying-python-tools-for-in-browser-data-visualization.html</guid></item><item><title>PyViz: Easy Visualization and Exploration for all your Data</title><link>https://pyvideo.org/scipy-2018/pyviz-easy-visualization-and-exploration-for-all-your-data.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this tutorial, you will learn how to use the PyViz suite of tools to quickly build simple or complex visualizations that reveal and give insight into your data. You'll start by using the HoloViews library to annotate your numpy, pandas, or xarray data and make it have an instantly available visual representation. These declarative objects make it easy to visualize how different sets of data relate to each other, by flexibly overlaying and laying out data in any combination. Once you have these objects, you can select, slice, or sample your data as needed, quickly making new types of plots so that you can fully understand your data. You'll be able to choose between Matplotlib plots suitable for publications, or Bokeh plots that support interactive exploration in Jupyter Notebooks or as separate dashboard apps. You'll then see how to use HoloViews and related tools to transform your data for viewing in different ways, defining complex analysis pipelines if needed that preserve the raw data while making each step visible for analysis. When your datasets are too large for web browsers, we'll show how to use Datashader to reveal &lt;em&gt;all&lt;/em&gt; of the data faithfully, rendering it into an image that can be displayed safely even for billions of datapoints. When it is time to share your results with non-developer colleagues, we'll show how to use Param to add interactive widgets to let them explore parameter spaces, how to link plots to respond to user selections and events, and how to put plots and widgets together into a separately launchable dashboard. Throughout, we will demonstrate how to customize plots as needed, how to follow up on specific topics to get more information, and how and when to use each of the libraries described. The aim is to give users the tools and know-how to effectively explore, analyze and visualize even large and complex datasets easily, concisely, and reproducibly. You can see a detailed breakdown of the topics included, including the full training materials as Jupyter notebooks, at &lt;a class="reference external" href="https://pyviz.github.io/pyviz/tutorial/00_Welcome.html"&gt;https://pyviz.github.io/pyviz/tutorial/00_Welcome.html&lt;/a&gt; .&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">James A. Bednar</dc:creator><pubDate>Thu, 12 Jul 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-07-12:scipy-2018/pyviz-easy-visualization-and-exploration-for-all-your-data.html</guid><category>tutorial</category></item><item><title>Deploying Interactive Jupyter Dashboards for Visualizing Hundreds of Millions of Datapoints, in 30 Lines of Python</title><link>https://pyvideo.org/scipy-2017/deploying-interactive-jupyter-dashboards-for-visualizing-hundreds-of-millions-of-datapoints-in-30-lines-of-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;It can be difficult to assemble the right set of packages from the Python scientific software ecosystem to solve complex problems. This presentation will show step by step how to make and deploy a concise, fast, and fully reproducible recipe for interactive visualization of millions or billions of datapoints using very few lines of Python in a Jupyter notebook using a combination of the HoloViews, Datashader, Dask, Bokeh and paramNB libraries and deployed as a Jupyter Dashboard.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Philipp Rudiger</dc:creator><pubDate>Mon, 17 Jul 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-07-17:scipy-2017/deploying-interactive-jupyter-dashboards-for-visualizing-hundreds-of-millions-of-datapoints-in-30-lines-of-python.html</guid><category>jupyter notebook</category></item><item><title>Param: Declarative programming using Parameters</title><link>https://pyvideo.org/scipy-2012/param-declarative-programming-using-parameters.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;As a scientific Python application grows, it can be increasingly
difficult to use and maintain, because of implicit assumptions made when
writing each component. Users can pass any possible data type for any
argument, so code either fills up with assertions and tests to see what
type of data has been supplied, or else has undefined behavior for some
datatypes or values. Once software is exchanged with other users,
obscure error messages or even incorrect results are the likely outcome.
Programming languages that require types to be declared alleviate some
of these issues, but are inflexible and difficult to use, both in
general and when specifying details of types (such as ranges of allowed
values). Luckily, Python metaobjects make it possible to extend the
Python language to offer flexible declarative typing, offering the best
of both worlds.&lt;/p&gt;
&lt;p&gt;The Param module provides a clean, low-dependency, pure-Python
implementation of declarative parameters for Python objects and
functions, allowing library and program developers to specify precisely
what types of arguments or values are allowed. A Parameter is a special
type of class attribute that supports type declarations (based on
subtypes of a specified class, support for specified methods (duck
typing), or any other criterion that can be tested), ranges, bounds,
units, constant values, and enumerations. A Parameter has a docstring
(visible at the command line or in generated documentation), inherits
its default value, documentation, etc. along the class hierarchy, and
can be set to dynamic values that generate a stream of numbers for use
in controlling scientific code. In essence, a Parameter is a Python
attribute extended to support clean, simple, robust, maintainable, and
declarative scientific programming.&lt;/p&gt;
&lt;p&gt;Param has been under continuous development and use since 2002 as part
of the Topographica simulator (topographica.org), but is now being
released as a separate package due to demand from users who want similar
functionality in their own code. Param is very similar in spirit to the
Enthought Traits library, despite having been developed independently,
and offers much of the same functionality. Param is particularly useful
for people who find that Traits is difficult to integrate into their
work flow, since it consists of only two pure Python files with no
dependencies outside the standard library. Param is also useful for
people building Tk applications, and provides an optional Tk
property-sheet interface that can automatically generate a GUI window
for viewing and editing an object's Parameters.&lt;/p&gt;
&lt;p&gt;Param is freely available under a BSD license from:
&lt;a class="reference external" href="http://ioam.github.com/param/"&gt;http://ioam.github.com/param/&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Christopher E. Ball</dc:creator><pubDate>Thu, 19 Jul 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-07-19:scipy-2012/param-declarative-programming-using-parameters.html</guid><category>General</category></item></channel></rss>