<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_abid-h-mujtaba.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2019-10-04T00:00:00+00:00</updated><entry><title>Memoizing recursive functions: How decorators are more elegant than I imagined</title><link href="https://pyvideo.org/pygotham-2019/memoizing-recursive-functions-how-decorators-are-more-elegant-than-i-imagined.html" rel="alternate"></link><published>2019-10-04T00:00:00+00:00</published><updated>2019-10-04T00:00:00+00:00</updated><author><name>Abid H. Mujtaba</name></author><id>tag:pyvideo.org,2019-10-04:pygotham-2019/memoizing-recursive-functions-how-decorators-are-more-elegant-than-i-imagined.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Calculating the Fibonacci series is a classic example of writing a recursive
function. However, calculating even &lt;cite&gt;fib(50)&lt;/cite&gt; will tie up a modern computer
for a couple of minutes. The solution to this problem is memoization, which
decorators make particularly easy.&lt;/p&gt;
&lt;p&gt;But how does a top-level decorator access the recursive call within the
function itself?&lt;/p&gt;
&lt;p&gt;The answer is both delightfully simple and extremely insightful, exposing
how seemingly simple language design choices can have profound effects on
its usage.&lt;/p&gt;
</summary></entry></feed>