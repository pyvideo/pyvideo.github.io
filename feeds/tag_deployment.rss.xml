<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Sun, 05 May 2019 00:00:00 +0000</lastBuildDate><item><title>Intentional Deployment: Best Practices for Feature Flag Management</title><link>https://pyvideo.org/pytexas-2019/intentional-deployment-best-practices-for-feature-flag-management.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Feature flags can be powerful tools in mitigating risk in your development cycle: if you use them correctly. In 2012 one improperly deployed feature flag sent a $365 million dollar trading company into bankruptcy in about 45 minutes. So let's talk about how to manage and use feature flags in Python.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Caitlin Rubin</dc:creator><pubDate>Sat, 13 Apr 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-04-13:pytexas-2019/intentional-deployment-best-practices-for-feature-flag-management.html</guid><category>deployment</category><category>feature flag management</category></item><item><title>RedisAI</title><link>https://pyvideo.org/pycon-italia-2019/redisai.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Taking deep learning models to production and doing so reliably is one
of the next frontiers of DevOps. With the advent of Redis modules and
the availability of C APIs for the major deep learning frameworks, it is
now possible to turn Redis into a reliable runtime for deep learning
workloads, providing a simple solution for a model serving microservice.
In this talk we will introduce RedisAI, a joint effort by Orobix and
RedisLabs that introduces tensors and graphs as new Redis data types and
allows to execute graphs over tensors using multiple backends (PyTorch,
TensorFlow, and ONNXRuntime), both on the CPU and GPU. The module also
supports scripting with TorchScript, which provides a Python-like tensor
language that can be used to facilitate pre- and post-processing
operations, like input shaping or output ensambling. In addition, thanks
to its support for the ONNX standard, including ONNX-ML, RedisAI is not
strictly limited to deep learning, but it offers support for general
machine learning algorithms. In this talk, we will demonstrate a full,
Python-powered journey from fine tuning a model to a scalable Flask +
RedisAI deployment. Last, we will lay down the roadmap for the future,
like automated batching, sharding, integration with Redis data types
(e.g. streams) and advanced monitoring. The talk will include sample
code, best practices and a live demo.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Feedback form:&lt;/strong&gt; &lt;a class="reference external" href="https://python.it/feedback-1756"&gt;https://python.it/feedback-1756&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;Sunday 5 May&lt;/strong&gt; at 12:30 &lt;a class="reference external" href="/en/sprints/schedule/pycon10/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Luca Antiga</dc:creator><pubDate>Sun, 05 May 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-05-05:pycon-italia-2019/redisai.html</guid><category>database</category><category>redis</category><category>devops</category><category>Machine Learning</category><category>deployment</category><category>neural network</category></item><item><title>Developing multi-platform apps with Python in 2013</title><link>https://pyvideo.org/europython-2013/developing-multi-platform-apps-with-python-in-2013.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Guillaume Aubert</dc:creator><pubDate>Fri, 05 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-05:europython-2013/developing-multi-platform-apps-with-python-in-2013.html</guid><category>gui</category><category>application-development</category><category>deployment</category></item><item><title>batou - a multi-(component|environment|platform|.*) deployment tool</title><link>https://pyvideo.org/europython-2013/batou-a-multi-componentenvironmentplatform-deployment-tool.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;batou is a service deployment utility inspired by tools like Puppet,
Fabric, and other modern tools. It made a short appearance in a
lightning talk and at the sprints during EP 2012.&lt;/p&gt;
&lt;p&gt;The talk gives an overview and demonstrates with practical examples how
we deploy web applications with many complex components:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;modelling service components with Python&lt;/li&gt;
&lt;li&gt;multiple environments&lt;/li&gt;
&lt;li&gt;multiple platforms&lt;/li&gt;
&lt;li&gt;development environments&lt;/li&gt;
&lt;li&gt;convergent behaviour&lt;/li&gt;
&lt;li&gt;remote deployments&lt;/li&gt;
&lt;li&gt;secrets management (database passwords, SSL certificates, …)&lt;/li&gt;
&lt;li&gt;no additional run-time dependencies&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I will show how the real-life requirements in our projects led us to
develop a general model that integrates existing practices without
building a huge stack of technologies.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Christian Theune</dc:creator><pubDate>Wed, 03 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-03:europython-2013/batou-a-multi-componentenvironmentplatform-deployment-tool.html</guid><category>fabric</category><category>hosting</category><category>deploy</category><category>devops</category><category>integration</category><category>service-orchestration</category><category>deployment</category><category>best-practices</category><category>webapp</category><category>servers</category></item><item><title>Deployability of Python Web Applications</title><link>https://pyvideo.org/europython-2013/deployability-of-python-web-applications.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;When it comes to deploying web applications, it seems the Python and
Django world doesn’t exactly follows the Zen mantra of “There should be
one – and preferably only one – obvious way to do it”. This talk will
explain a deployment approach based on the &lt;a class="reference external" href="http://12factor.net/"&gt;Twelve-Factor
methodology&lt;/a&gt; that leverages standard Python and
system administration techniques.&lt;/p&gt;
&lt;p&gt;This approach allows easy deployments on various hosting environments
(PaaS or custom-build infrastructure), minimizes dev/prod divergence and
allows interoperability with non-python systems. It is particularly
suited for teams practicing continuous deployment.&lt;/p&gt;
&lt;p&gt;Most examples and techniques will be based on Django but they can easily
be adapted to other Python web frameworks. This talk targets DevOps
people and/or application developers.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Bruno Renié</dc:creator><pubDate>Tue, 02 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-02:europython-2013/deployability-of-python-web-applications.html</guid><category>django</category><category>deployment</category></item><item><title>Heroku: come deployare un'app Django in 10 minuti!</title><link>https://pyvideo.org/pycon-italia-2018/heroku-come-deployare-unapp-django-in-10-minuti.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Se sei stanco di occuparti di &lt;em&gt;load balancing&lt;/em&gt; , &lt;em&gt;routing&lt;/em&gt; e &lt;em&gt;cloud
monitoring&lt;/em&gt; e vorresti dedicarti solo a &lt;em&gt;lambda function&lt;/em&gt; , &lt;em&gt;list
comprehension&lt;/em&gt; o &lt;em&gt;class-based view&lt;/em&gt; allora questo è il talk che fa per
te.&lt;/p&gt;
&lt;p&gt;Heroku è la piattaforma PaaS ( &lt;em&gt;Platform as a Service&lt;/em&gt; ) che consente
agli sviluppatori di creare, eseguire e gestire applicazioni interamente
nel cloud. Ad essere fornito come servizio non c’è solo l’hardware, ma
anche la piattaforma che astrae l’hardware stesso e permette di
usufruire di funzionalità che consentono di ottenere bilanciamenti
automatici, gestione del deployment e altro ancora.&lt;/p&gt;
&lt;p&gt;Il vantaggio per l’utente è quello di concentrarsi solo ed
esclusivamente sullo sviluppo dell’applicazione senza perdersi
nell’analisi di problematiche legate all’ambiente in cui essa deve
essere distribuita ottenendo così la scalabilità e l’affidabilità
necessaria.&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;sabato 21 aprile&lt;/strong&gt; at 15:30 &lt;a class="reference external" href="/p3/schedule/pycon9/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sabatino Severino</dc:creator><pubDate>Sat, 21 Apr 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-04-21:pycon-italia-2018/heroku-come-deployare-unapp-django-in-10-minuti.html</guid><category>paas</category><category>continuous-integration</category><category>github</category><category>continuous-delivery</category><category>Python</category><category>pipeline</category><category>django</category><category>heroku</category><category>git</category><category>deployment</category><category>web development</category></item><item><title>Roboto Framework for Test Code Coverage for cloud services.</title><link>https://pyvideo.org/pycon-italia-2017/roboto-framework-for-test-code-coverage-for-cloud-services.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Test case design is an important phase of software testing life cycle
where test cases are identified. Designing test cases for cloud
solutions requires a different approach from traditional application
oriented testing. The quality which is multidimensional will include
more attributes like network resiliency, fault recovery, reliability and
availability when it comes to cloud-based solutions. If such aspects
when not encompassed through test development framework, it will lead to
high chances of defect leakage in production in an agile mode of
delivery. We propose a strategy to design the test cases which traverse
across different levels of testing to find gaps using the Roboto
framework with Python. The solution provides the teams and the product
owners to get a picture of what is getting tested and how much of
coverage is done. The data can be used in team release discussions to
build confidence in the tests that gets executed as part of that
release. &lt;a class="reference external" href="https://github.com/robotframework/robotframework"&gt;https://github.com/robotframework/robotframework&lt;/a&gt; Testing
performed for features in a product is diverse and can be widely
categorized into functional, non-functional like reliability, fault
injections etc. Though developing test cases for functional changes is
achievable, arriving at test cases for non-functional requirements is
challenging in the given two-week sprint cycle of agile, and so leads to
defect leakage. Some vital modules in a project would have been running
in production for years and would have different sets of teams working
at different periods. Quantifying test code coverage and quality only by
a number of test cases per feature does not suffice as testing is
multidimensional and has to span across different levels. Measuring and
improving the test code coverage is the challenge generally faced by
product teams.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">khushbu parakh</dc:creator><pubDate>Sun, 09 Apr 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-04-09:pycon-italia-2017/roboto-framework-for-test-code-coverage-for-cloud-services.html</guid><category>quality-assurance</category><category>Functional Testing</category><category>Python</category><category>testing</category><category>robustness</category><category>integration</category><category>automation</category><category>framework</category><category>deployment</category><category>google-cloud</category></item><item><title>Infrastructure as Code with Terraform</title><link>https://pyvideo.org/pycon-italia-2017/infrastructure-as-code-with-terraform.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;ul class="simple"&gt;
&lt;li&gt;what is infrastructure as code&lt;/li&gt;
&lt;li&gt;best practices&lt;/li&gt;
&lt;li&gt;benefits&lt;/li&gt;
&lt;li&gt;introduction to terraform&lt;/li&gt;
&lt;li&gt;practical demo for a sample flask application&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/tramwaj29/iac-with-terraform"&gt;https://github.com/tramwaj29/iac-with-terraform&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Justyna Janczyszyn</dc:creator><pubDate>Sat, 08 Apr 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-04-08:pycon-italia-2017/infrastructure-as-code-with-terraform.html</guid><category>infrastructure</category><category>devops</category><category>provisioning</category><category>terraform</category><category>deployment</category><category>infrastructure-as-code</category></item><item><title>Building a Production Quality Project in Python</title><link>https://pyvideo.org/pytexas-2015/building-a-production-quality-project-in-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This presentation focuses on a variety of tools which can help Python
developers rapidly create production worthy projects by drawing on my
own experience in creating and deploying a Python project called Arsenal
at Rackspace in the space of a few months.&lt;/p&gt;
&lt;p&gt;Arsenal is an open-source service designed to manage and direct a cache
of operating system images on bare-metal nodes. The goal being to
drastically reduce the time it takes to provision a node for
end-users/customers of a bare-metal cloud.&lt;/p&gt;
&lt;p&gt;Links to information about arsenal:
&lt;a class="reference external" href="https://github.com/rackerlabs/arsenal"&gt;https://github.com/rackerlabs/arsenal&lt;/a&gt;
&lt;a class="reference external" href="https://arsenal.readthedocs.org/en/latest/"&gt;https://arsenal.readthedocs.org/en/latest/&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Clifton Houck</dc:creator><pubDate>Fri, 09 Oct 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-10-09:pytexas-2015/building-a-production-quality-project-in-python.html</guid><category>deployment</category><category>devops</category></item><item><title>Django Deployment for the Average Bloke</title><link>https://pyvideo.org/chipy/django-deployment-for-the-average-bloke.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Deploying a Django/Pinax site on the following stack: Linux Debian Lenny
Apache mod_wsgi PostgreSQL.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This is the config you want to use if you don't know what you want to
use. You don't need to make any choices, you don't have to do any
research, and you don't even need to read the docs if you don't want to.
And as an added bonus, I show how to wget a vm image to deploy into with
network ports exposed. It is very much like working with a hosting
provider like Slice Host, and it makes a great framework for testing
server installs.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Carl Karsten</dc:creator><pubDate>Thu, 13 Jan 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-01-13:chipy/django-deployment-for-the-average-bloke.html</guid><category>apache</category><category>chipy</category><category>deployment</category><category>mod_wsgi</category><category>pinax</category><category>postgresql</category><category>web</category></item><item><title>Deploying Django</title><link>https://pyvideo.org/djangocon-us-2009/djangocon-2009--deploying-django.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Deploying Django&lt;/p&gt;
&lt;p&gt;Presented by Brian Rosner&lt;/p&gt;
&lt;p&gt;Talks about deploying django sites.&lt;/p&gt;
&lt;p&gt;[VIDEO HAS ISSUES: mostly in left speaker]&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Brian Rosner</dc:creator><pubDate>Tue, 08 Sep 2009 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2009-09-08:djangocon-us-2009/djangocon-2009--deploying-django.html</guid><category>deploy</category><category>deployment</category><category>djangocon</category><category>djangocon2009</category></item><item><title>Large Problems in Django, Mostly Solved</title><link>https://pyvideo.org/djangocon-us-2010/djangocon-2010--large-problems-in-django--mostly-.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk is based on my popular series of blog posts highlighting
applications from the community. I will highlight some of the best
applications that the Django/Python community has put together, talk
about places that are lacking, and talk about what these popular
applications have in common.&lt;/p&gt;
&lt;p&gt;Part 1&lt;/p&gt;
&lt;p&gt;I have written a series of blog posts about &amp;quot;Large problems&amp;quot; in the
community, and how they have been solved by members of our community
with reusable apps. Previously I have covered:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Delayed Execution&lt;/li&gt;
&lt;li&gt;Search&lt;/li&gt;
&lt;li&gt;APIs&lt;/li&gt;
&lt;li&gt;Documentation&lt;/li&gt;
&lt;li&gt;Database Migrations&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I will update my thoughts on these issues, as well as talking about a
couple of other new issues that I think that have been solved in a
decent way. These include:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Remote Command Execution&lt;/li&gt;
&lt;li&gt;Debugging in Development&lt;/li&gt;
&lt;li&gt;Continuous Integration&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Part 2&lt;/p&gt;
&lt;p&gt;In this part I will highlight issues that are still headaches for the
Community. These are places where there is a good chance for growth for
third party apps, and places where I have personally found some friction
in my development. A couple examples of this are:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Deployment&lt;/li&gt;
&lt;li&gt;Class Based Views / Thread Safety&lt;/li&gt;
&lt;li&gt;Debugging Production Environments&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Part 3&lt;/p&gt;
&lt;p&gt;From the above applications that are well done, what makes a popular
reusable app? This won't be my thoughts, but more looking at apps that
have been successful and trying to see what they have in common. A good
app and a good reusable app are necessarily different, and I think it
will be interesting to look at what traits make reusable apps popular.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://ericholscher.com/tag/largeproblems/"&gt;Large problems posts&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Eric Holscher</dc:creator><pubDate>Wed, 08 Sep 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-09-08:djangocon-us-2010/djangocon-2010--large-problems-in-django--mostly-.html</guid><category>api</category><category>ci</category><category>continuousintegration</category><category>databasemigrations</category><category>debugging</category><category>delayedexecutions</category><category>deployment</category><category>djangocon</category><category>djangocon2010</category><category>documentation</category><category>migrations</category><category>safety</category><category>search</category></item><item><title>Deployment, Daemons and Datacenters</title><link>https://pyvideo.org/djangocon-us-2011/djangocon-2011--deployment--daemons-and-datacente.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Deployment, Daemons, and Datacenters&lt;/p&gt;
&lt;p&gt;Presented by Andrew Godwin&lt;/p&gt;
&lt;p&gt;A tour through the systems that power &lt;a class="reference external" href="http://ep.io/"&gt;ep.io&lt;/a&gt;, the
Python hosting platform, from the array of daemons powering the system,
to how redundancy is set up, and also covering general best practices
for hosting Django sites yourself.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrew Godwin</dc:creator><pubDate>Mon, 05 Sep 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-09-05:djangocon-us-2011/djangocon-2011--deployment--daemons-and-datacente.html</guid><category>daemons</category><category>datacenters</category><category>deployment</category><category>djangocon</category><category>djangocon2011</category><category>epio</category><category>ep.io</category><category>hosting</category></item><item><title>Real world Django deployment using Chef</title><link>https://pyvideo.org/djangocon-us-2011/djangocon-2011--real-world-django-deployment-usin.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Real world Django deployment using Chef&lt;/p&gt;
&lt;p&gt;Presented by Noah Kantrowitz&lt;/p&gt;
&lt;p&gt;Chef, a popular configuration management tool, is gaining momentum in
the Django community. Learn how to deploy Django sites using Chef, be
they one server or a thousand.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Noah Kantrowitz</dc:creator><pubDate>Mon, 05 Sep 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-09-05:djangocon-us-2011/djangocon-2011--real-world-django-deployment-usin.html</guid><category>chef</category><category>deployment</category></item><item><title>New beauty in Camelot</title><link>https://pyvideo.org/europython-2011/new-beauty-in-camelot.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Erik Janssens,Jeroen Dierckx - 22 June 2011 in &amp;quot;Track
Ravioli &amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Camelot is a Python framework that leverages SQLAlchemy and QT to build
rich desktop applications. The model - view definition used was inspired
by the Django Admin interface. Some see it as a replacement for MS
Access, but it's underlying libraries allow much more advanced features.&lt;/p&gt;
&lt;p&gt;In this talk we will focus on the changes and new features that were
introduced in Camelot and more importantly, how they can be used in your
applications. Those features range from Matplotlib chart integration and
new types of actions to displaying custom SQLAlchemy queries in a table
view.&lt;/p&gt;
&lt;p&gt;We will share our experiences with large scale deployment of Python and
Camelot applications to the desktop of the user. In a number of case
studies we will point out the mistakes we made and how they were
corrected.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Erik Janssens</dc:creator><pubDate>Thu, 21 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-21:europython-2011/new-beauty-in-camelot.html</guid><category>deployment</category><category>django</category><category>framework</category><category>matplotlib</category><category>qt</category><category>sqlalchemy</category></item><item><title>Pitfalls of Continuous Deployment</title><link>https://pyvideo.org/europython-2011/pitfalls-of-continuous-deployment.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] David Cramer - 22 June 2011 in &amp;quot;Track Ravioli &amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Practice iterative development like the pros. Release sooner, faster,
and more often.&lt;/p&gt;
&lt;p&gt;Continuous deployment (and testing) has started to become a reality for
many companies. It brings to light one of the many problems that face
large product teams, but also creates some of its own. This talk will
focus on the pros and cons of continuous deployment, how DISQUS switched
from the recurring release cycle to continuous releases, as well as
providing tips and arguments for adopting it in your workplace.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">David Cramer</dc:creator><pubDate>Thu, 21 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-21:europython-2011/pitfalls-of-continuous-deployment.html</guid><category>deployment</category><category>disqus</category></item><item><title>Developing cutting-edge applications with PyQt</title><link>https://pyvideo.org/europython-2011/developing-cutting-edge-applications-with-pyqt.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Lorenzo Mancini,Matteo Bertozzi - 23 June 2011 in
&amp;quot;Training Pizza Margherita &amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;(Presented with Matteo Bertozzi)&lt;/p&gt;
&lt;p&gt;Python's high development speed and Qt's gargantuan feature set allow
for comfortable development of complex desktop applications. Still, what
does one need to do to best leverage this awesome combination? And more
importantly, what crucial advantages exist to decide its adoption in
favour of more traditional tecniques?&lt;/p&gt;
&lt;p&gt;During this training, we'll start from a white canvas and show how to
develop a desktop application using the best tools Qt offers. You'll
learn how to compose complex GUIs from basic building blocks, and how to
use QPainter, one of the most advanced 2D painting systems in the open
source world. Qt's Webkit integration will be discussed, along with the
recent Qt Quick technology, which allows one to create smooth and fluid
user interfaces. Qt's solution to common deployment problems, like
handling a serious translation workflow, will be presented. At the end,
we'll package our PyQt application so it's ready to be distributed for
download.&lt;/p&gt;
&lt;p&gt;Walk away with a sound understanding of why you should choose PyQt for
your next desktop project.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lorenzo Mancini</dc:creator><pubDate>Wed, 20 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-20:europython-2011/developing-cutting-edge-applications-with-pyqt.html</guid><category>deployment</category><category>distributed</category><category>pyqt</category><category>qt</category></item><item><title>Best Practices for Python in the Cloud</title><link>https://pyvideo.org/europython-2011/best-practices-for-python-in-the-cloud.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Gisle Aas - 21 June 2011 in &amp;quot;Track Lasagne&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Abstract: Whether you’re an independent developer or development manager
in a large company, “the cloud” is on everyone’s mind. But just because
it’s in the cloud, doesn’t mean development and deployment is
effortless. The cloud presents infrastructure and development challenges
in a new way.&lt;/p&gt;
&lt;p&gt;In this presentation, ActiveState's Gisle Aas will share best practices
in building and deploying a Python-centric LAMP stack(s) on the cloud
for a range of web-based applications from simple Django site to HPC GPU
Clusters.&lt;/p&gt;
&lt;p&gt;Based on ActiveState’s experiences, Gisle will discuss the challenges
faced and lessons learned in building an infrastructure to deploy web
applications to the cloud with Python.&lt;/p&gt;
&lt;p&gt;You will learn about:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Which packages are critical for a secure, Python-centric LAMP stack
(and what it takes to build them)!&lt;/li&gt;
&lt;li&gt;Tips for developing, deploying, and scaling Python applicaitons in
the cloud&lt;/li&gt;
&lt;li&gt;How to use Python to connect and build infrastructure to support and
manage your deployment&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Gisle Aas</dc:creator><pubDate>Mon, 18 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-18:europython-2011/best-practices-for-python-in-the-cloud.html</guid><category>cloud</category><category>deploy</category><category>deployment</category><category>django</category><category>gpu</category><category>hpc</category><category>infrastructure</category><category>lamp</category><category>packages</category><category>scaling</category><category>web</category></item><item><title>Data Plumbing with Python</title><link>https://pyvideo.org/europython-2011/data-plumbing-with-python.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Pavlos Christoforou - 21 June 2011 in &amp;quot;Track Ravioli&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Point Nine provides operations outsourcing and support to large and
complex financial institutions.&lt;/p&gt;
&lt;p&gt;As part of our day to day responsibilities we are required to process
our client's trading activity which generally involves receiving data in
various formats and through various protocols, apply transformations,
validations and enrichment processes and distribute the resulting data
to various third parties, in short Data Plumbing.&lt;/p&gt;
&lt;p&gt;The goal of this talk is to introduce the audience to the (vast) field
of financial data processing which we believe presents a tremendous
opportunity for python and it's community and provide a brief overview
of Point Nine's deployment of Python as the main framework for all data
plumbing activities.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Pavlos Christoforou</dc:creator><pubDate>Mon, 18 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-18:europython-2011/data-plumbing-with-python.html</guid><category>community</category><category>deployment</category><category>framework</category><category>processing</category></item><item><title>Deploying a Django application using Juju</title><link>https://pyvideo.org/kiwi-pycon-2014/deploying-a-django-application-using-juju.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Juju is a service orchestration tool for deploying services into public
or private clouds. I will talk about how I deployed my Django
application using Juju.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Juju is a service orchestration tool for deploying services into public
or private clouds. The services that Juju deploys are described in
Charms. A Charm should use the &amp;quot;best practice&amp;quot; for deploying the
service. In the case of Django, this would be using gunicorn and nginx.
I explain how the postgresql charm communicates with the django charm,
and how I had to change my application's settings and urls to work with
the django charm. The application that is deployed is a &amp;quot;proprietary&amp;quot;
app, and as such, the deployment of the application itself is done with
another charm. The interaction between the subordinate charms and the
principal django charm are explained, and how the data is exchanged
between the charms. As well as the deployment story, I also explain how
application updates are deployed very simply.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Tim Penhey</dc:creator><pubDate>Sun, 14 Sep 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-09-14:kiwi-pycon-2014/deploying-a-django-application-using-juju.html</guid><category>deploying</category><category>deployment</category><category>django</category><category>juju</category></item><item><title>PyConAU 2010: whoops I deployed again - new ways to get your app in the cloud</title><link>https://pyvideo.org/pycon-au-2010/pyconau-2010--whoops-i-deployed-again---new-ways-.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;whoops I deployed again - new ways to get your app in the cloud&lt;/p&gt;
&lt;p&gt;Presented by Dylan Jay (PretaWeb)&lt;/p&gt;
&lt;p&gt;A overview of new tools for deploying python based applications to
servers including cloud inferstructure such as Amazon Ec2.&lt;/p&gt;
&lt;p&gt;The talk will cover Ian Bicking's Silver Lining, zc.buildout, Fabric and
hostout. This talk will focus on how to get your first web app hosted
easily.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dylan Jay</dc:creator><pubDate>Sat, 26 Jun 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-06-26:pycon-au-2010/pyconau-2010--whoops-i-deployed-again---new-ways-.html</guid><category>deployment</category><category>hostout</category><category>pyconau</category><category>pyconau2010</category><category>silverlining</category><category>web</category><category>wsgi</category><category>zc.buildout</category></item><item><title>Towards continuous deployment with Django</title><link>https://pyvideo.org/pycon-au-2012/towards-continuous-deployment-with-django.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;It's no secret that python is fantastic when it comes to rapid
prototyping and development. This talk covers continuous deployment.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;It's no secret that python is fantastic when it comes to rapid
prototyping and development. When it comes to deploying a web
application, the road to glory isn't as well paved and navigating the
array of techniques and tools can be daunting.&lt;/p&gt;
&lt;p&gt;This talk will address the advantages of continuous deployment, the
success factors involved and the tools available, mainly focusing on
experiences with Django web development.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Roger Barnes</dc:creator><pubDate>Wed, 22 Aug 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-08-22:pycon-au-2012/towards-continuous-deployment-with-django.html</guid><category>deployment</category><category>django</category></item><item><title>dev --+ qual --+ prod</title><link>https://pyvideo.org/pycon-de-2012/dev-qual-prod.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Es wird das Konzept vorgestellt, wie man Projekte strukturieren kann um
von der ersten Minute an eine mind. dreistufige Landschaft (Entwicklung,
Qualitätssicherung, Produktiv) vorzusehen.&lt;/p&gt;
&lt;p&gt;Die zentrale Rolle spielen getrennte Systemnutzer um isolierte
Umgebungen zu erstellen. Dieser Ansatz ist für Python-Server-Anwendungen
wie z.B Django- Anwendungen sehr gut anwendbar.&lt;/p&gt;
&lt;p&gt;Seit einiger Zeit setzen wir getrennte Linux-Nutzer anstatt virtualenv
ein. Das zentrale Merkmal, ist der Name des Systemnutzers:&lt;/p&gt;
&lt;p&gt;Namensschema des Linux-Nutzers: app_customer_stage&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;app ist die Anwendung (zB cms)&lt;/li&gt;
&lt;li&gt;customer ist ein Kürzel für den Kunden&lt;/li&gt;
&lt;li&gt;stage ist d, q, p (dev, qual, prod).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Beispiel:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;mycms_customer1_d Entwicklungssystem&lt;/li&gt;
&lt;li&gt;mycms_customer1_q Qualitätssicherung&lt;/li&gt;
&lt;li&gt;mycms_customer1_p Produktivsystem&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In einer zentralen Datei wird konfiguriert auf welchem Host welches
System läuft. Jedes System kennt das nächste System (Bsp dev-&amp;gt;qual), so
dass ein Abgleich relativ einfach möglich ist.&lt;/p&gt;
&lt;p&gt;Das simple System hat viele Vorteile, die ich in dem Vortrag vorstellen
möchte.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Thomas Güttler</dc:creator><pubDate>Thu, 01 Nov 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-11-01:pycon-de-2012/dev-qual-prod.html</guid><category>deployment</category><category>linux</category><category>virtualenv</category></item><item><title>batou - multi-(host component environment version platform) deployment</title><link>https://pyvideo.org/pycon-de-2012/batou-multi-host-component-environment-vers.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Batou ist ein Open-Source Werkzeug um mit Python das Deployment von
komplexen Anwendungen zu beschreiben und zu automatisieren.&lt;/p&gt;
&lt;p&gt;Das Konzept besteht darin eine passende allgemeine Modellsprache in Form
einer API zu definieren. Dabei stehen Wiederverwendung, Toleranz
gegenüber unbekannten Zuständen und Ausdrucksstärke im Vordergrund.&lt;/p&gt;
&lt;p&gt;Der Vortrag zeigt den Werdegang und unsere Motivation zur Entwicklung
von batou auf und zeigt die konzeptionellen Stärken anhand praktischer
Beispiele.&lt;/p&gt;
&lt;p&gt;Wir haben in den letzten Jahren eine Reihe großer und kleiner Projekte
beim Deployment betreut.&lt;/p&gt;
&lt;p&gt;Im Rahmen unserer Plattform &amp;quot;gocept.net&amp;quot; bereiten wir unsere Erfahrungen
in Dokumentation und offenen Werkzeugen auf und haben daher batou
entwickelt.&lt;/p&gt;
&lt;p&gt;batou ist sowohl in Python geschrieben und nutzt Python um Deployment-
Strukturen zu beschreiben.&lt;/p&gt;
&lt;p&gt;Wir möchten Batou gerne vorstellen um unsere Erfahrungen weiterzugeben
und (auch auf den Sprints) anzuregen sich mit dem Werkzeug
auseinanderzusetzen, Feedback zu bekommen, und daran weiterzuarbeiten.&lt;/p&gt;
&lt;p&gt;Beispiel-Code des Werkzeugs:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://code.gocep%20t.com/hg/public/batou/file/920e606b2959"&gt;https://code.gocept.com/hg/public/batou/file/920e606b2959&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Beispiel einer Deployment-Beschreibung:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://bitbucket.org/ctheune/sprin%20tsite"&gt;https://bitbucket.org/ctheune/sprintsite&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Christian Theune</dc:creator><pubDate>Wed, 31 Oct 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-10-31:pycon-de-2012/batou-multi-host-component-environment-vers.html</guid><category>deployment</category></item><item><title>batou - multi(component|host|environment|.*) deployment</title><link>https://pyvideo.org/pycon-de-2013/batou-multicomponenthostenvironment-depl.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;batou ist ein Werkzeug um das Deployment für server-basierte Anwendungen
zu automatisieren.&lt;/p&gt;
&lt;p&gt;Es basiert auf vielen Ideen von Puppet, Fabric und anderen Werkzeugen,
bietet aber einen spezifische Modellierungsansatz, der das Konzept von
&amp;quot;Konvergenz&amp;quot; einfach umsetzbar macht.&lt;/p&gt;
&lt;p&gt;In dem Vortrag möchte ich erläutern warum Deployments zu automatisieren
schwierig ist, was &amp;quot;Konvergenz&amp;quot; dazu beitragen kann um es einfach zu
machen, und wie das in Batou ganz praktisch aussieht.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Christian Theune</dc:creator><pubDate>Thu, 17 Oct 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-10-17:pycon-de-2013/batou-multicomponenthostenvironment-depl.html</guid><category>administration</category><category>deployment</category><category>konvergenz</category></item><item><title>Komponenten einer komplexen Web-Applikation</title><link>https://pyvideo.org/pycon-de-2013/komponenten-einer-komplexen-web-applikation.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Komplexe Web-Applikationen bestehen aus mehr als einem Webserver, einer
Datenbank und etwas Code. Dieser Vortrag gibt einen Überblick über die
typischen Bausteine wie Celery als Task Queue, Haystack für
Volltextsuche, Sentry als Log-Diensten und automatischem Deployment mit
Fabric und Salt. Die vorgestellte Komponenten werden anhand einer
Django-Applikation erläutert, sind jedoch zum Großteil auch mit anderen
Frameworks nutzbar.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Daniel Hepper</dc:creator><pubDate>Wed, 16 Oct 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-10-16:pycon-de-2013/komponenten-einer-komplexen-web-applikation.html</guid><category>celery</category><category>deployment</category><category>django</category><category>elasticsearch</category><category>fabric</category><category>haystack</category><category>salt</category><category>search</category><category>sentry</category><category>solr</category></item><item><title>Von der Entwicklung bis zum Deployment mit standardisierten und konfigurierbaren Laufzeitumgebungen</title><link>https://pyvideo.org/pycon-de-2013/von-der-entwicklung-bis-zum-deployment-mit-standa.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Es wird gezeigt, wie Laufzeitumgebungen (Betriebssystem, Services wie
Datenbank oder Webserver, Python, Applikation) standardisiert
konfiguriert und automatisiert erzeugt werden können. Somit wird
sichergestellt, dass eine Applikation immer in definierten und
weitgehend identischen Umgebungen ausgeführt wird - unabhängig von den
verschiedenen Phasen des Lebenszyklus (Entwicklung, Test, Produktion
etc.) und persönlichen Präferenzen und Know-how der involvierten
Personen. Hierfür eingesetzt werden: Vagrant, Virtualbox,Puppet,
Virtualenv.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Juergen Schackmann</dc:creator><pubDate>Tue, 15 Oct 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-10-15:pycon-de-2013/von-der-entwicklung-bis-zum-deployment-mit-standa.html</guid><category>bootstrapping</category><category>deployment</category><category>django</category><category>puppet</category><category>vagrant</category><category>virtualenv</category></item><item><title>Designing to Scale: The Story of ShootQ (#5)</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--designing-to-scale--the-story-of-shoo.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Designing to Scale: The story of ShootQ&lt;/p&gt;
&lt;p&gt;Jonathan LaCour (ShootQ)&lt;/p&gt;
&lt;p&gt;ShootQ is a web-based studio management solution for professional
photography studios, designed to automate and simplify the task of
running a small business. In this talk, Jonathan LaCour, the CTO of
ShootQ, hopes to share his experience designing a web application that
can scale up to meet the demands of a rapidly growing customer base. The
talk will cover a variety of topics including TurboGears 2.0, WSGI,
horizontal and vertical scaling, database replication, load balancing,
deployment, and more.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Unknown</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--designing-to-scale--the-story-of-shoo.html</guid><category>deployment</category><category>loadbalancing</category><category>pycon</category><category>pycon2010</category><category>replication</category><category>scaling</category><category>turbogears</category><category>wsgi</category></item><item><title>Continuous deployment</title><link>https://pyvideo.org/pycon-us-2011/pycon-2011--continuous-deployment.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Continuous deployment&lt;/p&gt;
&lt;p&gt;Presented by Laurens Van Houtven&lt;/p&gt;
&lt;p&gt;This talk is about continuous deployment practices and tools, lessons
learned from implementing it, and putting them into perspective. The
goal is to give other people tips and pointers for applying these ideas
themselves.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;Continuous deployment is the practice of putting the latest revision of
software into production use all the time, as opposed to working towards
larger releases. The important difference is iteration time: whereas
large software packages produce new software in timeframes of years or
months, continuous deployment teams typically put new code into
production in timeframes of hours or less.&lt;/p&gt;
&lt;p&gt;The practice is slowly attracting a small but growing group of loyal
followers, just like continuous integration over the past few years and
test- driven development did before that. They can be explained in terms
of being natural extensions of each other. Like TDD and CI, CD gets eyed
somewhat suspiciously (and rightfully so: skeptical analysis is great),
but the undersigned believes there's a legitimate advantage for many
applications.&lt;/p&gt;
&lt;p&gt;Many years ago, TTD and testing tools in general were mostly ad-hockery.
Now, with many different production-quality testing tools, this has
become unthinkable. Similarly, continuous integration was something
other people did for a long time, but now we have tools such as Buildbot
and Hudson. Continuous deployment is still somewhat in the early stage
in terms of ready-to-use tools, but it's likely that we'll see a similar
evolution.&lt;/p&gt;
&lt;p&gt;Here's a rough outline of what I plan to cover:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;a short history of people developed software&lt;/li&gt;
&lt;li&gt;from the recent models to CD (sort of a working definition of CD
here)&lt;/li&gt;
&lt;li&gt;when is it a good idea? pros/cons&lt;/li&gt;
&lt;li&gt;requirements &amp;amp; battle plan for applying CD in an existing development
environment (and possibly code base)&lt;/li&gt;
&lt;li&gt;an overview of existing tools and how they work together&lt;/li&gt;
&lt;li&gt;caveat emptors, known pitfalls (deployment and recovery strategies go
here, since most implementations figure out they need them after
stuff blows up)&lt;/li&gt;
&lt;li&gt;questions! (hopefully lots of people who've tried or are thinking
about implementing something similar -- like I said, there are a lot
of people implementing it but not too many ideas being bounced
around)&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Laurens Van Houtven</dc:creator><pubDate>Fri, 11 Mar 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--continuous-deployment.html</guid><category>cd</category><category>ci</category><category>continuousdeployment</category><category>deployment</category><category>pycon</category><category>pycon2011</category><category>softwaredevelopment</category><category>tdd</category><category>workflow</category></item><item><title>Deploying Applications with zc.buildout</title><link>https://pyvideo.org/pycon-us-2011/pycon-2011--deploying-applications-with-zc-buildo.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Deploying Applications with zc.buildout&lt;/p&gt;
&lt;p&gt;Presented by JIm Fulton&lt;/p&gt;
&lt;p&gt;This talk described using zc.buildout for application deployment to
production environments. It presents building self-contained source
releases, and using these to create RPM distributions. It shows how to
use buildout to configure services, including web servers, cron jobs,
monitoring and so on. Finally, it presents ongoing efforts to deploy
applications that span many machines.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;We build and deploy large Python applications for our customers. These
applications are built from many component parts including Python
packages and non-python applications and tools. Assembling these pieces
can be a tedious and error-prone process. The zc.buildout (Buildout)
package was developed to automate this process.&lt;/p&gt;
&lt;p&gt;As our use of buildout has matured, we've integrated it with system
packaging tools and developed techniques for managing software
deployemnt and service configuration. I'll provide a detailed
description of the techniques and tools used.&lt;/p&gt;
&lt;p&gt;Outline:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Buildout&lt;ul&gt;
&lt;li&gt;Motivation&lt;/li&gt;
&lt;li&gt;History&lt;/li&gt;
&lt;li&gt;Configuration files&lt;/li&gt;
&lt;li&gt;Recipes&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Deployment pholisophy: keeping software and service configuration
separate&lt;/li&gt;
&lt;li&gt;System Packaging&lt;ul&gt;
&lt;li&gt;Making self-contained source releases (tar balls)&lt;/li&gt;
&lt;li&gt;Creating system packages from source releases with RPM&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Service configuration -- system build outs&lt;ul&gt;
&lt;li&gt;Scope: Python processes, cron, log rotation, run scripts,
monitoring, etc.&lt;/li&gt;
&lt;li&gt;Place files in &amp;quot;standard&amp;quot; locations.&lt;/li&gt;
&lt;li&gt;Run by root&lt;/li&gt;
&lt;li&gt;examples&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Meta recipes&lt;ul&gt;
&lt;li&gt;Goal: provide only essential information.&lt;/li&gt;
&lt;li&gt;Recipes provide basic level of abstraction.&lt;/li&gt;
&lt;li&gt;Buildout provides basic tools to build on these abstractions, but
these tools only scale so far.&lt;/li&gt;
&lt;li&gt;Buildout configuration language is &lt;em&gt;not&lt;/em&gt; a programming language.&lt;/li&gt;
&lt;li&gt;Meta-recipes provide a much more powerful way to build high-level
abstractions over basic recipes.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Next step: Make me a ...&lt;ul&gt;
&lt;li&gt;Model based definition of complete systems spanning multiple hosts
with interlocking services&lt;/li&gt;
&lt;li&gt;Automatic management of resources&lt;/li&gt;
&lt;li&gt;Implemented with ssh, system packaging tools (e.g. yum) and
buildout-based tools.&lt;/li&gt;
&lt;li&gt;Four levels of abstraction&lt;/li&gt;
&lt;li&gt;Current status&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">JIm Fulton</dc:creator><pubDate>Fri, 11 Mar 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--deploying-applications-with-zc-buildo.html</guid><category>deployment</category><category>pycon</category><category>pycon2011</category><category>zc.buildout</category></item></channel></rss>