<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_mark-smith.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2019-10-05T00:00:00+00:00</updated><entry><title>Make You An Async For Great Good!</title><link href="https://pyvideo.org/pygotham-2019/make-you-an-async-for-great-good.html" rel="alternate"></link><published>2019-10-05T00:00:00+00:00</published><updated>2019-10-05T00:00:00+00:00</updated><author><name>Mark Smith</name></author><id>tag:pyvideo.org,2019-10-05:pygotham-2019/make-you-an-async-for-great-good.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;AsyncIO seems like magic, but it's (mostly) not! I'm going to write the core
of asyncio from scratch. I will explain how asyncio actually works in pure
python, building up from generators and a custom event loop.&lt;/p&gt;
&lt;p&gt;This talk will demystify the &lt;cite&gt;async&lt;/cite&gt; and &lt;cite&gt;await&lt;/cite&gt; keywords, and help
developers write better asynchronous code!&lt;/p&gt;
</summary></entry><entry><title>More Than You Ever Wanted To Know About Python Functions</title><link href="https://pyvideo.org/pycon-uk-2019/more-than-you-ever-wanted-to-know-about-python-functions.html" rel="alternate"></link><published>2019-09-13T00:00:00+00:00</published><updated>2019-09-13T00:00:00+00:00</updated><author><name>Mark Smith</name></author><id>tag:pyvideo.org,2019-09-13:pycon-uk-2019/more-than-you-ever-wanted-to-know-about-python-functions.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Let's talk about functions, methods, callables and closures - what they are, what you can do with them ... and what's inside. Afterwards you'll know more about callables, along with techniques both practical and so extreme your colleagues will never let you merge them to master.&lt;/p&gt;
</summary></entry><entry><title>It's Pythons All The Way Down: Python Types &amp; Metaclasses Made Simple</title><link href="https://pyvideo.org/pycon-au-2019/its-pythons-all-the-way-down-python-types-metaclasses-made-simple.html" rel="alternate"></link><published>2019-08-03T00:00:00+00:00</published><updated>2019-08-03T00:00:00+00:00</updated><author><name>Mark Smith</name></author><id>tag:pyvideo.org,2019-08-03:pycon-au-2019/its-pythons-all-the-way-down-python-types-metaclasses-made-simple.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Don't be afraid of metaclasses! This talk will explain how, once you've grasped basic types, classes and inheritance, Python's advanced language features such as descriptors and metaclasses are just within your reach.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://2019.pycon-au.org/talks/its-pythons-all-the-way-down-python-types-metaclasses-made-simple"&gt;https://2019.pycon-au.org/talks/its-pythons-all-the-way-down-python-types-metaclasses-made-simple&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Sat Aug  3 10:30:00 2019 at C3.6&lt;/p&gt;
</summary></entry><entry><title>Publish a (Perfect) Python Package on PyPI</title><link href="https://pyvideo.org/europython-2019/publish-a-perfect-python-package-on-pypi.html" rel="alternate"></link><published>2019-07-10T00:00:00+00:00</published><updated>2019-07-10T00:00:00+00:00</updated><author><name>Mark Smith</name></author><id>tag:pyvideo.org,2019-07-10:europython-2019/publish-a-perfect-python-package-on-pypi.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Always wanted to publish a package on PyPI, but didn't know where to
start? This talk is for you! Starting with nothing, we'll build a
package and publish it on PyPI using current best practices.&lt;/p&gt;
&lt;p&gt;Learn how to structure your project and your code. Discover what goes in
your &lt;tt class="docutils literal"&gt;requirements.txt&lt;/tt&gt; and your &lt;tt class="docutils literal"&gt;setup.py&lt;/tt&gt;. Ensure your code will
work in different on different platforms! Document your code so people
won't ask you loads of questions! Finally, learn how avoid doing any of
this yourself.&lt;/p&gt;
&lt;p&gt;This talk will cover:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Why should you package your code for PyPI?&lt;/li&gt;
&lt;li&gt;How to structure your project and your code, including why you need a
&lt;tt class="docutils literal"&gt;src&lt;/tt&gt; folder!&lt;/li&gt;
&lt;li&gt;Discover what goes in your &lt;tt class="docutils literal"&gt;Pipfile&lt;/tt&gt; and your &lt;tt class="docutils literal"&gt;setup.py&lt;/tt&gt;, and
why. Learn the difference between installing your library to use it,
and installing it to develop on it.&lt;/li&gt;
&lt;li&gt;Write tests for your project, and run them using Tox.&lt;/li&gt;
&lt;li&gt;Ensure your code will work in different on different platforms with
Continuous Integration!&lt;/li&gt;
&lt;li&gt;Document your code so people won't ask you loads of questions!&lt;/li&gt;
&lt;li&gt;How to actually get your code on PyPI using Twine.&lt;/li&gt;
&lt;li&gt;Finally, learn how avoid doing any of this yourself (or avoid doing
it twice) using CookieCutter templates.&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="Best Practice"></category><category term="Packaging"></category><category term="Python 3"></category></entry><entry><title>More Than You Ever Wanted To Know About Python Functions</title><link href="https://pyvideo.org/pycon-ireland-2018/more-than-you-ever-wanted-to-know-about-python-functions.html" rel="alternate"></link><published>2018-11-10T00:00:00+00:00</published><updated>2018-11-10T00:00:00+00:00</updated><author><name>Mark Smith</name></author><id>tag:pyvideo.org,2018-11-10:pycon-ireland-2018/more-than-you-ever-wanted-to-know-about-python-functions.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;What exactly are functions? Let's talk about functions, methods, callables and closures - what they are, what you can give them, what they can give you, what you can do with them ... and what's inside. You probably think you already know everything about functions, but you probably don't! By the end of this talk, I guarantee you'll know more about callables than when you walked in, along with techniques both practical and so extreme your colleagues will never let you merge them to master. (This guarantee is legally non-binding and cannot be redeemed in any way.)&lt;/p&gt;
</summary><category term="functions"></category></entry><entry><title>Publish a (Perfect) Python Package on PyPI</title><link href="https://pyvideo.org/pycon-ireland-2018/publish-a-perfect-python-package-on-pypi.html" rel="alternate"></link><published>2018-11-10T00:00:00+00:00</published><updated>2018-11-10T00:00:00+00:00</updated><author><name>Mark Smith</name></author><id>tag:pyvideo.org,2018-11-10:pycon-ireland-2018/publish-a-perfect-python-package-on-pypi.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Always wanted to publish a package on PyPI, but didn't know where to start? This talk is for you! Starting with nothing, we'll build a package and publish it on PyPI using current best practices. By the end of this talk, you'll be so comfortable packaging projects you won't avoid writing &lt;cite&gt;setup.py&lt;/cite&gt; files any more! Maybe you'll even start writing new code just so you can publish it on PyPI!&lt;/p&gt;
</summary><category term="PyPi"></category></entry><entry><title>When the __future__ becomes the present; Dropping Python 2 support in a commercial client</title><link href="https://pyvideo.org/pycon-italia-2018/when-the-__future__-becomes-the-present-dropping-python-2-support-in-a-commercial-client.html" rel="alternate"></link><published>2018-04-20T00:00:00+00:00</published><updated>2018-04-20T00:00:00+00:00</updated><author><name>Mark Smith</name></author><id>tag:pyvideo.org,2018-04-20:pycon-italia-2018/when-the-__future__-becomes-the-present-dropping-python-2-support-in-a-commercial-client.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Nexmo recently decided to refactor our Python client library to be
Python 3-only. Learn why we made this decision, the advantages (and
disadvantages) that come along with it, and how we’re monitoring and
helping our users with the migration.&lt;/p&gt;
&lt;p&gt;Since Python 3.4, Python has jumped forward, adding many features that
are not available in Python 2.7. Maintaining Python 2 compatibility
means either avoiding these new language features or using backport
libraries that provide an approximation. Neither provided the best
experience for our users.&lt;/p&gt;
&lt;p&gt;In this talk, we’ll also discuss how we support users of our legacy
library, the benefits that the new library offers, and our experience of
developing a customer-facing Python library with the latest Python
language and core library.&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;venerdì 20 aprile&lt;/strong&gt; at 12:30 &lt;a class="reference external" href="/p3/schedule/pycon9/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>How To Publish A Package On PyPI</title><link href="https://pyvideo.org/pycon-uk-2018/how-to-publish-a-package-on-pypi.html" rel="alternate"></link><published>2018-09-16T00:00:00+00:00</published><updated>2018-09-16T00:00:00+00:00</updated><author><name>Mark Smith</name></author><id>tag:pyvideo.org,2018-09-16:pycon-uk-2018/how-to-publish-a-package-on-pypi.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Always wanted to publish a package on PyPI, but didn't know where to
start?&lt;/div&gt;
&lt;div class="line"&gt;This talk is for you! Starting with nothing, we'll build a package and
publish it on PyPI using current best practices.&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Publishing a package on PyPI used to be a cargo cult. (And often still
is!) Instead of copying and pasting from other projects' &lt;tt class="docutils literal"&gt;setup.py&lt;/tt&gt;
without fully understanding what's happening, discover how to package
your code for PyPI from scratch - then learn how to avoid doing any of
this completely! (But now know you'll know what's going on).&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;em&gt;Why&lt;/em&gt; should you package your code for PyPI?&lt;/li&gt;
&lt;li&gt;How to structure your project and your code, including why you need a
&lt;tt class="docutils literal"&gt;src&lt;/tt&gt; folder!&lt;/li&gt;
&lt;li&gt;Discover what goes in your &lt;tt class="docutils literal"&gt;Pipfile&lt;/tt&gt; and your &lt;tt class="docutils literal"&gt;setup.py&lt;/tt&gt;, and
why. Learn
the difference between installing your library to use it, and
installing it to develop on it.&lt;/li&gt;
&lt;li&gt;Write tests for your project, and run them using Tox.&lt;/li&gt;
&lt;li&gt;Ensure your code will work in different on different platforms with
Continuous Integration!&lt;/li&gt;
&lt;li&gt;Document your code so people won't ask you loads of questions!&lt;/li&gt;
&lt;li&gt;How to actually get your code on PyPI using Twine. Configure your
machine
for PyPI and test your package release on the PyPI test server.&lt;/li&gt;
&lt;li&gt;Finally, learn how avoid doing any of this yourself (or avoid doing
it
twice) using CookieCutter templates.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;By the end of this talk, you'll be so comfortable packaging projects you
won't avoid writing &lt;tt class="docutils literal"&gt;setup.py&lt;/tt&gt; files any more! Maybe you'll even start
writing new code just so you can publish it on PyPI!&lt;/p&gt;
</summary></entry><entry><title>More Than You Ever Wanted To Know About Python Functions</title><link href="https://pyvideo.org/europython-2018/more-than-you-ever-wanted-to-know-about-python-functions.html" rel="alternate"></link><published>2018-07-26T00:00:00+00:00</published><updated>2018-07-26T00:00:00+00:00</updated><author><name>Mark Smith</name></author><id>tag:pyvideo.org,2018-07-26:europython-2018/more-than-you-ever-wanted-to-know-about-python-functions.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;What exactly &lt;em&gt;are&lt;/em&gt; functions? Let’s talk about functions, methods,
callables and closures - what they are, what you can give them, what
they can give you, what you can do with them … and what’s inside.&lt;/p&gt;
&lt;p&gt;You probably think you already know everything about functions, but you
probably don’t!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Input &amp;amp; Output&lt;/strong&gt;: How do you get things in and out of functions? I’ll
cover parameters and the myriad of ways they can be specified, provided
and accessed - including helpful hints to avoid common mistakes! I’ll
cover return values, briefly, along with variable scopes and exceptions.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Closures&lt;/strong&gt; : What are they, how do they work and how they can affect
memory usage.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Methods&lt;/strong&gt; : How does a method differ from a function, when are they
made, how do they work (where does &lt;tt class="docutils literal"&gt;self&lt;/tt&gt; come from?) and how to
access the function inside every method.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;**magic**&lt;/strong&gt; :Make your own callables from any object!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Introspection&lt;/strong&gt; : Using modern Python techniques, what can you find
out about a function, and what can you do with that information?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bytecode&lt;/strong&gt; : What happens if you open up a function and look at its
insides? Can you change it and put it back together again? (Spoiler:
Yes, you can.)&lt;/p&gt;
&lt;p&gt;By the end of this talk, I guarantee* you’ll know more about callables
than when you walked in, along with techniques both practical and so
extreme your colleagues will never let you merge them to master.&lt;/p&gt;
&lt;p&gt;(*This guarantee is legally non-binding and cannot be redeemed in any
way.)&lt;/p&gt;
</summary></entry><entry><title>How To Publish A Package On PyPI</title><link href="https://pyvideo.org/pycon-au-2018/how-to-publish-a-package-on-pypi.html" rel="alternate"></link><published>2018-08-26T00:00:00+00:00</published><updated>2018-08-26T00:00:00+00:00</updated><author><name>Mark Smith</name></author><id>tag:pyvideo.org,2018-08-26:pycon-au-2018/how-to-publish-a-package-on-pypi.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Starting with nothing, we'll build a package and publish it on PyPI using current best practices! Learn how to structure, document and test your project on different platforms. Discover the difference between &lt;cite&gt;setup.py&lt;/cite&gt; and &lt;cite&gt;Pipfile&lt;/cite&gt;. Finally, use CookieCutter to avoid doing it twice (or even once)!&lt;/p&gt;
</summary></entry><entry><title>Protecting Your Users from Change: Pythonic Refactoring</title><link href="https://pyvideo.org/pycon-ireland-2017/protecting-your-users-from-change-pythonic-refactoring.html" rel="alternate"></link><published>2017-10-21T00:00:00+00:00</published><updated>2017-10-21T00:00:00+00:00</updated><author><name>Mark Smith</name></author><id>tag:pyvideo.org,2017-10-21:pycon-ireland-2017/protecting-your-users-from-change-pythonic-refactoring.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;So you've released a library! Now you need to maintain it. You want to add features, restructure the code, fix bugs, and maybe improve the library's usability. Your users just want their code to carry on working. That's okay! This talk will cover techniques in both code and project management to allow you to keep your code moving forwards without breaking your users' code. It is aimed at developers with a little experience of writing libraries in Python, and will cover some intermediate subjects like function decorators and magic methods.&lt;/p&gt;
</summary><category term="refactoring"></category></entry><entry><title>Protecting Your Users From Change: Pythonic Refactoring</title><link href="https://pyvideo.org/pycon-uk-2017/protecting-your-users-from-change-pythonic-refactoring.html" rel="alternate"></link><published>2017-10-29T15:00:00+01:00</published><updated>2017-10-29T15:00:00+01:00</updated><author><name>Mark Smith</name></author><id>tag:pyvideo.org,2017-10-29:pycon-uk-2017/protecting-your-users-from-change-pythonic-refactoring.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;So you've released a library! Now you need to maintain it. You want to add features, restructure the code, fix bugs, and maybe improve the library's usability. Your users just want their code to carry on working. That's okay!&lt;/p&gt;
&lt;p&gt;This talk will cover techniques in both code and project management to allow you to keep your code moving forwards without breaking your users' code. It is aimed at developers with a little experience of writing libraries in Python, and will cover some intermediate subjects like function decorators and magic methods.&lt;/p&gt;
</summary></entry><entry><title>Pythonic Refactoring: Protecting Your Users From Change</title><link href="https://pyvideo.org/europython-2017/pythonic-refactoring-protecting-your-users-from-change.html" rel="alternate"></link><published>2017-07-14T00:00:00+00:00</published><updated>2017-07-14T00:00:00+00:00</updated><author><name>Mark Smith</name></author><id>tag:pyvideo.org,2017-07-14:europython-2017/pythonic-refactoring-protecting-your-users-from-change.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;So you've released a library! Now you need to maintain it. You want
to add features, restructure the code, fix bugs, and maybe improve
the library's usability. Your users just want their code to carry on
working. That's okay!&lt;/p&gt;
&lt;p&gt;This talk will cover techniques in both code and project management
to allow you to keep your code moving forwards without breaking your
users' code. It is aimed at developers with a little experience of
writing libraries in Python, and will cover some intermediate
subjects like function decorators and magic methods.&lt;/p&gt;
&lt;p&gt;Refactoring in Python is a mixed bag - on the one hand you have
powerful tools like the &amp;#64;property decorator, __dunder__ methods, and
even metaclasses. On the other hand, because Python code has no
concept of private or protected like some other languages, it can be
difficult to know what your public interface even is.&lt;/p&gt;
&lt;p&gt;I'll talk about how to identify your public interface, and make that
clear to your users. I'll cover how to structure your tests so you
know when you've broken your public interface. I'll discuss how to
use some of Python's language features to trick your users into
thinking your code hasn't changed at all (except for those brilliant
new features you've just added!). And finally, I'll cover how you
know it's time to break backwards compatibility and how to break it
to your users.&lt;/p&gt;
</summary></entry><entry><title>A Deep-Dive Into Python Classes</title><link href="https://pyvideo.org/europython-2011/a-deep-dive-into-python-classes.html" rel="alternate"></link><published>2011-07-15T00:00:00+00:00</published><updated>2011-07-15T00:00:00+00:00</updated><author><name>Mark Smith</name></author><id>tag:pyvideo.org,2011-07-15:europython-2011/a-deep-dive-into-python-classes.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Mark Smith - 22 June 2011 in &amp;quot;Track Lasagne&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk aims to lift the lid on the system that governs how types
behave in Python - everything except Metaclasses.&lt;/p&gt;
&lt;p&gt;The talk answers questions such as:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;What is a class, and how can we think of them?&lt;/li&gt;
&lt;li&gt;How are classes instantiated?&lt;/li&gt;
&lt;li&gt;How are attributes obtained from a class or an instance?&lt;/li&gt;
&lt;li&gt;Why do I get a different thing when accessing a method via its class
instead of its instance?&lt;/li&gt;
&lt;li&gt;How do the classmethod and staticmethod decorators work?&lt;/li&gt;
&lt;li&gt;How can I modify classes and instances after they've been
initialised?&lt;/li&gt;
&lt;li&gt;Does any of this allow me to do any clever tricks?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Attendees should understand at least the basics of object oriented
programming in Python. This talk doesn't aim to explain
object-orientation, o-o design, or how Python represents objects in C.&lt;/p&gt;
</summary><category term="decorators"></category></entry><entry><title>Writing Awesome Command-Line Programs in Python</title><link href="https://pyvideo.org/europython-2014/writing-awesome-command-line-programs-in-python.html" rel="alternate"></link><published>2014-07-24T00:00:00+00:00</published><updated>2014-07-24T00:00:00+00:00</updated><author><name>Mark Smith</name></author><id>tag:pyvideo.org,2014-07-24:europython-2014/writing-awesome-command-line-programs-in-python.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Command-Line programs can have a lot to them - usually more than you
think, yet often suffer from a lack of thought.&lt;/p&gt;
&lt;p&gt;This is a tour through how to structure your code, tools in the standard
library and some 3rd party libraries. Take your command-line programs to
the next level!&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python is a great language for writing command-line tools - which is why
so much of Linux is secretly written in Python these days.
Unfortunately, what starts as a simple script can quickly get out of
hand as more features are added and more people start using it!&lt;/p&gt;
&lt;p&gt;The talk will consist of a tour through various useful libraries and
practical code showing how each can be used, and include advice on how
to best structure simple and complex command-line tools.&lt;/p&gt;
&lt;p&gt;Things to consider when writing command-line apps:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Single-file vs Multiple-file&lt;/li&gt;
&lt;li&gt;Standard library only vs. 3rd party requirements&lt;/li&gt;
&lt;li&gt;Installation - setup.py vs. native packaging&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The different parts of a command-line program:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Option Parsing:&lt;ul&gt;
&lt;li&gt;Libraries: getopt, optparse, argparse, docopt&lt;/li&gt;
&lt;li&gt;Sub-commands&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Configuration:&lt;ul&gt;
&lt;li&gt;Formats: Ini file, JSON, YAML&lt;/li&gt;
&lt;li&gt;Where should it be stored (cross-platform);&lt;/li&gt;
&lt;li&gt;Having multiple configuration files, and allowing user config to
override global config&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Output:&lt;ul&gt;
&lt;li&gt;Colour - colorama&lt;/li&gt;
&lt;li&gt;Formatting output for the user&lt;/li&gt;
&lt;li&gt;Formatting output for other programs&lt;/li&gt;
&lt;li&gt;How do you know when your output is being piped to another
program?&lt;/li&gt;
&lt;li&gt;Managing logging and verbosity&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Managing streamed input&lt;/li&gt;
&lt;li&gt;Exit values: What are the conventions?&lt;/li&gt;
&lt;li&gt;Interactive apps - REPL&lt;/li&gt;
&lt;li&gt;Structuring a bunch of programs/commands around a shared codebase.&lt;/li&gt;
&lt;li&gt;Command-line frameworks: clint, compago &amp;amp; cliff&lt;/li&gt;
&lt;li&gt;Testing command-line apps&lt;/li&gt;
&lt;li&gt;Writing command-line tools in Python 3 vs Python 2&lt;/li&gt;
&lt;/ul&gt;
</summary></entry></feed>