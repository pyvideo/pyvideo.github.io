<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org - web service</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Sun, 27 Oct 2024 00:00:00 +0000</lastBuildDate><item><title>Django + GraphQL Rapid MVP Development Strategy</title><link>https://pyvideo.org/pycon-korea-2022/django-graphql-rapid-mvp-development-strategy.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Shareholder management software ZUZU is a product of a kind that has never existed in the world. It is a SaaS software that helps companies handle tasks related to shareholders, stocks, and stock options. You may be wondering why this service is a product of a kind that has never existed in the world. In order to create software like ZUZU, it must be implemented in accordance with domestic circumstances based on laws such as the Commercial Act and the Capital Market Act. In addition, the range of users who use the software is very diverse. It is a very challenging task to create a service that can be used by all of them, including the company's CEO, shareholders, and employees who have received stock options, as well as lawyers, legal advisors, and tax accountants who handle related tasks. It is a very challenging task to create a service that can be used by all of them. It is really difficult for startups to find developers these days. In order to develop software with complex requirements like the above with limited development resources, we have been developing and releasing an MVP (Minimum Viable Product), receiving feedback, and continuously improving it. I would like to share that experience in this presentation. The first part of the presentation briefly introduces ZUZU's development stack, Django and GraphQL. We will discuss the security that we paid special attention to while using Django and GraphQL, and the performance issues that we have experienced through trial and error. In the latter part of the presentation, I will share my experience on how I set up the development team structure and R&amp;amp;R for rapid MVP development, what efforts I made to effectively handle issues in situations where the development team resources were insufficient, and how I wrote tests since product verification is important due to the nature of the product.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jeong Jin-kyung</dc:creator><pubDate>Sun, 02 Oct 2022 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2022-10-02:/pycon-korea-2022/django-graphql-rapid-mvp-development-strategy.html</guid><category>PyCon Korea 2022</category><category>Web Service</category></item><item><title>Django ORM that understands and uses SQL</title><link>https://pyvideo.org/pycon-korea-2022/django-orm-that-understands-and-uses-sql.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Most web developers manage data persistence using ORMs such as SQLAlchemy and Django ORM rather than writing SQL directly. ORM connects objects and relational databases. Using ORM, developers can perform DML in programming languages ​​without writing SQL. Since data is handled through object-oriented code, code readability is improved and productivity is enhanced. Also, since the database and code base are loosely connected through abstraction, it can flexibly respond to infrastructure changes. In addition, ORM provides additional features such as lazy-loading and caching to reduce unnecessary queries. However, ORM does not have only advantages. The more complex the data being queried, the more inconvenient ORM can be. This is because the limitations of ORM prevent the full functionality of SQL from being utilized. ORMs that are used without properly understanding the operating principles create very inefficient queries. Therefore, it is very important to understand the characteristics of SQL and know the operating principles of ORM so that you can query correctly. Let's learn how to properly use Django ORM by understanding the characteristics of SQL.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shin Dong-hyun</dc:creator><pubDate>Sun, 02 Oct 2022 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2022-10-02:/pycon-korea-2022/django-orm-that-understands-and-uses-sql.html</guid><category>PyCon Korea 2022</category><category>Web Service</category></item><item><title>The Journey from Monolithic to MSA</title><link>https://pyvideo.org/pycon-korea-2022/the-journey-from-monolithic-to-msa.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;If last year's announcement focused on the technical details centered around the big event of the MSA transition, this time we would like to share with many people the journey of how Soomgo, which was a monolithic service, faced difficulties in the early days of its service and how it transitioned to MSA as the service grew.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jo Min-woo</dc:creator><pubDate>Sun, 02 Oct 2022 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2022-10-02:/pycon-korea-2022/the-journey-from-monolithic-to-msa.html</guid><category>PyCon Korea 2022</category><category>Web Service</category></item><item><title>Designing a ReBAC architecture for security in Django</title><link>https://pyvideo.org/pycon-korea-2022/designing-a-rebac-architecture-for-security-in-django.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;As the structural complexity of web services increases, RBAC / ReBAC structure is often adopted for easy role and permission management. Our service is no exception. Since the need for many roles and permission management was anticipated, we decided to use ReBAC from an SSDLC-ish perspective from the initial planning stage and defined requirements such as Table-less role assignment, Role explosion, Hierarchical object graph, and Row-level access control. After checking the status of libraries in the existing Django ecosystem, we introduce the direction and implementation we approached each problem to satisfy the requirements defined above, and introduce the journey to create django-entity-rbac, an open-source library that solves them.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Seo Min-kyo and Kang Jin-oh</dc:creator><pubDate>Sat, 01 Oct 2022 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2022-10-01:/pycon-korea-2022/designing-a-rebac-architecture-for-security-in-django.html</guid><category>PyCon Korea 2022</category><category>Web Service</category></item><item><title>Serverless Python Web Services</title><link>https://pyvideo.org/pycon-korea-2022/serverless-python-web-services.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this session, I will briefly introduce serverless Python web services. First, I will briefly review the meaning of serverless, and then I will explain the reasons why my current company built a serverless service (limited development resources, irregular server traffic patterns, cost reduction) and how I operate and deploy Python web services in a serverless environment. In particular, I will introduce “Zappa,” an open source Python library that helps you conveniently build and deploy serverless Python web services. I will start by creating a very simple Django example project, and then show you the process of setting up “Zappa” and deploying it to an AWS serverless environment (API Gateway, Lambda, etc.). You will be able to experience deploying a Python web service serverless very easily with a single command through “Zappa.” Also, if you are considering building a Python-based serverless environment, I hope this session will be of some help to you!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Choi Woojin</dc:creator><pubDate>Sat, 01 Oct 2022 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2022-10-01:/pycon-korea-2022/serverless-python-web-services.html</guid><category>PyCon Korea 2022</category><category>Web Service</category></item><item><title>Upgrading to Django 4.2</title><link>https://pyvideo.org/pycon-korea-2024/upgrading-to-django-42.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this session, Kim Kwang-hyun shares practical tips and lessons learned from upgrading a Django project to version 4.2. The talk covers challenges encountered during the upgrade process, how to handle deprecated features, and strategies to ensure a smooth migration for production services. This session will be valuable for developers planning a Django version upgrade.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kim Kwang-hyun</dc:creator><pubDate>Sun, 27 Oct 2024 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2024-10-27:/pycon-korea-2024/upgrading-to-django-42.html</guid><category>PyCon Korea 2024</category><category>web service</category></item><item><title>EAV Modeling and CQRS with Django</title><link>https://pyvideo.org/pycon-korea-2024/eav-modeling-and-cqrs-with-django.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk explains how EAV modeling was implemented using Django and MySQL to build a no-code tool. It also discusses the performance limitations of EAV and how improvements were achieved by applying ideas from CQRS, sharing modeling experiences for complex services.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sang-hun Moon</dc:creator><pubDate>Sat, 26 Oct 2024 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2024-10-26:/pycon-korea-2024/eav-modeling-and-cqrs-with-django.html</guid><category>PyCon Korea 2024</category><category>web service</category></item></channel></rss>