<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/event_pyohio-2019.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2019-07-28T16:15:00+00:00</updated><entry><title>Is This Your Card? Computer Vision for Playing Card Recognition</title><link href="https://pyvideo.org/pyohio-2019/is-this-your-card-computer-vision-for-playing-card-recognition.html" rel="alternate"></link><published>2019-07-28T16:15:00+00:00</published><updated>2019-07-28T16:15:00+00:00</updated><author><name>Steve Crow</name></author><id>tag:pyvideo.org,2019-07-28:pyohio-2019/is-this-your-card-computer-vision-for-playing-card-recognition.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Computer Vision aims to teach computers to interact with the visual
world. It has applications navigation, automated inspection, assisting
the visually impaired, and so much more. In this talk, I will explain
and demonstrate how you can use Computer Vision to locate and identify a
playing card in a live video feed.&lt;/p&gt;
&lt;p&gt;&amp;quot;Pick a card, any card,&amp;quot; the magician prompts you fanning out a deck of
cards. You select a card, note its value, and hand it back to the
magician. They do some sleight of hand, make the card disappear into the
deck, and then make it reappear. You confirm that it is, indeed, your
original card. The magician moves on and you get to go back to enjoying
your dinner.&lt;/p&gt;
&lt;p&gt;Where is the real magic? Is it in the magician's ability to make a card
reappear? Or, is it something that many of us take for granted each and
every day? In the very instant you glance at a card, you're able to take
in details without even thinking about it.&lt;/p&gt;
&lt;p&gt;Computer Vision aims to teach computers to interact with the visual
world. It has applications in navigation, automated inspection, medical
image process, and so much more.&lt;/p&gt;
&lt;p&gt;In this talk I will do the following:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Introduce the field of Computer Vision.&lt;/li&gt;
&lt;li&gt;Demonstrate how to manipulate a webcam video feed and pre-process the
video to perform Canny Edge Detection.&lt;/li&gt;
&lt;li&gt;Use these edges to isolate a playing card image and, eventually,
identify which playing card is being shown.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;No prior knowledge of Computer Vision or Machine Learning is necessary.&lt;/p&gt;
</summary></entry><entry><title>Refactor Yourself</title><link href="https://pyvideo.org/pyohio-2019/refactor-yourself.html" rel="alternate"></link><published>2019-07-28T16:15:00+00:00</published><updated>2019-07-28T16:15:00+00:00</updated><author><name>Esther B. Gotfryd</name></author><id>tag:pyvideo.org,2019-07-28:pyohio-2019/refactor-yourself.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Do you sometimes feel like a pile of legacy code? Do you dread
refactoring yourself into a &amp;quot;new hotness,” due to the insurmountable
amount of work it may take? Do you want to break free, but are unsure of
where to start? Look no further, as this session will embark on a
journey to refactor you, one red- green test at a time, starting with
the highest priority issues first.&lt;/p&gt;
&lt;p&gt;We all have been there (or witnessed it in someone else): glassy-eyed,
glaring into many open screens, fingers rushing through multiple lines
of code, energy drink of some sort by your side, and possibly snacks
that were dug out of the pantry (which should have been disposed of long
ago). You are now propelled into a sleepless night — and hopefully,
victory by the time the sun comes up. As you sit there trying to solve
yet another complex problem, you become keenly aware of the fuzzy
sensation in your brain, the fatigue in your body, the somewhat weird
noises in your stomach, and your general lack of capacity to process
what it is you came here to do. In this talk, we will walk through
concepts of sleep hygiene, eating habits, digestive concerns, body
aches, strains, and pains, mood concerns, and how they all affect your
ability to function. We will discuss how to examine your recent
behavior, prioritize any symptoms, what to tackle first, and how to
persevere in the long run.&lt;/p&gt;
</summary></entry><entry><title>Deep Learning Like a Viking: Building Convolutional Neural Networks with Keras</title><link href="https://pyvideo.org/pyohio-2019/deep-learning-like-a-viking-building-convolutional-neural-networks-with-keras.html" rel="alternate"></link><published>2019-07-28T15:15:00+00:00</published><updated>2019-07-28T15:15:00+00:00</updated><author><name>Guy Royse</name></author><id>tag:pyvideo.org,2019-07-28:pyohio-2019/deep-learning-like-a-viking-building-convolutional-neural-networks-with-keras.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this session, we are going to build a Convolution Neural Network to
recognize hand-written runes from the Younger Futhark. We'll be using
Keras to write easy to understand Python code that creates and trains
the neural network to do this. We'll wire this up to a web application
using Flask and some client-side JavaScript so you can write some runes
yourself and see if it recognizes them.&lt;/p&gt;
&lt;p&gt;The Vikings came from the land of ice and snow, from the midnight sun,
where the hot springs flow. In addition to longships and bad attitudes,
they had a system of writing that we, in modern times, have dubbed the
Younger Futhark (or ᚠᚢᚦᚬᚱᚴ if you're a Viking). These sigils are more
commonly called runes and have been mimicked in fantasy literature and
role-playing games for decades.&lt;/p&gt;
&lt;p&gt;Of course, having an alphabet, runic or otherwise, solves lots of
problems. But, it also introduces others. The Vikings had the same
problem we do today. How were they to get their automated software
systems to recognize the hand- carved input of a typical boatman? Of
course, they were never able to solve this problem and were instead
forced into a life of burning and pillaging. Today, we have deep
learning and neural networks and can, fortunately, avoid such a fate.&lt;/p&gt;
&lt;p&gt;When we're done, you'll understand how Convolution Neural Networks work,
how to build your own using Python and Keras, and how to make it a part
of an application using Flask. Maybe you'll even try seeing what it
thinks of the Bluetooth logo?&lt;/p&gt;
</summary></entry><entry><title>Gathering Insights from Audio Data</title><link href="https://pyvideo.org/pyohio-2019/gathering-insights-from-audio-data.html" rel="alternate"></link><published>2019-07-28T15:15:00+00:00</published><updated>2019-07-28T15:15:00+00:00</updated><author><name>Ryan Bales</name></author><id>tag:pyvideo.org,2019-07-28:pyohio-2019/gathering-insights-from-audio-data.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Data comes in many shapes and sizes. In this session, we’ll look into
the process of converting audio files into valuable data.&lt;/p&gt;
&lt;p&gt;We’ll go over the different types of audio formats and how format and
type of audio plays a role in the quality of the outcome. We’ll go over
different transcription options available today and provide a demo of
converting audio data into text. We’ll review ways of storing and
searching text data at scale using open source tools and Natural
Language Processing (NLP) techniques. Going further we’ll explore
different techniques for building machine learning models on the
transcribed text data. You’ll leave this session with a firm
understanding of how to take audio data and convert it into actionable
insights.&lt;/p&gt;
</summary></entry><entry><title>Search Logs + Machine Learning = Auto-Tagged Inventory</title><link href="https://pyvideo.org/pyohio-2019/search-logs-machine-learning-auto-tagged-inventory.html" rel="alternate"></link><published>2019-07-28T15:15:00+00:00</published><updated>2019-07-28T15:15:00+00:00</updated><author><name>John Berryman</name></author><id>tag:pyvideo.org,2019-07-28:pyohio-2019/search-logs-machine-learning-auto-tagged-inventory.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Eventbrite is exploring a new machine learning approach that allows us
to harvest data from customer search logs and automatically tag events
based upon their content. The results have allowed us to provide users
with a better inventory browsing experience.&lt;/p&gt;
&lt;p&gt;For e-commerce applications, matching users with the items they want is
the name of the game. If they can't find what they want then how can
they buy anything?! Typically this functionality is provided through
search and browse experience. Search allows users to type in text and
match against the text of the items in the inventory. Browse allows
users to select filters and slice- and-dice the inventory down to the
subset they are interested in. But with the shift toward mobile devices,
no one wants to type anymore - thus browse is becoming dominant in the
e-commerce experience.&lt;/p&gt;
&lt;p&gt;But there's a problem! What if your inventory is not categorized?
Perhaps your inventory is user generated or generated by external
providers who don't tag and categorize the inventory. No categories and
no tags means no browse experience and missed sales. You could hire an
army of taxonomists and curators to tag items - but training and
curation will be expensive. You can demand that your providers tag their
items and adhere to your taxonomy - but providers will buck this new
requirement unless they see obvious and immediate benefit. Worse,
providers might use tags to game the system - artificially placing
themselves in the wrong category to drive more sales. Worst of all,
creating the right taxonomy is hard. You have to structure a taxonomy to
realistically represent how your customers think about the inventory.&lt;/p&gt;
&lt;p&gt;Eventbrite is investigating a tantalizing alternative: using a
combination of customer interactions and machine learning to
automatically tag and categorize our inventory. As customers interact
with our platform - as they search for events and click on and purchase
events that interest them - we implicitly gather information about how
our users think about our inventory. Search text effectively acts like a
tag and a click on an event card is a vote for that clicked event is
representative of that tag. We are able to use this stream of
information as training data for a machine learning classification
model; and as we receive new inventory, we can automatically tag it with
the text that customers will likely use when searching for it. This
makes it possible to better understand our inventory, our supply and
demand, and most importantly this allows us to build the browse
experience that customers demand.&lt;/p&gt;
&lt;p&gt;In this talk I will explain in depth the problem space and Eventbrite's
approach in solving the problem. I will describe how we gathered
training data from our search and click logs, and how we built and
refined the model. I will present the output of the model and discuss
both the positive results of our work as well as the work left to be
done. Those attending this talk will leave with some new ideas to take
back to their own business.&lt;/p&gt;
</summary></entry><entry><title>A Practical Introduction to Integer Linear Programming</title><link href="https://pyvideo.org/pyohio-2019/a-practical-introduction-to-integer-linear-programming.html" rel="alternate"></link><published>2019-07-28T14:30:00+00:00</published><updated>2019-07-28T14:30:00+00:00</updated><author><name>Igor Ferst</name></author><id>tag:pyvideo.org,2019-07-28:pyohio-2019/a-practical-introduction-to-integer-linear-programming.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Integer linear programming (ILP) is a powerful framework for solving
optimization problems related to scheduling, resource allocation,
vehicle routing, and many other areas. This talk will give a brief
introduction to ILP and show how to solve a real-world vehicle routing
problem using Google's open-source python library for ILP.&lt;/p&gt;
&lt;p&gt;How do airlines choose which planes service which routes? How does a
hospital optimize the shift schedule for hundreds of doctors and nurses?
How do you choose the optimal location for a group of fulfillment
centers, or oil derricks, or cell towers? These kinds of problems (and
many others!) can be solved with integer linear programming (ILP), a
powerful and decades-old framework for solving optimization problems. In
this talk we will give a brief introduction to ILP and describe it's
uses, strengths, and weaknesses. We will also show how to solve a
real-world vehicle routing problem using Google's open-source python
library for ILP. Trigger warning: this talk will contain high-school
level math.&lt;/p&gt;
</summary></entry><entry><title>Automated Discovery of Cancer Types from Genes</title><link href="https://pyvideo.org/pyohio-2019/automated-discovery-of-cancer-types-from-genes.html" rel="alternate"></link><published>2019-07-28T14:30:00+00:00</published><updated>2019-07-28T14:30:00+00:00</updated><author><name>Shruthi Ravichandran</name></author><id>tag:pyvideo.org,2019-07-28:pyohio-2019/automated-discovery-of-cancer-types-from-genes.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Cancer treatment often focuses on organ of origin, but different types
can occur in one organ. Gene expression provides valuable clues of the
cancer type, but studying data manually is difficult. Instead, we use
variational autoencoding, a deep learning method, to derive
36-dimensional feature space from 5000-dimensional gene space and show
its efficacy in classification and a TSNE visualization.&lt;/p&gt;
&lt;p&gt;While many other diseases are relatively predictable and treatable,
cancer is very diverse and unpredictable, making diagnosis, treatment,
and control extremely difficult. Traditional methods try to treat cancer
based on the organ of origin in the body, such as breast or brain
cancer, but this type of classification is often inadequate. If we are
able to identify cancers based on their gene expressions, there is hope
to find better medicines and treatment methods. However, gene expression
data is so vast that humans cannot detect such patterns. In this
project, the approach is to apply unsupervised deep learning to
automatically identify cancer subtypes. In addition, we seek to organize
patients based on their gene expression similarities, in order to make
the recognition of similar patients easier.&lt;/p&gt;
&lt;p&gt;While traditional clustering algorithms use nearest neighbor methods and
linear mappings, we use a recently developed technique called
Variational Autoencoding (VAE) that can automatically find clinically
meaningful patterns and therefore find clusters that have medicinal
significance. Python-based deep learning framework, Keras, offers an
elegant way of defining such a VAE model, training, and applying it. In
this work, the data of 11,000 patients across 32 different cancer types
was retrieved from The Cancer Genome Atlas. A VAE was used to compress
5000 dimensions into 100 clinically meaningful dimensions. Then, the
data was reduced to two dimensions for visualization using tSNE
(t-distributed stochastic neighbor embedding). Finally, an interactive
Javascript scatter plot was created. We noticed that the VAE
representation correctly clustered existing types, identified new
subtypes, and pointed to similarities across cancer types. This
interactive plot of patient data also allows the study of nearest
patients, and when a classification task was created to validate the
accuracy of the representation, it achieved 98% accuracy. The hope is
that this tool will allow doctors to quickly identify specific subtypes
of cancer found using gene expression and allow for further study into
treatments provided to other patients who had similar gene expressions.&lt;/p&gt;
</summary></entry><entry><title>Keeping Fun in Computing</title><link href="https://pyvideo.org/pyohio-2019/keeping-fun-in-computing.html" rel="alternate"></link><published>2019-07-28T14:30:00+00:00</published><updated>2019-07-28T14:30:00+00:00</updated><author><name>Dustin Ingram</name></author><id>tag:pyvideo.org,2019-07-28:pyohio-2019/keeping-fun-in-computing.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk, we'll explore how maintaining a sense of fun and whimsy in
science has a profound effect on discovery, innovation and progress.&lt;/p&gt;
&lt;p&gt;We'll also talk about some modern examples of how folks are ensuring
technology remains not-so-serious, including some examples specific to
the Python community, and how some famous thinkers followed their
natural curiosity to keep science fun, all to great success.&lt;/p&gt;
&lt;p&gt;And finally, we'll discuss how you and I can keep computing fun on a
day-to- day basis, maintain and nurture our natural curiosity, and just
be open to the unknown, all to the benefit of our field, those we work
with, and ourselves.&lt;/p&gt;
</summary></entry><entry><title>I Lost 25 Pounds Thanks to Python: Personal Data Analytics Using Pandas and Numpy</title><link href="https://pyvideo.org/pyohio-2019/i-lost-25-pounds-thanks-to-python-personal-data-analytics-using-pandas-and-numpy.html" rel="alternate"></link><published>2019-07-28T13:45:00+00:00</published><updated>2019-07-28T13:45:00+00:00</updated><author><name>Jack Bennett</name></author><id>tag:pyvideo.org,2019-07-28:pyohio-2019/i-lost-25-pounds-thanks-to-python-personal-data-analytics-using-pandas-and-numpy.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python provides a great set of built-in tools and third-party libraries
for data analysis. Modern personal devices like smart watches or phones
generate streams of data about body metrics, location, movement, and
more. I describe Python-based methods for extracting and analyzing data
from personal smart devices. I applied these methods to track and change
habits and behaviors to lose 25 pounds.&lt;/p&gt;
&lt;p&gt;Your smartwatch and smartphone provide reams of data about your body,
movement, behavior, health, and more. Python is an ideal language to use
for analyzing, transforming, and displaying this data. Furthermore,
numerous third-party packages such as NumPy, SciPy, pandas, and
matplotlib make this process easier, faster, more fun, and more
insightful than ever before.&lt;/p&gt;
&lt;p&gt;Furthermore, you can use these tools to get tangible results in your
life: for example, during the first few months of 2019, I used a set of
Python scripts operating on a combination of personal data sources to
modify my habits and behaviors to lose 25 pounds!&lt;/p&gt;
&lt;p&gt;In this talk we analyze several streams of data from Apple Watch and
iPhone to explore what we can learn from them, individually and in
combination. Data categories that we explore include:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;sleep&lt;/li&gt;
&lt;li&gt;fasting&lt;/li&gt;
&lt;li&gt;heart rate&lt;/li&gt;
&lt;li&gt;body weight&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We use simple but powerful techniques from signal processing, including
moving averages and filtering, to extract insight from the data.
Additionally, we investigate correlations between the different data
streams.&lt;/p&gt;
&lt;p&gt;Putting this methodology in place is fun, informative, and personally
rewarding. In particular, you can use it for habit tracking, to increase
self- knowledge and motivate useful habit change.&lt;/p&gt;
</summary></entry><entry><title>The Mediocre Programmer</title><link href="https://pyvideo.org/pyohio-2019/the-mediocre-programmer.html" rel="alternate"></link><published>2019-07-28T13:45:00+00:00</published><updated>2019-07-28T13:45:00+00:00</updated><author><name>Craig Maloney</name></author><id>tag:pyvideo.org,2019-07-28:pyohio-2019/the-mediocre-programmer.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Mediocre Programmers? What is that? Shouldn't we want to be great
programmers instead? In this talk we'll discuss what it means to be a
mediocre programmer. We'll consider the many pitfalls that may befall
you on your journey, from self-doubt to burnout, and share tips for how
to cope with the challenges of programming and when it might be time to
try something new.&lt;/p&gt;
&lt;p&gt;This talk is highlights from a book that I'm writing about the journey
of being a mediocre programmer. Beginners tend to get all of the love,
and advanced programmers get all of the respect and glory. But we don't
have much for helping intermediate programmers. We don't tend to
consider how difficult it can be to work through the exuberance of
beginning programming (where everything is new, fresh, and exciting)
into becoming better programmers. We're just expected to figure things
out on our own. This talk draws on my experiences of being a mediocre
programmer and gives advice and tips on how to become better
programmers. We'll cover how to find a group of traveling companions,
how to focus on learning one thing at a time, and how to deal with the
struggles of our emotions and self doubt. We'll also cover examining our
emotions and understanding when the spark that drew us to programming is
truly burned out.&lt;/p&gt;
</summary></entry><entry><title>The Riddle of the Intersphinx: Configuration and Cross-Reference Composition</title><link href="https://pyvideo.org/pyohio-2019/the-riddle-of-the-intersphinx-configuration-and-cross-reference-composition.html" rel="alternate"></link><published>2019-07-28T13:45:00+00:00</published><updated>2019-07-28T13:45:00+00:00</updated><author><name>Brian Skinn</name></author><id>tag:pyvideo.org,2019-07-28:pyohio-2019/the-riddle-of-the-intersphinx-configuration-and-cross-reference-composition.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Sphinx is a documentation generator used by the core Python
documentation and numerous other projects in the Python ecosystem.
Sphinx supports cross- references between documentation sets via its
‘intersphinx’ extension; however, proper configuration is not always
straightforward, and cross- references can be finicky to craft
correctly. This talk aims to demystify these riddles of intersphinx
usage.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.sphinx-doc.org"&gt;Sphinx&lt;/a&gt; is a documentation generator used
by the &lt;a class="reference external" href="https://docs.python.org/3/library/index.html"&gt;core Python
documentation&lt;/a&gt; and
numerous other packages such as
&lt;a class="reference external" href="https://docs.scipy.org/doc/scipy/reference/"&gt;SciPy&lt;/a&gt;,
&lt;a class="reference external" href="https://docs.djangoproject.com/en/"&gt;Django&lt;/a&gt;, and
&lt;a class="reference external" href="https://docs.blender.org/api/current/"&gt;Blender&lt;/a&gt;. Sphinx supports
cross- references across project boundaries via its &lt;a class="reference external" href="http://www.sphinx-doc.org/en/stable/ext/intersphinx.html#module-%20sphinx.ext.intersphinx"&gt;'intersphinx'
extension&lt;/a&gt;,
which uses data from an objects inventory file generated by Sphinx when
building HTML docs. However, configuration of the intersphinx mappings
to external documentation and correct composition of the
cross-references to specific external objects can both be challenging to
achieve, as the necessary reference syntax can vary in a non-obvious
way. Related messages/warnings issued during the Sphinx build process,
if enabled, are useful for identifying that a problem exists, but are
typically of minimal help in fixing the broken references. The &lt;a class="reference external" href="http://www.sphinx-%20doc.org/en/stable/markup/inline.html#role-any"&gt;:any:
role&lt;/a&gt;
is convenient for some cases, but is unhelpful when a given object name
is ambiguous (e.g., with the Python &lt;a class="reference external" href="https://docs.python.org/3/library/functions.html#max"&gt;max()
builtin&lt;/a&gt; versus
&lt;a class="reference external" href="https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.ndarray.max.html"&gt;numpy.ndarray.max&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;In this talk, I will describe a (mostly) systematic approach to
intersphinx configuration and usage, including locating the inventory
for an external docset; decoding and parsing the inventory to obtain the
information needed for a functional intersphinx reference; and
constructing the cross-reference from this information. As I hope to
demonstrate, using intersphinx is quite easy, as long as you know where
to look for key information, and what to do with it.&lt;/p&gt;
</summary></entry><entry><title>What's the Buzz with Machine Learning</title><link href="https://pyvideo.org/pyohio-2019/whats-the-buzz-with-machine-learning.html" rel="alternate"></link><published>2019-07-28T13:45:00+00:00</published><updated>2019-07-28T13:45:00+00:00</updated><author><name>Allison Bolen</name></author><id>tag:pyvideo.org,2019-07-28:pyohio-2019/whats-the-buzz-with-machine-learning.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Honeybee colonies throughout North America have declined precipitously
due to parasites, pesticides, and poor nutrition over the past two
decades. Monitoring hive health autonomously assists beekeeper efforts.
We developed a model which automatically detects events in bee hive
weight data assisting data collection efforts improving data quality for
future machine learning models to be developed.&lt;/p&gt;
&lt;p&gt;Pesticides, parasites, and poor nutrition, has led to the decline of
honeybee colonies throughout North America. A number of methods have
been proposed to combat the problem, with one here at Grand Valley State
University (GVSU) focusing on collecting hive weight data identifying
potential issues through data analytics. Currently, “citizen scientist”
beekeepers participate by collecting weight data from their hives
through the Bee Informed Partnership (BIP). Using Python3, Bokeh, SciKit
learn and Pandas we were able to produce a model using linear regression
that could predict patterns in weight data. Our short term goal for the
project was to create a model that could predict events and windows of
time where events could have occured to improve the data quality and
user engagement. The ultimate long term goal of this project is to
predict what kind of event occurred such as adding food to the hive,
harvesting honey, swarming events, and even parasite infestation.&lt;/p&gt;
</summary></entry><entry><title>gRPC and What, Why, How?</title><link href="https://pyvideo.org/pyohio-2019/grpc-and-what-why-how.html" rel="alternate"></link><published>2019-07-28T12:45:00+00:00</published><updated>2019-07-28T12:45:00+00:00</updated><author><name>John Roach</name></author><id>tag:pyvideo.org,2019-07-28:pyohio-2019/grpc-and-what-why-how.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;You might have overheard yet another acronym &amp;quot;gRPC&amp;quot; getting thrown when
talking about a replacement of REST or when mentioning microservices. In
this talk, we will be looking into what gRPC is, the reasons why you
would use it, how you would use it with Python and talk about
considerations for running gRPC services in production.&lt;/p&gt;
&lt;div class="section" id="grpc-and-what-why-how"&gt;
&lt;h4&gt;gRPC and what, why, how?&lt;/h4&gt;
&lt;p&gt;In this talk, we will be covering the following topics:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;What is gRPC?&lt;/strong&gt; We will be talking about serialization and what RPC
is in general. We will quickly skim over the history of previous
similar protocols for example: SOAP and CORBA. We will be talking
about the problem space these protocols tried to resolve and why it
slowly lost popularity.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We will be giving a quick overview of RESTful services and what has been
done so far to support RESTful services.&lt;/p&gt;
&lt;p&gt;We will look into the history of gRPC and how it came to be.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;Why use gRPC?&lt;/strong&gt; With a segway from the first topic we will be
looking into what gRPC is doing differently than the previous
generation RPC solutions and pros/cons against using REST.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;How can we use gRPC with Python?&lt;/strong&gt; Will showcase via live coding(or
code samples for backup) the creation of a 'Hello World' application.
We will write a simple proto file, generate code from it and start it
as a service and query the service using an open source tool. We will
also demonstrate how quick someone might create a client for the gRPC
service.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Production Considerations:&lt;/strong&gt; We will go over the most important
considerations when deciding to use gRPC in production. Such as build
tooling, testing, deployment and load management considerations.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Q &amp;amp;A:&lt;/strong&gt; Time allowing will open the floor to questions that people
might have&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary></entry><entry><title>Leave Your Inhibitions at the Database Connection</title><link href="https://pyvideo.org/pyohio-2019/leave-your-inhibitions-at-the-database-connection.html" rel="alternate"></link><published>2019-07-28T12:45:00+00:00</published><updated>2019-07-28T12:45:00+00:00</updated><author><name>Regina Compton</name></author><id>tag:pyvideo.org,2019-07-28:pyohio-2019/leave-your-inhibitions-at-the-database-connection.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;It is easy to cling to the familiar to avoid the unknown – even when
unfamiliar approaches better serve your work. My talk explores this
fact, specifically, by looking at the technical and emotional dimensions
of my less- than-easy journey from writing raw SQL to using the Django
ORM.&lt;/p&gt;
&lt;div class="section" id="abstract"&gt;
&lt;h4&gt;Abstract&lt;/h4&gt;
&lt;p&gt;Reconciling old assumptions with new approaches can be difficult. This
reconciliation can be especially difficult, when those assumptions and
approaches correspond with one’s emerging professional identity. A
musicologist turned developer, a Rubyist turned Pythonist, I know well
how intrapersonal tensions can shape (or hinder) approaches to writing
code. This talk confronts these tensions by describing the technical and
emotional dimensions of my less-than-easy journey from SQL to the Django
ORM.&lt;/p&gt;
&lt;p&gt;Django supports two basic approaches to interacting with a database: (1)
running queries with the Django database-mapper (more commonly described
as the “ORM”), and (2) performing raw SQL. My first Django projects
display a strong preference for the latter approach. I came to Django
with very limited coding experience. I started my job at a Python shop
as a freshly minted grad of Dev Bootcamp, where I had acquired some
knowledge of Ruby on Rails and its ORM, but also learned about the
possibilities and easeful-ness of SQL. I eschewed the Django ORM, in
part because of its seeming unknowableness, but mainly because SQL was a
familiar face in an unfamiliar land. In Django, I wrote SQL for simple
queries (selecting with a WHERE clause), moderately challenging ones
(joining multiple tables + ordering with CASE expressions), and
obscenely complex ones (subqueries + aggregate functions + string
manipulations). Whatever case, I generally found my queries to be
transparent, flexible, and friendly.&lt;/p&gt;
&lt;p&gt;It took over a year for me to appreciate that the Django ORM does clever
and astonishing things. I eventually found joy in annotating querysets
with derived values, and I stood in awe of the Prefetch object in
elaborate prefetch operations. The ORM, I learned, could produce clean
code and also bypass the performance loss that comes with transforming
SQL results into more amenable data types (e.g., namedtuple).&lt;/p&gt;
&lt;p&gt;In this talk, I will share some lessons in Django. But also, I will
suggest strategies for evaluating solid, familiar approaches and
replacing them with alternative ones.&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>Quickly Build Your Own Personal Website with Python</title><link href="https://pyvideo.org/pyohio-2019/quickly-build-your-own-personal-website-with-python.html" rel="alternate"></link><published>2019-07-28T12:45:00+00:00</published><updated>2019-07-28T12:45:00+00:00</updated><author><name>Vince Salvino</name></author><id>tag:pyvideo.org,2019-07-28:pyohio-2019/quickly-build-your-own-personal-website-with-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Haven't gotten around to building that personal blog? How about a
website for your side project? Python actually has a rich ecosystem of
web development tools that are easy to learn and fun to use! Bring your
laptop and follow along as we build a personal blog LIVE in this talk
using the pip package: CodeRed CMS (based on Wagtail and Django).&lt;/p&gt;
&lt;p&gt;Quick overview and pro/cons of common web development platforms and what
they offer:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;WordPress&lt;/li&gt;
&lt;li&gt;Static site generators&lt;/li&gt;
&lt;li&gt;Popular Python content management systems: plone, django-cms, and
Wagtail&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;What is &lt;a class="reference external" href="https://github.com/coderedcorp/coderedcms"&gt;CodeRed CMS&lt;/a&gt;?&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Open source pip package, based on Wagtail, Django, and Bootstrap CSS.&lt;/li&gt;
&lt;li&gt;Provides a nice interface and pre-built components to get you up and
running quickly with no code.&lt;/li&gt;
&lt;li&gt;Similar level of editing and configurability as WordPress.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Live tutorial: we will use CodeRed CMS to build a personal blog.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;First we will install the pip package and get a basic site set up
with zero coding required!&lt;/li&gt;
&lt;li&gt;Second we will use Python to write a little code for advanced
customization of our new website.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Attendees will leave this talk with an understanding of the current
state of python content management systems, and with knowledge on how to
build their own personal website or blog.&lt;/p&gt;
</summary></entry><entry><title>Surviving Without Python</title><link href="https://pyvideo.org/pyohio-2019/surviving-without-python.html" rel="alternate"></link><published>2019-07-28T12:45:00+00:00</published><updated>2019-07-28T12:45:00+00:00</updated><author><name>Andrew Knight</name></author><id>tag:pyvideo.org,2019-07-28:pyohio-2019/surviving-without-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python is such a popular language for good reason: Its principles are
strong. However, if Python is “the second-best language for everything”…
that means the &lt;em&gt;first-best&lt;/em&gt; is often chosen instead. Oh no! How can
Pythonistas survive a project or workplace without our favorite
language? Take a deep breath, because I’ll show you how to apply things
that make Python great to other software spaces.&lt;/p&gt;
&lt;p&gt;Python is not the only “fish in the sea” - there are several good
languages and frameworks out there that are awesome in their own right.
And as software people, whether we are web developers, data scientists,
or some other role, we probably won’t spend 100% of our work using
Python. It’s inevitable. Web dev relies on JavaScript. Data scientists
often use R and Scala. Backends frequently use C# and Java. Success as a
modern software engineer requires inter-domain proficiency.&lt;/p&gt;
&lt;p&gt;Personally, even though I love Python, I don’t use it daily at my full
time job. Nevertheless, Pythonic thinking guides my whole approach to
software. I will talk about how the things that make Python great can be
applied to non- Python places in three primary ways:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Principles from the Zen of Python&lt;/li&gt;
&lt;li&gt;Projects that partially use Python&lt;/li&gt;
&lt;li&gt;People who build strong, healthy community&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I will provide stories, statistics, examples, projects, side-by-side
code comparisons, and pictures to explain these points well. Python’s
values can make the software world a better place!&lt;/p&gt;
</summary></entry><entry><title>Sipping the Nectar of Amazon from the Serverless Chalice</title><link href="https://pyvideo.org/pyohio-2019/sipping-the-nectar-of-amazon-from-the-serverless-chalice.html" rel="alternate"></link><published>2019-07-27T16:30:00+00:00</published><updated>2019-07-27T16:30:00+00:00</updated><author><name>Ilya Gotfryd</name></author><id>tag:pyvideo.org,2019-07-27:pyohio-2019/sipping-the-nectar-of-amazon-from-the-serverless-chalice.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;It never seems to be the right time to enter the sweet world of
microservices. Each time you use &amp;quot;serverless&amp;quot; in a conversation, it dies
right there near the water-cooler. How do you produce a POC, tests, a
build, and proper security if your teammates can’t come along? In this
talk you will learn to: build, debug, validate, test, secure, and deploy
with a build pipeline using a Python framework.&lt;/p&gt;
&lt;p&gt;You have a small piece of functionality that doesn’t elegantly fit into
various domains your existing application already covers. You’re of
course concerned about delivering that functionality to production, and
making it securely available to the end user. All of this is followed
with an “if only I could” stream of thoughts, and cautious conversations
with your Ops team that don’t go anywhere beyond hypotheticals. This is
a perfect time to look into a serverless framework like Chalice. In this
session, we will discover the flexibility, robustness, and ease of use
inherent in serverless frameworks. We will dig deeper into ways to
package production level code, including security, deployment, and load
considerations. We will also touch on alternatives and general concerns
for such architectural decisions.&lt;/p&gt;
</summary></entry><entry><title># TODO: Add Comments: 5 Tips for _Winning_ at Code Comments</title><link href="https://pyvideo.org/pyohio-2019/todo-add-comments-5-tips-for-_winning_-at-code-comments.html" rel="alternate"></link><published>2019-07-27T16:30:00+00:00</published><updated>2019-07-27T16:30:00+00:00</updated><author><name>Nik Kantar</name></author><id>tag:pyvideo.org,2019-07-27:pyohio-2019/todo-add-comments-5-tips-for-_winning_-at-code-comments.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk covers five unexpected pieces of advice for writing better
code comments. From an editor change to some sound writing advice, it
takes a brief journey into a few habits of successful commenters.
Disclaimer: opinions ahead!&lt;/p&gt;
&lt;p&gt;Documentation often gets paid lip service, and code comments almost
always suffer the most. And yet they're often that last-moment savior
during archeological expeditions into depths no longer known, unearthing
obscure bugs or just trying to understand the foundation upon which to
build something new.&lt;/p&gt;
&lt;p&gt;Alas, we're all human, and thus oh so very fallible. And so we fall prey
to habits which make the situation worse over time, usually little by
little. We try to be heroes, but end up the very villains we bemoan.&lt;/p&gt;
&lt;p&gt;&amp;quot;Okay, how can I do better?&amp;quot; you ask. In this talk we'll cover five
simple things you can do to hack yourself into writing better comments.&lt;/p&gt;
</summary></entry><entry><title>Using Python &amp; R in Harmony</title><link href="https://pyvideo.org/pyohio-2019/using-python-r-in-harmony.html" rel="alternate"></link><published>2019-07-27T16:30:00+00:00</published><updated>2019-07-27T16:30:00+00:00</updated><author><name>Matthew Brower</name></author><id>tag:pyvideo.org,2019-07-27:pyohio-2019/using-python-r-in-harmony.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python and R are two of the most popular languages used for data
analysis. They are often pitted against each other in pros and cons
lists, where users feel forced to pick just one. Each has unique
advantages, and it's now easier than ever to use them harmoniously.
Python or R? Why not both?&lt;/p&gt;
&lt;p&gt;How often do you hear the question &amp;quot;Python or R?&amp;quot;&lt;/p&gt;
&lt;p&gt;Aspiring analytics professionals often feel the need to choose &amp;amp; learn a
'one size fits all' language for their scripting work. There are many
cases, though, where a specific library in Python or R is more effective
than similar libraries in the other language. This can lead to some
painful tradeoffs when selecting a single language for your work. Great
news: recent developments have made leveraging both languages in the
same workflow easier than ever before.&lt;/p&gt;
&lt;p&gt;In this talk, we’ll present methods for leveraging R from directly
within Python environments (and vice versa). We will illustrate the use
of these methods by using popular libraries to execute common analytics
tasks across languages without switching development environments.&lt;/p&gt;
</summary></entry><entry><title>Your Own Personal Bootcamp: How to Efficiently Learn Your Next Technology</title><link href="https://pyvideo.org/pyohio-2019/your-own-personal-bootcamp-how-to-efficiently-learn-your-next-technology.html" rel="alternate"></link><published>2019-07-27T16:30:00+00:00</published><updated>2019-07-27T16:30:00+00:00</updated><author><name>Joe Erickson</name></author><id>tag:pyvideo.org,2019-07-27:pyohio-2019/your-own-personal-bootcamp-how-to-efficiently-learn-your-next-technology.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Taking lessons from adult learning theory and from examples of hundreds
of bootcamp students, this talk will walk through what I have learned
about accelerated adult learning and tell you the what and the why
around techniques that you can use to more efficiently pick up your next
technology in record time.&lt;/p&gt;
&lt;p&gt;With the wealth of learning materials out there, why is it still not
easy to pick up and learn new technologies? Why do we still have trouble
going from learning to doing? With limited time to pick up the new
things that will advance our careers, what's the most efficient way to
retain and implement the new skills that we need? Taking lessons from
adult learning theory and from examples of hundreds of bootcamp
students, this talk will walk through what I have learned about
accelerated adult learning and tell you the what and the why around
techniques that you can use to more efficiently pick up your next
technology in record time.&lt;/p&gt;
&lt;p&gt;There has been substantial research done on how adults learn, but they
aren't widely known. Using the same learning tactics you used as a kid
doesn't always bring the best results or results that will stick. Adults
shouldn't be aiming to memorize facts for a test, they should be looking
to build long term skills that they can apply when needed.&lt;/p&gt;
&lt;p&gt;This talk will pass on some of the most important and actionable
findings in adult learning research and will walk attendees through a
path to learning a new skill that is efficient and effective.&lt;/p&gt;
&lt;p&gt;Topics include:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The Dreyfus Model of Learning&lt;/li&gt;
&lt;li&gt;How learning shifts between the novice and the intermediate&lt;/li&gt;
&lt;li&gt;Understanding the levels of mastery&lt;/li&gt;
&lt;li&gt;The Effective Tech Bootcamp model of learning&lt;/li&gt;
&lt;li&gt;What learning techniques are effective and why&lt;/li&gt;
&lt;li&gt;Creating a learning plan that works for you&lt;/li&gt;
&lt;/ul&gt;
</summary></entry><entry><title>Building Docs like Code: Continuous Integration for Documentation</title><link href="https://pyvideo.org/pyohio-2019/building-docs-like-code-continuous-integration-for-documentation.html" rel="alternate"></link><published>2019-07-27T15:45:00+00:00</published><updated>2019-07-27T15:45:00+00:00</updated><author><name>Mason Egger</name></author><id>tag:pyvideo.org,2019-07-27:pyohio-2019/building-docs-like-code-continuous-integration-for-documentation.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Project documentation is easy to neglect. Keep your docs inside your
source repo and learn how to automatically build and publish beautiful
docs on every commit. Viewers will leave with a new mindset on how to
handle documentation, tooling for this process, and an easy-to-implement
method to achieve this.&lt;/p&gt;
&lt;p&gt;It is common for developers to overlook the documentation of their
works. They are either on a time crunch, lack the proper tooling, or
simply just forget to create and update the documentation. Whatever the
cause behind this, it is not a proper excuse for not keeping the
documentation up to date. However, for all our development processes
there are few as neglected as the documentation process. Documentation
should be treated as important as the code that makes up the project. In
this talk we'll take a look at current documentation processes and
discuss moving the documentation into the code. With modern
documentation tools such as MkDocs and Sphinx, both of which are Python
powered tools, and Continuous Integration tools we can now include docs
in the commit. They can be reviewed in code reviews, built and versioned
in a CI tool, and even tested for things such as correct code examples
and broken links. This is the process that the developer knows,
understands, and enjoys. I introduced a team to this exact workflow and
a working pipeline; all they had to do was keep the documentation up to
date. This team currently has some of the most up to date documentation
in a company of near two thousand engineers, and they never complain
about writing/updating documentation. It’s just part of the workflow.&lt;/p&gt;
</summary></entry><entry><title>Django in Production with PEX</title><link href="https://pyvideo.org/pyohio-2019/django-in-production-with-pex.html" rel="alternate"></link><published>2019-07-27T15:00:00+00:00</published><updated>2019-07-27T15:00:00+00:00</updated><author><name>Alexandru Barbur</name></author><id>tag:pyvideo.org,2019-07-27:pyohio-2019/django-in-production-with-pex.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk discusses deploying and running Django web applications in
production using Twitter PEX.&lt;/p&gt;
&lt;p&gt;This talk discusses deploying and running Django web applications in
production using Twitter PEX. PEX can be used to package a Python
application and it's dependencies into a single file that can be easily
copied to and run on other machines. The PEX format has some limitations
and this talk will explore one possible way to use it for distributing
Django web applications.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Introduction (2m)&lt;/li&gt;
&lt;li&gt;Overview of Twitter PEX (3m)&lt;/li&gt;
&lt;li&gt;Django Management Commands (5m)&lt;/li&gt;
&lt;li&gt;Gunicorn Web Server&lt;/li&gt;
&lt;li&gt;Celery Task Worker&lt;/li&gt;
&lt;li&gt;Entry Point Script (5m)&lt;/li&gt;
&lt;li&gt;Creating the Distribution (5m)&lt;/li&gt;
&lt;li&gt;Deploying the Distribution (5m)&lt;/li&gt;
&lt;li&gt;Running the Application (5m)&lt;/li&gt;
&lt;li&gt;Q&amp;amp;A&lt;/li&gt;
&lt;/ul&gt;
</summary></entry><entry><title>Docker-Composing Your Way to a Better Development Environment</title><link href="https://pyvideo.org/pyohio-2019/docker-composing-your-way-to-a-better-development-environment.html" rel="alternate"></link><published>2019-07-27T15:00:00+00:00</published><updated>2019-07-27T15:00:00+00:00</updated><author><name>Ricardo Solano</name></author><id>tag:pyvideo.org,2019-07-27:pyohio-2019/docker-composing-your-way-to-a-better-development-environment.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Development environments can become cumbersome over time, with setup
occasionally filling multiple pages of documentation and making
onboarding new team members a difficult task. Whether you deploy your
Python application using containers or not, Docker Compose is a great
tool for defining development environments that closely mirror
production and can be spun up with a single command.&lt;/p&gt;
&lt;p&gt;By the end of this talk, audience members will understand the following
concepts:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Running application services/dependencies inside containers and its
advantages and disadvantages.&lt;/li&gt;
&lt;li&gt;Defining application environment and services via Dockerfile,
docker-compose.yml configuration files.&lt;/li&gt;
&lt;li&gt;Managing the environment using the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;docker-compose&lt;/span&gt;&lt;/tt&gt; CLI.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To illustrate these concepts, a Django application will be configured to
use a database, a cache, a queue and task worker.&lt;/p&gt;
</summary></entry><entry><title>If Statements are a Code Smell</title><link href="https://pyvideo.org/pyohio-2019/if-statements-are-a-code-smell.html" rel="alternate"></link><published>2019-07-27T15:00:00+00:00</published><updated>2019-07-27T15:00:00+00:00</updated><author><name>Aly Sivji</name></author><id>tag:pyvideo.org,2019-07-27:pyohio-2019/if-statements-are-a-code-smell.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;tt class="docutils literal"&gt;if&lt;/tt&gt; statements allow us to selectively execute code based on
conditional logic. Overusing conditionals results in code that is hard
to understand and difficult to modify. This talk will demonstrate how to
refactor &lt;tt class="docutils literal"&gt;if&lt;/tt&gt; statements into polymorphic classes, resulting in
cleaner program design. After this session, you will be able to
implement complex conditional logic using simple Python classes.&lt;/p&gt;
&lt;p&gt;Writing software is about making trade-offs between getting things done
and doing them right. Time constraints often force us to take shortcuts
to handle slight variations resulting in patches of conditional logic
sprinkled throughout our codebase. Workarounds that once allowed us to
move quickly now hinder our progress in getting new features out to
customers. It doesn't have to be this way!&lt;/p&gt;
&lt;p&gt;This talk will demonstrate how to use Object-Oriented programming
patterns, specifically polymorphism, to handle conditional logic
resulting in code that is easy to modify. The material will be presented
in the context of a real- world code refactor for an open-source
project. We will examine the initial solution, discuss its limitations,
and walk through the process of refactoring nested &lt;tt class="docutils literal"&gt;if&lt;/tt&gt; blocks into
polymorphic classes.&lt;/p&gt;
&lt;p&gt;The session is geared towards developers who do not have a lot of
experience implementing Object-Oriented solutions. After this talk, you
will be able to identify situations where Object-Oriented design can be
used to simplify complex conditional logic. Using the steps outlined,
you will be able to refactor code to improve software architecture
without changing existing functionality.&lt;/p&gt;
</summary></entry><entry><title>The Magic of Python</title><link href="https://pyvideo.org/pyohio-2019/the-magic-of-python.html" rel="alternate"></link><published>2019-07-27T15:00:00+00:00</published><updated>2019-07-27T15:00:00+00:00</updated><author><name>Darshan Markandaiah</name></author><id>tag:pyvideo.org,2019-07-27:pyohio-2019/the-magic-of-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python has many built in magic functions that are used internally by
classes for certain actions. For example, adding two numbers calls the
&lt;tt class="docutils literal"&gt;__add__&lt;/tt&gt; method and iterating over a list calls the &lt;tt class="docutils literal"&gt;__iter__&lt;/tt&gt;
method. I will expand on this Duck Typing principle and enumerate over a
range of magic methods that you can add to your classes to have a
cleaner codebase.&lt;/p&gt;
&lt;p&gt;In this talk, I will introduce and enumerate over magic methods
available in Python. This is an introductory talk for anyone with basic
familiarity of Python. For each class of magic methods that I introduce,
I'll provide example code samples.&lt;/p&gt;
&lt;p&gt;I will start off by introducing basic magic methods that allow you to do
things like initializing objects and printing readable versions of
objects. I will then go over select magic methods that allow for
emulating numeric types. I will then cover methods that enable you to
emulate sequences and write objects that can be indexed and iterated
over. I will conclude by talking about context managers (that allow for
managing pre-step and post-step actions) and Abstract Base Classes in
the abc module that will allow for you to get free functionality if you
provide the implementation for certain magic methods on your classes.&lt;/p&gt;
</summary></entry><entry><title>A Hands-On Guide to Building Interactive Command-Line Apps with cmd2</title><link href="https://pyvideo.org/pyohio-2019/a-hands-on-guide-to-building-interactive-command-line-apps-with-cmd2.html" rel="alternate"></link><published>2019-07-27T14:00:00+00:00</published><updated>2019-07-27T14:00:00+00:00</updated><author><name>Todd Leonhardt</name></author><id>tag:pyvideo.org,2019-07-27:pyohio-2019/a-hands-on-guide-to-building-interactive-command-line-apps-with-cmd2.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Interactive command-line (CLI) applications are extremely popular in the
DevOps and Security communities as well as for internal tooling and
automation. Have you ever wanted to build an awesome CLI application
using Python but don't know where to get started? This talk will show
you how to use the cmd2 package to quickly and easily build feature-rich
and user-friendly CLI apps in Python.&lt;/p&gt;
&lt;p&gt;Interactive command-line applications (CLIs) are used extensively in
many real-world scenarios, particularly in the DevOps and Security
communities as well as for internal developer tooling and automation.
I'm sure many of you have used the wonderful
&lt;a class="reference external" href="https://ipython.org"&gt;ipython&lt;/a&gt; interactive Python shell which is a
good example of a CLI. Python has the built-in
&lt;a class="reference external" href="https://docs.python.org/3/library/cmd.html"&gt;cmd&lt;/a&gt; library for
creating CLIs, but it is extremely bare-bones. The
&lt;a class="reference external" href="https://github.com/python-%20cmd2/cmd2"&gt;cmd2&lt;/a&gt; package is a
batteries-included extension of &lt;tt class="docutils literal"&gt;cmd&lt;/tt&gt; which makes it much quicker and
easier to create feature-rich and user-friendly CLIs.&lt;/p&gt;
&lt;p&gt;The presentation will first explain how to install &lt;tt class="docutils literal"&gt;cmd2&lt;/tt&gt;. The talk
will next show how to create a basic &lt;tt class="docutils literal"&gt;cmd2&lt;/tt&gt; application. Then the talk
will progressively add features to this application while demonstrating
the capabilities built into &lt;tt class="docutils literal"&gt;cmd2&lt;/tt&gt;. In the end, the presentation will
show how to build a basic but feature-rich and user-friendly CLI
application from scratch. This application will include many features
which make it easy to use for customers, including:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Built-in help&lt;/li&gt;
&lt;li&gt;Top-notch tab-completion&lt;/li&gt;
&lt;li&gt;Shell-like functionality including ability to run shell commands,
pipe to shell commands, and redirect output to files&lt;/li&gt;
&lt;li&gt;Built-in application scripting&lt;/li&gt;
&lt;li&gt;Built-in Python scripting&lt;/li&gt;
&lt;li&gt;Built-in history&lt;/li&gt;
&lt;li&gt;Command aliases and macros&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Ultimately, people who attend this talk will learn how to use the Python
programming language with the &lt;tt class="docutils literal"&gt;cmd2&lt;/tt&gt; package to quickly and
efficiently build their own interactive command-line applications.&lt;/p&gt;
</summary></entry><entry><title>Python Improvements (or This Is Not Your Teacher's Python)</title><link href="https://pyvideo.org/pyohio-2019/python-improvements-or-this-is-not-your-teachers-python.html" rel="alternate"></link><published>2019-07-27T14:00:00+00:00</published><updated>2019-07-27T14:00:00+00:00</updated><author><name>Travis Risner</name></author><id>tag:pyvideo.org,2019-07-27:pyohio-2019/python-improvements-or-this-is-not-your-teachers-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This session covers improvements to the Python language with 3.6 an 3.7.
We will discuss aspects such as f-strings, formal typing, the various
kinds of tuples, more precise timing, better hashing, etc.&lt;/p&gt;
&lt;p&gt;Topics that will be covered include:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;f-strings&lt;/li&gt;
&lt;li&gt;Typing&lt;/li&gt;
&lt;li&gt;tuples&lt;/li&gt;
&lt;li&gt;secrets library&lt;/li&gt;
&lt;li&gt;nanosecond timing&lt;/li&gt;
&lt;li&gt;hashing with sha3 and other techniques&lt;/li&gt;
&lt;li&gt;dataclasses&lt;/li&gt;
&lt;li&gt;Pathlib&lt;/li&gt;
&lt;li&gt;underscores in numbers&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We will discuss not only how to use the new features but why.&lt;/p&gt;
</summary></entry><entry><title>Scraping Your Way to a Dataset</title><link href="https://pyvideo.org/pyohio-2019/scraping-your-way-to-a-dataset.html" rel="alternate"></link><published>2019-07-27T14:00:00+00:00</published><updated>2019-07-27T14:00:00+00:00</updated><author><name>Alex Zharichenko</name></author><id>tag:pyvideo.org,2019-07-27:pyohio-2019/scraping-your-way-to-a-dataset.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Large datasets are vital for the majority of analytic and machine
learning tasks. But what happens when the data you need isn't available
in some convenient and easily obtainable form? This talk will go through
the process of data scraping to create a dataset that can be then used
for various analytical or machine learning tasks.&lt;/p&gt;
&lt;p&gt;It is essential to have a very large and high-quality dataset in order
to perform significant analytics or to use in various machine learning
tasks. For some tasks, there exists simple APIs or repositories of data
to collect from. But for many other tasks like tracking prices of
products, predicting stock prices, and predicting outcomes of sports
games there isn't a convenient way to retrieve this information besides
a webpage. Because of these circumstances, learning to scrape data from
webpages and other sources allows us to create our own dataset.
Additionally, scraping grants us the ability to ask better questions
about data in the world.&lt;/p&gt;
&lt;p&gt;This talk is geared towards beginner-to-intermediate Python developers
that want to be able to ask and answer better questions through data.
This talk will provide a guide for web scraping through two examples,
and it will explain how to get the scraped data into a usable form.
Throughout the talk, I will highlight some tips for improving scraper
performance, minimizing the risk that a web server will stop you, and
different ways to store the collected data. The first of the two
examples will examine a simple case of scraping data about the lottery
and the second will explore a more challenging case of scraping course
information from a University.&lt;/p&gt;
</summary></entry><entry><title>A Brief History of Fire Brigades</title><link href="https://pyvideo.org/pyohio-2019/a-brief-history-of-fire-brigades.html" rel="alternate"></link><published>2019-07-27T12:00:00+00:00</published><updated>2019-07-27T12:00:00+00:00</updated><author><name>Jon Banafato</name></author><id>tag:pyvideo.org,2019-07-27:pyohio-2019/a-brief-history-of-fire-brigades.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Publicly funded fire departments are critical to our society. We rely on
them for fire prevention and fighting, and their influence has shaped
our cities for centuries. It's time the software industry learned from
history and created a public service of our own.&lt;/p&gt;
&lt;p&gt;The history of fire companies dates back millennia, but their current
form is relatively new, just a few hundred years old. The evolution of
these companies happened in parallel in different nations, but I’d like
to tell the story of how London’s fire brigades became the public
service we know today. We'll look at how fire departments have evolved
starting with the Roman Empire all the way through the formation of the
first publicly funded fire brigades in London. By the end, I hope to
convince you that we need an Internet emergency service and that we
should take a shortcut to get there.&lt;/p&gt;
</summary></entry><entry><title>Explicit is Better than Implicit: Making Culture Visible with Team Charters</title><link href="https://pyvideo.org/pyohio-2019/explicit-is-better-than-implicit-making-culture-visible-with-team-charters.html" rel="alternate"></link><published>2019-07-27T12:00:00+00:00</published><updated>2019-07-27T12:00:00+00:00</updated><author><name>Christopher T. Miller</name></author><id>tag:pyvideo.org,2019-07-27:pyohio-2019/explicit-is-better-than-implicit-making-culture-visible-with-team-charters.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;If you’ve ever joined a new team, you know that there are hidden rules
for how the team operates: what they value in their day-today work, what
is important to them.&lt;/p&gt;
&lt;p&gt;Breaking news: teams are hard. We document our code... shouldn't we
document our team's values and ideals?&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Beautiful is better than ugly.&lt;/em&gt; There is more to a team than just
throwing people together and telling them to ship code. The culture of
the team matters, Not company culture, but the culture and operating
rules of the group of people that spend their days together. That
culture can be amazing when it is mindfully considered. So how does that
happen?&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Explicit is better than implicit.&lt;/em&gt; A team charter is documentation
written by a group of people to capture their purpose, their values,
their working rules, and their general processes. Making the invisible
visible is the purpose of the team charter.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;There should be one-- and preferably only one --obvious way to do it.&lt;/em&gt;
Your team charter will provide an anchor to keep your team true to their
ideals, even and &lt;strong&gt;especially&lt;/strong&gt; during periods of great stress by
providing a written record of how they aspire to work together.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;In the face of ambiguity, refuse the temptation to guess.&lt;/em&gt; Whether it
is establishing priorities or onboarding new team members, your team
charter will take the guesswork out of the non-code parts of working
together.&lt;/p&gt;
&lt;p&gt;In this talk, we'll explore what a team charter is, how to create one,
and view examples of charters teams have created and used in their
day-to-day work.&lt;/p&gt;
</summary></entry><entry><title>Using Dash to Create Interactive Web Apps for Non-Technical Audiences</title><link href="https://pyvideo.org/pyohio-2019/using-dash-to-create-interactive-web-apps-for-non-technical-audiences.html" rel="alternate"></link><published>2019-07-27T12:00:00+00:00</published><updated>2019-07-27T12:00:00+00:00</updated><author><name>Joseph Willi</name></author><id>tag:pyvideo.org,2019-07-27:pyohio-2019/using-dash-to-create-interactive-web-apps-for-non-technical-audiences.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Have you ever struggled with finding ways to present data visualizations
and/or results to non-technical audiences in a coherent and engaging
manner? In this talk, I'll detail how I overcame such a challenge by
using Dash to build an interactive app for firefighters to use during
performance testing of their rescue equipment.&lt;/p&gt;
&lt;p&gt;Analytical web applications can serve as a powerful means for scientists
and engineers to interact with data and identify trends in a concise and
straightforward manner. Such tools can allow users to immediately see
the effects of modifying specific input parameters. Additionally,
interactive web apps can be utilized to present data visualizations and
analysis results in engaging ways.&lt;/p&gt;
&lt;p&gt;Unless you're a full-stack developer, creating these types of web
applications may seem quite challenging. Dash, a Python framework
written on top of Flask, Plotly.js, and React.js, handles many of the
complexities associated with building custom interfaces and provides
users the ability to build powerful data visualizations strictly through
Python.&lt;/p&gt;
&lt;p&gt;Despite being an intermediate Python user lacking full knowledge of the
technologies and protocols required to build web-based applications, I
was able to create a UI using Dash. More specifically, I built an
interactive dashboard for firefighters to process and interact with
sensor data collected during performance testing of their rescue
equipment.&lt;/p&gt;
&lt;p&gt;During this talk, I will briefly detail the motivation behind this
project. Then, I'll describe how the project progressed to its current
state, while highlighting key points that can be applied to the general
case of developing interactive web apps for audiences from non-technical
backgrounds. To conclude my presentation, I will show a demo of the
interactive web app and summarize the key takeaways.&lt;/p&gt;
</summary></entry><entry><title>Adopt-a-pytest</title><link href="https://pyvideo.org/pyohio-2019/adopt-a-pytest.html" rel="alternate"></link><published>2019-07-27T11:15:00+00:00</published><updated>2019-07-27T11:15:00+00:00</updated><author><name>Dane Hillard</name></author><id>tag:pyvideo.org,2019-07-27:pyohio-2019/adopt-a-pytest.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;pytest is a testing framework that makes writing and running Python
tests simpler. Adopting new tooling in a large system is often a burden.
How can you introduce pytest gradually with minimal pain?&lt;/p&gt;
&lt;div class="section" id="who"&gt;
&lt;h4&gt;Who&lt;/h4&gt;
&lt;p&gt;This is for anyone currently using &lt;tt class="docutils literal"&gt;unittest&lt;/tt&gt; for Python unit testing
that would like to adopt &lt;tt class="docutils literal"&gt;pytest&lt;/tt&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="takeaways"&gt;
&lt;h4&gt;Takeaways&lt;/h4&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;How to run &lt;tt class="docutils literal"&gt;pytest&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;How to create a basic &lt;tt class="docutils literal"&gt;pytest&lt;/tt&gt; configuration&lt;/li&gt;
&lt;li&gt;Using &lt;tt class="docutils literal"&gt;pytest&lt;/tt&gt; marks to shim an existing project&lt;/li&gt;
&lt;li&gt;Converting a &lt;tt class="docutils literal"&gt;unittest&lt;/tt&gt; test to &lt;tt class="docutils literal"&gt;pytest&lt;/tt&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="what"&gt;
&lt;h4&gt;What&lt;/h4&gt;
&lt;p&gt;With its simplified syntax, powerful fixture behaviors, detailed test
reports, and plugin-based architecture, &lt;tt class="docutils literal"&gt;pytest&lt;/tt&gt; has a lot to offer.
Whether you're new to Python unit testing or you've been using
&lt;tt class="docutils literal"&gt;unittest&lt;/tt&gt; for a while, &lt;tt class="docutils literal"&gt;pytest&lt;/tt&gt; may be something to consider. It's
not too hard to get up and running with &lt;tt class="docutils literal"&gt;pytest&lt;/tt&gt; on a fresh project,
but how can you retrofit an existing project without having to refactor
the world all at once?&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>Feature Engineering: An Apprentice’s Guide to the “Dark Art” of Machine Learning</title><link href="https://pyvideo.org/pyohio-2019/feature-engineering-an-apprentices-guide-to-the-dark-art-of-machine-learning.html" rel="alternate"></link><published>2019-07-27T11:15:00+00:00</published><updated>2019-07-27T11:15:00+00:00</updated><author><name>Deborah Diller Harris</name></author><id>tag:pyvideo.org,2019-07-27:pyohio-2019/feature-engineering-an-apprentices-guide-to-the-dark-art-of-machine-learning.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Why is feature engineering considered the &amp;quot;dark art&amp;quot; of machine
learning? Transforming raw data into a form that your machine learning
algorithm can utilize seems mysterious and downright frightening! Bring
your wizard hat and join me as this machine learning apprentice shares
her personal book of feature engineering incantations.&lt;/p&gt;
&lt;p&gt;What is feature engineering and why do we need it? When is it applied?
Is it an art or a science? Find out the answers to these questions and
more as we explore different methods of feature engineering with
practical examples provided. There are three main methods of feature
engineering: adjusting raw features, combining raw features and
decomposing raw features into usable subsets. We will use datasets to
illustrate binning, encoding, binaries, summing, differencing, feature
scaling, extraction, and the manipulation of date/time features.
Finally, we will explore the performance of a machine learning model
before and after feature engineering is applied. As a postscript,
current automated feature engineering tools for Python will be
introduced.&lt;/p&gt;
</summary></entry><entry><title>Lessons from Zero-Defect Software</title><link href="https://pyvideo.org/pyohio-2019/lessons-from-zero-defect-software.html" rel="alternate"></link><published>2019-07-27T11:15:00+00:00</published><updated>2019-07-27T11:15:00+00:00</updated><author><name>Jason R. Coombs</name></author><id>tag:pyvideo.org,2019-07-27:pyohio-2019/lessons-from-zero-defect-software.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Writing software with no defects is extremely difficult and expensive,
but the lessons learned from such ambitious projects can inform our
approach for a more practical development technique. This talk looks at
how principles from zero-defect engineering, functional programming, and
refactoring come together to produce robust, readable, and reliable
code.&lt;/p&gt;
&lt;p&gt;You know that feeling when you look at a piece of code you or someone
has written and it has a smell, it's inelegant, or its incomprehensibly
complex. And then there's the other feeling, when you see a piece of
code that's comprehensible, elegant, and it is ready to adopt the
behavior you seek. It's this feeling we want to replicate and enhance.
Instigated by a simple tweet, the speaker reaches back in time to
explore the foundational practices that lead to our best code.&lt;/p&gt;
&lt;p&gt;Starting with Refactoring, we'll reflect on the techniques of change
that retain stability while increasing sophistication or reducing
complexity. We'll explore how code is a form of conversation and ways
that conversation can transpire in a code repository.&lt;/p&gt;
&lt;p&gt;Next we will explore how Python has supported the principles and
primitives of functional programming from early versions and how the
constraints of functional programming lead to robust logic. We'll
examine the functional nature of comprehensions and the powerful feature
of functions as parameters.&lt;/p&gt;
&lt;p&gt;In the main event, the speaker will draw on his early experiences with
Zero- Defect Software, where one writes software with literally no bugs,
and how these techniques can influence the design and implementation
toward a more robust solution, starting with a rigorous but impractical
ideal and distilling from that a pragmatic approach that retains much of
the benefit of the technique. Integrating the lessons from refactoring
and functional programming, a coding approach emerges that promises to
enable and empower your development.&lt;/p&gt;
</summary></entry><entry><title>Becoming a Better Curator of Your Code</title><link href="https://pyvideo.org/pyohio-2019/becoming-a-better-curator-of-your-code.html" rel="alternate"></link><published>2019-07-27T10:30:00+00:00</published><updated>2019-07-27T10:30:00+00:00</updated><author><name>Ian Zelikman</name></author><id>tag:pyvideo.org,2019-07-27:pyohio-2019/becoming-a-better-curator-of-your-code.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Writing code that functions correctly is only part of the development
process. The majority of our time is spent reading, maintaining and
refactoring our code.&lt;/p&gt;
&lt;p&gt;In this talk we will discuss how when we see our work as code curation
we actually enable our job to be much easier and productive.&lt;/p&gt;
&lt;p&gt;We will start the talk with an introduction to the role of a curator and
how it applies to software engineers.&lt;/p&gt;
&lt;p&gt;In this talk we will discuss some principals and techniques that enable
us to produce better code but applying them with the curation mindset of
maintaining code quality beyond producing the next bug free feature.&lt;/p&gt;
&lt;p&gt;Some of the topics we will cover:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Promote the use of conventions and style guides for your team&lt;/li&gt;
&lt;li&gt;Code readability matters&lt;/li&gt;
&lt;li&gt;The first goal of writing tests should be to document the code
functionality&lt;/li&gt;
&lt;li&gt;Encourage discussion on feature implementation&lt;/li&gt;
&lt;li&gt;Encourage discussion during code reviews&lt;/li&gt;
&lt;li&gt;Boy Scout rule - leave the code in a better shape than which you
found it&lt;/li&gt;
&lt;li&gt;Embrace new and mature technologies, and try to incorporate them into
your code when applicable&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;At the end of the talk we will review the software curation mindset and
how you can bring it to your organization.&lt;/p&gt;
</summary></entry><entry><title>Demystifying Machine Learning</title><link href="https://pyvideo.org/pyohio-2019/demystifying-machine-learning.html" rel="alternate"></link><published>2019-07-27T10:30:00+00:00</published><updated>2019-07-27T10:30:00+00:00</updated><author><name>Nikola Novakovic</name></author><id>tag:pyvideo.org,2019-07-27:pyohio-2019/demystifying-machine-learning.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Machine Learning is something you'll see referenced very frequently now
in everything from marketing materials to sales pitches, and job
postings. With so much hype it can be hard to distinguish what people
mean when they say Machine Learning. In this talk we will demystify
Machine Learning by understanding its core concepts and applying that
knowledge to real world examples.&lt;/p&gt;
&lt;p&gt;We’ll explain basic concepts like linear algebra and loss functions,
figure out when to use machine learning and build an ML model that we’ll
be able to use in real world apps. Here’s an in-depth list of what we’ll
cover:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;What Machine Learning is and where it’s being used&lt;/li&gt;
&lt;li&gt;How to recognize when machine learning is necessary&lt;/li&gt;
&lt;li&gt;Math &amp;amp; Statistics 101&lt;/li&gt;
&lt;li&gt;Algorithm 1: Linear Regression&lt;/li&gt;
&lt;li&gt;Live Coding Session Salary Estimator&lt;/li&gt;
&lt;li&gt;Q &amp;amp; A&lt;/li&gt;
&lt;/ul&gt;
</summary></entry><entry><title>“Who’d I Lend That Book To?” Hard Questions Answered with Python</title><link href="https://pyvideo.org/pyohio-2019/whod-i-lend-that-book-to-hard-questions-answered-with-python.html" rel="alternate"></link><published>2019-07-27T10:30:00+00:00</published><updated>2019-07-27T10:30:00+00:00</updated><author><name>Daniel Lindeman</name></author><id>tag:pyvideo.org,2019-07-27:pyohio-2019/whod-i-lend-that-book-to-hard-questions-answered-with-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;I love reading books, but I love lending them out even more! In order to
keep track of my personal library, a daunting task indeed, I’ve employed
Python, a Raspberry Pi, and an RFID reader. Take a tour through what
it’s like working with hardware, Python, and putting it all together
into a useful web application. This is a beginner friendly talk, so
don’t worry if you’ve never worked with hardware&lt;/p&gt;
&lt;p&gt;The Internet of Things (IoT) is here to stay, but getting started can
seem intimidating. Inspired by the magical checkout process at my local
library, I began the journey of building my own IoT book lending
application. Along the way, I discovered that Python was consistently
able to make the impossible seem approachable!&lt;/p&gt;
&lt;p&gt;We’ll start with a base installation of Raspbian on a Raspberry Pi and
find that Python is already there waiting to help. Then we’ll hook up an
RFID reader to our Pi, and see that even though it has wires and pins,
it’s nothing to be scared of. With the RFID reader and the fantastic
MFRC522-python library, we’re able to read and write data to RFID
stickers, neat!&lt;/p&gt;
&lt;p&gt;We could stop here, but we’ve got Python, so let’s hook it up to a Flask
app and end at a complete book lending application. I hope attendees
will gain an appreciation for the technology all around them, their
local library, and how powerful Python is. I hope to demystify working
with hardware and dispel some perceived barriers to entry for IoT
applications.&lt;/p&gt;
</summary></entry><entry><title>Changing Lives through Open Source, Passion and Mentoring</title><link href="https://pyvideo.org/pyohio-2019/changing-lives-through-open-source-passion-and-mentoring.html" rel="alternate"></link><published>2019-07-27T00:00:00+00:00</published><updated>2019-07-27T00:00:00+00:00</updated><author><name>Kattni Rembor</name></author><id>tag:pyvideo.org,2019-07-27:pyohio-2019/changing-lives-through-open-source-passion-and-mentoring.html</id><summary type="html"></summary></entry><entry><title>Probabilistic Programming and Bayesian Inference in Python</title><link href="https://pyvideo.org/pyohio-2019/probabilistic-programming-and-bayesian-inference-in-python.html" rel="alternate"></link><published>2019-07-27T00:00:00+00:00</published><updated>2019-07-27T00:00:00+00:00</updated><author><name>Lara Kattan</name></author><id>tag:pyvideo.org,2019-07-27:pyohio-2019/probabilistic-programming-and-bayesian-inference-in-python.html</id><summary type="html"></summary></entry><entry><title>Saturday Welcome</title><link href="https://pyvideo.org/pyohio-2019/saturday-welcome.html" rel="alternate"></link><published>2019-07-27T00:00:00+00:00</published><updated>2019-07-27T00:00:00+00:00</updated><author><name>Dave Forgac</name></author><id>tag:pyvideo.org,2019-07-27:pyohio-2019/saturday-welcome.html</id><summary type="html"></summary></entry><entry><title>Sunday Lightning Talks</title><link href="https://pyvideo.org/pyohio-2019/sunday-lightning-talks.html" rel="alternate"></link><published>2019-07-27T00:00:00+00:00</published><updated>2019-07-27T00:00:00+00:00</updated><author><name>Kat Passen</name></author><id>tag:pyvideo.org,2019-07-27:pyohio-2019/sunday-lightning-talks.html</id><summary type="html"></summary></entry><entry><title>Sunday Welcome</title><link href="https://pyvideo.org/pyohio-2019/sunday-welcome.html" rel="alternate"></link><published>2019-07-27T00:00:00+00:00</published><updated>2019-07-27T00:00:00+00:00</updated><author><name>Dave Forgac</name></author><id>tag:pyvideo.org,2019-07-27:pyohio-2019/sunday-welcome.html</id><summary type="html"></summary></entry><entry><title>The Gig is Up: Radical Shifts That Save Cultures, Teams, and Companies</title><link href="https://pyvideo.org/pyohio-2019/the-gig-is-up-radical-shifts-that-save-cultures-teams-and-companies.html" rel="alternate"></link><published>2019-07-27T00:00:00+00:00</published><updated>2019-07-27T00:00:00+00:00</updated><author><name>Greg Svoboda</name></author><id>tag:pyvideo.org,2019-07-27:pyohio-2019/the-gig-is-up-radical-shifts-that-save-cultures-teams-and-companies.html</id><summary type="html"></summary></entry></feed>