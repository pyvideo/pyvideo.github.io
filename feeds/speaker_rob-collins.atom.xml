<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_rob-collins.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2015-08-08T00:00:00+00:00</updated><entry><title>TDM: Test-Driven Madness</title><link href="https://pyvideo.org/europython-2013/tdm-test-driven-madness.html" rel="alternate"></link><published>2013-07-02T00:00:00+00:00</published><updated>2013-07-02T00:00:00+00:00</updated><author><name>Rob Collins</name></author><id>tag:pyvideo.org,2013-07-02:europython-2013/tdm-test-driven-madness.html</id><summary type="html"></summary><category term="bdd"></category><category term="XP"></category><category term="testing"></category><category term="tdm"></category><category term="tdd"></category></entry><entry><title>DumbDev -- eight rules for dumb development</title><link href="https://pyvideo.org/europython-2015/dumbdev-eight-rules-for-dumb-development.html" rel="alternate"></link><published>2015-08-08T00:00:00+00:00</published><updated>2015-08-08T00:00:00+00:00</updated><author><name>Rob Collins</name></author><id>tag:pyvideo.org,2015-08-08:europython-2015/dumbdev-eight-rules-for-dumb-development.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Rob Collins - DumbDev -- eight rules for dumb development
[EuroPython 2015]
[24 July 2015]
[Bilbao, Euskadi, Spain]&lt;/p&gt;
&lt;p&gt;So often, we've been encouraged to be smart in our development. &amp;quot;Work
smarter not harder!&amp;quot; say the encouraging posters. But the desire to be
smart, and be seen to be smart, is hurting. The design suffers, the
code suffers, and it's hard to recruit developers smart enough to cope
with the problems caused.&lt;/p&gt;
&lt;p&gt;In this talk, I'm proposing an alternative to being smart:
&lt;strong&gt;_DumbDev_&lt;/strong&gt;. Let's use our brains for enjoyable, interesting things,
rather than wrestling with code written for smart developers.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;So what do I mean by _dumb_?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Well, I don't mean 'ignorant'. A clever person can be ignorant of some
important information, and learn it. With ignorance, there is hope.
I'm also not talking about its opposite, 'stupidity'. This occurs when
someone is given the information or advice, and chooses to ignore it.
Dumb isn't stupid. Nor is it silent, as in someone who can't speak.&lt;/p&gt;
&lt;p&gt;Instead, the picture I have is of one of the early computers: very
small RAM, disk space measured in KB, and a woefully inadequate CPU.
In other words, slow, with very little working memory and limited
persistent storage. Hey, this describes my brain -- and I realise
that's an asset! I will write better software if I take this into
account.&lt;/p&gt;
&lt;p&gt;So, I'm a &lt;strong&gt;_DumbDev_&lt;/strong&gt;, which means I can't hold in my mind the
infamous [Plone Site class hierarchy][1] (see [Michele Simionato's
article][2]). Rather than beat myself up about this, I can say, &amp;quot;Hold
on, maybe deep inheritance is a bad idea...&amp;quot; There is some debate
about the number of things we can think about simultaneously: it may
be 7, 9, 5, 4 or even only 3. We can learn some tricks to appear to
cope with more, but most of us can't easily do 38.&lt;/p&gt;
&lt;p&gt;Here's the first &lt;strong&gt;_DumbDev_&lt;/strong&gt; rule, putting a sensible limit on complexity:&lt;/p&gt;
&lt;p&gt;&amp;gt; &lt;strong&gt;1. All diagrams must fit on a Noughts and Crosses (Tic-tac-toe) board&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&amp;gt; _One central class/concept and up to eight things linked. Larger
structures need to be subdivided._&lt;/p&gt;
&lt;p&gt;There are seven further rules for me to explain in this talk. I will
demonstrate the benefits of the &lt;strong&gt;_DumbDev_&lt;/strong&gt; approach, with good and
bad examples. At the end of the presentation, I hope you will realise
that you're a better developer than you thought at the start. The next
time it takes you two hours to debug a simple exception, you'll know
that it's not you. It's because the system wasn't written using
&lt;strong&gt;_DumbDev_&lt;/strong&gt; rules.&lt;/p&gt;
&lt;p&gt;Let's free our brains for more interesting things, like having ideas
and solving problems.&lt;/p&gt;
&lt;p&gt;Let's do &lt;strong&gt;_DumbDev_&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;[1]: &lt;a class="reference external" href="http://www.phyast.pitt.edu/~micheles/python/plone-hierarchy.png"&gt;http://www.phyast.pitt.edu/~micheles/python/plone-hierarchy.png&lt;/a&gt;
[2]: &lt;a class="reference external" href="http://www.artima.com/weblogs/viewpost.jsp?thread=246341"&gt;http://www.artima.com/weblogs/viewpost.jsp?thread=246341&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Pricing products using Python graphs and sets</title><link href="https://pyvideo.org/europython-2011/pricing-products-using-python-graphs-and-sets.html" rel="alternate"></link><published>2011-07-21T00:00:00+00:00</published><updated>2011-07-21T00:00:00+00:00</updated><author><name>Rob Collins</name></author><id>tag:pyvideo.org,2011-07-21:europython-2011/pricing-products-using-python-graphs-and-sets.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Rob Collins - 22 June 2011 in &amp;quot;Track Ravioli &amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;We will look at the limitations of available rule engines when it comes
to complex pricing rules. Rob has been part of a Python team writing a
pricing engine based on network graphs. We will show:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Why pricing is not easy&lt;/li&gt;
&lt;li&gt;Rule engine anti-patterns, e.g. to change one price requires a week's
development time, and has to be fitted into a release cycle&lt;/li&gt;
&lt;li&gt;How to make pricing rules data driven, usable by the business&lt;/li&gt;
&lt;li&gt;How the use of graphs and sets reduces the complexity&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Rob is joined by David Layton of Grey Squirrel Consulting, who is a
fellow contractor working with Rob on the pricing project. He is an
American expatriate and Python developer, currently living and working
in London. His background is in scientific computing, CRMs and Business
Intelligence.&lt;/p&gt;
</summary><category term="business"></category><category term="graphs"></category><category term="network"></category><category term="scientific"></category></entry><entry><title>Further neck and amd shoulder massage training</title><link href="https://pyvideo.org/europython-2012/further-neck-and-amd-shoulder-massage-training.html" rel="alternate"></link><published>2012-07-04T00:00:00+00:00</published><updated>2012-07-04T00:00:00+00:00</updated><author><name>Rob Collins</name></author><id>tag:pyvideo.org,2012-07-04:europython-2012/further-neck-and-amd-shoulder-massage-training.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2012] Rob Collins - 3 JULY 2012 in &amp;quot;Track Spaghetti&amp;quot;&lt;/p&gt;
</summary></entry></feed>