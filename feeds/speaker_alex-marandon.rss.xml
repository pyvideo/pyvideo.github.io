<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Sun, 18 Oct 2015 00:00:00 +0000</lastBuildDate><item><title>Démystifier les entrées/sorties asynchrones</title><link>https://pyvideo.org/pycon-fr-2015/demystifier-les-entreessorties-asynchrones.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;La programmation basée sur les entrées/sorties asynchrones en Python :
cas d'utilisations, fonctionnement interne, contraintes et styles de
programmation.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Programmation asynchrone, entrées/sorties non-bloquantes, boucle
d'événements, beaucoup de développeurs ont rencontré ces expressions
sans forcément savoir de quoi il s'agit concrètement. Mis à la mode par
Node.js, les serveurs web asynchrones ont des caractéristiques
particulières et ne viennent pas sans contraintes.&lt;/p&gt;
&lt;p&gt;Dans cette présentation, je commencerai par expliquer à l'aide
d'analogies en quoi consiste les entrées/sorties asynchrones, quels
problèmes elles peuvent résoudre et quels problèmes elles ne résolvent
pas. Nous verrons ensuite quelques exemples d'utilisation simples puis
nous étudierons le fonctionnement interne d'une boucle d'événements
d'entrées/sorties.&lt;/p&gt;
&lt;p&gt;Les bases étant posées, nous explorerons alors les différents styles de
programmation possibles en nous basant sur des exemples plus avancés
basés sur les frameworks &lt;a class="reference external" href="http://www.tornadoweb.org/"&gt;Tornado&lt;/a&gt; et
&lt;a class="reference external" href="http://aiohttp.readthedocs.org/"&gt;aiohttp&lt;/a&gt;, jusqu'à présenter les
nouveaux mot-clés
&lt;a class="reference external" href="http://makina-corpus.com/blog/metier/2015/python-http-%20server-with-the-new-async-await-syntax"&gt;async/await&lt;/a&gt;
de Python 3.5. Chaque exemple sera accompagné d'une mesure de
performance mettant en évidence l'impact de l'utilisation des
entrées/sorties asynchrones.&lt;/p&gt;
&lt;p&gt;Pour illustrer les notions abordées par des cas d'utilisation réels, je
présenterais deux projets auxquels j'ai contribué dans le cadre de ma
mission à Météo France et qui utilisent les entrées/sorties asynchrones
de manière atypique : le gestionnaire de processus
&lt;a class="reference external" href="http://circus.readthedocs.org/en/latest/"&gt;Circus&lt;/a&gt; et le proxy HTTP
&lt;a class="reference external" href="http://thr.readthedocs.org/en/latest/"&gt;THR&lt;/a&gt;.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alex Marandon</dc:creator><pubDate>Sun, 18 Oct 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-10-18:pycon-fr-2015/demystifier-les-entreessorties-asynchrones.html</guid></item><item><title>Pièges et bizarreries de (C)Python</title><link>https://pyvideo.org/pycon-fr-2015/pieges-et-bizarreries-de-cpython.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Python nous réserve généralement peu de (mauvaises) surprises. Il existe
cependant quelques recoins étranges que nous allons explorer pour nous
amuser et nous instruire.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python est conçu pour éviter les comportements inattendus mais on en
rencontre pourtant parfois, la plupart liés à l'implémentation de
référence CPython. Ces comportements étranges sont autant d'opportunités
de mieux comprendre le modèle d'exécution de Python et nous fournissent
un beau prétexte pour inspecter son bytecode.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alex Marandon</dc:creator><pubDate>Sat, 17 Oct 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-10-17:pycon-fr-2015/pieges-et-bizarreries-de-cpython.html</guid></item></channel></rss>