<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_jonathan-hartley.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2011-03-11T00:00:00+00:00</updated><entry><title>PyCon 2009: Plenary: Afternoon Lightning Talks</title><link href="https://pyvideo.org/pycon-us-2009/pycon-2009--plenary--afternoon-lightning-talks.html" rel="alternate"></link><published>2009-02-17T00:00:00+00:00</published><updated>2009-02-17T00:00:00+00:00</updated><author><name>Steven Bethard</name></author><id>tag:pyvideo.org,2009-02-17:pycon-us-2009/pycon-2009--plenary--afternoon-lightning-talks.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Plenary: Afternoon Lightning Talks&lt;/p&gt;
&lt;p&gt;(00:05) Easy command line parsing with argparse - Steven Bethard&lt;/p&gt;
&lt;p&gt;(04:14) Moments - Charles Brandt&lt;/p&gt;
&lt;p&gt;(11:45) Crowdsourcing lightning -&lt;/p&gt;
&lt;p&gt;(13:40) Python 3.1 changes - Benjamin Peterson&lt;/p&gt;
&lt;p&gt;(19:35) The Poor Man's Continuous Integration - Zain Memon&lt;/p&gt;
&lt;p&gt;(25:55) cluemapper - Nate Aune&lt;/p&gt;
&lt;p&gt;(29:55) ReleaseBot - Brian Warner&lt;/p&gt;
&lt;p&gt;(34:50) worldPloneday - Jordan Baker and Roberto&lt;/p&gt;
&lt;p&gt;(40:15) blist - Daniel Stutzbach&lt;/p&gt;
&lt;p&gt;(45:10) Python Open Source Overview on Launchpad - Gary Poster&lt;/p&gt;
&lt;p&gt;(49:50) Pyjamas - Bernd Dorn&lt;/p&gt;
&lt;p&gt;(53:50) &amp;nbsp;is Evil and IP Addresses in Python - Gregory Smith&lt;/p&gt;
&lt;p&gt;(56:00) ctypes - Jason Coombs&lt;/p&gt;
&lt;p&gt;(61:10) Come to EuroPython - Jonathan Hartley&lt;/p&gt;
&lt;p&gt;(65:45) Zope - Lennart Regebro&lt;/p&gt;
&lt;p&gt;(71:05) Site Checker - Eric Holscher&lt;/p&gt;
&lt;p&gt;(76:20) PSF Community Awards&lt;/p&gt;
</summary><category term="lightning talks"></category><category term="argparse"></category><category term="blist"></category><category term="cluemapper"></category><category term="ctypes"></category><category term="launchpad"></category><category term="moments"></category><category term="plone"></category><category term="pycon"></category><category term="pycon2009"></category><category term="pyjamas"></category><category term="python31"></category><category term="sitechecker"></category><category term="testing"></category><category term="twill"></category><category term="zope"></category></entry><entry><title>Algorithmic Generation of OpenGL Geometry</title><link href="https://pyvideo.org/pycon-us-2011/pycon-2011--algorithmic-generation-of-opengl-geom.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Jonathan Hartley</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--algorithmic-generation-of-opengl-geom.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Algorithmic Generation of OpenGL Geometry&lt;/p&gt;
&lt;p&gt;Presented by Jonathan Hartley&lt;/p&gt;
&lt;p&gt;Starting from a basic 'hello world' OpenGL app, a simple and Pythonic
model of 3D polyhedra is presented, with neat generators to convert
these into ctype arrays for OpenGL. Geometric algorithms then generate
some fun geometry, and these are compounded to produce successively more
complex and interesting shapes.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;The author's intent is to demonstrate that effective stylistic 3D
graphics can be achieved using surprisingly small amounts of code. This
hopefully makes the topic amenable to 3D beginners, while possibly
suggesting some alternative approaches to those with 3D experience.&lt;/p&gt;
&lt;p&gt;Talk Outline&lt;/p&gt;
&lt;p&gt;Throughout, discussion of ideas and code dissection alternates with live
animated demos, at 60fps on very modest hardware.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Inspirations - Effective non-photo-realistic work in gaming, movies
and the demo scene. (1m)&lt;/li&gt;
&lt;li&gt;A convenient &amp;amp; Pythonic way to model 3D polyhedra, and some neat
generators to convert these into OpenGL arrays at runtime. (7m)&lt;/li&gt;
&lt;li&gt;Composition of polyhedra to create more complex shapes. (3m)&lt;/li&gt;
&lt;li&gt;The resulting performance characteristics: What works well from
Python, and what doesn't. (2m)&lt;/li&gt;
&lt;li&gt;Koch tetrahedron &amp;amp; tetrix, aka Sierpinski tetrahedron. (1m)&lt;/li&gt;
&lt;li&gt;Surprisingly effective 3D models created from small bitmaps. (1m)&lt;/li&gt;
&lt;li&gt;Automatic generation of trees, mazes, complex spaces. (3m)&lt;/li&gt;
&lt;li&gt;Algorithmic modification of existing shapes, such as bevels,
geometric duals, and polyhedron stellation. (2m)&lt;/li&gt;
&lt;li&gt;Shapes that morph: Rearranging vertices on the fly (5m)&lt;/li&gt;
&lt;li&gt;Questions (5m)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The ideas demonstrated in the talk are written against OpenGL 2.1, but
written in a 'mostly OpenGL 3' style, using vertex buffer objects or
vertex arrays.&lt;/p&gt;
&lt;p&gt;The demo code uses pyglet to create a window and handle GUI events, and
uses PyOpenGL for the majority of OpenGL calls, since it provides a more
friendly and Pythonic interface. In the performance-sensitive inner
render loop, however, I use pyglet's slightly more bare-bones OpenGL
bindings.&lt;/p&gt;
&lt;p&gt;However, the majority of the talk focuses on the manipulation of
abstract data structures to represent geometry, which is not affected by
these or other OpenGL library choices.&lt;/p&gt;
&lt;p&gt;This is a substantially improved version of the talk 'Flying High:
Hobbyist OpenGL from Python', previously presented at EuroPython 2010.&lt;/p&gt;
</summary><category term="3d"></category><category term="opengl"></category><category term="pycon"></category><category term="pycon2011"></category><category term="pyglet"></category><category term="pyopengl"></category></entry></feed>