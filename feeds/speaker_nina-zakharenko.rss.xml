<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Tue, 24 Sep 2019 00:00:00 +0000</lastBuildDate><item><title>Goodbye Print, Hello Debugger!</title><link>https://pyvideo.org/djangocon-us-2019/goodbye-print-hello-debugger.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;DjangoCon 2019 -  Goodbye Print, Hello Debugger! by Nina Zakharenko&lt;/p&gt;
&lt;p&gt;Still debugging your code by using print? Learn how to level up your ability to troubleshoot complex code situations by using the power of a fully-featured debugger in this talk aimed at all levels of programming ability.&lt;/p&gt;
&lt;p&gt;This talk was presented at: &lt;a class="reference external" href="https://2019.djangocon.us/talks/goodbye-print-hello-debugger/"&gt;https://2019.djangocon.us/talks/goodbye-print-hello-debugger/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;LINKS:
Follow Nina Zakharenko ðŸ‘‡
On Twitter: &lt;a class="reference external" href="https://twitter.com/nnja"&gt;https://twitter.com/nnja&lt;/a&gt;
Official homepage: &lt;a class="reference external" href="https://nnja.io"&gt;https://nnja.io&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Follow DjangCon US ðŸ‘‡
&lt;a class="reference external" href="https://twitter.com/djangocon"&gt;https://twitter.com/djangocon&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Follow DEFNA ðŸ‘‡
&lt;a class="reference external" href="https://twitter.com/defnado"&gt;https://twitter.com/defnado&lt;/a&gt;
&lt;a class="reference external" href="https://www.defna.org/"&gt;https://www.defna.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Intro music: &amp;quot;This Is How We Quirk It&amp;quot; by Avocado Junkie.
Video production by Confreaks TV.
Captions by White Coat Captioning.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nina Zakharenko</dc:creator><pubDate>Tue, 24 Sep 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-09-24:djangocon-us-2019/goodbye-print-hello-debugger.html</guid></item><item><title>Goodbye Print Statements, Hello Debugger!</title><link>https://pyvideo.org/pycon-au-2019/goodbye-print-statements-hello-debugger.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Still debugging your code with print statements? Learn how to level up your ability to troubleshoot complex code situations by using the power of a fully-featured debugger in this talk aimed at all levels of programming ability.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://2019.pycon-au.org/talks/goodbye-print-statements-hello-debugger"&gt;https://2019.pycon-au.org/talks/goodbye-print-statements-hello-debugger&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Sat Aug  3 11:10:00 2019 at Cockle Bay&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nina Zakharenko</dc:creator><pubDate>Sat, 03 Aug 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-08-03:pycon-au-2019/goodbye-print-statements-hello-debugger.html</guid></item><item><title>Light up your life -- with python and leds - Keynote</title><link>https://pyvideo.org/pycon-us-2019/light-up-your-life-with-python-and-leds-keynote.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Light up your life -- with python and leds - Keynote&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nina Zakharenko</dc:creator><pubDate>Sun, 05 May 2019 15:30:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-05-05:pycon-us-2019/light-up-your-life-with-python-and-leds-keynote.html</guid><category>keynote</category></item><item><title>Light Up Your Life - With Python and LEDs!</title><link>https://pyvideo.org/pycascades-2019/light-up-your-life-with-python-and-leds.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python opens a whole new world of working with wearable electronics. MicroPython and CircuitPython are Python variants that can run with just 256k of storage space and 16k of RAM. Learn how to program LEDs with Python, to light up your life with code and creativity.&lt;/p&gt;
&lt;p&gt;Talk page: &lt;a class="reference external" href="https://2019.pycascades.com/talks/light-up-your-life-with-python-and-leds/"&gt;https://2019.pycascades.com/talks/light-up-your-life-with-python-and-leds/&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nina Zakharenko</dc:creator><pubDate>Sun, 24 Feb 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-02-24:pycascades-2019/light-up-your-life-with-python-and-leds.html</guid></item><item><title>Memory Management in Python - The Basics</title><link>https://pyvideo.org/north-bay-python-2018/memory-management-in-python-the-basics.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;As a new python developer, do you find memory management in Python
confusing? Come to this talk to learn about the basics of how Memory
Management works in Python. We'll cover the concepts of reference
counting, garbage collection, weak references, &lt;strong&gt;slots&lt;/strong&gt;, and the Global
Interpreter Lock.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nina Zakharenko</dc:creator><pubDate>Sun, 04 Nov 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-11-04:north-bay-python-2018/memory-management-in-python-the-basics.html</guid></item><item><title>Technical Debt: the Code Monster in your Closet</title><link>https://pyvideo.org/pyparis-2018/technical-debt-the-code-monster-in-your-closet.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nina Zakharenko</dc:creator><pubDate>Wed, 14 Nov 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-11-14:pyparis-2018/technical-debt-the-code-monster-in-your-closet.html</guid></item><item><title>Code Review Skills for Pythonistas</title><link>https://pyvideo.org/djangocon-us-2018/code-review-skills-for-pythonistas.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;As teams and projects grow, code review becomes increasingly important
to support the maintainability of complex codebases. In this talk, Iâ€™ll
cover guidelines for writing consistent python code beyond pep8, how to
look out for common python gotchas, and what python tools are available
to automate various parts of the review process. Most importantly, Iâ€™ll
cover the human aspect of code reviews - how we can be better at
approaching reviews with empathy and understanding from the perspective
of both a reviewer and a submitter. Following these successful code
review practices will lead to happier teams and healthier code bases.&lt;/p&gt;
&lt;p&gt;This talk is useful for python developers with any amount of experience.
No prerequisite knowledge is necessary.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;For those who are just starting out, it will be a great general
overview.&lt;/li&gt;
&lt;li&gt;Intermediate developers may not know about the wide variety of
tooling thatâ€™s available.&lt;/li&gt;
&lt;li&gt;Advanced developers will learn techniques for performing code reviews
with empathy.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This talk will enable you to have better code reviews on your teams at
work, and a better approach to code reviews in open source projects.
Youâ€™ll leave with 3 main takeaways:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Code Reviews are most effective when conducted with empathy. If you
do reviews with growth and learning in mind, they become tools for
sharing knowledge instead of an opportunity to bruise egos or show
off esoteric knowledge.&lt;/li&gt;
&lt;li&gt;Python has powerful tooling available for code reviews such as pep8
as a style guide, pylint as a linter, coverage.py to identify test
coverage, and vulture to identify dead code.&lt;/li&gt;
&lt;li&gt;That python style guides beyond pep8 have clear benefits in terms of
producing more consistent code thatâ€™s easier to review and easier to
maintain.&lt;/li&gt;
&lt;/ol&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nina Zakharenko</dc:creator><pubDate>Mon, 15 Oct 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-10-15:djangocon-us-2018/code-review-skills-for-pythonistas.html</guid></item><item><title>Code Review Skills for Pythonistas</title><link>https://pyvideo.org/europython-2018/code-review-skills-for-pythonistas.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;As teams and projects grow, code review becomes increasingly important
to support the maintainability of complex codebases. In this talk, Iâ€™ll
cover guidelines for writing consistent python code beyond pep8, how to
look out for common python gotchas, and what python tools are available
to automate various parts of the review process. Most importantly, Iâ€™ll
cover the human aspect of code reviews - how we can be better at
approaching reviews with empathy and understanding from the perspective
of both a reviewer and a submitter. Following these successful code
review practices will lead to happier teams and healthier code bases.&lt;/p&gt;
&lt;p&gt;This talk is useful for python developers with any amount of experience.
No prerequisite knowledge is necessary. - For those who are just
starting out, it will be a great general overview. - Intermediate
developers may not know about the wide variety of tooling thatâ€™s
available. - Advanced developers will learn techniques for performing
code reviews with empathy.&lt;/p&gt;
&lt;p&gt;This talk will enable you to have better code reviews on your teams at
work, and a better approach to code reviews in open source projects.
Youâ€™ll leave with 3 main takeaways: 1. Code Reviews are most effective
when conducted with empathy. If you do reviews with growth and learning
in mind, they become tools for sharing knowledge instead of an
opportunity to bruise egos or show off esoteric knowledge. 2. Python has
powerful tooling available for code reviews such as pep8 as a style
guide, pylint as a linter, coverage.py to identify test coverage, and
vulture to identify dead code. 3. That python style guides beyond pep8
have clear benefits in terms of producing more consistent code thatâ€™s
easier to review and easier to maintain.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nina Zakharenko</dc:creator><pubDate>Thu, 26 Jul 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-07-26:europython-2018/code-review-skills-for-pythonistas.html</guid></item><item><title>Elegant solutions for everyday Python problems</title><link>https://pyvideo.org/pycon-ca-2017/elegant-solutions-for-everyday-python-problems.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Are you an intermediate Python developer looking to level up? Luckily, Python provides us with a unique set of tools to make our code more elegant and readable. Iâ€™ll share practical pythonic solutions for supercharging your code with tools like Decorators, Context Managers, and Mixins.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nina Zakharenko</dc:creator><pubDate>Sun, 19 Nov 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-11-19:pycon-ca-2017/elegant-solutions-for-everyday-python-problems.html</guid></item><item><title>Elegant Solutions For Everyday Python Problems</title><link>https://pyvideo.org/pycon-us-2018/elegant-solutions-for-everyday-python-problems.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Are you an intermediate python developer looking to level up? Luckily, python provides us with a unique set of tools to make our code more elegant and readable by providing language features that make your code more intuitive and cut down on repetition. In this talk, Iâ€™ll share practical pythonic solutions for supercharging your code.&lt;/p&gt;
&lt;p&gt;Specifically, I'll cover:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;What magic methods are, and show you how to use them in your own code.&lt;/li&gt;
&lt;li&gt;When and how to use partial methods.&lt;/li&gt;
&lt;li&gt;An explanation of ContextManagers and Decorators, as well as multiple techniques for implementing them.&lt;/li&gt;
&lt;li&gt;How to effectively use &lt;cite&gt;NamedTuples&lt;/cite&gt;, and even subclass and extend them!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Lastly, I'll go over some example code that ties many of these techniques together in a cohesive way. You'll leave this talk feeling confident about using these tools and techniques in your next python project!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nina Zakharenko</dc:creator><pubDate>Fri, 11 May 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-05-11:pycon-us-2018/elegant-solutions-for-everyday-python-problems.html</guid></item><item><title>Technical Debt - The code monster in everyone's closet</title><link>https://pyvideo.org/montreal-python/technical-debt-the-code-monster-in-everyones-closet.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Montreal, April 13, 2015 - As Nina Zakharenko puts it, technical debt is the code monster hiding in everyone's closet. If you ignore it, it will terrorize you at night. To banish it and re-gain your productivity, you'll need to face it head on.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Nina Zakharenko: &lt;a class="reference external" href="http://sflx.ca/ninaz"&gt;http://sflx.ca/ninaz&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Slides: &lt;a class="reference external" href="http://sflx.ca/techdebt"&gt;http://sflx.ca/techdebt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;MP53: &lt;a class="reference external" href="http://sflx.ca/mp53e"&gt;http://sflx.ca/mp53e&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Recorded and edited live by &amp;#64;ChristianAubry at MontrÃ©al-Python 53 (Sanctified Terabit) with a little help from Savoir-faire Linux (&lt;a class="reference external" href="http://sflx.ca/jobs"&gt;http://sflx.ca/jobs&lt;/a&gt;).&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nina Zakharenko</dc:creator><pubDate>Mon, 13 Apr 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-04-13:montreal-python/technical-debt-the-code-monster-in-everyones-closet.html</guid></item><item><title>Elegant Solutions for Everyday Python Problems</title><link>https://pyvideo.org/pycon-russia-2017/elegant-solutions-for-everyday-python-problems.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Are you an intermediate Python programmer who becomes frustrated by copy and pasting or duplicating code? Luckily, the Python programming language provides us with a unique set of tools to make our code more elegant, readable, and reduce duplication. In this talk, Iâ€™ll share common anti-patterns in python programs and show you practical pythonic solutions for supercharging your code with tools like Decorators, Context Managers, Mixins, and Lambdas.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nina Zakharenko</dc:creator><pubDate>Sun, 16 Jul 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-07-16:pycon-russia-2017/elegant-solutions-for-everyday-python-problems.html</guid></item><item><title>Memory Management in Python - The Basics</title><link>https://pyvideo.org/pycon-us-2016/nina-zakharenko-memory-management-in-python-the-basics-pycon-2016.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Speaker: Nina Zakharenko&lt;/p&gt;
&lt;p&gt;As a new python developer, do you find memory management in Python confusing? Come to this talk to learn about the basics of how Memory Management works in Python. We'll cover the concepts of reference counting, garbage collection, weak references, __slots__, and the Global Interpreter Lock.&lt;/p&gt;
&lt;p&gt;Slides can be found at: &lt;a class="reference external" href="https://speakerdeck.com/pycon2016"&gt;https://speakerdeck.com/pycon2016&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/PyCon/2016-slides"&gt;https://github.com/PyCon/2016-slides&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nina Zakharenko</dc:creator><pubDate>Tue, 31 May 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-05-31:pycon-us-2016/nina-zakharenko-memory-management-in-python-the-basics-pycon-2016.html</guid></item><item><title>AngularJS + Django = A Perfect Match</title><link>https://pyvideo.org/djangocon-us-2014/angularjs-django-a-perfect-match.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;AngularJS is a powerful MVC framework that can easily integrate with
Django templates.&lt;/p&gt;
&lt;p&gt;Let's walk through integrating the two for fantastic results. The result
is a fast, dynamic single page application.&lt;/p&gt;
&lt;p&gt;Help us caption &amp;amp; translate this video!&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://amara.org/v/FOP2/"&gt;http://amara.org/v/FOP2/&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nina Zakharenko</dc:creator><pubDate>Wed, 17 Sep 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-09-17:djangocon-us-2014/angularjs-django-a-perfect-match.html</guid></item><item><title>Django REST API - So easy you can learn it in 25 minutes</title><link>https://pyvideo.org/djangocon-us-2014/django-rest-api-so-easy-you-can-learn-it-in-25.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Django REST Framework can make creating a RESTFUL api quick and easy.&lt;/p&gt;
&lt;p&gt;Join me as I go over: - What makes an API Restful - How Serializers can
make representing your existing models in JSON a breeze - What the built
in Views provide for you, and how to provide authentication for your API
- How to route to your new Endpoints - Last but not least, how to Unit
Test them&lt;/p&gt;
&lt;p&gt;Help us caption &amp;amp; translate this video!&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://amara.org/v/FNEj/"&gt;http://amara.org/v/FNEj/&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nina Zakharenko</dc:creator><pubDate>Fri, 12 Sep 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-09-12:djangocon-us-2014/django-rest-api-so-easy-you-can-learn-it-in-25.html</guid></item><item><title>Technical Debt</title><link>https://pyvideo.org/pycon-us-2015/technical-debt.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Technical debt is the code monster hiding in everyone's closet. If you
ignore it, it will terrorize you at night. To banish it and re-gain your
productivity, you'll need to face it head on.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nina Zakharenko</dc:creator><pubDate>Sat, 11 Apr 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-04-11:pycon-us-2015/technical-debt.html</guid></item></channel></rss>