<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/event_pyohio-2016.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2016-07-31T00:00:00+00:00</updated><entry><title>Advanced Python Debugging Techniques Using GDB</title><link href="https://pyvideo.org/pyohio-2016/advanced-python-debugging-techniques-using-gdb.html" rel="alternate"></link><published>2016-07-31T00:00:00+00:00</published><updated>2016-07-31T00:00:00+00:00</updated><author><name>Colin Stolley</name></author><id>tag:pyvideo.org,2016-07-31:pyohio-2016/advanced-python-debugging-techniques-using-gdb.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk will examine why and how to use gdb to debug python code and walk through a live example or two.&lt;/p&gt;
</summary></entry><entry><title>Common asynchronous patterns in Python</title><link href="https://pyvideo.org/pyohio-2016/common-asynchronous-patterns-in-python.html" rel="alternate"></link><published>2016-07-31T00:00:00+00:00</published><updated>2016-07-31T00:00:00+00:00</updated><author><name>Ron Martin</name></author><id>tag:pyvideo.org,2016-07-31:pyohio-2016/common-asynchronous-patterns-in-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk will analyze a small example problem and explore various ways to improve its performance using various asynchronous tools available in Python.&lt;/p&gt;
</summary></entry><entry><title>Exploring Function Annotations</title><link href="https://pyvideo.org/pyohio-2016/exploring-function-annotations.html" rel="alternate"></link><published>2016-07-31T00:00:00+00:00</published><updated>2016-07-31T00:00:00+00:00</updated><author><name>Adam Forsyth</name></author><id>tag:pyvideo.org,2016-07-31:pyohio-2016/exploring-function-annotations.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python's function annotations allow you to provide metadata about a function's inputs and outputs. Most often, these annotations are used for type checking or type casting. I'll talk through examples of each, including &lt;cite&gt;typing&lt;/cite&gt; from the Python 3.5 standard library and the &lt;cite&gt;mypy&lt;/cite&gt; static type checker. This talk expects basic knowledge of Python but no experience with function annotations is needed.&lt;/p&gt;
</summary></entry><entry><title>Fake It Before You Make It: Mocking Your Way to Better HTTP APIs</title><link href="https://pyvideo.org/pyohio-2016/fake-it-before-you-make-it-mocking-your-way-to-better-http-apis.html" rel="alternate"></link><published>2016-07-31T00:00:00+00:00</published><updated>2016-07-31T00:00:00+00:00</updated><author><name>Ian Zelikman</name></author><id>tag:pyvideo.org,2016-07-31:pyohio-2016/fake-it-before-you-make-it-mocking-your-way-to-better-http-apis.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;HTTP/RESTful APIs are often designed and implemented before a client gets to see how they work. Then once an API is made public it can be hard to change. Let's discuss how we can improve this process by explicitly designing the API contract and getting client feedback before implementation. We will examine the process which promotes building HTTP APIs with a design first approach.&lt;/p&gt;
</summary></entry><entry><title>For those about to Mock I salute you!</title><link href="https://pyvideo.org/pyohio-2016/for-those-about-to-mock-i-salute-you.html" rel="alternate"></link><published>2016-07-31T00:00:00+00:00</published><updated>2016-07-31T00:00:00+00:00</updated><author><name>Jason Myers</name></author><id>tag:pyvideo.org,2016-07-31:pyohio-2016/for-those-about-to-mock-i-salute-you.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Testing python applications can be confusing, and leave you in a daze about what the proper way to test is when creating an API or accessing a remote service. Let's explore the testing world with a gentle introduction to unittest, py.test, mock, gabbi, and betamax. We'll learn how to isolate our tests from databases, APIs and third party libraries.&lt;/p&gt;
</summary></entry><entry><title>Got Python I/O: IoT Development in Python via GPIO</title><link href="https://pyvideo.org/pyohio-2016/got-python-io-iot-development-in-python-via-gpio.html" rel="alternate"></link><published>2016-07-31T00:00:00+00:00</published><updated>2016-07-31T00:00:00+00:00</updated><author><name>Adam Englander</name></author><id>tag:pyvideo.org,2016-07-31:pyohio-2016/got-python-io-iot-development-in-python-via-gpio.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Learn how to build real Internet of Things (IoT) applications with pure Python and General Purpose Input/Output (GPIO). Thanks to devices like the Raspberry Pi and Intel Edison, full Linux systems with GPIO are accessible to the masses. Learn how build a true IoT device using only hardware and core Python libraries and hardware costing less than $50 US.&lt;/p&gt;
</summary></entry><entry><title>How To Create Your First PyPI Package</title><link href="https://pyvideo.org/pyohio-2016/how-to-create-your-first-pypi-package.html" rel="alternate"></link><published>2016-07-31T00:00:00+00:00</published><updated>2016-07-31T00:00:00+00:00</updated><author><name>Justin Beall</name></author><id>tag:pyvideo.org,2016-07-31:pyohio-2016/how-to-create-your-first-pypi-package.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Learning how to contribute is the first fundamental step in joining the open source community. This talk will be based upon my own personal experience in creating my first PyPI package. As a seasoned developer, the task of uploading a package to PyPI seemed extremely complicated. But, in reality it is simple and anyone can do it.&lt;/p&gt;
</summary></entry><entry><title>"It will be easy" - The Trials of Updating a Product from Python 2 to 3</title><link href="https://pyvideo.org/pyohio-2016/it-will-be-easy-the-trials-of-updating-a-product-from-python-2-to-3.html" rel="alternate"></link><published>2016-07-31T00:00:00+00:00</published><updated>2016-07-31T00:00:00+00:00</updated><author><name>Zach Wick</name></author><id>tag:pyvideo.org,2016-07-31:pyohio-2016/it-will-be-easy-the-trials-of-updating-a-product-from-python-2-to-3.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk will be a retrospective on what was seemingly a weekend project that turned into an odyssey full of rabbit holes and dead ends. In this talk I'll touch on what was expected, what happened, what you should look out for during your own migrations, and what we learned along the way.&lt;/p&gt;
</summary></entry><entry><title>Maybe I shouldn't be a programmer</title><link href="https://pyvideo.org/pyohio-2016/maybe-i-shouldnt-be-a-programmer.html" rel="alternate"></link><published>2016-07-31T00:00:00+00:00</published><updated>2016-07-31T00:00:00+00:00</updated><author><name>Derik Pell</name></author><id>tag:pyvideo.org,2016-07-31:pyohio-2016/maybe-i-shouldnt-be-a-programmer.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Imposter syndrome isn't just a catch phrase, it's a real crisis of confidence that we all face as developers, one which can be especially hard for new developers who may not realize that it often comes with the job. This talk will help bring this topic to light by discussing things that can cause imposter syndrome and ways of coping and getting through these bumps.&lt;/p&gt;
</summary></entry><entry><title>Modding videogames with Python and Blender</title><link href="https://pyvideo.org/pyohio-2016/modding-videogames-with-python-and-blender.html" rel="alternate"></link><published>2016-07-31T00:00:00+00:00</published><updated>2016-07-31T00:00:00+00:00</updated><author><name>Sebastian Brachi</name></author><id>tag:pyvideo.org,2016-07-31:pyohio-2016/modding-videogames-with-python-and-blender.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Video games offer much more than just playing. Artists and programmers explore their internal working to modify them and offer unique new experiences. In this talk, open source 3d suite Blender is used to show how to import and export 3d models using its scripting language, Python 3.5, for both open and closed source formats, as well as tips and tricks for working with undocumented binary data.&lt;/p&gt;
</summary></entry><entry><title>Peering into the black box: tips for visualizing your program's behavior</title><link href="https://pyvideo.org/pyohio-2016/peering-into-the-black-box-tips-for-visualizing-your-programs-behavior.html" rel="alternate"></link><published>2016-07-31T00:00:00+00:00</published><updated>2016-07-31T00:00:00+00:00</updated><author><name>Matthew Boehm</name></author><id>tag:pyvideo.org,2016-07-31:pyohio-2016/peering-into-the-black-box-tips-for-visualizing-your-programs-behavior.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;How many hours have you spent staring at walls of code or logs, hopping from file to file in an effort to find a bug or understand what your computer is doing? Let's explore a number of custom techniques and off-the-shelf tools you can use to see your program in a different light and better understand what's happening under the hood.&lt;/p&gt;
</summary></entry><entry><title>Postmortem: Evolution of an Event recording solution</title><link href="https://pyvideo.org/pyohio-2016/postmortem-evolution-of-an-event-recording-solution.html" rel="alternate"></link><published>2016-07-31T00:00:00+00:00</published><updated>2016-07-31T00:00:00+00:00</updated><author><name>Michael Robellard</name></author><id>tag:pyvideo.org,2016-07-31:pyohio-2016/postmortem-evolution-of-an-event-recording-solution.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Most developers have used Google Analytics to record pageviews, visits, and events on their websites. Google Analytics does not allow you to track individual users events. At Noggin we needed that information at the user level so our customer success team could now how individual users where using our software. So we set about solving this problem. This talk is the story of that solution.&lt;/p&gt;
</summary></entry><entry><title>Python and Raspbery Pi in the Public Library</title><link href="https://pyvideo.org/pyohio-2016/python-and-raspbery-pi-in-the-public-library.html" rel="alternate"></link><published>2016-07-31T00:00:00+00:00</published><updated>2016-07-31T00:00:00+00:00</updated><author><name>Qumisha Goss</name></author><id>tag:pyvideo.org,2016-07-31:pyohio-2016/python-and-raspbery-pi-in-the-public-library.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk is about creating diversity in the Python community and non-traditional methods of teaching  and attracting a diverse population.  This talk will cover the how and why of teaching python in a library to urban youth. We will talk about the current state of Detroit, as well as the benefits and challenges of  educational programs in a public library.&lt;/p&gt;
</summary></entry><entry><title>Rules for Radicals: Changing the Culture of Python at Facebook</title><link href="https://pyvideo.org/pyohio-2016/rules-for-radicals-changing-the-culture-of-python-at-facebook.html" rel="alternate"></link><published>2016-07-31T00:00:00+00:00</published><updated>2016-07-31T00:00:00+00:00</updated><author><name>Jason Fried</name></author><id>tag:pyvideo.org,2016-07-31:pyohio-2016/rules-for-radicals-changing-the-culture-of-python-at-facebook.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Today, services built on Python 3.5 using asyncio are widely used at Facebook. But as recently as May of 2014 it was actually impossible to use Python 3 at Facebook. Come learn how we cut the Gordian Knot of dependencies and social aversion to the point where new services are now being written in Python 3 and existing codebases have plans to move to Python 3.5.&lt;/p&gt;
</summary></entry><entry><title>Snakes in a Browser</title><link href="https://pyvideo.org/pyohio-2016/snakes-in-a-browser.html" rel="alternate"></link><published>2016-07-31T00:00:00+00:00</published><updated>2016-07-31T00:00:00+00:00</updated><author><name>Russell Keith-Magee</name></author><id>tag:pyvideo.org,2016-07-31:pyohio-2016/snakes-in-a-browser.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;We all know that Python and Django can be used to write server-side software, but what about the client side? What about the browser? Can you use Python to power client-side interactions? Can you deploy Python logic (such as validation logic) on both the client and the server?&lt;/p&gt;
</summary></entry><entry><title>Stronger Than Fear: Mental Health in the Developer Community</title><link href="https://pyvideo.org/pyohio-2016/stronger-than-fear-mental-health-in-the-developer-community.html" rel="alternate"></link><published>2016-07-31T00:00:00+00:00</published><updated>2016-07-31T00:00:00+00:00</updated><author><name>Ed Finkler</name></author><id>tag:pyvideo.org,2016-07-31:pyohio-2016/stronger-than-fear-mental-health-in-the-developer-community.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Mental disorders are the largest contributor to disease burden in North America, but the stigma surrounding it prevents us from meeting this challenge. In this talk, we'll examine the state of mental health awareness in the developer workplace, why most developers feel it isn't safe to talk about mental health, and what we can do to change the culture and save lives.&lt;/p&gt;
</summary></entry><entry><title>Sunday Lightning Talks</title><link href="https://pyvideo.org/pyohio-2016/sunday-lightning-talks.html" rel="alternate"></link><published>2016-07-31T00:00:00+00:00</published><updated>2016-07-31T00:00:00+00:00</updated><author><name>Brandon Rhodes</name></author><id>tag:pyvideo.org,2016-07-31:pyohio-2016/sunday-lightning-talks.html</id><summary type="html"></summary><category term="lightning talks"></category></entry><entry><title>We Don’t Need No Stinkin’ PDF Library: Build PDFs with Python the Lazy Way</title><link href="https://pyvideo.org/pyohio-2016/we-dont-need-no-stinkin-pdf-library-build-pdfs-with-python-the-lazy-way.html" rel="alternate"></link><published>2016-07-31T00:00:00+00:00</published><updated>2016-07-31T00:00:00+00:00</updated><author><name>Philip Semanchuk</name></author><id>tag:pyvideo.org,2016-07-31:pyohio-2016/we-dont-need-no-stinkin-pdf-library-build-pdfs-with-python-the-lazy-way.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python has some high-quality libraries for creating PDFs from scratch. But instead of using a library, why not let Libre/OpenOffice do most of the heavy lifting?&lt;/p&gt;
</summary></entry><entry><title>An Introduction to Recursion</title><link href="https://pyvideo.org/pyohio-2016/an-introduction-to-recursion.html" rel="alternate"></link><published>2016-07-30T00:00:00+00:00</published><updated>2016-07-30T00:00:00+00:00</updated><author><name>Rinita Gulliani</name></author><id>tag:pyvideo.org,2016-07-30:pyohio-2016/an-introduction-to-recursion.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Technical interviews that cover computer science theory are frequently a part of the software engineering interview process. Recursion is a topic that is often covered in these interviews, but many developers find recursion confusing. This talk will introduce the concept of recursion in a simple and detailed manner. The talk will conclude with a real coding interview problem.&lt;/p&gt;
</summary></entry><entry><title>AWS Lambda: From Curiosity to Production</title><link href="https://pyvideo.org/pyohio-2016/aws-lambda-from-curiosity-to-production.html" rel="alternate"></link><published>2016-07-30T00:00:00+00:00</published><updated>2016-07-30T00:00:00+00:00</updated><author><name>Matt Land</name></author><id>tag:pyvideo.org,2016-07-30:pyohio-2016/aws-lambda-from-curiosity-to-production.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;To make Amazon Lambda production ready, it needs processes like Continuous Integration (testing) and Continuous Delivery. To achieve that, we will investigate how AWS lambda is powered. Next, we will cover creating a testing environment that can interact with AWS while allowing for inspection and exploration. Finally, lambda versions and aliases will be leveraged to accomplish ‘deployments’.&lt;/p&gt;
</summary></entry><entry><title>Building an Analytics Platform</title><link href="https://pyvideo.org/pyohio-2016/building-an-analytics-platform.html" rel="alternate"></link><published>2016-07-30T00:00:00+00:00</published><updated>2016-07-30T00:00:00+00:00</updated><author><name>Jeff Klukas</name></author><id>tag:pyvideo.org,2016-07-30:pyohio-2016/building-an-analytics-platform.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Let's explore how Simple, a consumer banking company, built its analytics capabilities from ad-hoc queries against production databases to a comprehensive data warehouse powering near-real time dashboards in less than a year. We'll discuss the high-level architecture, then dive into how Simple uses Python to support its warehouse with an admin interface and data transformation tools.&lt;/p&gt;
</summary></entry><entry><title>Continuous Integration For The Win!</title><link href="https://pyvideo.org/pyohio-2016/continuous-integration-for-the-win.html" rel="alternate"></link><published>2016-07-30T00:00:00+00:00</published><updated>2016-07-30T00:00:00+00:00</updated><author><name>Randy Syring</name></author><id>tag:pyvideo.org,2016-07-30:pyohio-2016/continuous-integration-for-the-win.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Learn how to increase the quality of your code and improve team productivity by leveraging a CI pipeline to run tests, lint, and measure code coverage. Then, integrate all that knowledge right into a GitHub pull request for easy team review &amp;amp; verification before deployment.&lt;/p&gt;
</summary></entry><entry><title>Docker as a replacement for virtualenv</title><link href="https://pyvideo.org/pyohio-2016/docker-as-a-replacement-for-virtualenv.html" rel="alternate"></link><published>2016-07-30T00:00:00+00:00</published><updated>2016-07-30T00:00:00+00:00</updated><author><name>David J Felix</name></author><id>tag:pyvideo.org,2016-07-30:pyohio-2016/docker-as-a-replacement-for-virtualenv.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Virtualenv and/or pyenv have, for a long time, been the suggested way to begin a python project and practical necessities for production code with multiple python applications. In this talk, I'll introduce docker as a generalized alternative to virtualenv/pyenv's and try my best to convince you that Virtualenv/pyenv's reign can be usurped for most cases.&lt;/p&gt;
</summary></entry><entry><title>Exchanging Data Wirelessly with Bluetooth LE and ZigBee</title><link href="https://pyvideo.org/pyohio-2016/exchanging-data-wirelessly-with-bluetooth-le-and-zigbee.html" rel="alternate"></link><published>2016-07-30T00:00:00+00:00</published><updated>2016-07-30T00:00:00+00:00</updated><author><name>Zach Steindler</name></author><id>tag:pyvideo.org,2016-07-30:pyohio-2016/exchanging-data-wirelessly-with-bluetooth-le-and-zigbee.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;It's really easy to write a Python program that goes over WiFi (IEEE 802.11). But what about wireless protocols that came out of IEEE 802.15 like Bluetooth or ZigBee? This presentation will familiarize you with these protocols and show you how to write Python programs that can exchange data wirelessly.&lt;/p&gt;
</summary></entry><entry><title>From Flying Circus to Holy Grail: Migrating the Twilio API from PHP to Python</title><link href="https://pyvideo.org/pyohio-2016/from-flying-circus-to-holy-grail-migrating-the-twilio-api-from-php-to-python.html" rel="alternate"></link><published>2016-07-30T00:00:00+00:00</published><updated>2016-07-30T00:00:00+00:00</updated><author><name>Sam Kitajima-Kimbrel</name></author><id>tag:pyvideo.org,2016-07-30:pyohio-2016/from-flying-circus-to-holy-grail-migrating-the-twilio-api-from-php-to-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Legacy code is a hard problem for any growing application. Complete rewrites are expensive and prone to failure, so how &lt;em&gt;does&lt;/em&gt; one go about replacing that large, crufty codebase with something easier to maintain? We’ll discuss the strategies used at Twilio to migrate a large REST API, piece by piece, out of a monolithic PHP system into a fleet of services federated by a Python proxy layer.&lt;/p&gt;
</summary></entry><entry><title>Infrastructure as Code: from 0 to 1000 servers with Python</title><link href="https://pyvideo.org/pyohio-2016/infrastructure-as-code-from-0-to-1000-servers-with-python.html" rel="alternate"></link><published>2016-07-30T00:00:00+00:00</published><updated>2016-07-30T00:00:00+00:00</updated><author><name>Eric Miller</name></author><id>tag:pyvideo.org,2016-07-30:pyohio-2016/infrastructure-as-code-from-0-to-1000-servers-with-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Follow the journey of a fictional technology startup, as they struggle to keep up with increasing infrastructure demands of their unexpectedly popular web application. Learn how to deploy and manage infrastructure as code, using familiar tools such as text editor of choice, Git, and of course lots of Python! (Level is Intermediate - Experienced)&lt;/p&gt;
</summary></entry><entry><title>Integrating Python into the CLR with Python for .NET</title><link href="https://pyvideo.org/pyohio-2016/integrating-python-into-the-clr-with-python-for-net.html" rel="alternate"></link><published>2016-07-30T00:00:00+00:00</published><updated>2016-07-30T00:00:00+00:00</updated><author><name>Hussein Farran</name></author><id>tag:pyvideo.org,2016-07-30:pyohio-2016/integrating-python-into-the-clr-with-python-for-net.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python for .NET is a project dedicated to being able to call into Python from the CLR. Where IronPython has fallen off as the .NET Python prodigal son Python for .NET has picked up the slack. Python for .NET (or pythonnet for short) is an integration of the C Python engine with .NET. We'll be going through the uses and methods of integration of Python with your .NET projects.&lt;/p&gt;
</summary></entry><entry><title>Keynote: Fear and Awaiting in Async: A Savage Journey to the Heart of the Coroutine Dream</title><link href="https://pyvideo.org/pyohio-2016/keynote-fear-and-awaiting-in-async-a-savage-journey-to-the-heart-of-the-coroutine-dream.html" rel="alternate"></link><published>2016-07-30T00:00:00+00:00</published><updated>2016-07-30T00:00:00+00:00</updated><author><name>David Beazley</name></author><id>tag:pyvideo.org,2016-07-30:pyohio-2016/keynote-fear-and-awaiting-in-async-a-savage-journey-to-the-heart-of-the-coroutine-dream.html</id><summary type="html"></summary></entry><entry><title>Lessons learned leading teams and projects and products</title><link href="https://pyvideo.org/pyohio-2016/lessons-learned-leading-teams-and-projects-and-products.html" rel="alternate"></link><published>2016-07-30T00:00:00+00:00</published><updated>2016-07-30T00:00:00+00:00</updated><author><name>Richard Harding</name></author><id>tag:pyvideo.org,2016-07-30:pyohio-2016/lessons-learned-leading-teams-and-projects-and-products.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;I vowed never to become management and to keep on developing and building great stuff. I took a team lead position and that started my downfall of learning to take pride in leading a team, by collaborating, unblocking, mentoring, and architecting my way to building great stuff using the power of the team.&lt;/p&gt;
</summary></entry><entry><title>Let's Make Better Command Line Applications</title><link href="https://pyvideo.org/pyohio-2016/lets-make-better-command-line-applications.html" rel="alternate"></link><published>2016-07-30T00:00:00+00:00</published><updated>2016-07-30T00:00:00+00:00</updated><author><name>Dave Forgac</name></author><id>tag:pyvideo.org,2016-07-30:pyohio-2016/lets-make-better-command-line-applications.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python is great for making command line applications but a lot of the applications out in the world aren't that great. Why is that? Can we do better? Yes! Let's discuss how.&lt;/p&gt;
</summary></entry><entry><title>Managing Infrastructure with Python, Fabric and Ansible</title><link href="https://pyvideo.org/pyohio-2016/managing-infrastructure-with-python-fabric-and-ansible.html" rel="alternate"></link><published>2016-07-30T00:00:00+00:00</published><updated>2016-07-30T00:00:00+00:00</updated><author><name>Tim Henderson</name></author><id>tag:pyvideo.org,2016-07-30:pyohio-2016/managing-infrastructure-with-python-fabric-and-ansible.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Whether managing virtual servers in the cloud or actual hardware on premise, infrastructure automation has become an essential tool for all developers. This talk will introduce the basics of managing servers with Python using Fabric and Ansible. I will give a brief background on the theory of infrastructure automation, an overview of Fabric and Ansible, and show an outline of a complete system.&lt;/p&gt;
</summary></entry><entry><title>Python Logging: A meditation on silent failures</title><link href="https://pyvideo.org/pyohio-2016/python-logging-a-meditation-on-silent-failures.html" rel="alternate"></link><published>2016-07-30T00:00:00+00:00</published><updated>2016-07-30T00:00:00+00:00</updated><author><name>Jess Unrein</name></author><id>tag:pyvideo.org,2016-07-30:pyohio-2016/python-logging-a-meditation-on-silent-failures.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Logging is a part of sane, stable development. Python developers should treat logging with the same weight that we take unit tests. Logs can be just as important as test coverage for unearthing breaking changes in code. This talk will introduce the concept of logging, its use cases, and how to set up a custom log formatter you can tailor to your application's specific needs.&lt;/p&gt;
</summary></entry><entry><title>Saturday Lightning Talks</title><link href="https://pyvideo.org/pyohio-2016/saturday-lightning-talks.html" rel="alternate"></link><published>2016-07-30T00:00:00+00:00</published><updated>2016-07-30T00:00:00+00:00</updated><author><name>Matt Behrens</name></author><id>tag:pyvideo.org,2016-07-30:pyohio-2016/saturday-lightning-talks.html</id><summary type="html"></summary><category term="lightning talks"></category></entry><entry><title>Small Batch Artisanal Bots: Let's Make Friends</title><link href="https://pyvideo.org/pyohio-2016/small-batch-artisanal-bots-lets-make-friends.html" rel="alternate"></link><published>2016-07-30T00:00:00+00:00</published><updated>2016-07-30T00:00:00+00:00</updated><author><name>Elizabeth Uselton</name></author><id>tag:pyvideo.org,2016-07-30:pyohio-2016/small-batch-artisanal-bots-lets-make-friends.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Bots are a fun, creative, community oriented project. They are perfect for a beginning programmer looking to build something cool, but open ended enough to hold the interest of an experienced developer. In this talk we'll go over the Python tools for building a great twitter bot, including where to find fun data sets, hosting your bot, delayed jobs, and examples of weird and wonderful bots.&lt;/p&gt;
</summary></entry><entry><title>Static Code Analysis with Python</title><link href="https://pyvideo.org/pyohio-2016/static-code-analysis-with-python.html" rel="alternate"></link><published>2016-07-30T00:00:00+00:00</published><updated>2016-07-30T00:00:00+00:00</updated><author><name>Andrew Wolfe</name></author><id>tag:pyvideo.org,2016-07-30:pyohio-2016/static-code-analysis-with-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Auditing a code base for code formatting mistakes, potential security vulnerabilities or defects can be time consuming. Static code analysis will let the computer do that for you. Learn how to use code static analysis to catch errors early and improve code quality in your Python codebase.&lt;/p&gt;
</summary></entry><entry><title>Using Python to Spy on Your Friends: Recon-ng and Open Source Intelligence</title><link href="https://pyvideo.org/pyohio-2016/using-python-to-spy-on-your-friends-recon-ng-and-open-source-intelligence.html" rel="alternate"></link><published>2016-07-30T00:00:00+00:00</published><updated>2016-07-30T00:00:00+00:00</updated><author><name>Brian King</name></author><id>tag:pyvideo.org,2016-07-30:pyohio-2016/using-python-to-spy-on-your-friends-recon-ng-and-open-source-intelligence.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Come see what OSINT is and how its being used. We'll look at some Python-based tools and how you might use and improve them.&lt;/p&gt;
</summary></entry><entry><title>Wrapping Go in Python</title><link href="https://pyvideo.org/pyohio-2016/wrapping-go-in-python.html" rel="alternate"></link><published>2016-07-30T00:00:00+00:00</published><updated>2016-07-30T00:00:00+00:00</updated><author><name>Marcus Willock</name></author><id>tag:pyvideo.org,2016-07-30:pyohio-2016/wrapping-go-in-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk will call various shared object files (created with Go) in Python and systematically check what we can and cannot do with the functions in the shared object file. This check includes passing various types, such as int, float, lists, and dictionaries, into the shared object file function, and checking what we can and cannot return from the shared object function.&lt;/p&gt;
</summary></entry></feed>