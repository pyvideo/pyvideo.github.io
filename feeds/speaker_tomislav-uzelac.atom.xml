<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_tomislav-uzelac.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2017-07-11T00:00:00+00:00</updated><entry><title>Making Games with Python: Mission Impossible?</title><link href="https://pyvideo.org/europython-2017/making-games-with-python-mission-impossible.html" rel="alternate"></link><published>2017-07-11T00:00:00+00:00</published><updated>2017-07-11T00:00:00+00:00</updated><author><name>Martin Christen</name></author><id>tag:pyvideo.org,2017-07-11:europython-2017/making-games-with-python-mission-impossible.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A discussion about making full-featured, commercial games in python,
both 2D and 3D.&lt;/p&gt;
&lt;p&gt;Looking at state of the art approaches to using python in gaming, we
will compare the alternatives: pygame (2D API), OpenGL (via
pygame/pySDL2), Unreal Engine 4 and the Godot Engine (with further
comparison to Unity 3D game engine).&lt;/p&gt;
&lt;p&gt;We will also look at other benefits of using python in the gaming
context, such as integration with 3D modelling software, scripting
the asset pipeline and GIS data integration.&lt;/p&gt;
&lt;p&gt;Finally, can (and should) python move beyond being the language of
plugins and scripts, and become the main language for creating game
development projects?&lt;/p&gt;
</summary></entry></feed>