<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_tariq-rashid.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2017-05-07T00:00:00+00:00</updated><entry><title>A Gentle Introduction to Neural Networks (with Python)</title><link href="https://pyvideo.org/pycon-italia-2017/a-gentle-introduction-to-neural-networks-with-python.html" rel="alternate"></link><published>2017-04-07T00:00:00+00:00</published><updated>2017-04-07T00:00:00+00:00</updated><author><name>Tariq Rashid</name></author><id>tag:pyvideo.org,2017-04-07:pycon-italia-2017/a-gentle-introduction-to-neural-networks-with-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A gentle introduction to neural networks, and making your own with
Python.&lt;/p&gt;
&lt;p&gt;This session is especially designed to be accessible to everyone,
including anyone with no expertise in mathematics, computer science or
Python.&lt;/p&gt;
&lt;p&gt;From this session you will have an intuitive understanding of what
neural networks are and how they work. If you are more technically
capable, you will see how you could make your own with Python and numpy.&lt;/p&gt;
&lt;p&gt;Part 1 - Ideas:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;the search for AI, hard problems for computers easy for humans&lt;/li&gt;
&lt;li&gt;learning from examples (simple classifier)&lt;/li&gt;
&lt;li&gt;biologically inspired neurons and networks&lt;/li&gt;
&lt;li&gt;training a neural network&lt;/li&gt;
&lt;li&gt;the back propagation breakthrough&lt;/li&gt;
&lt;li&gt;matrix ways of working (good for computers)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Part 2 - Python:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Python is easy, and everywhere&lt;/li&gt;
&lt;li&gt;Python notebooks&lt;/li&gt;
&lt;li&gt;the MNIST data set&lt;/li&gt;
&lt;li&gt;a very simple neural network class&lt;/li&gt;
&lt;li&gt;focus on concise and efficient matrix calculations with numpy&lt;/li&gt;
&lt;li&gt;97.5% accuracy recognising handwritten numbers - with just a few lines of code!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Part 3 - Live Demo! â€¦ and Q&amp;amp;A&lt;/p&gt;
</summary><category term="image-processing"></category><category term="numpy"></category><category term="neural network"></category><category term="Artificial Intelligence"></category><category term="Machine Learning"></category></entry><entry><title>Dimension Reduction and Extracting Topics - A Gentle Introduction</title><link href="https://pyvideo.org/pydata-london-2017/dimension-reduction-and-extracting-topics-a-gentle-introduction.html" rel="alternate"></link><published>2017-05-07T00:00:00+00:00</published><updated>2017-05-07T00:00:00+00:00</updated><author><name>Tariq Rashid</name></author><id>tag:pyvideo.org,2017-05-07:pydata-london-2017/dimension-reduction-and-extracting-topics-a-gentle-introduction.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Filmed at PyData 2017&lt;/p&gt;
&lt;p&gt;Description
Text mining has many powerful methods for unlocking insights into the messy, ambiguous, but interesting text created by people.&lt;/p&gt;
&lt;p&gt;Singular value decomposition (SVD) is a useful method for reducing the many dimensions of text data, and distill out key themes in that text - called topic modelling or latent semantic analysis.&lt;/p&gt;
&lt;p&gt;This talk for beginners will gently explain SVD and how to use it.&lt;/p&gt;
&lt;p&gt;Abstract
Text mining and natural language processing are hugely powerful fields that can unlock insights into the vast amounts of human knowledge, creativity and drivel (!) for automated computing. Examples include the fun of highlighting trends in internet chatter through to more serious analysis of finding patterns and links in leaked data sets of public interest.&lt;/p&gt;
&lt;p&gt;One key tool is to reduce the many dimensions of text data, and distill out the key themes in that text. People call this topic modelling, latent semantic analysis, and a few other names too. The powerful method at the heart of this is called singular value decomposition (SVD).&lt;/p&gt;
&lt;p&gt;This talk will gently introduce singular valued decomposition (SVD), explaining the mathematics in an accessible manner, and demonstrate how it can be used, using the Chilcot Iraq Report as an example dataset.&lt;/p&gt;
&lt;p&gt;Example code, notebooks and data sets are public on GitHub, and there is a blog for more discussion of this, and other text mining ideas &lt;a class="reference external" href="http://makeyourowntextminingtoolkit.blogspot.co.uk"&gt;http://makeyourowntextminingtoolkit.blogspot.co.uk&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>A Gentle Introduction to Neural Networks (with Python)</title><link href="https://pyvideo.org/europython-2016/a-gentle-introduction-to-neural-networks-with-python.html" rel="alternate"></link><published>2016-08-05T00:00:00+00:00</published><updated>2016-08-05T00:00:00+00:00</updated><author><name>Tariq Rashid</name></author><id>tag:pyvideo.org,2016-08-05:europython-2016/a-gentle-introduction-to-neural-networks-with-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Tariq Rashid - A Gentle Introduction to Neural Networks (with Python)
[EuroPython 2016]
[22 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/a-gentle-introduction-to-neural-networks-with-python"&gt;https://ep2016.europython.eu//conference/talks/a-gentle-introduction-to-neural-networks-with-python&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;A gentle introduction to neural networks, and making your own with Python.&lt;/p&gt;
&lt;p&gt;This session is deliberately designed to be accessible to everyone, including anyone with no expertise in mathematics, computer science or Python.&lt;/p&gt;
&lt;p&gt;From this session you will have an intuitive understanding of what neural networks are and how they work. If you are more technically capable, you will see how you could make your own with Python and numpy.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;Part 1 - Ideas:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The search for AI, hard problems for computers easy for humans&lt;/li&gt;
&lt;li&gt;Learning from examples (simple classifier)&lt;/li&gt;
&lt;li&gt;Biologically inspired neurons and networks&lt;/li&gt;
&lt;li&gt;Training a neural network - the back propagation breakthrough&lt;/li&gt;
&lt;li&gt;Matrix ways of working (good for computers)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Part 2 - Python:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Python is easy, and everywhere&lt;/li&gt;
&lt;li&gt;Python notebooks&lt;/li&gt;
&lt;li&gt;The MNIST data set&lt;/li&gt;
&lt;li&gt;A very simple neural network class&lt;/li&gt;
&lt;li&gt;Focus on concise and efficient matrix calculations with bumpy&lt;/li&gt;
&lt;li&gt;97.5% accuracy recognising handwritten numbers - with just a few lines of code!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Part 3&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Q&amp;amp;A&lt;/li&gt;
&lt;/ul&gt;
</summary></entry><entry><title>A Gentle Introduction to Neural Networks and making your own with Python</title><link href="https://pyvideo.org/pydata-london-2016/tariq-rashid-a-gentle-introduction-to-neural-networks-and-making-your-own-with-python.html" rel="alternate"></link><published>2016-05-09T00:00:00+00:00</published><updated>2016-05-09T00:00:00+00:00</updated><author><name>Tariq Rashid</name></author><id>tag:pyvideo.org,2016-05-09:pydata-london-2016/tariq-rashid-a-gentle-introduction-to-neural-networks-and-making-your-own-with-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyData London 2016&lt;/p&gt;
&lt;p&gt;Neural networks are not only a powerful data science tool, they're at the heart of recent breakthroughs in deep learning and artificial intelligence.&lt;/p&gt;
&lt;p&gt;This talk, designed for a complete beginners and anyone non-technical, will introduce the history and ideas behind neural networks. You won't need anything more than basic school maths. We'll gently build our own neural network in Python too.&lt;/p&gt;
&lt;p&gt;Ideas: - search for intelligence machines, what's easy for us not easy for computers.&lt;/p&gt;
&lt;p&gt;DIY: - MINST dataset - simple network 3 layer - matrix multiplication to aid calculations - preprocessing, priming weights - 95% accuracy with very simple code! - improvements lead to 98% accuracy!&lt;/p&gt;
&lt;p&gt;source code will be online Python 3 notebook on makeyourownneuralnetwork.blogspot.com and &amp;#64;myoneuralnet&lt;/p&gt;
&lt;p&gt;Slides available here: &lt;a class="reference external" href="https://docs.google.com/presentation/d/1Mai96er3d9Tca6mwVaO_bI7nZ09L6QQbww233yAnaGg/edit"&gt;https://docs.google.com/presentation/d/1Mai96er3d9Tca6mwVaO_bI7nZ09L6QQbww233yAnaGg/edit&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;GitHub: &lt;a class="reference external" href="https://github.com/makeyourownneuralnetwork/makeyourownneuralnetwork"&gt;https://github.com/makeyourownneuralnetwork/makeyourownneuralnetwork&lt;/a&gt;&lt;/p&gt;
</summary></entry></feed>