<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Sat, 29 Jun 2019 00:00:00 +0000</lastBuildDate><item><title>PyFE, software para la emision de comprobantes electronicos</title><link>https://pyvideo.org/pyday-nea-2019/pyfe-software-para-la-emision-de-comprobantes-electronicos.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyFE es un sistema de facturacion electronica, con la posibilidad de exportar datos para contadores (RG 3685, Iva Ventas, etc), tambien realizar la consulta de CUIT en los padrones de la Afip, constatacion de comprobantes, todo utilizando Python con PyQT y para la parte de conexion con la Afip usando pyafipws&lt;/p&gt;
&lt;p&gt;Charla dada en el PyDay NEA 2019, Resistencia, Chaco, Argentina, en UTN FRRE, French y Ayacucho, el 29/06/2019
&lt;a class="reference external" href="https://eventos.python.org.ar/events/pydaynea2019/activity/182/"&gt;https://eventos.python.org.ar/events/pydaynea2019/activity/182/&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jose Oscar Vogel</dc:creator><pubDate>Sat, 29 Jun 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-06-29:pyday-nea-2019/pyfe-software-para-la-emision-de-comprobantes-electronicos.html</guid><category>pyafipws</category><category>pyar</category><category>pydaynea</category><category>pyqt</category><category>python</category><category>pythonargentina</category><category>utn</category></item><item><title>Pacchettizzare applicazioni python in un singolo file binario</title><link>https://pyvideo.org/pycon-italia-2018/pacchettizzare-applicazioni-python-in-un-singolo-file-binario.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Uno dei pochi svantaggi di python è la difficoltà di distribuire
applicazioni stand alone binarie sviluppate in python. In questa talk
mostreremo come è possibile pachettizzare applicazioni python generando
un singolo file eseguibile per ciascuna piattaforma desktop: windows,
linux e mac. Partiremo da un semplice hello world, fino ad arrivare ad
applicazioni sempre più complesse. Verranno introdotti i tool a
disposizione per python per la combinazione di più file in un unico
script (stickytape), l’offuscamento e la minificazione (pyminifier,
Nuitka), la compilazione in un singolo file (PyInstaller, cx_Freeze).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Prerequisiti&lt;/strong&gt; : Conoscenza base di python e virtualenv&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;domenica 22 aprile&lt;/strong&gt; at 11:15 &lt;a class="reference external" href="/p3/schedule/pycon9/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Gabriele Franch</dc:creator><pubDate>Sun, 22 Apr 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-04-22:pycon-italia-2018/pacchettizzare-applicazioni-python-in-un-singolo-file-binario.html</guid><category>windows</category><category>OSX</category><category>GNU/Linux</category><category>PyQt</category><category>interpreter</category></item><item><title>Introducción a PyQT</title><link>https://pyvideo.org/pycon-es-2013/introduccion-a-pyqt.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Autor: Diego Sarmentero&lt;/p&gt;
&lt;p&gt;Track: Produban (Básico)&lt;/p&gt;
&lt;p&gt;PyQt es un binding del framework Qt para el lenguaje de Programación Python, el cual permite diseñar interfaces gráficas de usuario con un increíble potencial y una gran simplicidad. Esta librería no sólo consta de recursos para el diseño de interfaces, sino que provee una gran cantidad de funcionalidades multiplataforma que pueden aprovecharse para el desarrollo de diversos programas.&lt;/p&gt;
&lt;p&gt;La charla cubrirá PyQt desde un enfoque básico mostrando las características de dicho framework, para terminar con algunos ejemplos demostrando el potencial que posee la misma.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Diego Sarmentero</dc:creator><pubDate>Tue, 31 Dec 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-12-31:pycon-es-2013/introduccion-a-pyqt.html</guid><category>pyqt</category></item><item><title>PyOhio 2010: GUI Tools</title><link>https://pyvideo.org/pyohio-2010/pyohio-2010--gui-tools.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;GUI Tools&lt;/p&gt;
&lt;p&gt;Presented by James Bonanno&lt;/p&gt;
&lt;p&gt;There are several Graphical User Interface frameworks available for
Python. In this talk, perpahs the two most popular, wxPython and PyQt,
are examined. The talk will focus on major differences, tools, and a
specific example done both in wxPython and PyQt, that is a non-trivial
production grade example.&lt;/p&gt;
&lt;p&gt;[VIDEO HAS ISSUES: sound is inaudible for the first minute]&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">James Bonanno</dc:creator><pubDate>Sat, 31 Jul 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-07-31:pyohio-2010/pyohio-2010--gui-tools.html</guid><category>gui</category><category>pyohio</category><category>pyohio2010</category><category>pyqt</category><category>wxpython</category></item><item><title>Introduction to Qt</title><link>https://pyvideo.org/europython-2011/introduction-to-qt.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Matti Airas - 23 June 2011 in &amp;quot;Track Ravioli&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This presentation introduces Nokia's Qt Development Frameworks and their
relationship to Python. After an overview of Qt and the Qt ecosystem,
Qt's history and future roadmap are discussed. Different Python
bindings, PyQt and PySide in particular, are introduced. Finally,
hands-on examples of Qt Quick with Python are shown.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Matti Airas</dc:creator><pubDate>Sun, 24 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-24:europython-2011/introduction-to-qt.html</guid><category>pyqt</category><category>pyside</category><category>qt</category></item><item><title>Developing cutting-edge applications with PyQt</title><link>https://pyvideo.org/europython-2011/developing-cutting-edge-applications-with-pyqt.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Lorenzo Mancini,Matteo Bertozzi - 23 June 2011 in
&amp;quot;Training Pizza Margherita &amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;(Presented with Matteo Bertozzi)&lt;/p&gt;
&lt;p&gt;Python's high development speed and Qt's gargantuan feature set allow
for comfortable development of complex desktop applications. Still, what
does one need to do to best leverage this awesome combination? And more
importantly, what crucial advantages exist to decide its adoption in
favour of more traditional tecniques?&lt;/p&gt;
&lt;p&gt;During this training, we'll start from a white canvas and show how to
develop a desktop application using the best tools Qt offers. You'll
learn how to compose complex GUIs from basic building blocks, and how to
use QPainter, one of the most advanced 2D painting systems in the open
source world. Qt's Webkit integration will be discussed, along with the
recent Qt Quick technology, which allows one to create smooth and fluid
user interfaces. Qt's solution to common deployment problems, like
handling a serious translation workflow, will be presented. At the end,
we'll package our PyQt application so it's ready to be distributed for
download.&lt;/p&gt;
&lt;p&gt;Walk away with a sound understanding of why you should choose PyQt for
your next desktop project.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lorenzo Mancini</dc:creator><pubDate>Wed, 20 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-20:europython-2011/developing-cutting-edge-applications-with-pyqt.html</guid><category>deployment</category><category>distributed</category><category>pyqt</category><category>qt</category></item><item><title>Distributing Python programs through PyInstaller</title><link>https://pyvideo.org/europython-2011/distributing-python-programs-through-pyinstaller.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Giovanni Bajo - 22 June 2011 in &amp;quot;Track Lasagne&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The talk will focus on how to distribute multi-platform proprietary
Python applications, using &lt;a class="reference external" href="http://www.pyinstaller.org"&gt;PyInstaller&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;PyInstaller takes a program written in Python and turns it into a static
executable (binary) that does not depend upon an existing Python
installation, nor third party library. The executable can then be packed
and shipped in many different ways (through installer wizards, deb/rpm
packages, etc.).&lt;/p&gt;
&lt;p&gt;PyInstaller is a good multi-platform alternative to tools like py2exe
and py2app, but it found troubles to gain acceptance in a market that
seems strongly tied to older tools. Instead, PyInstaller puts forward
important new features: for instance, it works on the most important
desktop platforms (Windows, Linux/UNIX, Mac), and it has got an
automatic and fully transparent support for all the workarounds needed
to make applications using complex libraries like Matplotlib or PyQt
work within a static executable.&lt;/p&gt;
&lt;p&gt;In detail, the following points will be discussed:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Distribution of a priopriertary software: initial requests&lt;/li&gt;
&lt;li&gt;PyInstaller: how it works (basic tutorial)&lt;/li&gt;
&lt;li&gt;The secrets of PyInstaller: technical details&lt;/li&gt;
&lt;li&gt;Import hooks: effectively handling third party extensions&lt;/li&gt;
&lt;li&gt;Flexibility with PyInstaller: what goes in and what stays out&lt;/li&gt;
&lt;li&gt;Linux: static binaries for a single distribution or
cross-distributions&lt;/li&gt;
&lt;li&gt;Mac: creation of bundles for graphic applications&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Giovanni Bajo</dc:creator><pubDate>Wed, 20 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-20:europython-2011/distributing-python-programs-through-pyinstaller.html</guid><category>matplotlib</category><category>py2exe</category><category>pyqt</category></item><item><title>Developing a Cad application as an hobby. My exciting hobby is now my job</title><link>https://pyvideo.org/europython-2011/developing-a-cad-application-as-an-hobby-my-exci.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Matteo Boscolo - 22 June 2011 in &amp;quot;Track Tagliatelle &amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PythonCAD is a CAD package written, surprisingly enough, in Python using
the PyQt interface. The PythonCAD project aims to produce a scriptable,
open- source, easy to use CAD package for Linux (Cross Platforms).&lt;/p&gt;
&lt;p&gt;I start developing PythonCAD in my spare time and now python is the
programming language that I mostly use. I think that will be very
interesting to tell my story and how I learn python pyqt ,sqlite, sympy…
and how python and pycon and OpenERP change my job.&lt;/p&gt;
&lt;p&gt;The goal will be to tell at the new python programmer how easy to use is
python even for complex problem. I can explain why I chose pyqt .. what
kind of trouble I have found and how I solve it. Starting from python
going to pyqt and at the end how to deploy a python application with
pyInstaller …&lt;/p&gt;
&lt;p&gt;I also explain my actual project OpenPLM an OpenERP module to manage PLM
data into OpenERP&lt;/p&gt;
&lt;p&gt;see you soon Matteo&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Matteo Boscolo</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-13:europython-2011/developing-a-cad-application-as-an-hobby-my-exci.html</guid><category>deploy</category><category>pycon</category><category>pyqt</category></item><item><title>Was Sie schon immer über „Visualisierung mit Python“ wissen wollten</title><link>https://pyvideo.org/pycon-de-2013/was-sie-schon-immer-uber-visualisierung-mit-pyth.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Schon lange hat sich Python in den Software-Entwicklungsabteilungen von
Forschung und Industrie etabliert, nicht zuletzt wegen der Verbreitung
von Bibliotheken wie SciPy oder Matplotlib. Bei der Verarbeitung großer
Datenmengen oder im Zusammenspiel mit GUI-Toolkits stößt man aber leicht
an die Grenzen der interpretativen Programmierung.&lt;/p&gt;
&lt;p&gt;Der Vortrag zeigt auf, wie solche Anforderung auf der Basis des &lt;em&gt;GR
Frameworks&lt;/em&gt;, einer &amp;quot;Lightweight&amp;quot;-Alternative zu Matplotlib, umgesetzt
werden können. Im Einzelnen wird beschrieben wie man mit aktuellen
Software-Technologien Echtzeit-Anwendungen oder rechenintensive
Simulationen in Python realisieren kann. So lässt sich zum Beispiel
durch die Verwendung von Just-In-Time Kompilierung mit Numba(Pro) eine
enorme Performance-Steigerung erzielen. An konkreten Beispielen werden
die Vorzüge des &lt;em&gt;GR Frameworks&lt;/em&gt; im Zusammenspiel mit JIT-Compilern,
graphischen Benutzeroberflächen (GUIs) sowie OpenGL, aber auch vor dem
Hintergrund einer stetig ansteigenden Paketflut beschrieben.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Josef Heinen</dc:creator><pubDate>Thu, 17 Oct 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-10-17:pycon-de-2013/was-sie-schon-immer-uber-visualisierung-mit-pyth.html</guid><category>accelerate</category><category>anaconda</category><category>numba</category><category>numpy</category><category>opengl</category><category>pyqt</category><category>python</category><category>visualisierung</category></item></channel></rss>