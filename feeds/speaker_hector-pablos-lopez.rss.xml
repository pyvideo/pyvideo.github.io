<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Sun, 24 Sep 2017 12:00:00 +0200</lastBuildDate><item><title>Exprimiendo el ORM de Django</title><link>https://pyvideo.org/pycon-es-2017/exprimiendo-el-orm-de-django.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Muchas veces nos resulta mucho más fácil escribir una consulta a base de datos en SQL plano que lidiar con las limitaciones del ORM de Django, perdiendo así la gran potencia y limpieza que este nos ofrece.&lt;/p&gt;
&lt;p&gt;Los operadores Q() y F() son, muchas veces, algo que copiamos de la documentación sin entender completamente. Hacer joins simples puede no ser posible, y no hablemos de joins con claves foráneas de más de una columna.&lt;/p&gt;
&lt;p&gt;Acabamos abusando del método extra() y la clase RawSQL cuando, en realidad, pueden no ser necesarios.&lt;/p&gt;
&lt;p&gt;La experiencia nos ha enseñado a sacar el máximo partido de esta funcionalidad y exprimir al máximo sus posiblidades, limitando al máximo la escritura de código SQL plano. Explicaremos cómo, mediante la definición de algunos elementos básicos e intermedios para manipular querysets y la presentación de algunos trucos útiles.&lt;/p&gt;
&lt;p&gt;Puede que te ahorre un par de consultas a la documentación y que descubras alguna cosa nueva, o simplemente que vuelvas a apreciar el ORM de Django.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Héctor Pablos López</dc:creator><pubDate>Sun, 24 Sep 2017 12:00:00 +0200</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-09-24:pycon-es-2017/exprimiendo-el-orm-de-django.html</guid><category>django</category><category>orm</category></item><item><title>Adelgazando los modelos de Django</title><link>https://pyvideo.org/pycon-es-2016/adelgazando-los-modelos-de-django.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Probablemente empezaste creando una aplicación de Django que podía presumir de &amp;quot;limpia&amp;quot;. Tus modelos tienen un par de métodos añadidos, con lógica sencilla. Tus vistas hacen consultas simples y devuelven templates con un contexto razonable.&lt;/p&gt;
&lt;p&gt;Con el tiempo, los modelos empiezan a cambiar, necesitas hacer vistas que devuelven contextos con datos más complejos, aumenta la cantidad de métodos en los modelos, las vistas empiezan a implementar lógica y, ahora que lo piensas, puedes reutilizar esa función, así que la sacas a un módulo de utilidades, quizá lo decides bautizar como controlador.&lt;/p&gt;
&lt;p&gt;Después de todas esas fantásticas nuevas features que has conseguido implementar, tienes modelos de cientos de líneas, lógica desparramada en varios ¨controladores&amp;quot; que importas en tantos módulos que, cada vez que creas uno nuevo, optas por copiar y pegar los import de siempre. Ah, y cada vista tienen más lógica que tu trabajo fin de carrera. ¿En cual de los &amp;quot;controladores&amp;quot; estaba esa función que te da una lista de ids y nombres de usuarios con datos sobres sus vehículos y sus casas? ¿En el controlador de usuarios, el de vehículos, el de casas o el controlador de controladores?&lt;/p&gt;
&lt;p&gt;No te preocupes, hay varias soluciones. Nosotros te proponemos la que utilizamos en StyleSage, basada en una clara división de responsabilidades entre modelos, proxy models, managers y vistas. Verás como lo encuentras todo a la primera, ¡Y sin dependencias circulares!&lt;/p&gt;
&lt;p&gt;Presentación disponible en &lt;a class="reference external" href="http://slides.com/hectorpablos/adelgazando-modelos-django"&gt;http://slides.com/hectorpablos/adelgazando-modelos-django&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://2016.es.pycon.org/"&gt;http://2016.es.pycon.org/&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Héctor Pablos López</dc:creator><pubDate>Sat, 08 Oct 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-10-08:pycon-es-2016/adelgazando-los-modelos-de-django.html</guid></item></channel></rss>