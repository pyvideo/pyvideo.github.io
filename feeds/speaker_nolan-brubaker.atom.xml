<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_nolan-brubaker.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2018-05-10T00:00:00+00:00</updated><entry><title>A Python-flavored Introduction to Containers And Kubernetes</title><link href="https://pyvideo.org/pycon-us-2018/a-python-flavored-introduction-to-containers-and-kubernetes.html" rel="alternate"></link><published>2018-05-10T00:00:00+00:00</published><updated>2018-05-10T00:00:00+00:00</updated><author><name>Ruben Orduz</name></author><id>tag:pyvideo.org,2018-05-10:pycon-us-2018/a-python-flavored-introduction-to-containers-and-kubernetes.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Containers have more or less taken over the world of application, web APIs, mobile endpoints and other forms of deployment. They have become the currency, the &amp;quot;table stakes&amp;quot; and de-facto application deployment unit. Their raise to the fore has brought about a whole host of use cases which weren't practical or accessible in the world of &amp;quot;classic&amp;quot; paradigms of infrastructure and virtualization. Containers have also brought application deployment closer and more accessible to developers.&lt;/p&gt;
&lt;p&gt;But as more use cases, deployment styles and exponential adoption of containers was ongoing, a new set of problems began to surface: how do you manage the ever growing number of containers in a deployment? How do you make sure containers have the right resources, deployed to the right machine, running with the correct parameters, how do you scale in and out without disruption? How do you make sure in a fleet of X containers that they’re all running and in healthy state? Enter Kubernetes.&lt;/p&gt;
&lt;p&gt;Initially developed internally by Google to replace their own complex container orchestration and management framework. It had to meet all the stringent standards and mind-boggling scale that Google operates on, but from the get-go an effort was made to make the learning curve and developer experience as approachable as possible. At certain point the creators made the case to Google to release kubernetes to the open source community -- a crucial decision that has helped “k8s” (as it’s commonly referred to as) reach rock star levels of fame and mind share not just in the FOSS community but also across industries and businesses from small operations to gigantic multinational corporations with thousands of deployments.&lt;/p&gt;
</summary><category term="containers"></category><category term="kubernetes"></category></entry><entry><title>An Introduction to the ZODB</title><link href="https://pyvideo.org/pyohio-2012/an-introduction-to-the-zodb.html" rel="alternate"></link><published>2012-07-28T00:00:00+00:00</published><updated>2012-07-28T00:00:00+00:00</updated><author><name>Nolan Brubaker</name></author><id>tag:pyvideo.org,2012-07-28:pyohio-2012/an-introduction-to-the-zodb.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;The Zope Object Database is an object database that allows you to store
and retrieve your Python objects directly, without an intermediary
layer. It's fully ACID-compliant and features multiple backends. This
talk will familiarize the audience with ZODB programming and it's use
cases.&lt;/p&gt;
</summary></entry></feed>