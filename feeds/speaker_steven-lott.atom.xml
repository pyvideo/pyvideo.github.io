<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org - Steven Lott</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_steven-lott.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2025-05-18T00:00:00+00:00</updated><subtitle></subtitle><entry><title>Type Hints: Putting more Buzz in your Fizz</title><link href="https://pyvideo.org/pycon-us-2020/type-hints-putting-more-buzz-in-your-fizz.html" rel="alternate"></link><published>2020-04-17T00:00:00+00:00</published><updated>2020-04-17T00:00:00+00:00</updated><author><name>Steven Lott</name></author><id>tag:pyvideo.org,2020-04-17:/pycon-us-2020/type-hints-putting-more-buzz-in-your-fizz.html</id><content type="html"></content><category term="PyCon US 2020"></category><category term="workshop"></category></entry><entry><title>Unlearning SQL</title><link href="https://pyvideo.org/pycon-us-2025/unlearning-sql.html" rel="alternate"></link><published>2025-05-18T00:00:00+00:00</published><updated>2025-05-18T00:00:00+00:00</updated><author><name>Steven Lott</name></author><id>tag:pyvideo.org,2025-05-18:/pycon-us-2025/unlearning-sql.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Some people find SQL to be a helpful model for data analysis. They can also find themselves frustrated because some things that seem clear in SQL can seem difficult to restate in Python.&lt;/p&gt;
&lt;p&gt;We'll look at some of the SQL query design patterns in detail. With this, we can …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Some people find SQL to be a helpful model for data analysis. They can also find themselves frustrated because some things that seem clear in SQL can seem difficult to restate in Python.&lt;/p&gt;
&lt;p&gt;We'll look at some of the SQL query design patterns in detail. With this, we can formulate Python functions that have the same behavior without the overheads of using an actual database. Even something like SQLite3 involves overheads that can be avoided.&lt;/p&gt;
&lt;p&gt;To keep the talk short, we'll avoid a number of more nuanced SQL features. We'll cover the principle elements of a Select statement including the Group by and Having clauses. This isn't a tutorial, and the audience needs to be comfortable with generator expressions and list comprehensions.&lt;/p&gt;
&lt;p&gt;The concept is to use SQL concepts for initial design, but pivot to Python for a robust implementation.&lt;/p&gt;
</content><category term="PyCon US 2025"></category></entry><entry><title>NoSQL doesn't mean No Schema</title><link href="https://pyvideo.org/pydata-dc-2016/nosql-doesnt-mean-no-schema.html" rel="alternate"></link><published>2016-10-08T00:00:00+00:00</published><updated>2016-10-08T00:00:00+00:00</updated><author><name>Steven Lott</name></author><id>tag:pyvideo.org,2016-10-08:/pydata-dc-2016/nosql-doesnt-mean-no-schema.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyData DC 2016&lt;/p&gt;
&lt;p&gt;While databases like MongoDB don't require a formal schema, there's still a schema somewhere. It might be merely implied by validation rules in the code. Or, there might be a more formal representation. In some cases, the lack of strict schema creates a dynamic flexibility that …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyData DC 2016&lt;/p&gt;
&lt;p&gt;While databases like MongoDB don't require a formal schema, there's still a schema somewhere. It might be merely implied by validation rules in the code. Or, there might be a more formal representation. In some cases, the lack of strict schema creates a dynamic flexibility that creates value rapidly. Other times, the lack of formal structures leads to chaos. How can we find a balance?&lt;/p&gt;
</content><category term="PyData DC 2016"></category><category term="nosql"></category></entry><entry><title>The Five Kinds of Python Functions</title><link href="https://pyvideo.org/pydata-dc-2016/the-five-kinds-of-python-functions.html" rel="alternate"></link><published>2016-10-07T00:00:00+00:00</published><updated>2016-10-07T00:00:00+00:00</updated><author><name>Steven Lott</name></author><id>tag:pyvideo.org,2016-10-07:/pydata-dc-2016/the-five-kinds-of-python-functions.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyData DC 2016&lt;/p&gt;
&lt;p&gt;We'll look at the wide variety of ways that we can leverage Python functions. This will show provide helpful background in ordinary functions, as well as callable objects and lambdas. We'll look closely at how to use generator functions, also. The fifth type of function is …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyData DC 2016&lt;/p&gt;
&lt;p&gt;We'll look at the wide variety of ways that we can leverage Python functions. This will show provide helpful background in ordinary functions, as well as callable objects and lambdas. We'll look closely at how to use generator functions, also. The fifth type of function is a function wraps a special method, like len().&lt;/p&gt;
</content><category term="PyData DC 2016"></category><category term="functions"></category></entry><entry><title>Avoiding Bad Database Surprises: Simulation and Scalability - Steven Lott</title><link href="https://pyvideo.org/pydata-dc-2018/avoiding-bad-database-surprises-simulation-and-scalability-steven-lott.html" rel="alternate"></link><published>2018-11-16T00:00:00+00:00</published><updated>2018-11-16T00:00:00+00:00</updated><author><name>Steven Lott</name></author><id>tag:pyvideo.org,2018-11-16:/pydata-dc-2018/avoiding-bad-database-surprises-simulation-and-scalability-steven-lott.html</id><content type="html"></content><category term="PyData DC 2018"></category></entry><entry><title>Five Kinds of Python Functions - Steven Lott</title><link href="https://pyvideo.org/pydata-dc-2018/five-kinds-of-python-functions-steven-lott.html" rel="alternate"></link><published>2018-11-16T00:00:00+00:00</published><updated>2018-11-16T00:00:00+00:00</updated><author><name>Steven Lott</name></author><id>tag:pyvideo.org,2018-11-16:/pydata-dc-2018/five-kinds-of-python-functions-steven-lott.html</id><content type="html"></content><category term="PyData DC 2018"></category></entry><entry><title>Keynote: A Sailor's View of Python And the idea of "Defensive Programming" - Steven Lott</title><link href="https://pyvideo.org/pydata-dc-2018/keynote-a-sailors-view-of-python-and-the-idea-of-defensive-programming-steven-lott.html" rel="alternate"></link><published>2018-11-16T00:00:00+00:00</published><updated>2018-11-16T00:00:00+00:00</updated><author><name>Steven Lott</name></author><id>tag:pyvideo.org,2018-11-16:/pydata-dc-2018/keynote-a-sailors-view-of-python-and-the-idea-of-defensive-programming-steven-lott.html</id><content type="html"></content><category term="PyData DC 2018"></category></entry></feed>