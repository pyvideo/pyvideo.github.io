<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_vitali-glibin.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2015-09-19T00:00:00+00:00</updated><entry><title>Изоморфные приложения и Python</title><link href="https://pyvideo.org/pycon-russia-2015/izomorfnye-prilozheniia-i-python.html" rel="alternate"></link><published>2015-09-19T00:00:00+00:00</published><updated>2015-09-19T00:00:00+00:00</updated><author><name>Vitali Glibin</name></author><id>tag:pyvideo.org,2015-09-19:pycon-russia-2015/izomorfnye-prilozheniia-i-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Доклад будет посвящен проблеме единой шаблонизации на сервере и клиенте. Для чего это нужно? Например, вы делаете классный интернет-магазин на Django и хотите, чтобы в каталоге товаров при изменении каких-то параметров список товаров динамически фильтровался.&lt;/p&gt;
&lt;p&gt;Как было раньше?
Человек нажимает на фильтр, страница перезагружается с новым отфильтрованным списком товаров.
Это было очень медленно, и появился AJAX, разработчики стали при изменении фильтра загружать с сервера только кусочек html с отфильтрованными товарами.
Но и этого показалось мало, теперь с сервера мы получаем JSON, а на клиенте производим отрисовку нового списка товаров.&lt;/p&gt;
&lt;p&gt;Что получаем в итоге?
Есть некий шаблон, который отрисовывает список товаров на сервере, и есть шаблон, который делает это же на клиенте. Соответственно, разработчику часто необходимо поддерживать два шаблона, что может приводить к ошибкам при изменениях. Зато у клиента все быстро :)&lt;/p&gt;
&lt;p&gt;С появлением NodeJS разработчики стали задумываться о том, что теперь и на сервере, и на клиенте можно использовать единую шаблонизацию (единый код), который впоследствии назвали изоморфным. Именно поэтому разработчики часто выбирают NodeJS как основу для своих следующих проектов.&lt;/p&gt;
&lt;p&gt;Я хочу рассказать о том, как можно не отказываться от Python на сервере, при этом получив все преимущества изоморфных приложений: от небольших контентных до сложных сервисных сайтов, на основе своего собственного опыта.&lt;/p&gt;
&lt;p&gt;Плюс расскажу, для чего вообще в 2015 году нужна серверная шаблонизация и почему это важно.&lt;/p&gt;
</summary></entry></feed>