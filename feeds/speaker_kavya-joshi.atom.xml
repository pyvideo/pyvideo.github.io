<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_kavya-joshi.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2017-05-20T00:00:00+00:00</updated><entry><title>The Memory Chronicles: A Tale of Two Pythons</title><link href="https://pyvideo.org/pycon-us-2017/the-memory-chronicles-a-tale-of-two-pythons.html" rel="alternate"></link><published>2017-05-20T00:00:00+00:00</published><updated>2017-05-20T00:00:00+00:00</updated><author><name>Kavya Joshi</name></author><id>tag:pyvideo.org,2017-05-20:pycon-us-2017/the-memory-chronicles-a-tale-of-two-pythons.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;MicroPython is the leanest, meanest full Python implementation. Designed
for microcontrollers, this variant of Python runs in less than 300KB of
memory, &lt;em&gt;and&lt;/em&gt; retains support for all your favorite Python features.&lt;/p&gt;
&lt;p&gt;So what does it take to make the smallest Python? Put differently, why
does CPython have a large memory footprint?&lt;/p&gt;
&lt;p&gt;This talk will explore the internals of MicroPython and contrast it with
CPython, focusing on the aspects that relate to memory use. We will
delve into the Python object models in each and the machinery for
managing them. We will touch upon how the designs of the bytecode
compiler and interpreter of each differ and why that matters.&lt;/p&gt;
</summary></entry><entry><title>A tale of concurrency through creativity in Python: a deep dive into how gevent works.</title><link href="https://pyvideo.org/pycon-us-2016/kavya-joshi-a-tale-of-concurrency-through-creativity-in-python-a-deep-dive-into-how-gevent-works.html" rel="alternate"></link><published>2016-05-30T00:00:00+00:00</published><updated>2016-05-30T00:00:00+00:00</updated><author><name>Kavya Joshi</name></author><id>tag:pyvideo.org,2016-05-30:pycon-us-2016/kavya-joshi-a-tale-of-concurrency-through-creativity-in-python-a-deep-dive-into-how-gevent-works.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Speaker: Kavya Joshi&lt;/p&gt;
&lt;p&gt;gevent is an open source Python library for asynchronous I/O. It provides a powerful construct to build concurrent applications; think threads, except lightweight and cooperatively scheduled. We will delve into how gevent is architected from its building blocks â€” sophisticated coroutines, an event loop, and a dash of creativity to neatly integrate them.&lt;/p&gt;
&lt;p&gt;Slides can be found at: &lt;a class="reference external" href="https://speakerdeck.com/pycon2016"&gt;https://speakerdeck.com/pycon2016&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/PyCon/2016-slides"&gt;https://github.com/PyCon/2016-slides&lt;/a&gt;&lt;/p&gt;
</summary></entry></feed>