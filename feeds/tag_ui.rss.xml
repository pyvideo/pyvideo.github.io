<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Fri, 07 Apr 2017 00:00:00 +0000</lastBuildDate><item><title>Terminals, command lines, and text interfaces</title><link>https://pyvideo.org/europython-2013/terminals-command-lines-and-text-interfaces.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Petr Viktorin</dc:creator><pubDate>Fri, 05 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-05:europython-2013/terminals-command-lines-and-text-interfaces.html</guid><category>tui</category><category>urwid</category><category>ui</category><category>unix</category></item><item><title>Creazione ed evoluzione di un framework per interfacce grafiche Multi-Touch con OpenGL</title><link>https://pyvideo.org/pycon-italia-2017/creazione-ed-evoluzione-di-un-framework-per-interfacce-grafiche-multi-touch-con-opengl.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Obiettivo del talk è descrivere la progettazione ed evoluzione di un
framework interattivo per interfacce grafiche 2D/3D interattive
multi-touch basato sulle recenti API OpenGL 4.5. Saranno introdotti
anche i concetti di computer grafica presenti all’interno del framework,
descrivendo l’evoluzione delle componenti dalla fase di protipazione in
puro Python all’implementazione e messa in produzione in C++ con API
Python. Infine, sarà presentata una descrizione del workflow di lavoro
per i progetti interni realizzati dai nostri team sottolineando gli
aspetti peculiari che Python fornisce agli sviluppatori.&lt;/p&gt;
&lt;p&gt;I requisiti necessari per una piena comprensione, oltre ad una buona
conoscenza di Python, sono una buona confidenza con le tecnologie comuni
per la realizzazione di interfacce Web &amp;amp; Desktop: HTML, CSS, e almeno
uno dei framework comunemente usati per le GUI (Qt, GTK, .NET WPF,
ecc…). Inoltre è preferibile (ma non necessario) avere delle nozioni
basi di Computer Grafica e OpenGL.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Tiziano Carotti</dc:creator><pubDate>Fri, 07 Apr 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-04-07:pycon-italia-2017/creazione-ed-evoluzione-di-un-framework-per-interfacce-grafiche-multi-touch-con-opengl.html</guid><category>computer-graphics</category><category>ui</category><category>graphic-design</category><category>opengl</category></item><item><title>Benevolent Designer For Life's Keynote - Designers Make It Go to Eleven</title><link>https://pyvideo.org/djangocon-us-2011/djangocon-2011--benevolent-designer-for-life--39-.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Benevolent Designer for Life's Keynote: Designers make it go to eleven&lt;/p&gt;
&lt;p&gt;Presented by Idan Gazit&lt;/p&gt;
&lt;p&gt;The open-source world is and always has been focused on code; attention
and respect doled out in exchange for patches. As a result, many
open-source projects want for design love but don't know how to secure
it. We scare off potential contributors from the many fields beneath the
aegis of &amp;quot;design&amp;quot;: user experience, user interfaces, usability,
interaction design, information architects, graphic design, typography,
and other roles assumed by the authors of our markup and styling. Django
can be a model citizen among open-source projects in changing these
attitudes and coaxing contributors out of the woodwork -- not just for
the benefit of the framework, but for the constellation of 3rd party
apps which make Django great. Other FOSS communities have made efforts
that we can learn from, and the fight to change perceptions is less
uphill than you might think. This talk will cover: - Misconceptions of
&amp;quot;Design.&amp;quot; What is design, and what do designers do? - A brief trip down
memory lane, and how Django came to be relatively designer- friendly. -
&amp;quot;I don't get it: what is the BDesignFL role?&amp;quot; - Process and tools: How
can Django better engage designers, for core's benefit and for the
benefit of &lt;em&gt;your projects&lt;/em&gt;. How can we help these contributors get over
the &amp;quot;suck&amp;quot; threshold? - What parts of core are ripe for love from
designers? What 3rd party projects?&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Idan Gazit</dc:creator><pubDate>Mon, 05 Sep 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-09-05:djangocon-us-2011/djangocon-2011--benevolent-designer-for-life--39-.html</guid><category>design</category><category>djangocon</category><category>djangocon2011</category><category>ui</category><category>ux</category></item><item><title>Flow-based programming made easy with PyF 2.0</title><link>https://pyvideo.org/europython-2011/flow-based-programming-made-easy-with-pyf-20.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Jonathan Schemoul - 24 June 2011 in &amp;quot;Training Pizza
Napoli &amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyF is a python framework to ease flow based programming and allow
massive data crunching on multiple CPUs. We boast an optional web-based
interface to visually design processing tubes, batch scheduling, report
generation and email alerts.&lt;/p&gt;
&lt;p&gt;The Framework is easily extensible by writing plugins, a lot of features
like data persistence, reporting and web scrapping are already part of
the ecosystem.&lt;/p&gt;
&lt;p&gt;This presentation will focus on an introduction to PyF architecture and
higher-level designer ui use and how it could be useful to you.&lt;/p&gt;
&lt;p&gt;If available, an additional training session will focus on working with
the framework to create your own flow-based processes and plugins.&lt;/p&gt;
&lt;p&gt;For more information: &lt;a class="reference external" href="http://www.pyfproject.org/"&gt;http://www.pyfproject.org/&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jonathan Schemoul</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-13:europython-2011/flow-based-programming-made-easy-with-pyf-20.html</guid><category>architecture</category><category>design</category><category>framework</category><category>processing</category><category>ui</category><category>web</category></item></channel></rss>