<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org - Andrew Kubera</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_andrew-kubera.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2025-07-27T00:00:00+00:00</updated><subtitle></subtitle><entry><title>Growler - Using asyncio to Build a Web Framework</title><link href="https://pyvideo.org/pyohio-2015/growler-using-asyncio-to-build-a-web-framework.html" rel="alternate"></link><published>2015-08-02T00:00:00+00:00</published><updated>2015-08-02T00:00:00+00:00</updated><author><name>Andrew Kubera</name></author><id>tag:pyvideo.org,2015-08-02:/pyohio-2015/growler-using-asyncio-to-build-a-web-framework.html</id><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The asyncio library introduced a native way for python programs to
handle multiple network connections with one thread, asynchronously.
Inspired by the Express framework for nodejs, I set out to write my own
web server using the new library. This is what I've learned.&lt;/p&gt;
</content><category term="PyOhio 2015"></category><category term="talk"></category></entry><entry><title>Sunday Lightning Talks</title><link href="https://pyvideo.org/pyohio-2018/sunday-lightning-talks.html" rel="alternate"></link><published>2018-07-29T00:00:00+00:00</published><updated>2018-07-29T00:00:00+00:00</updated><author><name>Dave Forgac</name></author><id>tag:pyvideo.org,2018-07-29:/pyohio-2018/sunday-lightning-talks.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Dave Forgac&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://pyohio.org/2018/schedule/presentation/64/"&gt;https://pyohio.org/2018/schedule/presentation/64/&lt;/a&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Extending Python w/ C/C++ - Devyn Spillane&lt;/li&gt;
&lt;li&gt;Even More Significant Whitespace - Tom Fetherston&lt;/li&gt;
&lt;li&gt;Don't Hire Rockstars, Train Idols - Kojo Idrissa&lt;/li&gt;
&lt;li&gt;I Want a Descriptor in my Dataclass - Rick Teachey&lt;/li&gt;
&lt;li&gt;Saving An Animation in Matplotlib - Brandon Rhodes&lt;/li&gt;
&lt;li&gt;fuzzywuzzy String Matching - Ann …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Dave Forgac&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://pyohio.org/2018/schedule/presentation/64/"&gt;https://pyohio.org/2018/schedule/presentation/64/&lt;/a&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Extending Python w/ C/C++ - Devyn Spillane&lt;/li&gt;
&lt;li&gt;Even More Significant Whitespace - Tom Fetherston&lt;/li&gt;
&lt;li&gt;Don't Hire Rockstars, Train Idols - Kojo Idrissa&lt;/li&gt;
&lt;li&gt;I Want a Descriptor in my Dataclass - Rick Teachey&lt;/li&gt;
&lt;li&gt;Saving An Animation in Matplotlib - Brandon Rhodes&lt;/li&gt;
&lt;li&gt;fuzzywuzzy String Matching - Ann Elliott&lt;/li&gt;
&lt;li&gt;PPB: 15 Lines to Takeoff - Piper Thunstrom&lt;/li&gt;
&lt;li&gt;Get Setup with setup.cfg - Andrew Kubera&lt;/li&gt;
&lt;li&gt;Wagtail – Vince Salvino&lt;/li&gt;
&lt;/ul&gt;
</content><category term="PyOhio 2018"></category></entry><entry><title>An Exploration of Python's Upcoming Match Statement</title><link href="https://pyvideo.org/pyohio-2021/an-exploration-of-pythons-upcoming-match-statement.html" rel="alternate"></link><published>2021-07-31T00:00:00+00:00</published><updated>2021-07-31T00:00:00+00:00</updated><author><name>Andrew Kubera</name></author><id>tag:pyvideo.org,2021-07-31:/pyohio-2021/an-exploration-of-pythons-upcoming-match-statement.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The match statement is a new feature of the Python language, defined in
PEP-634 and will be standard in the upcoming Python 3.10 (due out in
October 2021).&lt;/p&gt;
&lt;p&gt;Adding syntax for new language features introduces both new
possibilities and sources for confusion. Let's stay ahead of the game …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The match statement is a new feature of the Python language, defined in
PEP-634 and will be standard in the upcoming Python 3.10 (due out in
October 2021).&lt;/p&gt;
&lt;p&gt;Adding syntax for new language features introduces both new
possibilities and sources for confusion. Let's stay ahead of the game by
learning what to expect from the match statement by playing with the
alpha version of Python (available now).&lt;/p&gt;
&lt;p&gt;This talk will compare the match statement to similar constructs in
other languages, demonstrate some typical use cases, briefly discuss
Python's implementation, and propose some best practices when solving
problems with the match statement.&lt;/p&gt;
</content><category term="PyOhio 2021"></category></entry><entry><title>How Many Times Can One Line Fail? ExceptionGroups &amp; Except*: What They Are and How to Use Them</title><link href="https://pyvideo.org/pyohio-2023/how-many-times-can-one-line-fail-exceptiongroups-except-what-they-are-and-how-to-use-them.html" rel="alternate"></link><published>2023-12-16T00:00:00+00:00</published><updated>2023-12-16T00:00:00+00:00</updated><author><name>Andrew Kubera</name></author><id>tag:pyvideo.org,2023-12-16:/pyohio-2023/how-many-times-can-one-line-fail-exceptiongroups-except-what-they-are-and-how-to-use-them.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Async programming can make complex things easy, but at the same time be
hard to get 100% correct; particularly when it comes to exceptions and
handling states outside the &amp;quot;happy path&amp;quot;. Python has been gaining tools
to more easily handle the failure cases, notably in 3.11 a new …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Async programming can make complex things easy, but at the same time be
hard to get 100% correct; particularly when it comes to exceptions and
handling states outside the &amp;quot;happy path&amp;quot;. Python has been gaining tools
to more easily handle the failure cases, notably in 3.11 a new exception
handling syntax: &lt;tt class="docutils literal"&gt;except*&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;Don't know what this does or how to read it? This talk is for you.&lt;/p&gt;
&lt;p&gt;This talk will briefly discuss asyncio and how async code differs from
normal functions, &lt;tt class="docutils literal"&gt;TaskGroups&lt;/tt&gt; and when to use them, and finally
&lt;tt class="docutils literal"&gt;ExceptionGroups&lt;/tt&gt; and the &lt;tt class="docutils literal"&gt;try: except*:&lt;/tt&gt; syntax.&lt;/p&gt;
</content><category term="PyOhio 2023"></category></entry><entry><title>Write Apps for Your TV with Kodi and Python</title><link href="https://pyvideo.org/pyohio-2025/write-apps-for-your-tv-with-kodi-and-python.html" rel="alternate"></link><published>2025-07-27T00:00:00+00:00</published><updated>2025-07-27T00:00:00+00:00</updated><author><name>Andrew Kubera</name></author><id>tag:pyvideo.org,2025-07-27:/pyohio-2025/write-apps-for-your-tv-with-kodi-and-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The open-source media player Kodi is designed to play videos and music
on your TV, but it also comes with a plugin system that is programmable
with Python. This talk will walk through writing a plugin for your
set-top-box running Kodi, including packaging, debugging, and dealing
with dependencies (there's …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The open-source media player Kodi is designed to play videos and music
on your TV, but it also comes with a plugin system that is programmable
with Python. This talk will walk through writing a plugin for your
set-top-box running Kodi, including packaging, debugging, and dealing
with dependencies (there's no pip here).&lt;/p&gt;
</content><category term="PyOhio 2025"></category></entry></feed>