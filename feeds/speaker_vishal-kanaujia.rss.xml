<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Thu, 12 Sep 2013 00:00:00 +0000</lastBuildDate><item><title>Dissecting memory mysteries of Python</title><link>https://pyvideo.org/pycon-india-2013/dissecting-memory-mysteries-of-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python is a dynamically typed language. Applications leave task of
object memory management to Python VM. Python automatically manages
memory using reference counting and garbage collection. But, Python
memory manager may bloat the VM size, and sometimes it may consume
complete main memory. It causes applications to deliver low performance
and encounter unexpected memory errors.&lt;/p&gt;
&lt;p&gt;This talk dissects the internals of CPython memory manager, its
limitations and negative impact on application behavior. We demonstrate
the problem of memory leaks by learning Python heap pattern, object
graphs and memory profiling. Next, we suggest solutions to reduce memory
footprints of applications, tools to diagnose and fix memory leaks and
lesson learned as best development practices.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Vishal Kanaujia</dc:creator><pubDate>Sat, 31 Aug 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-08-31:pycon-india-2013/dissecting-memory-mysteries-of-python.html</guid></item><item><title>Dissecting memory mysteries of Python</title><link>https://pyvideo.org/kiwi-pycon-2013/dissecting-memory-mysteries-of-python-0.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Memory leak has been perennial problem for Python applications. This
causes application to behave erroneously with Memory error and very slow
operation. What is wrong with the application? How to find out the cause
and fix it? This is the motivation for this talk.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&amp;#64; Kiwi PyCon 2013 - Saturday, 07 Sep 2013 - Track 2&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Audience level&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Intermediate&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Python is a dynamically typed language. Applications leave task of
object memory management to Python VM. Python automatically manages
memory using reference counting and garbage collection. But, Python
memory manager may bloat the VM size, and sometimes it may consume
complete main memory. It causes applications to deliver low performance
and encounter unexpected memory errors.&lt;/p&gt;
&lt;p&gt;This talk dissects the internals of CPython memory manager, its
limitations and negative impact on application behavior. We demonstrate
the problem of memory leaks by learning Python heap pattern, object
graphs and memory profiling. Next, we suggest solutions to reduce memory
footprints of applications, tools to diagnose and fix memory leaks and
lesson learned as best development practices.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Slides&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://speakerdeck.com/nzpug/vishal-kanaujia-dissecting-memory-mysteries-of-python"&gt;https://speakerdeck.com/nzpug/vishal-kanaujia-dissecting-memory-mysteries-of-python&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chetan Giridhar</dc:creator><pubDate>Thu, 12 Sep 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-09-12:kiwi-pycon-2013/dissecting-memory-mysteries-of-python-0.html</guid></item></channel></rss>