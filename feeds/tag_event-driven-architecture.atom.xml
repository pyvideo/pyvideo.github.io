<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/tag_event-driven-architecture.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2019-05-04T00:00:00+00:00</updated><entry><title>Artisanal Async Adventures</title><link href="https://pyvideo.org/pycon-italia-2019/artisanal-async-adventures.html" rel="alternate"></link><published>2019-05-04T00:00:00+00:00</published><updated>2019-05-04T00:00:00+00:00</updated><author><name>Jonas Obrist</name></author><id>tag:pyvideo.org,2019-05-04:pycon-italia-2019/artisanal-async-adventures.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;If you want to write an efficient server, asynchronous networking is an
excellent strategy to do so. To build a production ready system, you
would use asyncio, tornado, twisted, trio or another popular
implementation. However, to fully understand how and why it works, I
will ignore these solutions and instead craft an artisanal asynchronous
implementation in front of your very eyes. Step by step we will turn a
blocking socket server, only capable of handling a single connection at
a time, into a beautiful non blocking server that has no trouble dealing
with many connections at once. By the end, you should see that
asynchronous code is not magical at all, but nevertheless incredibly
useful.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Feedback form:&lt;/strong&gt; &lt;a class="reference external" href="https://python.it/feedback-1742"&gt;https://python.it/feedback-1742&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;Saturday 4 May&lt;/strong&gt; at 11:30 &lt;a class="reference external" href="/en/sprints/schedule/pycon10/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</summary><category term="async"></category><category term="event-driven-architecture"></category><category term="python3"></category></entry><entry><title>Python &amp; Serverless: Refactor your monolith piece by piece</title><link href="https://pyvideo.org/pycon-italia-2019/python-serverless-refactor-your-monolith-piece-by-piece.html" rel="alternate"></link><published>2019-05-03T00:00:00+00:00</published><updated>2019-05-03T00:00:00+00:00</updated><author><name>Giuseppe Vallarelli</name></author><id>tag:pyvideo.org,2019-05-03:pycon-italia-2019/python-serverless-refactor-your-monolith-piece-by-piece.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python &amp;amp; Serverless: Refactor your monolith piece by piece&lt;/p&gt;
&lt;p&gt;The introduction of the Function as a Service (Serverless) technologies
is facilitating the adoption of a microservices based architecture. In
this talk we will discuss why this might be useful (scalability / cost
opportunities / choosing the right tool for the job) and what strategies
we can follow to either extract independent services or add new
capabilities using an event driven architecture style to a django web
application. We will end up our discussion talking about testing and
monitoring of our freshly baked services.&lt;/p&gt;
&lt;p&gt;In this talk we will see:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Serverless/FaaS concepts brief intro&lt;/li&gt;
&lt;li&gt;Breaking up the monolith rationale&lt;/li&gt;
&lt;li&gt;Extracting some modules into independent services&lt;/li&gt;
&lt;li&gt;Adding more capabilities using events as a trigger for our FaaS&lt;/li&gt;
&lt;li&gt;Testing &amp;amp; Monitoring&lt;/li&gt;
&lt;li&gt;References&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The intended audience should be familiar with the concepts related to
web applications, web apis and a smattering of serverless concepts.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Feedback form:&lt;/strong&gt; &lt;a class="reference external" href="https://python.it/feedback-1591"&gt;https://python.it/feedback-1591&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;Friday 3 May&lt;/strong&gt; at 11:15 &lt;a class="reference external" href="/en/sprints/schedule/pycon10/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</summary><category term="serverless"></category><category term="microservices"></category><category term="pyweb"></category><category term="aws"></category><category term="devops"></category><category term="django"></category><category term="lambda-functions"></category><category term="event-driven-architecture"></category><category term="cloud"></category><category term="faas"></category></entry></feed>