<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Fri, 19 Feb 2010 00:00:00 +0000</lastBuildDate><item><title>PyCon 2009: Using Twisted Deferreds (Part 1 of 3)</title><link>https://pyvideo.org/pycon-us-2009/pycon-2009--using-twisted-deferreds--part-1-of-3.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;While the documentation about deferreds is good, it is still not enough
for many. In this interactive tutorial, I will cover both the basics of
deferreds and many non-trivial use-cases, with discussion of various
approaches. Common mistakes, gotchas and other issues will be explained,
as well as good idioms and techniques to use deferreds without pain.
Deferreds bring asynchronous APIs the clarity and programming power that
is sometimes lost when using event-based programming. They are an idea
taken from many other programming languages, and made into a Pythonic
solution If you are using Twisted, or would like to use Twisted, this
tutorial can help you with one of the most subtle issues inherent in its
APIs - Deferreds.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Unknown</dc:creator><pubDate>Tue, 17 Feb 2009 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2009-02-17:pycon-us-2009/pycon-2009--using-twisted-deferreds--part-1-of-3.html</guid><category>asynchronous</category><category>deferreds</category><category>pycon</category><category>pycon2009</category><category>tutorial</category><category>twisted</category></item><item><title>PyCon 2009: Using Twisted Deferreds (Part 2 of 3)</title><link>https://pyvideo.org/pycon-us-2009/pycon-2009--using-twisted-deferreds--part-2-of-3.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;` &amp;lt;&lt;a class="reference external" href="http://blip.tv/file/1997952"&gt;http://blip.tv/file/1997952&lt;/a&gt;&amp;gt;`__&lt;/p&gt;
&lt;p&gt;While the documentation about deferreds is good, it is still not enough
for many. In this interactive tutorial, I will cover both the basics of
deferreds and many non-trivial use-cases, with discussion of various
approaches. Common mistakes, gotchas and other issues will be explained,
as well as good idioms and techniques to use deferreds without pain.
Deferreds bring asynchronous APIs the clarity and programming power that
is sometimes lost when using event-based programming. They are an idea
taken from many other programming languages, and made into a Pythonic
solution If you are using Twisted, or would like to use Twisted, this
tutorial can help you with one of the most subtle issues inherent in its
APIs - Deferreds.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Unknown</dc:creator><pubDate>Tue, 17 Feb 2009 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2009-02-17:pycon-us-2009/pycon-2009--using-twisted-deferreds--part-2-of-3.html</guid><category>asynchronous</category><category>deferreds</category><category>pycon</category><category>pycon2009</category><category>tutorial</category><category>twisted</category></item><item><title>PyCon 2009: Using Twisted Deferreds (Part 3 of 3)</title><link>https://pyvideo.org/pycon-us-2009/pycon-2009--using-twisted-deferreds--part-3-of-3.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;While the documentation about deferreds is good, it is still not enough
for many. In this interactive tutorial, I will cover both the basics of
deferreds and many non-trivial use-cases, with discussion of various
approaches. Common mistakes, gotchas and other issues will be explained,
as well as good idioms and techniques to use deferreds without pain.
Deferreds bring asynchronous APIs the clarity and programming power that
is sometimes lost when using event-based programming. They are an idea
taken from many other programming languages, and made into a Pythonic
solution If you are using Twisted, or would like to use Twisted, this
tutorial can help you with one of the most subtle issues inherent in its
APIs - Deferreds.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Unknown</dc:creator><pubDate>Tue, 17 Feb 2009 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2009-02-17:pycon-us-2009/pycon-2009--using-twisted-deferreds--part-3-of-3.html</guid><category>asynchronous</category><category>deferreds</category><category>pycon</category><category>pycon2009</category><category>tutorial</category><category>twisted</category></item><item><title>Turtles All The Way Down: Demystifying Deferreds, Decorators, and Declarations (#169)</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--turtles-all-the-way-down--demystifyin.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Turtles all the way down: Demystifying deferreds, decorators and
declarations&lt;/p&gt;
&lt;p&gt;Presented by Glyph Lefkowitz&lt;/p&gt;
&lt;p&gt;Python's flexible object model allows library and framework authors to
add very flexible declarations. Metaclasses, decorators, callable
objects, and operator overloading practically allow libraries to
re-define the language in order to provide a more concise, natural style
for that library. Unfortunately, the library user's first experience of
such conveniences is often confusing, because it's not clear what's
going on.&lt;/p&gt;
&lt;p&gt;In this talk, I will try to convince you that all of this wonderful
magic isn't all that weird. This is not a typical how-to session on how
to use a particular feature, either of Python or of Twisted, but will
rather draw examples from Python, Twisted, and Zope to illustrate
techniques you can use to read and understand &amp;quot;magical&amp;quot; Python code.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Glyph</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--turtles-all-the-way-down--demystifyin.html</guid><category>decorators</category><category>deferreds</category><category>delcarations</category><category>pycon</category><category>pycon2010</category></item></channel></rss>