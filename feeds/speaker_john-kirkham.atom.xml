<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org - John Kirkham</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_john-kirkham.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2023-07-10T00:00:00+00:00</updated><subtitle></subtitle><entry><title>dask image:A Library for Distributed Image Processing</title><link href="https://pyvideo.org/scipy-2019/dask-imagea-library-for-distributed-image-processing.html" rel="alternate"></link><published>2019-07-13T00:00:00+00:00</published><updated>2019-07-13T00:00:00+00:00</updated><author><name>John Kirkham</name></author><id>tag:pyvideo.org,2019-07-13:/scipy-2019/dask-imagea-library-for-distributed-image-processing.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Image processing in various domains like geospatial imaging, astronomy, neuroscience, etc. has seen the size of collected image datasets grow both due to novel techniques to expand the field of view and improve resolution. This presents a number of different challenges to workflows that were often traditionally designed to …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Image processing in various domains like geospatial imaging, astronomy, neuroscience, etc. has seen the size of collected image datasets grow both due to novel techniques to expand the field of view and improve resolution. This presents a number of different challenges to workflows that were often traditionally designed to work in memory. We explore useful primitives in dask and explain how these can be used to aid analyis. Using these primitives, we show users how common image processing functions can be built in this framework and point out their implementations in the dask-image library.&lt;/p&gt;
</content><category term="SciPy 2019"></category></entry><entry><title>GPU Packaging for the Community</title><link href="https://pyvideo.org/scipy-2020/gpu-packaging-for-the-community.html" rel="alternate"></link><published>2020-07-06T00:00:00+00:00</published><updated>2020-07-06T00:00:00+00:00</updated><author><name>John Kirkham</name></author><id>tag:pyvideo.org,2020-07-06:/scipy-2020/gpu-packaging-for-the-community.html</id><content type="html"></content><category term="SciPy 2020"></category></entry><entry><title>SciPy Tools Plenary Session - Day 3 | SciPy 2022</title><link href="https://pyvideo.org/scipy-2022/scipy-tools-plenary-session-day-3-scipy-2022.html" rel="alternate"></link><published>2022-07-11T00:00:00+00:00</published><updated>2022-07-11T00:00:00+00:00</updated><author><name>Wolf Vollprecht</name></author><id>tag:pyvideo.org,2022-07-11:/scipy-2022/scipy-tools-plenary-session-day-3-scipy-2022.html</id><content type="html"></content><category term="SciPy 2022"></category></entry><entry><title>Maintenance and Evolution of Zarr</title><link href="https://pyvideo.org/scipy-2023/maintenance-and-evolution-of-zarr.html" rel="alternate"></link><published>2023-07-10T00:00:00+00:00</published><updated>2023-07-10T00:00:00+00:00</updated><author><name>John Kirkham</name></author><id>tag:pyvideo.org,2023-07-10:/scipy-2023/maintenance-and-evolution-of-zarr.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A key feature of the Python data ecosystem is the reliance on simple but efficient primitives that follow well-defined interfaces to make tools work seamlessly together (Cf. &lt;a class="reference external" href="http://data-apis.org/"&gt;http://data-apis.org/&lt;/a&gt;). NumPy provides an in-memory representation for tensors. Dask provides parallelisation of tensor access. Xarray provides metadata linking tensor dimensions …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A key feature of the Python data ecosystem is the reliance on simple but efficient primitives that follow well-defined interfaces to make tools work seamlessly together (Cf. &lt;a class="reference external" href="http://data-apis.org/"&gt;http://data-apis.org/&lt;/a&gt;). NumPy provides an in-memory representation for tensors. Dask provides parallelisation of tensor access. Xarray provides metadata linking tensor dimensions. Zarr provides a missing feature, namely the scalable, persistent storage for annotated hierarchies of tensors. Defined through a community process, the Zarr specification enables the storage of large out-of-memory datasets locally and in the cloud. Implementations exist in C++, C, Java, Javascript, Julia, and Python, enabling.&lt;/p&gt;
</content><category term="SciPy 2023"></category></entry><entry><title>New CUDA Toolkit packages for Conda</title><link href="https://pyvideo.org/scipy-2023/new-cuda-toolkit-packages-for-conda.html" rel="alternate"></link><published>2023-07-10T00:00:00+00:00</published><updated>2023-07-10T00:00:00+00:00</updated><author><name>Thomson Comer</name></author><id>tag:pyvideo.org,2023-07-10:/scipy-2023/new-cuda-toolkit-packages-for-conda.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk, we will examine the new CUDA package layout for Conda (as included in conda-forge). Show how CUDA components have been broken out. Share how this affects development and package building. Walk through changes in the conda-forge infrastructure made to incorporate these new packages. Examine recipes using …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk, we will examine the new CUDA package layout for Conda (as included in conda-forge). Show how CUDA components have been broken out. Share how this affects development and package building. Walk through changes in the conda-forge infrastructure made to incorporate these new packages. Examine recipes using the new packages and what was needed to update them. Additionally will provide guidance on how to use these new packages in recipes or in library development.&lt;/p&gt;
</content><category term="SciPy 2023"></category></entry></feed>