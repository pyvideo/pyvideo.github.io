<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org - asyncio</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/tag_asyncio.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2022-06-03T00:00:00+00:00</updated><subtitle></subtitle><entry><title>Desenvolvendo APIs REST com Python 3 e Asyncio</title><link href="https://pyvideo.org/caipyra-2016/desenvolvendo-apis-rest-com-python-3-e-asyncio.html" rel="alternate"></link><published>2016-06-26T00:00:00+00:00</published><updated>2016-06-26T00:00:00+00:00</updated><author><name>Renato Garcia</name></author><id>tag:pyvideo.org,2016-06-26:/caipyra-2016/desenvolvendo-apis-rest-com-python-3-e-asyncio.html</id><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Palestra do Renato Garcia no Caipyra 2016:&lt;/p&gt;
&lt;p&gt;Desenvolvendo APIs REST com Python 3 e Asyncio&lt;/p&gt;
</content><category term="Caipyra 2016"></category><category term="api"></category><category term="apis"></category><category term="rest"></category><category term="rest api"></category><category term="asyncio"></category><category term="async"></category></entry><entry><title>Better async code with Python 3</title><link href="https://pyvideo.org/pycon-es-2015/better-async-code-with-python-3.html" rel="alternate"></link><published>2016-02-02T00:00:00+00:00</published><updated>2016-02-02T00:00:00+00:00</updated><author><name>Anton Caceres</name></author><id>tag:pyvideo.org,2016-02-02:/pycon-es-2015/better-async-code-with-python-3.html</id><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Learn async web development hands-on by using asyncio event loop in combination with subgenerator delegation syntax (yield from), creating beautiful concurrent code without writing a single callback.&lt;/p&gt;
</content><category term="PyCon ES 2015"></category><category term="workshop"></category><category term="asyncio"></category></entry><entry><title>Why I still develop synchronous web in the asyncIO era</title><link href="https://pyvideo.org/pycon-italia-2017/why-i-still-develop-synchronous-web-in-the-asyncio-era.html" rel="alternate"></link><published>2017-04-09T00:00:00+00:00</published><updated>2017-04-09T00:00:00+00:00</updated><author><name>Giovanni Barillari</name></author><id>tag:pyvideo.org,2017-04-09:/pycon-italia-2017/why-i-still-develop-synchronous-web-in-the-asyncio-era.html</id><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Since python 3.4 the introduction of the asyncIO module produced a new
way of building web applications and tons of new frameworks. With
asyncIO we take advantage of large throughput over the network, but is
it really everything about web development?&lt;/p&gt;
</content><category term="PyCon Italia 2017"></category><category term="web"></category><category term="asyncio"></category><category term="web-development"></category><category term="backend"></category></entry><entry><title>How to use Web-Sockets in Python</title><link href="https://pyvideo.org/pycon-italia-2018/how-to-use-web-sockets-in-python.html" rel="alternate"></link><published>2018-04-21T00:00:00+00:00</published><updated>2018-04-21T00:00:00+00:00</updated><author><name>Anton Caceres</name></author><id>tag:pyvideo.org,2018-04-21:/pycon-italia-2018/how-to-use-web-sockets-in-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Modern web-apps require bi-directional communication, reacting not only
to user actions but also to server events. This can be achieved
elegantly using Web Sockets, a protocol standardized by W3C to be a
default tool for full- duplex connections on the Web.&lt;/p&gt;
&lt;p&gt;Although most of web-frameworks do not support Web …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Modern web-apps require bi-directional communication, reacting not only
to user actions but also to server events. This can be achieved
elegantly using Web Sockets, a protocol standardized by W3C to be a
default tool for full- duplex connections on the Web.&lt;/p&gt;
&lt;p&gt;Although most of web-frameworks do not support Web Socket integration
out of the box, Python has multiple options available making it a piece
of cake. This talk showcases running Web Sockets with Python web-apps,
starting from situations that can make a good use of it, and followed by
an implementation with most practical frameworks: Tornado and Django
Channels. We will explore a similar style but different underlying
technologies of both, and finish with a live demo.&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;sabato 21 aprile&lt;/strong&gt; at 12:00 &lt;a class="reference external" href="/p3/schedule/pycon9/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</content><category term="PyCon Italia 2018"></category><category term="tornado"></category><category term="javascript"></category><category term="websockets"></category><category term="web-applications"></category><category term="web development"></category><category term="asyncio"></category></entry><entry><title>Debugging asynchronous programs in Python</title><link href="https://pyvideo.org/pycon-italia-2022/debugging-asynchronous-programs-in-python.html" rel="alternate"></link><published>2022-06-03T00:00:00+00:00</published><updated>2022-06-03T00:00:00+00:00</updated><author><name>Andrii Soldatenko</name></author><id>tag:pyvideo.org,2022-06-03:/pycon-italia-2022/debugging-asynchronous-programs-in-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Debugging asynchronous programs in Python - PyCon Italia 2022&lt;/p&gt;
&lt;p&gt;Recently the interest in asynchronous programming has grown
dramatically. Unfortunately, asynchronous programs do not always have
reproducible behavior. Even when they are run with the same inputs,
their results can be radically different. In this talk I’ll show you
different …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Debugging asynchronous programs in Python - PyCon Italia 2022&lt;/p&gt;
&lt;p&gt;Recently the interest in asynchronous programming has grown
dramatically. Unfortunately, asynchronous programs do not always have
reproducible behavior. Even when they are run with the same inputs,
their results can be radically different. In this talk I’ll show you
different approaches on how to debug asynchronous programs in Python.
Luckily, when it comes to debugging asynchronous applications in python,
we have a couple of options to consider. The writers of the asyncio
module have very kindly provided a debug mode, which is quite powerful
and can really aid us in our debugging adventures without the overhead
of modifying the system’s code base too dramatically. In particular I’ll
show you what asyncio debug mode means for developers, and how to source
tracebacks for unhandled exceptions in futures. Also how to detect
accidental blocking for I/O. We discuss how to monitor the asyncio event
loop and collect metrics in statsD. Finally we discuss monitor and cli
capabilities for asyncio applications based on aiomonitor and
aioconsole. Also we discuss how asynchronous python works in REPL via
autoawait based on ipython and how to do it in vanilla python REPL.&lt;/p&gt;
&lt;p&gt;Speaker: Andrii Soldatenko&lt;/p&gt;
</content><category term="PyCon Italia 2022"></category><category term="asyncio"></category><category term="cpython"></category><category term="debugging"></category></entry><entry><title>Emmett: the web framework for inventors</title><link href="https://pyvideo.org/pycon-italia-2022/emmett-the-web-framework-for-inventors.html" rel="alternate"></link><published>2022-06-03T00:00:00+00:00</published><updated>2022-06-03T00:00:00+00:00</updated><author><name>Giovanni Barillari</name></author><id>tag:pyvideo.org,2022-06-03:/pycon-italia-2022/emmett-the-web-framework-for-inventors.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Emmett: the web framework for inventors - PyCon Italia 2022&lt;/p&gt;
&lt;p&gt;Great Scott! Is this 2022? But wait, did I wrongly set the temporal
circuits of the DeLorean and went to 2012, or Python web developers are
still stuck with Django and Flask? Martin! We ended up in a timeline
without …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Emmett: the web framework for inventors - PyCon Italia 2022&lt;/p&gt;
&lt;p&gt;Great Scott! Is this 2022? But wait, did I wrongly set the temporal
circuits of the DeLorean and went to 2012, or Python web developers are
still stuck with Django and Flask? Martin! We ended up in a timeline
without AsyncIO! Let’s get back and fix it! And remember the plutonium!
An overview of Emmett’s capabilities and features, and a few
demonstrations on how the web framwork for inventors can help developers
writing awesome applications in the AsyncIO era.&lt;/p&gt;
&lt;p&gt;Speaker: Giovanni Barillari&lt;/p&gt;
</content><category term="PyCon Italia 2022"></category><category term="asyncio"></category><category term="open source"></category><category term="rest"></category></entry><entry><title>Everything You Always Wanted to Know About Async But Were Afraid to Ask (cit.)</title><link href="https://pyvideo.org/pycon-italia-2022/everything-you-always-wanted-to-know-about-async-but-were-afraid-to-ask-cit.html" rel="alternate"></link><published>2022-06-03T00:00:00+00:00</published><updated>2022-06-03T00:00:00+00:00</updated><author><name>Deusebio</name></author><id>tag:pyvideo.org,2022-06-03:/pycon-italia-2022/everything-you-always-wanted-to-know-about-async-but-were-afraid-to-ask-cit.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Everything You Always Wanted to Know About Async But Were Afraid to Ask
(cit.) - PyCon Italia 2022&lt;/p&gt;
&lt;p&gt;In this talk, we will dig in the marvelous world of sync/async/parallel
computation. And show you how to define abstract computation upfront
lazily using Promises, deferring execution subsequently and throttling …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Everything You Always Wanted to Know About Async But Were Afraid to Ask
(cit.) - PyCon Italia 2022&lt;/p&gt;
&lt;p&gt;In this talk, we will dig in the marvelous world of sync/async/parallel
computation. And show you how to define abstract computation upfront
lazily using Promises, deferring execution subsequently and throttling
the computation as you please. After this, async processing won’t have
any secret to you I still remember when during an interview for a Junior
Data Scientist position, I was asked about async and when to use it. I
was buffled. And - I must say - after learning about these concepts,
they are not that hard. Nevertheless, still mysterious to some. In this
talk, after explaining some basic concepts about asynchronous processing
and reviewing the most important Pythonic packages to be used in the
async context, we will gently introduce some notions of functional
programming and - most of all - one of its most useful tool for async
operations: the Promise monad. Thanks to this, we will then be able to
create, compose and chain abstract computations together, therefore
defining what we want to do, without actually doing it yet. Acting
lazily, its execution will rather be deferred to a second moment, where
we will make use of async and parallel framework to speed up and
parallelise execution. We will also show you how to throttle the
execution, a need that often arises when dealing with rate-limited
services and/or avoid overloading external component or resources. The
talk will be accompanied by the help of a simple Github repo that will
have examples and (hopefully) useful utility functions that will allow
you to approach the asynchronous world more easily and seamlessly.&lt;/p&gt;
&lt;p&gt;Speaker: Deusebio&lt;/p&gt;
</content><category term="PyCon Italia 2022"></category><category term="asyncio"></category><category term="clean code"></category><category term="functional programming"></category></entry><entry><title>/metrics, a must have</title><link href="https://pyvideo.org/pycon-italia-2022/metrics-a-must-have.html" rel="alternate"></link><published>2022-06-03T00:00:00+00:00</published><updated>2022-06-03T00:00:00+00:00</updated><author><name>Luiz Marques</name></author><id>tag:pyvideo.org,2022-06-03:/pycon-italia-2022/metrics-a-must-have.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;/metrics, a must have - PyCon Italia 2022&lt;/p&gt;
&lt;p&gt;With modern applications being distributed, only testing is enough to
ensure your apps are healthy? The web is wild and users are
unpredictable. Having a good strategy of observability in place is
essential. In this talk, I’ll demo how to setup …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;/metrics, a must have - PyCon Italia 2022&lt;/p&gt;
&lt;p&gt;With modern applications being distributed, only testing is enough to
ensure your apps are healthy? The web is wild and users are
unpredictable. Having a good strategy of observability in place is
essential. In this talk, I’ll demo how to setup extensible metrics in
your app using open-source tools With the advent of microservices and
all that jazz, the complexity of monitoring applications increased quite
a lot. How many instances of my app do I have running? Are they all
healthy? How is it performing under heavy load? Questions like that can
not be answered by guesses only, but you need data to be more assertive.&lt;/p&gt;
&lt;p&gt;In this talk, we will create a sample web application and instrument it
using Prometheus (and potentially other tools such as Grafana, Jaeger,
Alert Manager, etc) and see in practice how we can monitor web
applications in real-time.&lt;/p&gt;
&lt;p&gt;Speaker: Luiz Marques&lt;/p&gt;
</content><category term="PyCon Italia 2022"></category><category term="apis"></category><category term="asyncio"></category><category term="debugging"></category><category term="docker"></category><category term="open source"></category><category term="performance"></category><category term="tooling"></category></entry><entry><title>Writing async microservices in Python</title><link href="https://pyvideo.org/pycon-italia-2022/writing-async-microservices-in-python.html" rel="alternate"></link><published>2022-06-03T00:00:00+00:00</published><updated>2022-06-03T00:00:00+00:00</updated><author><name>Iacopo Spalletti</name></author><id>tag:pyvideo.org,2022-06-03:/pycon-italia-2022/writing-async-microservices-in-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Writing async microservices in Python - PyCon Italia 2022&lt;/p&gt;
&lt;p&gt;Writing an async microservice is a good way to improve the concurrency
of your platform and decouple the different components of a web
platform, Python provides excellent tools to write them and we’re going
to introduce some of them for …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Writing async microservices in Python - PyCon Italia 2022&lt;/p&gt;
&lt;p&gt;Writing an async microservice is a good way to improve the concurrency
of your platform and decouple the different components of a web
platform, Python provides excellent tools to write them and we’re going
to introduce some of them for you to immediately start creating your
own. While not exactly new, async programming has arrived quite recently
in the Python core. This enabled to create a wide ecosystem of
async-first or async-enabled libraries and frameworks that makes async
programming more available to the everyday developer. Writing an async
microservice is a good way to get your hands dirty with async
programming: we are going to see how to build it using FastAPI and its
ecosystem to show tecniques and pitfalls.&lt;/p&gt;
&lt;p&gt;Slides:&lt;/p&gt;
&lt;p&gt;Speaker: Iacopo Spalletti&lt;/p&gt;
</content><category term="PyCon Italia 2022"></category><category term="asyncio"></category><category term="microservices"></category></entry><entry><title>Using Asyncio in Python 3</title><link href="https://pyvideo.org/pycon-philippines-2019/using-asyncio-in-python-3.html" rel="alternate"></link><published>2019-02-23T00:00:00+00:00</published><updated>2019-02-23T00:00:00+00:00</updated><author><name>Marte Soliza</name></author><id>tag:pyvideo.org,2019-02-23:/pycon-philippines-2019/using-asyncio-in-python-3.html</id><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Asyncio (together with async / await syntax) is one of the most exciting new features in Python 3. Marte will detail what it is and how it can be used, together with concepts surrounding it.&lt;/p&gt;
</content><category term="PyCon Philippines 2019"></category><category term="async"></category><category term="asyncio"></category></entry><entry><title>Asyncio in the Wild</title><link href="https://pyvideo.org/pycon-se-2019/asyncio-in-the-wild.html" rel="alternate"></link><published>2019-10-31T00:00:00+00:00</published><updated>2019-10-31T00:00:00+00:00</updated><author><name>Akos Hochrein</name></author><id>tag:pyvideo.org,2019-10-31:/pycon-se-2019/asyncio-in-the-wild.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Asyncio is a fairly new tool and no often used in production. In this talk we will be aiming for use-cases and examples so people can get more confidence moving away from the synchronous world. The talk aims to solve the problem of uncertainty when getting started with asynchronous …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Asyncio is a fairly new tool and no often used in production. In this talk we will be aiming for use-cases and examples so people can get more confidence moving away from the synchronous world. The talk aims to solve the problem of uncertainty when getting started with asynchronous programming in Python. After the talk the audience will be equipped with new tools they can look up at home to get started with asynchronous web development in Python, also, hopefully, they will have some extra confidence in the area.&lt;/p&gt;
</content><category term="PyCon SE 2019"></category><category term="async"></category><category term="asyncio"></category></entry><entry><title>Concurrent asyncio and sanity</title><link href="https://pyvideo.org/pycon-uk-2019/concurrent-asyncio-and-sanity.html" rel="alternate"></link><published>2019-09-16T00:00:00+00:00</published><updated>2019-09-16T00:00:00+00:00</updated><author><name>Martijn Pieters</name></author><id>tag:pyvideo.org,2019-09-16:/pycon-uk-2019/concurrent-asyncio-and-sanity.html</id><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Do you find programming with asyncio daunting? Are you wondering how you'd build a real-world network-connected service with this and not die trying? In this talk I want to share some best practices and tips to help you create reliable, maintainable applications using concurrency.&lt;/p&gt;
</content><category term="PyCon UK 2019"></category><category term="asyncio"></category><category term="concurrency"></category><category term="scalability"></category></entry><entry><title>Thinking Outside the GIL with AsyncIO and Multiprocessing</title><link href="https://pyvideo.org/pycon-us-2018/thinking-outside-the-gil-with-asyncio-and-multiprocessing.html" rel="alternate"></link><published>2018-05-11T00:00:00+00:00</published><updated>2018-05-11T00:00:00+00:00</updated><author><name>Amethyst Reese</name></author><id>tag:pyvideo.org,2018-05-11:/pycon-us-2018/thinking-outside-the-gil-with-asyncio-and-multiprocessing.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Have you ever written a small, elegant application that couldn't keep up with the growth of your data or user demand? Did your beautiful design end up buried in threads and locks? Did Python's very special Global Interpreter Lock make all of this an exercise in futility?&lt;/p&gt;
&lt;p&gt;This talk …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Have you ever written a small, elegant application that couldn't keep up with the growth of your data or user demand? Did your beautiful design end up buried in threads and locks? Did Python's very special Global Interpreter Lock make all of this an exercise in futility?&lt;/p&gt;
&lt;p&gt;This talk is for you! With the combined powers of AsyncIO and multiprocessing, we'll redesign an old multithreaded application limited by the GIL into a modern solution that scales with the demand using only the standard library. No prior AsyncIO or multiprocessing experience required.&lt;/p&gt;
</content><category term="PyCon US 2018"></category><category term="asyncio"></category><category term="multiprocessing"></category></entry><entry><title>Asyncio, websockets, and BTC sitting in a tree</title><link href="https://pyvideo.org/pydata-amsterdam-2018/asyncio-websockets-and-btc-sitting-in-a-tree.html" rel="alternate"></link><published>2018-05-26T00:00:00+00:00</published><updated>2018-05-26T00:00:00+00:00</updated><author><name>Giovanni Lanzani</name></author><id>tag:pyvideo.org,2018-05-26:/pydata-amsterdam-2018/asyncio-websockets-and-btc-sitting-in-a-tree.html</id><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Asyncio is a different way to think about how you program. In this talk we will talk about using asyncio to consume data from a bitcoin exchange offering a websocket endpoint.&lt;/p&gt;
</content><category term="PyData Amsterdam 2018"></category><category term="asyncio"></category></entry><entry><title>Building real-world applications with `asyncio`</title><link href="https://pyvideo.org/pytexas-2015/building-real-world-applications-with-asyncio.html" rel="alternate"></link><published>2015-10-15T00:00:00+00:00</published><updated>2015-10-15T00:00:00+00:00</updated><author><name>Joel Watts</name></author><id>tag:pyvideo.org,2015-10-15:/pytexas-2015/building-real-world-applications-with-asyncio.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this tutorial, Eloy Zuñiga, Jr. and Joel Watts will work through the
process of building an event-driven application using
&lt;tt class="docutils literal"&gt;`asyncio&lt;/tt&gt; &amp;lt;&lt;a class="reference external" href="https://docs.python.org/3/library/asyncio.html"&gt;https://docs.python.org/3/library/asyncio.html&lt;/a&gt;&amp;gt;`__ and web
technologies. By the end, we hope you'll be able to answer the following
questions:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Why should I …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this tutorial, Eloy Zuñiga, Jr. and Joel Watts will work through the
process of building an event-driven application using
&lt;tt class="docutils literal"&gt;`asyncio&lt;/tt&gt; &amp;lt;&lt;a class="reference external" href="https://docs.python.org/3/library/asyncio.html"&gt;https://docs.python.org/3/library/asyncio.html&lt;/a&gt;&amp;gt;`__ and web
technologies. By the end, we hope you'll be able to answer the following
questions:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Why should I care about async programming at all?&lt;/li&gt;
&lt;li&gt;What is &lt;tt class="docutils literal"&gt;asyncio&lt;/tt&gt; and how is it used?&lt;/li&gt;
&lt;li&gt;How do I use this stuff to solve real-world problems?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We'll assume some familiarity with Python, but no prior experience with
async programming is required. Please come with Python 3.4+ installed.&lt;/p&gt;
&lt;p&gt;All the codez can be found in these 2 repos&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/eloyz/aioui"&gt;https://github.com/eloyz/aioui&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/jpwatts/aioserver"&gt;https://github.com/jpwatts/aioserver&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content><category term="PyTexas 2015"></category><category term="Asyncio"></category><category term="async"></category></entry><entry><title>Why should I care about asyncio?</title><link href="https://pyvideo.org/pytexas-2015/why-should-i-care-about-asyncio.html" rel="alternate"></link><published>2015-10-15T00:00:00+00:00</published><updated>2015-10-15T00:00:00+00:00</updated><author><name>Joel Watts</name></author><id>tag:pyvideo.org,2015-10-15:/pytexas-2015/why-should-i-care-about-asyncio.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python 3.3 added &lt;tt class="docutils literal"&gt;yield from&lt;/tt&gt; and 3.4 added
&lt;tt class="docutils literal"&gt;`asyncio&lt;/tt&gt; &amp;lt;&lt;a class="reference external" href="https://docs.python.org/3/library/asyncio.html"&gt;https://docs.python.org/3/library/asyncio.html&lt;/a&gt;&amp;gt;`__. Python
3.5 adds &lt;tt class="docutils literal"&gt;async&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;await&lt;/tt&gt; from &lt;a class="reference external" href="https://www.python.org/dev/peps/pep-0492/"&gt;PEP
492&lt;/a&gt;. What is all this
stuff? Why do we need new syntax? And why should I care?&lt;/p&gt;
&lt;p&gt;This talk is …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python 3.3 added &lt;tt class="docutils literal"&gt;yield from&lt;/tt&gt; and 3.4 added
&lt;tt class="docutils literal"&gt;`asyncio&lt;/tt&gt; &amp;lt;&lt;a class="reference external" href="https://docs.python.org/3/library/asyncio.html"&gt;https://docs.python.org/3/library/asyncio.html&lt;/a&gt;&amp;gt;`__. Python
3.5 adds &lt;tt class="docutils literal"&gt;async&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;await&lt;/tt&gt; from &lt;a class="reference external" href="https://www.python.org/dev/peps/pep-0492/"&gt;PEP
492&lt;/a&gt;. What is all this
stuff? Why do we need new syntax? And why should I care?&lt;/p&gt;
&lt;p&gt;This talk is about why async programming is worth caring about and why
Python's approach has me so excited.&lt;/p&gt;
</content><category term="PyTexas 2015"></category><category term="Asyncio"></category><category term="async"></category></entry><entry><title>Call Me Later</title><link href="https://pyvideo.org/pywaw-summit-2015/call-me-later.html" rel="alternate"></link><published>2015-11-02T00:00:00+00:00</published><updated>2015-11-02T00:00:00+00:00</updated><author><name>Łukasz Langa</name></author><id>tag:pyvideo.org,2015-11-02:/pywaw-summit-2015/call-me-later.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Talk: Call Me Later&lt;/p&gt;
&lt;p&gt;asyncio is the reason to switch to Python 3 now. There, I said it. Is this used in production at Facebook? It is. On how many machines? On all of them. Why? It makes concurrent code easier to read. Easier to test. Sometimes even faster …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Talk: Call Me Later&lt;/p&gt;
&lt;p&gt;asyncio is the reason to switch to Python 3 now. There, I said it. Is this used in production at Facebook? It is. On how many machines? On all of them. Why? It makes concurrent code easier to read. Easier to test. Sometimes even faster to run.If the words &amp;quot;event loop&amp;quot;, &amp;quot;coroutine&amp;quot;, &amp;quot;yield from&amp;quot;, &amp;quot;executor&amp;quot; or &amp;quot;future&amp;quot; make you feel uneasy, come learn how beautiful and easy to understand it actually is at the core. No prior asyncore, Twisted or Node.js experience required.&lt;/p&gt;
&lt;p&gt;Speaker: Łukasz Langa. Python committer since 2010. Chronic perfectionist. Pianist. Dad. In his free time uses Python 3 to help Facebook maintain cache consistency.&lt;/p&gt;
&lt;p&gt;Slides: &lt;a class="reference external" href="http://fb.me/call-me-later"&gt;http://fb.me/call-me-later&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;License: For reuse of this video under a more permissive license please get in touch with us. The speakers retain the copyright for their performances.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://summit.pywaw.org"&gt;http://summit.pywaw.org&lt;/a&gt;&lt;/p&gt;
</content><category term="PyWaw Summit 2015"></category><category term="asyncio"></category></entry></feed>