<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_robin-camille-davis.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2018-10-05T00:00:00+00:00</updated><entry><title>Keep it secret, keep it safe! Preserving anonymity by subverting stylometry</title><link href="https://pyvideo.org/pygotham-2018/keep-it-secret-keep-it-safe-preserving-anonymity-by-subverting-stylometry.html" rel="alternate"></link><published>2018-10-05T00:00:00+00:00</published><updated>2018-10-05T00:00:00+00:00</updated><author><name>Robin Camille Davis</name></author><id>tag:pyvideo.org,2018-10-05:pygotham-2018/keep-it-secret-keep-it-safe-preserving-anonymity-by-subverting-stylometry.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk, I will introduce you to adversarial stylometry and demonstrate several techniques with a web tool I built that uses Flask, the Natural Language Toolkit (NLTK), and Scikit-learn.&lt;/p&gt;
&lt;p&gt;What’s stylometry? If you wish to remain anonymous, you can use any number of privacy technologies, but you could still be identified simply by the words you use. Using machine learning, stylometry can identify authors of anonymous documents by analyzing the frequency of function words (“of” and “was,” for example) and comparing results to known writing samples. Your writing style is therefore uniquely quantifiable and can serve reliably as a biometric. Writers who wish to remain anonymous — like whistleblowers, activists, and cryptocurrency inventors — should consider using “adversarial” stylometric techniques to outsmart authorship attribution software. In this presentation, I will explain how this is possible and demonstrate a few ways to preserve your anonymity, including using a synonym replacer programmed in Python.&lt;/p&gt;
&lt;p&gt;As a relatively new programmer, I took advantage of several Python libraries to help me build this tool. I will touch on calculating word frequency with NLTK and using Scikit-learn to classify documents. This talk is geared toward people who want to use Python to analyze, transform, and generate written language.&lt;/p&gt;
</summary></entry></feed>