<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org - Reuven M. Lerner</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_reuven-m-lerner.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2025-05-16T00:00:00+00:00</updated><subtitle></subtitle><entry><title>Practical decorators</title><link href="https://pyvideo.org/pycon-us-2019/practical-decorators.html" rel="alternate"></link><published>2019-05-03T10:50:00+00:00</published><updated>2019-05-03T10:50:00+00:00</updated><author><name>Reuven M. Lerner</name></author><id>tag:pyvideo.org,2019-05-03:/pycon-us-2019/practical-decorators.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Decorators are one of Python's most powerful features. But even if you
understand what they do, it's not always obvious what you can do with
them. Sure, from a practical perspective, they let you remove repeated
code from your callables. And semantically, they let you think at a
higher …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Decorators are one of Python's most powerful features. But even if you
understand what they do, it's not always obvious what you can do with
them. Sure, from a practical perspective, they let you remove repeated
code from your callables. And semantically, they let you think at a
higher level of abstraction, applying the same treatment to functions
and classes.&lt;/p&gt;
&lt;p&gt;But what can you actually do with them? For many Python developers I've
encountered, ecorators sometimes appear to be a solution looking for a
problem.&lt;/p&gt;
&lt;p&gt;In this talk, I'll show you some practical uses for decorators, and how
you can use them to make your code more readable and maintainable, while
also providing more semantic power. Moreover, you'll see examples of
things would be hard to do without decorators. I hope that after this
talk, you'll have a good sense of how to use decorators in your own
Python projects.&lt;/p&gt;
</content><category term="PyCon US 2019"></category><category term="talk"></category></entry><entry><title>Function dissection lab -- learn how functions</title><link href="https://pyvideo.org/pycon-us-2020/function-dissection-lab-learn-how-functions.html" rel="alternate"></link><published>2020-04-17T00:00:00+00:00</published><updated>2020-04-17T00:00:00+00:00</updated><author><name>Reuven M. Lerner</name></author><id>tag:pyvideo.org,2020-04-17:/pycon-us-2020/function-dissection-lab-learn-how-functions.html</id><content type="html"></content><category term="PyCon US 2020"></category></entry><entry><title>When is an exception not an exception? Using warnings in Python</title><link href="https://pyvideo.org/pycon-us-2021/when-is-an-exception-not-an-exception-using-warnings-in-python.html" rel="alternate"></link><published>2021-05-14T00:00:00+00:00</published><updated>2021-05-14T00:00:00+00:00</updated><author><name>Reuven M. Lerner</name></author><id>tag:pyvideo.org,2021-05-14:/pycon-us-2021/when-is-an-exception-not-an-exception-using-warnings-in-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;If your code encounters a big problem, then you probably want to raise an exception. But what should your code do if it finds a small problem, one that shouldn't be ignored, but that doesn't merit an exception? Python's answer to this question is warnings.&lt;/p&gt;
&lt;p&gt;In this talk, I'll …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;If your code encounters a big problem, then you probably want to raise an exception. But what should your code do if it finds a small problem, one that shouldn't be ignored, but that doesn't merit an exception? Python's answer to this question is warnings.&lt;/p&gt;
&lt;p&gt;In this talk, I'll introduce Python's warnings, close cousins to exceptions but still distinct from them. We'll see how you can generate warnings, and what happens when you do. But then we'll dig deeper, looking at how you can filter and redirect warnings, telling Python which types of warnings you want to see, and which you want to hide. We'll also see how you can get truly fancy, turning some warnings into (potentially fatal) exceptions and handling certain types with custom callback functions.&lt;/p&gt;
&lt;p&gt;After this talk, you'll be able to take advantage of Python's warning system, letting your users know when something is wrong without having to choose between &amp;quot;print&amp;quot; and a full-blown exception.&lt;/p&gt;
&lt;p&gt;Slides: &lt;a class="reference external" href="https://speakerdeck.com/reuven/when-is-an-exception-not-an-exception-using-pythons-warnings"&gt;https://speakerdeck.com/reuven/when-is-an-exception-not-an-exception-using-pythons-warnings&lt;/a&gt;&lt;/p&gt;
</content><category term="PyCon US 2021"></category></entry><entry><title>Understanding attributes (Or: They're not nearly as boring as you think!)</title><link href="https://pyvideo.org/pycon-us-2022/understanding-attributes-or-theyre-not-nearly-as-boring-as-you-think.html" rel="alternate"></link><published>2022-04-27T00:00:00+00:00</published><updated>2022-04-27T00:00:00+00:00</updated><author><name>Reuven M. Lerner</name></author><id>tag:pyvideo.org,2022-04-27:/pycon-us-2022/understanding-attributes-or-theyre-not-nearly-as-boring-as-you-think.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Attributes in Python, which we use dozens of times each day, seem boring, obvious, and not worthy of attention. But it turns out that they're key to the Python language: Every time you say a.b in Python, that little dot is hiding a lot of work, from searching …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Attributes in Python, which we use dozens of times each day, seem boring, obvious, and not worthy of attention. But it turns out that they're key to the Python language: Every time you say a.b in Python, that little dot is hiding a lot of work, from searching across multiple objects to silently rewriting things. And it turns out that what happens with attributes, while not always obvious to developers, determines a great deal of behavior in the Python language.&lt;/p&gt;
&lt;p&gt;In this talk, I'll discuss what attributes are (and aren't), what Python does when you use a dot (.) in your code, and how you can take advantage of it. We'll talk about attribute lookup, about inheritance, and about methods vs. functions. We'll also look into properties, and how they allow us to have attributes that look like data but behave like setters and getters. Finally, we'll look at the descriptor protocol, which makes so much of Python's functionality possible, including the automatic insertion of &amp;quot;self&amp;quot; as the first argument in method calls.&lt;/p&gt;
</content><category term="PyCon US 2022"></category><category term="talk"></category></entry><entry><title>Generators, coroutines, and nanoservices</title><link href="https://pyvideo.org/pycon-us-2023/generators-coroutines-and-nanoservices.html" rel="alternate"></link><published>2023-04-21T00:00:00+00:00</published><updated>2023-04-21T00:00:00+00:00</updated><author><name>Reuven M. Lerner</name></author><id>tag:pyvideo.org,2023-04-21:/pycon-us-2023/generators-coroutines-and-nanoservices.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Generator functions have been a part of Python for many years already,
and are a well known technique for creating iterators. But generators
have a few lesser-known aspects, including their “send” method and the
“yield from” syntax. Many Python developers shy away from using them,
unsure of what they …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Generator functions have been a part of Python for many years already,
and are a well known technique for creating iterators. But generators
have a few lesser-known aspects, including their “send” method and the
“yield from” syntax. Many Python developers shy away from using them,
unsure of what they would do, or how they would be useful — seeing
coroutines as a solution looking for a problem.&lt;/p&gt;
&lt;p&gt;In this talk, I’ll tell you why coroutines can be useful, and how
thinking about them as in-process “nanoservices” puts us in the right
frame of mind to determine when they would and wouldn’t be appropriate.
Among the topics we’ll explore are:&lt;/p&gt;
</content><category term="PyCon US 2023"></category></entry><entry><title>Comprehending comprehensions</title><link href="https://pyvideo.org/pycon-us-2023/comprehending-comprehensions.html" rel="alternate"></link><published>2023-04-19T00:00:00+00:00</published><updated>2023-04-19T00:00:00+00:00</updated><author><name>Reuven M. Lerner</name></author><id>tag:pyvideo.org,2023-04-19:/pycon-us-2023/comprehending-comprehensions.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Comprehensions are one of the most important — and misunderstood — parts
of Python. In this tutorial, I'll walk you through comprehensions,
including how to write them, and why you would want to do so. By the
time you finish this tutorial, you'll fully understand list, set and
dict comprehensions, as …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Comprehensions are one of the most important — and misunderstood — parts
of Python. In this tutorial, I'll walk you through comprehensions,
including how to write them, and why you would want to do so. By the
time you finish this tutorial, you'll fully understand list, set and
dict comprehensions, as well as nested comprehensions and generator
expressions. You'll understand the differences between regular &amp;quot;for&amp;quot;
loops and comprehensions, and where to use them.&lt;/p&gt;
</content><category term="PyCon US 2023"></category></entry><entry><title>Times and dates in Pandas</title><link href="https://pyvideo.org/pycon-us-2024/times-and-dates-in-pandas.html" rel="alternate"></link><published>2024-05-17T00:00:00+00:00</published><updated>2024-05-17T00:00:00+00:00</updated><author><name>Reuven M. Lerner</name></author><id>tag:pyvideo.org,2024-05-17:/pycon-us-2024/times-and-dates-in-pandas.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Pandas is famously flexible and capable at analyzing numeric data. But
Pandas is also flexible and capable at working with times and dates. In
this talk, I'll describe the dtypes associated with times and dates, the
sorts of calculations you can perform, issues with parsing and importing
datetime data …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Pandas is famously flexible and capable at analyzing numeric data. But
Pandas is also flexible and capable at working with times and dates. In
this talk, I'll describe the dtypes associated with times and dates, the
sorts of calculations you can perform, issues with parsing and importing
datetime data, and how you can perform more complex tasks, such as
grouping, pivoting, and resampling. By the time this talk is over,
you'll be able to work with time-based data in new ways.&lt;/p&gt;
&lt;p&gt;times and dates work, from handling inputs to performing sophisticated
analysis.&lt;/p&gt;
</content><category term="PyCon US 2024"></category></entry><entry><title>All about decorators</title><link href="https://pyvideo.org/pycon-us-2024/all-about-decorators.html" rel="alternate"></link><published>2024-05-16T00:00:00+00:00</published><updated>2024-05-16T00:00:00+00:00</updated><author><name>Reuven M. Lerner</name></author><id>tag:pyvideo.org,2024-05-16:/pycon-us-2024/all-about-decorators.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Decorators are one of Python's most powerful features. But for many
developers, they remain somewhat mysterious and intimidating. In this
tutorial, you'll learn what decorators are, how they work, how to write
them, and when you should use them. Along the way, you'll write a bunch
of decorators that …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Decorators are one of Python's most powerful features. But for many
developers, they remain somewhat mysterious and intimidating. In this
tutorial, you'll learn what decorators are, how they work, how to write
them, and when you should use them. Along the way, you'll write a bunch
of decorators that will demonstrate their power.&lt;/p&gt;
</content><category term="PyCon US 2024"></category></entry><entry><title>The PyArrow revolution in Pandas</title><link href="https://pyvideo.org/pycon-us-2025/the-pyarrow-revolution-in-pandas.html" rel="alternate"></link><published>2025-05-16T00:00:00+00:00</published><updated>2025-05-16T00:00:00+00:00</updated><author><name>Reuven M. Lerner</name></author><id>tag:pyvideo.org,2025-05-16:/pycon-us-2025/the-pyarrow-revolution-in-pandas.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Pandas has long used NumPy for its back-end storage. But things are changing, and the future of Pandas will likely be tied closely with PyArrow. What are Arrow and PyArrow? How do they affect Pandas users today, and how will they affect us in the future? Is PyArrow always …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Pandas has long used NumPy for its back-end storage. But things are changing, and the future of Pandas will likely be tied closely with PyArrow. What are Arrow and PyArrow? How do they affect Pandas users today, and how will they affect us in the future? Is PyArrow always faster than the current Pandas backend? In this talk, I introduce PyArrow, tell you what it does, how we can already use it in our Pandas work, and when it's appropriate for you to use it.&lt;/p&gt;
</content><category term="PyCon US 2025"></category></entry></feed>