<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Mon, 30 May 2016 00:00:00 +0000</lastBuildDate><item><title>Building a Kinect game with Python</title><link>https://pyvideo.org/pycon-ar-2012/building-a-kinect-game-with-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk will show you how to develop a game using Kinect from Python.
I'll start w/ an introduction to the Kinect API including skeleton
tracking, normal video, depth video, and audio APIs including speech
recognition. I’ll then show how the Kinect APIs can be incorporated into
a game using PyGame. After the talk you’ll be able to start developing
your own Python based Kinect games!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dino Viehland</dc:creator><pubDate>Sat, 17 Nov 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-11-17:pycon-ar-2012/building-a-kinect-game-with-python.html</guid></item><item><title>Jupyter Notebooks and ML Model Operationalization</title><link>https://pyvideo.org/pydata-seattle-2015/jupyter-notebooks-and-ml-model-operationalization.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Sponsor Talk- Microsoft
Jupyter (formerly IPython) notebooks provide a convenient canvas for exploring and visualizing data. Jupyter has quickly become the preferred “IDE” for many Data Science and Technical Computing scenarios. Azure ML Studio is an easy to use, drag/drop IDE that provides the ability to build and deploy web services that expose Machine Learning models as RESTful APIs (a.k.a. Operationalization). We’re happy to announce the we’ve incorporated Jupyter with the Azure ML Studio.&lt;/p&gt;
&lt;p&gt;Beyond the integration, with the release of the AzureML APIs in the Python SDK, we are bringing the ease of publishing high scale predictive web services that run on Azure to Jupyter and other IDE’s. Using this SDK, you can now do the data manipulation and feature engineering using the REPL experience that Jupyter provides and then publish the final model as an Azure ML web service. The published web services provide a RESTful interface that can then be called from variety of platforms and clients such as Excel, .NET, Java, Python, R, etc.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dino Viehland</dc:creator><pubDate>Sun, 26 Jul 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-07-26:pydata-seattle-2015/jupyter-notebooks-and-ml-model-operationalization.html</guid></item><item><title>Building a JIT for Python</title><link>https://pyvideo.org/pydata-seattle-2015/building-a-jit-for-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Let's make Python faster! In a past life I spent a bunch of time working to make a fast Python implementation built on top of .NET which leveraged the CLRs JIT for improved performance. In this talk I'll look at taking the CLR's JIT which has now been open sourced and bringing it together with the standard CPython implementation.&lt;/p&gt;
&lt;p&gt;Implementation Strategy Translating CPython bytecode to .NET IL Examples of what the translation looks like Look at what subset of IL is used What a standardized JIT interface for CPython could look like Challenges Places where the CLR JIT could better support Python like semantics Places where CPython makes it difficult Performance Results A look at various benchmarks with and without a JIT and against competing Python implementations Unsupported features Functionality which currently isn't or can't be supported Future Directions Future possibilities to improve performance&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dino Viehland</dc:creator><pubDate>Sat, 25 Jul 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-07-25:pydata-seattle-2015/building-a-jit-for-python.html</guid></item><item><title>Pyjion: who doesn’t want faster for free?</title><link>https://pyvideo.org/pycon-us-2016/brett-cannon-dino-viehland-pyjion-who-doesnt-want-faster-for-free-pycon-2016.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Speakers: Brett Cannon, Dino Viehland&lt;/p&gt;
&lt;p&gt;At PyCon US 2015 an experiment was started: could a JIT be added to CPython which would speed up performance &lt;strong&gt;and&lt;/strong&gt; be fully backwards-compatible? Could unaltered extension modules live happily with a JIT? That experiment is Pyjion and this talk will explain what we changed to CPython to add a pre-existing JIT to it and whether we met our goal of being a benefit instead of a hindrance.&lt;/p&gt;
&lt;p&gt;Slides can be found at: &lt;a class="reference external" href="https://speakerdeck.com/pycon2016"&gt;https://speakerdeck.com/pycon2016&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/PyCon/2016-slides"&gt;https://github.com/PyCon/2016-slides&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Brett Cannon</dc:creator><pubDate>Mon, 30 May 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-05-30:pycon-us-2016/brett-cannon-dino-viehland-pyjion-who-doesnt-want-faster-for-free-pycon-2016.html</guid></item><item><title>Panel: Python VMs</title><link>https://pyvideo.org/pycon-us-2011/panel-python-vms.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Panel: Python VMs&lt;/p&gt;
&lt;p&gt;Presented by Jacob Kaplan-Moss, Brett Cannon, Maciej Fijalkowski, Frank
Wierzbicki, Dino Viehland&lt;/p&gt;
&lt;p&gt;Python is lucky enough to have a healthy ecosystem of virtual machines
(VMs) exist. CPython, Jython, IronPython, and PyPy are all used
extensively by people in real-world situations. This panel brings
together a representative from each of the major VMs to discuss where
they are now, going in the future, and to answer questions from the
community.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;All four major Python VMs will be represented:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://python.org/"&gt;CPython&lt;/a&gt;: Brett Cannon&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.jython.org/"&gt;Jython&lt;/a&gt;: Frank Wierzbicki&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://ironpython.net/"&gt;IronPython&lt;/a&gt;: Dino Viehland&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://pypy.org/"&gt;PyPy&lt;/a&gt;: Maciej Fijalkowski Moderation will be
handled by Jacob Kaplan-Moss of Django.&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Brett Cannon</dc:creator><pubDate>Fri, 11 Mar 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-03-11:pycon-us-2011/panel-python-vms.html</guid><category>cpython</category><category>ironpython</category><category>jython</category><category>pycon</category><category>pycon2011</category><category>pypy</category></item><item><title>Building a Kinect game with Python</title><link>https://pyvideo.org/pycon-us-2012/building-a-kinect-game-with-python.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;This talk will show you how to develop a game using Kinect from Python.
I'll start w/ an introduction to the Kinect API including skeleton
tracking, normal video, depth video, and audio APIs including speech
recognition. I’ll then show how the Kinect APIs can be incorporated into
a game using PyGame. After the talk you’ll be able to start developing
your own Python based Kinect games!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dino Viehland</dc:creator><pubDate>Sat, 10 Mar 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-03-10:pycon-us-2012/building-a-kinect-game-with-python.html</guid></item><item><title>Using futures for async GUI programming in Python 3.3</title><link>https://pyvideo.org/pycon-us-2013/using-futures-for-async-gui-programming-in-python.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;In Python 3.2 a new feature was added for concurrent programming -
futures. In Python 3.3 generators have been extended to allow returning
from a generator with a value. In this talk we'll show how these
features can be combined to create a rich and easy to use asynchronous
programming model which can be used for creating highly responsive GUI
applications or easy async programming.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dino Viehland</dc:creator><pubDate>Fri, 15 Mar 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-03-15:pycon-us-2013/using-futures-for-async-gui-programming-in-python.html</guid><category>talk</category></item></channel></rss>