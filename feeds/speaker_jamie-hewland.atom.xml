<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_jamie-hewland.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2018-10-11T00:00:00+00:00</updated><entry><title>Test your Docker images with Python</title><link href="https://pyvideo.org/pycon-za-2018/test-your-docker-images-with-python.html" rel="alternate"></link><published>2018-10-11T00:00:00+00:00</published><updated>2018-10-11T00:00:00+00:00</updated><author><name>Jamie Hewland</name></author><id>tag:pyvideo.org,2018-10-11:pycon-za-2018/test-your-docker-images-with-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;As more and more software is packaged in Docker images, it has become
increasingly important that the Dockerfiles and scripts that these
images are built from are correct. If Docker images are built and
deployed as part of an automated pipeline, it is also important that
they continue to work as expected when changes are made upstream.&lt;/p&gt;
&lt;p&gt;Start testing your Docker images without relying on Bash scripts! We’ll
cover why we decided to write a testing library and how to use it. We’ll
also talk about some of the test fixtures we developed for common
infrastructure such as RabbitMQ and PostgreSQL. Finally, we’ll explore
some of the limitations and workarounds of creating a test environment
of Docker containers.&lt;/p&gt;
&lt;p&gt;Some of the best tools for working with Docker are already written in
Python, for example, docker-compose. Bringing together the Python
ecosystems around Docker and test frameworks, we created a new Python
library called Seaworthy. Seaworthy can be used to verify that a Docker
image works as expected in an isolated environment. It provides rich
tools for asserting on processes, logs, and HTTP requests.&lt;/p&gt;
</summary></entry><entry><title>Deploying Django web applications in Docker containers</title><link href="https://pyvideo.org/pycon-za-2017/deploying-django-web-applications-in-docker-containers.html" rel="alternate"></link><published>2017-10-06T00:00:00+00:00</published><updated>2017-10-06T00:00:00+00:00</updated><author><name>Jamie Hewland</name></author><id>tag:pyvideo.org,2017-10-06:pycon-za-2017/deploying-django-web-applications-in-docker-containers.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk will describe how to package a Django web application as a
Docker container image for use on a container orchestration platform.
Starting with a common Django setup involving Nginx, Gunicorn, and
Celery, we will show how to adapt the application to run inside
containers.&lt;/p&gt;
&lt;p&gt;Container orchestration platforms such as Kubernetes and DC/OS are
growing increasingly popular. These systems provide many advantages, but
require significant changes to how applications are packaged and
deployed. Instead of running on staticly-configured webservers,
applications must run in containers that are dynamically deployed to a
pool of hosts.&lt;/p&gt;
&lt;p&gt;There are further benefits to packaging applications as containers. By
providing an easy-to-use and tested base image for Django applications,
deployment best-practices are easily and consistently replicated.
Integration testing becomes more practical, as containers can be run
similarly between development and production environments.&lt;/p&gt;
&lt;p&gt;This talk expects some familiarity with Django, as well as the basics of
Docker and HTTP. There should be lessons relevant to anybody interested
in using Docker for Python-based web applications.&lt;/p&gt;
</summary></entry></feed>