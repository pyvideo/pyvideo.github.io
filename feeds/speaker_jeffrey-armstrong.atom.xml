<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_jeffrey-armstrong.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2013-07-27T00:00:00+00:00</updated><entry><title>PyOhio 2010: Implementation of a Numerical Simulation in Python</title><link href="https://pyvideo.org/pyohio-2010/pyohio-2010--implementation-of-a-numerical-simula.html" rel="alternate"></link><published>2010-07-31T00:00:00+00:00</published><updated>2010-07-31T00:00:00+00:00</updated><author><name>Jeffrey Armstrong</name></author><id>tag:pyvideo.org,2010-07-31:pyohio-2010/pyohio-2010--implementation-of-a-numerical-simula.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Implementation of a Numerical Simulation in Python&lt;/p&gt;
&lt;p&gt;Presented by Jeffrey B. Armstrong&lt;/p&gt;
&lt;p&gt;The Python programming language is well suited for numerical computation
under a variety of circumstances. Python offers advantages over
competing free and commercial technologies, including price,
functionality, and maintainability. Specifically, the combination of
mature numerical libraries and liberal licensing allow complex
simulations to be coded with ease and to be made available to nearly all
interested parties. !NumPy/!SciPy, database access, networking, and
optimization techniques are examined in detail with respect to numerical
computation. A practical example involving an aerothermal commercial
turbofan aircraft engine simulation showcases these advantages. An
aircraft engine is broken down into discrete stages, including
compressors, turbines, and other flow-related components. Commonalities
between components, such as rotation and the presence of inlet and exit
conditions, map cleanly to the object-oriented nature of Python. Based
on simulation needs and hardware availability, Python allows for the
parallel computation of simulations without the expense and complexity
of commercial parallelization packages.&lt;/p&gt;
</summary><category term="database"></category><category term="networking"></category><category term="numpy"></category><category term="optimization"></category><category term="pyohio"></category><category term="pyohio2010"></category><category term="scipy"></category><category term="simulation"></category></entry><entry><title>PyOhio 2011: Bringing Modern Python to the Atari</title><link href="https://pyvideo.org/pyohio-2011/pyohio-2011--bringing-modern-python-to-the-atari.html" rel="alternate"></link><published>2011-07-30T00:00:00+00:00</published><updated>2011-07-30T00:00:00+00:00</updated><author><name>Jeffrey Armstrong</name></author><id>tag:pyvideo.org,2011-07-30:pyohio-2011/pyohio-2011--bringing-modern-python-to-the-atari.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Bringing Modern Python to the Atari&lt;/p&gt;
&lt;p&gt;Presented by Jeffrey Armstrong&lt;/p&gt;
&lt;p&gt;The Atari ST continues to fulfill a niche in the computing world amongst
hobbyists. Later Atari computers, such as the TT030 and Falcon030, and
the numerous clones are relatively competent 32-bit machines. To this
day, the open source FreeMiNT operating system continues to be
developed, bringing a UNIX-like environment to these computers.&lt;/p&gt;
</summary><category term="atari"></category><category term="freemint"></category><category term="pyohio"></category><category term="pyohio2011"></category></entry><entry><title>A Text Adventure in Python</title><link href="https://pyvideo.org/pyohio-2013/a-text-adventure-in-python.html" rel="alternate"></link><published>2013-07-27T00:00:00+00:00</published><updated>2013-07-27T00:00:00+00:00</updated><author><name>Jeffrey Armstrong</name></author><id>tag:pyvideo.org,2013-07-27:pyohio-2013/a-text-adventure-in-python.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Ever want to write interactive fiction using your favorite language?
Using only the Python standard library, one can write a modestly
functional text adventure from scratch. This interactive talk will
quickly walk through the process, touching a number of standard library
modules, from command lines to string handling to data storage, that can
help bring a game to life.&lt;/p&gt;
</summary><category term="talk"></category></entry><entry><title>Optimal Aircraft Engine Tuner Selection in Python</title><link href="https://pyvideo.org/pycon-us-2011/pycon-2011--optimal-aircraft-engine-tuner-selecti.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Jeffrey Armstrong</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--optimal-aircraft-engine-tuner-selecti.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Optimal Aircraft Engine Tuner Selection in Python&lt;/p&gt;
&lt;p&gt;Presented by Jeffrey Armstrong&lt;/p&gt;
&lt;p&gt;A numerical algorithm for designing on-board aircraft engine diagnostics
has been implemented in Python. Employing the optimization techniques
within SciPy, the code performs a search for an optimal vector of
parameters for estimating engine variables, including exhaust
temperatures and thrust. The algorithm exploits the numerical strengths
of Python and SciPy for speed and interoperability.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;An emerging field of aircraft engine diagnostics is the inclusion of
on-board engine performance tracking algorithms. These algorithms
utilize data provided by a limited number of engine sensors to determine
the current engine performance, which tends to degrade over time.
However, estimating engine performance instantaneously is problematic
due to the limited number of sensors normally available on a commercial
aircraft engine.&lt;/p&gt;
&lt;p&gt;One common practice is to estimate and track engine performance in
software using a Kalman filter, a mathematical construct for tuning a
numerical model to better track actual measurements (1). A new technique
has been devised to optimize the design of this filter in aircraft
engine applications (2). An optimization procedure to aid in the design
of the filter has been implemented in Python and exercised against the
significant number of minimization and optimization strategies available
in SciPy. The talk focuses on the design of this optimization procedure
in Python. The object-oriented nature of Python offers benefits over
alternative numerical languages; speed, availability, and
maintainability played central roles in the selection of Python as the
implementation language. The availability of the multiprocessing module
allowed for full utilization of modern multi-core CPUs, in contrast with
often limited commercial numerical computing packages, further improving
computational speed.&lt;/p&gt;
&lt;p&gt;Some difficulties were encountered during this design exercise.
Discussion of these obstacles and their eventual solution is presented.
Specifically, iterative solvers for the discrete algebraic Riccati
equation and the discrete Lyapunov equation had to be authored in Python
(3,4). Additional framework for working with discrete state-space
control systems was created, exploiting the object-oriented features of
the language (5).&lt;/p&gt;
&lt;p&gt;The Python implementation was able to verify the solution of the
optimization problem. Comparison with an alternative, reference MATLAB
implementation will be presented briefly. The results of this research
is planned to be presented at the American Society for Mechanical
Engineers Turbo Expo 2011 Conference in June, 2011 (6). The algorithm
design in Python is meant to showcase the ability to perform controls
engineering tasks in the Python language efficiently.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;“Kalman Filter,” Wikipedia:
&lt;a class="reference external" href="ht%20tp://en.wikipedia.org/wiki/Kalman_filter"&gt;http://en.wikipedia.org/wiki/Kalman_filter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Simon, D. L. and Garg, S., “Optimal Tuner Selection for Kalman
Filter-Based Aircraft Engine Performance Estimation”. Journal of
Engineering for Gas Turbines and Power. March 2010, Vol. 132.&lt;/li&gt;
&lt;li&gt;“Algebraic Riccati Equation,” Wikipedia:
&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Algebraic_Riccati_equatio%20n"&gt;http://en.wikipedia.org/wiki/Alge
braic_Riccati_equation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;“Lyapunov Equation,” Wikipedia:
&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Lyapunov_equation"&gt;http://en.wikipedia.org/wiki/Lyapunov_equa
tion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;“State Space,” Wikipedia: &lt;a class="reference external" href="http://en.wikipedia.org/wiki/State-space"&gt;http://en.wikipedia.org/wiki/State-
space&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Simon, D. L., Armstrong, J. B., &amp;quot;Application of an Optimal Tuner
Selection Approach for On-Board Self-Tuning Engine Models,&amp;quot;
Proceedings of the ASME Turbo Expo 2011, GT2011-46408, 2011 (To Be
Published).&lt;/li&gt;
&lt;/ol&gt;
</summary><category term="aircraftenginetuning"></category><category term="casestudy"></category><category term="pycon"></category><category term="pycon2011"></category><category term="scipy"></category></entry><entry><title>14. preshrunk-cotton: Windows Help Files for Lazy People</title><link href="https://pyvideo.org/pycon-us-2012/14-preshrunk-cotton-windows-help-files-for-lazy.html" rel="alternate"></link><published>2012-03-11T00:00:00+00:00</published><updated>2012-03-11T00:00:00+00:00</updated><author><name>Jeffrey Armstrong</name></author><id>tag:pyvideo.org,2012-03-11:pycon-us-2012/14-preshrunk-cotton-windows-help-files-for-lazy.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Generating a Compiled HTML Help (CHM) file is often necessary when
distributing applications on Microsoft Windows platforms. However, many
developers may dislike authoring HTML and/or cannot use Microsoft’s help
tools. preshrunk-cotton streamlines the creation of CHM files by
allowing the author to quickly write documentation in Textile markup and
build the help file on almost any platform.&lt;/p&gt;
</summary></entry><entry><title>Lightning Talks - Sunday evening</title><link href="https://pyvideo.org/pycon-us-2013/sunday-evening-lightning-talks.html" rel="alternate"></link><published>2013-03-17T00:00:00+00:00</published><updated>2013-03-17T00:00:00+00:00</updated><author><name>Jeffrey Armstrong</name></author><id>tag:pyvideo.org,2013-03-17:pycon-us-2013/sunday-evening-lightning-talks.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Sunday evening lightning talks&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=OL3De8BAhME#t=0m"&gt;00:00&lt;/a&gt; - Python 3 on your Atari Desktop - Jeffrey
Armstrong&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=OL3De8BAhME#t=4m58s"&gt;04:58&lt;/a&gt; - Armstrong, Open Source News Platform - Joshua
Bonnett&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=OL3De8BAhME#t=9m34s"&gt;09:34&lt;/a&gt; - Metrics should be basic: xUnit for metrics -
Jeremy Dunck&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=OL3De8BAhME#t=15m14s"&gt;15:14&lt;/a&gt; - The Answers - Luke Gotszling&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=OL3De8BAhME#t=20m20s"&gt;20:20&lt;/a&gt; - Core Python: the next generation - Wesley
Chun&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=OL3De8BAhME#t=25m15s"&gt;25:15&lt;/a&gt; - q.q - Ka-Ping Yee&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=OL3De8BAhME#t=31m13s"&gt;31:10&lt;/a&gt; - Neckbeard: Because cloud deployment sucks -
Wes Winham&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=OL3De8BAhME#t=36m54s"&gt;36:54&lt;/a&gt; - Abolishing the Traditional 9th to 12th Grade
Structure of High Schools - Eric Matthes&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=OL3De8BAhME#t=41m43s"&gt;41:43&lt;/a&gt; - Python Anywhere - Henry Percival&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=OL3De8BAhME#t=46m35s"&gt;46:35&lt;/a&gt; - RapydScript: Translating Python to JavaScript
- Charles Law&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=OL3De8BAhME#t=52m47s"&gt;52:47&lt;/a&gt; - PyCon Australia 2013 - Christopher Neugebauer&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=OL3De8BAhME#t=53m44s"&gt;53:44&lt;/a&gt; - (py) Fore! - Christopher Neugebauer&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="lightning talks"></category><category term="sprints"></category></entry></feed>