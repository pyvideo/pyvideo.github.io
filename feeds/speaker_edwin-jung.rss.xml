<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Wed, 09 Oct 2019 00:00:00 +0000</lastBuildDate><item><title>Mock Hell</title><link>https://pyvideo.org/pycon-de-2019/mock-hell.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Speaker: Edwin Jung&lt;/p&gt;
&lt;p&gt;Track:PyConDE
Mock is an easily abused tool. In perverse cases, it increases technical debt and prevents refactoring.  This talk describes the history of mocking, alternatives, anti-patterns, and the connection to clean architecture.&lt;/p&gt;
&lt;p&gt;Recorded at the PyConDE &amp;amp; PyData Berlin 2019 conference.
&lt;a class="reference external" href="https://pycon.de"&gt;https://pycon.de&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;More details at the conference page: &lt;a class="reference external" href="https://de.pycon.org/program/NZC3A8"&gt;https://de.pycon.org/program/NZC3A8&lt;/a&gt;
Twitter:  &lt;a class="reference external" href="https://twitter.com/pydataberlin"&gt;https://twitter.com/pydataberlin&lt;/a&gt;
Twitter:  &lt;a class="reference external" href="https://twitter.com/pyconde"&gt;https://twitter.com/pyconde&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Edwin Jung</dc:creator><pubDate>Wed, 09 Oct 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-10-09:pycon-de-2019/mock-hell.html</guid></item><item><title>Mocking and Patching Pitfalls</title><link>https://pyvideo.org/pycon-us-2019/mocking-and-patching-pitfalls.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Mocking and patching are powerful techniques for testing, but they can
be easily abused, with negative effects on code quality, maintenance,
and application architecture. These pain-points can be hard to
verbalize, and consequently hard to address. If your unit tests are a
PITA, but you cannot explain why, this talk may be for you.&lt;/p&gt;
&lt;p&gt;Mocking as a technique has deep roots within OOD and TDD, going back 20+
years, but many Python developers know mocks and patches merely as a
technique to isolate code under test. In the absence of knowledge around
OOD and TDD, best practices around mocking are completely unknown,
misunderstood, or ignored. Developers who use mocks and patches without
doing TDD or OOD are susceptible to falling into many well-understood
and documented traps.&lt;/p&gt;
&lt;p&gt;This talk will draw a historical connection between the way mocks are
taught today, and their origins in TDD, OOD, and Java. It will also
demonstrate some pitfalls, and provide some guidance and alternatives to
mocking and patching (e.g., dependency injection, test doubles,
functional style).&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Edwin Jung</dc:creator><pubDate>Fri, 03 May 2019 13:40:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-05-03:pycon-us-2019/mocking-and-patching-pitfalls.html</guid><category>talk</category></item></channel></rss>