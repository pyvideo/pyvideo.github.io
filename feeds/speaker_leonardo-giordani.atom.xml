<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_leonardo-giordani.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2019-09-14T00:00:00+00:00</updated><entry><title>Clean Architectures in Python</title><link href="https://pyvideo.org/pycon-uk-2019/clean-architectures-in-python.html" rel="alternate"></link><published>2019-09-14T00:00:00+00:00</published><updated>2019-09-14T00:00:00+00:00</updated><author><name>Leonardo Giordani</name></author><id>tag:pyvideo.org,2019-09-14:pycon-uk-2019/clean-architectures-in-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;What is a good software architecture? Why should we bother structuring the code and spending time testing it? The clean architecture is a good way to structure an application to make it easy to develop, debug, maintain, and change.&lt;/p&gt;
</summary></entry><entry><title>Clean Architectures in Python</title><link href="https://pyvideo.org/pylondinium-2019/clean-architectures-in-python.html" rel="alternate"></link><published>2019-06-16T00:00:00+00:00</published><updated>2019-06-16T00:00:00+00:00</updated><author><name>Leonardo Giordani</name></author><id>tag:pyvideo.org,2019-06-16:pylondinium-2019/clean-architectures-in-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Architectural considerations are often overlooked by developers or completely delegated to a framework. We should start once again discussing how applications are structured, how components are connected and how to lower coupling between different parts of a system, to avoid creating software that cannot easily be maintained or changed.&lt;/p&gt;
&lt;p&gt;The “clean architecture” model predates Robert Martin, who recently brought it back to the attention of the community, and is a way of structuring applications that leverages layers separation and internal APIs to achieve a very tidy, fully-tested, and loosely coupled system. The talk introduces the main ideas of the architecture, showing how the layers can be implemented in Python, following the content of the book “Clean Architectures in Python” edited by Leanpub. The book recently reached 8,000 downloads and many readers found it useful to start learning how to test software and how to structure an application without relying entirely on the framework.&lt;/p&gt;
</summary></entry><entry><title>Abstract Base Classes: a smart use of metaclasses</title><link href="https://pyvideo.org/europython-2017/abstract-base-classes-a-smart-use-of-metaclasses.html" rel="alternate"></link><published>2017-07-11T00:00:00+00:00</published><updated>2017-07-11T00:00:00+00:00</updated><author><name>Leonardo Giordani</name></author><id>tag:pyvideo.org,2017-07-11:europython-2017/abstract-base-classes-a-smart-use-of-metaclasses.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk shows what Python Abstract Base Classes (ABCs) are and how
they can be used to categorise objects and implement a virtual
inheritance tree. The goal of the talk is to introduce programmers to
the concept of ABCs, and to show that metaclasses are not a terribly
complex topic, but something that can be used by normal programmers.
The talk is divided in three different “levels of difficulty”, each
of one going deeper in the technical aspects of the subject.&lt;/p&gt;
&lt;p&gt;Level 1: Polymorphism - Behaviours and delegation - Collections&lt;/p&gt;
&lt;p&gt;The first level is meant to give a quick overview of the collections
package and some useful code snippets. Even beginners can benefit of
the information given here. To complete this level you only need to
know what a try/except block is.&lt;/p&gt;
&lt;p&gt;Level 2: Registering - Abstract Base Classes - Categories&lt;/p&gt;
&lt;p&gt;The second level shows what real and virtual inheritance are,
explains what is the meaning of registering and defines Abstract Base
Classes. To complete this level you need to know what class
inheritance is (i.e. what class MyList(list) means).&lt;/p&gt;
&lt;p&gt;Level 3: Build your ABCs - Metaclasses - ABSs as interfaces&lt;/p&gt;
&lt;p&gt;The third level shows how to create your own ABCs, why metaclasses
are involved and why they are not a difficult concept. I will then
quickly review a possible use of metaclasses as interfaces. To
complete this level you need to know how to instantiate a class, and
the difference between class and instance.&lt;/p&gt;
</summary></entry><entry><title>Django class-based views: survival guide for novices</title><link href="https://pyvideo.org/djangocon-europe-2014/django-class-based-views-survival-guide-for-novices.html" rel="alternate"></link><published>2014-05-13T00:00:00+00:00</published><updated>2014-05-13T00:00:00+00:00</updated><author><name>Leonardo Giordani</name></author><id>tag:pyvideo.org,2014-05-13:djangocon-europe-2014/django-class-based-views-survival-guide-for-novices.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Are you a Django novice, confused by words like class-based views, URL
dispatchers, HTTP requests? Are you still wondering how to use all those
things to build the pages of your Web site?&lt;/p&gt;
&lt;p&gt;Django programmers that started with versions prior to 1.3 are used to
deal with views as functions, and they learned how to process even
complex forms in a procedural way. From the release 1.3, Django
introduced class-based views (CBVs) and ported its powerful generic
views to this new paradigm (class-based generic views, or CBGVs).&lt;/p&gt;
&lt;p&gt;This change, however, has not been harmless for Django novices: the
django- users mailing list and StackOverflow are full of questions about
views and classes.&lt;/p&gt;
&lt;p&gt;This talk aims to lead Django novices to a good understanding of what
class- based functions are and how they can be effectively used.&lt;/p&gt;
&lt;p&gt;The main topics are:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Python classes: how OOP concepts improve the View part of Django MVT.
This part aims to introduce Python classes as data processors and
explains how OOP concepts like inheritance help the fast development
of customized solutions.&lt;/li&gt;
&lt;li&gt;URL dispatchers: how Django CBV process URL parameters. Here I
discuss how Django class-based views store arguments extracted from
URLs and how we can access them.&lt;/li&gt;
&lt;li&gt;HTTP verbs: how Django CBV deal with GET, POST and friends. This part
shows what happens to a class-based view when HTTP requests are
processed and how to leverage the mechanism to customize data
processing.&lt;/li&gt;
&lt;li&gt;CRUD operations through Django generic class-based views. Create,
Read, Update, Delete are the fundamentals operations you need on
data, so it is worth learning to use and customize the powerful
generic views of Django that implement them.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The target of this talk are Django novices who completed and understood
the Django tutorial. Previous knowledge of the basic Python OOP syntax
and concepts is preferred (classes, inheritance, method overriding,
function arguments processing).&lt;/p&gt;
</summary></entry><entry><title>Abstract base classes uso intelligente delle metaclassi</title><link href="https://pyvideo.org/pycon-italia-2016/abstract-base-classes-uso-intelligente-delle-metaclassi.html" rel="alternate"></link><published>2016-06-22T00:00:00+00:00</published><updated>2016-06-22T00:00:00+00:00</updated><author><name>Leonardo Giordani</name></author><id>tag:pyvideo.org,2016-06-22:pycon-italia-2016/abstract-base-classes-uso-intelligente-delle-metaclassi.html</id><summary type="html"></summary></entry></feed>