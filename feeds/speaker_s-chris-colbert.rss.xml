<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Thu, 19 Jul 2012 00:00:00 +0000</lastBuildDate><item><title>Enaml - A Framework for Building Declarative User Interfaces</title><link>https://pyvideo.org/scipy-2012/enaml-a-framework-for-building-declarative-user.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;div class="section" id="overview"&gt;
&lt;h4&gt;Overview&lt;/h4&gt;
&lt;p&gt;Enaml is a new domain specific declarative language for specifying user
interfaces in Python applications. Its syntax, a strict superset of the
Python language, provides a clean and compact representation of UI
layout and styling, and uses dynamic expressions to bind a view's logic
with an application's underlying computational model.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="design-goals"&gt;
&lt;h4&gt;Design Goals&lt;/h4&gt;
&lt;p&gt;A number of considerations were given during the design of Enaml with
the ultimate goal being the creation of a dynamic UI framework that has
a low barrier of entry and can scale in complexity and capability
according to the needs of the developer.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Influence&lt;/strong&gt; Enaml improves upon existing technologies and ideas for
specifying user interfaces. Much of Enaml's inspiration comes from Qt's
QML, a declarative UI language derived from ECMAScript and designed
specifically for developing mobile applications with the Qt toolkit. In
contrast, Enaml is designed for the development of scientific and
enterprise level applications, and makes use of a Python derived syntax
and standard desktop-style widget elements. For layout, Enaml raises the
bar by providing a system based on symbolic constraints. The underyling
technology is the same which powers the Cocoa Auto-Layout system in OSX
10.7, however in Enaml, the constraints are exposed in a friendly
Pythonic fashion.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Toolkit Independence&lt;/strong&gt; In large projects, the costs of changing
infrastructure can be extremely high. Instead of forcing an application
to be tied to a single underlying toolkit, Enaml is designed to be
completely toolkit agnostic. This decoupling provides the benefit of
being able to migrate an entire project from one gui library to another
by changing only a single line of code or setting an environment
variable. Enaml currently supports both Qt (via Pyside or PyQt4) and
WxPython backends with plans for HTML 5 in the future. The authoring of
new toolkit backends has been designed to be a simple affair. Adding new
or custom widgets to an existing toolkit is trivial.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Extensibility&lt;/strong&gt; A good framework should be useable by a wide variety
of audiences and should be able to adapt to work with technologies not
yet invented. Enaml can provide the UI layer for any Python application,
with few limitations placed on the architecture of the underlying
computational model. While Enaml understands Enthought's Traits based
models by default, it provides simple hooks that the developer can use
to extend its functionality to any model architecture that provides some
form of notification mechanism. Possibilities include, but are not
limited to, models built upon databases, sockets, and pub-sub
mechanisms.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Continuity&lt;/strong&gt; No matter how easy it is to get started with a new
framework, it will not be adopted if the cost of switching is
exceedingly high. Enaml is positioned to become the next generation of
TraitsUI, the user interface layer of the Traits library. Enaml can both
include existing TraitsUI views in an application as well as itself be
embedded within a TraitsUI. Enaml also interacts seamlessly with the
Chaco plotting library, allowing easy integration of interactive
graphics. Enaml cleanly exposes the toolkit specific objects that it
manages, allowing a user with a large amount of toolkit specific code to
continue to use that code with little or no changes. This provides a
path forward for both TraitsUI and non-TraitsUI applications.&lt;/p&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">S. Chris Colbert</dc:creator><pubDate>Thu, 19 Jul 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-07-19:scipy-2012/enaml-a-framework-for-building-declarative-user.html</guid><category>visualization</category></item></channel></rss>