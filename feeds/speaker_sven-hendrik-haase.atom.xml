<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_sven-hendrik-haase.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2019-07-10T00:00:00+00:00</updated><entry><title>Become a command line wizard</title><link href="https://pyvideo.org/europython-2019/become-a-command-line-wizard.html" rel="alternate"></link><published>2019-07-10T00:00:00+00:00</published><updated>2019-07-10T00:00:00+00:00</updated><author><name>Sven-Hendrik Haase</name></author><id>tag:pyvideo.org,2019-07-10:europython-2019/become-a-command-line-wizard.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;There are many modern terminal tools with vastly improved user
experiences as compared to their traditional alternatives. This talk
aims to show off some of those modern terminal tools and compare them
side by side with the traditional ones.&lt;/p&gt;
&lt;p&gt;Python is not only used by software developers with fancy IDEs but also
by DevOps engineers, administrators, and on remote development machines
where using a GUI is impractical. Therefore, many people are stuck with
a terminal interface only and have to use tools like vim, grep, find,
wc, cloc, less and many others to explore their way around their Python
programs.&lt;/p&gt;
&lt;p&gt;However, thanks to the advent of many new and improved tools, we can do
many of the same tasks better, faster and with nicer ergonomics.&lt;/p&gt;
&lt;p&gt;This talk will show off effective use of vim as an IDE with completions
and linting provided by LSP, fd (instead of find) for finding files,
ripgrep (instead of grep) for searching strings, tokei (instead of cloc)
for counting lines of code, bat (instead of cat) for looking at files,
hyperfine for microbenchmarking, httpie (instead of curl) for making
HTTP requests, sd (instead of sed) for text replacement.&lt;/p&gt;
&lt;p&gt;This talk should make terminal work more approachable for all attendees
by showing off how to do some everyday tasks on the terminal.&lt;/p&gt;
</summary><category term="Command-Line"></category><category term="Linux"></category><category term="System Administration"></category><category term="Tooling"></category><category term="Unix"></category></entry><entry><title>Rust and Python - Oxidize Your Snake</title><link href="https://pyvideo.org/europython-2018/rust-and-python-oxidize-your-snake.html" rel="alternate"></link><published>2018-07-27T00:00:00+00:00</published><updated>2018-07-27T00:00:00+00:00</updated><author><name>Sven-Hendrik Haase</name></author><id>tag:pyvideo.org,2018-07-27:europython-2018/rust-and-python-oxidize-your-snake.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Rust is a safe and modern systems programming language that is easily
able to call and be called from Python. As such, it is a prime candidate
for replacing C for writing Python modules that have to be fast or that
have to interact with other native code. Rust is extremely fast and
makes it very hard to get concurrency wrong.&lt;/p&gt;
&lt;p&gt;Many ways of making Python call into lower level have appeared over the
years such as CFFI, ctypes, boost.python, cython, SWIG. All of them are
cumbersome in their own ways. PyO3 is a Rust library that makes it easy
and simple to write native Python modules with minimal glue code and no
crazy tooling required. It even works cross-platform without problems.&lt;/p&gt;
&lt;p&gt;The talk shows some sample code of PyO3-based modules and compares it
with the code of the alternatives as well as the alternative’s
cross-platform support and tooling.&lt;/p&gt;
&lt;p&gt;The goal is for the audience to be informed about a new safe and modern
way of writing native Python modules.&lt;/p&gt;
&lt;p&gt;The audience doesn’t need any prerequisites except for a healthy
interest in native code and Python modules. C knowledge is optional.&lt;/p&gt;
</summary></entry></feed>