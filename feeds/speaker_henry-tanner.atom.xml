<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_henry-tanner.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2017-12-03T00:00:00+00:00</updated><entry><title>Mypy-thon gives you wings!</title><link href="https://pyvideo.org/north-bay-python-2017/mypy-thon-gives-you-wings.html" rel="alternate"></link><published>2017-12-03T00:00:00+00:00</published><updated>2017-12-03T00:00:00+00:00</updated><author><name>Henry Tanner</name></author><id>tag:pyvideo.org,2017-12-03:north-bay-python-2017/mypy-thon-gives-you-wings.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;As your python project grows and the number of contributors increases, the stability,  readability and usability of your code-base can diminish. The once expressive experience of a single author writing dynamically typed Python can turn into a real headache as the complexity of your system develops.&lt;/p&gt;
&lt;p&gt;But Python can still be a great choice for large applications - the library’s for scientific applications and web API’s are well documented, open-source and have been in development for decades. Mypy is a tool that (pretty much) allows you to have your cake and eat it. By combining the convenience and maturity of Python with a powerful type system and compile-time checking, you can make your project incredibly easy to read, debug and test for all contributors.&lt;/p&gt;
&lt;p&gt;My talk will summarise the main features of Mypy and will also give you a head start on how to convert (and maintain) an existing code-base to include static annotations.&lt;/p&gt;
</summary></entry></feed>