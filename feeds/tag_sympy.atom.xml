<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/tag_sympy.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2017-10-25T00:00:00+00:00</updated><entry><title>Simulare l'assetto e l'orbita di un satellite con SymPy e PyEphem</title><link href="https://pyvideo.org/europython-2013/simulare-lassetto-e-lorbita-di-un-satellite-con-sympy-e-pyephem.html" rel="alternate"></link><published>2013-07-02T00:00:00+00:00</published><updated>2013-07-02T00:00:00+00:00</updated><author><name>Aureliana Barghini</name></author><id>tag:pyvideo.org,2013-07-02:europython-2013/simulare-lassetto-e-lorbita-di-un-satellite-con-sympy-e-pyephem.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In questa presentazione descriviamo la componente geometrica di un
simulatore di immagini da satellite; in sostanza si tratta di un sistema
che restituisce dove si trova (posizione) e dove guarda (assetto) un
satellite a partire da opportune informazioni di input. La soluzione
deve essere sufficientemente flessibile da accettare leggi orarie
arbitrarie per poter simulare il movimento di satelliti differenti.&lt;/p&gt;
&lt;p&gt;Per questo motivo si è scelto di ultilizzare la libreria di calcolo
simbolico SymPy per il calcolo dell’orientamento del satellite definito
da funzioni del tempo generiche (pitch, roll, yaw), e la libreria
astronomica PyEphem il calcolo della posizione orbitale.&lt;/p&gt;
&lt;p&gt;Integrando PyEphem con SymPy è stato possibile sviluppare un sistema
dinamico duttile e di facile utilizzo, capace di gestire facilmente
molteplici sistemi di riferimento mobili, posizioni e direzioni.&lt;/p&gt;
</summary><category term="Sympy"></category><category term="scientific-computing"></category><category term="earth-obeservation"></category><category term="PyEphem"></category></entry><entry><title>Theoretical physics with sympy</title><link href="https://pyvideo.org/pycon-de-2017/theoretical-physics-with-sympy.html" rel="alternate"></link><published>2017-10-25T00:00:00+00:00</published><updated>2017-10-25T00:00:00+00:00</updated><author><name>Florian Thole</name></author><id>tag:pyvideo.org,2017-10-25:pycon-de-2017/theoretical-physics-with-sympy.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Florian Thöle&lt;/strong&gt; (&amp;#64;florian_thl)&lt;/p&gt;
&lt;p&gt;PhD student in Computational Materials Science. Enthusiastic about teaching. Instructor for Software Carpentry.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In this talk, I will introduce the basics of sympy. Using a simple model system in magnetism, we'll play around with simplifications, then do a bit of numerical optimization and in the end make psychedelic-looking figures.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I will introduce the basic functionalities of the sympy package to do symbolic computing, with a special focus on vector and matrix operations. Then, I'll briefly explain a real-world model from the description of 2D layered magnetic materials and use sympy to deal with the resulting expressions. We'll evaluate those expressions to visualize the results of the model and obtain a numerical estimate of a transition point.&lt;/p&gt;
&lt;p&gt;The aim of this talk is to give a light-hearted introduction into the world of symbolic computing to someone who has more fun working with computers than pen and paper.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Recorded at&lt;/strong&gt; PyCon.DE 2017 Karlsruhe: &lt;a class="reference external" href="https://de.pycon.org/"&gt;https://de.pycon.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Video editing&lt;/strong&gt;: Sebastian Neubauer &amp;amp; Andrei Dan&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Tools&lt;/strong&gt;: Blender, Avidemux &amp;amp; Sonic Pi&lt;/p&gt;
</summary><category term="physics"></category><category term="science"></category><category term="sympy"></category></entry><entry><title>Automatic Code Generation with SymPy</title><link href="https://pyvideo.org/scipy-2017/automatic-code-generation-with-sympy.html" rel="alternate"></link><published>2017-07-12T00:00:00+00:00</published><updated>2017-07-12T00:00:00+00:00</updated><author><name>Jason Moore</name></author><id>tag:pyvideo.org,2017-07-12:scipy-2017/automatic-code-generation-with-sympy.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Tutorial materials found here: &lt;a class="reference external" href="https://scipy2017.scipy.org/ehome/220975/493423/"&gt;https://scipy2017.scipy.org/ehome/220975/493423/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This tutorial will introduce code generation concepts using the SymPy library. SymPy is a pure Python library for symbolic mathematics. Code generation refers to the act of converting a SymPy symbolic expression into equivalent code in some language. This allows one to use SymPy to symbolically model a problem, and generate fast numerical code for specific platforms that executes that model. This is a powerful tool that is useful to scientists in many domains. Code generation allows users to speed up existing code, to deal only with the high level mathematics of a problem, avoids mathematical errors and typos, makes it possible to deal with expressions that would otherwise be too large to write by hand, and opens possibilities to perform automatic mathematical optimizations of expressions.&lt;/p&gt;
&lt;p&gt;SymPy supports generating code for C, C++, Fortran, Matlab/Octave, Python, Cython, Julia, Javascript, LLVM, Rust, Haskell, Mathematica, Tensorflow, and Theano, and can easily be extended to other languages. SymPy’s code generation is used by libraries such as PyDy, pyodesys, sympybotics, pycalphad, and many other programs.&lt;/p&gt;
&lt;p&gt;Learning objectives&lt;/p&gt;
&lt;p&gt;Attendees will be able to:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;write SymPy expressions describing mathematical functions and identify the function arguments and outputs.&lt;/li&gt;
&lt;li&gt;use the SymPy code printers to transform SymPy expressions representing common domain specific functions into multiple output languages.&lt;/li&gt;
&lt;li&gt;use the SymPy code generation routines to output compilable C code and use Cython to access these functions in Python.&lt;/li&gt;
&lt;li&gt;generate custom vectorized functions with the three SymPy functions: lambdify, ufuncify, and autowrap.&lt;/li&gt;
&lt;li&gt;create both custom code printers that make use of specialized C libraries and common subexpression elimination (CSE).&lt;/li&gt;
&lt;li&gt;subclass the core SymPy printers and create a printer for a custom language.&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="tutorial"></category><category term="sympy"></category></entry><entry><title>Symbolic Computation with Python using SymPy</title><link href="https://pyvideo.org/pycon-uk-2016/symbolic-computation-with-python-using-sympy.html" rel="alternate"></link><published>2016-09-29T00:00:00+00:00</published><updated>2016-09-29T00:00:00+00:00</updated><author><name>Sartaj Singh</name></author><id>tag:pyvideo.org,2016-09-29:pycon-uk-2016/symbolic-computation-with-python-using-sympy.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Sartaj Singh&lt;/p&gt;
&lt;p&gt;This workshop aims to introduce attendees to SymPy, a computer aided algebra system (CAS) written in Python. We will show basics of constructing and manipulating mathematical expressions in SymPy, the most common issues and differences from other computer algebra systems, and how to deal with them.&lt;/p&gt;
&lt;p&gt;Attendees will take home an introductory level understanding of SymPy. This knowledge should be enough for attendees to start using SymPy for solving mathematical problems and hacking SymPy's internals (though hacking core modules may require additional expertise).&lt;/p&gt;
</summary><category term="workshop"></category><category term="sympy"></category></entry><entry><title>¡Eureka! (Python y ciencia)</title><link href="https://pyvideo.org/pyday-galicia-2016/eureka-python-y-ciencia.html" rel="alternate"></link><published>2016-09-17T00:00:00+00:00</published><updated>2016-09-17T00:00:00+00:00</updated><author><name>Miguel Sánchez de León Peque</name></author><id>tag:pyvideo.org,2016-09-17:pyday-galicia-2016/eureka-python-y-ciencia.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;En esta charla se plantea una pregunta de física básica que se resolverá científicamente con ingenio, mátemáticas y python, aprovechando para (de una manera amena) ver librerías habituales en el entorno científico como sympy, numpy, scipy, matplotlib, bokeh, numba, pandas y sklearn.&lt;/p&gt;
</summary><category term="pyday"></category><category term="sympy"></category><category term="numpy"></category><category term="scipy"></category><category term="matplotlib"></category><category term="bokeh"></category><category term="numba"></category><category term="pandas"></category><category term="sklearn"></category></entry><entry><title>Optimal Control and Parameter Identification of Dynamcal Systems with Direct Collocation using SymPy</title><link href="https://pyvideo.org/scipy-2015/optimal-control-and-parameter-identification-of-dynamcal-systems-with-direct-collocation-using-sympy.html" rel="alternate"></link><published>2015-07-08T00:00:00+00:00</published><updated>2015-07-08T00:00:00+00:00</updated><author><name>Jason Moore</name></author><id>tag:pyvideo.org,2015-07-08:scipy-2015/optimal-control-and-parameter-identification-of-dynamcal-systems-with-direct-collocation-using-sympy.html</id><summary type="html"></summary><category term="sympy"></category></entry><entry><title>SymPy Code Generation</title><link href="https://pyvideo.org/scipy-2016/sympy-code-generation-scipy-2016-aaron-meurer.html" rel="alternate"></link><published>2016-07-15T00:00:00+00:00</published><updated>2016-07-15T00:00:00+00:00</updated><author><name>Aaron Meurer</name></author><id>tag:pyvideo.org,2016-07-15:scipy-2016/sympy-code-generation-scipy-2016-aaron-meurer.html</id><summary type="html"></summary><category term="SciPy 2016"></category><category term="sympy"></category></entry><entry><title>Symbolic Computation with Python using SymPy (Beginner)</title><link href="https://pyvideo.org/scipy-2016/symbolic-compution-with-python-using-sympy-beginner-scipy-2016-tutorial-ondrej-certik-et-al.html" rel="alternate"></link><published>2016-07-11T00:00:00+00:00</published><updated>2016-07-11T00:00:00+00:00</updated><author><name>Ondřej Čertík</name></author><id>tag:pyvideo.org,2016-07-11:scipy-2016/symbolic-compution-with-python-using-sympy-beginner-scipy-2016-tutorial-ondrej-certik-et-al.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Materials for this tutorial are found here: &lt;a class="reference external" href="https://github.com/sympy/scipy-2016-tutorial"&gt;https://github.com/sympy/scipy-2016-tutorial&lt;/a&gt;&lt;/p&gt;
</summary><category term="SciPy 2016"></category><category term="tutorial"></category><category term="SymPy"></category></entry><entry><title>Symbolic Computing with SymPy, SciPy2013 Tutorial, Part 1 of 6</title><link href="https://pyvideo.org/scipy-2013/symbolic-computing-sympy-scipy2013-tutorial-part-1.html" rel="alternate"></link><published>2013-06-24T00:00:00+00:00</published><updated>2013-06-24T00:00:00+00:00</updated><author><name>Aaron Meurer</name></author><id>tag:pyvideo.org,2013-06-24:scipy-2013/symbolic-computing-sympy-scipy2013-tutorial-part-1.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;SymPy is a pure Python library for symbolic mathematics. It aims to
become a full-featured computer algebra system (CAS) while keeping the
code as simple as possible in order to be comprehensible and easily
extensible. SymPy is written entirely in Python and does not require any
external libraries.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this tutorial we will introduce attendees to SymPy. We will start by
showing how to install and configure this Python module. Then we will
proceed to the basics of constructing and manipulating mathematical
expressions in SymPy. We will also discuss the most common issues and
differences from other computer algebra systems, and how to deal with
them. In the last part of this tutorial we will show how to solve
simple, yet illustrative, mathematical problems with SymPy.&lt;/p&gt;
&lt;p&gt;This knowledge should be enough for attendees to start using SymPy for
solving mathematical problems and hacking SymPy's internals (though
hacking core modules may require additional expertise).&lt;/p&gt;
&lt;p&gt;We expect attendees of this tutorial to have basic knowledge of Python
and mathematics. However, any more advanced topics will be explained
during presentation.&lt;/p&gt;
&lt;p&gt;Outline&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;installing, configuring and running SymPy&lt;/li&gt;
&lt;li&gt;basics of expressions in SymPy&lt;/li&gt;
&lt;li&gt;traversal and manipulation of expressions&lt;/li&gt;
&lt;li&gt;common issues and differences from other CAS&lt;/li&gt;
&lt;li&gt;setting up and using printers&lt;/li&gt;
&lt;li&gt;querying expression properties&lt;/li&gt;
&lt;li&gt;not only symbolics: numerical computing (mpmath)&lt;/li&gt;
&lt;li&gt;Mathematical problem solving with SymPy&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Required Packages&lt;/p&gt;
&lt;p&gt;Python 2.x or 3.x, SymPy (most recent version) Optional packages:
IPython, matplotlib, NetworkX, GMPY, numpy, scipy&lt;/p&gt;
</summary><category term="mathematics"></category><category term="sympy"></category></entry><entry><title>Multibody Dynamics and Control with Python part 1</title><link href="https://pyvideo.org/scipy-2014/multibody-dynamics-and-control-with-python-part-1.html" rel="alternate"></link><published>2014-07-09T00:00:00+00:00</published><updated>2014-07-09T00:00:00+00:00</updated><author><name>Jason K. Moore</name></author><id>tag:pyvideo.org,2014-07-09:scipy-2014/multibody-dynamics-and-control-with-python-part-1.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;In this tutorial, attendees will learn how to derive, simulate, and
visualize the motion of a multibody dynamic system with Python tools.
These methods and techniques play an important role in the design and
understanding of robots, vehicles, spacecraft, manufacturing machines,
human motion, etc. Attendees will develop code to simulate the motion of
a human or humanoid robot.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this tutorial, attendees will learn how to derive, simulate, and
visualize the motion of a multibody dynamic system with Python tools.
The tutorial will demonstrate an advanced symbolic and numeric pipeline
for a typical multibody simulation problem. These methods and techniques
play an important role in the design and understanding of robots,
vehicles, spacecraft, manufacturing machines, human motion, etc. At the
end, the attendees will have developed code to simulate the uncontrolled
and controlled motion of a human or humanoid robot.&lt;/p&gt;
&lt;p&gt;We will highlight the derivation of realistic models of motion with the
SymPy Mechanics package. We will walk through the derivation of the
equations of motion of a multibody system (i.e. the model or the plant),
simulating and visualizing the free motion of the system, and finally we
will addfeedback controllers to control the plants that we derive.&lt;/p&gt;
&lt;p&gt;It is best if the attendees have some background with calculus-based
college level physics. They should also be familiar with the SciPy
Stack, in particular IPython, SymPy, NumPy, and SciPy. Our goal is that
attendees will come away with the ability to model basic multibody
systems, simulate and visualize the motion, and apply feedback
controllers all in a Python framework.&lt;/p&gt;
&lt;p&gt;The tutorial materials including an outline can be viewed here:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/pydy/pydy-tutorial-pycon-2014"&gt;https://github.com/pydy/pydy-tutorial-pycon-2014&lt;/a&gt;&lt;/p&gt;
</summary><category term="robots"></category><category term="simulation"></category><category term="sympy"></category></entry><entry><title>Multibody Dynamics and Control with Python part 2</title><link href="https://pyvideo.org/scipy-2014/multibody-dynamics-and-control-with-python-part-2.html" rel="alternate"></link><published>2014-07-09T00:00:00+00:00</published><updated>2014-07-09T00:00:00+00:00</updated><author><name>Jason K. Moore</name></author><id>tag:pyvideo.org,2014-07-09:scipy-2014/multibody-dynamics-and-control-with-python-part-2.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;In this tutorial, attendees will learn how to derive, simulate, and
visualize the motion of a multibody dynamic system with Python tools.
These methods and techniques play an important role in the design and
understanding of robots, vehicles, spacecraft, manufacturing machines,
human motion, etc. Attendees will develop code to simulate the motion of
a human or humanoid robot.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this tutorial, attendees will learn how to derive, simulate, and
visualize the motion of a multibody dynamic system with Python tools.
The tutorial will demonstrate an advanced symbolic and numeric pipeline
for a typical multibody simulation problem. These methods and techniques
play an important role in the design and understanding of robots,
vehicles, spacecraft, manufacturing machines, human motion, etc. At the
end, the attendees will have developed code to simulate the uncontrolled
and controlled motion of a human or humanoid robot.&lt;/p&gt;
&lt;p&gt;We will highlight the derivation of realistic models of motion with the
SymPy Mechanics package. We will walk through the derivation of the
equations of motion of a multibody system (i.e. the model or the plant),
simulating and visualizing the free motion of the system, and finally we
will addfeedback controllers to control the plants that we derive.&lt;/p&gt;
&lt;p&gt;It is best if the attendees have some background with calculus-based
college level physics. They should also be familiar with the SciPy
Stack, in particular IPython, SymPy, NumPy, and SciPy. Our goal is that
attendees will come away with the ability to model basic multibody
systems, simulate and visualize the motion, and apply feedback
controllers all in a Python framework.&lt;/p&gt;
&lt;p&gt;The tutorial materials including an outline can be viewed here:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/pydy/pydy-tutorial-pycon-2014"&gt;https://github.com/pydy/pydy-tutorial-pycon-2014&lt;/a&gt;&lt;/p&gt;
</summary><category term="robots"></category><category term="simulation"></category><category term="sympy"></category></entry><entry><title>SymPy Tutorial Part 1</title><link href="https://pyvideo.org/scipy-2014/sympy-tutorial-part-1.html" rel="alternate"></link><published>2014-07-09T00:00:00+00:00</published><updated>2014-07-09T00:00:00+00:00</updated><author><name>Aaron Meurer</name></author><id>tag:pyvideo.org,2014-07-09:scipy-2014/sympy-tutorial-part-1.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;SymPy is a pure Python library for symbolic mathematics. It aims to
become a full-featured computer algebra system (CAS) while keeping the
code as simple as possible in order to be comprehensible and easily
extensible. SymPy is written entirely in Python and does not require any
external libraries.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this tutorial we will introduce attendees to SymPy. We will show
basics of constructing and manipulating mathematical expressions in
SymPy, the most common issues and differences from other computer
algebra systems, and how to deal with them. In the last part of this
tutorial we will show how to solve some practical problems with SymPy.
This will include showing how to interface SymPy with popular numeric
libraries like NumPy.&lt;/p&gt;
&lt;p&gt;This knowledge should be enough for attendees to start using SymPy for
solving mathematical problems and hacking SymPy's internals (though
hacking core modules may require additional expertise).&lt;/p&gt;
</summary><category term="SymPy"></category><category term="tutorial"></category></entry><entry><title>SymPy Tutorial Part 2</title><link href="https://pyvideo.org/scipy-2014/sympy-tutorial-part-2.html" rel="alternate"></link><published>2014-07-09T00:00:00+00:00</published><updated>2014-07-09T00:00:00+00:00</updated><author><name>Aaron Meurer</name></author><id>tag:pyvideo.org,2014-07-09:scipy-2014/sympy-tutorial-part-2.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;SymPy is a pure Python library for symbolic mathematics. It aims to
become a full-featured computer algebra system (CAS) while keeping the
code as simple as possible in order to be comprehensible and easily
extensible. SymPy is written entirely in Python and does not require any
external libraries.&lt;/p&gt;
</summary><category term="SymPy"></category><category term="tutorial"></category></entry><entry><title>SymPy Tutorial Part 3</title><link href="https://pyvideo.org/scipy-2014/sympy-tutorial-part-3.html" rel="alternate"></link><published>2014-07-09T00:00:00+00:00</published><updated>2014-07-09T00:00:00+00:00</updated><author><name>Aaron Meurer</name></author><id>tag:pyvideo.org,2014-07-09:scipy-2014/sympy-tutorial-part-3.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;SymPy is a pure Python library for symbolic mathematics. It aims to
become a full-featured computer algebra system (CAS) while keeping the
code as simple as possible in order to be comprehensible and easily
extensible. SymPy is written entirely in Python and does not require any
external libraries.&lt;/p&gt;
</summary><category term="SymPy"></category><category term="tutorial"></category></entry><entry><title>SymPy Tutorial Part 4</title><link href="https://pyvideo.org/scipy-2014/sympy-tutorial-part-4.html" rel="alternate"></link><published>2014-07-09T00:00:00+00:00</published><updated>2014-07-09T00:00:00+00:00</updated><author><name>Aaron Meurer</name></author><id>tag:pyvideo.org,2014-07-09:scipy-2014/sympy-tutorial-part-4.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;SymPy is a pure Python library for symbolic mathematics. It aims to
become a full-featured computer algebra system (CAS) while keeping the
code as simple as possible in order to be comprehensible and easily
extensible. SymPy is written entirely in Python and does not require any
external libraries.&lt;/p&gt;
</summary><category term="SymPy"></category><category term="tutorial"></category></entry><entry><title>The Wonderful World of Scientific Computing with Python</title><link href="https://pyvideo.org/scipy-2014/the-wonderful-world-of-scientific-computing-with.html" rel="alternate"></link><published>2014-07-09T00:00:00+00:00</published><updated>2014-07-09T00:00:00+00:00</updated><author><name>David P. Sanders</name></author><id>tag:pyvideo.org,2014-07-09:scipy-2014/the-wonderful-world-of-scientific-computing-with.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;We will give an overview of the basics of the scientific computing
ecosystem with Python: what does each of the fundamental packages
(numpy, matplotlib, scipy, sympy and pandas) do, and how does it work?
We will use the IPython Notebook in our quest to enter this wonderful
world.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Starting out with scientific computing in Python can be daunting: Where
do I start? What are the basic packages, and what is the use case for
each of them? What are the fundamental ideas I need to understand each
package and how it works?&lt;/p&gt;
&lt;p&gt;In this tutorial, we will use examples of scientific questions and
calculations which lead directly to the need for certain computational
tools as a gateway to understand the basic structure of the scientific
computing ecosystem. The specific packages we will touch on are
&lt;tt class="docutils literal"&gt;numpy&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;matplotlib&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;scipy&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;sympy&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;pandas&lt;/tt&gt;, all
viewed through the wonderful lens of the IPython Notebook.&lt;/p&gt;
</summary><category term="matplotlib"></category><category term="numpy"></category><category term="pandas"></category><category term="scipy"></category><category term="sympy"></category></entry></feed>