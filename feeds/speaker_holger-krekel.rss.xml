<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Fri, 12 Jul 2019 00:00:00 +0000</lastBuildDate><item><title>Delta Chat, CFFI, pytest and all the Rust</title><link>https://pyvideo.org/europython-2019/delta-chat-cffi-pytest-and-all-the-rust.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Delta Chat, a new approach to decentralized messaging, uses Python in
several ways. Delta Chat is a Whatsapp/Telegram-style messenger app
which uses the existing e-mail server network instead of central
servers. There is no address book upload, and no necessity to tie
accounts to mobile numbers. We'll live- demo how &amp;quot;Chat over E-mail&amp;quot;
works, with random audience members, in real-time.&lt;/p&gt;
&lt;p&gt;We'll then look into how Python is used for automated testing (with
pytest) against the messenger core library which is exposed through
CFFI. However, the core library will soon be ported to full Rust. Are
there better ways to interface Rust with Python than going through
C-interfaces?&lt;/p&gt;
&lt;p&gt;In the third part we'll introduce first example Chat Bots, written in
Python. Do you want to send an machine-generated system allert to a
sysadmin group? Or safely archive all media that is posted to a family
group? Or have your IoT sensor react to commands or send info? Just do
it without registering a bot to some central cite, or by exposing all
content information to (e. g. Telegram) servers. A Chat Bot only needs
access to a standard IMAP/SMTP account. We'll look at the simple Python
API for writing and testing powerful and versatile Chat bots.&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;- Delta Chat: &lt;a class="reference external" href="https://delta.chat"&gt;https://delta.chat&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;- Core library and Py bindings:
&lt;a class="reference external" href="https://github.com/deltachat/deltachat-core"&gt;https://github.com/deltachat/deltachat-core&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;- Deltabot: &lt;a class="reference external" href="https://github.com/deltachat/deltabot/"&gt;https://github.com/deltachat/deltabot/&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Holger Krekel</dc:creator><pubDate>Fri, 12 Jul 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-07-12:europython-2019/delta-chat-cffi-pytest-and-all-the-rust.html</guid><category>Development</category><category>Python general</category><category>Rust</category><category>Sensors</category><category>System Administration</category></item><item><title>P2P Open Trying Things</title><link>https://pyvideo.org/europython-2013/p2p-open-trying-things.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Holger Krekel</dc:creator><pubDate>Fri, 05 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-05:europython-2013/p2p-open-trying-things.html</guid></item><item><title>P2P/NSA Idea Gathering</title><link>https://pyvideo.org/europython-2013/p2pnsa-idea-gathering.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Holger Krekel</dc:creator><pubDate>Fri, 05 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-05:europython-2013/p2pnsa-idea-gathering.html</guid></item><item><title>devpi: driving your packaging and testing needs</title><link>https://pyvideo.org/europython-2013/devpi-driving-your-packaging-and-testing-needs.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Holger Krekel</dc:creator><pubDate>Thu, 04 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-04:europython-2013/devpi-driving-your-packaging-and-testing-needs.html</guid><category>packaging</category><category>quality-assurance</category><category>testing</category></item><item><title>pytest - rapid and simple testing with Python</title><link>https://pyvideo.org/europython-2013/pytest-rapid-and-simple-testing-with-python.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Holger Krekel</dc:creator><pubDate>Tue, 02 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-02:europython-2013/pytest-rapid-and-simple-testing-with-python.html</guid><category>professional</category><category>quality-assurance</category><category>testing</category></item><item><title>The return of Peer2Peer computing</title><link>https://pyvideo.org/europython-2013/the-return-of-peer2peer-computing.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Holger Krekel</dc:creator><pubDate>Mon, 01 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-01:europython-2013/the-return-of-peer2peer-computing.html</guid></item><item><title>Re-inventing Python packaging &amp; testing (keynote) | Holger Krekel @PyGrunn 2013</title><link>https://pyvideo.org/pygrunn-2013/re-inventing-python-packaging-testing-keynote-holger-krekel-pygrunn-2013.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Holger Krekel</dc:creator><pubDate>Fri, 10 May 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-05-10:pygrunn-2013/re-inventing-python-packaging-testing-keynote-holger-krekel-pygrunn-2013.html</guid></item><item><title>Re-inventing Python packaging and testing</title><link>https://pyvideo.org/pycon-russia-2013/re-inventing-python-packaging-and-testing.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python still does not have a built-in installer that can install dependencies.  You have to first install setuptools/distribute and then use easy_install/pip.  Installation of packages is slow and depends on reachability of  pypi.python.org and other servers.  There is no quality control where you could e. g. see on which platforms the package successfully installs, let alone has its automated tests passing.  There is not really a standard way to run tests.  This talk outlines my plans for improving the situation, including a demo of a new (in-development) PyPI server that speeds up installation by an order of magnitude for many packages.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Holger Krekel</dc:creator><pubDate>Mon, 25 Feb 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-02-25:pycon-russia-2013/re-inventing-python-packaging-and-testing.html</guid></item><item><title>Keynote: Towards a more effective, decentralized web</title><link>https://pyvideo.org/europython-2015/keynote-towards-a-more-effective-decentralized-web.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Holger Krekel - Keynote: Towards a more effective, decentralized web
[EuroPython 2015]
[22 July 2015]
[Bilbao, Euskadi, Spain]&lt;/p&gt;
&lt;p&gt;Many would like to see more decentralization but what does it mean,
really?  In this talk, I'll discuss the recent rise of immutable state
concepts in languages and network protocols.  And how the advent of
hash-based data structures and replication strategies are shaking the
client/server web service paradigm which rests on managing mutable
state through http.  By contrast, building on git, bittorrent and
other content addressed data structures provides for a more secure,
efficient decentralized communication topology.   There are projects,
thoughts and talk to create new web standards to bring such
technologies to mass deployment and fuel a new wave of
decentralization.  What can Python bring to the table?&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Holger Krekel</dc:creator><pubDate>Tue, 04 Aug 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-08-04:europython-2015/keynote-towards-a-more-effective-decentralized-web.html</guid></item><item><title>packaging and testing with devpi and tox</title><link>https://pyvideo.org/europython-2014/packaging-and-testing-with-devpi-and-tox.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;This talk discusses good ways to organise packaging and testing for
Python projects. It walks through a per-company and an open source
scenario and explains how to best use the &amp;quot;devpi-server&amp;quot; and &amp;quot;tox&amp;quot; for
making sure you are delivering good and well tested and documented
packages. As time permits, we also discuss in-development features such
as real-time mirroring and search.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The talk discusses the following tools:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;devpi-server for running an in-house or per-laptop python package
server&lt;/li&gt;
&lt;li&gt;inheritance between package indexes and from pypi.python.org public
packages&lt;/li&gt;
&lt;li&gt;the &amp;quot;devpi&amp;quot; client tool for uploading docs and running tests&lt;/li&gt;
&lt;li&gt;running of tests through tox&lt;/li&gt;
&lt;li&gt;summary view with two work flows: open source releases and in-house
per-company developments&lt;/li&gt;
&lt;li&gt;roadmap and in-development features of devpi and tox&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(The presenter is the main author of the tools in question).&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">holger krekel</dc:creator><pubDate>Thu, 24 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-24:europython-2014/packaging-and-testing-with-devpi-and-tox.html</guid></item><item><title>pytest - rapid and simple testing with pytest</title><link>https://pyvideo.org/pycon-de-2012/pytest-rapid-and-simple-testing-with-pytest.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Das Werkzeug py.test erlaubt es schnell und einfach Test für
Python-Programme zu schreiben. Dieser Vortrag stellt die grundlegende
Nutzung von py.test und wichtige Terminologie dazu vor. Zusätzlich zeigt
die Präsentation wie py.test Unit- und funktionale Test mit besonderen
Mechanismen wie &amp;quot;perfected assertions&amp;quot; und &amp;quot;dependency injection&amp;quot;
unterstützt.&lt;/p&gt;
&lt;p&gt;Der Vortrag führt in die Prinzipien der Unit- und funktionalen Tests
kurz ein und geht auf die Vorteile von py.test gegenüber dem in der
Standardbibliothek enthalten Paket unittest ein. So kann py.test Tests,
die über verschiedene Python-Versionen und- Implementierungen
hinweggehen, ausführen. Der Schreibsstil der Tests ist &amp;quot;pythonic&amp;quot; und
die Plugins lassen sich für verschiedene Projekte nutzen.&lt;/p&gt;
&lt;p&gt;Nach einem einfachen Test-Beispiel, das die Grundprinzipen umfasst,
folgen Beispiel zu &amp;quot;dependency injection&amp;quot;. Die Nutzung von py.test im
Mozilla Projekt webqa und die Möglichkeiten des &amp;quot;mocking&amp;quot; und
&amp;quot;monkeypatching&amp;quot; schließen den Vortrag ab.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Holger Krekel</dc:creator><pubDate>Wed, 31 Oct 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-10-31:pycon-de-2012/pytest-rapid-and-simple-testing-with-pytest.html</guid><category>python</category><category>testen</category></item><item><title>py.test - feature and new release highlights</title><link>https://pyvideo.org/pycon-de-2013/pytest-feature-and-new-release-highlights.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;py.test is a popular tool for writing tests in Python. It offers unique
features not found in other testing tools. Apart from some basics, this
talk introduces the modular fixture mechanism, the assert statement
reporting and discusses the latest news of pytest-2.4 such as better
doctest support and using contextmanagers in conjunction with fixtures.
We'll also quickly discuss the most popular from the many existing
plugins.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Holger Krekel</dc:creator><pubDate>Thu, 17 Oct 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-10-17:pycon-de-2013/pytest-feature-and-new-release-highlights.html</guid><category>fixtures</category><category>pytest</category><category>testing</category></item><item><title>devpi: driving packaging and testing needs</title><link>https://pyvideo.org/pycon-de-2013/devpi-driving-packaging-and-testing-needs.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;devpi provides both a private pypi server, a self-updating
pypi.python.org package cache, and work flow commands for uploading,
testing and installing packages. This talk shows some example scenarios
and discusses the unique feature of seemlessly &amp;quot;inheriting&amp;quot; the
pypi.python.org packages into your private index. We'll also look into
how you can perform testing of a package before you push a release to
the public index or your company-specific private index.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Holger Krekel</dc:creator><pubDate>Tue, 15 Oct 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-10-15:pycon-de-2013/devpi-driving-packaging-and-testing-needs.html</guid><category>packaging</category><category>qa</category><category>testing</category></item><item><title>PyCon 2009: PyPy status talk (#72)</title><link>https://pyvideo.org/pycon-us-2009/pycon-2009-pypy-status-talk-72.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyPy Status Talk&lt;/p&gt;
&lt;p&gt;Presented by Holger Krekel and Maciej Fijalkowski&lt;/p&gt;
&lt;p&gt;PyPy has come a long way. It's gone from being purely a research project
to providing a flexible and reasonably fast Python Interpreter, itself
implemented in Python. Although PyPy is not yet a viable CPython
replacement, PyPy is able to run sophisticated python applications like
Django and Twisted. In this talk, we'll focus on improvements that
happened during the last year in PyPy. This talk will also explain the
motivations driving current PyPy development and its targets for the
future.&lt;/p&gt;
&lt;p&gt;[VIDEO HAS ISSUES: Audio humming, other misc audio issues]&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Holger Krekel</dc:creator><pubDate>Tue, 17 Feb 2009 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2009-02-17:pycon-us-2009/pycon-2009-pypy-status-talk-72.html</guid><category>pycon</category><category>pycon2009</category><category>pypy</category></item><item><title>py.test - Rapid Testing with Minimal Effort</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--py-test---rapid-testing-with-minimal-.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;py.test I - rapid testing with minimal effort&lt;/p&gt;
&lt;p&gt;Presented by Holger Krekel&lt;/p&gt;
&lt;p&gt;Want to learn writing tests in Python? This tutorial introduces basic
practises using the popular py.test (&lt;a class="reference external" href="http://pytest.org"&gt;http://pytest.org&lt;/a&gt;) tool. We start
with an overview on testing and tools in Python and then discuss and
exercise basic idioms in a step-by-step manner. We cover the basic
writing, organisation and running of tests and debugging options. In the
second part we discuss setup and teardown of test state, usage and
configuration of test functions arguments and introduce coverage
testing. We will close with time to answer questions and discuss topics
from the participants.&lt;/p&gt;
&lt;p&gt;Intended Audience&lt;/p&gt;
&lt;p&gt;beginner programmers&lt;/p&gt;
&lt;p&gt;Perequisites/knowledge: basic knowledge of python programming&lt;/p&gt;
&lt;p&gt;Requirements: Laptop with Python 2.4 or greater installed. Pairing
welcome. outline&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;why automated testing?&lt;/li&gt;
&lt;li&gt;Developer oriented automated tests&lt;/li&gt;
&lt;li&gt;The test tool question&lt;/li&gt;
&lt;li&gt;py.test basics&lt;/li&gt;
&lt;li&gt;py.test fundamental features&lt;/li&gt;
&lt;li&gt;cross-project test tool&lt;/li&gt;
&lt;li&gt;A Typical Python test layout&lt;/li&gt;
&lt;li&gt;Another typical test layout&lt;/li&gt;
&lt;li&gt;Choosing a test layout&lt;/li&gt;
&lt;li&gt;automatic test discovery&lt;/li&gt;
&lt;li&gt;mind the &lt;strong&gt;init&lt;/strong&gt;.py files&lt;/li&gt;
&lt;li&gt;no boilerplate python test code&lt;/li&gt;
&lt;li&gt;assert introspection&lt;/li&gt;
&lt;li&gt;asserting expected exceptions&lt;/li&gt;
&lt;li&gt;print() debugging / output capturing&lt;/li&gt;
&lt;li&gt;Getting Started, basic usage [0]&lt;/li&gt;
&lt;li&gt;Failure / Traceback Demo [0]&lt;/li&gt;
&lt;li&gt;Skipping tests&lt;/li&gt;
&lt;li&gt;Dynamically skipping tests&lt;/li&gt;
&lt;li&gt;Marking test functions&lt;/li&gt;
&lt;li&gt;Marking a test for conditional skip&lt;/li&gt;
&lt;li&gt;Marking a test as expected to fail&lt;/li&gt;
&lt;li&gt;Conditional expected to fail&lt;/li&gt;
&lt;li&gt;Marking / Skipping exercise [0]&lt;/li&gt;
&lt;li&gt;Applying Marks to classes or modules&lt;/li&gt;
&lt;li&gt;break&lt;/li&gt;
&lt;li&gt;warm up: boilerplate test code&lt;/li&gt;
&lt;li&gt;&amp;quot;myscan&amp;quot; Exercises of this tutorial&lt;/li&gt;
&lt;li&gt;sketching our &amp;quot;myscan&amp;quot; project&lt;/li&gt;
&lt;li&gt;Starting Exercise [1]&lt;/li&gt;
&lt;li&gt;The example Solution [1]&lt;/li&gt;
&lt;li&gt;The &amp;quot;test setup&amp;quot; and fixture Problem&lt;/li&gt;
&lt;li&gt;test functions and funcargs&lt;/li&gt;
&lt;li&gt;How do funcargs work?&lt;/li&gt;
&lt;li&gt;funcarg factory notes&lt;/li&gt;
&lt;li&gt;builtin funcargs&lt;/li&gt;
&lt;li&gt;usage example: per-test temporary directory&lt;/li&gt;
&lt;li&gt;next step: adding more tests [2]&lt;/li&gt;
&lt;li&gt;observation on new tmpdir-using tests&lt;/li&gt;
&lt;li&gt;The mysetup pattern&lt;/li&gt;
&lt;li&gt;How the mysetup pattern works&lt;/li&gt;
&lt;li&gt;next step: introducing &amp;quot;mysetup&amp;quot; pattern [3]&lt;/li&gt;
&lt;li&gt;The new test function using &amp;quot;mysetup&amp;quot;&lt;/li&gt;
&lt;li&gt;a simple hook: adding a command line opt&lt;/li&gt;
&lt;li&gt;the py.test config object&lt;/li&gt;
&lt;li&gt;exercise: implement a new command line option [4]&lt;/li&gt;
&lt;li&gt;myscan example completed&lt;/li&gt;
&lt;li&gt;py.test hooks and plugins&lt;/li&gt;
&lt;li&gt;Installing &amp;quot;global&amp;quot; plugins&lt;/li&gt;
&lt;li&gt;exercise: use the &amp;quot;figleaf&amp;quot; plugin&lt;/li&gt;
&lt;li&gt;local plugins: conftest.py&lt;/li&gt;
&lt;li&gt;a simple config: ignoring directories&lt;/li&gt;
&lt;li&gt;a simple default option: verbose&lt;/li&gt;
&lt;li&gt;quick discussion of advanced usages&lt;/li&gt;
&lt;li&gt;Summary / questions and answers&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Holger Krekel</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--py-test---rapid-testing-with-minimal-.html</guid><category>pycon</category><category>pycon2010</category><category>py.test</category><category>tutorial</category></item><item><title>Rapid multi-purpose testing (#81)</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--rapid-multi-purpose-testing---81.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Rapid multi-purpose testing&lt;/p&gt;
&lt;p&gt;Presented by Holger Krekel&lt;/p&gt;
&lt;p&gt;Want to rapidly test code, javascript or documents on different Python
Interpreters and versions? This talk gives an overview on new py.test
features of the last year. I'll discuss the minimal-boilerplate testing
and new plugin model and give an overview on which testing needs are
covered so far, for example:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;run tests written for nose or unittest&lt;/li&gt;
&lt;li&gt;ad-hoc distribute tests to local or remote Python environments&lt;/li&gt;
&lt;li&gt;test compatibility with Python3&lt;/li&gt;
&lt;li&gt;run javascript unit-tests in real browsers&lt;/li&gt;
&lt;li&gt;coverage testing&lt;/li&gt;
&lt;li&gt;django-specific testing&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I'll conclude with upcoming features regarding testing-in-the-cloud and
plans on more test tool convergence. (URL:
&lt;a class="reference external" href="http://pytest.org/"&gt;http://pytest.org&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;[VIDEO HAS ISSUES: first 47 seconds or so are really quiet]&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Holger Krekel</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--rapid-multi-purpose-testing---81.html</guid><category>pycon</category><category>pycon2010</category><category>py.test</category><category>testing</category></item><item><title>The Ring of Python (#189)</title><link>https://pyvideo.org/pycon-us-2010/the-ring-of-python-189.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The Ring of Python&lt;/p&gt;
&lt;p&gt;Presented by holger krekel (merlinux gmbh)&lt;/p&gt;
&lt;p&gt;CPython 2.5/2.6/3.1, Jython, IronPython, PyPy, StacklessPython,
UnladenSwallow, Cython ... what do we make of all these cool interpreter
projects and versions? Where does competition help and where does it
hamper?&lt;/p&gt;
&lt;p&gt;In this interactive talk I'll highlight the main strengths of each of
the Python interpreters. Furthermore, I'll discuss ways to leverage
Python interpreters in a co-operative way, discuss challenges, projects
and issues ahead and also briefly highlight 'execnet', one my own
projects for bridging (Any) Python to (Any) Python. This is also the
first time i am going to try out a new and funvisual presentation
technique after several years of having done mostly text-based ones&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Holger Krekel</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/the-ring-of-python-189.html</guid><category>cpython</category><category>cython</category><category>ironpython</category><category>jython</category><category>pycon</category><category>pycon2010</category><category>pypy</category><category>stackless</category><category>unladenswallow</category></item><item><title>pytest - rapid and simple testing with Python</title><link>https://pyvideo.org/pycon-us-2012/pytest-rapid-and-simple-testing-with-python.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;The py.test tool presents a rapid and simple way to write tests. This
talks introduces common testing terms, basic examples and unique pytest
features for writing unit- or functional tests: assertions and
dependency injection mechanisms. We also look at other features like
distributing test load, new plugins and reasons why some Redhat and
Mozilla people choose pytest over other approaches.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Holger Krekel</dc:creator><pubDate>Fri, 09 Mar 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-03-09:pycon-us-2012/pytest-rapid-and-simple-testing-with-python.html</guid></item><item><title>Improving automated testing with py.test</title><link>https://pyvideo.org/pycon-us-2014/improving-automated-testing-with-pytest.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Many people learn testing through the JUnit/PYUnit paradigm. Lately,
py.test's new fixture mechanisms have gained traction among many
Pythonistas. This tutorial explores py.test discusses key strategies how
to benefit from using py.test for your existing unittest/nose based code
bases.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Holger Krekel</dc:creator><pubDate>Sat, 12 Apr 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-04-12:pycon-us-2014/improving-automated-testing-with-pytest.html</guid></item></channel></rss>