<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_jim-fulton.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2014-07-27T00:00:00+00:00</updated><entry><title>Please don't help me so much</title><link href="https://pyvideo.org/pycon-ar-2011/please-dont-help-me-so-much.html" rel="alternate"></link><published>2011-09-23T00:00:00+00:00</published><updated>2011-09-23T00:00:00+00:00</updated><author><name>Jim Fulton</name></author><id>tag:pyvideo.org,2011-09-23:pycon-ar-2011/please-dont-help-me-so-much.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;About the lecture : How frameworks that try to be too helpful can really do harm, and why smaller focussed frameworks can ultimately be easier to use, with examples from the standard library, from Zope, and from Dojo. The Conference was in Jun√≠n ( Buenos Aires, Argentina ) September 2011. The event was managed by PyAr ( Argentinian Python Group ).&lt;/p&gt;
</summary></entry><entry><title>Bobo, a web framework that's easy to learn and remember</title><link href="https://pyvideo.org/pyohio-2014/bobo-a-web-framework-thats-easy-to-learn-and-re.html" rel="alternate"></link><published>2014-07-27T00:00:00+00:00</published><updated>2014-07-27T00:00:00+00:00</updated><author><name>Jim Fulton</name></author><id>tag:pyvideo.org,2014-07-27:pyohio-2014/bobo-a-web-framework-thats-easy-to-learn-and-re.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Bobo is a lightweight web framework designed to be easy to use and
remember. In this talk, I'll give an introduction to Bobo. I'll discuss
micro-frameworks and why they aren't limited to small problems.&lt;/p&gt;
</summary><category term="talk"></category></entry><entry><title>PyCon 2009: Plenary: Morning Lightning Talks</title><link href="https://pyvideo.org/pycon-us-2009/pycon-2009--plenary--morning-lightning-talks.html" rel="alternate"></link><published>2009-02-17T00:00:00+00:00</published><updated>2009-02-17T00:00:00+00:00</updated><author><name>Adam Fast</name></author><id>tag:pyvideo.org,2009-02-17:pycon-us-2009/pycon-2009--plenary--morning-lightning-talks.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Plenary: Morning Lightning Talks covering GeoDjango, Zope, Launchpad,
JSOT, AppEngine, StackOverflow, Miro, zc.buildout and RPM, ham radio,
Plyne, GozerBot, picking tools, and stop watch.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;ul class="simple"&gt;
&lt;li&gt;(00:20) GeoDjango - Justin Bronn&lt;/li&gt;
&lt;li&gt;(05:50) What's up with Zope - Martijn Faassen&lt;/li&gt;
&lt;li&gt;(10:55) Scripting Launchpad - Paul Hummer&lt;/li&gt;
&lt;li&gt;(13:50) JSQT - ?&lt;/li&gt;
&lt;li&gt;(16:10) Python, AppEngine, and Informatics - Charles Severance&lt;/li&gt;
&lt;li&gt;(20:55) an online game called stackoverflow - John Mulder&lt;/li&gt;
&lt;li&gt;(25:25) Miro - Chris Webber&lt;/li&gt;
&lt;li&gt;(28:40) Deploying applications with zc.buildout and RPM - Jim Fulton&lt;/li&gt;
&lt;li&gt;(34:10) Ham radio and Python - Adam Fast&lt;/li&gt;
&lt;li&gt;(38:30) Plone + Pylons = Plyne - Roberto Allende&lt;/li&gt;
&lt;li&gt;(41:35) GozerBot - John Hampton&lt;/li&gt;
&lt;li&gt;(44:25) Software Engineering and the Pickling Tools - Rich Saunders&lt;/li&gt;
&lt;li&gt;(48:45) Talks about the stop watch&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="lightning talks"></category><category term="appengine"></category><category term="geodjango"></category><category term="informatics"></category><category term="jsqt"></category><category term="launchpad"></category><category term="miro"></category><category term="pickling"></category><category term="plone"></category><category term="plyne"></category><category term="pycon"></category><category term="pycon2009"></category><category term="pylons"></category><category term="stack overflow"></category><category term="zc.buildout"></category><category term="zope"></category></entry><entry><title>Deploying Applications with zc.buildout</title><link href="https://pyvideo.org/pycon-us-2011/pycon-2011--deploying-applications-with-zc-buildo.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>JIm Fulton</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--deploying-applications-with-zc-buildo.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Deploying Applications with zc.buildout&lt;/p&gt;
&lt;p&gt;Presented by JIm Fulton&lt;/p&gt;
&lt;p&gt;This talk described using zc.buildout for application deployment to
production environments. It presents building self-contained source
releases, and using these to create RPM distributions. It shows how to
use buildout to configure services, including web servers, cron jobs,
monitoring and so on. Finally, it presents ongoing efforts to deploy
applications that span many machines.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;We build and deploy large Python applications for our customers. These
applications are built from many component parts including Python
packages and non-python applications and tools. Assembling these pieces
can be a tedious and error-prone process. The zc.buildout (Buildout)
package was developed to automate this process.&lt;/p&gt;
&lt;p&gt;As our use of buildout has matured, we've integrated it with system
packaging tools and developed techniques for managing software
deployemnt and service configuration. I'll provide a detailed
description of the techniques and tools used.&lt;/p&gt;
&lt;p&gt;Outline:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Buildout&lt;ul&gt;
&lt;li&gt;Motivation&lt;/li&gt;
&lt;li&gt;History&lt;/li&gt;
&lt;li&gt;Configuration files&lt;/li&gt;
&lt;li&gt;Recipes&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Deployment pholisophy: keeping software and service configuration
separate&lt;/li&gt;
&lt;li&gt;System Packaging&lt;ul&gt;
&lt;li&gt;Making self-contained source releases (tar balls)&lt;/li&gt;
&lt;li&gt;Creating system packages from source releases with RPM&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Service configuration -- system build outs&lt;ul&gt;
&lt;li&gt;Scope: Python processes, cron, log rotation, run scripts,
monitoring, etc.&lt;/li&gt;
&lt;li&gt;Place files in &amp;quot;standard&amp;quot; locations.&lt;/li&gt;
&lt;li&gt;Run by root&lt;/li&gt;
&lt;li&gt;examples&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Meta recipes&lt;ul&gt;
&lt;li&gt;Goal: provide only essential information.&lt;/li&gt;
&lt;li&gt;Recipes provide basic level of abstraction.&lt;/li&gt;
&lt;li&gt;Buildout provides basic tools to build on these abstractions, but
these tools only scale so far.&lt;/li&gt;
&lt;li&gt;Buildout configuration language is &lt;em&gt;not&lt;/em&gt; a programming language.&lt;/li&gt;
&lt;li&gt;Meta-recipes provide a much more powerful way to build high-level
abstractions over basic recipes.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Next step: Make me a ...&lt;ul&gt;
&lt;li&gt;Model based definition of complete systems spanning multiple hosts
with interlocking services&lt;/li&gt;
&lt;li&gt;Automatic management of resources&lt;/li&gt;
&lt;li&gt;Implemented with ssh, system packaging tools (e.g. yum) and
buildout-based tools.&lt;/li&gt;
&lt;li&gt;Four levels of abstraction&lt;/li&gt;
&lt;li&gt;Current status&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="deployment"></category><category term="pycon"></category><category term="pycon2011"></category><category term="zc.buildout"></category></entry><entry><title>A resume-based WSGI Load Balancer</title><link href="https://pyvideo.org/pycon-us-2012/a-resume-based-wsgi-load-balancer.html" rel="alternate"></link><published>2012-03-09T00:00:00+00:00</published><updated>2012-03-09T00:00:00+00:00</updated><author><name>JIm Fulton</name></author><id>tag:pyvideo.org,2012-03-09:pycon-us-2012/a-resume-based-wsgi-load-balancer.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;When a web application is large, it's a good idea to send different
kinds of requests to different servers to reduce the content corpus
managed by each server. A decentralized load balancing-based approach is
presented in which each application server keeps track of what it's good
at and presents its resume to load balancers, which use application
server resumes to distribute load.&lt;/p&gt;
</summary></entry><entry><title>Panel: Directions for Packaging</title><link href="https://pyvideo.org/pycon-us-2013/panel-directions-for-packaging.html" rel="alternate"></link><published>2013-03-16T00:00:00+00:00</published><updated>2013-03-16T00:00:00+00:00</updated><author><name>Daniel Holth</name></author><id>tag:pyvideo.org,2013-03-16:pycon-us-2013/panel-directions-for-packaging.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;What needs to happen to finally offer a first-class packaging experience
to Python users? Several of the people working directly on that problem
will be here to answer your questions.&lt;/p&gt;
</summary><category term="talk"></category></entry></feed>