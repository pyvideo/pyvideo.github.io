<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org - DjangoCon AU 2017</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Fri, 04 Aug 2017 00:00:00 +0000</lastBuildDate><item><title>Bowerbirds of Technology: Architecture and Operations at Less-Than-Facebook Scale</title><link>https://pyvideo.org/djangocon-au-2017/bowerbirds-of-technology-architecture-and-operations-at-less-than-facebook-scale.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Facebook, Google, Uber, LinkedIn, and friends are the rarefied heights of software engineering. They encounter and solve problems at scales shared by few others, and as a result, their priorities in production engineering and architecture are just a bit different from the rest of us down here in the other 99% of services. Even as a lead engineer for Twilio, I rarely deal with the same uncharted territories of scale explored by these truly massive systems. Through deconstructing a few blog posts from these giants, we’ll evaluate just what is it that they’re thinking about when they build systems, why they make the choices they do, and whether any of those choices are relevant to those of us operating at high scale yet still something less than millions of requests per second.&lt;/p&gt;
&lt;p&gt;This talk will go into depth on how to evaluate, choose, and deploy technology to meet your customers’ requirements without requiring a small army of engineers to answer 2 AM pages. We’ll go through what you should think about when picking open-source systems (as well as hosted PaaS/IaaS/SaaS providers) to meet your needs: maintainership, extensibility, security, stability, and more.&lt;/p&gt;
&lt;p&gt;We’ll also talk about how to pick realistic goals for your project and business: what are the implications of claiming five nines for the person carrying the pager? How will you communicate with your customers when you’re throwing errors and breaking SLAs? What does disaster recovery mean for your systems, and how much effort will it require to implement and test your DR plan (ahead of time!)?&lt;/p&gt;
&lt;p&gt;With these guidelines in mind, you should be better equipped to say no (or yes!) the next time your team’s software hipster proposes moving everything to the Next Big Thing.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sam Kitajima-Kimbrel</dc:creator><pubDate>Fri, 04 Aug 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-08-04:/djangocon-au-2017/bowerbirds-of-technology-architecture-and-operations-at-less-than-facebook-scale.html</guid><category>DjangoCon AU 2017</category></item><item><title>Django &amp; JavaScript: A long and complicated friendship</title><link>https://pyvideo.org/djangocon-au-2017/django-javascript-a-long-and-complicated-friendship.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Django and JavaScript have co-existed happily for a very long time, with the first JS being added to the Django codebase happening way, way back in July 2005 - with the addition of some JS to make the admin middleware (yep, it wasn't an app yet!) more interactive.&lt;/p&gt;
&lt;p&gt;In the years since, JavaScript's ubiquity on the web has been well established, and the ways in which we think about how to use JS in combination with Django have evolved. We've gone from enhancing our templates with a bit of jQuery, through to not even using Django's templating at all. Instead we can use Django's popular REST framework to communicate to a decoupled JS single page web application.&lt;/p&gt;
&lt;p&gt;We'll take a tour through that history, learning from the good and the bad alike. We'll consider what the future holds for that longstanding relationship, and think about what the arrival of Node.js as a potential competitor on the backend heralds.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jen Zajac</dc:creator><pubDate>Fri, 04 Aug 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-08-04:/djangocon-au-2017/django-javascript-a-long-and-complicated-friendship.html</guid><category>DjangoCon AU 2017</category></item><item><title>Horrors of Distributed Systems</title><link>https://pyvideo.org/djangocon-au-2017/horrors-of-distributed-systems.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Many projects grow to the point where distributed systems are needed - or even more excitingly, plunge into it headfirst my adopting microservices - but along with the obvious challenges of more servers and more storage, there's all sorts of hidden dangers that you might never even have planned for.&lt;/p&gt;
&lt;p&gt;Learn about the wonders of hardware issues, networks that can't even fail correctly, delivery tradeoffs, cosmic rays and problems with time itself, and how you can be a bit more prepared for these sorts of challenges in the future - even if you're still a small project.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrew Godwin</dc:creator><pubDate>Fri, 04 Aug 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-08-04:/djangocon-au-2017/horrors-of-distributed-systems.html</guid><category>DjangoCon AU 2017</category></item><item><title>hunter2: A Symphony of Password Horror</title><link>https://pyvideo.org/djangocon-au-2017/hunter2-a-symphony-of-password-horror.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The year is 2017. We have hoverboards, jetpacks, solar-powered cars, and also so many awful passwords that it’s become trivial for pretty much anyone to have their accounts compromised. We’ve got passwords for our passwords. Eight-year-olds with a dictionary and a set of dice can generate mathematically stronger passwords than most corporations that have your credit card details. We spend our days wandering through endless forests of requirements to come up with something that contains no more than twelve letters, a special character, the eye of a newt, and at least one uppercase letter, only to be emailed it back in plaintext if you forget it. And then it goes on a Post-It note on a monitor.&lt;/p&gt;
&lt;p&gt;Do not despair - this talk is here to help!&lt;/p&gt;
&lt;p&gt;From beginners to experts, all technical folk have the power to build a post-password future. Lilly, an engineer and historian, will guide you through the history of how we got ourselves into this state, and explain why major companies still think that the best way to keep your stuff secure is to poke their heads out of the tree-house and ask you for the secret word. She will then hand you strong technical tools to help your clients and colleagues understand why there are better things out there than “Welcome1!”, and help you work together to bring a small ray of sunshine into our password-saturated world.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lilly Ryan</dc:creator><pubDate>Fri, 04 Aug 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-08-04:/djangocon-au-2017/hunter2-a-symphony-of-password-horror.html</guid><category>DjangoCon AU 2017</category></item><item><title>Loop better: a deeper look at iteration in Python</title><link>https://pyvideo.org/djangocon-au-2017/loop-better-a-deeper-look-at-iteration-in-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;What's the difference between an iterable, an iterator, and a generator?  Do you know how to create infinitely long iterables?
Come to this talk to learn some of Python's slightly more advanced looping techniques.&lt;/p&gt;
&lt;p&gt;Iterables are a very big deal in Python and they became even more important in Python 3.  There's quite a bit beyond the basics when it comes to loops and looping in Python.  Let's learn some of Python's slightly more advanced looping techniques!&lt;/p&gt;
&lt;p&gt;In this session, we'll take a step back and learn about how looping actually works in Python.  We'll then learn about a number of Python looping techniques that you've probably overlooked.&lt;/p&gt;
&lt;p&gt;We'll learn about the difference between sequences, iterables, and iterators.  We'll also reveal the iterator protocol that powers for loops in Python.&lt;/p&gt;
&lt;p&gt;After we learn the basics, we'll learn some techniques for working with infinite infinite iterables, generators, and generator expressions.&lt;/p&gt;
&lt;p&gt;Attendees will walk away from this session with specific actionable recommendations for refactoring their own code as well as a wealth of new topics to look deeper into after the session.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Trey Hunner</dc:creator><pubDate>Fri, 04 Aug 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-08-04:/djangocon-au-2017/loop-better-a-deeper-look-at-iteration-in-python.html</guid><category>DjangoCon AU 2017</category></item><item><title>Multitenant applications: how and why</title><link>https://pyvideo.org/djangocon-au-2017/multitenant-applications-how-and-why.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Multitenancy is system architecture model where a single instance of software serves multiple clients [tenants]. Each has its own context and data set isolated from the others. There are 3 main approaches to build this kind of application. Each uses different strategies to spread data in a database [or multiple databases]. In this talk, you will understand the architecture of each of these approaches, how to query data, its advantages, and downsides.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Filipe de Alencar Ximenes</dc:creator><pubDate>Fri, 04 Aug 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-08-04:/djangocon-au-2017/multitenant-applications-how-and-why.html</guid><category>DjangoCon AU 2017</category></item><item><title>Offline Django with Service Workers</title><link>https://pyvideo.org/djangocon-au-2017/offline-django-with-service-workers.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;So you wish your Django application would work in the most remote places, even when no Internet is available? With service workers, that's possible. They extend browser caching to all requests, including the initial HTML request. When offline, your users can access a fully functioning web application instead of landing on the &amp;quot;You are offline&amp;quot; page.&lt;/p&gt;
&lt;p&gt;This talk will cover:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;What service workers are&lt;/li&gt;
&lt;li&gt;How to initialise and manage them&lt;/li&gt;
&lt;li&gt;What caching strategies to use&lt;/li&gt;
&lt;li&gt;How to integrate service workers with Django&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Raphael Merx</dc:creator><pubDate>Fri, 04 Aug 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-08-04:/djangocon-au-2017/offline-django-with-service-workers.html</guid><category>DjangoCon AU 2017</category></item><item><title>Oh, I Found a Security Issue</title><link>https://pyvideo.org/djangocon-au-2017/oh-i-found-a-security-issue.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Ever thought about what happens when somebody finds a security issue in Django? How does one responsibly disclose the issue? What happens after that? How does the Django team work on it? What happens until a Django security release is published? What comes afterwards?&lt;/p&gt;
&lt;p&gt;Also, Django is “reassuringly secure”. Let’s look at the history 😉&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Markus Holtermann</dc:creator><pubDate>Fri, 04 Aug 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-08-04:/djangocon-au-2017/oh-i-found-a-security-issue.html</guid><category>DjangoCon AU 2017</category></item><item><title>Red User, Blue User, MyUser, auth.User</title><link>https://pyvideo.org/djangocon-au-2017/red-user-blue-user-myuser-authuser.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Django's contrib.auth framework allows to you specify a custom user model. Why does this matter? When should you use a custom user model? And how do you live with it once you've got one?&lt;/p&gt;
&lt;p&gt;Django's contrib.auth is a key part of most Django websites. However, there are some important details you need to understand if you're going to make good use of custom user models. Some of these details are technical - for example, custom user models require some special consideration when interacting with migrations.&lt;/p&gt;
&lt;p&gt;But even more important are the details about why custom user models are important in the first place. Custom User models were neccessary to break some really common anti-patterns about user identity - anti-patterns that are baked into Django's default user model, and are extraordinarily common in the wider web development world.&lt;/p&gt;
&lt;p&gt;In this talk, you'll learn about user identity: what it means, and what you have to think about when you're developing the user modelling parts of your Django project. You'll also learn how to use Django's custom user model in practice.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Russell Keith-Magee</dc:creator><pubDate>Fri, 04 Aug 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-08-04:/djangocon-au-2017/red-user-blue-user-myuser-authuser.html</guid><category>DjangoCon AU 2017</category></item></channel></rss>