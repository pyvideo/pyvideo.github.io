<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/event_kiwi-pycon-2014.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2014-09-14T00:00:00+00:00</updated><entry><title>An introduction to Python and graph databases with Neo4j</title><link href="https://pyvideo.org/kiwi-pycon-2014/an-introduction-to-python-and-graph-databases-wit.html" rel="alternate"></link><published>2014-09-14T00:00:00+00:00</published><updated>2014-09-14T00:00:00+00:00</updated><author><name>Holger Spill</name></author><id>tag:pyvideo.org,2014-09-14:kiwi-pycon-2014/an-introduction-to-python-and-graph-databases-wit.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Audience level&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Novice&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A number of organisations have realised that the relational model for
databases is insufficient for certain scenarios. Graph databases are
good at modelling relationships. This talk will introduce you to Neo4j
(a graph database engine) with Python. How to set it up, how to use it
and some questions you can answer with it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This talk will introduce you to Neo4j (a graph database engine) with
Python. How to set it up, how to use it and some questions you can
answer with it.&lt;/p&gt;
&lt;p&gt;You don’t need any previous experience with Neo4j or NoSQL databases and
very little experience with Python.&lt;/p&gt;
&lt;p&gt;We'll cover: Introduction to Graphs Setting up your toolbox Neo4j and
Cypher A simple real-world example use case with Neo4j&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Slides&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://speakerdeck.com/nzpug/holger-spill-an-introduction-to-python-and-graph-databases-with-neo4j"&gt;https://speakerdeck.com/nzpug/holger-spill-an-introduction-to-python-and-graph-databases-with-neo4j&lt;/a&gt;&lt;/p&gt;
</summary><category term="talk"></category></entry><entry><title>basil - making it easy to spin up best practice python web frameworks</title><link href="https://pyvideo.org/kiwi-pycon-2014/basil-making-it-easy-to-spin-up-best-practice-p.html" rel="alternate"></link><published>2014-09-14T00:00:00+00:00</published><updated>2014-09-14T00:00:00+00:00</updated><author><name>Ben Denham</name></author><id>tag:pyvideo.org,2014-09-14:kiwi-pycon-2014/basil-making-it-easy-to-spin-up-best-practice-p.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Audience level&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Intermediate&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Python is a great language for web development but spinning up Python
web frameworks for development is still not as easy as it could be -
especially if following a particular form of best practice e.g. altering
the standard folder structure. Basil addresses this pain point. Use
cases include students building basic web apps and experienced devs
trying out less familiar web frameworks.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Python is a great language for web development but spinning up Python
web frameworks for development is still not as easy as it could be -
especially if you're trying to follow a particular form of best practice
e.g. altering the standard folder structure, or separating secrets
(unversioned) from settings (versioned). And even if you are familiar
with one framework, it may not be as easy to spin up another one. The
basil project is an attempt to address this pain point. Use cases may
include a teaching session where students are learning Python by
building a basic web application. Or an experienced developer wanting to
try out an alternative web framework. The presentation will look at some
of the challenges involved in designing basil.&lt;/p&gt;
&lt;p&gt;The talk will cover the following topics:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;standard user experience of setting up a web framework for Python
(contrasted with other languages)&lt;/li&gt;
&lt;li&gt;the user experience of basil&lt;/li&gt;
&lt;li&gt;use cases for basil (new developers, experienced developers,
teaching)&lt;/li&gt;
&lt;li&gt;existing alternative solutions&lt;/li&gt;
&lt;li&gt;benefits of using vagrant&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Slides&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://speakerdeck.com/nzpug/ben-denham-basil-making-it-easy-to-spin-up-best-practice-python-web-frameworks"&gt;https://speakerdeck.com/nzpug/ben-denham-basil-making-it-easy-to-spin-up-best-practice-python-web-frameworks&lt;/a&gt;&lt;/p&gt;
</summary><category term="talk"></category></entry><entry><title>Bottle + uWSGI: simple web app configuration and fun hidden features</title><link href="https://pyvideo.org/kiwi-pycon-2014/bottle-uwsgi-simple-web-app-configuration-and.html" rel="alternate"></link><published>2014-09-14T00:00:00+00:00</published><updated>2014-09-14T00:00:00+00:00</updated><author><name>Reed Wade</name></author><id>tag:pyvideo.org,2014-09-14:kiwi-pycon-2014/bottle-uwsgi-simple-web-app-configuration-and.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Audience level&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Intermediate&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I will introduce the Bottle Python Web Framework and show how simple it
is to configure a python web application to run under Nginx using uWSGI.
I'll also demonstrate some lesser known features of uWSGI that let your
web app work a little smarter.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The Bottle Python Web Framework makes it easy to create a little web
application. Nginx and uWSGI make it easy for your web app to scale and
perform well. In this talk I'll describe how to create and configure an
API focused web application.&lt;/p&gt;
&lt;p&gt;I'll demonstrate some features of uWSGI which allow your web app to
share data amongst separate processes and delegate work to non-client
facing processes.&lt;/p&gt;
&lt;p&gt;I'll show how all this can fit together with a full stack of:
bottle+uWSGI+Nginx+Bootstrap+AngularJS&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Slides&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://speakerdeck.com/nzpug/reed-wade-bottle-plus-uwsgi-simple-web-app-configuration-and-fun-hidden-features"&gt;https://speakerdeck.com/nzpug/reed-wade-bottle-plus-uwsgi-simple-web-app-configuration-and-fun-hidden-features&lt;/a&gt;&lt;/p&gt;
</summary><category term="talk"></category></entry><entry><title>Cloud Craft for Spatial Cadets</title><link href="https://pyvideo.org/kiwi-pycon-2014/cloud-craft-for-spatial-cadets.html" rel="alternate"></link><published>2014-09-14T00:00:00+00:00</published><updated>2014-09-14T00:00:00+00:00</updated><author><name>Katie Miller</name></author><id>tag:pyvideo.org,2014-09-14:kiwi-pycon-2014/cloud-craft-for-spatial-cadets.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Audience level&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Novice&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This session will give you the necessary know-how to get started with
your own cloud-based mapping app project. The talk will cover the basics
of Platform as a Service and introduce the open source OpenShift PaaS.
Katie will demonstrate how to fire up an auto-scaling spatial app on
OpenShift using Python and MongoDB, before hitting the app with some
load to test the scaling spatial goodness.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;All over the web people are doing amazing things with spatial; this
session will give you the necessary know-how to get started with your
own cloud-based mapping app project. The talk will cover the basics of
Platform as a Service and introduce Red Hat's open source OpenShift
PaaS. There will be a demonstration of how to fire up an auto-scaling
spatial app with Python and MongoDB on OpenShift. We will then hit the
app with some load to experiment with the scaling spatial goodness.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Slides&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://speakerdeck.com/nzpug/katie-miller-cloud-craft-for-spatial-cadets"&gt;https://speakerdeck.com/nzpug/katie-miller-cloud-craft-for-spatial-cadets&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://cloudcraft.codemiller.com/"&gt;http://cloudcraft.codemiller.com/&lt;/a&gt;&lt;/p&gt;
</summary><category term="talk"></category></entry><entry><title>Deploying a Django application using Juju</title><link href="https://pyvideo.org/kiwi-pycon-2014/deploying-a-django-application-using-juju.html" rel="alternate"></link><published>2014-09-14T00:00:00+00:00</published><updated>2014-09-14T00:00:00+00:00</updated><author><name>Tim Penhey</name></author><id>tag:pyvideo.org,2014-09-14:kiwi-pycon-2014/deploying-a-django-application-using-juju.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Juju is a service orchestration tool for deploying services into public
or private clouds. I will talk about how I deployed my Django
application using Juju.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Juju is a service orchestration tool for deploying services into public
or private clouds. The services that Juju deploys are described in
Charms. A Charm should use the &amp;quot;best practice&amp;quot; for deploying the
service. In the case of Django, this would be using gunicorn and nginx.
I explain how the postgresql charm communicates with the django charm,
and how I had to change my application's settings and urls to work with
the django charm. The application that is deployed is a &amp;quot;proprietary&amp;quot;
app, and as such, the deployment of the application itself is done with
another charm. The interaction between the subordinate charms and the
principal django charm are explained, and how the data is exchanged
between the charms. As well as the deployment story, I also explain how
application updates are deployed very simply.&lt;/p&gt;
</summary><category term="deploying"></category><category term="deployment"></category><category term="django"></category><category term="juju"></category></entry><entry><title>Deploying test and production systems with Ansible</title><link href="https://pyvideo.org/kiwi-pycon-2014/deploying-test-and-production-systems-with-ansibl.html" rel="alternate"></link><published>2014-09-14T00:00:00+00:00</published><updated>2014-09-14T00:00:00+00:00</updated><author><name>Juergen Brendel</name></author><id>tag:pyvideo.org,2014-09-14:kiwi-pycon-2014/deploying-test-and-production-systems-with-ansibl.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Audience level&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Intermediate&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This talk presents Ansible as a light-weight, simple and effective
configuration management tool. We will see why configuration management
is important and how we can use Ansible to automatically deploy and test
full production clusters - showcased with a sample Django application -
with just a single command and in a number of different environments.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;With modern configuration, deployment and orchestration systems,
software developers can easily maintain, bring up and tear down local
test systems, staging, demonstration and production systems, which are
100% identical to each other.&lt;/p&gt;
&lt;p&gt;This presentation will give an introduction to Ansible, a modern, simple
and efficient configuration management system. We will see how we can
deploy complete clusters (with load balancers, database and some Django
application servers), reliably and fully automated, either on dedicated
servers, on local virtual machines or in the cloud.&lt;/p&gt;
&lt;p&gt;If all goes well, there will even be a live demo in which we will bring
up a complete cluster or two in different environments, to illustrate
the power of this approach.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Slides&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://speakerdeck.com/nzpug/juergen-brendel-deploying-test-and-production-systems-with-ansible"&gt;https://speakerdeck.com/nzpug/juergen-brendel-deploying-test-and-production-systems-with-ansible&lt;/a&gt;&lt;/p&gt;
</summary><category term="talk"></category></entry><entry><title>Francesco Biscani: A Snake in Space (Keynote)</title><link href="https://pyvideo.org/kiwi-pycon-2014/francesco-biscani-a-snake-in-space-keynote.html" rel="alternate"></link><published>2014-09-14T00:00:00+00:00</published><updated>2014-09-14T00:00:00+00:00</updated><author><name>Francesco Biscani</name></author><id>tag:pyvideo.org,2014-09-14:kiwi-pycon-2014/francesco-biscani-a-snake-in-space-keynote.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Slides&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://speakerdeck.com/nzpug/francesco-biscani-a-snake-in-space-the-rise-of-scientific-python-in-astrodynamics-and-astronomy-keynote"&gt;https://speakerdeck.com/nzpug/francesco-biscani-a-snake-in-space-the-rise-of-scientific-python-in-astrodynamics-and-astronomy-keynote&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>goto in python. Yes. Really.</title><link href="https://pyvideo.org/kiwi-pycon-2014/goto-in-python-yes-really.html" rel="alternate"></link><published>2014-09-14T00:00:00+00:00</published><updated>2014-09-14T00:00:00+00:00</updated><author><name>Carl Cerecke</name></author><id>tag:pyvideo.org,2014-09-14:kiwi-pycon-2014/goto-in-python-yes-really.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Audience level&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Experienced&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Unfortunately, python is missing the goto keyword. This talk rights this
historical wrong by presenting a module that allows the use of goto
within a function. An overview of the implementation is provided, along
with rationale and performance results. Knowing what a decorator is will
be helpful for understanding the technical part of this talk.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;goto in Python&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;A brief history of the goto statement.&lt;/li&gt;
&lt;li&gt;Why have a goto in Python?&lt;/li&gt;
&lt;li&gt;Previous attempts at goto in Python&lt;/li&gt;
&lt;li&gt;Dynamically rewriting byte codes&lt;/li&gt;
&lt;li&gt;Problematic constructs&lt;/li&gt;
&lt;li&gt;Performance results&lt;/li&gt;
&lt;li&gt;Future work&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Slides&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://speakerdeck.com/nzpug/carl-cerecke-goto-in-python-yes-really"&gt;https://speakerdeck.com/nzpug/carl-cerecke-goto-in-python-yes-really&lt;/a&gt;&lt;/p&gt;
</summary><category term="talk"></category></entry><entry><title>Lightning Talks</title><link href="https://pyvideo.org/kiwi-pycon-2014/lightning-talks-12.html" rel="alternate"></link><published>2014-09-14T00:00:00+00:00</published><updated>2014-09-14T00:00:00+00:00</updated><author><name>Jen Zajac</name></author><id>tag:pyvideo.org,2014-09-14:kiwi-pycon-2014/lightning-talks-12.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;01 - Jen Zajac - PRIZE DRAW - 1:44 02 - Steven Ellis - LCA Auckland 2015
- 5:43 03 - Jay Gattuso - Heritage Preserve; #WeWantJam - 8:54 04 -
James Polly - Fewer Boilerplate! - 12:07 05 - Aurynn Shaw - Let me show
you the world - 16:19 06 - Ronen Baram - MySQL Performance Schema -
19:41 07 - Douglas Bagnall - Julia - 22:14 08 - Grant Paton-Simpson /
Richard Shea - NZ Python Promotion Pamhplet 24:50 09 - Elliot
Paton-Simpson - Blackbox - 27:23 10 - Danny Adair / Thomi Richards - New
Zealand Python User Group - 30:45 11 - Ben Olsen - Docker &amp;amp; Python -
35:37 12 - Tim Penhey - Object Factories for TDD - 40:46 13 - Hamish
Campbell - Horrible Python Obfuscation Tricks - 43:20 14 - Nick Wareing
- Arduino Pull Request Notifier - 48:35 15 - Giovanni Moretti -
Dynamically creating Python tutorials and presentations - 53:12 16 -
Robert Coup - Bad-ass Postgres Tricks - 58:36 17 - Juergen Brendel -
&amp;quot;One button&amp;quot; test and deploy on AWS - 1:03:59 18 - Tobi Wulff - Python
Anti-Patterns - 1:09:14 19 - Sanjay Wadhwa - Map Production using Python
scripts - 1:14:32 20 - Chris McDowall - Making weird maps with Python -
1:19:34&lt;/p&gt;
</summary><category term="lightning talks"></category></entry><entry><title>Making a scalable course search engine with python</title><link href="https://pyvideo.org/kiwi-pycon-2014/making-a-scalable-course-search-engine-with-pytho.html" rel="alternate"></link><published>2014-09-14T00:00:00+00:00</published><updated>2014-09-14T00:00:00+00:00</updated><author><name>Robert King</name></author><id>tag:pyvideo.org,2014-09-14:kiwi-pycon-2014/making-a-scalable-course-search-engine-with-pytho.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Audience level&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Experienced&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Creating a custom search engine with python on google app engine. Serve
large spikes in search request traffic. Allow students to find course
reviews across multiple universities and countries.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;introduction to the real world problem - Students need to be able to
find university courses across multiple countries and universities.&lt;/li&gt;
&lt;li&gt;first - explore how to solve the problem - collect course data &amp;amp;
decide on a rough solution&lt;/li&gt;
&lt;li&gt;second - create minimum viable product &amp;amp; see how people use it.
Iteratively make it better.&lt;/li&gt;
&lt;li&gt;second continued: Organise a big website launch event before you've
created the website - then proceed to write 10K lines of code in the
week before launch.&lt;/li&gt;
&lt;li&gt;third - analyse the 50K most recent search terms &amp;amp; make a simple tree
data structure to help improve search performance.&lt;/li&gt;
&lt;li&gt;four - caching &amp;amp; cache invalidation&lt;/li&gt;
&lt;li&gt;five - Maybe I'll do an online marketing campaign halfway through the
talk and show graphs of the app responding in real time.&lt;/li&gt;
&lt;li&gt;Covers Data analysis with python (csv, matplotlib, networkx,
collections.Counter, logfile parsing)&lt;/li&gt;
&lt;li&gt;Covers &amp;quot;Futures&amp;quot; - doing RPC calls in parallel.&lt;/li&gt;
&lt;li&gt;Unit testing &amp;amp; simulating all things. - Being able to see how
adjusting search functionality effects query times &amp;amp; quality of
results.&lt;/li&gt;
&lt;li&gt;Some tasteful jokes to keep things entertaining ;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Slides&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://speakerdeck.com/nzpug/robert-king-making-a-scalable-course-search-engine-with-python"&gt;https://speakerdeck.com/nzpug/robert-king-making-a-scalable-course-search-engine-with-python&lt;/a&gt;&lt;/p&gt;
</summary><category term="talk"></category></entry><entry><title>Multimedia programming using Gstreamer (and, of course, Python)</title><link href="https://pyvideo.org/kiwi-pycon-2014/multimedia-programming-using-gstreamer-and-of-c.html" rel="alternate"></link><published>2014-09-14T00:00:00+00:00</published><updated>2014-09-14T00:00:00+00:00</updated><author><name>Douglas Bagnall</name></author><id>tag:pyvideo.org,2014-09-14:kiwi-pycon-2014/multimedia-programming-using-gstreamer-and-of-c.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Audience level&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Intermediate&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Gstreamer is a multimedia framework consisting of hundreds of
interchangeable elements that can be plugged together like toy train
tracks to create efficient processing pipelines. This talk will show how
easy it is to put together reasonably complex Gstreamer pipelines with
Python, and indicate why you might want to. It covers Gstreamer 1.x and
both versions of CPython.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Gstreamer [1] is a mature framework for developing applications that
decode, encode, play, analyse, broadcast, or otherwise manipulate audio
and video streams. It is used on phones and embedded devices, all over
the linux desktop [2], and in giant multimedia displays.&lt;/p&gt;
&lt;p&gt;It is easy to create simple Gstreamer pipelines using shell one-liners,
but with Python it is possible to go beyond that, dealing with multiple
parallel streams and reconfiguring pipelines on the fly. Examples drawn
from real life problems include interleaving several hundred audio
streams into one multi-channel stream and splitting a video stream into
4 parts and sending each to a different projector for perfect
syncronisation.&lt;/p&gt;
&lt;p&gt;It is also possible to write a Gstreamer plugin in Python, which will be
briefly touched on.&lt;/p&gt;
&lt;p&gt;[1] &lt;a class="reference external" href="http://gstreamer.freedesktop.org/"&gt;http://gstreamer.freedesktop.org/&lt;/a&gt; [2]
&lt;a class="reference external" href="http://gstreamer.freedesktop.org/apps/"&gt;http://gstreamer.freedesktop.org/apps/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Slides&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://speakerdeck.com/nzpug/douglas-bagnall-multimedia-programming-using-gstreamer-and-of-course-python"&gt;https://speakerdeck.com/nzpug/douglas-bagnall-multimedia-programming-using-gstreamer-and-of-course-python&lt;/a&gt;&lt;/p&gt;
</summary><category term="talk"></category></entry><entry><title>PyPy.js: What? How? Why?</title><link href="https://pyvideo.org/kiwi-pycon-2014/pypyjs-what-how-why.html" rel="alternate"></link><published>2014-09-14T00:00:00+00:00</published><updated>2014-09-14T00:00:00+00:00</updated><author><name>Ryan Kelly</name></author><id>tag:pyvideo.org,2014-09-14:kiwi-pycon-2014/pypyjs-what-how-why.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Audience level&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Intermediate&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;PyPy.js is an experiment in building a fast and compliant in-browser
python interpreter, by compiling PyPy into javascript and retargeting
its JIT to emit asmjs code at runtime. This talk will demonstrate the
combination of technologies that make such a thing possible, the results
achieved so far, and the challenges that still remain when taking python
onto javascript's home turf.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;PyPy.js is an experiment in building a fast, compliant, in-browser
python interpreter. By compiling the PyPy interpreter into javascript,
and retargeting its JIT compiler to emit asmjs code at runtime, it is
possible to run python code in the browser at speeds competitive with a
native python environment. This talk will demonstrate the combination of
technologies that make such a thing possible, the results that have been
achieved so far, and the challenges that still remain when trying to
take python onto javascript's home turf.&lt;/p&gt;
&lt;p&gt;We'll cover: an overview of PyPy and why it's a good fit for this type
of project; an introduction to asmjs and the rise of javascript as a
compile target; what it looks like when you smoosh these two
technologies together; a comparison with other approaches such as
brython; and some concrete suggestions for how the result might be
useful in practice.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Slides&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://speakerdeck.com/nzpug/ryan-kelly-pypy-dot-js-what-how-why"&gt;https://speakerdeck.com/nzpug/ryan-kelly-pypy-dot-js-what-how-why&lt;/a&gt;&lt;/p&gt;
</summary><category term="talk"></category></entry><entry><title>Surprise features you didn't ask for</title><link href="https://pyvideo.org/kiwi-pycon-2014/surprise-features-you-didnt-ask-for.html" rel="alternate"></link><published>2014-09-14T00:00:00+00:00</published><updated>2014-09-14T00:00:00+00:00</updated><author><name>Mike Haworth</name></author><id>tag:pyvideo.org,2014-09-14:kiwi-pycon-2014/surprise-features-you-didnt-ask-for.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Audience level&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Intermediate&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Some pitfalls of popular frameworks&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Frameworks enable developers to be enormously productive, but
occasionally they include surprisingly unhelpful features. This talk
will examine some recent bugs affecting Django as well as other popular
frameworks and libraries. We will look at functionality, such as parsing
of XML, that just doesn't behave as any reasonable person might expect,
how this can be misused and what can be done to avoid the pitfalls.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Slides&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://speakerdeck.com/nzpug/mike-haworth-surprise-features-you-didnt-ask-for"&gt;https://speakerdeck.com/nzpug/mike-haworth-surprise-features-you-didnt-ask-for&lt;/a&gt;&lt;/p&gt;
</summary><category term="talk"></category></entry><entry><title>Understanding human language with Python</title><link href="https://pyvideo.org/kiwi-pycon-2014/understanding-human-language-with-python.html" rel="alternate"></link><published>2014-09-14T00:00:00+00:00</published><updated>2014-09-14T00:00:00+00:00</updated><author><name>Alyona Medelyan</name></author><id>tag:pyvideo.org,2014-09-14:kiwi-pycon-2014/understanding-human-language-with-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Audience level&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Novice&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Natural Language Processing (NLP) is an area of Computer Science that
studies how computers can understand human language. This talk will
explain the main principles behind NLP and introduce some key Python
libraries.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Natural Language Processing (NLP) is an area of Computer Science that
studies how computers can understand human language. Thanks to NLP, one
day you might have your own intelligent assistant who can understand any
dialect, who can answer your questions by finding the right answers on
the web, and who can help you communicate in any language through
instant and accurate translation.&lt;/p&gt;
&lt;p&gt;There are many challenges that still need to be overcome for this to
happen, but in the meantime researchers have been finessing the building
blocks required for NLP analysis. Some of the algorithms out there are
quite powerful already. Many exist in Python and are readily available
for any Pythonista to use.&lt;/p&gt;
&lt;p&gt;This talk will explain the main principles behind NLP and introduce some
key Python libraries. If you are interested in finding out more, please
also attend the in-depth tutorial on Friday.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Slides&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://speakerdeck.com/nzpug/alyona-medelyan-understanding-human-language-with-python"&gt;https://speakerdeck.com/nzpug/alyona-medelyan-understanding-human-language-with-python&lt;/a&gt;&lt;/p&gt;
</summary><category term="talk"></category></entry><entry><title>A Testing Talk</title><link href="https://pyvideo.org/kiwi-pycon-2014/a-testing-talk.html" rel="alternate"></link><published>2014-09-13T00:00:00+00:00</published><updated>2014-09-13T00:00:00+00:00</updated><author><name>Thomi Richards</name></author><id>tag:pyvideo.org,2014-09-13:kiwi-pycon-2014/a-testing-talk.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Audience level&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Intermediate&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This talk will contain my opinionated views on several topics,
including, but not limited to:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Which areas of testing are well catered for, and which are not?&lt;/li&gt;
&lt;li&gt;What sources of bugs are frequent, and very hard to test?&lt;/li&gt;
&lt;li&gt;Should we perhaps start talking about unit tests less, and start
talking about other forms of testing more?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In my day job I spend a lot of time looking at projects that are part of
Ubuntu, and trying to find out why they’re being released with bugs.
This in turn leads to a lot of dissection of test suites, and a lot of
discussion with my colleagues around tests, names of tests, why some
tests are better than others, where the common gaps in test coverage
are, how applications should be tested, where, when, and why certain
test suites should be run, and other subjects too boring to mention.&lt;/p&gt;
&lt;p&gt;Having done this for several years, I've started to form a few troubling
thoughts about the state of automated testing in software development,
and in python specifically. When taken together, these can start to form
a rough and ready 'testing philosophy' - a way of looking at code and,
by analysing it's structure and visibility, start to find gaps in it's
test coverage.&lt;/p&gt;
&lt;p&gt;This talk contains no silver bullets - no magical solutions, but does
(hopefully) contain some interesting questions.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Slides&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://speakerdeck.com/nzpug/thomi-richards-a-testing-talk"&gt;https://speakerdeck.com/nzpug/thomi-richards-a-testing-talk&lt;/a&gt;&lt;/p&gt;
</summary><category term="talk"></category></entry><entry><title>Control All Your Programs with MIDI Controllers</title><link href="https://pyvideo.org/kiwi-pycon-2014/control-all-your-programs-with-midi-controllers.html" rel="alternate"></link><published>2014-09-13T00:00:00+00:00</published><updated>2014-09-13T00:00:00+00:00</updated><author><name>Tobi Wulff</name></author><id>tag:pyvideo.org,2014-09-13:kiwi-pycon-2014/control-all-your-programs-with-midi-controllers.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Audience level&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Intermediate&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;MIDI devices are commonly used to provide input to audio applications,
e.g. to play a synthesizer via a keyboard or to control a mixer in an
audio workstation. This talk will show you tools for receiving input and
processing messages, and how to control all of your programs with
minimal configuration effort, the advantage being that not every single
program has to be made natively MIDI aware.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This talk will give a quick overview of the MIDI protocol and
controllers which are commonly used to provide input to audio
applications. These controllers can have the form of a musical keyboard,
a mixer with knobs, sliders and buttons, or a combination of those. Some
other variants use touch-sensitive trackpads or look like a drum kit.
Then, the talk will go over the following tools: Python (duh), mididings
(to receive and manipulate MIDI messages), xte (send keystrokes and
mouse events to the Linux Xorg server) and some other necessary programs
such as jackd to virtually connected MIDI inputs and outputs. I'll
describe the steps needed to bring all those tools together and make it
extensible to (hopefully, eventually) work on other OS as well.&lt;/p&gt;
&lt;p&gt;mididings provides a Domain Specific Language (DSL) for MIDI processing
which will be introduced as part of this talk. If you are doing anything
with MIDI devices (and other external devices apart from keyboards) and
feel like they pose some limitations on you (for example not supporting
different customisable button assignments on the device), this will be
of interest to you. xte will be used in a very basic way but if you
haven't heard of it and want to send events to your X server, this is a
great program. The possibilities are endless and we haven't even
combined all the tools yet. This is about to change in the next step of
the talk. A live demo/video will demonstrate how it all comes together
into one beautiful piece of ingenuity and software engineering.&lt;/p&gt;
&lt;p&gt;Finally, I'll discuss pros and cons of this solution versus other
possible methods including native MIDI device support for various
programs.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Slides&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://speakerdeck.com/nzpug/tobi-wulff-control-all-your-programs-with-midi-controllers"&gt;https://speakerdeck.com/nzpug/tobi-wulff-control-all-your-programs-with-midi-controllers&lt;/a&gt;&lt;/p&gt;
</summary><category term="talk"></category></entry><entry><title>Exploring The Philosophy of Programming</title><link href="https://pyvideo.org/kiwi-pycon-2014/exploring-the-philosophy-of-programming.html" rel="alternate"></link><published>2014-09-13T00:00:00+00:00</published><updated>2014-09-13T00:00:00+00:00</updated><author><name>Xuanyi Chew</name></author><id>tag:pyvideo.org,2014-09-13:kiwi-pycon-2014/exploring-the-philosophy-of-programming.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Audience level&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Intermediate&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;One man's journey to internalizing the phrase &amp;quot;computer programs are
just bits&amp;quot;. It's merely a phrase, but one that can be deeply appreciated
if time is taken to appreciate it. Talk will roughly be about bytes,
types, computation theory, language design, and some life stories.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;It all started with a bunch of Python 3 code written in another
language. What followed were explorations as to what it really means to
be programming. Why are some languages easier to learn (Python)? Why is
it easier to make mistakes in some languages (JavaScript)? And why are
some languages totally alien (APL and its family)?&lt;/p&gt;
&lt;p&gt;What role does familiarity play in being productive in a language? Why
are there different paradigms in programming? What about the correctness
of programs? Is one paradigm more correct than others? This talk
explores the history of computer science, programming and the potential
for the human race.&lt;/p&gt;
&lt;p&gt;Ultimately, this talk tries to answer the question: is programming for
humans or for machines? And what role Python plays in it. The question
on the future is left to the audience to decide.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Slides&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://speakerdeck.com/nzpug/xuanyi-chew-exploring-the-philosophy-of-programming"&gt;https://speakerdeck.com/nzpug/xuanyi-chew-exploring-the-philosophy-of-programming&lt;/a&gt;&lt;/p&gt;
</summary><category term="talk"></category></entry><entry><title>External dependencies in web apps: system libs are not that scary</title><link href="https://pyvideo.org/kiwi-pycon-2014/external-dependencies-in-web-apps-system-libs-ar.html" rel="alternate"></link><published>2014-09-13T00:00:00+00:00</published><updated>2014-09-13T00:00:00+00:00</updated><author><name>Francois Marier</name></author><id>tag:pyvideo.org,2014-09-13:kiwi-pycon-2014/external-dependencies-in-web-apps-system-libs-ar.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Audience level&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Intermediate&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Going to production is very different from setting up a development
environment. We have great tools like pip and virtualenv for the latter
but they lead to maintenance anti-patterns when they are used for
production deployments. We don't &amp;quot;pip install apache&amp;quot; and instead
leverage the QA and integration work of distro developers, so why not
rely on distros for more than just the base system?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Today's web applications often have a lot of external dependencies.
Start off with a basic framework, sprinkle a couple of handy plugins or
python modules and finish with a generous serving of JavaScript
front-end libraries.&lt;/p&gt;
&lt;p&gt;What you end up is a gigantic mess of code from different sources which
follow very different release schedules and policies. Language-specific
package managers can automate much of the dependency resolution and
package installation, but you're on your own in terms of integration and
quality assurance. Also, the minute you start distributing someone
else's code with your project, you become responsible for the security
of that external code.&lt;/p&gt;
&lt;p&gt;You could of course decide to avoid the problem by writing it all
yourself from scratch. Realistically though, you're not likely to go
past the stage of a toy WSGI app using that approach because it's a lot
of work.&lt;/p&gt;
&lt;p&gt;This talk will examine the decision that the Libravatar [1] project made
to outsource much of its maintenance burden to the distro by using
system packages for almost everything.&lt;/p&gt;
&lt;p&gt;[1] &lt;a class="reference external" href="https://www.libravatar.org/"&gt;https://www.libravatar.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Slides&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://speakerdeck.com/nzpug/francois-marier-external-dependencies-in-web-apps-system-libs-are-not-that-scary"&gt;https://speakerdeck.com/nzpug/francois-marier-external-dependencies-in-web-apps-system-libs-are-not-that-scary&lt;/a&gt;&lt;/p&gt;
</summary><category term="talk"></category></entry><entry><title>Find All the Books</title><link href="https://pyvideo.org/kiwi-pycon-2014/find-all-the-books.html" rel="alternate"></link><published>2014-09-13T00:00:00+00:00</published><updated>2014-09-13T00:00:00+00:00</updated><author><name>Greig Roulston</name></author><id>tag:pyvideo.org,2014-09-13:kiwi-pycon-2014/find-all-the-books.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Audience level&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Novice&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This is the story of how I stumbled into using Python, took on a project
that is harder then I first thought and learned more then I ever wanted
to know about bibliographic records, py(MARC), and how MongoDB blew my
mind.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The Digitisation team at National Library of New Zealan are looking at
NZ books, lots of books. What needs to be digitised, what is already
digitised and how do we get access to these books. This has been a
journey of learning the archaic arts of MARC, learning and loving Python
and working out how to handle large amounts of Library Data. This is
still a work in progress, 2 years later and what started as checking
data sets against each other in excel, has grown into me falling in love
with Dictionary’s (JSON), making Flask web interfaces to explore data,
Map Reducing data sets, making sweet graphs with MatPlotLib, using
Python when ever I get a chance and even teaching some of what I have
learned to other colleagues.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Slides&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://speakerdeck.com/nzpug/greig-roulston-find-all-the-books"&gt;https://speakerdeck.com/nzpug/greig-roulston-find-all-the-books&lt;/a&gt;&lt;/p&gt;
</summary><category term="talk"></category></entry><entry><title>Fixing Python</title><link href="https://pyvideo.org/kiwi-pycon-2014/fixing-python.html" rel="alternate"></link><published>2014-09-13T00:00:00+00:00</published><updated>2014-09-13T00:00:00+00:00</updated><author><name>Teijo Holzer</name></author><id>tag:pyvideo.org,2014-09-13:kiwi-pycon-2014/fixing-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Audience level&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Intermediate&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Discover a bug in a standard Python library, provide a reproducible test
case, log a bug report with the Python maintainers, prepare &amp;amp; submit a
patch. Get patch accepted into 2.x &amp;amp; 3.x master.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This talk will provide a real-world walk-through of how to discover a
bug in Python, prepare a reproducible test case and log a bug report. It
will then continue to show on how to provide a patch and get it accepted
and deployed into Python 2.7.7 and 3.4.1&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Slides&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://speakerdeck.com/nzpug/teijo-holzer-fixing-python"&gt;https://speakerdeck.com/nzpug/teijo-holzer-fixing-python&lt;/a&gt;&lt;/p&gt;
</summary><category term="talk"></category></entry><entry><title>Intro to flask-security</title><link href="https://pyvideo.org/kiwi-pycon-2014/intro-to-flask-security.html" rel="alternate"></link><published>2014-09-13T00:00:00+00:00</published><updated>2014-09-13T00:00:00+00:00</updated><author><name>Beau Butler</name></author><id>tag:pyvideo.org,2014-09-13:kiwi-pycon-2014/intro-to-flask-security.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Audience level&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Intermediate&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Turning your web app into a webapp-with-users looks like an onerous
yak-shaving mission, full of DNS and email configuration, password
databases, and so on. We will use the great flask-security metamodule,
and a little bit of glue, to show just how easy this formerly-annoying
process can be, from go to whoa.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Say you’re using Flask, and your happy little app now suddenly needs an
endpoint user-secured, Because Reasons… what do you do?&lt;/p&gt;
&lt;p&gt;Either you hardcode a password in, hook up basic-auth, and go home,&lt;/p&gt;
&lt;p&gt;OR, you face the fun of users, roles, the users need to sign up, now
they’ve forgotten their passwords again, and so on. There’s really no
middle ground.&lt;/p&gt;
&lt;p&gt;Going from &amp;quot;open season&amp;quot; to &amp;quot;i want this function protected with a role
permission&amp;quot; is a big old yak-shaving mission, full of DNS configuration,
the dismaying realisation that now your app has to send email, and so
on.&lt;/p&gt;
&lt;p&gt;In the spirit of self-sufficiency and ‘DevOps’, this talk takes you from
a bare 'hello world' flask app, through to a bare 'hello world' app with
role protection for endpoints. We’ll start with a domain name and a VPS,
and end with an app that people can sign up to.&lt;/p&gt;
&lt;p&gt;We'll be using the great flask-security metamodule, and a little bit of
glue, to show just how easy this formerly-annoying process can be, from
go to whoa.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Slides&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://speakerdeck.com/nzpug/beau-butler-intro-to-flask-security"&gt;https://speakerdeck.com/nzpug/beau-butler-intro-to-flask-security&lt;/a&gt;&lt;/p&gt;
</summary><category term="talk"></category></entry><entry><title>Java for Python Developers</title><link href="https://pyvideo.org/kiwi-pycon-2014/java-for-python-developers.html" rel="alternate"></link><published>2014-09-13T00:00:00+00:00</published><updated>2014-09-13T00:00:00+00:00</updated><author><name>Christopher Neugebauer</name></author><id>tag:pyvideo.org,2014-09-13:kiwi-pycon-2014/java-for-python-developers.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Audience level&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Intermediate&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Stop looking at me like that.&lt;/p&gt;
&lt;p&gt;No really. Stop it. I'm serious.&lt;/p&gt;
&lt;p&gt;Calling Java APIs from CPython is one of the more interesting challenges
facing developers who want to get Python working as a first-class
language for developing apps for Android.&lt;/p&gt;
&lt;p&gt;This talk looks at solutions, past and present, for making the world of
Java accessible from Python.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Stop looking at me like that.&lt;/p&gt;
&lt;p&gt;No really. Stop it. I'm serious. Why are you looking so confused?&lt;/p&gt;
&lt;p&gt;Yes. I'm talking about Java at a Python conference. What of it?&lt;/p&gt;
&lt;p&gt;OK, well, I'm actually talking about avoiding having to code in Java,
when circumstances almost certainly require you to code in Java… or at
least require your applications to run in a Java environment.&lt;/p&gt;
&lt;p&gt;One of the more interesting challenges for Python developers targetting
Android is being able to call Java APIs from CPython. Environments like
Android require developers to use Java to get access to Android's user
interface libraries. Perhaps more importantly, Android has APIs for
accessing hardware features like accelerometers and geolocation, and
software features like notifications, but all of these have a Java
interface.&lt;/p&gt;
&lt;p&gt;This talk looks at how these problems have been solved, and where they
haven't, approaches to solutions that might exist.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Slides&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://speakerdeck.com/nzpug/christopher-neugebauer-java-for-python-developers"&gt;https://speakerdeck.com/nzpug/christopher-neugebauer-java-for-python-developers&lt;/a&gt;&lt;/p&gt;
</summary><category term="talk"></category></entry><entry><title>Nick Coghlan: Python Beyond (C)Python (Keynote)</title><link href="https://pyvideo.org/kiwi-pycon-2014/nick-coghlan-python-beyond-cpython-keynote.html" rel="alternate"></link><published>2014-09-13T00:00:00+00:00</published><updated>2014-09-13T00:00:00+00:00</updated><author><name>Nick Coghlan</name></author><id>tag:pyvideo.org,2014-09-13:kiwi-pycon-2014/nick-coghlan-python-beyond-cpython-keynote.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Slides&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://speakerdeck.com/nzpug/nick-coghlan-python-beyond-c-python-adventures-in-software-distribution"&gt;https://speakerdeck.com/nzpug/nick-coghlan-python-beyond-c-python-adventures-in-software-distribution&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Packaging a Python desktop application using PyInstaller</title><link href="https://pyvideo.org/kiwi-pycon-2014/packaging-a-python-desktop-application-using-pyin.html" rel="alternate"></link><published>2014-09-13T00:00:00+00:00</published><updated>2014-09-13T00:00:00+00:00</updated><author><name>Glenn Ramsey</name></author><id>tag:pyvideo.org,2014-09-13:kiwi-pycon-2014/packaging-a-python-desktop-application-using-pyin.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Audience level&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Intermediate&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;What PyInstaller does. How it works. How to use it. What to do when it
doesn't work.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This talk will be an introduction to using PyInstaller for packaging a
desktop application on Windows and OSX. It will briefly outline how
PyInstaller works and describe how to use it, with some simple examples.
Finally some techniques to use for debugging a built package will be
discussed.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Slides&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://speakerdeck.com/nzpug/glenn-ramsey-packaging-a-python-desktop-application-using-pyinstaller"&gt;https://speakerdeck.com/nzpug/glenn-ramsey-packaging-a-python-desktop-application-using-pyinstaller&lt;/a&gt;&lt;/p&gt;
</summary><category term="talk"></category></entry><entry><title>Python is slow, make it faster with C</title><link href="https://pyvideo.org/kiwi-pycon-2014/python-is-slow-make-it-faster-with-c.html" rel="alternate"></link><published>2014-09-13T00:00:00+00:00</published><updated>2014-09-13T00:00:00+00:00</updated><author><name>Ben Shaw</name></author><id>tag:pyvideo.org,2014-09-13:kiwi-pycon-2014/python-is-slow-make-it-faster-with-c.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Audience level&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Intermediate&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Most people have heard that it's possible to integrate Python with C to
give performance boosts to computationally heavy code, but because it
seems daunting they've never given it a try. It's actually not as hard
as you think. This talk covers some of the different methods of speeding
up your code with C, and compares the results to those you can get from
other methods, like using PyPy.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Introduction&lt;/p&gt;
&lt;p&gt;As developers, we like to work with Python because it's forgiving, quick
to develop for and allows our code to be very dynamic. Unfortunately the
trade-off for this magic is lower performance than compiled languages.
Python can be sped up by offloading heavy algorithms to compiled C,
using specially built C modules utilising the C Python API, or by
integrating existing C libraries with using the python ctypes module. It
is also possible to speed up Python using alternative interpreters, like
PyPy, which uses a JIT compiler.&lt;/p&gt;
&lt;p&gt;Pure Python Implementation&lt;/p&gt;
&lt;p&gt;First we will take a look at a CPU bound algorithm written purely in
Python, and see how it performs. The program reads data and prints
results. The time it takes to run this will be considered the worst case
scenario.&lt;/p&gt;
&lt;p&gt;Pure C Implementation&lt;/p&gt;
&lt;p&gt;The same program will be re-written in C, including the input and output
logic, and we will compare the time it takes to run against the Python
implementation. The results of the C implementation will be considered
the best case scenario.&lt;/p&gt;
&lt;p&gt;Custom Python Module with C Implementation&lt;/p&gt;
&lt;p&gt;Python provides an API, C development headers and special C types, to
allow the creation of a specially built bridges between Python and C
code. In this example, the algorithm will be written in C, and bridged
to Python with a custom Python/C module. Input and output takes place
within Python, with C only performing the computation. With this method
we can achieve near best-case speeds, at the cost of some additional
(and sometimes complicated) C coding.&lt;/p&gt;
&lt;p&gt;Bridging To C with ctypes&lt;/p&gt;
&lt;p&gt;Introduced in Python 2.5, ctypes allows Python to integrate with
pre-built C libraries without custom C code. This approach has the
advantage over the custom Python/C Module of not needing to write a lot
of boilerplate and bridging code in C. As with the Py/C implementation,
C is used only to execute the algorithm, and Python takes care of input
and output. Again, performance is close to best-case speeds, but the
work to integrate with C is much less.&lt;/p&gt;
&lt;p&gt;Alternative Python Implementations&lt;/p&gt;
&lt;p&gt;PyPy uses a JIT compiler to offer impressive performance gains. The
original Python code will be run through PyPy, and although the results
might not be as quite as good as using compiled C, they come close, and
the effort-to-gain ratio certainly makes it attractive option.&lt;/p&gt;
&lt;p&gt;Conclusion&lt;/p&gt;
&lt;p&gt;Each performance boosting option has its pros and cons, and when it's so
easy to just use PyPy and get good results, why would you still use C?
We'll look at some example use cases for each of the methods presented
and why you would choose one over the others.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Slides&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://speakerdeck.com/nzpug/ben-shaw-python-is-slow-make-it-faster-with-c"&gt;https://speakerdeck.com/nzpug/ben-shaw-python-is-slow-make-it-faster-with-c&lt;/a&gt;&lt;/p&gt;
</summary><category term="talk"></category></entry><entry><title>Seize control of your network with Ryu</title><link href="https://pyvideo.org/kiwi-pycon-2014/seize-control-of-your-network-with-ryu.html" rel="alternate"></link><published>2014-09-13T00:00:00+00:00</published><updated>2014-09-13T00:00:00+00:00</updated><author><name>Ewen McNeill</name></author><id>tag:pyvideo.org,2014-09-13:kiwi-pycon-2014/seize-control-of-your-network-with-ryu.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Audience level&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Intermediate&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Ryu is an OpenFlow Network Controller written in Python, which provides
a framework to build your own Software Defined Network (SDN) that can
run at full wire speed, using modern network switches. Come learn how to
leverage Python to instruct your network to filter, switch, and route
traffic precisely the way you desire.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;OpenFlow [1] is an industry standard protocol for controlling modern
network hardware (and software switches -- such as Open vSwitch [2] in
Linux), down to installing specific forwarding or filtering rules
(&amp;quot;flows&amp;quot;) into the hardware forwarding plane. Together with a well
written OpenFlow Network Controller it allows you to create an
intelligent Software Defined Network (SDN).&lt;/p&gt;
&lt;p&gt;Ryu [3] is a OpenFlow Network Controller framework, written in Python,
that is already extremely capable and still being rapidly developed (new
releases every month). It has been adopted by the OpenStack [4] project
amongst many others. Ryu implements the OpenFlow wire protocols and
allows you to write event driven &amp;quot;apps&amp;quot; as Python modules, each running
in their own eventlet. It comes with lots of examples. Your own apps can
dictate switch forwarding and filtering policy in advance, or respond to
new types of packets as they arrive. This gives you fine grained
programmatic control over your network.&lt;/p&gt;
&lt;p&gt;The talk will provide a brief outline of a how a Software Defined
Network using Openflow works, and an introduction to writing your own
Ryu &amp;quot;app&amp;quot; in Python. Plus plenty of pointers so you can get started
experimenting yourself. Become the mad genius taking total control of
your network!&lt;/p&gt;
&lt;p&gt;[1] &lt;a class="reference external" href="https://www.opennetworking.org/"&gt;https://www.opennetworking.org/&lt;/a&gt; [2] &lt;a class="reference external" href="http://openvswitch.org/"&gt;http://openvswitch.org/&lt;/a&gt; [3]
&lt;a class="reference external" href="http://osrg.github.io/ryu/"&gt;http://osrg.github.io/ryu/&lt;/a&gt; [4] &lt;a class="reference external" href="http://www.openstack.org/"&gt;http://www.openstack.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Slides&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://speakerdeck.com/nzpug/ewen-mcneill-seize-control-of-your-network-with-ryu"&gt;https://speakerdeck.com/nzpug/ewen-mcneill-seize-control-of-your-network-with-ryu&lt;/a&gt;&lt;/p&gt;
</summary><category term="talk"></category></entry><entry><title>Semver and Python with PBR</title><link href="https://pyvideo.org/kiwi-pycon-2014/semver-and-python-with-pbr.html" rel="alternate"></link><published>2014-09-13T00:00:00+00:00</published><updated>2014-09-13T00:00:00+00:00</updated><author><name>Robert Collins</name></author><id>tag:pyvideo.org,2014-09-13:kiwi-pycon-2014/semver-and-python-with-pbr.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Audience level&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Novice&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;PBR is a setuptools plugin which OpenStack developed to provide simple
and consistent minimal-boilerplate build definitions for its projects.
Semantic versioning provides simple and robust rules for deciding on
version numbers, and PBR will soon be able to manage the entire process
of version number assignment in a project... and more.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;PBR is a setuptools plugin which OpenStack developed to provide simple
and consistent minimal-boilerplate build definitions for its projects.
Now used by all the OpenStack projects, PBR provides integration glue
for core features:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;testing&lt;/li&gt;
&lt;li&gt;binary package creation for Linux distributors&lt;/li&gt;
&lt;li&gt;inclusion of files in tarballs&lt;/li&gt;
&lt;li&gt;changelog and authors file creation&lt;/li&gt;
&lt;li&gt;pypi summary creation&lt;/li&gt;
&lt;li&gt;version number creation&lt;/li&gt;
&lt;li&gt;sphinx doc stub creation and manpage enablement&lt;/li&gt;
&lt;li&gt;unified requirements management&lt;/li&gt;
&lt;li&gt;for both easy-install and pip with single-file control&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The most interesting part is the version number creation, since coming
up with the right version number can be a contentious discussion in some
projects. Semver provides simple and robust rules for deciding on
version numbers, and I'm in the middle of implementing automation for
these in PBR itself, with integration glue to export them in PEP-440,
dpkg and rpm format. The only dependencies PBR has are git + a recent
pip, so this should be useful for many attendees - and while PBR is an
OpenStack invention we're very interested in making sure its useful and
reliable for anyone that wants to use it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Slides&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://speakerdeck.com/nzpug/robert-collins-semver-and-python-with-pbr"&gt;https://speakerdeck.com/nzpug/robert-collins-semver-and-python-with-pbr&lt;/a&gt;&lt;/p&gt;
</summary><category term="talk"></category></entry><entry><title>tardis - an interpreter for command-line parallel execution</title><link href="https://pyvideo.org/kiwi-pycon-2014/tardis-an-interpreter-for-command-line-parallel.html" rel="alternate"></link><published>2014-09-13T00:00:00+00:00</published><updated>2014-09-13T00:00:00+00:00</updated><author><name>Alan McCulloch</name></author><id>tag:pyvideo.org,2014-09-13:kiwi-pycon-2014/tardis-an-interpreter-for-command-line-parallel.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Audience level&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Intermediate&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This talk is about simplifying the command line interface to local or
cluster based parallel computing.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Ideally the user of a command shell would be unaware whether their
commands were executed as a single process on the local machine, or as
many concurrent processes on either their local machine or a remote
cluster, apart from the reduced time taken to complete the command if
executed as concurrent processes. We have developed an approach which we
call “command conditioning” in which the user marks up a command with
hints to the interpreter which are used to transform the marked-up
command into “(re)conditioned” native shell commands which the
interpreter then launches concurrently and monitors, collects and
collates output and termination status. We have implemented an initial
python based command-conditioning interpreter called tardis. We describe
tardis, give examples of the class of compute tasks for which it is
suited, and briefly outline key compute-cluster design characteristics
which support this approach. We also touch on future work such as
potential integration with Galaxy, a popular python based workflow
system.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Slides&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://speakerdeck.com/nzpug/alan-mcculloch-tardis-an-interpreter-for-command-line-parallel-execution"&gt;https://speakerdeck.com/nzpug/alan-mcculloch-tardis-an-interpreter-for-command-line-parallel-execution&lt;/a&gt;&lt;/p&gt;
</summary><category term="talk"></category></entry><entry><title>The Full Monty - CI on OpenStack</title><link href="https://pyvideo.org/kiwi-pycon-2014/the-full-monty-ci-on-openstack.html" rel="alternate"></link><published>2014-09-13T00:00:00+00:00</published><updated>2014-09-13T00:00:00+00:00</updated><author><name>Danny Adair</name></author><id>tag:pyvideo.org,2014-09-13:kiwi-pycon-2014/the-full-monty-ci-on-openstack.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Audience level&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Intermediate&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Are you continuously &amp;quot;integrating&amp;quot;, or just running some unit tests
inside a virtualenv?&lt;/p&gt;
&lt;p&gt;Let's go the Full Monty with OpenStack!&lt;/p&gt;
&lt;p&gt;Protagonists, in order of appearance: Gerrit, Jenkins, OpenStack,
Puppet, Odoo (formerly OpenERP). Enjoy the ride!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I'll show how we configured our CI tools to automatically build and
destroy entire servers on OpenStack. We'll have Gerrit for code review,
Jenkins for coordinating and monitoring the build process, OpenStack and
its tools to build servers on their own subnet, Puppet for configuring
said servers. The example project is an installation of Odoo (formely
OpenERP) with a web server and PostgreSQL database.&lt;/p&gt;
&lt;p&gt;At Catalyst, my team works with Odoo (formerly known as OpenERP), a
modular Open Source suite of business applications. It has a very large
and complex codebase and &amp;quot;Regression&amp;quot; is its middle name. It is under
very active development on github, and customisations are generally
brought in via plugins that override or extend default functionality.
Basically, reasonable work on this requires continuous integration, it's
not a luxury.&lt;/p&gt;
&lt;p&gt;We could have a fat build server with multiple virtualenvs and multiple
databases on the same PostgreSQL server, and just run some Python tests
and be done with it. We could improve that with something like LXC,
Vagrant etc. all happening on said build server. But why stop there -
why not go all the way and create a more realistic setup? After all,
another team is able to provide us with OpenStack. Let's go the Full
Monty!&lt;/p&gt;
&lt;p&gt;Let's go hog wild and create and destroy entire servers just for the
purpose of testing. Let's have separate application and database
servers, just like in production.&lt;/p&gt;
&lt;p&gt;Let's also keep some servers alive for other purposes, e.g., user
acceptance testing. Just sit in an IRC channel and after changes are
committed for review, wait for a bot to post the URL of the newly built
web server to click on. A nicely readable URL on a separate subdomain
that is, of course!&lt;/p&gt;
&lt;p&gt;As a bonus, I'll show how active upstream development on github fits
into all this, and how your Ubuntu &amp;quot;Precise Pangolin&amp;quot; server can easily
rehearse an upgrade to &amp;quot;Trusty Tahr&amp;quot;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Slides&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://speakerdeck.com/nzpug/danny-adair-the-full-monty-ci-on-openstack"&gt;https://speakerdeck.com/nzpug/danny-adair-the-full-monty-ci-on-openstack&lt;/a&gt;&lt;/p&gt;
</summary><category term="talk"></category></entry><entry><title>Why Python rocks Solaris</title><link href="https://pyvideo.org/kiwi-pycon-2014/why-python-rocks-solaris.html" rel="alternate"></link><published>2014-09-13T00:00:00+00:00</published><updated>2014-09-13T00:00:00+00:00</updated><author><name>James McPherson</name></author><id>tag:pyvideo.org,2014-09-13:kiwi-pycon-2014/why-python-rocks-solaris.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Audience level&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Novice&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A number of organisations have realised that the relational model for
databases is insufficient for certain scenarios. Graph databases are
good at modelling relationships. This talk will introduce you to Neo4j
(a graph database engine) with Python. How to set it up, how to use it
and some questions you can answer with it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This talk will introduce you to Neo4j (a graph database engine) with
Python. How to set it up, how to use it and some questions you can
answer with it.&lt;/p&gt;
&lt;p&gt;You don’t need any previous experience with Neo4j or NoSQL databases and
very little experience with Python.&lt;/p&gt;
&lt;p&gt;We'll cover: Introduction to Graphs Setting up your toolbox Neo4j and
Cypher A simple real-world example use case with Neo4j&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Slides&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://speakerdeck.com/nzpug/james-mcpherson-why-python-rocks-solaris"&gt;https://speakerdeck.com/nzpug/james-mcpherson-why-python-rocks-solaris&lt;/a&gt;&lt;/p&gt;
</summary><category term="talk"></category></entry></feed>