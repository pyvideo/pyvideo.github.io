<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Thu, 17 Oct 2013 00:00:00 +0000</lastBuildDate><item><title>Getting ready for PostgreSQL 9.1</title><link>https://pyvideo.org/europython-2011/getting-ready-for-postgresql-91.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Gabriele Bartolini,Harald Armin Massa,Marco Nenciarini
- 22 June 2011 in &amp;quot;Training Pizza Napoli &amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PostgreSQL is an advanced, versatile open-source database management
system that integrates perfectly with Python. It is developed by a very
active international community and is distributed under the BSD-like
PostgreSQL License.&lt;/p&gt;
&lt;p&gt;Enterprise-class features (including SQL standard compliance, ACID
transactions, disaster recovery, high availability, replication,
partitioning and general extensibility) make PostgreSQL suitable for
business critical environments seeking to reduce the TCO of their
database solutions without altering their functional needs. PostgreSQL
9.0, released in September 2010, was the first version of PostgreSQL
with Hot Standby, a built-in master/slave replication mechanism.
Asynchronous replication through the standard and consolidated log
shipping technique (previously used with Warm Standby for high
availability) has been enhanced with streaming replication.&lt;/p&gt;
&lt;p&gt;Version 9.1, expected to be out later in 2011, will add synchronous
replication to PostgreSQL, making it the first DBMS that allows
developers and users to control the replication strategy at
transactional granularity. Come to the talk and discover all the major
new features of PostgreSQL 9.1, including extensions management,
writable common table expressions (WCTE), etc.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Gabriele Bartolini</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-13:europython-2011/getting-ready-for-postgresql-91.html</guid><category>asynchronous</category><category>business</category><category>community</category><category>database</category><category>distributed</category><category>extensions</category><category>partitioning</category><category>postgresql</category><category>replication</category></item><item><title>Table Partitioning with Django</title><link>https://pyvideo.org/pycon-de-2013/table-partitioning-with-django.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Table partitioning can be thought of as a division of one large table
into several smaller tables which represent that original table. Table
partitioning is &amp;quot;transparent&amp;quot;, that means that in theory you don't need
to change any code to work with partitioned tables.&lt;/p&gt;
&lt;p&gt;We will talk about table partitioning theory in general and
implementations in different database servers. Why and when we need to
do table partitioning. What problems we can face and how we can solve
them.&lt;/p&gt;
&lt;p&gt;Django provides us with great database abstraction and ORM, but how can
we use it with table partitioning ? We will talk about existing
libraries for Django to work with table partitioning, their differences,
which is the best (if any) and why.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Max Tepkeev</dc:creator><pubDate>Thu, 17 Oct 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-10-17:pycon-de-2013/table-partitioning-with-django.html</guid><category>database</category><category>django</category><category>partition</category><category>partitioning</category></item><item><title>What every developer should know about database scalability (#21)</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--what-every-developer-should-know-abou.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;What every developer should know about database scalability&lt;/p&gt;
&lt;p&gt;Presented by Jonathan Ellis&lt;/p&gt;
&lt;p&gt;Caching, replication, partitioning, and distributed databases: how these
can (and can't!) help you scale your data.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jonathan Ellis</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--what-every-developer-should-know-abou.html</guid><category>caching</category><category>distributeddatabases</category><category>partitioning</category><category>pycon</category><category>pycon2010</category><category>replication</category><category>scaling</category></item></channel></rss>