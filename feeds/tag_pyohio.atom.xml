<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/tag_pyohio.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2011-07-30T00:00:00+00:00</updated><entry><title>PyOhio 2010: Building your own kind of dictionary</title><link href="https://pyvideo.org/pyohio-2010/pyohio-2010--building-your-own-kind-of-dictionary.html" rel="alternate"></link><published>2010-07-31T00:00:00+00:00</published><updated>2010-07-31T00:00:00+00:00</updated><author><name>W. Matthew Wilson</name></author><id>tag:pyvideo.org,2010-07-31:pyohio-2010/pyohio-2010--building-your-own-kind-of-dictionary.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Building your own kind of dictionary&lt;/p&gt;
&lt;p&gt;Presented by W. Matthew Wilson&lt;/p&gt;
&lt;p&gt;My talk is based on a project that seemed very simple at first. I wanted
an object like the regular python dictionary, but with a few small
tweaks:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;values for some keys should be restricted to elements of a set&lt;/li&gt;
&lt;li&gt;values for some keys should be restricted to instances of a type&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For example, pretend I want a dictionary called favorites, and I want
the value for the &amp;quot;color&amp;quot; key to be any instance of my Color class.
Meanwhile, for the &amp;quot;movie&amp;quot; key, I want to make sure that the value
belongs to my set of movies.&lt;/p&gt;
&lt;p&gt;In the talk, I'll walk through how I used tests to validate my different
implementations until I came up with a winner.&lt;/p&gt;
&lt;p&gt;Unlike my talk last year on metaclass tomfoolery, and the year before
that on fun with decorators (and decorator factories) I'm hoping to make
this talk straightforward and friendly to beginning programmers.&lt;/p&gt;
&lt;p&gt;You'll see:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;how I use tests to solve a real-world problem&lt;/li&gt;
&lt;li&gt;a few little gotchas with the super keyword&lt;/li&gt;
&lt;li&gt;a little about how python works under the hood.&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="dict"></category><category term="dictionaries"></category><category term="pyohio"></category><category term="pyohio2010"></category></entry><entry><title>PyOhio 2010: Code With Style</title><link href="https://pyvideo.org/pyohio-2010/pyohio-2010--code-with-style.html" rel="alternate"></link><published>2010-07-31T00:00:00+00:00</published><updated>2010-07-31T00:00:00+00:00</updated><author><name>Clayton Parker</name></author><id>tag:pyvideo.org,2010-07-31:pyohio-2010/pyohio-2010--code-with-style.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Code With Style&lt;/p&gt;
&lt;p&gt;Presented by Clayton Parker&lt;/p&gt;
&lt;p&gt;Six Feet Up's senior developer Clayton Parker will lead you on a journey
to become a Python Zen master. Your code should be as fashionable as it
is functional. To quote the Zen of Python, &amp;quot;Beautiful is better than
ugly&amp;quot;. This talk will teach you about the Python style guide and why it
is important. The talk will show you examples of well written Python and
how to analyze your current code to make Guido proud.&lt;/p&gt;
</summary><category term="code style"></category><category term="pep8"></category><category term="pyohio"></category><category term="pyohio2010"></category><category term="style"></category></entry><entry><title>PyOhio 2010: Controlling UNIX Processes using Supervisor</title><link href="https://pyvideo.org/pyohio-2010/pyohio-2010--controlling-unix-processes-using-sup.html" rel="alternate"></link><published>2010-07-31T00:00:00+00:00</published><updated>2010-07-31T00:00:00+00:00</updated><author><name>Calvin Hendryx-Parker</name></author><id>tag:pyvideo.org,2010-07-31:pyohio-2010/pyohio-2010--controlling-unix-processes-using-sup.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Controlling UNIX Processes using Supervisor&lt;/p&gt;
&lt;p&gt;Presented by Calvin Hendryx-Parker&lt;/p&gt;
&lt;p&gt;Supervisor is a Python daemon that can control arbitrary processes in a
UNIX- like environment. It features a client/server model of control
that can easily be extended. This talk will cover the configuration and
setup of Supervisor. It will also cover how to extend Supervisor and
take advantage of its XML-RPC interface and ability to react to events
that it generates.&lt;/p&gt;
</summary><category term="pyohio"></category><category term="pyohio2010"></category><category term="supervisor"></category></entry><entry><title>PyOhio 2010: Genetic Programming in Python</title><link href="https://pyvideo.org/pyohio-2010/pyohio-2010--genetic-programming-in-python.html" rel="alternate"></link><published>2010-07-31T00:00:00+00:00</published><updated>2010-07-31T00:00:00+00:00</updated><author><name>Eric Floehr</name></author><id>tag:pyvideo.org,2010-07-31:pyohio-2010/pyohio-2010--genetic-programming-in-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Genetic Programming in Python&lt;/p&gt;
&lt;p&gt;Presented by Eric Floehr&lt;/p&gt;
&lt;p&gt;Did you know you can create and evolve programs that find solutions to
problems? This talk walks through how to use Genetic Programming (GP) as
a tool to discover solutions to hard problems, when to use GP, how best
to set up the GP environment, and how to interpret the results.&lt;/p&gt;
</summary><category term="geneticprogramming"></category><category term="gp"></category><category term="pyohio"></category><category term="pyohio2010"></category></entry><entry><title>PyOhio 2010: Getting to know MongoDB using Python and IronPython</title><link href="https://pyvideo.org/pyohio-2010/pyohio-2010--getting-to-know-mongodb-using-python.html" rel="alternate"></link><published>2010-07-31T00:00:00+00:00</published><updated>2010-07-31T00:00:00+00:00</updated><author><name>Sam Corder</name></author><id>tag:pyvideo.org,2010-07-31:pyohio-2010/pyohio-2010--getting-to-know-mongodb-using-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Getting to know MongoDB using Python and IronPython&lt;/p&gt;
&lt;p&gt;Presented by Sam Corder&lt;/p&gt;
&lt;p&gt;Is your RDBMS not coping with the load anymore and can't be scaled out
any further? Are you designing the next big thing and know your RDBMS
won't be able to handle it? Are you tired of shoe-horning a data model
into where it doesn't belong? Are you just curious what this thing
called MongoDB is? In this session you will explore a popular
alternative to the RDBMS called Mongo from one who has battled with BSON
to write the original .Net driver. You'll learn basics of schema design,
document manipulation, several ways to get at your data, something odd
called map/reduce and all from the comfort of Python and the slightly
uncomfortable IronPython.&lt;/p&gt;
</summary><category term="ironpython"></category><category term="mongodb"></category><category term="nosql"></category><category term="pyohio"></category><category term="pyohio2010"></category></entry><entry><title>PyOhio 2010: GUI Tools</title><link href="https://pyvideo.org/pyohio-2010/pyohio-2010--gui-tools.html" rel="alternate"></link><published>2010-07-31T00:00:00+00:00</published><updated>2010-07-31T00:00:00+00:00</updated><author><name>James Bonanno</name></author><id>tag:pyvideo.org,2010-07-31:pyohio-2010/pyohio-2010--gui-tools.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;GUI Tools&lt;/p&gt;
&lt;p&gt;Presented by James Bonanno&lt;/p&gt;
&lt;p&gt;There are several Graphical User Interface frameworks available for
Python. In this talk, perpahs the two most popular, wxPython and PyQt,
are examined. The talk will focus on major differences, tools, and a
specific example done both in wxPython and PyQt, that is a non-trivial
production grade example.&lt;/p&gt;
&lt;p&gt;[VIDEO HAS ISSUES: sound is inaudible for the first minute]&lt;/p&gt;
</summary><category term="gui"></category><category term="pyohio"></category><category term="pyohio2010"></category><category term="pyqt"></category><category term="wxpython"></category></entry><entry><title>PyOhio 2010: Implementation of a Numerical Simulation in Python</title><link href="https://pyvideo.org/pyohio-2010/pyohio-2010--implementation-of-a-numerical-simula.html" rel="alternate"></link><published>2010-07-31T00:00:00+00:00</published><updated>2010-07-31T00:00:00+00:00</updated><author><name>Jeffrey Armstrong</name></author><id>tag:pyvideo.org,2010-07-31:pyohio-2010/pyohio-2010--implementation-of-a-numerical-simula.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Implementation of a Numerical Simulation in Python&lt;/p&gt;
&lt;p&gt;Presented by Jeffrey B. Armstrong&lt;/p&gt;
&lt;p&gt;The Python programming language is well suited for numerical computation
under a variety of circumstances. Python offers advantages over
competing free and commercial technologies, including price,
functionality, and maintainability. Specifically, the combination of
mature numerical libraries and liberal licensing allow complex
simulations to be coded with ease and to be made available to nearly all
interested parties. !NumPy/!SciPy, database access, networking, and
optimization techniques are examined in detail with respect to numerical
computation. A practical example involving an aerothermal commercial
turbofan aircraft engine simulation showcases these advantages. An
aircraft engine is broken down into discrete stages, including
compressors, turbines, and other flow-related components. Commonalities
between components, such as rotation and the presence of inlet and exit
conditions, map cleanly to the object-oriented nature of Python. Based
on simulation needs and hardware availability, Python allows for the
parallel computation of simulations without the expense and complexity
of commercial parallelization packages.&lt;/p&gt;
</summary><category term="database"></category><category term="networking"></category><category term="numpy"></category><category term="optimization"></category><category term="pyohio"></category><category term="pyohio2010"></category><category term="scipy"></category><category term="simulation"></category></entry><entry><title>PyOhio 2010: Lap Around IronPython</title><link href="https://pyvideo.org/pyohio-2010/pyohio-2010--lap-around-ironpython.html" rel="alternate"></link><published>2010-07-31T00:00:00+00:00</published><updated>2010-07-31T00:00:00+00:00</updated><author><name>Sarah Dutkiewicz</name></author><id>tag:pyvideo.org,2010-07-31:pyohio-2010/pyohio-2010--lap-around-ironpython.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Lap Around IronPython&lt;/p&gt;
&lt;p&gt;Presented by Sarah Dutkiewicz&lt;/p&gt;
&lt;p&gt;It's not just C# and VB.NET that can be used in WinForms, WPF,
Silverlight, and ASP.NET. You could also use IronPython! In this
session, you will get a quick overview of IronPython and a look into
using it with each of the following: WinForms, WPF, Silverlight, and
ASP.NET&lt;/p&gt;
</summary><category term="asp.net"></category><category term="ironpython"></category><category term=".net"></category><category term="pyohio"></category><category term="pyohio2010"></category><category term="silverlight"></category><category term="winforms"></category><category term="wpf"></category></entry><entry><title>PyOhio 2010: Lightning Talks</title><link href="https://pyvideo.org/pyohio-2010/pyohio-2010--lightning-talks.html" rel="alternate"></link><published>2010-07-31T00:00:00+00:00</published><updated>2010-07-31T00:00:00+00:00</updated><author><name>Eric Floehr</name></author><id>tag:pyvideo.org,2010-07-31:pyohio-2010/pyohio-2010--lightning-talks.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Lightning Talks&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;00:00 - Eric Floehr: &lt;a class="reference external" href="http://www.manning.com/sande/"&gt;Hello World, Computer Programming for Kids and
Beginners&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;06:00 - Eric Floehr: &lt;a class="reference external" href="http://codespeak.net/lxml/"&gt;lxml&lt;/a&gt;,
&lt;a class="reference external" href="https://fedorahosted.org/suds/"&gt;suds&lt;/a&gt;, and
&lt;a class="reference external" href="http://www.djangoproject.com/"&gt;Django&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;11:40 - (sending people up for swag by rows)&lt;/li&gt;
&lt;li&gt;15:10 - Greg Malcolm: Distributed revision control
(&lt;a class="reference external" href="http://mercurial.selenic.com/"&gt;mercurial&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;23:55 - John Nielsen: Talking about threads in Python, the GIL and
concurrency&lt;/li&gt;
&lt;li&gt;30:10 - Calvin Hendryx-Parker: &lt;a class="reference external" href="http://plone.org/"&gt;Plone 4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;37:00 - Gloria Jacobs: Funky Python Tools&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="lightning talks"></category><category term="concurrency"></category><category term="gil"></category><category term="lxml"></category><category term="mercurial"></category><category term="plone"></category><category term="plone4"></category><category term="pyohio"></category><category term="pyohio2010"></category><category term="suds"></category></entry><entry><title>PyOhio 2010: Log Analysis with Python</title><link href="https://pyvideo.org/pyohio-2010/pyohio-2010--log-analysis-with-python.html" rel="alternate"></link><published>2010-07-31T00:00:00+00:00</published><updated>2010-07-31T00:00:00+00:00</updated><author><name>Scott McCarty</name></author><id>tag:pyvideo.org,2010-07-31:pyohio-2010/pyohio-2010--log-analysis-with-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Log Analysis with Python&lt;/p&gt;
&lt;p&gt;Presented by Scott McCarty&lt;/p&gt;
&lt;p&gt;Log analysis is something that every programmer and systems adminstrator
must do sometimes. This talk will be an introduction to the concepts of
pattern recognition, artificial ignorance, word counting, stopword
lists, and command line graphing. It is based on a pythonic
implementation of these techniques called petit and will delve into
several use cases and show how using these techniques can help you save
time when analyzing logs with python.&lt;/p&gt;
</summary><category term="artificialignorance"></category><category term="commandline"></category><category term="graphing"></category><category term="patternrecognition"></category><category term="petit"></category><category term="pyohio"></category><category term="pyohio2010"></category><category term="stopwordlists"></category><category term="wordcounting"></category></entry><entry><title>PyOhio 2010: Making it go faster</title><link href="https://pyvideo.org/pyohio-2010/pyohio-2010--making-it-go-faster.html" rel="alternate"></link><published>2010-07-31T00:00:00+00:00</published><updated>2010-07-31T00:00:00+00:00</updated><author><name>W. Matthew Wilson</name></author><id>tag:pyvideo.org,2010-07-31:pyohio-2010/pyohio-2010--making-it-go-faster.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Making it go faster&lt;/p&gt;
&lt;p&gt;Presented by W. Matthew Wilson&lt;/p&gt;
&lt;p&gt;An introduction to profiling python code.&lt;/p&gt;
&lt;p&gt;I'll use cProfile, pstats, and RunSnakeRun to find where code is getting
bogged down in a real-world example. I'll measure the run-time cost with
timeit, refactor, and measure it again.&lt;/p&gt;
&lt;p&gt;Finally, I'll talk about the limits of python optimization and show how
to replace python code with C.&lt;/p&gt;
</summary><category term="cprofile"></category><category term="optimizing"></category><category term="pstats"></category><category term="pyohio"></category><category term="pyohio2010"></category><category term="runsnakerun"></category><category term="timeit"></category></entry><entry><title>PyOhio 2010: Processing Large Datasets with Hadoop and Python</title><link href="https://pyvideo.org/pyohio-2010/pyohio-2010--processing-large-datasets-with-hadoo.html" rel="alternate"></link><published>2010-07-31T00:00:00+00:00</published><updated>2010-07-31T00:00:00+00:00</updated><author><name>William McVey</name></author><id>tag:pyvideo.org,2010-07-31:pyohio-2010/pyohio-2010--processing-large-datasets-with-hadoo.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Processing Large Datasets with Hadoop and Python&lt;/p&gt;
&lt;p&gt;Presented by William McVey&lt;/p&gt;
&lt;p&gt;This talk will explore how Hadoop along with Python can be used to
process large datasets. An overview of the Apache Hadoop project will be
given. The map/reduce concept will be introduced and some methods of
coding the data processing routines in python will be explored. The talk
will use real world examples to illustrate how this approach can be used
to parallelize computationally expensive operations across multiple
cluster nodes effectively using python.&lt;/p&gt;
&lt;p&gt;The course will assume familiarity with the Python language during the
demos, but will not actually require a deep knowledge of python to
understand the concepts introduced.&lt;/p&gt;
</summary><category term="datasets"></category><category term="hadoop"></category><category term="pyohio"></category><category term="pyohio2010"></category></entry><entry><title>PyOhio 2010: Project Management 101</title><link href="https://pyvideo.org/pyohio-2010/pyohio-2010--project-management-101.html" rel="alternate"></link><published>2010-07-31T00:00:00+00:00</published><updated>2010-07-31T00:00:00+00:00</updated><author><name>James Bonanno</name></author><id>tag:pyvideo.org,2010-07-31:pyohio-2010/pyohio-2010--project-management-101.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Project Management 101&lt;/p&gt;
&lt;p&gt;Presented by James Bonanno&lt;/p&gt;
&lt;p&gt;Python is employed for a general purpose project management tool.
Contrasted to tools like Sphinx which focus on documenting a software
project, this framework is intended for general purpose project
management, with a specific application into engineering projects.
Intermediate uses of Python are employed, as well as the Web.py
framework, Sphinx documentation tool and the Mako template system. The
author has used this tool to create internal commercial applications of
the project management software.&lt;/p&gt;
&lt;p&gt;[VIDEO HAS ISSUES: Technical issues at beginning (first talk of
conference, gear wasn't quite setup); missing initial section of talk,
then missing 20 seconds about 3 minutes in.&lt;/p&gt;
</summary><category term="projectmanagement"></category><category term="pyohio"></category><category term="pyohio2010"></category></entry><entry><title>PyOhio 2010: PyPy and Unladen Swallow: Making your Python Fast</title><link href="https://pyvideo.org/pyohio-2010/pyohio-2010--pypy-and-unladen-swallow--making-you.html" rel="alternate"></link><published>2010-07-31T00:00:00+00:00</published><updated>2010-07-31T00:00:00+00:00</updated><author><name>Alex Gaynor</name></author><id>tag:pyvideo.org,2010-07-31:pyohio-2010/pyohio-2010--pypy-and-unladen-swallow--making-you.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyPy and Unladen-Swallow: Making your Python Fast&lt;/p&gt;
&lt;p&gt;Presented by Alex Gaynor&lt;/p&gt;
&lt;p&gt;Python has a reputation for being a bit slow, but it doesn't have to be
that way. This talk will cover why Python is slow, and what two of the
most exciting virtual machines are doing about it.&lt;/p&gt;
</summary><category term="optimizing"></category><category term="pyohio"></category><category term="pyohio2010"></category><category term="pypy"></category><category term="unladenswallow"></category></entry><entry><title>PyOhio 2010: Python 101 for the .NET Developer</title><link href="https://pyvideo.org/pyohio-2010/pyohio-2010--python-101-for-the--net-developer.html" rel="alternate"></link><published>2010-07-31T00:00:00+00:00</published><updated>2010-07-31T00:00:00+00:00</updated><author><name>Sarah Dutkiewicz</name></author><id>tag:pyvideo.org,2010-07-31:pyohio-2010/pyohio-2010--python-101-for-the--net-developer.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python 101 for the .NET Developer&lt;/p&gt;
&lt;p&gt;Presented by Sarah Dutkiewicz&lt;/p&gt;
&lt;p&gt;The first part of the session will cover the basics of Python - its
history, how its data structures compare to those we're familiar with in
the primary .NET languages, its strong and weak points, who's using it,
and why you as a developer - both generally speaking and as a .NET
developer - should care about Python. The second part of the session
will get into the demos - starting with some basic Python scripts and
getting into IronPython scripts, if time allows. By the end of this
session, you'll have an idea of what Python is, why you should know it
as a developer and specifically as a .NET developer, and how to get
setup and write a basic app in both Python and IronPython.&lt;/p&gt;
</summary><category term="ironpython"></category><category term=".net"></category><category term="pyohio"></category><category term="pyohio2010"></category><category term="python-basics"></category><category term="tutorial"></category></entry><entry><title>PyOhio 2010: Python and Entrepreneurship</title><link href="https://pyvideo.org/pyohio-2010/pyohio-2010--python-and-entrepreneurship.html" rel="alternate"></link><published>2010-07-31T00:00:00+00:00</published><updated>2010-07-31T00:00:00+00:00</updated><author><name>Unknown</name></author><id>tag:pyvideo.org,2010-07-31:pyohio-2010/pyohio-2010--python-and-entrepreneurship.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python and Entrepeneurship&lt;/p&gt;
&lt;p&gt;Featuring Eric Floehr, Nick Albright, Matt Wilson, Austin Godber, James
Bonanno&lt;/p&gt;
&lt;p&gt;One of the strengths of dynamic languages is rapid development and quick
results. Python has been used by a number of Ohio small businesses, from
supporting back-office operations to being the language the company's
products are built on. This panel discussion will talk about the
opportunities and challenges in using Python to build a business on, as
well as a discussion on starting, running, and growing a
technology-based business.&lt;/p&gt;
</summary><category term="business"></category><category term="entrepeneur"></category><category term="pyohio"></category><category term="pyohio2010"></category></entry><entry><title>PyOhio 2010: So You Just Took "Python 101" -- What's Next?</title><link href="https://pyvideo.org/pyohio-2010/pyohio-2010--so-you-just-took--quot-python-101-qu.html" rel="alternate"></link><published>2010-07-31T00:00:00+00:00</published><updated>2010-07-31T00:00:00+00:00</updated><author><name>Greg Lindstrom</name></author><id>tag:pyvideo.org,2010-07-31:pyohio-2010/pyohio-2010--so-you-just-took--quot-python-101-qu.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;So You Just Took &amp;quot;Python 101&amp;quot; -- What's Next?&lt;/p&gt;
&lt;p&gt;Presented by Greg Lindstrom&lt;/p&gt;
&lt;p&gt;In this class we will develop, step-by-step and as a class, two simple
games, Hi/Low and Hangman. We will start from scratch and walk through
each step of each game discussing decision making, loops (&amp;quot;for&amp;quot;, &amp;quot;while&amp;quot;
and &amp;quot;if&amp;quot;), data structures (tuple, list and dictionary) and looking at
different ways to &amp;quot;get-r-done&amp;quot;.&lt;/p&gt;
&lt;p&gt;You should know a little about Python but don't have to know anything
else about programming (you should know how to edit and run a Python
program on your Operating System). Bring a computer with Python
installed if you want to play along.&lt;/p&gt;
</summary><category term="datastructures"></category><category term="pyohio"></category><category term="pyohio2010"></category><category term="python-basics"></category><category term="tutorial"></category></entry><entry><title>PyOhio 2010: Splunking With Python</title><link href="https://pyvideo.org/pyohio-2010/pyohio-2010--splunking-with-python.html" rel="alternate"></link><published>2010-07-31T00:00:00+00:00</published><updated>2010-07-31T00:00:00+00:00</updated><author><name>Benjamin W. Smith</name></author><id>tag:pyvideo.org,2010-07-31:pyohio-2010/pyohio-2010--splunking-with-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Splunking With Python&lt;/p&gt;
&lt;p&gt;Presented by Benjamin W. Smith&lt;/p&gt;
&lt;p&gt;Getting dirty with the Splunk API and various other sysadmin tasks with
Python.&lt;/p&gt;
</summary><category term="pyohio"></category><category term="pyohio2010"></category><category term="splunk"></category><category term="sysadmin"></category></entry><entry><title>PyOhio 2010: Teach Me Python Bugfixing</title><link href="https://pyvideo.org/pyohio-2010/pyohio-2010--teach-me-python-bugfixing.html" rel="alternate"></link><published>2010-07-31T00:00:00+00:00</published><updated>2010-07-31T00:00:00+00:00</updated><author><name>Catherine Devlin</name></author><id>tag:pyvideo.org,2010-07-31:pyohio-2010/pyohio-2010--teach-me-python-bugfixing.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Teach Me Python Bugfixing&lt;/p&gt;
&lt;p&gt;Presented by Catherine Devlin&lt;/p&gt;
&lt;p&gt;Python wants YOU to help maintain and extend the language we love so
much... but maybe you don't know how to go about making your
contribution. Catherine doesn't either. David Murray, an experienced
Python contributor, will guide her - and you - through the process, live
and unscripted. Come take part in learner-controlled instruction. No C
programming required!&lt;/p&gt;
</summary><category term="bugfixing"></category><category term="core"></category><category term="pyohio"></category><category term="pyohio2010"></category><category term="tutorial"></category></entry><entry><title>PyOhio 2010: Wrangling the bits, standardizing how apps get built</title><link href="https://pyvideo.org/pyohio-2010/pyohio-2010--wrangling-the-bits--standardizing-ho.html" rel="alternate"></link><published>2010-07-31T00:00:00+00:00</published><updated>2010-07-31T00:00:00+00:00</updated><author><name>Rick Harding</name></author><id>tag:pyvideo.org,2010-07-31:pyohio-2010/pyohio-2010--wrangling-the-bits--standardizing-ho.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Wrangling the bits, standardizing how apps get built&lt;/p&gt;
&lt;p&gt;Presented by Rick Harding&lt;/p&gt;
&lt;p&gt;As we moved more work to Python we had to figure out how to start,
share, and deploy projects in a standard way. Virtualenv, pip, and Git
to the rescue.&lt;/p&gt;
&lt;p&gt;[Note: The talk starts at around 7:20 when the mic is working.]&lt;/p&gt;
</summary><category term="deploying"></category><category term="fabric"></category><category term="git"></category><category term="pip"></category><category term="pyohio"></category><category term="pyohio2010"></category><category term="virtualenv"></category></entry><entry><title>PyOhio 2011: Aspen: A Next-generation Web Framework</title><link href="https://pyvideo.org/pyohio-2011/pyohio-2011--aspen--a-next-generation-web-framewo.html" rel="alternate"></link><published>2011-07-30T00:00:00+00:00</published><updated>2011-07-30T00:00:00+00:00</updated><author><name>Chad Whitacre</name></author><id>tag:pyvideo.org,2011-07-30:pyohio-2011/pyohio-2011--aspen--a-next-generation-web-framewo.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Aspen: A Next-generation Web Framework&lt;/p&gt;
&lt;p&gt;Presented by Chad Whitacre&lt;/p&gt;
&lt;p&gt;Aspen is a Python web framework for both realtime and traditional web
apps. It makes the most of the filesystem to reduce boilerplate and
configuration to near zero. Simplates are the main attraction, a unique
approach that brings logic and presentation as close together as
possible--without mixing them.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://aspen.io/"&gt;http://aspen.io/&lt;/a&gt;&lt;/p&gt;
</summary><category term="aspen"></category><category term="pyohio"></category><category term="pyohio2011"></category><category term="webframework"></category></entry><entry><title>PyOhio 2011: Bringing Modern Python to the Atari</title><link href="https://pyvideo.org/pyohio-2011/pyohio-2011--bringing-modern-python-to-the-atari.html" rel="alternate"></link><published>2011-07-30T00:00:00+00:00</published><updated>2011-07-30T00:00:00+00:00</updated><author><name>Jeffrey Armstrong</name></author><id>tag:pyvideo.org,2011-07-30:pyohio-2011/pyohio-2011--bringing-modern-python-to-the-atari.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Bringing Modern Python to the Atari&lt;/p&gt;
&lt;p&gt;Presented by Jeffrey Armstrong&lt;/p&gt;
&lt;p&gt;The Atari ST continues to fulfill a niche in the computing world amongst
hobbyists. Later Atari computers, such as the TT030 and Falcon030, and
the numerous clones are relatively competent 32-bit machines. To this
day, the open source FreeMiNT operating system continues to be
developed, bringing a UNIX-like environment to these computers.&lt;/p&gt;
</summary><category term="atari"></category><category term="freemint"></category><category term="pyohio"></category><category term="pyohio2011"></category></entry><entry><title>PyOhio 2011: Commercial GUI Development with Python &amp; PySide</title><link href="https://pyvideo.org/pyohio-2011/pyohio-2011--commercial-gui-development-with-pyth.html" rel="alternate"></link><published>2011-07-30T00:00:00+00:00</published><updated>2011-07-30T00:00:00+00:00</updated><author><name>James Bonanno</name></author><id>tag:pyvideo.org,2011-07-30:pyohio-2011/pyohio-2011--commercial-gui-development-with-pyth.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Commercial GUI Development with Python and PySide&lt;/p&gt;
&lt;p&gt;Presented by James Bonanno&lt;/p&gt;
&lt;p&gt;Commercial Desktop GUIs need to be secure, flexible, reliable, and easy
to maintain. A rapid application development framework, called PyRad, is
introduced, that uses PySide and Cython. Together with Python, this
development framework has allowed the authors to create numerous GUIs in
a short time period, with a consistent look and feel.&lt;/p&gt;
</summary><category term="cython"></category><category term="gui"></category><category term="pyohio"></category><category term="pyohio2011"></category><category term="pyrad"></category><category term="pyside"></category></entry><entry><title>PyOhio 2011: Consuming Web APIs with Python</title><link href="https://pyvideo.org/pyohio-2011/pyohio-2011--consuming-web-apis-with-python.html" rel="alternate"></link><published>2011-07-30T00:00:00+00:00</published><updated>2011-07-30T00:00:00+00:00</updated><author><name>Issac Kelly</name></author><id>tag:pyvideo.org,2011-07-30:pyohio-2011/pyohio-2011--consuming-web-apis-with-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Consuming Web APIs with Python&lt;/p&gt;
&lt;p&gt;Presented by Issac Kelly&lt;/p&gt;
&lt;p&gt;Issac will go over the basics of HTTP apis, what to look for, basic
authorization methods, and how to interface with them in your python
scripts. There will not be cake.&lt;/p&gt;
</summary><category term="pyohio"></category><category term="pyohio2011"></category><category term="webapis"></category></entry><entry><title>PyOhio 2011: Creating Web APIs that are a joy to use</title><link href="https://pyvideo.org/pyohio-2011/pyohio-2011--creating-web-apis-that-are-a-joy-to-.html" rel="alternate"></link><published>2011-07-30T00:00:00+00:00</published><updated>2011-07-30T00:00:00+00:00</updated><author><name>Issac Kelly</name></author><id>tag:pyvideo.org,2011-07-30:pyohio-2011/pyohio-2011--creating-web-apis-that-are-a-joy-to-.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Creating Web APIs that are a joy to use&lt;/p&gt;
&lt;p&gt;Presented by Issac Kelly&lt;/p&gt;
&lt;p&gt;Issac is an avid API consumer. He&amp;amp;aposll cover how to make an API that
is not terrible. This is apparently very difficult to do, and many
anti-patterns will be shown. No care will be taken to protect the
guilty. This talk is not as focused on Python, as it is on creating Web
APIs, and an understanding of HTTP is assumed.&lt;/p&gt;
</summary><category term="api"></category><category term="http"></category><category term="pyohio"></category><category term="pyohio2011"></category><category term="webapi"></category></entry><entry><title>PyOhio 2011: Data-Transfer Objects Are a Disease. Meet the Cure.</title><link href="https://pyvideo.org/pyohio-2011/pyohio-2011--data-transfer-objects-are-a-disease-.html" rel="alternate"></link><published>2011-07-30T00:00:00+00:00</published><updated>2011-07-30T00:00:00+00:00</updated><author><name>Aaron Oliver</name></author><id>tag:pyvideo.org,2011-07-30:pyohio-2011/pyohio-2011--data-transfer-objects-are-a-disease-.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Data-Transfer Objects are a Disease. Meet the Cure.&lt;/p&gt;
&lt;p&gt;Presented by Aaron Oliver&lt;/p&gt;
&lt;p&gt;Data Transfer Objects (DTOs) are commonplace. Every time you want to
shuffle data and be object-oriented about it, you crank out a new class.
But then someone extends it for their purposes. Badly. Then someone ELSE
extends it AGAIN and makes thing worse. Learn what makes our brains want
to create DTOs, how they've been (ab)used in the past, and how Python's
namedtuple makes it all better.&lt;/p&gt;
</summary><category term="datatransferobjects"></category><category term="namedtuple"></category><category term="pyohio"></category><category term="pyohio2011"></category></entry><entry><title>PyOhio 2011: Django and Google App Engine: Why I'm using Flask and Amazon EC2</title><link href="https://pyvideo.org/pyohio-2011/pyohio-2011--django-and-google-app-engine--why-i-.html" rel="alternate"></link><published>2011-07-30T00:00:00+00:00</published><updated>2011-07-30T00:00:00+00:00</updated><author><name>Ben Rousch</name></author><id>tag:pyvideo.org,2011-07-30:pyohio-2011/pyohio-2011--django-and-google-app-engine--why-i-.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Django and Google App Engine: Why I'm Using Flask and Amazon EC2&lt;/p&gt;
&lt;p&gt;Presented by Ben Rousch&lt;/p&gt;
&lt;p&gt;I'm a lazy coder, but not the good kind of lazy. I dove into Django so I
could have one web framework that would work on many kind of hosting
setups and for any kind of web project. With some modifications, I could
even use the laziest application host, Google App Engine. Some of these
decisions didn't work out, so I'll share some of the lessons I've
learned the past year or so.&lt;/p&gt;
</summary><category term="ec2"></category><category term="flask"></category><category term="gae"></category><category term="googleappengine"></category><category term="pyohio"></category><category term="pyohio2011"></category></entry><entry><title>PyOhio 2011: Evolving an internal web service</title><link href="https://pyvideo.org/pyohio-2011/pyohio-2011--evolving-an-internal-web-service.html" rel="alternate"></link><published>2011-07-30T00:00:00+00:00</published><updated>2011-07-30T00:00:00+00:00</updated><author><name>Taavi Burns</name></author><id>tag:pyvideo.org,2011-07-30:pyohio-2011/pyohio-2011--evolving-an-internal-web-service.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Evolving an internal web service&lt;/p&gt;
&lt;p&gt;Presented by Taavi Burns&lt;/p&gt;
&lt;p&gt;Over the past few years, FreshBooks' core business logic has been moving
into a Python web-service backend using Pylons and SQLAlchemy. Come hear
why we did it, and stories of its architecture, testing methods,
deployment, and monitoring.&lt;/p&gt;
</summary><category term="casestudy"></category><category term="freshbooks"></category><category term="pylons"></category><category term="pyohio"></category><category term="pyohio2011"></category><category term="sqlalchemy"></category></entry><entry><title>PyOhio 2011: Exchange Digital Money using Bitcoin</title><link href="https://pyvideo.org/pyohio-2011/pyohio-2011--exchange-digital-money-using-bitcoin.html" rel="alternate"></link><published>2011-07-30T00:00:00+00:00</published><updated>2011-07-30T00:00:00+00:00</updated><author><name>David Steele</name></author><id>tag:pyvideo.org,2011-07-30:pyohio-2011/pyohio-2011--exchange-digital-money-using-bitcoin.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Exchange Digital Money Using Bitcoin&lt;/p&gt;
&lt;p&gt;Presented by David Steele&lt;/p&gt;
&lt;p&gt;Bitcoin is described as the first decentralized digital currency. This
talk describes how Bitcoin uses public key encryption, proof-of-work
based logging, and peer-to-peer technology to create a type of money
which can be transferred over the Internet. We'll cover how to use
Python to manage your digital wallet and participate in this new P2P
economy.&lt;/p&gt;
</summary><category term="bitcoin"></category><category term="pyohio"></category><category term="pyohio2011"></category></entry><entry><title>PyOhio 2011: HTSQL is a WSGI reporting toolkit for Relational Databases</title><link href="https://pyvideo.org/pyohio-2011/pyohio-2011--htsql-is-a-wsgi-reporting-toolkit-fo.html" rel="alternate"></link><published>2011-07-30T00:00:00+00:00</published><updated>2011-07-30T00:00:00+00:00</updated><author><name>Clark C. Evans</name></author><id>tag:pyvideo.org,2011-07-30:pyohio-2011/pyohio-2011--htsql-is-a-wsgi-reporting-toolkit-fo.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;HTSQL is a WSGI reporting toolkit for Relational Databases&lt;/p&gt;
&lt;p&gt;Presented by Clark C. Evans&lt;/p&gt;
&lt;p&gt;HTSQL is a URI-based high-level query language for relational databases;
it is written in the Python language. HTSQL is a wonderful complement
existing WSGI- based applications, making it trivial to create
interactive dashboards, complex reports. We use HTSQL as a REST query
interface for data integration and ad-hoc reporting by technical users
or &lt;tt class="docutils literal"&gt;accidental programmers&lt;/tt&gt;.&lt;/p&gt;
</summary><category term="htsql"></category><category term="pyohio"></category><category term="pyohio2011"></category><category term="wsgi"></category></entry><entry><title>PyOhio 2011: Interactive command-line interpreters with cmd and cmd2</title><link href="https://pyvideo.org/pyohio-2011/pyohio-2011--interactive-command-line-interpreter.html" rel="alternate"></link><published>2011-07-30T00:00:00+00:00</published><updated>2011-07-30T00:00:00+00:00</updated><author><name>Catherine Devlin</name></author><id>tag:pyvideo.org,2011-07-30:pyohio-2011/pyohio-2011--interactive-command-line-interpreter.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Interactive command-line interpreters with cmd and cmd2&lt;/p&gt;
&lt;p&gt;Presented by Catherine Devlin&lt;/p&gt;
&lt;p&gt;How should your Python program receive commands and deliver results? If
an interactive command-line interpreter is right for you, you're in luck
- Python's got some great batteries included for you.&lt;/p&gt;
</summary><category term="cmd"></category><category term="cmd2"></category><category term="commandline"></category><category term="interpreters"></category><category term="pyohio"></category><category term="pyohio2011"></category></entry><entry><title>PyOhio 2011: Multi-player Games using Panda3D and Python</title><link href="https://pyvideo.org/pyohio-2011/pyohio-2011--multi-player-games-using-panda3d-and.html" rel="alternate"></link><published>2011-07-30T00:00:00+00:00</published><updated>2011-07-30T00:00:00+00:00</updated><author><name>Peter Carswell</name></author><id>tag:pyvideo.org,2011-07-30:pyohio-2011/pyohio-2011--multi-player-games-using-panda3d-and.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Multi-player Games using Panda3D and Python&lt;/p&gt;
&lt;p&gt;Presented by Peter Carswell&lt;/p&gt;
&lt;p&gt;This two-hour tutorial is designed to investigate the implementation of
a multi-player game using the game engine Panda3D. Panda3D's intended
game- development language is Python. The concepts involve Object
Oriented Programming structures, modeling and texture mapping,
key-binding motion, collisions and, finally, networking techniques.&lt;/p&gt;
</summary><category term="panda3d"></category><category term="pyohio"></category><category term="pyohio2011"></category><category term="tutorial"></category></entry><entry><title>PyOhio 2011: PHP to Python with No Regrets</title><link href="https://pyvideo.org/pyohio-2011/pyohio-2011--php-to-python-with-no-regrets.html" rel="alternate"></link><published>2011-07-30T00:00:00+00:00</published><updated>2011-07-30T00:00:00+00:00</updated><author><name>Alex Ezell</name></author><id>tag:pyvideo.org,2011-07-30:pyohio-2011/pyohio-2011--php-to-python-with-no-regrets.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PHP to Python with No Regrets&lt;/p&gt;
&lt;p&gt;Presented by Alex Ezell&lt;/p&gt;
&lt;p&gt;At Emma, we are transforming an eight year old PHP codebase into an
API-driven service written in Python. Facing down the triple threat of
bad data, encoding issues, and a generation of code cruft, we've begun
to see the light of day. Come hear how we did it, where we fell down and
where we're succeeding.&lt;/p&gt;
</summary><category term="casestudy"></category><category term="conversion"></category><category term="php"></category><category term="pyohio"></category><category term="pyohio2011"></category></entry><entry><title>PyOhio 2011: Python, Parsing and You</title><link href="https://pyvideo.org/pyohio-2011/pyohio-2011--python--parsing-and-you.html" rel="alternate"></link><published>2011-07-30T00:00:00+00:00</published><updated>2011-07-30T00:00:00+00:00</updated><author><name>Tim Henderson</name></author><id>tag:pyvideo.org,2011-07-30:pyohio-2011/pyohio-2011--python--parsing-and-you.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python, Parsing, and You&lt;/p&gt;
&lt;p&gt;Presented by Tim Henderson&lt;/p&gt;
&lt;p&gt;Tim Henderson Python is a fantastic language to write text processing
tools in, including full fledged parsers. In this tutorial I will
briefly cover Recursive Descent, Top Down Predictive and LALR Parsing.
The tools used will include PLY and a Top Down Predictive Parsing
framework of my own construction. I will expect the audience to be
familiar with the following concepts: Context Free Grammars, Regular
Expressions, ...&lt;/p&gt;
</summary><category term="lalr"></category><category term="parser"></category><category term="ply"></category><category term="pyohio"></category><category term="pyohio2011"></category></entry><entry><title>PyOhio 2011: Python 102</title><link href="https://pyvideo.org/pyohio-2011/pyohio-2011--python-100.html" rel="alternate"></link><published>2011-07-30T00:00:00+00:00</published><updated>2011-07-30T00:00:00+00:00</updated><author><name>Michael Yanovich</name></author><id>tag:pyvideo.org,2011-07-30:pyohio-2011/pyohio-2011--python-100.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python 102&lt;/p&gt;
&lt;p&gt;Presented by Michael Yanovich&lt;/p&gt;
&lt;p&gt;Now you know the basics of Python. What can you do with Python? Well the
better question should be &amp;quot;What can't you do with Python?&amp;quot; In this
tutorial/talk we'll cover more advance topics that include how to use
the Python Standard Library, advance data type manipulation, and basic
network programming. This class will be more like a talk depending on
the comfortability of everyone in the class.&lt;/p&gt;
</summary><category term="pyohio"></category><category term="pyohio2011"></category><category term="tutorial"></category></entry><entry><title>PyOhio 2011: Python 101</title><link href="https://pyvideo.org/pyohio-2011/pyohio-2011--python-101.html" rel="alternate"></link><published>2011-07-30T00:00:00+00:00</published><updated>2011-07-30T00:00:00+00:00</updated><author><name>Michael Yanovich</name></author><id>tag:pyvideo.org,2011-07-30:pyohio-2011/pyohio-2011--python-101.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python 101&lt;/p&gt;
&lt;p&gt;Presented by Michael Yanovich&lt;/p&gt;
&lt;p&gt;Are you completely new to Python? Have you been wanting to learn Python
but haven't had the time? Well give you a crash course on the basics of
Python. We'll start off with why Python is unique compared to other
languages and then quickly start into basic syntax, data types, and the
Python philosophy for coding.&lt;/p&gt;
&lt;p&gt;[VIDEO HAS ISSUES: The presenter dropped the mic on the ground and there
it lay. So the sound kind of sucks.]&lt;/p&gt;
</summary><category term="learningpython"></category><category term="pyohio"></category><category term="pyohio2011"></category><category term="tutorial"></category></entry><entry><title>PyOhio 2011: Python 102</title><link href="https://pyvideo.org/pyohio-2011/pyohio-2011--python-102.html" rel="alternate"></link><published>2011-07-30T00:00:00+00:00</published><updated>2011-07-30T00:00:00+00:00</updated><author><name>Michael Yanovich</name></author><id>tag:pyvideo.org,2011-07-30:pyohio-2011/pyohio-2011--python-102.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python 102&lt;/p&gt;
&lt;p&gt;Presented by Michael Yanovich&lt;/p&gt;
&lt;p&gt;Now you know the basics of Python. What can you do with Python? Well the
better question should be &amp;quot;What can't you do with Python?&amp;quot; In this
tutorial/talk we'll cover more advance topics that include how to use
the Python Standard Library, advance data type manipulation, and basic
network programming. This class will be more like a talk depending on
the comfortability of everyone in the class.&lt;/p&gt;
</summary><category term="learningpython"></category><category term="pyohio"></category><category term="pyohio2011"></category><category term="tutorial"></category></entry><entry><title>PyOhio 2011: Python and Entrepreneurship</title><link href="https://pyvideo.org/pyohio-2011/pyohio-2011--python-and-entrepreneurship.html" rel="alternate"></link><published>2011-07-30T00:00:00+00:00</published><updated>2011-07-30T00:00:00+00:00</updated><author><name>Unknown</name></author><id>tag:pyvideo.org,2011-07-30:pyohio-2011/pyohio-2011--python-and-entrepreneurship.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python and Entrepeneurship&lt;/p&gt;
&lt;p&gt;Panel: Eric Floehr, Matt Wilson, Isaac, Kelly, Carl Karsten&lt;/p&gt;
&lt;p&gt;This will be an audience-led discussion with a number of Midwest
entrepreneurs who do Python consulting, sell products built on Python,
or who use Python as an integral part of their business operations.&lt;/p&gt;
</summary><category term="casestudy"></category><category term="entrepeneurship"></category><category term="pyohio"></category><category term="pyohio2011"></category></entry><entry><title>PyOhio 2011: Saturday Lightning Talks</title><link href="https://pyvideo.org/pyohio-2011/pyohio-2011--saturday-lightning-talks.html" rel="alternate"></link><published>2011-07-30T00:00:00+00:00</published><updated>2011-07-30T00:00:00+00:00</updated><author><name>Various speakers</name></author><id>tag:pyvideo.org,2011-07-30:pyohio-2011/pyohio-2011--saturday-lightning-talks.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Saturday Lightning Talks&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;00:00 Dave something - SourceForge doing cool stuff with Python
&lt;a class="reference external" href="http://sourceforge.net/"&gt;sourceforge.net&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;05:00 Rick Harding - Bookie
&lt;a class="reference external" href="http://github.com/mitechie/Bookie"&gt;github.com/mitechie/Bookie&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;09:55 Tim Henderson - Slang
&lt;a class="reference external" href="http://github.com/timtadh/slang"&gt;github.com/timtadh/slang&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;12:30 Raymond Chandler III - Sun Tsu and Python -- adopting Python in
the work place&lt;/li&gt;
&lt;li&gt;17:39 Michael Yanovich - Pelican
&lt;a class="reference external" href="http://github.com/ametaireau/pelican"&gt;github.com/ametaireau/pelican&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;21:50 Matt Wilson - Rattlesnake
&lt;a class="reference external" href="http://github.com/mw44118/rattlesnake"&gt;github.com/mw44118/rattlesnake&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;27:55 Kris Hardy - repoze.who.plugins&lt;/li&gt;
&lt;li&gt;33:20 Dave M - What laptop did you bring to PyOhio?&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="lightning talks"></category><category term="bookie"></category><category term="laptops"></category><category term="pelican"></category><category term="pyohio"></category><category term="pyohio2011"></category><category term="rattlesnake"></category><category term="repoze.who.plugins"></category><category term="slang"></category><category term="sourceforge"></category></entry><entry><title>PyOhio 2011: Soft Skillz: They aren't just for humans anymore</title><link href="https://pyvideo.org/pyohio-2011/pyohio-2011--soft-skillz--they-aren--39-t-just-fo.html" rel="alternate"></link><published>2011-07-30T00:00:00+00:00</published><updated>2011-07-30T00:00:00+00:00</updated><author><name>Brian H. Prince</name></author><id>tag:pyvideo.org,2011-07-30:pyohio-2011/pyohio-2011--soft-skillz--they-aren--39-t-just-fo.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Soft Skillz: They aren't just for humans anymore&lt;/p&gt;
&lt;p&gt;Presented by Brian H. Prince&lt;/p&gt;
&lt;p&gt;Brian looks back at 15 years of being a developer, consultant, and
business leader. He will talk about the skills and wisdom that you need
to be happy and successful in your career.&lt;/p&gt;
</summary><category term="careers"></category><category term="pyohio"></category><category term="pyohio2011"></category></entry><entry><title>PyOhio 2011: SqlAlchemy tutorial</title><link href="https://pyvideo.org/pyohio-2011/pyohio-2011--sqlalchemy-tutorial.html" rel="alternate"></link><published>2011-07-30T00:00:00+00:00</published><updated>2011-07-30T00:00:00+00:00</updated><author><name>Rick Harding</name></author><id>tag:pyvideo.org,2011-07-30:pyohio-2011/pyohio-2011--sqlalchemy-tutorial.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;SqlAlchemy tutorial&lt;/p&gt;
&lt;p&gt;Presented by Rick Harding&lt;/p&gt;
&lt;p&gt;SqlAlchemy is one of the top 5 &amp;quot;must have&amp;quot; modules for Python. We'll go
through why you might want to use an ORM, situations to use the
different layers of SqlAlchemy, and some tips and tricks on a real
sample application.&lt;/p&gt;
</summary><category term="pyohio"></category><category term="pyohio2011"></category><category term="sqlalchemy"></category><category term="tutorial"></category></entry><entry><title>PyOhio 2011: Sunday Lightning Talks</title><link href="https://pyvideo.org/pyohio-2011/pyohio-2011--sunday-lightning-talks.html" rel="alternate"></link><published>2011-07-30T00:00:00+00:00</published><updated>2011-07-30T00:00:00+00:00</updated><author><name>Brandon Rhodes</name></author><id>tag:pyvideo.org,2011-07-30:pyohio-2011/pyohio-2011--sunday-lightning-talks.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Sunday Lightning Talks&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;00:00 Brandon Craig Rhodes - Adventure
&lt;a class="reference external" href="https://bitbucket.org/brandon/adventure/overview"&gt;https://bitbucket.org/brandon/adventure/overview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;05:15 Dave M - Followup on the laptop survey&lt;/li&gt;
&lt;li&gt;08:10 Clayton Parker - Vim and ctags&lt;/li&gt;
&lt;li&gt;13:10 Rich Harkins - Bullwinkle - Python tools inspired by
Perl::Moose http://code.google.com/bullwinkle&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="lightning talks"></category><category term="adventure"></category><category term="bullwinkle"></category><category term="ctags"></category><category term="pyohio"></category><category term="pyohio2011"></category><category term="vim"></category></entry><entry><title>PyOhio 2011: Toilets and Teleports - A study in Model-View-Control (MVC)</title><link href="https://pyvideo.org/pyohio-2011/pyohio-2011--toilets-and-teleports---a-study-in-m.html" rel="alternate"></link><published>2011-07-30T00:00:00+00:00</published><updated>2011-07-30T00:00:00+00:00</updated><author><name>Howard Mooneyham</name></author><id>tag:pyvideo.org,2011-07-30:pyohio-2011/pyohio-2011--toilets-and-teleports---a-study-in-m.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Toilets and Teleports - A study in Model-View-Control (MVC)&lt;/p&gt;
&lt;p&gt;Presented by Howard Mooneyham&lt;/p&gt;
&lt;p&gt;Have you ever wondered how to create a Model View Control program? Come
to my talk and we will go through building a simple MVC program, Toilets
and Teleports. We will then use one of the benefits of MVC to replace
the View with a production quality version with GUI no other changes. I
will pass out flow charts and documents showing how the program was
created.&lt;/p&gt;
</summary><category term="mvc"></category><category term="pyohio"></category><category term="pyohio2011"></category><category term="tutorial"></category></entry><entry><title>PyOhio 2011: Using Fabric - from a sysadmin's perspective</title><link href="https://pyvideo.org/pyohio-2011/pyohio-2011--using-fabric---from-a-sysadmin--39-s.html" rel="alternate"></link><published>2011-07-30T00:00:00+00:00</published><updated>2011-07-30T00:00:00+00:00</updated><author><name>Morgan Goose</name></author><id>tag:pyvideo.org,2011-07-30:pyohio-2011/pyohio-2011--using-fabric---from-a-sysadmin--39-s.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Using Fabric -- from a sysadmin's perspective&lt;/p&gt;
&lt;p&gt;Presented by Morgan Goose&lt;/p&gt;
&lt;p&gt;Fabric is a great tool written in python for python devs. It allows you
to script remote interactions on a remote server and only requires ssh
and a shell on the remote host. It's commonly pigeonholed into a
deployment tool, but it can but used for more than just websites.&lt;/p&gt;
</summary><category term="fabric"></category><category term="pyohio"></category><category term="pyohio2011"></category></entry><entry><title>PyOhio 2011: Using pymc to cluster twitter users -- a noob's perspective</title><link href="https://pyvideo.org/pyohio-2011/pyohio-2011--using-pymc-to-cluster-twitter-users-.html" rel="alternate"></link><published>2011-07-30T00:00:00+00:00</published><updated>2011-07-30T00:00:00+00:00</updated><author><name>Timmy Wilson</name></author><id>tag:pyvideo.org,2011-07-30:pyohio-2011/pyohio-2011--using-pymc-to-cluster-twitter-users-.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Using pymc to cluster twitter users -- a noob's perspective&lt;/p&gt;
&lt;p&gt;Presented by Timmy Wilson&lt;/p&gt;
&lt;p&gt;Journey through the thoughts, hopes, and sad frustrations of an average
python developer trying to understand MCMC matrix factorization. I'll
work through a Python implementation of the paper &amp;quot;Bayesian
Probabilistic Matrix Factorization using Markov Chain Monte Carlo&amp;quot; and
talk about how it applies to clustering a Twitter adjacency matrix.&lt;/p&gt;
</summary><category term="pymc"></category><category term="pyohio"></category><category term="pyohio2011"></category></entry><entry><title>PyOhio 2011: Names, Objects, and Plummeting From The Cliff</title><link href="https://pyvideo.org/pyohio-2011/pyohio-2011-names-objects-and-plummeting-from.html" rel="alternate"></link><published>2011-07-30T00:00:00+00:00</published><updated>2011-07-30T00:00:00+00:00</updated><author><name>Brandon Rhodes</name></author><id>tag:pyvideo.org,2011-07-30:pyohio-2011/pyohio-2011-names-objects-and-plummeting-from.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Names, Objects, and Plummeting From The Cliff&lt;/p&gt;
&lt;p&gt;Presented by Brandon Craig Rhodes&lt;/p&gt;
&lt;p&gt;The assignment statement is often the second thing a new Python
programmer learns, right after the &amp;quot;print&amp;quot; statement - but the beginner
can get seriously bogged down in all of the concepts that assignment
involves! Using a simple analogy, this talk will tackle those issues
head-on.&lt;/p&gt;
</summary><category term="assignment"></category><category term="learningpython"></category><category term="pyohio"></category><category term="pyohio2011"></category></entry><entry><title>PyOhio 2011: Procedures, Objects, Reusability: "httplib", "urllib2", and Their Discontents</title><link href="https://pyvideo.org/pyohio-2011/pyohio-2011-procedures-objects-reusability-q.html" rel="alternate"></link><published>2011-07-30T00:00:00+00:00</published><updated>2011-07-30T00:00:00+00:00</updated><author><name>Brandon Rhodes</name></author><id>tag:pyvideo.org,2011-07-30:pyohio-2011/pyohio-2011-procedures-objects-reusability-q.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Procedures, Objects, Reusability: httplib, urllib2 and their discontents&lt;/p&gt;
&lt;p&gt;Presented by Brandon Craig Rhodes&lt;/p&gt;
&lt;p&gt;Python supports two major programming paradigms: procedures, and object
orientation. This talk will claim that, when it comes to code re-use,
these two paradigms are NOT created equal: because object-oriented
programming encourages the programmer to write methods that consider
everything else inside of &amp;quot;self&amp;quot; to be fair game, it encourages highly
coupled code that proves brittle when extended.&lt;/p&gt;
</summary><category term="codereuse"></category><category term="httplib"></category><category term="oop"></category><category term="programming"></category><category term="pyohio"></category><category term="pyohio2011"></category><category term="reuse"></category><category term="self"></category><category term="urllib2"></category></entry><entry><title>PyOhio 2011: Squinting at Python Objects</title><link href="https://pyvideo.org/pyohio-2011/pyohio-2011-squinting-at-python-objects.html" rel="alternate"></link><published>2011-07-30T00:00:00+00:00</published><updated>2011-07-30T00:00:00+00:00</updated><author><name>Brandon Rhodes</name></author><id>tag:pyvideo.org,2011-07-30:pyohio-2011/pyohio-2011-squinting-at-python-objects.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Squinting at Python Objects&lt;/p&gt;
&lt;p&gt;Presented by Brandon Craig Rhodes&lt;/p&gt;
&lt;p&gt;Python classes can gain attributes as if by magic. Thanks to properties,
descriptors, and (if all else fails) &lt;strong&gt;getattr&lt;/strong&gt;() and
&lt;strong&gt;getattribute&lt;/strong&gt;(), the attempt to access obj.something can result in
arbitrary code execution. If you are wondering how your Python program
is using memory, this can result in a problem: each time you look to see
if something is there, it &lt;strong&gt;is&lt;/strong&gt;, because it is pulled in dynamically
the moment you look for it. In this talk, you will learn how to prod
Python objects gently, and hopefully learn their secrets - and their
memory usage - without actually invoking code.&lt;/p&gt;
</summary><category term="descriptors"></category><category term="getattr"></category><category term="getattribute"></category><category term="optimizing"></category><category term="properties"></category><category term="pyohio"></category><category term="pyohio2011"></category></entry></feed>