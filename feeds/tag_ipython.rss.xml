<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Wed, 10 Jul 2019 00:00:00 +0000</lastBuildDate><item><title>Wait, IPython can do that?!</title><link>https://pyvideo.org/europython-2019/wait-ipython-can-do-that.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;I've been programming in Python for over 7 years. And from the time
someone introduced me to IPython, it immediately became my default
Python REPL. I enjoyed the syntax highlighting, code completion or the
instant access to the documentation. Over the years, I've picked up more
and more tricks that IPython could do: embedding IPython sessions,
starting IPython automatically when a test fails, taking advantage of
the startup files, not to mention all the various magic functions.&lt;/p&gt;
&lt;p&gt;It took me some time to discover all those features (if there is one
thing I would like you to take away from this talk, it’s that reading
the documentation of a tool that you are using &lt;em&gt;every day&lt;/em&gt; is probably a
good idea) and in this talk, I will give an overview of what you can do
with IPython REPL.&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Some of the things I will talk about:&lt;/div&gt;
&lt;div class="line"&gt;- Documentation with ? and ??, running shell functions in IPython,
magic functions&lt;/div&gt;
&lt;div class="line"&gt;- Profiles, startup files, configuration file, kernels, and extensions&lt;/div&gt;
&lt;div class="line"&gt;- How to better use IPython for debugging&lt;/div&gt;
&lt;div class="line"&gt;- How to use IPython for profiling&lt;/div&gt;
&lt;div class="line"&gt;- Alternatives to IPython REPL&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This talk is for you if you are a casual user of IPython - you know some
of its features, but maybe not all of them and instead of reading
through the documentation, you would prefer to see someone giving an
overview of IPython features and how you can use them.&lt;/p&gt;
&lt;p&gt;This talk is NOT for you if you are up to date with IPython
documentation and you think you know most of its features.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sebastian Witowski</dc:creator><pubDate>Wed, 10 Jul 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-07-10:europython-2019/wait-ipython-can-do-that.html</guid><category>Best Practice</category><category>Development</category><category>Ipython</category><category>Tooling</category><category>iPython</category></item><item><title>Wait, IPython can do that?!</title><link>https://pyvideo.org/europython-2019/wait-ipython-can-do-that.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;I've been programming in Python for over 7 years. And from the time
someone introduced me to IPython, it immediately became my default
Python REPL. I enjoyed the syntax highlighting, code completion or the
instant access to the documentation. Over the years, I've picked up more
and more tricks that IPython could do: embedding IPython sessions,
starting IPython automatically when a test fails, taking advantage of
the startup files, not to mention all the various magic functions.&lt;/p&gt;
&lt;p&gt;It took me some time to discover all those features (if there is one
thing I would like you to take away from this talk, it’s that reading
the documentation of a tool that you are using &lt;em&gt;every day&lt;/em&gt; is probably a
good idea) and in this talk, I will give an overview of what you can do
with IPython REPL.&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Some of the things I will talk about:&lt;/div&gt;
&lt;div class="line"&gt;- Documentation with ? and ??, running shell functions in IPython,
magic functions&lt;/div&gt;
&lt;div class="line"&gt;- Profiles, startup files, configuration file, kernels, and extensions&lt;/div&gt;
&lt;div class="line"&gt;- How to better use IPython for debugging&lt;/div&gt;
&lt;div class="line"&gt;- How to use IPython for profiling&lt;/div&gt;
&lt;div class="line"&gt;- Alternatives to IPython REPL&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This talk is for you if you are a casual user of IPython - you know some
of its features, but maybe not all of them and instead of reading
through the documentation, you would prefer to see someone giving an
overview of IPython features and how you can use them.&lt;/p&gt;
&lt;p&gt;This talk is NOT for you if you are up to date with IPython
documentation and you think you know most of its features.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sebastian Witowski</dc:creator><pubDate>Wed, 10 Jul 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-07-10:europython-2019/wait-ipython-can-do-that.html</guid><category>Best Practice</category><category>Development</category><category>Ipython</category><category>Tooling</category><category>iPython</category></item><item><title>Never get in a battle of bits without ammunition.</title><link>https://pyvideo.org/europython-2013/never-get-in-a-battle-of-bits-without-ammunition.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Enrico Franchi</dc:creator><pubDate>Thu, 04 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-04:europython-2013/never-get-in-a-battle-of-bits-without-ammunition.html</guid><category>cython</category><category>C/C++</category><category>nosql</category><category>mongodb</category><category>numeric</category><category>iPython</category><category>optimization</category><category>Algorithms</category><category>data-analysis</category><category>hpc</category><category>performance</category><category>scientific-computing</category><category>numpy</category></item><item><title>Using iPython Notebook in the Classroom</title><link>https://pyvideo.org/europython-2013/using-ipython-notebook-in-the-classroom.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Anders Lehmann</dc:creator><pubDate>Thu, 04 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-04:europython-2013/using-ipython-notebook-in-the-classroom.html</guid><category>Pedagogical learning</category><category>iPython</category><category>education</category><category>physics</category><category>Learning environment</category><category>interactive</category></item><item><title>Will ipython replace bash?</title><link>https://pyvideo.org/europython-2013/will-ipython-replace-bash.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;While python is widely used for automating administration tasks, it’s
not still widely known and used between system administrators.&lt;/p&gt;
&lt;p&gt;iPython is an interactive python shell that embeds bash functionalities.
We’ll show how to :&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;replace some bash tasks avoiding common errors&lt;/li&gt;
&lt;li&gt;resembling some bash behaviour&lt;/li&gt;
&lt;li&gt;create testing (nose) and monitoring scripts&lt;/li&gt;
&lt;li&gt;reuse existing python modules (eg.iotop, psutil, …)&lt;/li&gt;
&lt;li&gt;use flask to expose those scripts on HTTP&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Wanna see something specific? Leave a comment! We’ll tune the talk
agenda on the audience interests!&lt;/p&gt;
&lt;div class="section" id="there-is-also-a-teaser-video"&gt;
&lt;h4&gt;There is also a teaser video.&lt;/h4&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Roberto Polli</dc:creator><pubDate>Wed, 03 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-03:europython-2013/will-ipython-replace-bash.html</guid><category>flask</category><category>testing</category><category>devops</category><category>sysadmin</category><category>linux</category><category>iPython</category><category>bash</category></item><item><title>Building a custom wrapper kernel for IPython</title><link>https://pyvideo.org/pycon-singapore-2015/building-a-custom-wrapper-kernel-for-ipython.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Have you ever used IPython and wondered how it worked? And if you can build your own kernel to use with the great IPython tools like notebook? This talk will walk you through how you can do that with an example kernel built by me.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Hari Allamraju</dc:creator><pubDate>Fri, 19 Jun 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-06-19:pycon-singapore-2015/building-a-custom-wrapper-kernel-for-ipython.html</guid><category>ipython</category></item><item><title>Jupyter: if you don't use it yet you're doing wrong</title><link>https://pyvideo.org/pycon-italia-2017/jupyter-if-you-dont-use-it-yet-youre-doing-wrong.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Have you ever heard about Jupyter Notebook ? It’s like Python REPL on
steroids !&lt;/p&gt;
&lt;p&gt;In this talk I will introduce the Jupyter project, the libraries behind
this project and how you can use Jupyter Notebook for a lot of
activities like fast prototyping, data science, education and so on !&lt;/p&gt;
&lt;p&gt;The talk will be an introduction, Beginners are welcome !&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Christian Barra</dc:creator><pubDate>Sat, 08 Apr 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-04-08:pycon-italia-2017/jupyter-if-you-dont-use-it-yet-youre-doing-wrong.html</guid><category>iPython</category><category>Data-Scientist</category><category>Jupyter</category><category>pydata</category></item><item><title>Hackeando el notebook de ipython</title><link>https://pyvideo.org/pycon-es-2014/hackeando-el-notebook-de-ipython.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;El notebook de IPython se ha convertido en una herramienta omnipresente entre el mundo científico (y parte del mundo no científico) al haber abierto la posibilidad de poner los datos y el código dentro de un contexto que permite visualizar historias.&lt;/p&gt;
&lt;p&gt;En esta charla veremos mediante ejemplos cómo podemos modificar el notebook, cómo podemos crear nuestras propias extensiones, cómo podemos crear nuestras propias funciones mágicas, cómo podemos manipular las salidas para convertir el notebook a otros formatos,...&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kiko Correoso</dc:creator><pubDate>Mon, 06 Apr 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-04-06:pycon-es-2014/hackeando-el-notebook-de-ipython.html</guid><category>ipython</category></item><item><title>Por qué Charles Xavier debe cambiar Cerebro por Python</title><link>https://pyvideo.org/pycon-es-2014/por-que-charles-xavier-debe-cambiar-cerebro-por-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Los buenos de Marvel han liberado su API, ¿qué quiere decir esto? ¡Un montón de datos para jugar!&lt;/p&gt;
&lt;p&gt;La premisa que queremos estudiar mediante el análisis de los datos disponibles a través de la API de Marvel es la variedad de personajes femeninos y de personajes de minorías culturales y raciales (en occidente) que hay en el mundo Marvel así como los roles en los que están representados más frecuentemente. ¿De qué color dirías que tiene el pelo el personaje típico de Marvel? ¿Y cuál es su nacionalidad?&lt;/p&gt;
&lt;p&gt;El objetivo de la charla es enseñar las distintas herramientas de las que disponemos los científicos para el análisis de datos. Usando ipython Notebook veremos como cargar datos y extraer información de ellos usando pandas, cómo dibujar gráficas con matplotlib.&lt;/p&gt;
&lt;p&gt;Además aplicaremos Machine Learning para distinguir clases (iris, spam,...) aplicado a la muestra de personajes de Marvel que hay disponibles a través de la citada API, para ello utilizaremos el toolkit scikit-learn.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://nbviewer.ipython.org/github/mshopper/aurora/blob/master/Aurora.ipynb"&gt;http://nbviewer.ipython.org/github/mshopper/aurora/blob/master/Aurora.ipynb&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mayte Gimenez</dc:creator><pubDate>Mon, 06 Apr 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-04-06:pycon-es-2014/por-que-charles-xavier-debe-cambiar-cerebro-por-python.html</guid><category>marvel api</category><category>ipython</category><category>notebook</category><category>machine learning</category></item><item><title>Signal Processing and Communications Teaching and Research Using IPython Notebook</title><link>https://pyvideo.org/scipy-2015/signal-processing-and-communications-teaching-and-research-using-ipython-notebook.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mark Wickert</dc:creator><pubDate>Wed, 08 Jul 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-07-08:scipy-2015/signal-processing-and-communications-teaching-and-research-using-ipython-notebook.html</guid><category>ipython</category></item><item><title>PyGotham 2011: Tmux + IPython = Awesome</title><link>https://pyvideo.org/pygotham-2011/pygotham-2011--tmux---ipython---awesome.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;This is a two part class aimed at expanding a developer's toolset with
both tmux and IPython. In the first half, we will learn about tmux. I
will first explain its client-server model and general architecture,
compare it to GNU screen, and show some use cases. Then, we will start
using it, create a customized profile, and solve a simple distributed
computing problem with tmux. In the second half of this class, we will
start using IPython. I will first explain what it is and review
different use cases. Then, we will start using some basic commands,
customize our profile and aliases, integrate python and shell scripting
into the same code, and, time permitting, see some of the interactive
scientific computing and interactive distributed computing
possibilities. If you have one, bring a laptop with tmux and IPython
already installed.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Gaudio</dc:creator><pubDate>Fri, 16 Sep 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-09-16:pygotham-2011/pygotham-2011--tmux---ipython---awesome.html</guid><category>gnuscreen</category><category>ipython</category><category>pygotham</category><category>pygotham2011</category><category>tmux</category></item><item><title>Beginner's Guide to Machine Learning Competitions</title><link>https://pyvideo.org/pytexas-2015/beginners-guide-to-machine-learning-competitions.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This tutorial will offer a hands-on introduction to machine learning and
the process of applying these concepts in a Kaggle competition. We will
introduce attendees to machine learning concepts, examples and flows,
while building up their skills to solve an actual problem. At the end of
the tutorial attendees will be familiar with a real data science flow:
feature preparation, modeling, optimization and validation.&lt;/p&gt;
&lt;p&gt;Packages used in the tutorial will include: IPython notebook,
scikit-learn, pandas and NLTK. We’ll use IPython notebook for
interactive exploration and visualization, in order to gain a basic
understanding of what’s in the data. From there, we’ll extract features
and train a model using scikit-learn. This will bring us to our first
submission. We’ll then learn how to structure the problem for offline
evaluation and use scikit-learn’s clean model API to train many models
simultaneously and perform feature selection and hyperparameter
optimization.&lt;/p&gt;
&lt;p&gt;At the end of session, attendees will have time to work on their own to
improve their models and make multiple submissions to get to the top of
the leaderboard, just like in a real competition. Hopefully attendees
will not only leave the tutorial having learned the core data science
concepts and flow, but also having had a great time doing it.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Christine Doig</dc:creator><pubDate>Fri, 09 Oct 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-10-09:pytexas-2015/beginners-guide-to-machine-learning-competitions.html</guid><category>tutorial</category><category>machine learning</category><category>nltk</category><category>pandas</category><category>scikit-learn</category><category>ipython</category></item><item><title>Fundamentals of the IPython Display Architecture+Interactive Widgets</title><link>https://pyvideo.org/scipy-2014/fundamentals-of-the-ipython-display-architecture.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;In this tutorial, attendees will learn how to use the IPython Notebook’s
display architecture and interactive widgets. As we cover these topics,
attendees will learn about the underlying architecture, how to use
IPython’s existing APIs, and how to extend them for their own purposes.
This tutorial will not cover the basics of the IPython Notebook.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;IPython provides an architecture for interactive computing. The IPython
Notebook is a web-based interactive computing environment for
exploratory and reproducible computing. With the IPython Notebook, users
create documents, called notebooks, that contain formatted text,
figures, equations, programming code, and code output.&lt;/p&gt;
&lt;p&gt;The IPython Notebook generalizes the notion of output to include images,
LaTeX, video, HTML, JavaScript, PDF, etc. These output formats are
displayed in the Notebook using IPython’s display architecture, embedded
in notebook documents and rendered on the IPython Notebook Viewer. By
taking advantage of these rich output formats users can build notebooks
that include rich representations and visualizations of data and other
content. In this tutorial, we will describe the display architecture,
existing Python APIs and libraries that already use it (mpld3, vincent,
polotly, etc.), and how users can define custom display logic for their
own Python objects.&lt;/p&gt;
&lt;p&gt;As of version 2.0, the IPython Notebook also includes interactive
JavaScript widgets. These widgets provide a way for users to interact
with UI controls in the browser that are tied to Python code in running
in the kernel. We will begin by covering the highest-level API for these
widgets, “interact,” which automatically builds a user interface for
exploring a Python function. Next we will describe the lower-level
widget objects that are included with IPython: sliders, text boxes,
buttons, etc. However, the full potential of the widget framework lies
with its extensibility. Users can create their own custom widgets using
Python, JavaScript, HTML and CSS. We will conclude with a detailed look
at custom widget creation.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Brian Granger</dc:creator><pubDate>Wed, 09 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-09:scipy-2014/fundamentals-of-the-ipython-display-architecture.html</guid><category>ipython</category></item><item><title>Interactive Parallel Computing with IPython Part 1</title><link>https://pyvideo.org/scipy-2014/interactive-parallel-computing-with-ipython-part.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Learn about interactive parallel computing in IPython.parallel, with
examples including parallel image processing, machine learning, and
physical simulations. IPython provides an easy way to interact with your
multicore laptop or compute cluster.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;IPython provides tools for interactive exploration of code and data.
IPython.parallel is the part of IPython that enables an interactive
model for parallel execution, and aims to make distributing your work on
a multicore computer, local clusters or cloud services such as AWS or MS
Azure simple and straightforward. The tutorial will cover how to do
interactive and asynchronous parallel computing with IPython, and how to
get the most out of your IPython cluster. Some of IPython’s novel
interactive features will be demonstrated, such as automatically
parallelizing code with magics in the IPython Notebook and interactive
debugging of remote execution. Examples covered will include parallel
image processing, machine learning, and physical simulations, with
exercises to solve along the way.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Introduction to IPython.parallel&lt;/li&gt;
&lt;li&gt;Deploying IPython&lt;/li&gt;
&lt;li&gt;Using DirectViews and LoadBalancedViews&lt;/li&gt;
&lt;li&gt;The basic model for execution&lt;/li&gt;
&lt;li&gt;Getting to know your IPython cluster:&lt;/li&gt;
&lt;li&gt;Working with remote namespaces&lt;/li&gt;
&lt;li&gt;AsyncResult: the API for asynchronous execution&lt;/li&gt;
&lt;li&gt;Interacting with incomplete results. Remember, it’s about
interactivity&lt;/li&gt;
&lt;li&gt;Interactive parallel plotting&lt;/li&gt;
&lt;li&gt;More advanced topics:&lt;/li&gt;
&lt;li&gt;Using IPython.parallel with traditional (MPI) parallel programs&lt;/li&gt;
&lt;li&gt;Debugging parallel code&lt;/li&gt;
&lt;li&gt;Minimizing data movement&lt;/li&gt;
&lt;li&gt;Task dependencies&lt;/li&gt;
&lt;li&gt;Caveats and tuning tips for IPython.parallel&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Fernando Pérez</dc:creator><pubDate>Wed, 09 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-09:scipy-2014/interactive-parallel-computing-with-ipython-part.html</guid><category>ipython</category></item><item><title>Interactive Parallel Computing with IPython Part 2</title><link>https://pyvideo.org/scipy-2014/interactive-parallel-computing-with-ipython-part-0.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Learn about interactive parallel computing in IPython.parallel, with
examples including parallel image processing, machine learning, and
physical simulations. IPython provides an easy way to interact with your
multicore laptop or compute cluster.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;IPython provides tools for interactive exploration of code and data.
IPython.parallel is the part of IPython that enables an interactive
model for parallel execution, and aims to make distributing your work on
a multicore computer, local clusters or cloud services such as AWS or MS
Azure simple and straightforward. The tutorial will cover how to do
interactive and asynchronous parallel computing with IPython, and how to
get the most out of your IPython cluster. Some of IPython’s novel
interactive features will be demonstrated, such as automatically
parallelizing code with magics in the IPython Notebook and interactive
debugging of remote execution. Examples covered will include parallel
image processing, machine learning, and physical simulations, with
exercises to solve along the way.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Introduction to IPython.parallel&lt;/li&gt;
&lt;li&gt;Deploying IPython&lt;/li&gt;
&lt;li&gt;Using DirectViews and LoadBalancedViews&lt;/li&gt;
&lt;li&gt;The basic model for execution&lt;/li&gt;
&lt;li&gt;Getting to know your IPython cluster:&lt;/li&gt;
&lt;li&gt;Working with remote namespaces&lt;/li&gt;
&lt;li&gt;AsyncResult: the API for asynchronous execution&lt;/li&gt;
&lt;li&gt;Interacting with incomplete results. Remember, it’s about
interactivity&lt;/li&gt;
&lt;li&gt;Interactive parallel plotting&lt;/li&gt;
&lt;li&gt;More advanced topics:&lt;/li&gt;
&lt;li&gt;Using IPython.parallel with traditional (MPI) parallel programs&lt;/li&gt;
&lt;li&gt;Debugging parallel code&lt;/li&gt;
&lt;li&gt;Minimizing data movement&lt;/li&gt;
&lt;li&gt;Task dependencies&lt;/li&gt;
&lt;li&gt;Caveats and tuning tips for IPython.parallel&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Fernando Pérez</dc:creator><pubDate>Wed, 09 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-09:scipy-2014/interactive-parallel-computing-with-ipython-part-0.html</guid><category>ipython</category></item><item><title>Interactive Parallel Computing with IPython Part 3</title><link>https://pyvideo.org/scipy-2014/interactive-parallel-computing-with-ipython-part-1.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Learn about interactive parallel computing in IPython.parallel, with
examples including parallel image processing, machine learning, and
physical simulations. IPython provides an easy way to interact with your
multicore laptop or compute cluster.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;IPython provides tools for interactive exploration of code and data.
IPython.parallel is the part of IPython that enables an interactive
model for parallel execution, and aims to make distributing your work on
a multicore computer, local clusters or cloud services such as AWS or MS
Azure simple and straightforward. The tutorial will cover how to do
interactive and asynchronous parallel computing with IPython, and how to
get the most out of your IPython cluster. Some of IPython’s novel
interactive features will be demonstrated, such as automatically
parallelizing code with magics in the IPython Notebook and interactive
debugging of remote execution. Examples covered will include parallel
image processing, machine learning, and physical simulations, with
exercises to solve along the way.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Introduction to IPython.parallel&lt;/li&gt;
&lt;li&gt;Deploying IPython&lt;/li&gt;
&lt;li&gt;Using DirectViews and LoadBalancedViews&lt;/li&gt;
&lt;li&gt;The basic model for execution&lt;/li&gt;
&lt;li&gt;Getting to know your IPython cluster:&lt;/li&gt;
&lt;li&gt;Working with remote namespaces&lt;/li&gt;
&lt;li&gt;AsyncResult: the API for asynchronous execution&lt;/li&gt;
&lt;li&gt;Interacting with incomplete results. Remember, it’s about
interactivity&lt;/li&gt;
&lt;li&gt;Interactive parallel plotting&lt;/li&gt;
&lt;li&gt;More advanced topics:&lt;/li&gt;
&lt;li&gt;Using IPython.parallel with traditional (MPI) parallel programs&lt;/li&gt;
&lt;li&gt;Debugging parallel code&lt;/li&gt;
&lt;li&gt;Minimizing data movement&lt;/li&gt;
&lt;li&gt;Task dependencies&lt;/li&gt;
&lt;li&gt;Caveats and tuning tips for IPython.parallel&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Fernando Pérez</dc:creator><pubDate>Wed, 09 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-09:scipy-2014/interactive-parallel-computing-with-ipython-part-1.html</guid><category>ipython</category></item><item><title>Teaching Numerical Methods with IPython Notebooks, Part 1</title><link>https://pyvideo.org/scipy-2014/teaching-numerical-methods-part-1.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;This tutorial will give participants an introduction to the use of
IPython notebooks in teaching numerical methods or scientific computing,
at the level of an undergraduate or graduate university course. Prior
familiarity with notebooks is not necessary. Participants will create an
interactive notebook that explains and helps students to implement and
explore a numerical algorithm.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This tutorial is targeted to those who are or soon will be teaching
numerical methods or scientific computing and are interested in using
Python as the programming language for their course. The tutorial will
be useful both to academics teaching university courses and those in
industry who run training sessions. No prior knowledge of the IPython
notebook is necessary, but participants should have some familiarity
with Python, Numpy, and Matplotlib.&lt;/p&gt;
&lt;p&gt;IPython notebooks are an excellent medium for teaching nuemrical methods
since they can include both mathematical explanations and executable
code in a single document. The tutorial will begin with an introduction
to the IPython notebook, emphasizing how to overcome aspects that can be
confusing to students. Next we will go over available free resources for&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;ensuring that students have a suitable computing environment, using
either a cloud platform or a packaged distribution&lt;/li&gt;
&lt;li&gt;distributing and collecting notebooks&lt;/li&gt;
&lt;li&gt;converting notebooks to other formats that may be useful in a course&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We will also review a number of excellent existing resources containing
IPython notebooks for numerical methods courses. Using these notebooks
as examples, we will discuss how to design effective notebooks for
teaching, including&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;typesetting mathematical equations and expressions using LaTeX&lt;/li&gt;
&lt;li&gt;Formatting, referencing, and layout using Markdown&lt;/li&gt;
&lt;li&gt;inserting complete or partial code snippets&lt;/li&gt;
&lt;li&gt;embedding figures and other media&lt;/li&gt;
&lt;li&gt;embedding interactive widgets&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We will briefly discuss different approaches to using IPython notebooks
in a course, including their use as the basis for&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;homework assignments&lt;/li&gt;
&lt;li&gt;short activities during a class session&lt;/li&gt;
&lt;li&gt;longer laboratory sessions&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Finally, participants will be asked to develop, individually or in small
groups, a notebook of their own that could be used as an assignment,
classroom exercise, or lecture.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Aron Ahmadia</dc:creator><pubDate>Wed, 09 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-09:scipy-2014/teaching-numerical-methods-part-1.html</guid><category>ipython</category><category>numerical methods</category></item><item><title>Teaching Numerical Methods with IPython Notebooks, Part 3</title><link>https://pyvideo.org/scipy-2014/teaching-numerical-methods-part-3.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;This tutorial will give participants an introduction to the use of
IPython notebooks in teaching numerical methods or scientific computing,
at the level of an undergraduate or graduate university course. Prior
familiarity with notebooks is not necessary. Participants will create an
interactive notebook that explains and helps students to implement and
explore a numerical algorithm.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This tutorial is targeted to those who are or soon will be teaching
numerical methods or scientific computing and are interested in using
Python as the programming language for their course. The tutorial will
be useful both to academics teaching university courses and those in
industry who run training sessions. No prior knowledge of the IPython
notebook is necessary, but participants should have some familiarity
with Python, Numpy, and Matplotlib.&lt;/p&gt;
&lt;p&gt;IPython notebooks are an excellent medium for teaching nuemrical methods
since they can include both mathematical explanations and executable
code in a single document. The tutorial will begin with an introduction
to the IPython notebook, emphasizing how to overcome aspects that can be
confusing to students. Next we will go over available free resources for&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;ensuring that students have a suitable computing environment, using
either a cloud platform or a packaged distribution&lt;/li&gt;
&lt;li&gt;distributing and collecting notebooks&lt;/li&gt;
&lt;li&gt;converting notebooks to other formats that may be useful in a course&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We will also review a number of excellent existing resources containing
IPython notebooks for numerical methods courses. Using these notebooks
as examples, we will discuss how to design effective notebooks for
teaching, including&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;typesetting mathematical equations and expressions using LaTeX&lt;/li&gt;
&lt;li&gt;Formatting, referencing, and layout using Markdown&lt;/li&gt;
&lt;li&gt;inserting complete or partial code snippets&lt;/li&gt;
&lt;li&gt;embedding figures and other media&lt;/li&gt;
&lt;li&gt;embedding interactive widgets&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We will briefly discuss different approaches to using IPython notebooks
in a course, including their use as the basis for&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;homework assignments&lt;/li&gt;
&lt;li&gt;short activities during a class session&lt;/li&gt;
&lt;li&gt;longer laboratory sessions&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Finally, participants will be asked to develop, individually or in small
groups, a notebook of their own that could be used as an assignment,
classroom exercise, or lecture.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Aron Ahmadia</dc:creator><pubDate>Wed, 09 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-09:scipy-2014/teaching-numerical-methods-part-3.html</guid><category>ipython</category><category>numerical methods</category></item><item><title>Teaching Numerical Methods with IPython Notebooks 2</title><link>https://pyvideo.org/scipy-2014/teaching-numerical-methods-with-ipython-notebooks.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;This tutorial will give participants an introduction to the use of
IPython notebooks in teaching numerical methods or scientific computing,
at the level of an undergraduate or graduate university course. Prior
familiarity with notebooks is not necessary. Participants will create an
interactive notebook that explains and helps students to implement and
explore a numerical algorithm.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This tutorial is targeted to those who are or soon will be teaching
numerical methods or scientific computing and are interested in using
Python as the programming language for their course. The tutorial will
be useful both to academics teaching university courses and those in
industry who run training sessions. No prior knowledge of the IPython
notebook is necessary, but participants should have some familiarity
with Python, Numpy, and Matplotlib.&lt;/p&gt;
&lt;p&gt;IPython notebooks are an excellent medium for teaching nuemrical methods
since they can include both mathematical explanations and executable
code in a single document. The tutorial will begin with an introduction
to the IPython notebook, emphasizing how to overcome aspects that can be
confusing to students. Next we will go over available free resources for&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;ensuring that students have a suitable computing environment, using
either a cloud platform or a packaged distribution&lt;/li&gt;
&lt;li&gt;distributing and collecting notebooks&lt;/li&gt;
&lt;li&gt;converting notebooks to other formats that may be useful in a course&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We will also review a number of excellent existing resources containing
IPython notebooks for numerical methods courses. Using these notebooks
as examples, we will discuss how to design effective notebooks for
teaching, including&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;typesetting mathematical equations and expressions using LaTeX&lt;/li&gt;
&lt;li&gt;Formatting, referencing, and layout using Markdown&lt;/li&gt;
&lt;li&gt;inserting complete or partial code snippets&lt;/li&gt;
&lt;li&gt;embedding figures and other media&lt;/li&gt;
&lt;li&gt;embedding interactive widgets&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We will briefly discuss different approaches to using IPython notebooks
in a course, including their use as the basis for&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;homework assignments&lt;/li&gt;
&lt;li&gt;short activities during a class session&lt;/li&gt;
&lt;li&gt;longer laboratory sessions&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Finally, participants will be asked to develop, individually or in small
groups, a notebook of their own that could be used as an assignment,
classroom exercise, or lecture.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Aron Ahmadia</dc:creator><pubDate>Wed, 09 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-09:scipy-2014/teaching-numerical-methods-with-ipython-notebooks.html</guid><category>ipython</category><category>numerical methods</category></item><item><title>ipython / notebook demo</title><link>https://pyvideo.org/chipy/ipython-notebook-demo.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;ipython was a big focus of Scipy: Fernando gave a keynote, Brian gave a
talk, and there was a tutorial.&lt;/p&gt;
&lt;p&gt;ipython appeals to a broad audience from beginners to advanced users.
&amp;quot;IDLE is awful and I basically learned Python using iPython&amp;quot; says Jason,
whose presentation will touch on the powerful features and extensibility
for advanced users.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jason Wirth</dc:creator><pubDate>Thu, 11 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-11:chipy/ipython-notebook-demo.html</guid><category>ipython</category></item><item><title>Data Herding: How to Shepherd Your Flock Through Valleys of Darkness</title><link>https://pyvideo.org/djangocon-us-2010/djangocon-2010--data-herding--how-to-shepherd-you.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Learn how to use common tools like the management shell,
django-extensions, and iPython to craft an effective workflow whether
you're building a new schema or migrating from old systems. We'll also
look at how to take advantage of the latest ORM features.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;The presentation would consist of walking through a few example
scenarios where one would deal with processing or converting data in
some manner. For example, migrating from a large legacy database often
brings a number of tedious problems. I would demonstrate how to work in
an iterative, repeatable style using the Django sql management commands,
a few iPython tricks, etc.&lt;/p&gt;
&lt;p&gt;Another demonstration would be showing a team workflow for South
migrations, illustrating how to deal with some common problems that crop
up in practice.&lt;/p&gt;
&lt;p&gt;The audience will leave with some solid techniques for dealing with a
few specific data management challenges. The unifying philosophy
throughout is to break large, difficult problems into small, repeatable
steps and audience members should also come away knowing how to select
tools that help them work in this style.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Brian Luft</dc:creator><pubDate>Tue, 07 Sep 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-09-07:djangocon-us-2010/djangocon-2010--data-herding--how-to-shepherd-you.html</guid><category>djangocon</category><category>djangocon2010</category><category>django-extensions</category><category>ipython</category><category>managementshell</category><category>orm</category></item></channel></rss>