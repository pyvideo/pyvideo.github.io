<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Sat, 04 May 2019 00:00:00 +0000</lastBuildDate><item><title>Machine Learning for Inventory Management</title><link>https://pyvideo.org/pycon-italia-2019/machine-learning-for-inventory-management.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Material forecast is the process of deciding which items to stock in the
inventory, how much, and when. Aim of the forecast is to increase parts
availability with the less possible impact on inventory, having enough
stock in the warehouse to ensure the business keeps moving but not
enough stock to drain its limited cash reserves. This decision process
is being profoundly revised in its foundational concepts, thanks to new
classification methodologies enabled by Machine Learning. We integrated
domain knowledge and ML to create a new classification and level setting
process, leveraging on 6 years of data and new statistical indicators
for demand patter. These new features are used to run the machine
learning algorithm that classify Make To Stock / Make To Order items in
a single flow approach. The validation phase is reduced at each
iteration as ML model can be re-trained to incorporate past validations,
increasing efficiency and performances. Level setting problem is
addressed benchmarking ML methods (Reinforcement Learning), Montecarlo
simulations and traditional statistical methodologies. Regarding RL and
Montecarlo we established punishments for letting an particular
inventory item run out of stock and we also punish the model for stock
too higher value for too long. For rewards, we primarily focus on
ordering items within a safe window before the demand. First application
of this new methodology brings a 20% reduction of inventory, without
impact on sales, and a workload reduction of about 70%.&lt;/p&gt;
&lt;p&gt;Feedback form: &lt;a class="reference external" href="https://python.it/feedback-1554"&gt;https://python.it/feedback-1554&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;Saturday 4 May&lt;/strong&gt; at 12:15 &lt;a class="reference external" href="/en/sprints/schedule/pycon10/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Laura De Stefanis</dc:creator><pubDate>Sat, 04 May 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-05-04:pycon-italia-2019/machine-learning-for-inventory-management.html</guid><category>logistics</category><category>clustering</category><category>statistics</category><category>Python</category><category>Big-Data</category><category>gestionali</category><category>django</category><category>supplychain</category><category>sql</category><category>Artificial Intelligence</category></item><item><title>Designing Large-Scale Applications in Python</title><link>https://pyvideo.org/europython-2013/designing-large-scale-applications-in-python.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Marc-André Lemburg</dc:creator><pubDate>Thu, 04 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-04:europython-2013/designing-large-scale-applications-in-python.html</guid><category>business</category><category>database</category><category>integration</category><category>scalability</category><category>servers</category><category>refactoring</category><category>application-design</category><category>design</category><category>software-engineering</category><category>framework</category><category>sql</category><category>best-practices</category><category>architecture</category></item><item><title>Python and PostgreSQL for Huge Data Warehouses</title><link>https://pyvideo.org/europython-2013/python-and-postgresql-for-huge-data-warehouses.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Hannu Krosing</dc:creator><pubDate>Thu, 04 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-04:europython-2013/python-and-postgresql-for-huge-data-warehouses.html</guid><category>postgresql</category><category>nosql</category><category>parallelization</category><category>bigdata</category><category>scalability</category><category>pl/python</category><category>olap</category><category>optimization</category><category>architecture</category><category>sql</category><category>performance</category></item><item><title>Data model patterns with SQLAlchemy</title><link>https://pyvideo.org/europython-2013/data-model-patterns-with-sqlalchemy.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Erik Janssens</dc:creator><pubDate>Wed, 03 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-03:europython-2013/data-model-patterns-with-sqlalchemy.html</guid><category>sql</category><category>sqlalchemy</category><category>metaprogramming</category><category>orm</category><category>database</category></item><item><title>pl/python now as powerful as C</title><link>https://pyvideo.org/europython-2013/plpython-now-as-powerful-as-c.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Hannu Krosing</dc:creator><pubDate>Wed, 03 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-03:europython-2013/plpython-now-as-powerful-as-c.html</guid><category>postgresql</category><category>nosql</category><category>database</category><category>mongodb</category><category>bigdata</category><category>pl/python</category><category>optimization</category><category>sql</category><category>Full Text Search</category></item><item><title>Scalable SQL Patterns - Part 1</title><link>https://pyvideo.org/europython-2013/scalable-sql-patterns-part-1.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">David Cramer</dc:creator><pubDate>Wed, 03 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-03:europython-2013/scalable-sql-patterns-part-1.html</guid><category>web</category><category>postgresql</category><category>scalability</category><category>sql</category></item><item><title>Scalable SQL Patterns - Part 2</title><link>https://pyvideo.org/europython-2013/scalable-sql-patterns-part-2.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">David Cramer</dc:creator><pubDate>Wed, 03 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-03:europython-2013/scalable-sql-patterns-part-2.html</guid><category>web</category><category>postgresql</category><category>scalability</category><category>sql</category></item><item><title>PostgreSQL is Web-Scale (Really :) )</title><link>https://pyvideo.org/europython-2013/postgresql-is-web-scale-really.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk I show you how to set up a python and PostgreSQL based
system which is easy to set up and easy to scale, provides ACID
guarantees where they are needed and delays time-consistency between
unrelated objects for scalability and availability where the latter are
deemed more important.&lt;/p&gt;
&lt;p&gt;The best thing is that this kind of scalability work for both OLTP and
OLAP workloads, so with some planning you can have just a single large
“database” which can take almost any type of load.&lt;/p&gt;
&lt;p&gt;Also, if you hate SQL, you can do all the OLTP stuff in a pythonic way
using an automagically generated ORM layer inside the database, near the
data. If you are really masochistic, you can use the same ORM also for
map-reduce type distributed data processing, though on this side the
small effort of learning SQL usually pays off when queries get more
complex. But as I said, everything runs inside the databse, near the
data and thus even the ORM &amp;amp; map-reduce analytics works fast.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Hannu Krosing</dc:creator><pubDate>Tue, 02 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-02:europython-2013/postgresql-is-web-scale-really.html</guid><category>postgresql</category><category>nosql</category><category>datamining</category><category>parallelization</category><category>distributed</category><category>bigdata</category><category>scalability</category><category>pl/python</category><category>olap</category><category>optimization</category><category>orm</category><category>sql</category><category>performance</category></item><item><title>Serverless SQL queries from Python with AWS Athena...or power to Data Scientists!</title><link>https://pyvideo.org/pycon-italia-2018/serverless-sql-queries-from-python-with-aws-athenaor-power-to-data-scientists.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Audience&lt;/strong&gt; : beginner&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt; The goal of this talk is to explain how Athena, a
serverless sql-like query service provided by Amazon’s AWS, combined
with a Python library called PyAthena, made it possible to store and
query as much data as needed with low costs, high performances and in a
Pythonesque way.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt; We found ourselves in a sticky situation: for monitoring
and debugging reasons we had the need to store a large amount of data
(around 200 million rows), trying not to spend the entire year’s budget
but still managing to efficiently query the data in an interactive
setting. With such Big Data, we could not simply resort to Data Science
tools like Pandas and hope for the best. Our first idea was to just
shove it all in our Postgres DB: since both data and database were
stored on Amazon’s AWS infrastructure, all we had to do was to write
ad-hoc import and update queries. Sadly, our poor Postgres machine took
the hit, and was not able to respond to our requirements without greatly
increasing our costs. Then we found out about Athena: a serverless,
Presto-based, sql compliant database, that reads directly from S3
folders and creates a virtual table on which you can run sql queries.
Using Python’s Athena library (PyAthena) our query execution time
dropped from hours to seconds, we simplified the infrastructure and
decreased our costs, without the need to pay and maintain a dedicated
server. In this talk we will show why Athena was the right solution for
our use case and present its Python library with its functionalities.&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;domenica 22 aprile&lt;/strong&gt; at 15:30 &lt;a class="reference external" href="/p3/schedule/pycon9/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Daniela Scardi</dc:creator><pubDate>Sun, 22 Apr 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-04-22:pycon-italia-2018/serverless-sql-queries-from-python-with-aws-athenaor-power-to-data-scientists.html</guid><category>Python</category><category>aws</category><category>storage</category><category>cloud</category><category>sql</category></item><item><title>La sicurezza dei database MySQL in ottica GDPR</title><link>https://pyvideo.org/pycon-italia-2018/la-sicurezza-dei-database-mysql-in-ottica-gdpr.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Il 25 maggio 2018 la GDPR diventerà legge per tutte le aziende che
trattano dati sensibili di cittadini europei, a prescindere dalla
nazionalità o dalle leggi locali: in pratica tutte le aziende private
italiane, nessuna esclusa.&lt;/p&gt;
&lt;p&gt;Questa presentazione è quindi dedicata a chi si occupa di sicurezza e
che dovrà fare i conti con questa normativa, ma non da un punto di vista
legale, bensì tecnico: come posso aderire alle richieste se uso il
database MySQL?&lt;/p&gt;
&lt;p&gt;Quindi dopo un breve introduzione alla GDPR, ci concentreremo su come
MySQL possa soddisfarne le richieste (con riferimento ai vari articoli)
così da fornire la conoscenza che permetta di scegliere le strategie
migliori per il proprio business.&lt;/p&gt;
&lt;p&gt;Questa sessione è indicata per chiunque lavori con MySQL. Saranno date
per scontate solo le conoscenze di base dei database, ma chi ha già
conoscenza di MySQL potrà apprezzarne a pieno le opzioni.&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;venerdì 20 aprile&lt;/strong&gt; at 14:30 &lt;a class="reference external" href="/p3/schedule/pycon9/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Marco Carlessi</dc:creator><pubDate>Fri, 20 Apr 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-04-20:pycon-italia-2018/la-sicurezza-dei-database-mysql-in-ottica-gdpr.html</guid><category>Cryptography</category><category>sql</category><category>architecture</category><category>mysql</category><category>best-practices</category><category>security</category></item><item><title>weppy: the web framework for humans</title><link>https://pyvideo.org/pycon-italia-2017/weppy-the-web-framework-for-humans.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Why another python web framework? Do we really need to innovate the
Django and Flask scene? Could we? This talk will address all these
questions, introducing weppy: the full stack python web framework
designed with simplicity in mind.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Giovanni Barillari</dc:creator><pubDate>Fri, 07 Apr 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-04-07:pycon-italia-2017/weppy-the-web-framework-for-humans.html</guid><category>web</category><category>orm</category><category>webservices</category><category>sql</category><category>webapp</category><category>web-development</category></item></channel></rss>