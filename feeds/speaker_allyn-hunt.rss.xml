<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Sat, 10 Nov 2018 00:00:00 +0000</lastBuildDate><item><title>Powering up your Python web applications</title><link>https://pyvideo.org/pycon-ireland-2018/powering-up-your-python-web-applications.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;App structure best practices: Benefits of using the Flask application factory. Creating a (Flask-Script) migrate.py to handle database connections. Easily move between production and development environments and database connections. Separating your app into Blueprints, to create webpage, API and logged in routes. Adding asynchronous tasks: Focusing on a real world application use case, using Redis as a message broker and Celery as an asynchronous task queue. Setting up your server connection and creating asynchronous and scheduled tasks. Adding in a JavaScript frontend: Adding a React JavaScript front end. Creating API endpoints that return JSON data. How to anchor our server rendered content to our React components and fetching data from out API. Pro's and cons of using react. Using jQuery as an alternative to React.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Allyn Hunt</dc:creator><pubDate>Sat, 10 Nov 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-11-10:pycon-ireland-2018/powering-up-your-python-web-applications.html</guid><category>flask</category><category>jquery</category></item><item><title>Creating a Python Web App for Destiny the Game</title><link>https://pyvideo.org/pycon-uk-2017/creating-a-python-web-app-for-destiny-the-game.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;For the last year and a half I have been working on creating a Python based application for Destiny the game (Play Station, Xbox and soon to be released on PC). I started this project as a practical exercise to increase my knowledge in Python, I have progressed from developing several small scripts, which interface with the game environment, to deploying and managing a Flask based web application. I have been blogging about my progress with the application since August 2016, creating several how-to guides, a custom OAuth 2.0 flow that is currently being used by several other Destiny applications, and a full web application. My blog has to date received ~45,000 views. The Destiny developers, Bungie (Destiny, Halo), have released an incredibly powerful API which allows you to interact with your in-game character, collect a huge amount of stats and track all of your activities. I have used the Python Requests library to interface with the game environment via the Destiny API, I use SQLAlchemy to store user account information, and the Jinja2 web templating language for Python, as a web front end.&lt;/p&gt;
&lt;p&gt;Application Features: Login via custom OAuth 2.0 flow (Bungie.net OAuth flow was not compatible with current OAuth libraries). Store user account details in an SQL database. View full in-game account details. View your in-game characters inventory. Send a POST request to select another character (each game account can have up-to 3 characters). View items stored in shared Vault (in game item storage that is available to all of your characters). Transfer items, change weapons and armour live in game. View a list of (Play Station or Xbox) friends in your in-game clan. Also view basic account and character details. View a list of items being sold in-game, receive a HTML formatted email of these items.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Allyn Hunt</dc:creator><pubDate>Sat, 28 Oct 2017 15:00:00 +0100</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-10-28:pycon-uk-2017/creating-a-python-web-app-for-destiny-the-game.html</guid></item></channel></rss>