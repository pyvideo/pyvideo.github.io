<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org - PyOhio 2024</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/event_pyohio-2024.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2024-07-28T00:00:00+00:00</updated><subtitle></subtitle><entry><title>A Confession of My Python Sins</title><link href="https://pyvideo.org/pyohio-2024/a-confession-of-my-python-sins.html" rel="alternate"></link><published>2024-07-28T00:00:00+00:00</published><updated>2024-07-28T00:00:00+00:00</updated><author><name>Jamie Bliss</name></author><id>tag:pyvideo.org,2024-07-28:/pyohio-2024/a-confession-of-my-python-sins.html</id><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;I've been writing Python code for twenty years now, and in that time
I've done some bad things to it.&lt;/p&gt;
&lt;p&gt;Let's discuss them and why you would want to also do black magic,
atrocities, abominations, and other sins.&lt;/p&gt;
</content><category term="PyOhio 2024"></category></entry><entry><title>Building Vector-Symbolic Architectures with Python</title><link href="https://pyvideo.org/pyohio-2024/building-vector-symbolic-architectures-with-python.html" rel="alternate"></link><published>2024-07-28T00:00:00+00:00</published><updated>2024-07-28T00:00:00+00:00</updated><author><name>Fabio Cumbo</name></author><id>tag:pyvideo.org,2024-07-28:/pyohio-2024/building-vector-symbolic-architectures-with-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Vector-Symbolic Architectures (a.k.a. Hyperdimensional Computing) is a
relatively new computational paradigm that involves the use of random
vectors in a high-dimensional space to represent and process
information. As a computational paradigm, it finds applications in a
wide range of fields, including artificial intelligence, natural
language processing, internet-of-things …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Vector-Symbolic Architectures (a.k.a. Hyperdimensional Computing) is a
relatively new computational paradigm that involves the use of random
vectors in a high-dimensional space to represent and process
information. As a computational paradigm, it finds applications in a
wide range of fields, including artificial intelligence, natural
language processing, internet-of-things, robotics, bioinformatics, and
other scientific domains.&lt;/p&gt;
&lt;p&gt;Here we are going to introduce some fundamental concepts at the base of
Hyperdimensional Computing, following a presentation of &lt;em&gt;hdlib&lt;/em&gt;, a
library for building Vector-Symbolic Architectures with Python. Finally,
we are going to see how to easily build a machine learning model based
on the Hyperdimensional Computing paradigm as a practical use case.&lt;/p&gt;
&lt;p&gt;As a reference, &lt;em&gt;hdlib&lt;/em&gt; is open-source, it is available on GitHub at
` &amp;lt;&lt;a class="reference external" href="https://github.com/cumbof/hdlib"&gt;https://github.com/cumbof/hdlib&lt;/a&gt;&amp;gt;`__&lt;a class="reference external" href="https://github.com/cumbof/hdlib"&gt;https://github.com/cumbof/hdlib&lt;/a&gt;,
and it is published on the Journal of Open Source Software at
` &amp;lt;&lt;a class="reference external" href="https://doi.org/10.21105/joss.05704"&gt;https://doi.org/10.21105/joss.05704&lt;/a&gt;&amp;gt;`__&lt;a class="reference external" href="https://doi.org/10.21105/joss.05704"&gt;https://doi.org/10.21105/joss.05704&lt;/a&gt;.&lt;/p&gt;
</content><category term="PyOhio 2024"></category></entry><entry><title>Hot: Pathlib, Not: String Paths</title><link href="https://pyvideo.org/pyohio-2024/hot-pathlib-not-string-paths.html" rel="alternate"></link><published>2024-07-28T00:00:00+00:00</published><updated>2024-07-28T00:00:00+00:00</updated><author><name>Josh Schneider</name></author><id>tag:pyvideo.org,2024-07-28:/pyohio-2024/hot-pathlib-not-string-paths.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Have you seen &lt;tt class="docutils literal"&gt;pathlib&lt;/tt&gt;? If not, once I show you, you will never go
back to string paths and &lt;tt class="docutils literal"&gt;os.path&lt;/tt&gt; ever again! &lt;tt class="docutils literal"&gt;pathlib&lt;/tt&gt; turns paths
into path objects, which have attributes and methods that cover a number
of operations. In this talk, we will:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Talk about how to …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Have you seen &lt;tt class="docutils literal"&gt;pathlib&lt;/tt&gt;? If not, once I show you, you will never go
back to string paths and &lt;tt class="docutils literal"&gt;os.path&lt;/tt&gt; ever again! &lt;tt class="docutils literal"&gt;pathlib&lt;/tt&gt; turns paths
into path objects, which have attributes and methods that cover a number
of operations. In this talk, we will:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Talk about how to create &lt;tt class="docutils literal"&gt;Path&lt;/tt&gt; objects, and how this differs on
Windows vs Mac/Linux&lt;/li&gt;
&lt;li&gt;Talk about the many properties of pure paths&lt;/li&gt;
&lt;li&gt;Talk about folder operations from &lt;tt class="docutils literal"&gt;Path&lt;/tt&gt; objects, such as creating
directory structures and recursive globbing.&lt;/li&gt;
&lt;li&gt;Talk about file operations, made simpler with &lt;tt class="docutils literal"&gt;Path&lt;/tt&gt; objects, such
as reading contents, getting properties like file size, and deleting.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Stop messing with string paths and get with &lt;tt class="docutils literal"&gt;pathlib&lt;/tt&gt;!&lt;/p&gt;
</content><category term="PyOhio 2024"></category></entry><entry><title>Mastering the Zen of Dev Experience: Kubernetes and the Art of Simplicity</title><link href="https://pyvideo.org/pyohio-2024/mastering-the-zen-of-dev-experience-kubernetes-and-the-art-of-simplicity.html" rel="alternate"></link><published>2024-07-28T00:00:00+00:00</published><updated>2024-07-28T00:00:00+00:00</updated><author><name>Calvin Hendryx-Parker</name></author><id>tag:pyvideo.org,2024-07-28:/pyohio-2024/mastering-the-zen-of-dev-experience-kubernetes-and-the-art-of-simplicity.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Happy developers do not have to fight their tools and environment to be
productive. They get set up in minutes, deploy without hesitation, and
use the same tools to debug in any environment. In this talk and live
demo, we'll explore how a Kubernetes-based development workflow can help
you …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Happy developers do not have to fight their tools and environment to be
productive. They get set up in minutes, deploy without hesitation, and
use the same tools to debug in any environment. In this talk and live
demo, we'll explore how a Kubernetes-based development workflow can help
you and your team hit the ground running.&lt;/p&gt;
&lt;p&gt;We will delve into establishing a powerful Django backend for
server-side functionality and a dynamic React frontend for an engaging
user experience. For databases, the setup will include a local Postgres
database for development and CloudNativePG for production-level
deployments. Additionally, the integration of Redis for enhanced
application performance and email testing will be covered.&lt;/p&gt;
&lt;p&gt;This comprehensive approach ensures that onboarding a new developer on a
project is streamlined, overcoming the typical pain points such as:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;manual installation steps&lt;/li&gt;
&lt;li&gt;the inconsistency of tools across development environments&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Kubernetes will empower your development and DevOps teams to speak a
common language and collaborate effectively, standardizing deployments
and debugging processes in local, preview, staging, and production
environments.&lt;/p&gt;
</content><category term="PyOhio 2024"></category></entry><entry><title>Python + Discord = Great Bots!</title><link href="https://pyvideo.org/pyohio-2024/python-discord-great-bots.html" rel="alternate"></link><published>2024-07-28T00:00:00+00:00</published><updated>2024-07-28T00:00:00+00:00</updated><author><name>Alex Oladele</name></author><id>tag:pyvideo.org,2024-07-28:/pyohio-2024/python-discord-great-bots.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Okay you already enjoy using python, and you already enjoy using
Discord, but what if you combined both!&lt;/p&gt;
&lt;p&gt;In this talk we will explore how to build a discord bot using the Pycord
library. We’ll build a dice rolling bot that utilizes Discord’s native
slash commands. At …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Okay you already enjoy using python, and you already enjoy using
Discord, but what if you combined both!&lt;/p&gt;
&lt;p&gt;In this talk we will explore how to build a discord bot using the Pycord
library. We’ll build a dice rolling bot that utilizes Discord’s native
slash commands. At the end of this talk you’ll have learned the
different ways to invoke discord bot actions, the different lifecycle
events each bot goes through, structuring the code for maintainability,
and how to build for widespread adoption.&lt;/p&gt;
</content><category term="PyOhio 2024"></category></entry><entry><title>Signal Processing in Electrochemistry with Python: Applications to the US Opioids Crisis</title><link href="https://pyvideo.org/pyohio-2024/signal-processing-in-electrochemistry-with-python-applications-to-the-us-opioids-crisis.html" rel="alternate"></link><published>2024-07-28T00:00:00+00:00</published><updated>2024-07-28T00:00:00+00:00</updated><author><name>Rodrigo Silva Ferreira</name></author><id>tag:pyvideo.org,2024-07-28:/pyohio-2024/signal-processing-in-electrochemistry-with-python-applications-to-the-us-opioids-crisis.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;With an average of 195 daily deaths due to synthetic opioids overdose in
2021, the US have been facing an unprecedented opioids crisis. Fentanyl
and its analogues have been a major source of concern, due to their high
levels of addiction, fast-acting mechanisms, and detection challenges.
Fast, effective, and …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;With an average of 195 daily deaths due to synthetic opioids overdose in
2021, the US have been facing an unprecedented opioids crisis. Fentanyl
and its analogues have been a major source of concern, due to their high
levels of addiction, fast-acting mechanisms, and detection challenges.
Fast, effective, and accurate identification and quantification of
fentanyl, its analogues, and metabolites are essential to help prevent
overdose-related incidents and to enable agile medical response.
Although electrochemical sensors represent a promising technology for
selectively detecting opioids at low concentrations, analyzing and
processing the data remains one of the major challenges. To tackle this
challenge, certain Python libraries, such as &lt;em&gt;scipy.signal&lt;/em&gt;, could be
useful in processing signals with high levels of noise and interference
from other substances.&lt;/p&gt;
&lt;p&gt;This talk will focus on specific examples of how such libraries could
help enable filtering, Fourier transformation, and wavelet analysis of
electrochemical data. As examples, code snippets and outputs will be
shown to demonstrate how Python can help improve the quality and
usability of electrochemical data. Additionally, this talk will show how
data processing can further benefit from hyper parameter optimization
techniques, enabled by libraries like &lt;em&gt;hyperopt&lt;/em&gt; and &lt;em&gt;ray-tune&lt;/em&gt;. By
doing so, my hope is to demonstrate how Python could be extremely useful
in helping address problems at the intersection of statistics, public
health, and public policy.&lt;/p&gt;
</content><category term="PyOhio 2024"></category></entry><entry><title>Stress Less: Easy Database Load Testing Using Python and Locust</title><link href="https://pyvideo.org/pyohio-2024/stress-less-easy-database-load-testing-using-python-and-locust.html" rel="alternate"></link><published>2024-07-28T00:00:00+00:00</published><updated>2024-07-28T00:00:00+00:00</updated><author><name>Miguel Johnson</name></author><id>tag:pyvideo.org,2024-07-28:/pyohio-2024/stress-less-easy-database-load-testing-using-python-and-locust.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;div class="section" id="overview"&gt;
&lt;h4&gt;Overview&lt;/h4&gt;
&lt;p&gt;Many people have probably used Locust or a tool built on top of it (like
Load Forge) in the past. These tools are primarily used for web
application load testing by hitting public endpoints and monitoring how
they respond. In this talk we review how to use Locust …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;div class="section" id="overview"&gt;
&lt;h4&gt;Overview&lt;/h4&gt;
&lt;p&gt;Many people have probably used Locust or a tool built on top of it (like
Load Forge) in the past. These tools are primarily used for web
application load testing by hitting public endpoints and monitoring how
they respond. In this talk we review how to use Locust to load test a
PostgreSQL database.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="additional-info"&gt;
&lt;h4&gt;Additional Info&lt;/h4&gt;
&lt;p&gt;This is a link to an article I wrote about this topic:
&lt;a class="reference external" href="https://miguel-codes.medium.com/unconventional-load-testing-leveraging-python-locust-for-postgresql-stress-testing-d6e07d63714b"&gt;https://miguel-codes.medium.com/unconventional-load-testing-leveraging-python-locust-for-postgresql-stress-testing-d6e07d63714b&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</content><category term="PyOhio 2024"></category></entry><entry><title>Wagtail: The Python CMS Taking the World by Storm</title><link href="https://pyvideo.org/pyohio-2024/wagtail-the-python-cms-taking-the-world-by-storm.html" rel="alternate"></link><published>2024-07-28T00:00:00+00:00</published><updated>2024-07-28T00:00:00+00:00</updated><author><name>Vince Salvino</name></author><id>tag:pyvideo.org,2024-07-28:/pyohio-2024/wagtail-the-python-cms-taking-the-world-by-storm.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;What do NASA, Google Blogs, The Motley Fool, CFPB.gov, and the British
National Health Service all have in common? Their websites are powered
by Wagtail, the fastest-growing Python CMS that you've probably never
heard of. Because it is 100% free and open-source, you can build your
own website …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;What do NASA, Google Blogs, The Motley Fool, CFPB.gov, and the British
National Health Service all have in common? Their websites are powered
by Wagtail, the fastest-growing Python CMS that you've probably never
heard of. Because it is 100% free and open-source, you can build your
own website with Wagtail too!&lt;/p&gt;
&lt;p&gt;We'll discuss:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;What is Wagtail and what does it do?&lt;/li&gt;
&lt;li&gt;How does it compare to other systems such as WordPress?&lt;/li&gt;
&lt;li&gt;Overview of the Wagtail open-source project; how a team of volunteers
makes this all possible.&lt;/li&gt;
&lt;li&gt;Demo and brief getting started tutorial&lt;/li&gt;
&lt;/ul&gt;
</content><category term="PyOhio 2024"></category></entry><entry><title>Zen Commandments</title><link href="https://pyvideo.org/pyohio-2024/zen-commandments.html" rel="alternate"></link><published>2024-07-28T00:00:00+00:00</published><updated>2024-07-28T00:00:00+00:00</updated><author><name>Paul Hutchings</name></author><id>tag:pyvideo.org,2024-07-28:/pyohio-2024/zen-commandments.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;With the 20th anniversary of the Zen of Python coming up in August, now
is the perfect time to reflect on how it has influenced the evolution of
the Python language and how we write software in Python over the last 2
decades. Has Python moved closer to the …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;With the 20th anniversary of the Zen of Python coming up in August, now
is the perfect time to reflect on how it has influenced the evolution of
the Python language and how we write software in Python over the last 2
decades. Has Python moved closer to the ideals expounded in the Zen, or
has it drifted further away? Like many great software engineering
principles, different portions of the PEP are in contention with each
other at times, which can be revealed in the features and patterns of
the language. What does the current relationship between the language
and the PEP say about the Python community and ecosystem as a whole, as
well as perhaps the most important question: is the Zen of Python still
relevant today?&lt;/p&gt;
</content><category term="PyOhio 2024"></category></entry><entry><title>Boosting Neuroimaging Analysis and Results Digestibility 🧠</title><link href="https://pyvideo.org/pyohio-2024/boosting-neuroimaging-analysis-and-results-digestibility.html" rel="alternate"></link><published>2024-07-27T00:00:00+00:00</published><updated>2024-07-27T00:00:00+00:00</updated><author><name>Carlos A Aranibar</name></author><id>tag:pyvideo.org,2024-07-27:/pyohio-2024/boosting-neuroimaging-analysis-and-results-digestibility.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Electroencephalogram (EEG) measures brain activity, and despite
advancements in sensors since its 1924 invention, its result
presentation has changed very little. We're addressing this using MNE,
an open-source Python library.&lt;/p&gt;
&lt;p&gt;Join us to simplify neuroimaging results for patients and enhance
visualization tools for technicians. Affordable biotracking devices now
capture …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Electroencephalogram (EEG) measures brain activity, and despite
advancements in sensors since its 1924 invention, its result
presentation has changed very little. We're addressing this using MNE,
an open-source Python library.&lt;/p&gt;
&lt;p&gt;Join us to simplify neuroimaging results for patients and enhance
visualization tools for technicians. Affordable biotracking devices now
capture brain wave data, and MNE enables innovative data export and
manipulation. This opens new possibilities for advanced statistics,
improved visualizations, and enhanced analysis capabilities.&lt;/p&gt;
&lt;p&gt;No medical background is required – join us in revolutionizing brain
activity interpretation, making it more accessible and meaningful for
everyone.&lt;/p&gt;
</content><category term="PyOhio 2024"></category></entry><entry><title>Boosting Python Numeric Computations with Dynamic C++ Integration</title><link href="https://pyvideo.org/pyohio-2024/boosting-python-numeric-computations-with-dynamic-c-integration.html" rel="alternate"></link><published>2024-07-27T00:00:00+00:00</published><updated>2024-07-27T00:00:00+00:00</updated><author><name>Mandar Deshpande</name></author><id>tag:pyvideo.org,2024-07-27:/pyohio-2024/boosting-python-numeric-computations-with-dynamic-c-integration.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Uncover the secrets to turbocharging your Python numeric computations by
harnessing the dynamic performance of &lt;tt class="docutils literal"&gt;C++&lt;/tt&gt;. This talk is aimed at the
beginner-intermediate Python developer working in the ML/AI infra or
performance optimization space.&lt;/p&gt;
&lt;p&gt;Have you ever wondered how the growing usage of the numeric computation
stack, including …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Uncover the secrets to turbocharging your Python numeric computations by
harnessing the dynamic performance of &lt;tt class="docutils literal"&gt;C++&lt;/tt&gt;. This talk is aimed at the
beginner-intermediate Python developer working in the ML/AI infra or
performance optimization space.&lt;/p&gt;
&lt;p&gt;Have you ever wondered how the growing usage of the numeric computation
stack, including libraries like numpy, scipy, and scikit-learn, along
with deep learning libraries such as pytorch and tensorflow, are shaping
the future of AI and Machine Learning? And what about the intriguing
fact that these libraries are built on wrappers for the underlying C++
code? Have you considered the benefits this brings, or how the
optimization of these libraries as per the host device - be it CPU, GPU,
or Apple Silicon - enhances performance and efficiency?&lt;/p&gt;
&lt;p&gt;And finally, let's consider the practical applications and real-world
examples of this integration between Python and C++. What are the
challenges and solutions in bridging the gap between Python and C++ in
the context of AI and Machine Learning.&lt;/p&gt;
&lt;p&gt;Observing the growing trends at my workplace over the past few years, I
am sure this process is going to be standardised soon with more
developers being involved in such integrations/optimizations.&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;This talk aims to get the Python community excited for this growing
trend by sharing:&lt;/div&gt;
&lt;div class="line"&gt;1. reasoning&lt;/div&gt;
&lt;div class="line"&gt;2. Integration framework/paths specifically for pybind&lt;/div&gt;
&lt;/div&gt;
</content><category term="PyOhio 2024"></category></entry><entry><title>Data Engineering: The World Between Worlds</title><link href="https://pyvideo.org/pyohio-2024/data-engineering-the-world-between-worlds.html" rel="alternate"></link><published>2024-07-27T00:00:00+00:00</published><updated>2024-07-27T00:00:00+00:00</updated><author><name>Rainu Ittycheriah</name></author><id>tag:pyvideo.org,2024-07-27:/pyohio-2024/data-engineering-the-world-between-worlds.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Data engineering is an often misunderstood, conflated range of skills
from database administration, analytics, ETL, cloud infrastructure, big
data and back. As someone who worked as a data engineer for just over 5
years, I’d love to share my stories about my time as a data engineer to …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Data engineering is an often misunderstood, conflated range of skills
from database administration, analytics, ETL, cloud infrastructure, big
data and back. As someone who worked as a data engineer for just over 5
years, I’d love to share my stories about my time as a data engineer to
pull back the curtain on what kind of value you might be able to get
from data engineering as the heat of ML Ops and AI takes flight, both as
organization and individual. Notably, many data engineering teams
heavily leverage Python due to the depth and breadth of the data
libraries, and the ease by which folks can learn Python to start
creating value within the space. We'll also talk about a few of the key
libraries that you can learn to set yourself apart if you decide data
engineering is for you!&lt;/p&gt;
</content><category term="PyOhio 2024"></category></entry><entry><title>Data Science &amp; Agile: Strategies for Working Together</title><link href="https://pyvideo.org/pyohio-2024/data-science-agile-strategies-for-working-together.html" rel="alternate"></link><published>2024-07-27T00:00:00+00:00</published><updated>2024-07-27T00:00:00+00:00</updated><author><name>Alyssa Batula</name></author><id>tag:pyvideo.org,2024-07-27:/pyohio-2024/data-science-agile-strategies-for-working-together.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Data science and Agile aren't famous for getting along. Data scientists
complain that Agile frameworks are too restrictive and deadline-focused
to accommodate the type of work they do. Scrum masters and product
owners have a hard timing planning around unclear timelines and
uncertain outcomes, and wish the data scientists …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Data science and Agile aren't famous for getting along. Data scientists
complain that Agile frameworks are too restrictive and deadline-focused
to accommodate the type of work they do. Scrum masters and product
owners have a hard timing planning around unclear timelines and
uncertain outcomes, and wish the data scientists would just tell them
how much effort a task will take.&lt;/p&gt;
&lt;p&gt;But it doesn't have to be this way! Data science and Agile can work
together to create a better system for everyone. In this talk I'll
highlight tips and pitfalls from my own experience, as well as stories
I've heard from my colleagues.&lt;/p&gt;
</content><category term="PyOhio 2024"></category></entry><entry><title>Efficient Path Planning for Search and Rescue Missions Using Neural Networks</title><link href="https://pyvideo.org/pyohio-2024/efficient-path-planning-for-search-and-rescue-missions-using-neural-networks.html" rel="alternate"></link><published>2024-07-27T00:00:00+00:00</published><updated>2024-07-27T00:00:00+00:00</updated><author><name>Keith Martin Machina</name></author><id>tag:pyvideo.org,2024-07-27:/pyohio-2024/efficient-path-planning-for-search-and-rescue-missions-using-neural-networks.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Utilizing the Python programming language and the Tkinter library, I
propose to develop a simulated robotic application tailored for search
and rescue missions. Central to this endeavor is the integration of a
neural network, trained on pertinent search and rescue data, to
effectively guide the robotic agent towards areas …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Utilizing the Python programming language and the Tkinter library, I
propose to develop a simulated robotic application tailored for search
and rescue missions. Central to this endeavor is the integration of a
neural network, trained on pertinent search and rescue data, to
effectively guide the robotic agent towards areas with a high
probability of locating survivors. The neural network's computations
yield a dynamic cost map, which takes into account both traversal costs
and the priority of various regions within the search area. This cost
map serves as a comprehensive tool, continuously furnishing the robotic
agent with insights into the search region and optimizing its search
strategy. Importantly, this approach is conceived to address challenges
inherent in reinforcement learning, such as the lack of a global view
and the need to balance multiple objectives in search and rescue
mission.&lt;/p&gt;
</content><category term="PyOhio 2024"></category></entry><entry><title>How to Do the Same Thing Over and Over Again and Yield Different Results</title><link href="https://pyvideo.org/pyohio-2024/how-to-do-the-same-thing-over-and-over-again-and-yield-different-results.html" rel="alternate"></link><published>2024-07-27T00:00:00+00:00</published><updated>2024-07-27T00:00:00+00:00</updated><author><name>Jessica Garson</name></author><id>tag:pyvideo.org,2024-07-27:/pyohio-2024/how-to-do-the-same-thing-over-and-over-again-and-yield-different-results.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;When I started working with Elasticsearch, the data in my index quickly
needed to be updated. I built a solution using Cloud Functions and Cloud
Scheduler in GCP to update my data automatically, a paradigm I've used
for creative projects. This talk will outline strategies for automating
routine processes …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;When I started working with Elasticsearch, the data in my index quickly
needed to be updated. I built a solution using Cloud Functions and Cloud
Scheduler in GCP to update my data automatically, a paradigm I've used
for creative projects. This talk will outline strategies for automating
routine processes while ensuring that the outcomes adapt to changing
requirements, enhancing project innovation and data accuracy.&lt;/p&gt;
</content><category term="PyOhio 2024"></category></entry><entry><title>Is Python Your TYPE of Programming Language? How to Use Static Typing in Python with Type Hints, MyPy and Pydantic</title><link href="https://pyvideo.org/pyohio-2024/is-python-your-type-of-programming-language-how-to-use-static-typing-in-python-with-type-hints-mypy-and-pydantic.html" rel="alternate"></link><published>2024-07-27T00:00:00+00:00</published><updated>2024-07-27T00:00:00+00:00</updated><author><name>Jack Bennett</name></author><id>tag:pyvideo.org,2024-07-27:/pyohio-2024/is-python-your-type-of-programming-language-how-to-use-static-typing-in-python-with-type-hints-mypy-and-pydantic.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python's dynamic typing system famously offers flexibility, but this can
sometimes lead to runtime errors that are hard to detect or predict. In
many cases, the programmer knows what type a variable &amp;quot;should&amp;quot; be, but
in earlier language versions the only option to enforce this was by
writing custom …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python's dynamic typing system famously offers flexibility, but this can
sometimes lead to runtime errors that are hard to detect or predict. In
many cases, the programmer knows what type a variable &amp;quot;should&amp;quot; be, but
in earlier language versions the only option to enforce this was by
writing custom, run-time type checks. Since Python 3.5, the language has
offered type hints, which are optional annotations that suggest (but do
not require) that a variable has a particular type. Combined with static
type checkers like MyPy and run-time data validation frameworks like
Pydantic, type hints offer Python programmers a powerful system to
implement static types in a highly standardized way.&lt;/p&gt;
&lt;p&gt;This presentation explores these new standards for static typing in
Python through the lens of two powerful and versatile libraries: MyPy
and Pydantic. These tools build upon Python’s type hints to help you
improve your code reliability and effectiveness with minimal extra
effort.&lt;/p&gt;
&lt;p&gt;At the end of this presentation you will be able to:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Use type hints, MyPy, and Pydantic to define and enforce static data
types in Python.&lt;/li&gt;
&lt;li&gt;Identify important use cases where static types provide greater code
reliability and quality.&lt;/li&gt;
&lt;li&gt;Leverage these tools to increase the resilience of your code against
bad data, and deliver more useful and actionable error messages
sooner.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;MyPy is a type checker that leverages built-in type hints to identify
possible type errors during a separate static analysis stage. By
integrating a MyPy step into your development, testing, and deployment
processes, you can catch type-related errors at the start of the
development cycle. This reduces debugging time, improves code quality,
and often heads off potential production failures long before they
occur. We will discuss MyPy's key features, how to integrate it into
existing projects, and how it works together with Python's built-in
dynamic typing.&lt;/p&gt;
&lt;p&gt;Pydantic is a data validation library that leverages Python's type hints
to check incoming data at run time. Pydantic's data models ensure that
incoming data conforms to defined schemas. This feature is especially
useful in data-intensive applications for guaranteeing data integrity
and standardizing error reporting. Key application areas include ETL,
streaming data, and RESTful APIs (in fact, the popular FastAPI framework
leans heavily on Pydantic for data validation). We will learn about
Pydantic's applications in data parsing, and in building data models
that enhance code resilience and simplify error-checking and logging.&lt;/p&gt;
&lt;p&gt;Through reference to practical examples and best practices, this talk
will demonstrate how you can use MyPy and Pydantic to leverage the
static typing capabilities in the core Python language to create more
correct, maintainable, and resilient Python applications.&lt;/p&gt;
</content><category term="PyOhio 2024"></category></entry><entry><title>Keynote - Mariatta</title><link href="https://pyvideo.org/pyohio-2024/keynote-mariatta.html" rel="alternate"></link><published>2024-07-27T00:00:00+00:00</published><updated>2024-07-27T00:00:00+00:00</updated><author><name>Mariatta</name></author><id>tag:pyvideo.org,2024-07-27:/pyohio-2024/keynote-mariatta.html</id><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Mariatta presents our Saturday afternoon keynote.&lt;/p&gt;
</content><category term="PyOhio 2024"></category></entry><entry><title>Keynote - Steph Hippo</title><link href="https://pyvideo.org/pyohio-2024/keynote-steph-hippo.html" rel="alternate"></link><published>2024-07-27T00:00:00+00:00</published><updated>2024-07-27T00:00:00+00:00</updated><author><name>Steph Hippo</name></author><id>tag:pyvideo.org,2024-07-27:/pyohio-2024/keynote-steph-hippo.html</id><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Steph Hippo presents our Saturday morning keynote.&lt;/p&gt;
</content><category term="PyOhio 2024"></category></entry><entry><title>Keynote - Trey Hunner</title><link href="https://pyvideo.org/pyohio-2024/keynote-trey-hunner.html" rel="alternate"></link><published>2024-07-27T00:00:00+00:00</published><updated>2024-07-27T00:00:00+00:00</updated><author><name>Trey Hunner</name></author><id>tag:pyvideo.org,2024-07-27:/pyohio-2024/keynote-trey-hunner.html</id><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Trey Hunner presents our Sunday afternoon keynote.&lt;/p&gt;
</content><category term="PyOhio 2024"></category></entry><entry><title>Python &lt;3 Rust</title><link href="https://pyvideo.org/pyohio-2024/python-3-rust.html" rel="alternate"></link><published>2024-07-27T00:00:00+00:00</published><updated>2024-07-27T00:00:00+00:00</updated><author><name>Moshe Zadka</name></author><id>tag:pyvideo.org,2024-07-27:/pyohio-2024/python-3-rust.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python code can be sometimes slow, but is easy to iterate on and
prototype in. Rust can be slower for iteration, but results in code that
is both fast and safe. The two languages complement each other
perfectly. The PyO3 framework bridges the gap in a way that avoids …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python code can be sometimes slow, but is easy to iterate on and
prototype in. Rust can be slower for iteration, but results in code that
is both fast and safe. The two languages complement each other
perfectly. The PyO3 framework bridges the gap in a way that avoids
boilerplate. Learn how to use it to add a powerful tool for your
toolbox!&lt;/p&gt;
</content><category term="PyOhio 2024"></category></entry><entry><title>Serverless AI Inferencing Using Python and WebAssembly</title><link href="https://pyvideo.org/pyohio-2024/serverless-ai-inferencing-using-python-and-webassembly.html" rel="alternate"></link><published>2024-07-27T00:00:00+00:00</published><updated>2024-07-27T00:00:00+00:00</updated><author><name>Shivay Lamba</name></author><id>tag:pyvideo.org,2024-07-27:/pyohio-2024/serverless-ai-inferencing-using-python-and-webassembly.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Unleashing the power of serverless AI has never been more accessible,
and Python enthusiasts are in for a treat! Dive into this talk to
discover how WebAssembly based Open Source project Spin seamlessly
bridges the gap between Python and Serverless AI. There are no models to
download. Just create …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Unleashing the power of serverless AI has never been more accessible,
and Python enthusiasts are in for a treat! Dive into this talk to
discover how WebAssembly based Open Source project Spin seamlessly
bridges the gap between Python and Serverless AI. There are no models to
download. Just create, build and deploy! This talk will guide you on
building your own serverless AI inferencing using Python and promises to
elevate your game instantly.&lt;/p&gt;
</content><category term="PyOhio 2024"></category></entry><entry><title>Simplifying Python Web App Operations: Automating K8s Ops with Open Source</title><link href="https://pyvideo.org/pyohio-2024/simplifying-python-web-app-operations-automating-k8s-ops-with-open-source.html" rel="alternate"></link><published>2024-07-27T00:00:00+00:00</published><updated>2024-07-27T00:00:00+00:00</updated><author><name>David Andersson</name></author><id>tag:pyvideo.org,2024-07-27:/pyohio-2024/simplifying-python-web-app-operations-automating-k8s-ops-with-open-source.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;After creating a great web app using Python such as with flask, the next
hurdle to production is how to make it available to users and operate
it. And not just your app, but also ingress, the database, observability
and the list goes on. We will go through your …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;After creating a great web app using Python such as with flask, the next
hurdle to production is how to make it available to users and operate
it. And not just your app, but also ingress, the database, observability
and the list goes on. We will go through your options for simplifying
the operations of your web app using open source tooling. This will
include using k8s directly, helm charts, IaaC using pulumi and new
tooling developed by Canonical using juju. By the end of the talk you
will have seen the benefits and drawbacks of each which will help you
make an informed decision on which tool best suits your needs!&lt;/p&gt;
</content><category term="PyOhio 2024"></category></entry><entry><title>Snakes &amp; Ladders: A Gentle Introduction to Generators and Iterators</title><link href="https://pyvideo.org/pyohio-2024/snakes-ladders-a-gentle-introduction-to-generators-and-iterators.html" rel="alternate"></link><published>2024-07-27T00:00:00+00:00</published><updated>2024-07-27T00:00:00+00:00</updated><author><name>JR Rickerson</name></author><id>tag:pyvideo.org,2024-07-27:/pyohio-2024/snakes-ladders-a-gentle-introduction-to-generators-and-iterators.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Generators and Iterators are two core features of Python that are often
misunderstood and overlooked. And yet they are extremely powerful and
expressive parts of the language. They can be especially useful in data
processing, systems integration, or in projects with limited resources.
In this talk, we'll get into …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Generators and Iterators are two core features of Python that are often
misunderstood and overlooked. And yet they are extremely powerful and
expressive parts of the language. They can be especially useful in data
processing, systems integration, or in projects with limited resources.
In this talk, we'll get into the fundamentals of what iterators and
generators actually are, how they're different from one another, and how
they work under the hood. We will explore how to create your own custom
iterators and generators for use in your own projects. Throughout the
discussion, we'll make comparisons to the simple children's game &amp;quot;Snakes
&amp;amp; Ladders,&amp;quot; and by the end of the talk we should have a simple working
example of the game built with iterators and generators.&lt;/p&gt;
&lt;p&gt;NOTE: Slides and sample code for this talk can be found at
&lt;a class="reference external" href="https://github.com/jrrickerson/snakes_and_ladders"&gt;https://github.com/jrrickerson/snakes_and_ladders&lt;/a&gt;&lt;/p&gt;
</content><category term="PyOhio 2024"></category></entry><entry><title>Validating Complex Types Using Pydantic</title><link href="https://pyvideo.org/pyohio-2024/validating-complex-types-using-pydantic.html" rel="alternate"></link><published>2024-07-27T00:00:00+00:00</published><updated>2024-07-27T00:00:00+00:00</updated><author><name>Daniel Schelkoph</name></author><id>tag:pyvideo.org,2024-07-27:/pyohio-2024/validating-complex-types-using-pydantic.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;For some Python Objects it is difficult to understand its contents, even
if type annotations are used. For example, PyTorch's &lt;tt class="docutils literal"&gt;Tensor&lt;/tt&gt; or
Pandas's &lt;tt class="docutils literal"&gt;DataFrame&lt;/tt&gt; have many different &amp;quot;shapes&amp;quot; to their data
structures, but their type annotations are always the same. This can
make it very difficult to understand functions …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;For some Python Objects it is difficult to understand its contents, even
if type annotations are used. For example, PyTorch's &lt;tt class="docutils literal"&gt;Tensor&lt;/tt&gt; or
Pandas's &lt;tt class="docutils literal"&gt;DataFrame&lt;/tt&gt; have many different &amp;quot;shapes&amp;quot; to their data
structures, but their type annotations are always the same. This can
make it very difficult to understand functions that utilize these
objects as parameters or return these objects. When reviewing code, it
is very common to ask these sorts of questions:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;What is the shape of the &lt;tt class="docutils literal"&gt;Tensor&lt;/tt&gt; I need to pass in?&lt;/li&gt;
&lt;li&gt;What columns does this &lt;tt class="docutils literal"&gt;DataFrame&lt;/tt&gt; need to have?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In this talk, we will describe how to utilize typing metadata and
Pydantic to not only provide additional context for these data
structures, but to validate the input/output of functions as well.&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Links for the talk:&lt;/div&gt;
&lt;div class="line"&gt;- &lt;a class="reference external" href="https://github.com/dschelkoph/ds_validator_talk"&gt;Notebook&lt;/a&gt; used
in talk; dev container compatible&lt;/div&gt;
&lt;div class="line"&gt;- &lt;a class="reference external" href="https://pypi.org/project/ds_validator/"&gt;ds_validator&lt;/a&gt;, the
package demonstrated in the talk&lt;/div&gt;
&lt;/div&gt;
</content><category term="PyOhio 2024"></category></entry><entry><title>What Django Deployment is Really About</title><link href="https://pyvideo.org/pyohio-2024/what-django-deployment-is-really-about.html" rel="alternate"></link><published>2024-07-27T00:00:00+00:00</published><updated>2024-07-27T00:00:00+00:00</updated><author><name>James Walters</name></author><id>tag:pyvideo.org,2024-07-27:/pyohio-2024/what-django-deployment-is-really-about.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;People often spend so much time learning how to build apps in Django
that when it comes time for deployment, it feels like a whole new world
that they don’t understand. Deployment recipes might help them get their
app online–but then again they might not, if the …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;People often spend so much time learning how to build apps in Django
that when it comes time for deployment, it feels like a whole new world
that they don’t understand. Deployment recipes might help them get their
app online–but then again they might not, if the steps that worked
yesterday don’t work today. Even if they do get online, they might not
understand that deployment process anymore than they did before.&lt;/p&gt;
&lt;p&gt;Instead of offering another set of steps, I think we can help beginners
to make sense of deployment by reducing the entire process to four major
areas of concern and equipping them to think through each of these on
its own terms:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Static Files - why do I have to worry about these now? I thought {%
static %} was handling it?&lt;/li&gt;
&lt;li&gt;Database - does my sqlite3 file not work in deployment? How do I use
my cloud provider’s remote DB?&lt;/li&gt;
&lt;li&gt;WSGI Server - how do I run my app in production? Doesn’t manage.py
runserver work? I’ve never heard of WSGI, what is it and why does it
matter to my Django project?&lt;/li&gt;
&lt;li&gt;Web Server (Apache/nginx/PaaS) - What do I need to understand about
web servers like Apache or nginx to get my project online? Do I even
need to configure a web server if I go with PaaS?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We’ll also consider:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Django’s deployment checklist&lt;/li&gt;
&lt;li&gt;django-simple-deploy&lt;/li&gt;
&lt;/ul&gt;
</content><category term="PyOhio 2024"></category></entry></feed>