<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Thu, 31 Oct 2019 00:00:00 +0000</lastBuildDate><item><title>Mutation Testing - Theory and Practice</title><link>https://pyvideo.org/pycon-se-2019/mutation-testing-theory-and-practice.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;What is mutation testing? How does it work in practice? What is it like to actually do it? These questions will be answered!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Anders Hovmöller</dc:creator><pubDate>Thu, 31 Oct 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-10-31:pycon-se-2019/mutation-testing-theory-and-practice.html</guid><category>testing</category><category>mutation testing</category></item><item><title>Test Fast, Fix More - Property based testing with Hypothesis</title><link>https://pyvideo.org/pycon-se-2019/test-fast-fix-more-property-based-testing-with-hypothesis.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Test Fast, Fix More – Property based in Python testing with Hypothesis Did you ever miss that corner case bug? Maybe it was a negative integer, strange timezone conversion behaviour, off by one error or something entirely else. These subtle bugs are often hard to catch and are easily missed in test cases. You like me have probably ran into plenty of code utilising only happy path testing, only to later discover subtle bugs which are easily fixed once pointed out. This is where property based testing comes into the picture.  In this talk I will focus on a wonderful Python library called Hypothesis but the concepts apply to other languages as well. Hypethesis is based on the same concept as the famous QuickCheck library for Haskell, which in turn have been ported a large number of languages. Hypothesis uses a wide range of input to find edge cases that you could otherwise easily miss, once it finds these cases it narrows down the input to the minimal breaking example to provide failures which are easier to understand.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Hultér</dc:creator><pubDate>Thu, 31 Oct 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-10-31:pycon-se-2019/test-fast-fix-more-property-based-testing-with-hypothesis.html</guid><category>hypothesis</category><category>testing</category></item><item><title>Python Testing 201 with pytest</title><link>https://pyvideo.org/python-frederick/python-testing-201-with-pytest.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;At the September 2019 Python Frederick event, Matt explored the features of pytest and how to apply them to Python.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Matt Layman</dc:creator><pubDate>Wed, 11 Sep 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-09-11:python-frederick/python-testing-201-with-pytest.html</guid><category>pytest</category><category>unit testing</category><category>testing</category></item><item><title>Python Testing 101 with pytest</title><link>https://pyvideo.org/python-frederick/python-testing-101-with-pytest.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;At the March 2019 Python Frederick event, Matt focused on the fundamentals of Python testing while using the pytest package.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Matt Layman</dc:creator><pubDate>Wed, 13 Mar 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-03-13:python-frederick/python-testing-101-with-pytest.html</guid><category>pytest</category><category>unit testing</category><category>testing</category></item><item><title>Automate Your Integration Tests Using pytest-docker-compose</title><link>https://pyvideo.org/kiwi-pycon-2019/automate-your-integration-tests-using-pytest-docker-compose.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Sometimes unit tests aren't enough, and you need to actually deploy your solution to see how it behaves as a whole. Utilities like docker-compose make it easy to stand up an entire environment, but the actual testing part still has to be done manually... or does it? Learn how to automate your integration tests using pytest-docker-compose today!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Phoenix Zerin</dc:creator><pubDate>Sat, 24 Aug 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-08-24:kiwi-pycon-2019/automate-your-integration-tests-using-pytest-docker-compose.html</guid><category>docker</category><category>docker-compose</category><category>pytest</category><category>testing</category></item><item><title>Why Good Developers Write Bad Tests</title><link>https://pyvideo.org/pytexas-2019/why-good-developers-write-bad-tests.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Many skilled developers write beautiful code but horrendous tests. Worse, they're oblivious to the problem because their code seems to follow best practices. Come to this talk to find out why refactoring degrades readability, magic numbers are your friends, and DRY means DO repeat yourself.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michael Lynch</dc:creator><pubDate>Sun, 14 Apr 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-04-14:pytexas-2019/why-good-developers-write-bad-tests.html</guid><category>testing</category></item><item><title>Egad! How Do We Start Writing (Better) Tests?</title><link>https://pyvideo.org/pytexas-2019/egad-how-do-we-start-writing-better-tests.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Some have never automated tests and can’t check themselves before they wreck themselves. Others have 1000s of tests that are flaky, duplicative, and slow. Wa-do-we-do? GOOD testing is hard but not impossible. Start with proven advice from this talk!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrew Knight</dc:creator><pubDate>Sat, 13 Apr 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-04-13:pytexas-2019/egad-how-do-we-start-writing-better-tests.html</guid><category>testing</category></item><item><title>Testing from the Ground Up</title><link>https://pyvideo.org/pytexas-2019/testing-from-the-ground-up.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Tests ensure our program works as intended and that changes to the codebase do not break existing functionality. However, these benefits aren’t free; we need to have a plan to write our app and to test it. This talk will introduce concepts and techniques that can be used to write effective tests.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Aly Sivji</dc:creator><pubDate>Sat, 13 Apr 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-04-13:pytexas-2019/testing-from-the-ground-up.html</guid><category>testing</category></item><item><title>Docker meets Python - A look on the Docker SDK for Python</title><link>https://pyvideo.org/europython-2019/docker-meets-python-a-look-on-the-docker-sdk-for-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;My talk aims to introduce and have a closer look on the Docker SDK for
Python.&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;I will cover:&lt;/div&gt;
&lt;div class="line"&gt;- How and where to get the SDK&lt;/div&gt;
&lt;div class="line"&gt;- How it works and how to use it in general&lt;/div&gt;
&lt;div class="line"&gt;- Possible use-cases like: Processing Container-Logs, Testing with
pytest on different Python Versions, Deploy via Python Script, etc..&lt;/div&gt;
&lt;/div&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;For my talk, you should know what Docker is and how to use it.&lt;/div&gt;
&lt;div class="line"&gt;A basic idea of pytest and server administration is nice to have, but
not necessarily needed to follow my talk.&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jan Wagner</dc:creator><pubDate>Fri, 12 Jul 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-07-12:europython-2019/docker-meets-python-a-look-on-the-docker-sdk-for-python.html</guid><category>Deployment/Continuous Integration and Delivery</category><category>DevOps general</category><category>Docker</category><category>Testing</category><category>Virtualization</category></item><item><title>Moving big projects to Python 3</title><link>https://pyvideo.org/europython-2019/moving-big-projects-to-python-3.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Next year Python 2 is no longer maintained. But you have a monster code
base with clever tricks and libraries that don't support Python 2, and
your data may be stored in a format that is hard to move Python 3. And
that's the easy bit.&lt;/p&gt;
&lt;p&gt;This talk focuses on the process of moving, not the code changes.
Because it's the process that is the hard part. How do you get your code
in a state where it's ready to move? How do you get the whole team on
the boat to Python 3?&lt;/p&gt;
&lt;p&gt;All Python 3 talks I have seen, including those I have given, and all
the texts on how to port, including the book I wrote, focus on the code
changes. With increasing backwards compatibility in Python 3 and
forward-compatibility in Python 2, this actually became a lesser problem
for big code bases.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The extra issues of large, old code bases&lt;/li&gt;
&lt;li&gt;Can you stop adding features? (1 min)&lt;/li&gt;
&lt;li&gt;Separate team vs getting everyone on it (2 min)&lt;/li&gt;
&lt;li&gt;Python 2 compatibility: You need it (1 min)&lt;/li&gt;
&lt;li&gt;The steps&lt;/li&gt;
&lt;li&gt;Fix your development process (2 min)&lt;/li&gt;
&lt;li&gt;Replace old libraries, or take over maintenance and port them (2 min)&lt;/li&gt;
&lt;li&gt;Make sure your tests are solid (1 min)&lt;/li&gt;
&lt;li&gt;Run 2to3 but only backwards compatible fixers (2 min)&lt;/li&gt;
&lt;li&gt;Run tests on Python 3 to stop backsliding (4 min)&lt;/li&gt;
&lt;li&gt;Run all tests: Expansive or slow&lt;/li&gt;
&lt;li&gt;Store passed tests&lt;/li&gt;
&lt;li&gt;Detect tests that change&lt;/li&gt;
&lt;li&gt;Turning it off adds a lot of extra work&lt;/li&gt;
&lt;li&gt;Port all your little utilities and tool scripts (1 min)&lt;/li&gt;
&lt;li&gt;Fix fix fix fix (1 min)&lt;/li&gt;
&lt;li&gt;Add tests with Python 2 data, to test migration (2 min)&lt;/li&gt;
&lt;li&gt;You might need migration scripts&lt;/li&gt;
&lt;li&gt;Extra careful staging tests (1 min)&lt;/li&gt;
&lt;li&gt;Production: Try, fail, repeat (1 min)&lt;/li&gt;
&lt;li&gt;Clean the code up (3 min)&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lennart Regebro</dc:creator><pubDate>Fri, 12 Jul 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-07-12:europython-2019/moving-big-projects-to-python-3.html</guid><category>Deployment/Continuous Integration and Delivery</category><category>Management</category><category>Python 3</category><category>Testing</category></item><item><title>Advanced pytest</title><link>https://pyvideo.org/europython-2019/advanced-pytest.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;There are many reasons why I think pytest is a fantastic test framework:
assertion introspection, setup and teardown with fixtures, parametrized
tests. But plugins are the real game changer!&lt;/p&gt;
&lt;p&gt;We'll dive right into customizing a test suite by developing a series of
pytest plugins based on a few neat hacks. We'll learn how to
automatically add markers to slow running tests, run only tests that use
a fixture which can be specified on the CLI, generate test reports in a
custom format, and automatically create GitHub issues for test
regressions. We'll wrap up this talk by using Cookiecutter to create
Python packages from our plugins that are ready to be published on PyPI.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Raphael Pierzina</dc:creator><pubDate>Thu, 11 Jul 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-07-11:europython-2019/advanced-pytest.html</guid><category>Test Libraries (pytest/nose/...)</category><category>Testing</category><category>python</category></item><item><title>Testing Microservices: fast and with confidence</title><link>https://pyvideo.org/europython-2019/testing-microservices-fast-and-with-confidence.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A main advantage of microservices is improved developer velocity. One
roadblock to achieving it is giving developers the confidence that their
changes are correct and safe, which is a challenging problem in such a
distributed architecture. Typical approaches involve relying on
automated end- to-end testing, which is costly to set up, develop tests
for and run.&lt;/p&gt;
&lt;p&gt;In this talk I will explore an approach to testing that does not require
the presence of any external dependencies (not even &amp;quot;fake&amp;quot; or &amp;quot;test
double&amp;quot; implementations of them), but provides many of the benefits of
an end-to-end test. Come by to learn about how we can use a downstream
service's API specification to make sure the system under test interacts
with it in the correct way (&amp;quot;contract testing&amp;quot;) - a key ingredient
missing from most unit or integration test setups. We'll then go even
further to cover testing scenarios that previously could only be covered
with end-to-end tests: how to maintain and validate state of your
downstream dependencies.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Stephan Jaensch</dc:creator><pubDate>Thu, 11 Jul 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-07-11:europython-2019/testing-microservices-fast-and-with-confidence.html</guid><category>Distributed Systems</category><category>Microservices</category><category>Testing</category><category>python</category></item><item><title>Open Sourcing at Work</title><link>https://pyvideo.org/pycon-ca-2018/open-sourcing-at-work.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;We just open sourced 2 projects (datacompy, and locopy) with roots in Data Science and Engineering which we will showcase. While is it exciting and rewarding to share your ideas with the world it isn't always easy. Thinking about licenses, copyrights, and protecting confidential information is a must!&lt;/p&gt;
&lt;p&gt;Working in a large organization which is embracing the mantra 'open source first' is really exciting. Part of this journey is to make sure we give back to the open source community when we can. Two of our projects had gained traction internally: datacompy, and locopy. As part of our commitment we wanted to make sure we could open source these projects for others to use and contribute back to. DataComPy is a package to compare two Pandas DataFrames. Originally started to be something of a replacement for SAS's PROC COMPARE for Pandas DataFrames with some more functionality than just Pandas.DataFrame.equals(Pandas.DataFrame) (in that it prints out some stats, and lets you tweak how accurate matches have to be). Then extended to carry that functionality over to Spark Dataframes. Locopy helps load flat files to S3 and then to Amazon Redshift, and assist with ETL processing. It is DB Driver (Adapter) agnostic, provides basic functionality to move data to S3 buckets, execute COPY commands to load data to S3, and into Redshift, and UNLOAD commands to unload data from Redshift into S3. While building these products was exciting and fun, some of the legal considerations were as interesting, complex, and required collaboration between many teams, from security, licensing, brand, and IP/copyright. We'll explore the projects, and some of these other considerations which can make or break if you decide to release a project into the wild, along with the road blocks we faced with in these areas.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Faisal Dosani</dc:creator><pubDate>Sun, 11 Nov 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-11-11:pycon-ca-2018/open-sourcing-at-work.html</guid><category>open source</category><category>licensing</category><category>copyright</category><category>data</category><category>security</category><category>testing</category><category>best practices</category><category>data science</category></item><item><title>Property Based Testing in Python with Hypothesis</title><link>https://pyvideo.org/pycon-philippines-2019/property-based-testing-in-python-with-hypothesis.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;High unit-test coverage is great, but it cannot effectively find bugs triggered by interactions between multiple features. Since it is not scalable to write tests for all possible interactions, we turn to property-based testing - an approach where we generate tests instead of writing them.  Property-based testing (PBT) is a random-testing approach that first became popular in the Haskell community as QuickCheck. It works by generating random examples to find minimal counterexamples to a pattern or law that ought to always hold true. PBT is especially useful in testing edge cases and interactions between multiple features, particularly in stateful systems. This talk introduces the principles of PBT along with its history and success stories. We then illustrate PBT patterns and examples in Python using Hypothesis. Finally, we see how it fits in with TDD and integration testing.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Anthony Khong</dc:creator><pubDate>Sat, 23 Feb 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-02-23:pycon-philippines-2019/property-based-testing-in-python-with-hypothesis.html</guid><category>hypothesis</category><category>testing</category></item><item><title>Efficient Python development with small teams</title><link>https://pyvideo.org/europython-2013/efficient-python-development-with-small-teams.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Marc-André Lemburg</dc:creator><pubDate>Fri, 05 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-05:europython-2013/efficient-python-development-with-small-teams.html</guid><category>quality-assurance</category><category>project-management</category><category>business</category><category>communication</category><category>testing</category><category>principles</category><category>application-design</category><category>design</category><category>software-engineering</category><category>strategies</category><category>best-practices</category><category>architecture</category></item><item><title>Getting started with Plone CMS development - Part 1</title><link>https://pyvideo.org/europython-2013/getting-started-with-plone-cms-development-part-1.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nejc Zupan</dc:creator><pubDate>Fri, 05 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-05:europython-2013/getting-started-with-plone-cms-development-part-1.html</guid><category>scm</category><category>web</category><category>continuous-integration</category><category>testing</category><category>buildout</category><category>javascript</category><category>framework</category><category>html</category><category>zope</category><category>best-practices</category><category>CMS</category><category>plone</category><category>tutorial</category></item><item><title>Getting started with Plone CMS development - Part 2</title><link>https://pyvideo.org/europython-2013/getting-started-with-plone-cms-development-part-2.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nejc Zupan</dc:creator><pubDate>Fri, 05 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-05:europython-2013/getting-started-with-plone-cms-development-part-2.html</guid><category>scm</category><category>web</category><category>continuous-integration</category><category>testing</category><category>buildout</category><category>javascript</category><category>framework</category><category>html</category><category>zope</category><category>best-practices</category><category>CMS</category><category>plone</category><category>tutorial</category></item><item><title>Python: da programmatore a domatore</title><link>https://pyvideo.org/europython-2013/python-da-programmatore-a-domatore.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alessandro Pisa</dc:creator><pubDate>Fri, 05 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-05:europython-2013/python-da-programmatore-a-domatore.html</guid><category>debugging</category><category>testing</category><category>integration</category><category>scalability</category><category>tdd</category><category>optimization</category><category>design</category><category>software-engineering</category><category>best-practices</category><category>architecture</category></item><item><title>Testing Django applications with pytest</title><link>https://pyvideo.org/europython-2013/testing-django-applications-with-pytest.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andreas Pelme</dc:creator><pubDate>Fri, 05 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-05:europython-2013/testing-django-applications-with-pytest.html</guid><category>testing</category><category>tdd</category><category>django</category></item><item><title>Testing for beginners</title><link>https://pyvideo.org/europython-2013/testing-for-beginners.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Writing automated tests for your code is a requirement in modern
software development and there lots of tools for collecting and running
tests. There are also lots of instructions for how to use the tools.&lt;/p&gt;
&lt;p&gt;However, there are very few places where you can find out how to write
your code so that it is testable and how to write meaningful tests.&lt;/p&gt;
&lt;p&gt;This talk will focus on best practices for writing tests and you should
come away from it with a better understanding of what kinds of test to
write, when to write them and how to think about testing problems.&lt;/p&gt;
&lt;p&gt;The talk is designed for beginner coders and people who have recently
started to learn Python. We will be using the Python unittest framework
and py.test in the examples.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jacob Hallén</dc:creator><pubDate>Fri, 05 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-05:europython-2013/testing-for-beginners.html</guid><category>quality-assurance</category><category>testing</category><category>principles</category></item><item><title>A hands-on introduction to software testing (reloaded) - Part 1</title><link>https://pyvideo.org/europython-2013/a-hands-on-introduction-to-software-testing-reloaded-part-1.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Federico Caboni</dc:creator><pubDate>Thu, 04 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-04:europython-2013/a-hands-on-introduction-to-software-testing-reloaded-part-1.html</guid><category>quality-assurance</category><category>trac</category><category>testing</category><category>tdd</category><category>refactoring</category><category>teamwork</category><category>software-engineering</category><category>best-practices</category><category>performance</category></item><item><title>A hands-on introduction to software testing (reloaded) - Part 2</title><link>https://pyvideo.org/europython-2013/a-hands-on-introduction-to-software-testing-reloaded-part-2.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Federico Caboni</dc:creator><pubDate>Thu, 04 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-04:europython-2013/a-hands-on-introduction-to-software-testing-reloaded-part-2.html</guid><category>quality-assurance</category><category>trac</category><category>testing</category><category>tdd</category><category>refactoring</category><category>teamwork</category><category>software-engineering</category><category>best-practices</category><category>performance</category></item><item><title>A hands-on introduction to software testing (reloaded) - Part 3</title><link>https://pyvideo.org/europython-2013/a-hands-on-introduction-to-software-testing-reloaded-part-3.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Federico Caboni</dc:creator><pubDate>Thu, 04 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-04:europython-2013/a-hands-on-introduction-to-software-testing-reloaded-part-3.html</guid><category>quality-assurance</category><category>trac</category><category>testing</category><category>tdd</category><category>refactoring</category><category>teamwork</category><category>software-engineering</category><category>best-practices</category><category>performance</category></item><item><title>devpi: driving your packaging and testing needs</title><link>https://pyvideo.org/europython-2013/devpi-driving-your-packaging-and-testing-needs.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Holger Krekel</dc:creator><pubDate>Thu, 04 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-04:europython-2013/devpi-driving-your-packaging-and-testing-needs.html</guid><category>packaging</category><category>quality-assurance</category><category>testing</category></item><item><title>Meta Programming - Some Use Cases for Everyday Programming</title><link>https://pyvideo.org/europython-2013/meta-programming-some-use-cases-for-everyday-programming.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mike Müller</dc:creator><pubDate>Thu, 04 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-04:europython-2013/meta-programming-some-use-cases-for-everyday-programming.html</guid><category>debugging</category><category>metaprogramming</category><category>testing</category><category>principles</category><category>refactoring</category><category>application-design</category><category>architecture</category><category>validation</category><category>software-engineering</category></item><item><title>Mocket: a Socket Mock Framework</title><link>https://pyvideo.org/europython-2013/mocket-a-socket-mock-framework.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Giorgio Salluzzo</dc:creator><pubDate>Thu, 04 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-04:europython-2013/mocket-a-socket-mock-framework.html</guid><category>testing</category><category>socket</category><category>tdd</category></item><item><title>TDD from scratch</title><link>https://pyvideo.org/europython-2013/tdd-from-scratch.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrea Crotti</dc:creator><pubDate>Thu, 04 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-04:europython-2013/tdd-from-scratch.html</guid><category>best-practices</category><category>testing</category><category>tdd</category></item><item><title>Tools for successful project development</title><link>https://pyvideo.org/europython-2013/tools-for-successful-project-development.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Domen Kožar</dc:creator><pubDate>Thu, 04 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-04:europython-2013/tools-for-successful-project-development.html</guid><category>project-management</category><category>testing</category><category>pyramid</category></item><item><title>Vaurien The Chaos TCP Proxy</title><link>https://pyvideo.org/europython-2013/vaurien-the-chaos-tcp-proxy.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Tarek Ziadé</dc:creator><pubDate>Thu, 04 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-04:europython-2013/vaurien-the-chaos-tcp-proxy.html</guid><category>sysadmin</category><category>web</category><category>quality-assurance</category><category>testing</category></item><item><title>Python: from programmer to tamer</title><link>https://pyvideo.org/europython-2013/python-from-programmer-to-tamer.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alessandro Pisa</dc:creator><pubDate>Wed, 03 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-03:europython-2013/python-from-programmer-to-tamer.html</guid><category>debugging</category><category>testing</category><category>integration</category><category>scalability</category><category>tdd</category><category>optimization</category><category>design</category><category>software-engineering</category><category>best-practices</category><category>architecture</category></item><item><title>The ‘Agile Movement’</title><link>https://pyvideo.org/europython-2013/the-agile-movement.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Russell Sherwood</dc:creator><pubDate>Wed, 03 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-03:europython-2013/the-agile-movement.html</guid><category>bdd</category><category>continuous-integration</category><category>project-management</category><category>agile</category><category>testing</category><category>principles</category><category>tdd</category><category>pair-programming</category><category>XP</category></item><item><title>Will ipython replace bash?</title><link>https://pyvideo.org/europython-2013/will-ipython-replace-bash.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;While python is widely used for automating administration tasks, it’s
not still widely known and used between system administrators.&lt;/p&gt;
&lt;p&gt;iPython is an interactive python shell that embeds bash functionalities.
We’ll show how to :&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;replace some bash tasks avoiding common errors&lt;/li&gt;
&lt;li&gt;resembling some bash behaviour&lt;/li&gt;
&lt;li&gt;create testing (nose) and monitoring scripts&lt;/li&gt;
&lt;li&gt;reuse existing python modules (eg.iotop, psutil, …)&lt;/li&gt;
&lt;li&gt;use flask to expose those scripts on HTTP&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Wanna see something specific? Leave a comment! We’ll tune the talk
agenda on the audience interests!&lt;/p&gt;
&lt;div class="section" id="there-is-also-a-teaser-video"&gt;
&lt;h4&gt;There is also a teaser video.&lt;/h4&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Roberto Polli</dc:creator><pubDate>Wed, 03 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-03:europython-2013/will-ipython-replace-bash.html</guid><category>flask</category><category>testing</category><category>devops</category><category>sysadmin</category><category>linux</category><category>iPython</category><category>bash</category></item><item><title>Bug hunting for dummies</title><link>https://pyvideo.org/europython-2013/bug-hunting-for-dummies.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Antonio Cuni</dc:creator><pubDate>Tue, 02 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-02:europython-2013/bug-hunting-for-dummies.html</guid><category>debugging</category><category>testing</category><category>programming</category><category>tdd</category><category>gdb</category><category>code generation</category><category>pdb</category></item><item><title>Functional testing with Python</title><link>https://pyvideo.org/europython-2013/functional-testing-with-python.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kay Schluehr</dc:creator><pubDate>Tue, 02 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-02:europython-2013/functional-testing-with-python.html</guid><category>testing</category><category>automation</category></item><item><title>Obey the Testing Goat! Rigorous Test-Driven Web Development with Django and Selenium - Part 1</title><link>https://pyvideo.org/europython-2013/obey-the-testing-goat-rigorous-test-driven-web-development-with-django-and-selenium-part-1.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Harry Percival</dc:creator><pubDate>Tue, 02 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-02:europython-2013/obey-the-testing-goat-rigorous-test-driven-web-development-with-django-and-selenium-part-1.html</guid><category>testing</category><category>selenium</category><category>tdd</category><category>django</category></item><item><title>Obey the Testing Goat! Rigorous Test-Driven Web Development with Django and Selenium - Part 2</title><link>https://pyvideo.org/europython-2013/obey-the-testing-goat-rigorous-test-driven-web-development-with-django-and-selenium-part-2.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Harry Percival</dc:creator><pubDate>Tue, 02 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-02:europython-2013/obey-the-testing-goat-rigorous-test-driven-web-development-with-django-and-selenium-part-2.html</guid><category>testing</category><category>selenium</category><category>tdd</category><category>django</category></item><item><title>Obidire alla capra! TDD con Python i Selenium</title><link>https://pyvideo.org/europython-2013/obidire-alla-capra-tdd-con-python-i-selenium.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Harry Percival</dc:creator><pubDate>Tue, 02 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-02:europython-2013/obidire-alla-capra-tdd-con-python-i-selenium.html</guid><category>testing</category><category>selenium</category><category>tdd</category><category>django</category></item><item><title>pytest - rapid and simple testing with Python</title><link>https://pyvideo.org/europython-2013/pytest-rapid-and-simple-testing-with-python.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Holger Krekel</dc:creator><pubDate>Tue, 02 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-02:europython-2013/pytest-rapid-and-simple-testing-with-python.html</guid><category>professional</category><category>quality-assurance</category><category>testing</category></item><item><title>TDM: Test-Driven Madness</title><link>https://pyvideo.org/europython-2013/tdm-test-driven-madness.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Rob Collins</dc:creator><pubDate>Tue, 02 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-02:europython-2013/tdm-test-driven-madness.html</guid><category>bdd</category><category>XP</category><category>testing</category><category>tdm</category><category>tdd</category></item><item><title>Integration tests ready to use with pytest-play</title><link>https://pyvideo.org/pycon-italia-2018/integration-tests-ready-to-use-with-pytest-play.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In my talk I will introduce a new pytest plugin with which it is very
easy (even for non-technical) go to create and run new integration
testing at any level of IOT complex systems.&lt;/p&gt;
&lt;p&gt;pytest-play is a pytest plugin that allows you to play a JSON file that
describes some actions and assertions. We can use actions like: -
Selenium, driving the browser for the UI test - MQTT messages,
simulating a device - API calls - queries to Cassandra or PostgresSQL
(in the future) - custom commands, thanks to the pluggable architecture
Other advantages: - UI tests more reliable with implicit waits before
interacting with the elements - BDD support to make the scenario more
legible - reusability of steps&lt;/p&gt;
&lt;p&gt;I will show you how easy it is to create a json and execute it on the
fly on a Continuous Integration system. So let’s start having fun in
testing with pytest-play.&lt;/p&gt;
&lt;p&gt;References:&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;domenica 22 aprile&lt;/strong&gt; at 12:00 &lt;a class="reference external" href="/p3/schedule/pycon9/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Serena Martinetti</dc:creator><pubDate>Sun, 22 Apr 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-04-22:pycon-italia-2018/integration-tests-ready-to-use-with-pytest-play.html</guid><category>continuous-integration</category><category>open source</category><category>Python</category><category>testing</category><category>selenium</category><category>integration</category><category>api</category><category>pytest</category><category>Functional Testing</category></item><item><title>Testing, then once you got there?</title><link>https://pyvideo.org/pycon-italia-2018/testing-then-once-you-got-there.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;I benefici di una testsuite completa e coerente sono un dato di fatto,
ma una volta completata la nostra test suite è lì che cominciano i veri
problemi ed è lì che diventa meno chiaro come muoversi.&lt;/p&gt;
&lt;p&gt;Che rapporto tenere tra le tipologie di test? Le Unit Test sono
efficienti per identificare problemi e garantire comportamenti
consistenti sul lungo termine, ma sono come verificare che le gambe
camminano e le braccia fanno le flessioni senza verificare che un uomo
intero riesca a camminare e fare le flessioni. I test e2e invece sono
efficacissimi nel garantire il comportamento del sistema nel suo
insieme, ma possono rapidamente diventare lenti ed insostenibili.&lt;/p&gt;
&lt;p&gt;Sappiamo bene che ci sono i mock e fake objects, ma quando veramente mi
conviene usare uno, l’altro o l’implementazione reale? Un test che
riceve dei MagicMock e ritorna un MagicMock quanto è affidabile
realmente?&lt;/p&gt;
&lt;p&gt;Se ho decine di sviluppatori quanto serve testare i feature branches
isolatamente dagli altri feature branches?&lt;/p&gt;
&lt;p&gt;Questo talk cerca di evidenziare le problematiche che si devono
affrontare quando si parla di testing di un progetto di grande
complessità, che integra decine di servizi e cerca di fornire alcune
best practices pur conscio che non c’è mai una sola risposta.&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;sabato 21 aprile&lt;/strong&gt; at 12:45 &lt;a class="reference external" href="/p3/schedule/pycon9/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alessandro Molina</dc:creator><pubDate>Sat, 21 Apr 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-04-21:pycon-italia-2018/testing-then-once-you-got-there.html</guid><category>best-practices</category><category>testing</category><category>software-engineering</category><category>coverage</category><category>application-development</category></item><item><title>Una zuppa di Python</title><link>https://pyvideo.org/pycon-italia-2018/una-zuppa-di-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In questo talk, pensato principalmente per neofiti o per chi vuole
approfondire le sue conoscenze di base su Python, introdurrò brevemente
diversi argomenti, cercando di dare consigli utili, dritte sul modo
migliore di scrivere alcuni pezzi di codice e presentandovi strumenti
all’avanguardia. Nessun requisito particolare è richiesto.&lt;/p&gt;
&lt;p&gt;Tramite una serie di esempi, piccoli problemi e soluzioni, vi mostrerò
molti oggetti che possono fare una grossa differenza nel vostro percorso
di crescita (e nel vostro codice!). Non temete, però, la quantità di
argomenti trattati: è possibile che ne conosciate già una buona parte e
l’obiettivo è, prima di tutto, dare qualche direzione verso nuovi
orizzonti. Lo spirito di questo talk non è di diventare esperti in un
solo argomento, ma di imparare qualche nuova nozione, e vedere qualche
“snippet”, che possa rendere più veloce e divertente scrivere codice in
Python.&lt;/p&gt;
&lt;p&gt;Una succosa zuppa di Python, con dentro molti ingredienti, ma che
formano un piatto gustoso a palati diversi. Un esempio di cosa
assaggerete? Venv, testing, tips, iteratori, builtins e una spolveratina
di zen-zero!&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;sabato 21 aprile&lt;/strong&gt; at 18:30 &lt;a class="reference external" href="/p3/schedule/pycon9/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alessandro Re</dc:creator><pubDate>Sat, 21 Apr 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-04-21:pycon-italia-2018/una-zuppa-di-python.html</guid><category>best-practices</category><category>testing</category><category>generators</category><category>python3</category></item><item><title>PaaS per tutti i gusti: CI/CD sotto controllo con Kubernetes e Dokku</title><link>https://pyvideo.org/pycon-italia-2018/paas-per-tutti-i-gusti-cicd-sotto-controllo-con-kubernetes-e-dokku.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In questo talk saranno illustrati processi e workflow tipici dei
paradigmi del DevOp e delle metodologie Agile. Vedremo quali
&lt;strong&gt;accorgimenti&lt;/strong&gt; devono essere presi con le applicazioni pacchettizzate
con &lt;strong&gt;Docker&lt;/strong&gt; , in particolare le applicazioni Django e come &lt;strong&gt;evitare
le problematiche principali che portano frustrazione e impediscono
un’adozione reale della CI/CD&lt;/strong&gt;. Saranno presentati degli esempi pratici
&lt;strong&gt;workflow&lt;/strong&gt; implementati con successo, in modo snello, versionato e
ripetibile, in ambienti che vanno dal test fino alla produzione. In
ultimo faremo una carrellata dei sistemi di &lt;strong&gt;PaaS&lt;/strong&gt; più in voga del
momento concentrandoci quindi su &lt;strong&gt;Dokku&lt;/strong&gt; e &lt;strong&gt;Kubernetes&lt;/strong&gt; , che
coprono tutto il ventaglio delle necessità di deploy, dal piccolo sito
fino al sistema ultra scalabile e ridondato.&lt;/p&gt;
&lt;p&gt;Prerequisito per il talk è conoscere i concetti base di Docker e
dell’uso di git. Durante il talk con 3 distinti esempi e demo di
complessità crescente esploreremo il mondo della CI/CD.&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;venerdì 20 aprile&lt;/strong&gt; at 12:30 &lt;a class="reference external" href="/p3/schedule/pycon9/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Claudio Mignanti</dc:creator><pubDate>Fri, 20 Apr 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-04-20:pycon-italia-2018/paas-per-tutti-i-gusti-cicd-sotto-controllo-con-kubernetes-e-dokku.html</guid><category>paas</category><category>continuous-integration</category><category>gitlab</category><category>kubernetes</category><category>testing</category><category>git</category><category>docker</category></item><item><title>The practice of TDD: tips&amp;tricks</title><link>https://pyvideo.org/pycon-italia-2018/the-practice-of-tdd-tipstricks.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Test Driven Development is a well known practice in software
development. However, passing from knowing the principles of TDD to
applying them in real world situations is not straightforward: the aim
of this talk is to help the audience to fill the gap and apply TDD
effectively in Python. The talk will include:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;a brief overview of most popular tools and libraries (e.g. unittest,
pytest, nose, tox)&lt;/li&gt;
&lt;li&gt;useful design patterns&lt;/li&gt;
&lt;li&gt;common mistakes and how to avoid them&lt;/li&gt;
&lt;li&gt;some real life example taken from the projects the author has worked
on in the past 15 years (including PyPy, pdb++, capnpy)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This talk is primarily aimed at beginners.&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;Friday 20 April&lt;/strong&gt; at 11:00 &lt;a class="reference external" href="/en/sprints/schedule/pycon9/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Antonio Cuni</dc:creator><pubDate>Fri, 20 Apr 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-04-20:pycon-italia-2018/the-practice-of-tdd-tipstricks.html</guid><category>testing</category><category>test-driven-development</category><category>tdd</category><category>patterns</category><category>pytest</category><category>test</category><category>best-practices</category></item><item><title>Automated Testing Framework</title><link>https://pyvideo.org/pycon-ca-2017/automated-testing-framework.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Avocado is a next generation testing framework inspired by Autotest
and modern development tools such as git. One can call it a test
framework with benefits. Native tests are written in Python and they
follow the unit test pattern, but any executable can serve as a test.&lt;/p&gt;
&lt;p&gt;In this presentation we will cover the Avocado architecture, main
features, demonstrations and we will also compare Avocado with some
known test runners.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Amador Pahim</dc:creator><pubDate>Fri, 28 Oct 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-10-28:pycon-ca-2017/automated-testing-framework.html</guid><category>avocado</category><category>testing</category></item><item><title>PyVCR - Or how we cut our testing time from 5mins to 5s</title><link>https://pyvideo.org/pycon-israel-2018/pyvcr-or-how-we-cut-our-testing-time-from-5mins-to-5s.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A few months ago we decided to upgrade our CI to include integration tests beyond the usual unit tests for our DNA synthesis and ordering platform. Rather than mocking our complex microservices environment, we chose to use VCR to record and replay the interactions. We will discuss the pros &amp;amp; cons of using PyVCR with examples and a walk through on how to use it.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nir Krakowski</dc:creator><pubDate>Tue, 05 Jun 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-06-05:pycon-israel-2018/pyvcr-or-how-we-cut-our-testing-time-from-5mins-to-5s.html</guid><category>testing</category><category>pyvcr</category></item><item><title>Controlling apples with snakes: Automating mobile apps with Appium</title><link>https://pyvideo.org/pycon-us-2018/controlling-apples-with-snakes-automating-mobile-apps-with-appium.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Testing mobile applications is hard. Testing manually is nearly impossible.
That’s where automated testing shines. Just sit back and watch the machine go!
Python is a very powerful language for writing automated tests, but since Python is not installed on mobile platforms, we need to find a way to remotely control and monitor the device.
But how do we automate a device remotely? The answer is Appium.&lt;/p&gt;
&lt;p&gt;In this talk I will go over the process of deploying and testing iOS (or Android) applications, and how to work with Appium to easily generate Python 3 code for testing your application.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nir Arad</dc:creator><pubDate>Sat, 12 May 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-05-12:pycon-us-2018/controlling-apples-with-snakes-automating-mobile-apps-with-appium.html</guid><category>appium</category><category>testing</category><category>mobile</category></item><item><title>"WHAT IS THIS MESS?" - Writing tests for pre-existing code bases</title><link>https://pyvideo.org/pycon-us-2018/what-is-this-mess-writing-tests-for-pre-existing-code-bases.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Many of us practice test driven development, and pride ourselves in our code coverage. This is relatively easy to do when you begin a new project, but what happens when you take over an existing code base with little to no tests? Where and how do you start writing tests? This task can be very intimidating and frustrating, but can be accomplished!&lt;/p&gt;
&lt;p&gt;This talk will run through some common approaches and methodologies for adding test coverage to pre-existing code (that you might not even be familiar with at all). The next time you take over an untested monolith,  you will be able to do the right thing and start writing tests instead of hoping for the best!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Justin Crown</dc:creator><pubDate>Fri, 11 May 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-05-11:pycon-us-2018/what-is-this-mess-writing-tests-for-pre-existing-code-bases.html</guid><category>testing</category></item><item><title>Concurrent Testing wiht py.test</title><link>https://pyvideo.org/pybay-2017/concurrent-testing-wiht-pytest.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Introducing a different way to perform concurrent testing with the py.test framework.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Reverb Chu</dc:creator><pubDate>Sun, 13 Aug 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-08-13:pybay-2017/concurrent-testing-wiht-pytest.html</guid><category>lightning talks</category><category>pytest</category><category>testing</category></item><item><title>Regole pratiche per testare la documentazione</title><link>https://pyvideo.org/pycon-italia-2017/regole-pratiche-per-testare-la-documentazione.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Nel lontano 1999 Tim Peters fece alcune
&lt;a class="reference external" href="https://groups.google.com/forum/#!msg/comp.lang.python/DfzH5Nrt05E/Yyd3s7fPVxwJ"&gt;considerazioni&lt;/a&gt;
in merito alla documentazione del codice. Scrisse che &lt;em&gt;gli esempi non
hanno prezzo&lt;/em&gt;, che &lt;em&gt;gli esempi che non funzionano sono peggio di quelli
inutili&lt;/em&gt;, e che &lt;em&gt;gli esempi che funzionano alla fine diventano esempi
che non funzionano&lt;/em&gt;. Queste sostanzialmente furono le motivazioni che lo
spinsero a scrivere il modulo
&lt;a class="reference external" href="https://docs.python.org/3/library/doctest.html"&gt;doctest&lt;/a&gt; della
libreria standard. Da quel momento nel mondo Python si è iniziato a
prestare particolare attenzione ai test della documentazione. Non
abbastanza però. Si pensi che attualmente (inizio 2017), la
documentazione ufficiale di Python conta circa 450 failures su 2100 test
complessivi. Questi fallimenti sono dovuti solo in minima parte ad
esempi errati. Generalmente (ma anche in questo caso specifico) le cause
sono la mancanza di isolamento tra i test, assieme alla scarsa
dimestichezza con il framework di test. Entrambe le cause possono
portare a brutte sorprese, come ad esempio dei test ballerini, che a
volte passano e a volte no, senza apparente motivo. Lo scopo di questo
talk è quindi mostrare come scrivere correttamente gli esempi ed il
codice presenti nella documentazione (doc utente, tutorial, docstring,
libri, o altro), in modo da tenere sotto controllo la situazione ed
evitare spiacevoli sorprese e perdite di tempo.&lt;/p&gt;
&lt;p&gt;Materiale: &lt;a class="reference external" href="https://github.com/marco-buttu/pycon8"&gt;https://github.com/marco-buttu/pycon8&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Marco Buttu</dc:creator><pubDate>Sun, 09 Apr 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-04-09:pycon-italia-2017/regole-pratiche-per-testare-la-documentazione.html</guid><category>documentation</category><category>sphinx</category><category>doctest</category><category>testing</category></item><item><title>Roboto Framework for Test Code Coverage for cloud services.</title><link>https://pyvideo.org/pycon-italia-2017/roboto-framework-for-test-code-coverage-for-cloud-services.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Test case design is an important phase of software testing life cycle
where test cases are identified. Designing test cases for cloud
solutions requires a different approach from traditional application
oriented testing. The quality which is multidimensional will include
more attributes like network resiliency, fault recovery, reliability and
availability when it comes to cloud-based solutions. If such aspects
when not encompassed through test development framework, it will lead to
high chances of defect leakage in production in an agile mode of
delivery. We propose a strategy to design the test cases which traverse
across different levels of testing to find gaps using the Roboto
framework with Python. The solution provides the teams and the product
owners to get a picture of what is getting tested and how much of
coverage is done. The data can be used in team release discussions to
build confidence in the tests that gets executed as part of that
release. &lt;a class="reference external" href="https://github.com/robotframework/robotframework"&gt;https://github.com/robotframework/robotframework&lt;/a&gt; Testing
performed for features in a product is diverse and can be widely
categorized into functional, non-functional like reliability, fault
injections etc. Though developing test cases for functional changes is
achievable, arriving at test cases for non-functional requirements is
challenging in the given two-week sprint cycle of agile, and so leads to
defect leakage. Some vital modules in a project would have been running
in production for years and would have different sets of teams working
at different periods. Quantifying test code coverage and quality only by
a number of test cases per feature does not suffice as testing is
multidimensional and has to span across different levels. Measuring and
improving the test code coverage is the challenge generally faced by
product teams.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">khushbu parakh</dc:creator><pubDate>Sun, 09 Apr 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-04-09:pycon-italia-2017/roboto-framework-for-test-code-coverage-for-cloud-services.html</guid><category>quality-assurance</category><category>Functional Testing</category><category>Python</category><category>testing</category><category>robustness</category><category>integration</category><category>automation</category><category>framework</category><category>deployment</category><category>google-cloud</category></item><item><title>ByteCode al supporto dei test per protocolli ed enforcing di best practices</title><link>https://pyvideo.org/pycon-italia-2017/bytecode-al-supporto-dei-test-per-protocolli-ed-enforcing-di-best-practices.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python è un linguaggio interpretato con efficaci strumenti di
introspezione, fino a permetterci di accedere al suo bytecode e vedere
cosa la virtual machine sta per eseguire. Per quanto questa esigenza sia
solitamente molto limitata in ambito di produzione ed uso del software
può venirci utile all’interno delle test suite per verificare che il
codice scritto da terzi o dal noi stessi del domani rispetti ancora dei
protocolli o delle best practices che avevamo presupposto.&lt;/p&gt;
&lt;p&gt;La maggior parte di queste esigenze possono essere soddisfatte anche
tramite l’uso di metaclassi o monkeypatching, ma in alcuni casi è
possibile saltare i check preposti involontariamente (ad esempio
ereditando dalla classe sbagliata nel caso delle metaclassi), mentre la
verifica del byte code ci consente di controllare cosa effettivamente
sarà eseguito, non cosa ci aspettiamo sia eseguito.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alessandro Molina</dc:creator><pubDate>Sat, 08 Apr 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-04-08:pycon-italia-2017/bytecode-al-supporto-dei-test-per-protocolli-ed-enforcing-di-best-practices.html</guid><category>quality-assurance</category><category>CPython</category><category>testing</category><category>robustness</category><category>static-typing</category><category>bytecode</category><category>hacking</category><category>compiler</category></item><item><title>Mutation Testing in Python with Cosmic Ray</title><link>https://pyvideo.org/ndc-oslo-2016/mutation-testing-in-python-with-cosmic-ray.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Mutation testing is a technique for systematically mutating source code in order to validate test suites. It works by making small changes to a program’s source code and then running a test suite; if the test suite passes on mutated code then a flag is raised. The goal is to check that a system’s test suite is sufficiently powerful to detect a large class of functionality-affecting changes, thereby helping ensure that the system functions as expected. Mutation testing is a fascinating topic with great potential that has valuable lessons for the broader software development community.
I’ll begin this talk with a description of the theory behind mutation testing. We’ll look at how it works and the benefits it can provide. We’ll also consider some of the practical difficulties associated with the technique, including long runtimes and certain difficult classes of mutants. I’ll then move into an analysis of Cosmic Ray, a tool for mutation testing in Python. I'll demonstrate using Cosmic Ray to locate untested code not detected by traditional coverage techniques in an open source library – with surprising results.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Mutation testing is a technique for systematically mutating source code in order to validate test suites. It works by making small changes to a program’s source code and then running a test suite; if the test suite passes on mutated code then a flag is raised. The goal is to check that a system’s test suite is sufficiently powerful to detect a large class of functionality-affecting changes, thereby helping ensure that the system functions as expected. Mutation testing is a fascinating topic with great potential that has valuable lessons for the broader software development community.
I’ll begin this talk with a description of the theory behind mutation testing. We’ll look at how it works and the benefits it can provide. We’ll also consider some of the practical difficulties associated with the technique, including long runtimes and certain difficult classes of mutants. I’ll then move into an analysis of Cosmic Ray, a tool for mutation testing in Python. I'll demonstrate using Cosmic Ray to locate untested code not detected by traditional coverage techniques in an open source library – with surprising results.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Austin Bingham</dc:creator><pubDate>Tue, 21 Jun 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-06-21:ndc-oslo-2016/mutation-testing-in-python-with-cosmic-ray.html</guid><category>unit testing</category><category>testing</category><category>mutation testing</category><category>ndc</category><category>ndcoslo</category><category>ndcoslo2016</category></item><item><title>ExpAn - A Python library for advanced statistical analysis of A/B tests</title><link>https://pyvideo.org/pydata-berlin-2016/expan-a-python-library-for-advanced-statistical-analysis-of-ab-tests.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Description&lt;/p&gt;
&lt;p&gt;A/B tests have been adopted by various companies in different industries to drive the data-driven decision making process. Therefore, a statistically solid analytic framework is of common interest to a large community. We'll introduce the ExpAn library developed for the statistical evaluation of A/B tests, it has a generic data structure and all functions are standalone.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;A/B tests, or randomized controlled experiments, have been widely applied in different industries to optimize the business process and the user experience. Here we'll introduce a Python library, ExpAn, intended for the statistical analysis of A/B tests.&lt;/p&gt;
&lt;p&gt;The input data to ExpAn has a standard format, which is defined to interface with different data sources. The main statistical functions in ExpAn are all standalone and work with either the library-specific input data structure or some Python built-in data types. Among others, the functions can be used to assess whether the randomization is appropriate, and measure the expectation and error margin of the uplift due to the treatment. We also implemented a robust discretization algorithm to handle typical heavy-tailed distributions in the real world. Finally, a generic result structure is designed to incorporate results from different types of analyses.&lt;/p&gt;
&lt;p&gt;One can easily feed data from other domain-specific data fetching modules into ExpAn. Other advanced algorithms for the analysis of A/B test data can be implemented and plugged into ExpAn, eg. a Bayesian hypothesis testing scheme instead of the frequentist approach. The generality of the result structure also makes it handy to apply different kinds of visualization on top of the data.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jie Bao</dc:creator><pubDate>Mon, 06 Jun 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-06-06:pydata-berlin-2016/expan-a-python-library-for-advanced-statistical-analysis-of-ab-tests.html</guid><category>testing</category><category>expan</category></item><item><title>Outside-In TDD</title><link>https://pyvideo.org/pycon-us-2016/harry-percival-outside-in-tdd-pycon-2016.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Speaker: Harry Percival&lt;/p&gt;
&lt;p&gt;An intermediate-level Test-Driven-Development workshop, presented as a hands-on exploration of &amp;quot;&amp;quot;outside-in&amp;quot;&amp;quot; TDD, in the style of a code-dojo code kata.  Will include discussion of &amp;quot;&amp;quot;double-loop&amp;quot;&amp;quot; BDD/TDD, outside-in vs inside-out, a detailed discussion of the pros + cons of mocking, test isolation, letting the tests drive design, and what are tests for anyway?&lt;/p&gt;
&lt;p&gt;Slides can be found at: &lt;a class="reference external" href="https://speakerdeck.com/pycon2016"&gt;https://speakerdeck.com/pycon2016&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/PyCon/2016-slides"&gt;https://github.com/PyCon/2016-slides&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Harry Percival</dc:creator><pubDate>Thu, 09 Jun 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-06-09:pycon-us-2016/harry-percival-outside-in-tdd-pycon-2016.html</guid><category>testing</category><category>tdd</category><category>Django</category><category>bdd</category></item><item><title>Introduction to Unit Testing in Python with Pytest</title><link>https://pyvideo.org/pycon-us-2016/michael-tom-wing-christie-wilson-introduction-to-unit-testing-in-python-with-pytest-pycon-2016.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Speakers: Michael Tom-Wing, Christie Wilson&lt;/p&gt;
&lt;p&gt;In this tutorial we’ll be taking you on a journey into the wonderful land of unit testing with pytest. We’ll be taking a step by step approach by iteratively adding unit test coverage to our awesome Cat In A Box™ project. You will also get a crash course on Git, Github, virtualenvs, and test automation. By the end, we hope that you’ll have a desire to bring testing to our own projects!&lt;/p&gt;
&lt;p&gt;Slides can be found at: &lt;a class="reference external" href="https://speakerdeck.com/pycon2016"&gt;https://speakerdeck.com/pycon2016&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/PyCon/2016-slides"&gt;https://github.com/PyCon/2016-slides&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michael Tom-Wing</dc:creator><pubDate>Mon, 30 May 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-05-30:pycon-us-2016/michael-tom-wing-christie-wilson-introduction-to-unit-testing-in-python-with-pytest-pycon-2016.html</guid><category>pytest</category><category>testing</category></item><item><title>How to test the hard stuff</title><link>https://pyvideo.org/boston-python-meetup/boston-python-meetup--how-to-test-the-hard-stuff.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Stephan will cover testing network-driven components, RDB stubbing, test
setup layering and stuff like that. Recently he used manuel to do this
sort of testing by simulating CLIs and Shell access in a doctest-style
test, so he may cover that as well.&lt;/p&gt;
&lt;p&gt;Bring your testing challenges and the impossible to automate projects
that haunt you at night, we'll see what Stephan can do with them.&lt;/p&gt;
&lt;p&gt;Boston Python Meetup: May 2010&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Stephan Richter</dc:creator><pubDate>Wed, 19 May 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-05-19:boston-python-meetup/boston-python-meetup--how-to-test-the-hard-stuff.html</guid><category>bostonpy</category><category>session</category><category>testing</category><category>unittest</category></item><item><title>Testing: Where do I start?</title><link>https://pyvideo.org/boston-python-meetup/boston-python-meetup--testing--where-do-i-start.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Marshall will cover basic unit test concepts and quickly move to making
your tests motivating, easy to run and adding testing to an existing
project. He's aiming squarely at developers who have projects they want
to use testing for, but don't know where to get started.&lt;/p&gt;
&lt;p&gt;Have you wanted to become test-infected but couldn't find the start of
the thread to pull? Marshall will help.&lt;/p&gt;
&lt;p&gt;Boston Python Meetup, May 2010&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Marshall Weir</dc:creator><pubDate>Wed, 19 May 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-05-19:boston-python-meetup/boston-python-meetup--testing--where-do-i-start.html</guid><category>bostonpy</category><category>session</category><category>testing</category><category>unittest</category></item><item><title>Tox</title><link>https://pyvideo.org/chipy/tox.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;It's a great new open source tool that helps you support all versions of
python with your existing automated tests. It's not a test runner, it's
a super test runner runner! Or something. There is no easy way to
describe it which is why the front page of the website is sort of
confusing, IMO. We use tox on the Nose project to make sure each code
change doesn't break the tests in Python 2.4, 2.5, 2.6, 2.7, 3.0 or
Jython. Not everybody targets so many environments but if you want to
maintain a widely used module then you probably will want to use tox
someday.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Here's our Hudson matrix setup w/ tox:
&lt;a class="reference external" href="http://hudson.testrun.org/job/nose-unstable/"&gt;http://hudson.testrun.org/job/nose-
unstable/&lt;/a&gt; (we just set
this up recently which is why most builds were broken in one or two
envs) I can also spend some time going over how we are currently
maintaining a test suite that runs in both 2.x and 3.x simultaneously.&lt;/p&gt;
&lt;p&gt;This will be our Best Meeting Ever!&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://codespeak.net/tox/"&gt;http://codespeak.net/tox/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://chipy.org/"&gt;http://chipy.org/&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kumar McMillan</dc:creator><pubDate>Thu, 11 Nov 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-11-11:chipy/tox.html</guid><category>chipy</category><category>testing</category><category>tox</category></item><item><title>Lightning Talks Day 2</title><link>https://pyvideo.org/djangocon-us-2009/djangocon-2009--lightning-talks-day-2.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Lightning Talks Day 2&lt;/p&gt;
&lt;p&gt;(00:09) Dive into CPython Bytecode - Alex Gaynor&lt;/p&gt;
&lt;p&gt;(05:10) Testing with pywatch - Chris Heisel&lt;/p&gt;
&lt;p&gt;(07:08) Pluggable Django E-Commerce - Aaron Cuker and someone else&lt;/p&gt;
&lt;p&gt;(12:13) Introduction to Surlex - Cody Soyland&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alex Gaynor</dc:creator><pubDate>Wed, 09 Sep 2009 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2009-09-09:djangocon-us-2009/djangocon-2009--lightning-talks-day-2.html</guid><category>bytecode</category><category>cpython</category><category>djangocon</category><category>djangocon2009</category><category>pywatch</category><category>surlex</category><category>testing</category></item><item><title>Token Testing Talk</title><link>https://pyvideo.org/djangocon-us-2009/djangocon-2009--token-testing-talk.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Token Testing Talk&lt;/p&gt;
&lt;p&gt;Presented by Eric Holscher&lt;/p&gt;
&lt;p&gt;Talks about testing in Django.&lt;/p&gt;
&lt;p&gt;[VIDEO HAS ISSUES: audio in left channel only]&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Eric Holscher</dc:creator><pubDate>Tue, 08 Sep 2009 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2009-09-08:djangocon-us-2009/djangocon-2009--token-testing-talk.html</guid><category>djangocon</category><category>djangocon2009</category><category>testing</category></item><item><title>Testing: The Developer Strikes Back</title><link>https://pyvideo.org/djangocon-us-2011/djangocon-2011--testing--the-developer-strikes-ba.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Testing: The Developer Strikes Back&lt;/p&gt;
&lt;p&gt;Sandy Strong&lt;/p&gt;
&lt;p&gt;“Code not tested is broken by design” - Jacob Kaplan-Moss&lt;/p&gt;
&lt;p&gt;Every programming project has unique testing needs. It’s not always easy
to understand what those needs are, or how to write tests that satisfy
them. One of our goals as developers is to write tests that minimize
failures in production that can cost our companies time, money,
resources, and in many cases, hours of sleep!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Unknown</dc:creator><pubDate>Mon, 05 Sep 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-09-05:djangocon-us-2011/djangocon-2011--testing--the-developer-strikes-ba.html</guid><category>coverage.py</category><category>djangocon</category><category>djangocon2011</category><category>jenkins</category><category>testing</category><category>web</category></item><item><title>Testing with Lettuce and Splinter</title><link>https://pyvideo.org/djangocon-us-2011/djangocon-2011--testing-with-lettuce-and-splinter.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Testing with Lettuce and Splinter&lt;/p&gt;
&lt;p&gt;Presented by Adam Nelson&lt;/p&gt;
&lt;p&gt;Lettuce, adapted from Ruby's Cucumber, is a behavior driven development
(BDD) testing suite that sits on top of Splinter - a web driver for
simulating real- world usage of your site. Learn the ins and outs of BDD
using Lettuce and Splinter for rapid deployment.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Adam Nelson</dc:creator><pubDate>Mon, 05 Sep 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-09-05:djangocon-us-2011/djangocon-2011--testing-with-lettuce-and-splinter.html</guid><category>djangocon</category><category>djangocon2011</category><category>lettuce</category><category>splinter</category><category>testing</category></item><item><title>Django's Nasal Passage</title><link>https://pyvideo.org/djangocon-us-2012/djangos-nasal-passage.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Django's testrunner gets you started quickly, but you soon hit your head
on its limitations as your project grows. By trading it for nose, a
testing framework popular in the wider Python community, we can reduce
boilerplate, boost performance, and improve testing UI, with only a few
lines of setting changes. Re-use your test DBs, integrate with Jenkins,
split your suite into pieces, and more.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;ul class="simple"&gt;
&lt;li&gt;Why nose?&lt;ul&gt;
&lt;li&gt;Pain points with standard Django testing&lt;/li&gt;
&lt;li&gt;Extensibility without writing custom, uncombineable testrunner
subclasses&lt;/li&gt;
&lt;li&gt;Rich ecosystem of helpful plugins&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;django-nose&lt;ul&gt;
&lt;li&gt;Testing just your apps, not all the random installed stuff&lt;/li&gt;
&lt;li&gt;Test-selection tricks: running just failed tests, running a
module, etc.&lt;/li&gt;
&lt;li&gt;Killing the boilerplate:&lt;/li&gt;
&lt;li&gt;No more imports into &lt;strong&gt;init&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;No more class name collisions and accidental shadowing&lt;/li&gt;
&lt;li&gt;With all this freedom, how best should you organize your tests?&lt;/li&gt;
&lt;li&gt;Going 4 times faster with fixture bundling&lt;/li&gt;
&lt;li&gt;Troubleshooting&lt;/li&gt;
&lt;li&gt;Fixtures are evil&lt;/li&gt;
&lt;li&gt;Where do I put the factories?&lt;/li&gt;
&lt;li&gt;Speeding startup with test DB reuse&lt;/li&gt;
&lt;li&gt;Writing faster TransactionTestCases with hygienic base classes&lt;/li&gt;
&lt;li&gt;Background on Django's handling of TransactionTestCases&lt;/li&gt;
&lt;li&gt;How to improve matters&lt;/li&gt;
&lt;li&gt;Test-only models: what's the best practice?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;nose-progressive&lt;ul&gt;
&lt;li&gt;Dots considered harmful. When will my tests be done?&lt;/li&gt;
&lt;li&gt;Patience is for the dead. Show me my tracebacks as they happen!&lt;/li&gt;
&lt;li&gt;My terminal is only this big. Don't waste my space.&lt;/li&gt;
&lt;li&gt;Hiding pointless stack frames&lt;/li&gt;
&lt;li&gt;Editor round-tripping for quick debugging&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Splitting into sub-suites&lt;ul&gt;
&lt;li&gt;An introduction to the attr plugin&lt;/li&gt;
&lt;li&gt;Have some run only on CI machines, some constantly, others before
checkin&lt;/li&gt;
&lt;li&gt;Choosing tests with regexes&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Other fun plugins&lt;ul&gt;
&lt;li&gt;f7u12, for when your tests get angry&lt;/li&gt;
&lt;li&gt;Coverage&lt;/li&gt;
&lt;li&gt;xunit, for your continual integration pleasure&lt;/li&gt;
&lt;li&gt;Profiling&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Erik Rose</dc:creator><pubDate>Thu, 06 Sep 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-09-06:djangocon-us-2012/djangos-nasal-passage.html</guid><category>django</category><category>nose</category><category>testing</category></item><item><title>Lessons in Testing</title><link>https://pyvideo.org/djangocon-us-2012/lessons-in-testing-0.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Learn from failures (and successes) around testing patterns and culture
in a growing company, both in amount of code, and number of engineers.
We'll dive into how DISQUS adopted testing, and the many challenges
we've had to overcome.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Testing can be one of the more difficult concepts to pick up in a
development cycle. With the complexities of large projects, and even
small projects, writing effective, automated tests can take many times
longer than writing the code and testing it by hand.&lt;/p&gt;
&lt;p&gt;This talk will explore the various patterns of testing that DISQUS has
implemented, and iterated upon over the last two years. It will describe
how testing has been used to speed up the product lifecycle, improve
stability through automation, and the culture shift required to get
there. Most importantly, it will cover the practices that have been put
in place that have helped ease the burden of writing tests.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">David Cramer</dc:creator><pubDate>Wed, 05 Sep 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-09-05:djangocon-us-2012/lessons-in-testing-0.html</guid><category>django</category><category>testing</category></item><item><title>sqlmap - security development in Python</title><link>https://pyvideo.org/europython-2011/sqlmap-security-development-in-python.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Miroslav Stampar - 23 June 2011 in &amp;quot;Track Tagliatelle&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The &amp;quot;sqlmap&amp;quot; is one of the largest, widely used and most active Python
projects in the IT security community (more than 2000 commits in one
year period with community of over 100 active testers). It combines it's
developers' strong security knowledge together with analytical,
mathematical and Python development skills to provide IT professionals
with vibrant features.&lt;/p&gt;
&lt;p&gt;Talk would be consisted of several parts: short introduction to project
and developers, developing and testing environment, programming cycle,
program's workflow, technologies used, common pitfalls and how we've
circumvent them, usage of mathematical models, optimizations, project's
future goals.&lt;/p&gt;
&lt;p&gt;The significant part of this talk would be the immediate insight into
the developing process of probably the world's most advanced open-source
Python IT security project today.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Miroslav Stampar</dc:creator><pubDate>Sun, 24 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-24:europython-2011/sqlmap-security-development-in-python.html</guid><category>community</category><category>security</category><category>testing</category></item><item><title>Emulating Stackless and greenlet with each other</title><link>https://pyvideo.org/europython-2011/emulating-stackless-and-greenlet-with-each-other.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Peter Szabo - 20 June 2011 in &amp;quot;Track Ravioli&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Stackless Python and the greenlet package for CPython are two different
implementations of coroutine support for Python. (Coroutines are
fundamental building blocks of I/O frameworks like gevent, Eventlet,
Concurrence and Syncless to conveniently handle thousands of socket
connections at a time without creating threads.) Stackless and greenlet
implement a different interface. However, each is powerful enough so
that it can be used to emulate the other one. In this talk we explore
the differences and discuss design decisions and testing strategies of
the emulations we have implemented.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://syncless.googlecode.com/svn/trunk/doc/slides_2011-06-20/pts_em%20u_coro_2011-06-20.html"&gt;Slides&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://syncless.googlecode.com/svn/trunk/doc/s%20lides_2010-11-29/pts_coro_2010-11-29.html"&gt;Slides for the bonus
sub-talk&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Péter Szabó</dc:creator><pubDate>Thu, 21 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-21:europython-2011/emulating-stackless-and-greenlet-with-each-other.html</guid><category>concurrence</category><category>cpython</category><category>design</category><category>greenlet</category><category>stackless</category><category>testing</category></item><item><title>OpenStack Compute's automated testing</title><link>https://pyvideo.org/europython-2011/openstack-computes-automated-testing.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Soren Hansen - 24 June 2011 in &amp;quot;Track Tagliatelle &amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;When a patch is propoed against OpenStack compute (a.k.a. Nova) and it
makes it through our peer review process, our automated test system
takes over:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;It finds the approved patch on Launchpad;&lt;/li&gt;
&lt;li&gt;An attempt to merge the patch is performed;&lt;/li&gt;
&lt;li&gt;The unit tests are run;&lt;/li&gt;
&lt;li&gt;A PEP-8 check is run;&lt;/li&gt;
&lt;li&gt;The merge is completed, applying the patch to our trunk;&lt;/li&gt;
&lt;li&gt;A tarball is built and published;&lt;/li&gt;
&lt;li&gt;An Ubuntu source package is built for several editions of Ubuntu;&lt;/li&gt;
&lt;li&gt;The source packages get uploaded to a PPA;&lt;/li&gt;
&lt;li&gt;Once built, the packages are installed on a test setup;&lt;/li&gt;
&lt;li&gt;A test battery is run against the installed &amp;quot;cloud&amp;quot;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I'll explain the various steps, showing how it works and attempt to
demonstrate it (Murphy's law permitting), and then I'll speak about the
benefits we've gotten from PPA's and working closely with Ubuntu.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Soren Hansen</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-13:europython-2011/openstack-computes-automated-testing.html</guid><category>openstack</category><category>packages</category><category>testing</category></item><item><title>Writing Books using Python &amp; Open Source Software</title><link>https://pyvideo.org/europython-2011/writing-books-using-python-open-source-software.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] wesley chun - 20 June 2011 in &amp;quot;Track Ravioli&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;All of us are familiar with using open source tools to develop software
applications with, but instead of writing code, it is also possible to
create the manuscript of a book in very much the same way. These days,
authors have many choices in terms of the tools which are available to
aid them in writing a book. Gone are the times when the only option is
using a proprietary word processor, so why not try it using open source
tools? It's especially attractive to those who develop software using
open source tools as well those who are writing books about open source
tools. Both code and the written word are created in plain text files.
These files are easily archived using some version control system. They
can be shared easily via e-mail and can also be backed up in the same
manner. In the end, the final product is shipped to the customer: in the
case of software, it's distribution via CD or DVD, or perhaps a release
for installation on a server, and for a book, it's delivering a
manuscript to the publisher, perhaps in a format such as HTML or PDF®.&lt;/p&gt;
&lt;p&gt;Upon some reflection, writing a book is, in many ways, similar to
writing an application: you create text or code which is saved to a file
(or files- typically one but could be more) file in some format,
proprietary or otherwise. Additions, changes, or deletions are made to
the file(s), which is then updated when the file is (re)saved. Backups
need to be made, some versioning may be required to keep track of
multiple files during the course of development, and finally, the
resulting file(s) have to be delivered, as described above. Because of
all the similarities described, we assert that it is possible to use a
development environment utilizing Python and other open source tools to
not only write application with, but also be able to create the entire
manuscript for a book as well! While this entire concept should not
really be mind-blowing, it does represent a trend seemingly growing in
popularity in the open source world.&lt;/p&gt;
&lt;p&gt;In particular, we highlight the following requirements that are
necessary when creating a manuscript, especially with co-authors:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Text Formatting&lt;/li&gt;
&lt;li&gt;Editing&lt;/li&gt;
&lt;li&gt;Versioning and Backups&lt;/li&gt;
&lt;li&gt;Automated Testing of Code&lt;/li&gt;
&lt;li&gt;HTML/PDF® Generation&lt;/li&gt;
&lt;li&gt;Author Communication&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In this talk, we highlight one particular case study, the development of
Addison Wesley's 2009 publication, &amp;quot;Python Web Development with Django&amp;quot;,
as well as provide some insight into other projects created using
similar tools. Open source software has radically affected how
applications are built today, and this phenomenon has the ability to
affect the book publishing world in the same way.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Wesley J. Chun</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-13:europython-2011/writing-books-using-python-open-source-software.html</guid><category>cd</category><category>html</category><category>testing</category><category>web</category></item><item><title>Michael Dunstan - Testing Demo</title><link>https://pyvideo.org/kiwi-pycon-2009/michael-dunstan---testing-demo.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Testing Demo&lt;/p&gt;
&lt;p&gt;Presented by Michael Dunstan&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;Live demo of writing code and tests.&lt;/p&gt;
&lt;p&gt;Outline&lt;/p&gt;
&lt;p&gt;This live demo is intended for people that have not seen test driven
development in action before. See what a failing test should look like.
And then I'll attempt to write some code to make that test pass so that
you can see what a successful test run looks like - I may need some help
from the audience at that point. Along the way you'll see various
features of the test framework 'nose' in action and even some doctests.
This will be a second attempt of the stunt first performed:
&lt;a class="reference external" href="http://nzpug.org/MeetingsAuckland/August2009"&gt;http://nzpug.org/MeetingsAuckland/Augus
t2009.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Slides: &lt;a class="reference external" href="http://www.slideshare.net/michaeldunstan/testing-%20workshop-2455697"&gt;http://www.slideshare.net/michaeldunstan/testing-
workshop-2455697&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[VIDEO HAS ISSUES: Sound and video are poor. Slides are hard to read.]&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michael Dunstan</dc:creator><pubDate>Sat, 07 Nov 2009 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2009-11-07:kiwi-pycon-2009/michael-dunstan---testing-demo.html</guid><category>doctests</category><category>kiwipycon</category><category>kiwipycon2009</category><category>tdd</category><category>testing</category></item><item><title>PyConAU 2010: Don't Break It: Continuous Integration &amp; Deployment</title><link>https://pyvideo.org/pycon-au-2010/pyconau-2010--don--39-t-break-it--continuous-inte.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Don't Break It: Continuous Integration &amp;amp; Deployment&lt;/p&gt;
&lt;p&gt;Presented by Benno Rice&lt;/p&gt;
&lt;p&gt;So you've developed your application, it appears to work and you may
even have some tests to back that up. Now what?&lt;/p&gt;
&lt;p&gt;One part of software development that tends to receive not nearly enough
attention is the process of deploying, supporting and maintaining your
code in production. This demonstration will give an overview of using
tools such as Hudson, nose, stdeb and freshen to automate the testing,
packaging, deployment and verification of production software.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Benno Rice</dc:creator><pubDate>Sat, 26 Jun 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-06-26:pycon-au-2010/pyconau-2010--don--39-t-break-it--continuous-inte.html</guid><category>agile</category><category>architecture</category><category>packaging</category><category>pyconau</category><category>pyconau2010</category><category>testing</category></item><item><title>Behaviour Driven Development</title><link>https://pyvideo.org/pycon-au-2011/behaviour-driven-development.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Writing software in an organisation or for ourselves, many people feel
that they &amp;quot;should&amp;quot; somehow be doing Test Driven Development (TDD)
because &amp;quot;everybody else&amp;quot; is and it's cool, somewhere between necessary
and useful and they heard testing was good. When informed that must of
TDD isn't about testing (despite the name!), confusion reigns. Behaviour
Driven Development is a different way of approaching the &amp;quot;how to
validate your code&amp;quot; problem.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Malcolm Tredinnick</dc:creator><pubDate>Mon, 22 Aug 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-08-22:pycon-au-2011/behaviour-driven-development.html</guid><category>tdd</category><category>testing</category></item><item><title>Benchmarking stuff made ridiculously easy (with lots of pictures)</title><link>https://pyvideo.org/pycon-au-2011/benchmarking-stuff-made-ridiculously-easy-with-l.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;(Mic issues for first ~1:30) Tennessee has been working on a module for
integrating cpu time management with unit testing using an easy-to-use
decorator. With all the options turned on, this will produce a a
performance history, tracked by revision, integrated with the software
used to produce the benchmarking graphs as used
on&amp;amp;nbsp_place_holder;http://speed.pypy.org/. You too can have this
kind of shinyness for (almost) free!.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Tennessee J Leeuwenburg</dc:creator><pubDate>Mon, 22 Aug 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-08-22:pycon-au-2011/benchmarking-stuff-made-ridiculously-easy-with-l.html</guid><category>performance</category><category>testing</category></item><item><title>The NCSS Challenge: teaching programming via automated testing</title><link>https://pyvideo.org/pycon-au-2011/the-ncss-challenge-teaching-programming-via-auto.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;The NCSS Challenge (&lt;a class="reference external" href="http://challenge.ncss.edu.au/"&gt;http://challenge.ncss.edu.au/&lt;/a&gt;) is an online
programming competition for Australian high school students. There are
four different courses being run during 2011: Introductory Python,
Intermediate Python, Advanced Python, and Embedded Systems (using the
Arduino). In 2010 we had over 1700 students participate in the
Challenge. There are a number of interesting technical challenges which
had to be overcome in order to facilitate such a system.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Tim Dawborn</dc:creator><pubDate>Mon, 22 Aug 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-08-22:pycon-au-2011/the-ncss-challenge-teaching-programming-via-auto.html</guid><category>embedded</category><category>teaching</category><category>testing</category></item><item><title>Django Testing Tips</title><link>https://pyvideo.org/pycon-au-2012/django-testing-tips.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Django's test framework is excellent for ensuring that your site/app is
robust, but is often neglected because of the time it can take to build
and maintain a comprehensive test suite. Here we will discuss a number
of tips and tricks to reduce the overheads involved.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Django's test framework is excellent for ensuring that your site/app is
robust, but is often neglected because of the time it can take to build
and maintain a comprehensive test suite. Here we will discuss a number
of tips and tricks to reduce the overheads involved and have you writing
reusable tests almost as fast as you can test in the browser itself.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Simon Meers</dc:creator><pubDate>Wed, 22 Aug 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-08-22:pycon-au-2012/django-testing-tips.html</guid><category>django</category><category>testing</category></item><item><title>Funcargs and other fun with pytest</title><link>https://pyvideo.org/pycon-au-2012/funcargs-and-other-fun-with-pytest.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Pytest is a mature and comprehensive testing suite for Python projects,
but it can be a little intimidating for newcomers. Where do these
mysterious funcargs come from, how do parametrised tests work, and where
are my xUnit-style setUp and tearDown methods?&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Pytest is a mature and comprehensive testing suite for Python projects,
but it can be a little intimidating for newcomers. Where do these
mysterious funcargs come from, how do parametrised tests work, and where
are my xUnit-style setUp and tearDown methods?&lt;/p&gt;
&lt;p&gt;Pytest lives by &amp;quot;convention over configuration&amp;quot; - which is great once
you know what the conventions are. This talk will look at real examples
of pytest in use, emphasising the features that differentiate it from
nose.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Brianna Laugher</dc:creator><pubDate>Wed, 22 Aug 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-08-22:pycon-au-2012/funcargs-and-other-fun-with-pytest.html</guid><category>pytest</category><category>testing</category></item><item><title>Agile testing in the large</title><link>https://pyvideo.org/pycon-de-2012/agile-testing-in-the-large.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Im Vortrag &amp;quot;Agile testing in the large&amp;quot; nutze ich wieder OpenSource
Tools die leider nicht alle in Python implementiert sind, jedoch
hervorragend geeignet sind, um u.a. Python Webapplikationen zu testen.&lt;/p&gt;
&lt;p&gt;Der Vortrag erläuterte das Testen moderner Web-Anwendungen und gliedert
sich so:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Einleitung&lt;/li&gt;
&lt;li&gt;Continuous Integration&lt;/li&gt;
&lt;li&gt;kleine Entwickler-Tests&lt;/li&gt;
&lt;li&gt;mittlere und große Entwickler-Tests&lt;/li&gt;
&lt;li&gt;Acceptance Testing mit Selenium2&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Themen exploratory Testing und Performance Testing bleiben absichtlich
unbehandelt.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mark Fink</dc:creator><pubDate>Wed, 31 Oct 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-10-31:pycon-de-2012/agile-testing-in-the-large.html</guid><category>testing</category></item><item><title>Designing and Testing PyZMQ Applications</title><link>https://pyvideo.org/pycon-de-2012/designing-and-testing-pyzmq-applications.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;PyZMQ ist eine mächtige aber dennoch einfach zu benutzende
Netzwerkbibliothek.&lt;/p&gt;
&lt;p&gt;Neben ZeroMQ’s und PyZMQ’s ausführlicher Dokumentation existieren auch
einige&lt;/p&gt;
&lt;p&gt;gute Tutorials. Über einfache Beispiele oder allgemeine
System-Architekturen&lt;/p&gt;
&lt;p&gt;gehen sie jedoch oft nicht hinaus.&lt;/p&gt;
&lt;p&gt;In diesem Vortrag werden daher Wege gezeigt, wie größere
PyZMQ-Anwendungen&lt;/p&gt;
&lt;p&gt;entworfen und getestet werden können. Behandelt werden dabei neben
Unit-Tests&lt;/p&gt;
&lt;p&gt;auch Prozess- und System-Tests.&lt;/p&gt;
&lt;p&gt;Der Vortrag basiert auf den Erfahrungen, die der Autor bei der
Entwicklung&lt;/p&gt;
&lt;p&gt;eines verteilten Simulations-Frameworks gemacht hat.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Stefan Scherfke</dc:creator><pubDate>Wed, 31 Oct 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-10-31:pycon-de-2012/designing-and-testing-pyzmq-applications.html</guid><category>application design</category><category>ømq</category><category>process tests</category><category>pyzmq</category><category>system tests</category><category>testing</category><category>unit tests</category><category>zeromq</category></item><item><title>py.test - feature and new release highlights</title><link>https://pyvideo.org/pycon-de-2013/pytest-feature-and-new-release-highlights.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;py.test is a popular tool for writing tests in Python. It offers unique
features not found in other testing tools. Apart from some basics, this
talk introduces the modular fixture mechanism, the assert statement
reporting and discusses the latest news of pytest-2.4 such as better
doctest support and using contextmanagers in conjunction with fixtures.
We'll also quickly discuss the most popular from the many existing
plugins.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Holger Krekel</dc:creator><pubDate>Thu, 17 Oct 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-10-17:pycon-de-2013/pytest-feature-and-new-release-highlights.html</guid><category>fixtures</category><category>pytest</category><category>testing</category></item><item><title>-getrieben. Wer treibt eigentlich die Test-Entwicklung?</title><link>https://pyvideo.org/pycon-de-2013/-getrieben-wer-treibt-eigentlich-die-test-entwic.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;In den letzten Jahren machen auch in der Python-Welt immer mehr
“getriebene” Entwicklungsmethoden die Runde, so zum Beispiel Test Driven
Development, Behavior Driven Development oder Feature Driven
Development. Kaum ist davon die Rede, kommen noch weitere Schlagworte
aus dem Bereich des Testens, wie Acceptance Test, Unit Test, Functional
Test oder Integration Test, dazu und die Verwirrung ist oftmals perfekt.
Verliert man in diesem Dschungel an Begriffen den Überblick, ist die
Gefahr gegeben, dass man das Testen entweder ganz lässt oder keine der
Methoden richtig anzuwenden.&lt;/p&gt;
&lt;p&gt;Der Vortrag gibt eine Ordnung für diese Begriffe und versucht dadurch
etwas mehr Licht ins Dickicht zu bringen. Dabei steht weniger die
lehrbuchartige Klassifizierung der Methoden im Vordergrund, sondern es
wird die Fragestellung verfolgt, wer eigentlich die Zielgruppe eines
Tests ist. Das können neben Entwicklern auch Qualitätssicherer,
Projektleiter und -Mitglieder, aber auch letztlich Kunden eines
Produktes sein. Wer “liest” also die Testergebnisse und in welcher Form
sollten die Ergebnisse vorliegen, damit sie nutzbar sind. Zusammen mit
einer Betrachtung der unterschiedlichen Test-Gegenstände wird die Wahl
der Test-Methode und die Implementierung der Tests klarer.&lt;/p&gt;
&lt;p&gt;Zu den vorgestellten Methoden werden beispielhaft Python-Test-Frameworks
wie zum Beispiel Selenium, das Robot-Framework und klassische
UnitTest-Frameworks vorgestellt. Anhand von kurzen Code-Beispielen wird
der Einsatz dieser Werkzeuge für bestimmte Methodiken verdeutlicht und
es wird gezeigt, wie auf Basis der Testergebnisse Berichte und Metriken
für die jeweiligen Zielgruppen generiert werden können.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andi Albrecht</dc:creator><pubDate>Tue, 15 Oct 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-10-15:pycon-de-2013/-getrieben-wer-treibt-eigentlich-die-test-entwic.html</guid><category>testing</category></item><item><title>devpi: driving packaging and testing needs</title><link>https://pyvideo.org/pycon-de-2013/devpi-driving-packaging-and-testing-needs.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;devpi provides both a private pypi server, a self-updating
pypi.python.org package cache, and work flow commands for uploading,
testing and installing packages. This talk shows some example scenarios
and discusses the unique feature of seemlessly &amp;quot;inheriting&amp;quot; the
pypi.python.org packages into your private index. We'll also look into
how you can perform testing of a package before you push a release to
the public index or your company-specific private index.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Holger Krekel</dc:creator><pubDate>Tue, 15 Oct 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-10-15:pycon-de-2013/devpi-driving-packaging-and-testing-needs.html</guid><category>packaging</category><category>qa</category><category>testing</category></item><item><title>Building a Simple Configuration-driven Web Testing Framework With Twill</title><link>https://pyvideo.org/pycon-us-2009/building-simple-configuration-driven-web-testing-f.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Building a flexible and scalable functional testing framework for your
application is typically an evolutionary process. You experiment and
find things that work, and things that don't, particularly if you have
little programming experience. Sometimes, you proceed down a path that
binds your hands later down the road, and a massive refactor is needed.
I would like to present a simple testing framework built upon several
existing, free technologies (ConfigObj, twill, nose) and models (Page
Objects, Scenario Objects, Abstract State Machines) that is easy to
configure, extend, and maintain.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kevin Boers</dc:creator><pubDate>Tue, 17 Feb 2009 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2009-02-17:pycon-us-2009/building-simple-configuration-driven-web-testing-f.html</guid><category>testing</category><category>twill</category></item><item><title>PyCon 2009: Functional Testing of Desktop Applications (#1)</title><link>https://pyvideo.org/pycon-us-2009/pycon-2009--functional-testing-of-desktop-applica.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Many advocates of unit testing believe that testing desktop (GUI)
applications is so difficult as to not be worth it. Not only is it
possible, but 'functional testing' (testing an application from the
point of view of the user) is an important part of an agile development
process.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Unknown</dc:creator><pubDate>Tue, 17 Feb 2009 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2009-02-17:pycon-us-2009/pycon-2009--functional-testing-of-desktop-applica.html</guid><category>functionaltesting</category><category>pycon</category><category>pycon2009</category><category>testing</category></item><item><title>PyCon 2009: Plenary: Afternoon Lightning Talks</title><link>https://pyvideo.org/pycon-us-2009/pycon-2009--plenary--afternoon-lightning-talks.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Plenary: Afternoon Lightning Talks&lt;/p&gt;
&lt;p&gt;(00:05) Easy command line parsing with argparse - Steven Bethard&lt;/p&gt;
&lt;p&gt;(04:14) Moments - Charles Brandt&lt;/p&gt;
&lt;p&gt;(11:45) Crowdsourcing lightning -&lt;/p&gt;
&lt;p&gt;(13:40) Python 3.1 changes - Benjamin Peterson&lt;/p&gt;
&lt;p&gt;(19:35) The Poor Man's Continuous Integration - Zain Memon&lt;/p&gt;
&lt;p&gt;(25:55) cluemapper - Nate Aune&lt;/p&gt;
&lt;p&gt;(29:55) ReleaseBot - Brian Warner&lt;/p&gt;
&lt;p&gt;(34:50) worldPloneday - Jordan Baker and Roberto&lt;/p&gt;
&lt;p&gt;(40:15) blist - Daniel Stutzbach&lt;/p&gt;
&lt;p&gt;(45:10) Python Open Source Overview on Launchpad - Gary Poster&lt;/p&gt;
&lt;p&gt;(49:50) Pyjamas - Bernd Dorn&lt;/p&gt;
&lt;p&gt;(53:50) &amp;nbsp;is Evil and IP Addresses in Python - Gregory Smith&lt;/p&gt;
&lt;p&gt;(56:00) ctypes - Jason Coombs&lt;/p&gt;
&lt;p&gt;(61:10) Come to EuroPython - Jonathan Hartley&lt;/p&gt;
&lt;p&gt;(65:45) Zope - Lennart Regebro&lt;/p&gt;
&lt;p&gt;(71:05) Site Checker - Eric Holscher&lt;/p&gt;
&lt;p&gt;(76:20) PSF Community Awards&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steven Bethard</dc:creator><pubDate>Tue, 17 Feb 2009 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2009-02-17:pycon-us-2009/pycon-2009--plenary--afternoon-lightning-talks.html</guid><category>lightning talks</category><category>argparse</category><category>blist</category><category>cluemapper</category><category>ctypes</category><category>launchpad</category><category>moments</category><category>plone</category><category>pycon</category><category>pycon2009</category><category>pyjamas</category><category>python31</category><category>sitechecker</category><category>testing</category><category>twill</category><category>zope</category></item><item><title>PyCon 2009: py.test II - cross-platform and distributed testing (Part 3 of 3)</title><link>https://pyvideo.org/pycon-us-2009/pycon-2009--py-test-ii---cross-platform-and-dist0.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;py.test II - cross-platform and distributed testing (part 3 of 3)&lt;/p&gt;
&lt;p&gt;Want to know more about advanced automated testing with Python? Use a
tool that allows you to ad-hoc distribute tests to multiple CPUs for
speed and to multiple platforms for compatibility checks? With tons of
debugging help in failure situations? This tutorial provides in-depth
information on advanced usages of the popular py.test tool. We highlight
its current feature set including using and writing extensions for
generating HTML pages, testing Javascript or ReST documents. We showcase
and discuss ways of distributing tests across CPUs and platforms and
will leave time to discuss and tackle specific scenarios brought up
during the session. The tutorial format will be an interactive lecture
with plenty of time for questions.&lt;/p&gt;
&lt;p&gt;[VIDEO HAS ISSUES: ]&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Unknown</dc:creator><pubDate>Tue, 17 Feb 2009 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2009-02-17:pycon-us-2009/pycon-2009--py-test-ii---cross-platform-and-dist0.html</guid><category>pycon</category><category>pycon2009</category><category>pytest</category><category>py.test</category><category>testing</category><category>tutorial</category></item><item><title>PyCon 2009: py.test II - cross-platform and distributed testing (Part 1 of 3)</title><link>https://pyvideo.org/pycon-us-2009/pycon-2009--py-test-ii---cross-platform-and-dist1.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;py.test II - cross-platform and distributed testing (part 1 of 3)&lt;/p&gt;
&lt;p&gt;Want to know more about advanced automated testing with Python? Use a
tool that allows you to ad-hoc distribute tests to multiple CPUs for
speed and to multiple platforms for compatibility checks? With tons of
debugging help in failure situations? This tutorial provides in-depth
information on advanced usages of the popular py.test tool. We highlight
its current feature set including using and writing extensions for
generating HTML pages, testing Javascript or ReST documents. We showcase
and discuss ways of distributing tests across CPUs and platforms and
will leave time to discuss and tackle specific scenarios brought up
during the session. The tutorial format will be an interactive lecture
with plenty of time for questions.&lt;/p&gt;
&lt;p&gt;[VIDEO HAS ISSUES: ]&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Unknown</dc:creator><pubDate>Tue, 17 Feb 2009 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2009-02-17:pycon-us-2009/pycon-2009--py-test-ii---cross-platform-and-dist1.html</guid><category>pycon</category><category>pycon2009</category><category>pytest</category><category>py.test</category><category>testing</category><category>tutorial</category></item><item><title>PyCon 2009: py.test II - cross-platform and distributed testing (Part 2 of 3)</title><link>https://pyvideo.org/pycon-us-2009/pycon-2009--py-test-ii---cross-platform-and-distr.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;py.test II - cross-platform and distributed testing (part 2 of 3)&lt;/p&gt;
&lt;p&gt;Want to know more about advanced automated testing with Python? Use a
tool that allows you to ad-hoc distribute tests to multiple CPUs for
speed and to multiple platforms for compatibility checks? With tons of
debugging help in failure situations? This tutorial provides in-depth
information on advanced usages of the popular py.test tool. We highlight
its current feature set including using and writing extensions for
generating HTML pages, testing Javascript or ReST documents. We showcase
and discuss ways of distributing tests across CPUs and platforms and
will leave time to discuss and tackle specific scenarios brought up
during the session. The tutorial format will be an interactive lecture
with plenty of time for questions.&lt;/p&gt;
&lt;p&gt;[VIDEO HAS ISSUES: ]&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Unknown</dc:creator><pubDate>Tue, 17 Feb 2009 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2009-02-17:pycon-us-2009/pycon-2009--py-test-ii---cross-platform-and-distr.html</guid><category>pycon</category><category>pycon2009</category><category>pytest</category><category>py.test</category><category>testing</category><category>tutorial</category></item><item><title>PyCon 2009: ToscaWidgets: Test Driven Modular Ajax (Part 2 of 2)</title><link>https://pyvideo.org/pycon-us-2009/pycon-2009--toscawidgets--test-driven-modular-aj0.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;[VIDEO HAS ISSUES: room's AC was loud] If you have ever struggled with
having to re-create the same content in multiple places in your web
application it might be time to look at ToscaWidgets. ToscaWidgets gives
the developer the ability to create reusable web content. This 3 hour
lesson will cover installation, integration, and usage of ToscaWidgets.
After we have a handle on how to create validated forms with
ToscaWidgets, we will spend the second half of this lesson creating a
working ajax widget, which we will test the client side component using
ToscaWidget javascript technology.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Unknown</dc:creator><pubDate>Tue, 17 Feb 2009 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2009-02-17:pycon-us-2009/pycon-2009--toscawidgets--test-driven-modular-aj0.html</guid><category>pycon</category><category>pycon2009</category><category>testing</category><category>toscawidgets</category></item><item><title>PyCon 2009: ToscaWidgets: Test Driven Modular Ajax (Part 1 of 2)</title><link>https://pyvideo.org/pycon-us-2009/pycon-2009--toscawidgets--test-driven-modular-aja.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;[VIDEO HAS ISSUES: room's AC was loud] If you have ever struggled with
having to re-create the same content in multiple places in your web
application it might be time to look at ToscaWidgets. ToscaWidgets gives
the developer the ability to create reusable web content. This 3 hour
lesson will cover installation, integration, and usage of ToscaWidgets.
After we have a handle on how to create validated forms with
ToscaWidgets, we will spend the second half of this lesson creating a
working ajax widget, which we will test the client side component using
ToscaWidget javascript technology.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Unknown</dc:creator><pubDate>Tue, 17 Feb 2009 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2009-02-17:pycon-us-2009/pycon-2009--toscawidgets--test-driven-modular-aja.html</guid><category>pycon</category><category>pycon2009</category><category>testing</category><category>toscawidgets</category></item><item><title>Pycon 2010: Analysis: The other kind of testing (#185)</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--analysis--the-other-kind-of-testing--.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Analysis: The other kind of testing&lt;/p&gt;
&lt;p&gt;Presented by Bob Ippolito&lt;/p&gt;
&lt;p&gt;Software testing helps verify that your code meets a specification, but
not how to improve the specification. How can you stay competitive when
most of the big names today are using analysis to guide product
evolution? Level the playing field and make better products by learning
how to design experiments, collect data, make measurements, and optimize
your specifications.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Bob Ippolito</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--analysis--the-other-kind-of-testing--.html</guid><category>analysis</category><category>pycon</category><category>pycon2010</category><category>testing</category></item><item><title>Creating RESTful Web services with restish (#17)</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--creating-restful-web-services-with-re.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Creating RESTful Web Services with restish&lt;/p&gt;
&lt;p&gt;Presented by Grig Gheorghiu&lt;/p&gt;
&lt;p&gt;Roy Fielding described REST in his Ph.D. dissertation in the year 2000.
Almost ten years later, Web developers are still confused as to how to
apply the REST principles in their applications. Examples of poorly
designed 'REST' APIs abound, and I will make use of them in my talk.&lt;/p&gt;
&lt;p&gt;In this presentation, I will give an overview of REST and its design
principles, and I will show a concrete example of a RESTful Web service
implemented in the restish framework. My examples will include CRUD
operations, as well as transactions. I will also show how to consume
this Web service using both httplib2 and curl. I would be remiss if I
didn't describe ways to test the Web service with WebTest and twill.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Grig Gheorghiu</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--creating-restful-web-services-with-re.html</guid><category>pycon</category><category>pycon2010</category><category>rest</category><category>restish</category><category>testing</category><category>web</category></item><item><title>Introduction to unittest (a.k.a. PyUnit) (#96)</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--introduction-to-unittest--a-k-a--pyun.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Introduction to Unittest (a.k.a. PyUnit)&lt;/p&gt;
&lt;p&gt;Presented by Chander K Ganesan&lt;/p&gt;
&lt;p&gt;The PyUnit (unittest) unit testing framework provides an easy-to-use set
of tools and techniques to add robust unit testing to your Python code.
By integrating unit testing in their code, developers allow for a robust
set of tools to quickly and easily identify &amp;quot;broken&amp;quot; code.&lt;/p&gt;
&lt;p&gt;In this session we'll explore the unittest module and demonstrate how to
leverage PyUnit for unit testing.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chander Ganesan</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--introduction-to-unittest--a-k-a--pyun.html</guid><category>pycon</category><category>pycon2010</category><category>pyunit</category><category>testing</category><category>unittest</category></item><item><title>Python 201: How to Solve It Using Python</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--python-201--how-to-solve-it-using-pyt.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python 201: How to Solve it using Python&lt;/p&gt;
&lt;p&gt;Presented by Senthil Kumaran&lt;/p&gt;
&lt;p&gt;One good way to develop applications is to divide the problem into
smaller manageable chunks and the build those. Once we identify and
define those smaller piece of tasks, our problem becomes incredibly
easy.&lt;/p&gt;
&lt;p&gt;But we are still faced with the question of what is the best way to do
that smaller task in Python? This tutorial will answer those questions.&lt;/p&gt;
&lt;p&gt;In this tutorial, we will identify the commonly occurring tasks that
would fit into to bigger problems and learn how do we solve it using
Python.&lt;/p&gt;
&lt;p&gt;The aim of the tutorial is help you develop the correct intuition when
developing applications using Python.&lt;/p&gt;
&lt;p&gt;Intended Audience&lt;/p&gt;
&lt;p&gt;Beginning to intermediate Python Programmers. Familiarity with Python's
syntax and usage is assumed.&lt;/p&gt;
&lt;p&gt;This tutorial will use Python 3.1 examples (with changes from Python 2.6
explained, when it is required).&lt;/p&gt;
&lt;p&gt;The source code and the handout will contain the snippets written in
both Python 2.6 and Python 3.1.&lt;/p&gt;
&lt;p&gt;Class Outline&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Outline of the Tutorial and a Brief Overview of Standard Library.&lt;/li&gt;
&lt;li&gt;Lets start with Strings.&lt;/li&gt;
&lt;li&gt;Files - We deal with them often.&lt;/li&gt;
&lt;li&gt;Date time related tasks.&lt;/li&gt;
&lt;li&gt;Dealing with Database stuff.&lt;/li&gt;
&lt;li&gt;Process Handling.&lt;/li&gt;
&lt;li&gt;Processing XMLs.&lt;/li&gt;
&lt;li&gt;Web Programming&lt;/li&gt;
&lt;li&gt;Programming tasks.&lt;/li&gt;
&lt;li&gt;Unit Testing&lt;/li&gt;
&lt;li&gt;How to Convert Python 2 to Python 3.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Requirements&lt;/p&gt;
&lt;p&gt;Attendees are welcome to bring their laptops with Python installed (
version 3.1 and version 2.6 both installed).&lt;/p&gt;
&lt;p&gt;Some snippets will be using Twisted Matrix Framework, those who would
like to try those recipes, would like to have Twisted Package installed
for their Python Distribution.&lt;/p&gt;
&lt;p&gt;[VIDEO HAS ISSUES: Some missing sections of video due to technical
issues (approx 3 mins in)]&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Senthil Kumaran</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--python-201--how-to-solve-it-using-pyt.html</guid><category>pycon</category><category>pycon2010</category><category>python-basics</category><category>testing</category><category>tutorial</category><category>xml</category></item><item><title>Rapid multi-purpose testing (#81)</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--rapid-multi-purpose-testing---81.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Rapid multi-purpose testing&lt;/p&gt;
&lt;p&gt;Presented by Holger Krekel&lt;/p&gt;
&lt;p&gt;Want to rapidly test code, javascript or documents on different Python
Interpreters and versions? This talk gives an overview on new py.test
features of the last year. I'll discuss the minimal-boilerplate testing
and new plugin model and give an overview on which testing needs are
covered so far, for example:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;run tests written for nose or unittest&lt;/li&gt;
&lt;li&gt;ad-hoc distribute tests to local or remote Python environments&lt;/li&gt;
&lt;li&gt;test compatibility with Python3&lt;/li&gt;
&lt;li&gt;run javascript unit-tests in real browsers&lt;/li&gt;
&lt;li&gt;coverage testing&lt;/li&gt;
&lt;li&gt;django-specific testing&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I'll conclude with upcoming features regarding testing-in-the-cloud and
plans on more test tool convergence. (URL:
&lt;a class="reference external" href="http://pytest.org/"&gt;http://pytest.org&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;[VIDEO HAS ISSUES: first 47 seconds or so are really quiet]&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Holger Krekel</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--rapid-multi-purpose-testing---81.html</guid><category>pycon</category><category>pycon2010</category><category>py.test</category><category>testing</category></item><item><title>Tests and Testability (#188)</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--tests-and-testability---188.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Tests and Testability&lt;/p&gt;
&lt;p&gt;Presented by Ned Batchelder&lt;/p&gt;
&lt;p&gt;Testing software is difficult. Large complex systems don't lend
themselves naturally to automated testing. This isn't just because they
are large, it's because developers often don't consider how testable
their code is. Testability is as important as all the other -ilities in
your code (portability, maintainability, efficiency, etc).&lt;/p&gt;
&lt;p&gt;Testability is a characteristic of your code that makes it easier to
test. Increased testability can give you better tests, but it also gives
you just plain better code. Improving testability generally means
considering the interfaces to your internal modules and improving them
to provide better modularity. This improvement often has benefits in
your product code.&lt;/p&gt;
&lt;p&gt;I'll discuss specific examples to demonstrate how code can be made more
testable. Mocks, dependency injection, and crisp API design are just a
few of the techniques that can improve your code's testability and make
you a happier person.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ned Batchelder</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--tests-and-testability---188.html</guid><category>pycon</category><category>pycon2010</category><category>testing</category></item><item><title>Why not run all your tests all the time? A study of continuous integration systems (#160)</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--why-not-run-all-your-tests-all-the-ti.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Why not run all your tests at all the time? A study of continuous
integration systems&lt;/p&gt;
&lt;p&gt;Presented by Dr. C. Titus Brown (Michigan State University)&lt;/p&gt;
&lt;p&gt;There are an increasing number of continuous integration (CI) systems
available for use by Pythonistas, but no clear guide to how to choose a
CI system for your project. I will examine the architecture choices made
by buildbot, bitten, Hudson, continuum, CruiseControl, DART, and
pony-build, and discuss the configuration and customization of several
of these systems for Pythonic needs, as well as give short demos (for
buildbot, bitten, Hudson, and pony-build).&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">C. Titus Brown</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--why-not-run-all-your-tests-all-the-ti.html</guid><category>bitten</category><category>buildbot</category><category>ci</category><category>cruisecontrol</category><category>dart</category><category>hudson</category><category>pony-build</category><category>pycon</category><category>pycon2010</category><category>testing</category></item><item><title>Handling ridiculous amounts of data with probabilistic data structures</title><link>https://pyvideo.org/pycon-us-2011/pycon-2011--handling-ridiculous-amounts-of-data-w.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Handling ridiculous amounts of data with probabilistic data structures&lt;/p&gt;
&lt;p&gt;Presented by C. Titus Brown&lt;/p&gt;
&lt;p&gt;Part of my job as a scientist involves playing with rather large amounts
of data (200 gb+). In doing so we stumbled across some neat CS
techniques that scale well, and are easy to understand and trivial to
implement. These techniques allow us to make some or many types of data
analysis map-reducable. I'll talk about interesting implementation
details, fun science, and neat computer science.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;If an extreme talk, I will talk about interesting details/issues in:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Python as the backbone for a non-SciPy scientific software package:
using Python as a frontend to C++ code, esp for parallelization and
testing purposes.&lt;/li&gt;
&lt;li&gt;Implementing probabilistic data structures with one-sided error as
pre-filters for data retrieval and analysis, in ways that are
generally useful.&lt;/li&gt;
&lt;li&gt;Efficiently breaking down certain types of sparse graph problems
using these probabilistic data structures, so that large graphs can
be analyzed straightforwardly. This will be applied to plagiarism
detection and/or duplicate code detection.&lt;/li&gt;
&lt;/ol&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">C. Titus Brown</dc:creator><pubDate>Fri, 11 Mar 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--handling-ridiculous-amounts-of-data-w.html</guid><category>bigdata</category><category>parallelization</category><category>pycon</category><category>pycon2011</category><category>testing</category></item><item><title>Supporting All Versions of Python All The Time With Tox</title><link>https://pyvideo.org/pycon-us-2011/pycon-2011--supporting-all-versions-of-python-all.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Supporting All Versions of Python All The Time With Tox&lt;/p&gt;
&lt;p&gt;Presented by Kumar McMillan&lt;/p&gt;
&lt;p&gt;This talk explains the modern techniques that every module maintainer
needs to know in order to support all major versions of Python. You
probably already have a massive test suite using a tool like nosetests,
py.test, unittest, or a custom runner. Using the tox command line tool,
you'll see how to run your tests in Python 2.x, 3.x, Jython, and
whatever else in parallel.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;tox is a new tool that lets you set up isolated virtual environments to
test your module's deployment and compatibility with all major versions
of Python. It's easy to install and is flexible enough that it probably
already supports your existing test suite. With one simple command you
can execute your test suite in each version of Python, you can build its
documentation with Sphinx, and get a nice printout of the results. It
has also been designed from the ground up to integrate into continuous
integration (CI) tools like Hudson.&lt;/p&gt;
&lt;p&gt;Using practical examples, this talk will show you how to toxify your
existing test suite and trick it out with the tox.ini config file.
You'll also see how to leverage Hudson's matrix build so that each code
checkin will run tests in all versions of Python and report detailed
failures.&lt;/p&gt;
&lt;p&gt;Your app supports Python 3, right? No? Tox is the best way to develop in
parallel with 2.x and 3.x. We'll go over how to set up tox for that.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kumar McMillan</dc:creator><pubDate>Fri, 11 Mar 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--supporting-all-versions-of-python-all.html</guid><category>ci</category><category>hudson</category><category>pycon</category><category>pycon2011</category><category>testing</category><category>tox</category></item><item><title>Testing with mock</title><link>https://pyvideo.org/pycon-us-2011/pycon-2011--testing-with-mock.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Testing with mock&lt;/p&gt;
&lt;p&gt;Presented by Michael Foord&lt;/p&gt;
&lt;p&gt;mock is a Python testing library. It has the goal of making mocking in
tests brain dead simple! mock provides the Mock class and the patch
decorator for safely patching out the objects you are mocking in your
tests. This talk will cover standard mocking patterns. We'll also look
at some of the newer features in the latest release, including support
for mocking magic methods.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;mock provides a core Mock class that removes the need to create a host
of trivial stubs throughout your test suite. After performing an action,
you can make assertions about which methods / attributes were used and
arguments they were called with. You can also specify return values and
set specific attributes in the normal way.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.voidspace.org.uk/python/mock/"&gt;http://www.voidspace.org.uk/python/mock/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://pypi.python.org/pypi/mock/"&gt;http://pypi.python.org/pypi/mock/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The mock module also provides a patch() decorator that handles safely
patching out the things you are mocking during your test.&lt;/p&gt;
&lt;p&gt;We'll cover standard mocking patterns, and how mock makes them easy.
We'll also be looking at some of the newer features in the latest
release, including the magic method support that can be used (for
example) for mocking out objects used as context managers.&lt;/p&gt;
&lt;p&gt;mock is designed for &amp;quot;unit test style&amp;quot; testing, but is used with Python
testing libraries like nose and py.test.&lt;/p&gt;
&lt;p&gt;There will be some emphasis on how &lt;em&gt;not&lt;/em&gt; to use mocking in testing, and
why 'over mocking' is bad (and makes for brittle tests).&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Michael Foord</dc:creator><pubDate>Fri, 11 Mar 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--testing-with-mock.html</guid><category>mock</category><category>pycon</category><category>pycon2011</category><category>testing</category></item><item><title>Units Need Testing Too</title><link>https://pyvideo.org/pycon-us-2011/pycon-2011--units-need-testing-too.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Units Need Testing Too&lt;/p&gt;
&lt;p&gt;Presented by Gary Bernhardt&lt;/p&gt;
&lt;p&gt;Python's long history of testing has focused primarily on integration-
and system-level tests: slow-running tests executing lots of code. These
are a great start, but many of them can be transformed into unit-level
tests. True unit tests are orders of magnitude faster (about 1ms each),
providing quicker feedback and better failure localization. We'll look
at why and how to write them.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;Python has a wonderful legacy in testing: PyUnit has been in the
standard library since March, 2001, and it was already a year old by
then. We adopted browser driving quickly, and we do it at huge scale
with great test parallelization infrastructure.&lt;/p&gt;
&lt;p&gt;Big tests aren't everything, though. In the Python world, true unit
tests are somewhat rare, and even most tests written with the unittest
library are integration tests. These tests are slow to execute and don't
localize failure as well as smaller, focused tests. They leave us with
two options: either run them rarely, sacrificing feedback, or run them
often, sacrificing speed.&lt;/p&gt;
&lt;p&gt;Writing true unit tests removes that particular trade-off. When your
tests execute in a millisecond each, you can afford to run a thousand of
them every time you save a source file. This talk will discuss what unit
tests really are, why they matter, and how to write them in Python.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Gary Bernhardt</dc:creator><pubDate>Fri, 11 Mar 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--units-need-testing-too.html</guid><category>pycon</category><category>pycon2011</category><category>pyunit</category><category>testing</category><category>unittests</category></item></channel></rss>