<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Mon, 04 Jun 2018 00:00:00 +0000</lastBuildDate><item><title>Exploiting network namespaces for fun and profit</title><link>https://pyvideo.org/pycon-israel-2018/exploiting-network-namespaces-for-fun-and-profit.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;What are namespaces?
What network namespaces do?
How containers use namespaces?
What can we do with this?&lt;/p&gt;
&lt;p&gt;Eventually, we will be able to write this:&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;Tor&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
  &lt;span class="c1"&gt;# all code in here will be routed through the Tor container's network&lt;/span&gt;
  &lt;span class="c1"&gt;# namespace, even subprocesses!&lt;/span&gt;
  &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'http://jsonip.com/'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Omri Bahumi</dc:creator><pubDate>Mon, 04 Jun 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-06-04:pycon-israel-2018/exploiting-network-namespaces-for-fun-and-profit.html</guid><category>namespaces</category></item><item><title>PyCon 2009: About Python Namespaces (and Code Objects) (#46)</title><link>https://pyvideo.org/pycon-us-2009/pycon-2009--about-python-namespaces--and-code-obj.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;About Python Namespaces (and Code Objects)&lt;/p&gt;
&lt;p&gt;Presented at PyCon 2009&lt;/p&gt;
&lt;p&gt;An explanation of some of the underlying concepts of Python, come learn
about names and values placed in namespaces, modified by code objects
and collected into modules. We'll explore namespaces using the Python
interactive prompt, with graphical display of object trees using
Graphviz. Also explained will be the namespace concepts of closures and
early binding; how to define new objects without subclassing via use of
default/curried arguments and closures.&lt;/p&gt;
&lt;p&gt;[VIDEO HAS ISSUES: Audio buzzing, missing beginning, talk is only 15
mins (may be cut)]&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Unknown</dc:creator><pubDate>Tue, 17 Feb 2009 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2009-02-17:pycon-us-2009/pycon-2009--about-python-namespaces--and-code-obj.html</guid><category>codeobjects</category><category>namespaces</category><category>pycon</category><category>pycon2009</category><category>python-advanced</category></item><item><title>Python's Dusty Corners (#182)</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--python--39-s-dusty-corners---182.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python's Dusty Corners&lt;/p&gt;
&lt;p&gt;Presented by Jack Diederich&lt;/p&gt;
&lt;p&gt;The talk will be a brief overview of all the features in python that you
don't need to know about right up until the moment you do. The list
includes how comparisons work, descriptors, iterators, context managers,
namespaces, else clauses on for/while loops (suggested by Hettinger).
The narrative of the talk is that these are features that you don't need
and/or shouldn't use in your day-to-day code but that you need to keep
in the back of your mind because other people's code and the stdlib do
use them. As Alex Martelli pointed out in his wonderful talk
&amp;quot;Abstractions as Leverage&amp;quot; you can't successfully function at one level
of abstraction if you don't know what is going on at the next level
down. This talk is a whirlwind tour of the next level down.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jack Diederich</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--python--39-s-dusty-corners---182.html</guid><category>contextmanagers</category><category>descripters</category><category>else</category><category>iterators</category><category>namespaces</category><category>pycon</category><category>pycon2010</category></item><item><title>Useful Namespaces: Context Managers and Decorators</title><link>https://pyvideo.org/pycon-us-2011/pycon-2011--useful-namespaces--context-managers-a.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Useful Namespaces: Context Managers and Decorators&lt;/p&gt;
&lt;p&gt;Presented by Jack Diederich&lt;/p&gt;
&lt;p&gt;Python has two useful conventions for &amp;quot;I mean it, but only here&amp;quot; and you
can say it with Context Managers and Decorators. Both give you the power
to define a push/pop of a resource for a set period inside a namespace,
be it a function or a level of indentation. This talk is a list of
patterns that are implemented by one or the other (including some clever
functions that are both).&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Decorators, formal definition.&lt;/li&gt;
&lt;li&gt;Context Managers, formal definition.&lt;/li&gt;
&lt;li&gt;Informal definition: both have the opportunity to do and then undo. -
very similar to C++ RIIA &amp;quot;Resource Acquisition Is Initialization.&amp;quot; -
Context Managers were designed to do that but decorators are
frequently just as good.&lt;/li&gt;
&lt;li&gt;Which one to use use when is all about namespaces. - Context Managers
manipulate at the block level. - Function Decorators manipulate the
function level. - Class Decorators manipulate at the class level.&lt;/li&gt;
&lt;li&gt;Recipes on writing decorators and context managers - Familiar
examples from Django and Mock.&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jack Diederich</dc:creator><pubDate>Fri, 11 Mar 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--useful-namespaces--context-managers-a.html</guid><category>contextmanagers</category><category>decorators</category><category>namespaces</category><category>pycon</category><category>pycon2011</category></item></channel></rss>