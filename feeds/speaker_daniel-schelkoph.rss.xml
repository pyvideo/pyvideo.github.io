<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org - Daniel Schelkoph</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Sat, 27 Jul 2024 00:00:00 +0000</lastBuildDate><item><title>What Is the `Annotated` Type?</title><link>https://pyvideo.org/pyohio-2023/what-is-the-annotated-type.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PEP 593 introduced the &lt;tt class="docutils literal"&gt;Annotated&lt;/tt&gt; Type in Python 3.9, allowing typing
metadata. In 2023, usage of the type by popular libraries has
significantly increased. For example, &lt;tt class="docutils literal"&gt;FastAPI&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;Pydantic&lt;/tt&gt; have
fully adopted the &lt;tt class="docutils literal"&gt;Annotated&lt;/tt&gt; type and recommend it as the preferred
syntax for their functionality. In this talk, we will explore usage of
this type in open source projects and take a look at how it might be
used in your code.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Daniel Schelkoph</dc:creator><pubDate>Sat, 16 Dec 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-12-16:/pyohio-2023/what-is-the-annotated-type.html</guid><category>PyOhio 2023</category></item><item><title>Validating Complex Types Using Pydantic</title><link>https://pyvideo.org/pyohio-2024/validating-complex-types-using-pydantic.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;For some Python Objects it is difficult to understand its contents, even
if type annotations are used. For example, PyTorch's &lt;tt class="docutils literal"&gt;Tensor&lt;/tt&gt; or
Pandas's &lt;tt class="docutils literal"&gt;DataFrame&lt;/tt&gt; have many different &amp;quot;shapes&amp;quot; to their data
structures, but their type annotations are always the same. This can
make it very difficult to understand functions that utilize these
objects as parameters or return these objects. When reviewing code, it
is very common to ask these sorts of questions:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;What is the shape of the &lt;tt class="docutils literal"&gt;Tensor&lt;/tt&gt; I need to pass in?&lt;/li&gt;
&lt;li&gt;What columns does this &lt;tt class="docutils literal"&gt;DataFrame&lt;/tt&gt; need to have?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In this talk, we will describe how to utilize typing metadata and
Pydantic to not only provide additional context for these data
structures, but to validate the input/output of functions as well.&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Links for the talk:&lt;/div&gt;
&lt;div class="line"&gt;- &lt;a class="reference external" href="https://github.com/dschelkoph/ds_validator_talk"&gt;Notebook&lt;/a&gt; used
in talk; dev container compatible&lt;/div&gt;
&lt;div class="line"&gt;- &lt;a class="reference external" href="https://pypi.org/project/ds_validator/"&gt;ds_validator&lt;/a&gt;, the
package demonstrated in the talk&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Daniel Schelkoph</dc:creator><pubDate>Sat, 27 Jul 2024 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2024-07-27:/pyohio-2024/validating-complex-types-using-pydantic.html</guid><category>PyOhio 2024</category></item></channel></rss>