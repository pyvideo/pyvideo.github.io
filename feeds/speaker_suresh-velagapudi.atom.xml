<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_suresh-velagapudi.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2015-10-25T00:00:00+00:00</updated><entry><title>Ista (Liking) Julia for Pythonistas</title><link href="https://pyvideo.org/bay-piggies/ista-liking-julia-for-pythonistas.html" rel="alternate"></link><published>2015-10-25T00:00:00+00:00</published><updated>2015-10-25T00:00:00+00:00</updated><author><name>Suresh Velagapudi</name></author><id>tag:pyvideo.org,2015-10-25:bay-piggies/ista-liking-julia-for-pythonistas.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;I start with some examples of the optional typing feature of Python 3.5 and compare it with that of Julia.  Illustrative examples of interoperability of Julia and Python follow.  I conclude with the differences in syntax and semantics that mattered for the machine learning application I built using both languages.&lt;/p&gt;
&lt;p&gt;Speaker:&lt;/p&gt;
&lt;p&gt;Suresh Velagapudi has been a Pythonista for just 5 short years while his involvement with Julia has been for 15 long months.  His Ista (Liking) for Julia is because of his 15 year involvement with FORTRAN during the stone age of computing.  He picked up a PhD (1996) in computer science and automation from IISc Bengaluru to compensate for his B.Tech (1971) in Aero from IIT Madras.  Though formally retired, he is not tired of explaining the intricacies of the functional programming paradigm to those programmers who find fun in functional languages like Julia.&lt;/p&gt;
&lt;p&gt;Presented at the Bay Area Python Interest Group (BayPIGgies)&lt;/p&gt;
</summary></entry></feed>