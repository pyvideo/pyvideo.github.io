<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_julien-phalip.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2015-09-24T00:00:00+00:00</updated><entry><title>Introduction à LiveServerTestCase</title><link href="https://pyvideo.org/djangocon-toulouse-2012/introduction-a-liveservertestcase.html" rel="alternate"></link><published>2012-11-24T00:00:00+00:00</published><updated>2012-11-24T00:00:00+00:00</updated><author><name>Julien Phalip</name></author><id>tag:pyvideo.org,2012-11-24:djangocon-toulouse-2012/introduction-a-liveservertestcase.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;La classe LiveServerTestCase, tout fraîchement introduite dans la version 1.4 de Django, permet de tester vos applications de manière différente et plus compréhensive. Dans cette conférence je présenterai certains cas d'utilisation, comme le test d'interfaces utilisateur ou de REST APIs.&lt;/p&gt;
</summary></entry><entry><title>Boosting teamwork with Vagrant</title><link href="https://pyvideo.org/djangocon-us-2012/boosting-teamwork-with-vagrant.html" rel="alternate"></link><published>2012-09-06T00:00:00+00:00</published><updated>2012-09-06T00:00:00+00:00</updated><author><name>Julien Phalip</name></author><id>tag:pyvideo.org,2012-09-06:djangocon-us-2012/boosting-teamwork-with-vagrant.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;In this talk I will present Vagrant, a free open-source tool
facilitating the manipulation of virtualized environments, and how it
may benefit the development of Django applications. This talk is aimed
at Django developers of all levels who are interested in getting an
overview of the great possibilities Vagrant offers to support teamwork
and quality assurance.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk I will present Vagrant, a free open-source tool
facilitating the manipulation of virtualized environments, and how it
may benefit the development of Django applications. This talk is aimed
at Django developers of all levels who are interested in getting an
overview of the great possibilities Vagrant offers to support teamwork
and quality assurance.&lt;/p&gt;
&lt;p&gt;One major benefit of using Vagrant is with on-boarding. Previously, when
new developers joined a project, it could take hours or days for them to
correctly set up their development environment and install all the
projects' dependencies (the correct version of Python, the virtualenv,
the database server, the caching engine, etc.). With Vagrant, combined
with provisioning tools like Chef or Puppet, it is now possible to
easily create a virtual machine with all the right dependencies properly
pre-installed and pre- configured to allow anyone to be fully
operational and ready to contribute to the project in a matter of
minutes.&lt;/p&gt;
&lt;p&gt;Another major benefit of Vagrant is that it gives the opportunity to
create a working environment for all developers that closely matches
that of the production server. This in turn allows to anticipate
potential issues when new code and resources eventually get deployed
live.&lt;/p&gt;
&lt;p&gt;In this talk, I will present some key functionalities and workflows
around the use of Vagrant: - installing Vagrant and Virtualbox. -
creating a new virtual machine. - provisioning a virtual machine with
basic requirements. - sharing virtual machine specifications with team
members.&lt;/p&gt;
&lt;p&gt;This talk will include a brief introduction to Chef and Puppet. It will
also include multiple practical tricks like accessing the VM's database
server from the host's machine, setting up useful shell aliases or
automatically activating the virtualenv when launching the VM.&lt;/p&gt;
</summary><category term="django"></category><category term="vagrant"></category></entry><entry><title>Integration and Functional Testing with LiveServerTestCase, Selenium and More</title><link href="https://pyvideo.org/djangocon-us-2013/integration-and-functional-testing-with-selenium.html" rel="alternate"></link><published>2013-10-01T00:00:00+00:00</published><updated>2013-10-01T00:00:00+00:00</updated><author><name>Julien Phalip</name></author><id>tag:pyvideo.org,2013-10-01:djangocon-us-2013/integration-and-functional-testing-with-selenium.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;INTEGRATION AND FUNCTIONAL TESTING WITH LIVESERVERTESTCASE, SELENIUM AND
MORE&lt;/p&gt;
&lt;p&gt;Thursday 2:45 p.m.--3:30 p.m.&lt;/p&gt;
&lt;p&gt;Audience level: Intermediate&lt;/p&gt;
&lt;p&gt;DESCRIPTION In this talk, I will present LiveServerTestCase, a feature
recently added to Django to enable new, comprehensive forms of testing.
I will in particular show how to use LiveServerTestCase with browser
automators like Selenium to perform integration and functional tests for
your Django applications.&lt;/p&gt;
&lt;p&gt;ABSTRACT The Django ecosystem has always placed a strong emphasis on
testing, partly thanks to a wide range of tools available in Django's
own testing framework. One of the most used from those tools is the
dummy web client, which allows to emit mock HTTP requests directly to
your codebase and to inspect the responses' contents. However, as useful
as it is, this dummy client is limited as it does not exercise the full
HTTP specification and it cannot effectively reproduce actual user
interactions. With the recent introduction of LiveServerTestCase, it is
now possible to use sophisticated HTTP libraries like python-requests
and browser automators like Selenium to perform your tests in a more
comprehensive way. By automatically running a live HTTP server in the
background, LiveServerTestCase allows you to write tests ensuring that
all layers of your web application properly fit together and that user
interactions function well from end to end.&lt;/p&gt;
&lt;p&gt;This talk will cover a range of topics to help you get started with the
writing of integration and functional tests for your Django
applications, including:&lt;/p&gt;
&lt;p&gt;A brief history of when and how LiveServerTestCase was added to Django
core. A brief review of different browser automators (Selenium,
Ghost.py, etc.). Tips for writing, accelerating and debugging Selenium
tests. Testing interactive Javascript-based front-ends and user
workflows. A demo of the Django core Selenium test suite. Testing
RESTful APIs with python-requests. Running Selenium tests in headless
mode for continuous integration. Thoughts on when to use, and when not
to use, integration and functional tests.&lt;/p&gt;
</summary></entry><entry><title>Confident web development with React</title><link href="https://pyvideo.org/djangocon-us-2015/confident-web-development-with-react-by-julien.html" rel="alternate"></link><published>2015-09-24T00:00:00+00:00</published><updated>2015-09-24T00:00:00+00:00</updated><author><name>Julien Phalip</name></author><id>tag:pyvideo.org,2015-09-24:djangocon-us-2015/confident-web-development-with-react-by-julien.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Confident web development with React&lt;/p&gt;
&lt;p&gt;React has become increasingly popular over the past year and is already
used in large-scale products and companies such as Facebook, Instagram,
Khan Academy, Hipchat and Netflix. This rapid success can in part be
explained by React's performance qualities as well as its clean,
predictable development workflow. To boot, its learning curve is very
short despite it introducing a pretty radically different way of
approaching front-end web development. Overall, React tends to greatly
appeal to Django developers as both tools share the same philosophies of
elegance and practicality.&lt;/p&gt;
&lt;p&gt;React can benefit all types of web applications, from single-page apps
to more conventional websites and can easily be introduced to complement
existing web architectures. While React is Javascript-based and is
primarily a client-side presentation tool, it remains agnostic about the
rest of the stack and works really well with backend technologies like
Django.&lt;/p&gt;
&lt;p&gt;In this talk I will present how React and Django can work together to
build powerful, easier-to-maintain web applications with confidence. I
will start with a brief introduction of React's key concepts: the Flux
architecture, the virtual DOM, JSX and the React component life-cyle. I
will then explain how React can integrate with Django-powered backends
and discuss some advanced topics such as server-side rendering,
isomorphic JS, animations, testing, production environments and
integration with asset pipelines. Numerous code samples will illustrate
the various concepts presented. By the end of this talk, members of the
audience who are unfamiliar with React will have a good grasp of its
functioning and of its benefits; those already familiar with React will
also have learned several useful tips applicable to their Django
projects.&lt;/p&gt;
&lt;p&gt;Help us caption &amp;amp; translate this video!&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://amara.org/v/HIYT/"&gt;http://amara.org/v/HIYT/&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Advanced techniques for Web functional testing</title><link href="https://pyvideo.org/pycon-us-2014/advanced-techniques-for-web-functional-testing.html" rel="alternate"></link><published>2014-04-13T00:00:00+00:00</published><updated>2014-04-13T00:00:00+00:00</updated><author><name>Julien Phalip</name></author><id>tag:pyvideo.org,2014-04-13:pycon-us-2014/advanced-techniques-for-web-functional-testing.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;This talk will present multiple advanced techniques for Web functional
testing. You will learn how to test a wide range of Web front-end
components, such as CSS, visuals, responsive designs and user
interactions — all using Python. Various practical tips will also be
presented to harness your functional tests in real project workflows.&lt;/p&gt;
</summary></entry></feed>