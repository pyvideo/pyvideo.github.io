<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org - Graham Bleaney</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Wed, 27 Apr 2022 00:00:00 +0000</lastBuildDate><item><title>Unexpected Execution: Wild Ways Code Execution can Occur in Python</title><link>https://pyvideo.org/pycon-us-2021/unexpected-execution-wild-ways-code-execution-can-occur-in-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Every Python user knows that you can execute code using eval or exec, but what about yaml or str.format? This talk will take you on a walk through all the weird and wild ways that you can achieve code execution on a Python server (and trust me, I didn’t spoil the surprise by putting the weirdest ones in the description).&lt;/p&gt;
&lt;p&gt;The talk should be equal parts practical and entertaining as we work through both real examples of code execution vulnerabilities found in running code as well as absurd remote code execution exploits. The talk will end on a practical note by explaining how Facebook detects and prevents the exploit vectors we discussed, using an open source Python Static Analyzer called Pysa.&lt;/p&gt;
&lt;p&gt;All demos are available at:
&lt;a class="reference external" href="https://github.com/gbleaney/python_security"&gt;https://github.com/gbleaney/python_security&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Attendees are encouraged to download the demos and follow along at home.&lt;/p&gt;
&lt;p&gt;To get started using static analysis to detect the vulnerabilities discussed in this talk, check out:
&lt;a class="reference external" href="https://pyre-check.org/docs/pysa-quickstart/"&gt;https://pyre-check.org/docs/pysa-quickstart/&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Graham Bleaney</dc:creator><pubDate>Fri, 14 May 2021 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2021-05-14:/pycon-us-2021/unexpected-execution-wild-ways-code-execution-can-occur-in-python.html</guid><category>PyCon US 2021</category></item><item><title>Securing Code with the Python Type System</title><link>https://pyvideo.org/pycon-us-2022/securing-code-with-the-python-type-system.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Preventing security vulnerabilities often brings to mind heavyweight security tools. But what if it doesn’t have to be that way? What if you could use the concepts already built into Python to make your code incrementally more secure?&lt;/p&gt;
&lt;p&gt;In this talk, we'll see how Python types allow you to improve your project's security incrementally. First, we’ll show how simple type annotations by themselves can prevent security-impacting logic errors. Second, we'll see how you can prevent injection vulnerabilities such as SQL injection using a special type in your APIs (PEP 675). Next, we demonstrate how to leverage runtime type validation to securely deal with user-controlled data (such as HTTP requests). Finally, we show how types naturally enable powerful typing-based tools like Pysa and CodeQL to perform static taint flow analysis and catch complex vulnerabilities that span multiple functions. No security tool is a panacea, however, so we’ll also show you where typing and the tools that rely on it can fail.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Graham Bleaney</dc:creator><pubDate>Wed, 27 Apr 2022 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2022-04-27:/pycon-us-2022/securing-code-with-the-python-type-system.html</guid><category>PyCon US 2022</category></item></channel></rss>