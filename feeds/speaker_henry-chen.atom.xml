<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_henry-chen.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2017-12-03T00:00:00+00:00</updated><entry><title>Emulating Lazy Evaluation</title><link href="https://pyvideo.org/pybay-2017/emulating-lazy-evaluation.html" rel="alternate"></link><published>2017-08-11T00:00:00+00:00</published><updated>2017-08-11T00:00:00+00:00</updated><author><name>Henry Chen</name></author><id>tag:pyvideo.org,2017-08-11:pybay-2017/emulating-lazy-evaluation.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python does not support lazy evaluation, so lets make Python do lazy evaluation. It's fun and gives us an excuse to do some metaprogramming.&lt;/p&gt;
</summary><category term="lightning talks"></category></entry><entry><title>Taking the __magic__ out of Python classes</title><link href="https://pyvideo.org/pybay-2017/taking-the-__magic__-out-of-python-classes.html" rel="alternate"></link><published>2017-08-11T00:00:00+00:00</published><updated>2017-08-11T00:00:00+00:00</updated><author><name>Henry Chen</name></author><id>tag:pyvideo.org,2017-08-11:pybay-2017/taking-the-__magic__-out-of-python-classes.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A peek into the internals of Python classes. Including the world's quickest introduction to metaclasses.&lt;/p&gt;
</summary><category term="lightning talks"></category></entry><entry><title>Async for the Python 2 Programmer</title><link href="https://pyvideo.org/north-bay-python-2017/async-for-the-python-2-programmer.html" rel="alternate"></link><published>2017-12-03T00:00:00+00:00</published><updated>2017-12-03T00:00:00+00:00</updated><author><name>Henry Chen</name></author><id>tag:pyvideo.org,2017-12-03:north-bay-python-2017/async-for-the-python-2-programmer.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;# Background&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Why async? CPU bound vs IO bound processes.&lt;/li&gt;
&lt;li&gt;Concurrency is not the same as multithreading&lt;/li&gt;
&lt;li&gt;Single threaded concurrency&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;# Generators - already in Python 2 !&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Generator - a function you can pause!&lt;/li&gt;
&lt;li&gt;How to implement async with generators and event loop in Python 2&lt;/li&gt;
&lt;li&gt;Real working code - a Python version of the JavaScript setTimeout function&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;# What is new in Python 3 ?&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;async/await - really generators in disguise!&lt;/li&gt;
&lt;li&gt;asyncio library - ready made event loop and IO&lt;/li&gt;
&lt;li&gt;new syntax and new library are independent - you can mix and match old and new!&lt;/li&gt;
&lt;/ul&gt;
</summary></entry></feed>