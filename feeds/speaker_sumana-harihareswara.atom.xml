<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_sumana-harihareswara.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2018-10-06T00:00:00+00:00</updated><entry><title>Python Grab Bag: A Set of Short Plays</title><link href="https://pyvideo.org/pygotham-2018/python-grab-bag-a-set-of-short-plays.html" rel="alternate"></link><published>2018-10-06T00:00:00+00:00</published><updated>2018-10-06T00:00:00+00:00</updated><author><name>Jason Owen</name></author><id>tag:pyvideo.org,2018-10-06:pygotham-2018/python-grab-bag-a-set-of-short-plays.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A frenetic combination of educational and entertaining segments, as chosen
by the audience! In between segments, audience members will shout out
numbers from a menu, and we’ll perform the selected segment: it may be a
short monologue, it may be a play, it may be a physical demo, or it may be a
tiny traditional conference talk.&lt;/p&gt;
&lt;p&gt;Audience members should walk away with some additional understanding of the
history of Python, knowledge of some tools and libraries available in the
Python ecosystem, and some Python-related amusement.&lt;/p&gt;
&lt;p&gt;This talk is inspired by [the Neo-Futurists’ Infinite
Wrench](&lt;a class="reference external" href="http://www.nyneofuturists.org/"&gt;http://www.nyneofuturists.org/&lt;/a&gt;), a creative and energetic piece of
theater.&lt;/p&gt;
&lt;p&gt;The audience can select from these plays:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;The Unvarnished Truth&lt;/li&gt;
&lt;li&gt;&amp;lt;tt&amp;gt;from import import import&amp;lt;/tt&amp;gt;&lt;/li&gt;
&lt;li&gt;WHAT'S the DEAL with CLIENTS?&lt;/li&gt;
&lt;li&gt;A Play Entirely Full of Monty Python References&lt;/li&gt;
&lt;li&gt;A Proposal for Explaining PEPs&lt;/li&gt;
&lt;li&gt;GNU Mailman: A Pythonic Playlist&lt;/li&gt;
&lt;li&gt;Soup, Scrape, Sweep&lt;/li&gt;
&lt;li&gt;Generators: Taste the Freshness&lt;/li&gt;
&lt;li&gt;This Is How We Do It&lt;/li&gt;
&lt;li&gt;Cookie For Your Thoughts&lt;/li&gt;
&lt;li&gt;If Shakespeare Wrote Incident Reports&lt;/li&gt;
&lt;li&gt;Code Review: Fast Forward and Back&lt;/li&gt;
&lt;li&gt;When The Old Was New&lt;/li&gt;
&lt;li&gt;Things We Don't Say At The Daily Standup Meeting&lt;/li&gt;
&lt;li&gt;The Relief of Reuse (The Colorful &amp;lt;tt&amp;gt;argparse&amp;lt;/tt&amp;gt; Play)&lt;/li&gt;
&lt;li&gt;Be A Better Bureaucrat (The Intellectual &amp;lt;tt&amp;gt;argparse&amp;lt;/tt&amp;gt; Play)&lt;/li&gt;
&lt;li&gt;Speaking Python&lt;/li&gt;
&lt;li&gt;The End (Of 2.7) Is Near (feat. Jason as Guido van Rossum)&lt;/li&gt;
&lt;/ol&gt;
</summary></entry><entry><title>Code Review, Forwards and Back</title><link href="https://pyvideo.org/pygotham-2017/code-review-forwards-and-back.html" rel="alternate"></link><published>2017-10-06T00:00:00+00:00</published><updated>2017-10-06T00:00:00+00:00</updated><author><name>Sumana Harihareswara</name></author><id>tag:pyvideo.org,2017-10-06:pygotham-2017/code-review-forwards-and-back.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The setting: an office conference room. The characters: a developer, who's written a chunk of new Python code, and a team lead, who's about to review it. You'll see the code. It's not great.&lt;/p&gt;
&lt;p&gt;What happens if the reviewer waves it through, or lets conflict aversion get the best of them? What if the reviewer says it should be &amp;quot;better&amp;quot; but doesn't articulate how? What if the review is abrasive, or nitpicky, or laid-back? What if the reviewer rewrites the code right there and then? And if we fast-forward to the same team years later, how has this code reviewing style affected the quality and evolution of the codebase, and the team's culture, skill and sustainability?&lt;/p&gt;
&lt;p&gt;See a fast-paced montage of ways things can go. Recognize patterns from your past and present. Learn scripts for phrasing criticism constructively. And laugh.&lt;/p&gt;
</summary></entry><entry><title>HTTP Can Do That?!</title><link href="https://pyvideo.org/pycon-us-2016/sumana-harihareswara-http-can-do-that-pycon-2016.html" rel="alternate"></link><published>2016-05-31T00:00:00+00:00</published><updated>2016-05-31T00:00:00+00:00</updated><author><name>Sumana Harihareswara</name></author><id>tag:pyvideo.org,2016-05-31:pycon-us-2016/sumana-harihareswara-http-can-do-that-pycon-2016.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Speaker: Sumana Harihareswara&lt;/p&gt;
&lt;p&gt;Learn how to get more performance, testability, and flexibility out of your web apps, using features already built into HTTP. I'll walk you through case studies exploring good (and bad) ideas, using Python, your browser, netcat, and other common tools.&lt;/p&gt;
&lt;p&gt;Slides can be found at: &lt;a class="reference external" href="https://speakerdeck.com/pycon2016"&gt;https://speakerdeck.com/pycon2016&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/PyCon/2016-slides"&gt;https://github.com/PyCon/2016-slides&lt;/a&gt;&lt;/p&gt;
</summary></entry></feed>