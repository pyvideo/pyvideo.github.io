<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_jason-r-coombs.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2019-07-27T11:15:00+00:00</updated><entry><title>Lessons from Zero-Defect Software</title><link href="https://pyvideo.org/pyohio-2019/lessons-from-zero-defect-software.html" rel="alternate"></link><published>2019-07-27T11:15:00+00:00</published><updated>2019-07-27T11:15:00+00:00</updated><author><name>Jason R. Coombs</name></author><id>tag:pyvideo.org,2019-07-27:pyohio-2019/lessons-from-zero-defect-software.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Writing software with no defects is extremely difficult and expensive,
but the lessons learned from such ambitious projects can inform our
approach for a more practical development technique. This talk looks at
how principles from zero-defect engineering, functional programming, and
refactoring come together to produce robust, readable, and reliable
code.&lt;/p&gt;
&lt;p&gt;You know that feeling when you look at a piece of code you or someone
has written and it has a smell, it's inelegant, or its incomprehensibly
complex. And then there's the other feeling, when you see a piece of
code that's comprehensible, elegant, and it is ready to adopt the
behavior you seek. It's this feeling we want to replicate and enhance.
Instigated by a simple tweet, the speaker reaches back in time to
explore the foundational practices that lead to our best code.&lt;/p&gt;
&lt;p&gt;Starting with Refactoring, we'll reflect on the techniques of change
that retain stability while increasing sophistication or reducing
complexity. We'll explore how code is a form of conversation and ways
that conversation can transpire in a code repository.&lt;/p&gt;
&lt;p&gt;Next we will explore how Python has supported the principles and
primitives of functional programming from early versions and how the
constraints of functional programming lead to robust logic. We'll
examine the functional nature of comprehensions and the powerful feature
of functions as parameters.&lt;/p&gt;
&lt;p&gt;In the main event, the speaker will draw on his early experiences with
Zero- Defect Software, where one writes software with literally no bugs,
and how these techniques can influence the design and implementation
toward a more robust solution, starting with a rigorous but impractical
ideal and distilling from that a pragmatic approach that retains much of
the benefit of the technique. Integrating the lessons from refactoring
and functional programming, a coding approach emerges that promises to
enable and empower your development.&lt;/p&gt;
</summary></entry><entry><title>Panel: Directions for Packaging</title><link href="https://pyvideo.org/pycon-us-2013/panel-directions-for-packaging.html" rel="alternate"></link><published>2013-03-16T00:00:00+00:00</published><updated>2013-03-16T00:00:00+00:00</updated><author><name>Daniel Holth</name></author><id>tag:pyvideo.org,2013-03-16:pycon-us-2013/panel-directions-for-packaging.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;What needs to happen to finally offer a first-class packaging experience
to Python users? Several of the people working directly on that problem
will be here to answer your questions.&lt;/p&gt;
</summary><category term="talk"></category></entry></feed>