<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Sat, 11 Apr 2015 00:00:00 +0000</lastBuildDate><item><title>A comprehensive look at representing physical quantities in Python</title><link>https://pyvideo.org/scipy-2013/a-comprehensive-look-at-representing-physical-qua.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Why tracking physical quantities is an essential function for any
programming language heavily used in science and a possible unification
of the existing packages that enable the majority of use cases.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Authors: Bekolay, Trevor, University of Waterloo&lt;/p&gt;
&lt;p&gt;Track: General&lt;/p&gt;
&lt;p&gt;Code that properly tracks the units associated with physical quantities
is self-documenting and far more robust to unit conversion errors. Unit
conversion errors are common in any program that deal with physical
quantities, and have been responsible for several expensive and
dangerous software errors, like the Mars Climate Orbiter crash. Support
for tracking units is lacking in commonly used packages like NumPy and
SciPy. As a result, a whole host of packages have been created to fill
this gap, with varying implementations. Some build on top of the
commonly used scientific packages, adding to their data structures the
ability to track units. Others packages track units separately, and
store a mapping between units and the data structures containing
magnitudes.&lt;/p&gt;
&lt;p&gt;I will discuss why tracking physical quantities is an essential function
for any programming language heavily used in science. I will then
compare and contrast all of the packages that currently exist for
tracking quantities in terms of their functionality, syntax, underlying
implementation, and performance. Finally, I will present a possible
unification of the existing packages that enables the majority of use
cases, and I will discuss where that unified implementation fits into
the current scientific Python environment.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Trevor Bekolay</dc:creator><pubDate>Tue, 02 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-02:scipy-2013/a-comprehensive-look-at-representing-physical-qua.html</guid><category>scipy</category></item><item><title>Writing self-documenting scientific code using physical quantities</title><link>https://pyvideo.org/pycon-ca-2012/writing-self-documenting-scientific-code-using-ph.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;In high school science, we're taught to always include units in
equations. Why not in scientific Python code? I'll show why and how to
keep track of units in Python using real-world examples.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Trevor Bekolay</dc:creator><pubDate>Sat, 10 Nov 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-11-10:pycon-ca-2012/writing-self-documenting-scientific-code-using-ph.html</guid></item><item><title>How to build a brain with Python</title><link>https://pyvideo.org/pycon-us-2015/how-to-build-a-brain-with-python.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Trevor Bekolay</dc:creator><pubDate>Sat, 11 Apr 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-04-11:pycon-us-2015/how-to-build-a-brain-with-python.html</guid></item></channel></rss>