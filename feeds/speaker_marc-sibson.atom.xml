<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_marc-sibson.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2015-11-07T00:00:00+00:00</updated><entry><title>Deconstructing Django with Flask</title><link href="https://pyvideo.org/pycon-ca-2015/deconstructing-django-with-flask-marc-sibson.html" rel="alternate"></link><published>2015-11-07T00:00:00+00:00</published><updated>2015-11-07T00:00:00+00:00</updated><author><name>Marc Sibson</name></author><id>tag:pyvideo.org,2015-11-07:pycon-ca-2015/deconstructing-django-with-flask-marc-sibson.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Motivation: With the rise of micro services, API first sites and mobile the draw of a lightweight framework is stronger than ever.  Django and its proscriptive batteries included approach can feel too heavy.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Django is awesome, but maybe I'm missing something with Flask thing. OMG, where do I start, there my so many choices&lt;/li&gt;
&lt;li&gt;Major components of Django: ORM, routing, templating, views, forms, migrations, configuration, ReST, models, tasks, tests, static assets, authentication, sessions etc&lt;/li&gt;
&lt;li&gt;templating, forms, static assets aren’t really needed for api/mobile use cases&lt;/li&gt;
&lt;li&gt;for each remaining component offer the “best” flask library&lt;/li&gt;
&lt;li&gt;build out a small API only app together using the &amp;quot;&amp;quot;best&amp;quot;&amp;quot; flask library&lt;/li&gt;
&lt;/ul&gt;
</summary></entry></feed>