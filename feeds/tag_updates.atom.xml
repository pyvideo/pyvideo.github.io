<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/tag_updates.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2011-03-11T00:00:00+00:00</updated><entry><title>TUF: Secure Software Updates in Python</title><link href="https://pyvideo.org/pycon-us-2011/pycon-2011--tuf--secure-software-updates-in-pytho.html" rel="alternate"></link><published>2011-03-11T00:00:00+00:00</published><updated>2011-03-11T00:00:00+00:00</updated><author><name>Geremy Condra</name></author><id>tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--tuf--secure-software-updates-in-pytho.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;TUF: Secure Software Updates in Python&lt;/p&gt;
&lt;p&gt;Presented by Geremy Condra&lt;/p&gt;
&lt;p&gt;From an attacker's point of view there are few entry points with as much
to offer as a vulnerable software updater, yet history tells us that
such vulnerabilities are common. In this talk we'll demonstrate a number
of attacks, explain how common approaches fail to defend against them,
and demonstrate a pure Python library (TUF) that provides both robust
protection and extreme ease of use.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;Vulnerabilities in software update systems expose users to huge range of
potential security risks, including:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Freeze attacks,&lt;/li&gt;
&lt;li&gt;Mix-and-match attacks,&lt;/li&gt;
&lt;li&gt;Rollback attacks, and&lt;/li&gt;
&lt;li&gt;Endless data attacks&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the first part of this talk, we'll demonstrate each of these against
real- world software updaters and explain how commonly used
countermeasures fail in application. We'll then move on to the second
part of the talk, demonstrating TUF, its internals, and the mechanisms
it uses to additionally defend against key compromise. Finally, we'll
demonstrate how easy it is to integrate TUF into your application and
its lifecycle.&lt;/p&gt;
</summary><category term="pycon"></category><category term="pycon2011"></category><category term="security"></category><category term="tuf"></category><category term="updates"></category></entry></feed>