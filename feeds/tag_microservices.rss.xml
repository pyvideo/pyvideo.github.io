<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Tue, 08 Oct 2019 00:00:00 +0000</lastBuildDate><item><title>Introduction To Docker / Python Microservices</title><link>https://pyvideo.org/hsvpy-huntsvilles-python-meetup/introduction-to-docker-python-microservices.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Two talks: 1) How Docker helped save a company time and money by automated environment setup / A look at Python Microservices using celery&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kyle Galloway</dc:creator><pubDate>Tue, 08 Oct 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-10-08:hsvpy-huntsvilles-python-meetup/introduction-to-docker-python-microservices.html</guid><category>Docker</category><category>microservices</category></item><item><title>Configuring uWSGI for Production: The defaults are all wrong</title><link>https://pyvideo.org/europython-2019/configuring-uwsgi-for-production-the-defaults-are-all-wrong.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Two years ago, we began migrating from a proprietary service framework
to a WSGI-compliant one. We chose uWSGI as our host because of its
performance and feature set. But, while powerful, uWSGI's defaults are
driven by backward compatibility and are not ideal for new deployments.
Powerful features can be overlooked due to the sheer magnitude of its
feature set and spotty documentation. As we've scaled up the number of
services hosted by uWSGI over the last year, we've had to tweak our
standard configuration.&lt;/p&gt;
&lt;p&gt;In this talk, we'll present the base uWSGI configuration we use as a
starting point for all services, as well as some tips to avoid known
gotchas and provide a base level of defensiveness and high reliability.
This base configuration makes use of several &amp;quot;no-cost&amp;quot; uWSGI features
that help protect services from common, yet difficult to prevent issues
-- some of which we discovered the hard way. We'll also talk about some
programmatic uWSGI features which can be leveraged to improve
reliability and improve outage response.&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;Some of the topics we'll cover include:&lt;/div&gt;
&lt;div class="line"&gt;- Mitigating memory leaks&lt;/div&gt;
&lt;div class="line"&gt;- Mitigating stuck, hung, or infinitely looping processes&lt;/div&gt;
&lt;div class="line"&gt;- Preventing misconfigurations&lt;/div&gt;
&lt;div class="line"&gt;- Preventing wasted development effort&lt;/div&gt;
&lt;div class="line"&gt;- Improving outage response&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter Sperl</dc:creator><pubDate>Fri, 12 Jul 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-07-12:europython-2019/configuring-uwsgi-for-production-the-defaults-are-all-wrong.html</guid><category>Best Practice</category><category>Distributed Systems</category><category>Microservices</category><category>Web Servers and MicroFWs</category><category>failures/mistakes</category></item><item><title>Deploy Python to the cloud faster with Azure Serverless</title><link>https://pyvideo.org/europython-2019/deploy-python-to-the-cloud-faster-with-azure-serverless.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Bringing your Python scripts or apps and running them in the cloud is
easier than ever with serverless computing. In this talk, we’ll show how
you can use Azure Functions to easily deploy and scale your Python
workloads without having to manage any servers or pay for unused compute
resources. We’ll also show how deep integration with Visual Studio Code
offers a great local development experience with full support for
debugging and testing your app, and allows you to seamlessly deploy your
serverless code to the cloud.&lt;/p&gt;
&lt;p&gt;We’ll start by giving a brief overview of the value of serverless
computing. Next, we'll create a brand new Python app in Visual Studio
Code, and start to add in business logic and ML capabilities. Once we
get the app running debugged locally, we’ll publish it to the cloud as a
serverless function, and demonstrate the serverless scalability.
Finally, we’ll walk you through the tools and capabilities you can
leverage around monitoring and management of your Python Azure
Functions.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jeff Hollan</dc:creator><pubDate>Thu, 11 Jul 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-07-11:europython-2019/deploy-python-to-the-cloud-faster-with-azure-serverless.html</guid><category>APIs</category><category>Development</category><category>Microservices</category><category>Scaling</category><category>Tooling</category></item><item><title>How To Build a Python Microservice Without Losing a Job</title><link>https://pyvideo.org/europython-2019/how-to-build-a-python-microservice-without-losing-a-job.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Sarcastic talk, sharing real-life experience on both technical and
social aspects of doing an architecture migration to microservices
without losing a job.&lt;/p&gt;
&lt;p&gt;Any change in software architecture is a significant time investment.
Writing microservices in Python is a joy, but when you decide on it,
there is often no way back. Therefore it is always an advantage to know
what to expect in advance, not just from inspiring blog posts but also
from the harsh reality.&lt;/p&gt;
&lt;p&gt;I would like to share typical pitfalls of choosing a framework stack,
communication protocol, conventions, and deployment process — all
covered by real projects.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Anton Caceres</dc:creator><pubDate>Thu, 11 Jul 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-07-11:europython-2019/how-to-build-a-python-microservice-without-losing-a-job.html</guid><category>Architecture</category><category>Best Practice</category><category>Communication</category><category>Distributed Systems</category><category>Microservices</category></item><item><title>Testing Microservices: fast and with confidence</title><link>https://pyvideo.org/europython-2019/testing-microservices-fast-and-with-confidence.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A main advantage of microservices is improved developer velocity. One
roadblock to achieving it is giving developers the confidence that their
changes are correct and safe, which is a challenging problem in such a
distributed architecture. Typical approaches involve relying on
automated end- to-end testing, which is costly to set up, develop tests
for and run.&lt;/p&gt;
&lt;p&gt;In this talk I will explore an approach to testing that does not require
the presence of any external dependencies (not even &amp;quot;fake&amp;quot; or &amp;quot;test
double&amp;quot; implementations of them), but provides many of the benefits of
an end-to-end test. Come by to learn about how we can use a downstream
service's API specification to make sure the system under test interacts
with it in the correct way (&amp;quot;contract testing&amp;quot;) - a key ingredient
missing from most unit or integration test setups. We'll then go even
further to cover testing scenarios that previously could only be covered
with end-to-end tests: how to maintain and validate state of your
downstream dependencies.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Stephan Jaensch</dc:creator><pubDate>Thu, 11 Jul 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-07-11:europython-2019/testing-microservices-fast-and-with-confidence.html</guid><category>Distributed Systems</category><category>Microservices</category><category>Testing</category><category>python</category></item><item><title>Communicating Between Microservices</title><link>https://pyvideo.org/pycon-italia-2019/communicating-between-microservices.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Microservices are not just a bunch of little apps, it’s a connected
ecosystem.&lt;/p&gt;
&lt;p&gt;Within a monolith, code modules invoke each other simply by using
language- level function calls, but in a microservice architecture,
communication between components does not come for free anymore.
Choosing not just a protocol, but a paradigm for communication between
endpoints is considered the most tricky issue of microservice approach.&lt;/p&gt;
&lt;p&gt;Writing microservices in Python is a joy, but when you decide on it,
there is often no way back. Therefore it is always an advantage to know
what to expect in advance, not just from inspiring blog posts but also
from the harsh reality.&lt;/p&gt;
&lt;p&gt;Having a bunch of smooth as well as tricky microservice migrations in
the past, I would like to share typical pitfalls of choosing a framework
stack, communication protocol, conventions, and deployment process — all
covered by real projects.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Feedback form:&lt;/strong&gt; &lt;a class="reference external" href="https://python.it/feedback-1638"&gt;https://python.it/feedback-1638&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;Saturday 4 May&lt;/strong&gt; at 17:15 &lt;a class="reference external" href="/en/sprints/schedule/pycon10/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Anton Caceres</dc:creator><pubDate>Sat, 04 May 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-05-04:pycon-italia-2019/communicating-between-microservices.html</guid><category>MessageQueues</category><category>microservices</category><category>HTTP</category><category>communication</category><category>architecture</category><category>websockets</category></item><item><title>How software can feed the world</title><link>https://pyvideo.org/pycon-italia-2019/how-software-can-feed-the-world.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Infarm is a FaaS, Farming as a Service, and whether you believe it or
not, our business is in-house farming at scale.&lt;/p&gt;
&lt;p&gt;We design and build our farms, grow vegetables and sell them, and the
backbone of our infrastructure is based on Python.&lt;/p&gt;
&lt;p&gt;More than 10 million observations recorded from our farms, rapidly
increasing given our expansion to new markets, feed our farm management
system that allows the operators, plant scientists, and supervisors to
monitor each farm in real-time.&lt;/p&gt;
&lt;p&gt;During this talk I will introduce our IoT infrastructure, how we use
Python and how we plan to improve the capabilities of our farms by
adding edge machine learning.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Feedback form:&lt;/strong&gt; &lt;a class="reference external" href="https://python.it/feedback-1785"&gt;https://python.it/feedback-1785&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;Saturday 4 May&lt;/strong&gt; at 18:45 &lt;a class="reference external" href="/en/sprints/schedule/pycon10/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Christian Barra</dc:creator><pubDate>Sat, 04 May 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-05-04:pycon-italia-2019/how-software-can-feed-the-world.html</guid><category>microservices</category><category>iot</category><category>CloudComputing</category><category>microcontroller</category><category>influxdb</category><category>raspberrypi</category><category>machine-learning</category><category>social-impact</category><category>python3</category></item><item><title>Python &amp; Serverless: Refactor your monolith piece by piece</title><link>https://pyvideo.org/pycon-italia-2019/python-serverless-refactor-your-monolith-piece-by-piece.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python &amp;amp; Serverless: Refactor your monolith piece by piece&lt;/p&gt;
&lt;p&gt;The introduction of the Function as a Service (Serverless) technologies
is facilitating the adoption of a microservices based architecture. In
this talk we will discuss why this might be useful (scalability / cost
opportunities / choosing the right tool for the job) and what strategies
we can follow to either extract independent services or add new
capabilities using an event driven architecture style to a django web
application. We will end up our discussion talking about testing and
monitoring of our freshly baked services.&lt;/p&gt;
&lt;p&gt;In this talk we will see:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Serverless/FaaS concepts brief intro&lt;/li&gt;
&lt;li&gt;Breaking up the monolith rationale&lt;/li&gt;
&lt;li&gt;Extracting some modules into independent services&lt;/li&gt;
&lt;li&gt;Adding more capabilities using events as a trigger for our FaaS&lt;/li&gt;
&lt;li&gt;Testing &amp;amp; Monitoring&lt;/li&gt;
&lt;li&gt;References&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The intended audience should be familiar with the concepts related to
web applications, web apis and a smattering of serverless concepts.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Feedback form:&lt;/strong&gt; &lt;a class="reference external" href="https://python.it/feedback-1591"&gt;https://python.it/feedback-1591&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;Friday 3 May&lt;/strong&gt; at 11:15 &lt;a class="reference external" href="/en/sprints/schedule/pycon10/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Giuseppe Vallarelli</dc:creator><pubDate>Fri, 03 May 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-05-03:pycon-italia-2019/python-serverless-refactor-your-monolith-piece-by-piece.html</guid><category>serverless</category><category>microservices</category><category>pyweb</category><category>aws</category><category>devops</category><category>django</category><category>lambda-functions</category><category>event-driven-architecture</category><category>cloud</category><category>faas</category></item><item><title>Serverless Computing con Python e AWS: Redux</title><link>https://pyvideo.org/pycon-italia-2018/serverless-computing-con-python-e-aws-redux.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Le innovazioni portate dal paradigma serverless sono ormai
un’alternativa concreta allo sviluppo di servizi monolitici. L’idea è
quella di poter pubblicare, nel Cloud, funzioni e pezzi di codice che
vengono invocati automaticamente al verificarsi di certi eventi, con
scalabilità orizzontale e senza doversi preoccupare della gestione dello
stack tecnologico sottostante.&lt;/p&gt;
&lt;p&gt;Nel corso di questo talk vedremo:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;la più breve introduzione al Cloud Computing del mondo;&lt;/li&gt;
&lt;li&gt;cosa sono i microservizi e come funzione il paradigma serverless;&lt;/li&gt;
&lt;li&gt;quali sono i casi d’uso che beneficiano di più da questo paradigma;&lt;/li&gt;
&lt;li&gt;come costruire un’applicazione serverless in Python con i componenti
di Amazon Web Services (Lambda, API Gateway, DynamoDB, S3…);&lt;/li&gt;
&lt;li&gt;come coordinare l’esecuzione del nostro codice Python (AWS Step
Functions);&lt;/li&gt;
&lt;li&gt;come rendere tutto ancora più semplice e ripetibile con l’uso di
framework specifici (Chalice, Serverless)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;in __on &lt;strong&gt;domenica 22 aprile&lt;/strong&gt; at 14:45 &lt;a class="reference external" href="/p3/schedule/pycon9/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Federico Caboni</dc:creator><pubDate>Sun, 22 Apr 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-04-22:pycon-italia-2018/serverless-computing-con-python-e-aws-redux.html</guid><category>serverless</category><category>microservices</category><category>CloudComputing</category><category>aws</category><category>Amazon</category><category>cloud</category></item><item><title>DevOps di applicazioni Python (e non solo) su OpenShift</title><link>https://pyvideo.org/pycon-italia-2018/devops-di-applicazioni-python-e-non-solo-su-openshift.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;div class="section" id="abstract"&gt;
&lt;h4&gt;Abstract&lt;/h4&gt;
&lt;p&gt;OpenShift Origin è la Platform-as-a-Service opensource di riferimento.
Basata su Kubernetes e Docker, contiene features aggiuntive e
integrazioni con altri componenti che semplificano le pratiche di
DevOps.&lt;/p&gt;
&lt;p&gt;Dopo una breve introduzione ad Openshift ed alla sua architettura,
vedremo come:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;fare il setup di infrastrutture applicative microservice-based (es.
microservizi Python Flask/Django, single page application Angular,
ecc…)&lt;/li&gt;
&lt;li&gt;creare una piattaforma di Continuous Integration e Continuous
Delivery&lt;/li&gt;
&lt;li&gt;implementare e gestire la CI/CD di microservice-based application
sfruttando l’integrazione con Git e Jenkins&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="agenda"&gt;
&lt;h4&gt;Agenda&lt;/h4&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;architettura di base di OpenShift&lt;/li&gt;
&lt;li&gt;come costruire un &lt;em&gt;project&lt;/em&gt; OpenShift: &lt;em&gt;builds&lt;/em&gt; e &lt;em&gt;deployments&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;automatizzare il setup mediante &lt;em&gt;template&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;utilizzare Git, Jenkins e Openshift per creare una semplice pipeline
di CI/CD&lt;/li&gt;
&lt;li&gt;strategie di deployment avanzate: &lt;em&gt;blue-green deployment&lt;/em&gt; , &lt;em&gt;A/B
deployment&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="prerequisiti"&gt;
&lt;h4&gt;Prerequisiti&lt;/h4&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;conoscenza base di Git e Jenkins&lt;/li&gt;
&lt;li&gt;conoscenza base dei concetti CI/CD e DevOps&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;in __on &lt;strong&gt;venerdì 20 aprile&lt;/strong&gt; at 11:45 &lt;a class="reference external" href="/p3/schedule/pycon9/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Francesco Fiore</dc:creator><pubDate>Fri, 20 Apr 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-04-20:pycon-italia-2018/devops-di-applicazioni-python-e-non-solo-su-openshift.html</guid><category>microservices</category><category>continuous-integration</category><category>git</category><category>continuous-delivery</category><category>kubernetes</category><category>devops</category><category>jenkins</category><category>docker</category><category>OpenShift</category></item><item><title>Designing fast and scalable Python MicroServices with django</title><link>https://pyvideo.org/pycon-sk-2018/designing-fast-and-scalable-python-microservices-with-django.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;django, combined with the django REST framework, makes it very easy to
build RESTful MicroServices. However, django is perceived to have some
overhead making it hard to build fast and scalable MicroServices. This
talk shows you how to squeeze the last bit of performance from django.
We will focus on django’s key architectural components and the right way
to use them. Using profiling, we will identify bottlenecks and fix them
enabling you to build scalable RESTful services that play to django’s
strengths. At the end of the talk you will have a good handle on
building scalable MicroServices with django.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dinesh Joshi</dc:creator><pubDate>Sat, 10 Mar 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-03-10:pycon-sk-2018/designing-fast-and-scalable-python-microservices-with-django.html</guid><category>Django</category><category>Django REST framework</category><category>MicroServices</category><category>PyCon SK</category><category>Python</category><category>RESTful services</category></item><item><title>Microservices: Death by a Thousand Cuts</title><link>https://pyvideo.org/pycon-ireland-2017/microservices-death-by-a-thousand-cuts.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Every one loves micro services as the great new... Small single purpose services are great for quick development and rapid releases. But if not managed well, it turns into death by a thousand cuts. In this talk I will go through strategies for managing the resulting complexity from a micro-services layout. The core tenets beings, automation, monitoring and discovery.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Vishal Vatsa</dc:creator><pubDate>Sat, 21 Oct 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-10-21:pycon-ireland-2017/microservices-death-by-a-thousand-cuts.html</guid><category>microservices</category></item><item><title>Serverless computing con Python e AWS</title><link>https://pyvideo.org/pycon-italia-2017/serverless-computing-con-python-e-aws.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Il paradigma serverless è una delle innovazioni più recenti e
interessanti negli ultimi anni: l’idea di base è quella di poter
pubblicare, nel Cloud, funzioni e pezzi di codice che vengono invocati
automaticamente al verificarsi di certi eventi, con scalabilità
potenzialmente infinita e senza doversi preoccupare della gestione dello
stack tecnologico sottostante.&lt;/p&gt;
&lt;p&gt;Nel corso di questo talk vi mostrerò:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;la più breve introduzione al Cloud Computing del mondo;&lt;/li&gt;
&lt;li&gt;cosa sono i microservizi e come funzione il paradigma serverless;&lt;/li&gt;
&lt;li&gt;quali sono i casi d’uso che beneficiano di più da questo paradigma;&lt;/li&gt;
&lt;li&gt;come costruire un’applicazione serverless in Python con i componenti
di Amazon Web Services (Lambda, API Gateway, DynamoDB, S3…);&lt;/li&gt;
&lt;li&gt;come coordinare l’esecuzione del nostro codice Python (AWS Step
Functions);&lt;/li&gt;
&lt;li&gt;come rendere tutto ancora più semplice con l’uso di framework
specifici (Chalice, Serverless)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;e, se avanza tempo:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;il senso della vita.&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Federico Caboni</dc:creator><pubDate>Sat, 08 Apr 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-04-08:pycon-italia-2017/serverless-computing-con-python-e-aws.html</guid><category>serverless</category><category>microservices</category><category>CloudComputing</category><category>aws</category><category>chalice</category><category>Amazon</category><category>cloud</category></item><item><title>Sparking Pandas: an experiment</title><link>https://pyvideo.org/pycon-italia-2017/sparking-pandas-an-experiment.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Pandas is a good library to deal with tabular data. What if you need to
manage an amount of data that doesn’t fit into memory? What if you want
to “distribute” your computations among multiple machines?&lt;/p&gt;
&lt;p&gt;Starting from a real scenario, Apache Spark will be presented as the
main tool to read and process collected data. It will be shown how a
Pandas-like syntax will come in handy to run aggregations, filtering and
grouping using a Spark Dataframe.&lt;/p&gt;
&lt;p&gt;A previous knowledge of Docker and Docker Compose will be very useful
while knowing MongoDB (where data will be fetched from) is not
mandatory. Basics of functional programming will help to understand
Spark inner logic.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Francesco Bruni</dc:creator><pubDate>Fri, 07 Apr 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-04-07:pycon-italia-2017/sparking-pandas-an-experiment.html</guid><category>microservices</category><category>Jupyter</category><category>mongodb</category><category>data-visualization</category><category>data-analysis</category><category>spark</category><category>docker</category></item></channel></rss>