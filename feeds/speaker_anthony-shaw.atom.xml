<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_anthony-shaw.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2019-05-03T14:35:00+00:00</updated><entry><title>Wily Python: Writing simpler and more maintainable Python</title><link href="https://pyvideo.org/pycon-us-2019/wily-python-writing-simpler-and-more-maintainable-python.html" rel="alternate"></link><published>2019-05-03T14:35:00+00:00</published><updated>2019-05-03T14:35:00+00:00</updated><author><name>Anthony Shaw</name></author><id>tag:pyvideo.org,2019-05-03:pycon-us-2019/wily-python-writing-simpler-and-more-maintainable-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Everyone starts with the best intentions with their Python projects,
&amp;quot;this time it's going to be clean, simple and maintainable&amp;quot;. But code
evolves over time, requirements change and codebases can get messy and
complicated quickly.&lt;/p&gt;
&lt;p&gt;In this talk, you will learn how to use &lt;tt class="docutils literal"&gt;wily&lt;/tt&gt; to measure and graph
how complicated your Python code is and a series of practical techniques
to simplify it. &lt;tt class="docutils literal"&gt;wily&lt;/tt&gt; will show you which parts of your projects are
becoming or have become hard to maintain and need a refactor. Once you
know where the skeletons are, you will learn practical techniques for
refactoring &amp;quot;complex&amp;quot; code and some resources to use to take your
refactoring to the next level.&lt;/p&gt;
</summary><category term="talk"></category></entry><entry><title>How to write a container daemon in Python</title><link href="https://pyvideo.org/pycon-au-2017/how-to-write-a-container-daemon-in-python.html" rel="alternate"></link><published>2017-08-05T00:00:00+00:00</published><updated>2017-08-05T00:00:00+00:00</updated><author><name>Anthony Shaw</name></author><id>tag:pyvideo.org,2017-08-05:pycon-au-2017/how-to-write-a-container-daemon-in-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;When the authors of Docker first started, they wrote the Docker daemon in Python. This was later switching for Go, but why? This talk will cover mocker, a container runtime Anthony wrote to understand Docker by rewriting its basic functions in 100% Python. Anthony will walk through how to write a Docker daemon in Python whilst applying it to real problems. Whilst the tool might not be production ready, it demonstrates some patterns, libraries and ideas for working with Docker containers from Python.&lt;/p&gt;
</summary></entry></feed>