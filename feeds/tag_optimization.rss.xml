<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Thu, 31 Oct 2019 00:00:00 +0000</lastBuildDate><item><title>From bigger than 1 billion years to smaller than 1 second</title><link>https://pyvideo.org/pycon-se-2019/from-bigger-than-1-billion-years-to-smaller-than-1-second.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The goal of this talk is to empower people with over a dozen optimisation techniques which may be effectively used in a wide variety of situations, even beyond Python.  I will present best practices, typical pitfalls and common tools, but the main focus will be on a practical approach. I will showcase a small problem and a naive solution, just a few lines of Python, so that it's easily understood. Iteratively I will apply each optimisation, explain the reasoning behind it and note how execution time is reduced. By the end of the talk, one will see how the code evolved from something that would take &amp;gt;1 billion years to compute to &amp;lt;1 second on a regular laptop.  I will also compare running times between Python, PyPy and C++ implementations (one being just a few milliseconds), and show how the techniques may achieve vastly different speedups from the python versions.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Isaac Bernat</dc:creator><pubDate>Thu, 31 Oct 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-10-31:pycon-se-2019/from-bigger-than-1-billion-years-to-smaller-than-1-second.html</guid><category>Performance</category><category>optimization</category><category>optimisation</category></item><item><title>Deep Learning for brain MRI segmentation: Big Data, AI and HPC meet together</title><link>https://pyvideo.org/pycon-italia-2019/deep-learning-for-brain-mri-segmentation-big-data-ai-and-hpc-meet-together.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;With ever-increasing advancements in technology, neuroscientists are
able to collect data in greater volumes and with finer resolution. There
has been a growing interest in leveraging this vast volume of data
across levels of analysis, measurement techniques, and experimental
paradigms to gain more insight into brain function. At multiple stages
and levels of neuroscience investigation, ML holds great promise as an
addition to the arsenal of analysis tools for discovering how the brain
works. As quantitative analysis of brain MRI is routine for many
neurological diseases and conditions, deep learning-based segmentation
approaches for brain Magnetic Resonance Imaging (MRI) are gaining
interest due to their self-learning and generalisation ability over
large amounts of data. On the other hand, High Performance Computing
(HPC) and AI will increasingly intertwine as we transition to an
exascale future using new computing, storage, and communications
technologies. In this talk I will walk you through fundamentals of
generating high- performance deep-learning models in TensorFlow platform
using Python on large computing system (e.g NVIDIA® Tesla® GPUs powered
by Tensor Cores), in order to infer and segment thousands of cell
centroids out of the brain objects of interest. From a more
technological perspective, although astonishing results have been
achieved concerning the distribution of training large convolutional
neural networks on big data, to date the Python scientific ecosystem is
still missing tools for an optimised and, above all, distributed
inference of deep learning models. In this talk I will show you how a
tiling-based inferencing approach could be a good solution to remedy the
problem. The talk is intended for intermediate PyData researchers and
practitioners. Basic to intermediate level experience in image
recognition/object detection deep learning applications is assumed.
Overall, a good proficiency with the Python language and with scientific
python libraries (e.g. numpy, TensorFlow, Keras) are required for the
entire talk.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Feedback form:&lt;/strong&gt; &lt;a class="reference external" href="https://python.it/feedback-1794"&gt;https://python.it/feedback-1794&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;Sunday 5 May&lt;/strong&gt; at 11:00 &lt;a class="reference external" href="/en/sprints/schedule/pycon10/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Giuseppe Di Bernardo</dc:creator><pubDate>Sun, 05 May 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-05-05:pycon-italia-2019/deep-learning-for-brain-mri-segmentation-big-data-ai-and-hpc-meet-together.html</guid><category>GPUComputing</category><category>parallelization</category><category>bio-informatics</category><category>Machine Learning</category><category>ComputerVision</category><category>optimization</category><category>data-analysis</category><category>Artificial Intelligence</category></item><item><title>An insight into Python Garbage Collection</title><link>https://pyvideo.org/pycon-italia-2019/an-insight-into-python-garbage-collection.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The talk will describe Python garbage collection, specifically the
CPython strategy. Various examples will demonstrate its peculiarities
and the related impact in term of performance. Whenever feasible, the
relevant piece of the actual CPython source code will be presented and
explained. Finally, the talk will focus on some comparisons with
alternative language implementation (such as PyPy) or other languages
garbage collectors (Golang). A mid-level experience with the Python
language is required. A very basic knowledge of both C and GO
programming languages will help to understand some examples regarding
CPython and Go, but it is not essential.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Feedback form:&lt;/strong&gt; &lt;a class="reference external" href="https://python.it/feedback-1767"&gt;https://python.it/feedback-1767&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;Friday 3 May&lt;/strong&gt; at 18:00 &lt;a class="reference external" href="/en/sprints/schedule/pycon10/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Fabio Falzoi</dc:creator><pubDate>Fri, 03 May 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-05-03:pycon-italia-2019/an-insight-into-python-garbage-collection.html</guid><category>performance</category><category>optimization</category></item><item><title>Python: da programmatore a domatore</title><link>https://pyvideo.org/europython-2013/python-da-programmatore-a-domatore.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alessandro Pisa</dc:creator><pubDate>Fri, 05 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-05:europython-2013/python-da-programmatore-a-domatore.html</guid><category>debugging</category><category>testing</category><category>integration</category><category>scalability</category><category>tdd</category><category>optimization</category><category>design</category><category>software-engineering</category><category>best-practices</category><category>architecture</category></item><item><title>Scegliere le armi per la battaglia del calcolo intensivo</title><link>https://pyvideo.org/europython-2013/scegliere-le-armi-per-la-battaglia-del-calcolo-intensivo.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Enrico Franchi</dc:creator><pubDate>Fri, 05 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-05:europython-2013/scegliere-le-armi-per-la-battaglia-del-calcolo-intensivo.html</guid><category>bigdata</category><category>optimization</category><category>data-analysis</category><category>hpc</category><category>performance</category><category>scientific-computing</category></item><item><title>An optimizing static Python compiler</title><link>https://pyvideo.org/europython-2013/an-optimizing-static-python-compiler.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kay Hayen</dc:creator><pubDate>Thu, 04 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-04:europython-2013/an-optimizing-static-python-compiler.html</guid><category>performance</category><category>scientific-computing</category><category>optimization</category><category>open-source</category><category>python3</category></item><item><title>Never get in a battle of bits without ammunition.</title><link>https://pyvideo.org/europython-2013/never-get-in-a-battle-of-bits-without-ammunition.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Enrico Franchi</dc:creator><pubDate>Thu, 04 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-04:europython-2013/never-get-in-a-battle-of-bits-without-ammunition.html</guid><category>cython</category><category>C/C++</category><category>nosql</category><category>mongodb</category><category>numeric</category><category>iPython</category><category>optimization</category><category>Algorithms</category><category>data-analysis</category><category>hpc</category><category>performance</category><category>scientific-computing</category><category>numpy</category></item><item><title>Python and PostgreSQL for Huge Data Warehouses</title><link>https://pyvideo.org/europython-2013/python-and-postgresql-for-huge-data-warehouses.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Hannu Krosing</dc:creator><pubDate>Thu, 04 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-04:europython-2013/python-and-postgresql-for-huge-data-warehouses.html</guid><category>postgresql</category><category>nosql</category><category>parallelization</category><category>bigdata</category><category>scalability</category><category>pl/python</category><category>olap</category><category>optimization</category><category>architecture</category><category>sql</category><category>performance</category></item><item><title>Greenlet-based concurrency</title><link>https://pyvideo.org/europython-2013/greenlet-based-concurrency.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Goran Peretin</dc:creator><pubDate>Wed, 03 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-03:europython-2013/greenlet-based-concurrency.html</guid><category>parallelization</category><category>optimization</category><category>gevent</category><category>greenlet</category><category>concurrency</category><category>performance</category></item><item><title>pl/python now as powerful as C</title><link>https://pyvideo.org/europython-2013/plpython-now-as-powerful-as-c.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Hannu Krosing</dc:creator><pubDate>Wed, 03 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-03:europython-2013/plpython-now-as-powerful-as-c.html</guid><category>postgresql</category><category>nosql</category><category>database</category><category>mongodb</category><category>bigdata</category><category>pl/python</category><category>optimization</category><category>sql</category><category>Full Text Search</category></item><item><title>Python: from programmer to tamer</title><link>https://pyvideo.org/europython-2013/python-from-programmer-to-tamer.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alessandro Pisa</dc:creator><pubDate>Wed, 03 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-03:europython-2013/python-from-programmer-to-tamer.html</guid><category>debugging</category><category>testing</category><category>integration</category><category>scalability</category><category>tdd</category><category>optimization</category><category>design</category><category>software-engineering</category><category>best-practices</category><category>architecture</category></item><item><title>How DISQUS does "it" when "it" isn't Django</title><link>https://pyvideo.org/europython-2013/how-disqus-does-it-when-it-isnt-django.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Adam Hitchcock</dc:creator><pubDate>Tue, 02 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-02:europython-2013/how-disqus-does-it-when-it-isnt-django.html</guid><category>web</category><category>realtime</category><category>mongodb</category><category>zookeeper</category><category>scalability</category><category>django</category><category>celery</category><category>optimization</category><category>gevent</category><category>concurrency</category><category>performance</category></item><item><title>PostgreSQL is Web-Scale (Really :) )</title><link>https://pyvideo.org/europython-2013/postgresql-is-web-scale-really.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk I show you how to set up a python and PostgreSQL based
system which is easy to set up and easy to scale, provides ACID
guarantees where they are needed and delays time-consistency between
unrelated objects for scalability and availability where the latter are
deemed more important.&lt;/p&gt;
&lt;p&gt;The best thing is that this kind of scalability work for both OLTP and
OLAP workloads, so with some planning you can have just a single large
“database” which can take almost any type of load.&lt;/p&gt;
&lt;p&gt;Also, if you hate SQL, you can do all the OLTP stuff in a pythonic way
using an automagically generated ORM layer inside the database, near the
data. If you are really masochistic, you can use the same ORM also for
map-reduce type distributed data processing, though on this side the
small effort of learning SQL usually pays off when queries get more
complex. But as I said, everything runs inside the databse, near the
data and thus even the ORM &amp;amp; map-reduce analytics works fast.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Hannu Krosing</dc:creator><pubDate>Tue, 02 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-02:europython-2013/postgresql-is-web-scale-really.html</guid><category>postgresql</category><category>nosql</category><category>datamining</category><category>parallelization</category><category>distributed</category><category>bigdata</category><category>scalability</category><category>pl/python</category><category>olap</category><category>optimization</category><category>orm</category><category>sql</category><category>performance</category></item><item><title>Uno sguardo agli internal di RestFS</title><link>https://pyvideo.org/europython-2013/uno-sguardo-agli-internal-di-restfs.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Fabrizio Manfredi</dc:creator><pubDate>Tue, 02 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-02:europython-2013/uno-sguardo-agli-internal-di-restfs.html</guid><category>clustering</category><category>HTTP</category><category>parallelization</category><category>distributed</category><category>twisted</category><category>REST</category><category>optimization</category><category>Algorithms</category><category>scalability</category><category>async</category><category>hpc</category><category>performance</category></item><item><title>Django Rest Framework - Tips&amp;Tricks</title><link>https://pyvideo.org/pycon-italia-2017/django-rest-framework-tipstricks.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Developing Web APIs for Django websites have never been so easy.
Starting from a real world use case, I’ll explain why DRF became our
weapon of choice to develop in a fast and easy way all the APIs we need
at Cloud Academy.&lt;/p&gt;
&lt;p&gt;We’ll start talking about the main benefits that DRF brings to Django
projects, then we’ll use our real world use case to describe the best
practices we use to build fast, secure and maintainable APIs diving into
DRF main features and functionalities.&lt;/p&gt;
&lt;p&gt;The scope of this talk is to explain in a very practical way how DRF can
be integrated into Django projects to build beautiful web APIs. We’ll
use a lot of code examples and performance benchmarks to describe the
various features explored during the talk. No prior experience on DRF is
required but at least some basic knowledge of Django is suggested for
attendees.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Luca Zacchetti</dc:creator><pubDate>Sat, 08 Apr 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-04-08:pycon-italia-2017/django-rest-framework-tipstricks.html</guid><category>django-rest-framework</category><category>REST API Frameworks</category><category>API Design</category><category>REST</category><category>django</category><category>optimization</category><category>performance</category></item><item><title>Educational framework for Black Box optimization methods design</title><link>https://pyvideo.org/pydata-dc-2016/educational-framework-for-black-box-optimization-methods-design.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyData DC 2016&lt;/p&gt;
&lt;p&gt;Many pressing real world problems can be stated as problems of global optimization, where target function is a black box. Such problems are best approached with a library of optimization methods to help study the nature of the problem. We show how to use Scipy.optimize and Scikit-learn modules to create global optimization methods with desired properties.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nadia Udler</dc:creator><pubDate>Fri, 07 Oct 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-10-07:pydata-dc-2016/educational-framework-for-black-box-optimization-methods-design.html</guid><category>Design</category><category>framework</category><category>optimization</category></item><item><title>PyOhio 2010: Implementation of a Numerical Simulation in Python</title><link>https://pyvideo.org/pyohio-2010/pyohio-2010--implementation-of-a-numerical-simula.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Implementation of a Numerical Simulation in Python&lt;/p&gt;
&lt;p&gt;Presented by Jeffrey B. Armstrong&lt;/p&gt;
&lt;p&gt;The Python programming language is well suited for numerical computation
under a variety of circumstances. Python offers advantages over
competing free and commercial technologies, including price,
functionality, and maintainability. Specifically, the combination of
mature numerical libraries and liberal licensing allow complex
simulations to be coded with ease and to be made available to nearly all
interested parties. !NumPy/!SciPy, database access, networking, and
optimization techniques are examined in detail with respect to numerical
computation. A practical example involving an aerothermal commercial
turbofan aircraft engine simulation showcases these advantages. An
aircraft engine is broken down into discrete stages, including
compressors, turbines, and other flow-related components. Commonalities
between components, such as rotation and the presence of inlet and exit
conditions, map cleanly to the object-oriented nature of Python. Based
on simulation needs and hardware availability, Python allows for the
parallel computation of simulations without the expense and complexity
of commercial parallelization packages.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jeffrey Armstrong</dc:creator><pubDate>Sat, 31 Jul 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-07-31:pyohio-2010/pyohio-2010--implementation-of-a-numerical-simula.html</guid><category>database</category><category>networking</category><category>numpy</category><category>optimization</category><category>pyohio</category><category>pyohio2010</category><category>scipy</category><category>simulation</category></item><item><title>PyPy and Unladen Swallow: Making your Python Fast</title><link>https://pyvideo.org/chipy/pypy-and-unladen-swallow--making-your-python-fast.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Python has a reputation for being a bit slow, but it doesn't have to be
that way. This talk will cover why Python is slow, and what two of the
most exciting virtual machines are doing about it.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alex Gaynor</dc:creator><pubDate>Thu, 08 Jul 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-07-08:chipy/pypy-and-unladen-swallow--making-your-python-fast.html</guid><category>chipy</category><category>optimization</category><category>performance</category><category>pypy</category><category>unladenswallow</category></item><item><title>Alice in Performanceland -- Down the Rabbit Hole with Frank Wiles</title><link>https://pyvideo.org/djangocon-us-2010/djangocon-2010--alice-in-performanceland----down-.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;While pre-optimization is often the root of all evil, knowing how to
think about performance and scalability are important skills for any
geek. Learn about all the knobs you didn't know you could or should
tweak.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;Code profiling and dealing with your database aren't the only places to
find performance gains. Performance and scalability are holistic
endeavors.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Frank Wiles</dc:creator><pubDate>Thu, 09 Sep 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-09-09:djangocon-us-2010/djangocon-2010--alice-in-performanceland----down-.html</guid><category>djangocon</category><category>djangocon2010</category><category>optimization</category><category>performance</category><category>scaling</category></item><item><title>Advanced Python</title><link>https://pyvideo.org/europython-2011/advanced-python.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Raymond Hettinger - 21 June 2011 in &amp;quot;Training Pizza
Margherita&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This tutorial will work through a series of real-world examples, showing
how an understanding of the tools built into the Python interpreter or
included in the standard library can be combined to solve difficult
problems clearly and Pythonically. We will also discuss when and how to
reach beyond the standard library when needed to address difficult
algorithmic and optimization problems.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Raymond Hettinger</dc:creator><pubDate>Wed, 20 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-20:europython-2011/advanced-python.html</guid><category>optimization</category><category>tutorial</category></item><item><title>Building Scalable Web Apps</title><link>https://pyvideo.org/europython-2011/building-scalable-web-apps.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] David Cramer - 21 June 2011 in &amp;quot;Track Spaghetti&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Building scalable web applications may seem like a distant problem, but
the problem is not thinking about it before it's too late. This talk
will focus on designing a scalable web application before it needs to be
(and avoiding the premature optimization dilemma). It will cover topics
such as efficient usage of your database, appropriate caching (and
invalidation!), and what the speaker considers as best practices.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">David Cramer</dc:creator><pubDate>Thu, 07 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-07:europython-2011/building-scalable-web-apps.html</guid><category>optimization</category><category>scalable</category><category>web</category></item><item><title>PyCon 2009: Faster Python Programs through Optimization (Part 1 of 3)</title><link>https://pyvideo.org/pycon-us-2009/pycon-2009--faster-python-programs-through-optim0.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;[VIDEO HAS ISSUES: vga blurry] Although Python programs may be slow for
certain types of tasks, there are many different ways to improve
performance. This tutorial will introduce optimization strategies and
demonstrate techniques to implement them. Another of the objectives of
this course is to give participants the ability to decide what might be
the optimal solution for a certain performance problem. Participants are
strongly recommended to bring laptops because all techniques are
introduced with examples and exercises.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Unknown</dc:creator><pubDate>Tue, 17 Feb 2009 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2009-02-17:pycon-us-2009/pycon-2009--faster-python-programs-through-optim0.html</guid><category>optimization</category><category>pycon</category><category>pycon2009</category><category>python-advanced</category></item><item><title>PyCon 2009: Faster Python Programs through Optimization (Part 3 of 3)</title><link>https://pyvideo.org/pycon-us-2009/pycon-2009--faster-python-programs-through-optim1.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;[VIDEO HAS ISSUES: vga blurry] Although Python programs may be slow for
certain types of tasks, there are many different ways to improve
performance. This tutorial will introduce optimization strategies and
demonstrate techniques to implement them. Another of the objectives of
this course is to give participants the ability to decide what might be
the optimal solution for a certain performance problem. Participants are
strongly recommended to bring laptops because all techniques are
introduced with examples and exercises.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Unknown</dc:creator><pubDate>Tue, 17 Feb 2009 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2009-02-17:pycon-us-2009/pycon-2009--faster-python-programs-through-optim1.html</guid><category>optimization</category><category>pycon</category><category>pycon2009</category><category>python-advanced</category></item><item><title>PyCon 2009: Faster Python Programs through Optimization (Part 2 of 3)</title><link>https://pyvideo.org/pycon-us-2009/pycon-2009--faster-python-programs-through-optimi.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;[VIDEO HAS ISSUES: vga blurry] Although Python programs may be slow for
certain types of tasks, there are many different ways to improve
performance. This tutorial will introduce optimization strategies and
demonstrate techniques to implement them. Another of the objectives of
this course is to give participants the ability to decide what might be
the optimal solution for a certain performance problem. Participants are
strongly recommended to bring laptops because all techniques are
introduced with examples and exercises.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Unknown</dc:creator><pubDate>Tue, 17 Feb 2009 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2009-02-17:pycon-us-2009/pycon-2009--faster-python-programs-through-optimi.html</guid><category>optimization</category><category>pycon</category><category>pycon2009</category><category>python-advanced</category></item><item><title>Faster Python Programs Through Optimization</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--faster-python-programs-through-optimi.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Faster Python Programs Through Optimization&lt;/p&gt;
&lt;p&gt;Mike MÃ¼ller&lt;/p&gt;
&lt;p&gt;Although Python programs may be slow for certain types of tasks, there
are many different ways to improve performance. This tutorial will
introduce optimization strategies and demonstrate techniques to
implement them. Another of the objectives of this course is to give
participants the ability to decide what might be the optimal solution
for a certain performance problem. Participants are strongly recommended
to bring laptops because all techniques are introduced with examples and
exercises.&lt;/p&gt;
&lt;p&gt;Intended Audience&lt;/p&gt;
&lt;p&gt;Python programmers with intermediate knowledge.&lt;/p&gt;
&lt;p&gt;Class Outline&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;How Fast is Fast Enough?&lt;/li&gt;
&lt;li&gt;Optimization Guidelines&lt;ul&gt;
&lt;li&gt;Premature optimization&lt;/li&gt;
&lt;li&gt;Optimization rules&lt;/li&gt;
&lt;li&gt;Seven steps for incremental optimization&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Optimization strategy&lt;ul&gt;
&lt;li&gt;Measuring in stones&lt;/li&gt;
&lt;li&gt;Profiling CPU usage&lt;/li&gt;
&lt;li&gt;Profiling memory usage&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Algorithms and Anti-patterns&lt;ul&gt;
&lt;li&gt;String Concatenation&lt;/li&gt;
&lt;li&gt;List and Generator Comprehensions&lt;/li&gt;
&lt;li&gt;The Right Data Structure&lt;/li&gt;
&lt;li&gt;Caching&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The Example&lt;/li&gt;
&lt;li&gt;Testing Speed&lt;/li&gt;
&lt;li&gt;Pure Python&lt;/li&gt;
&lt;li&gt;Meet Psyco, the JIT&lt;/li&gt;
&lt;li&gt;Numpy for Numeric Arrays&lt;/li&gt;
&lt;li&gt;Using multiple CPUs with pyprocessing/multiprocessing&lt;/li&gt;
&lt;li&gt;Combination of optimization strategies&lt;/li&gt;
&lt;li&gt;Results of Different Example Implementations&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The following third-party packages are needed:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;psyco (version 1.5.2 or higher)&lt;/li&gt;
&lt;li&gt;numpy (version 1.2 or higher)&lt;/li&gt;
&lt;li&gt;pyprocessing (2.5 or lower only)&lt;/li&gt;
&lt;li&gt;Guppy_PE framework&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Unknown</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--faster-python-programs-through-optimi.html</guid><category>optimization</category><category>pycon</category><category>pycon2010</category><category>tutorial</category></item><item><title>Optimizations And Micro-Optimizations In CPython (#38)</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--optimizations-and-micro-optimizations.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Optimizations and Micro-Optimizations in CPython&lt;/p&gt;
&lt;p&gt;Presented by Mr. Larry Hastings&lt;/p&gt;
&lt;p&gt;CPython mostly gets faster from one version to the next. And when
CPython gets faster, your programs get faster. This talk is a survey of
optimizations made to CPython, recent and historical, large and small.
Audience doesn't need to be familiar with CPython internals, but should
be familiar with Python and conversant in C.&lt;/p&gt;
&lt;p&gt;[VIDEO HAS ISSUES: Audio interference]&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Larry Hastings</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--optimizations-and-micro-optimizations.html</guid><category>cpython</category><category>optimization</category><category>pycon</category><category>pycon2010</category></item></channel></rss>