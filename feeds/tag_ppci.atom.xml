<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/tag_ppci.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2017-08-31T00:00:00+00:00</updated><entry><title>Introduction into the ppci project</title><link href="https://pyvideo.org/euroscipy-2017/introduction-into-the-ppci-project.html" rel="alternate"></link><published>2017-08-31T00:00:00+00:00</published><updated>2017-08-31T00:00:00+00:00</updated><author><name>Windel Bouwman</name></author><id>tag:pyvideo.org,2017-08-31:euroscipy-2017/introduction-into-the-ppci-project.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The ppci project was started by the need for a better system level
programming language then C. The compiler is implemented in python, and
hence is not very fast. On the other hand, the compiler is portable and
is easier to develop due to being implemented into a higher level
language. Currently it supports msp430, x86, xtensa, avr, arm, open risc
and stm8 computer architectures, in various levels of maturity. The
supported languages are C3 and brainfuck. Language support for C is a
work in progress.&lt;/p&gt;
&lt;p&gt;The C3 language was the starting point for the compiler, aiming at being
a better version of C. It has no header files, but features a more
modular approach like C# and java. Furthermore its syntax is context
free, making it easier to parse using standard compiler tools.&lt;/p&gt;
&lt;p&gt;The backend of the compiler consists of a code generator featuring both
instruction selection and register coloring algorithms. The output of
the compiler is an instruction stream, which can be serialized as text
or in binary form.&lt;/p&gt;
&lt;p&gt;Possible uses of this library are:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Compile code and include it into the currently running python
instance&lt;/li&gt;
&lt;li&gt;Create ctypes bindings for C code by making use of the C parser
frontend&lt;/li&gt;
&lt;li&gt;Create a programming language using ply/textx and generate machine
code from it using ppci&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;During this session, we will explore the various parts of the ppci
library and have a good overview what it is capable of.&lt;/p&gt;
&lt;p&gt;Further documentation is &lt;a class="reference external" href="http://ppci.readthedocs.io/en/latest/"&gt;located
here&lt;/a&gt;&lt;/p&gt;
</summary><category term="ppci"></category></entry></feed>