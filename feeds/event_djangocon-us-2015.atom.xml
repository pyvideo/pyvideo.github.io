<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/event_djangocon-us-2015.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2015-09-28T00:00:00+00:00</updated><entry><title>How I learned Django while working at Eventbrite</title><link href="https://pyvideo.org/djangocon-us-2015/how-i-learned-django-while-working-at-eventbrite.html" rel="alternate"></link><published>2015-09-28T00:00:00+00:00</published><updated>2015-09-28T00:00:00+00:00</updated><author><name>Allison Lacker</name></author><id>tag:pyvideo.org,2015-09-28:djangocon-us-2015/how-i-learned-django-while-working-at-eventbrite.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;How I learned Django while working at Eventbrite by Allison Lacker&lt;/p&gt;
&lt;p&gt;We all are constantly learning new technologies and strategies to be
more effective at our jobs, or just because they interest us. How do you
balance the need to stay on top of the latest and greatest changes in
our industry with making a product? How do you take a new hire with
amazing potential and help them learn everything they need to know,
while shipping at the same time?&lt;/p&gt;
&lt;p&gt;Shipping code as soon as possible isn't a cutthroat business decision.
It helps people learn faster, be more effective, feel more valued, and
keeps them centered on the right goals.&lt;/p&gt;
&lt;p&gt;How do you balance learning with shipping code? Is there any reason they
have to be separate? Too often we feel that these are discrete tasks.&lt;/p&gt;
&lt;p&gt;Benefits of learning technology by applying it to real world problems
are: - Fixing a real world problem - Learning something that is
immediately useful - Remembering it better than if you had learned the
theory&lt;/p&gt;
&lt;p&gt;Dangers to consider include: - Not everyone learns the same way - Real
world problems can be vastly more difficult than you expect, unless
you've already solved them - Revealing embarrassing legacy code and
decisions earlier than you'd like&lt;/p&gt;
&lt;p&gt;Help us caption &amp;amp; translate this video!&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://amara.org/v/HJch/"&gt;http://amara.org/v/HJch/&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Coding Like a Girl</title><link href="https://pyvideo.org/djangocon-us-2015/coding-like-a-girl-by-gabriela-davila.html" rel="alternate"></link><published>2015-09-24T00:00:00+00:00</published><updated>2015-09-24T00:00:00+00:00</updated><author><name>Gabriela D'Ávila</name></author><id>tag:pyvideo.org,2015-09-24:djangocon-us-2015/coding-like-a-girl-by-gabriela-davila.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Coding Like a Girl&lt;/p&gt;
&lt;p&gt;Through the past years is being noticeable the interest of our industry
in increasing the diversity as whole. People are getting more conscious
of the importance of having a balanced team and how it is beneficial to
be so.&lt;/p&gt;
&lt;p&gt;This talk is not about gender war, of how one gender is better than
another. Is about how having that balance the productivity and
innovation can increase to make it a sucessful team.&lt;/p&gt;
&lt;p&gt;Help us caption &amp;amp; translate this video!&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://amara.org/v/HIYU/"&gt;http://amara.org/v/HIYU/&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Confident web development with React</title><link href="https://pyvideo.org/djangocon-us-2015/confident-web-development-with-react-by-julien.html" rel="alternate"></link><published>2015-09-24T00:00:00+00:00</published><updated>2015-09-24T00:00:00+00:00</updated><author><name>Julien Phalip</name></author><id>tag:pyvideo.org,2015-09-24:djangocon-us-2015/confident-web-development-with-react-by-julien.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Confident web development with React&lt;/p&gt;
&lt;p&gt;React has become increasingly popular over the past year and is already
used in large-scale products and companies such as Facebook, Instagram,
Khan Academy, Hipchat and Netflix. This rapid success can in part be
explained by React's performance qualities as well as its clean,
predictable development workflow. To boot, its learning curve is very
short despite it introducing a pretty radically different way of
approaching front-end web development. Overall, React tends to greatly
appeal to Django developers as both tools share the same philosophies of
elegance and practicality.&lt;/p&gt;
&lt;p&gt;React can benefit all types of web applications, from single-page apps
to more conventional websites and can easily be introduced to complement
existing web architectures. While React is Javascript-based and is
primarily a client-side presentation tool, it remains agnostic about the
rest of the stack and works really well with backend technologies like
Django.&lt;/p&gt;
&lt;p&gt;In this talk I will present how React and Django can work together to
build powerful, easier-to-maintain web applications with confidence. I
will start with a brief introduction of React's key concepts: the Flux
architecture, the virtual DOM, JSX and the React component life-cyle. I
will then explain how React can integrate with Django-powered backends
and discuss some advanced topics such as server-side rendering,
isomorphic JS, animations, testing, production environments and
integration with asset pipelines. Numerous code samples will illustrate
the various concepts presented. By the end of this talk, members of the
audience who are unfamiliar with React will have a good grasp of its
functioning and of its benefits; those already familiar with React will
also have learned several useful tips applicable to their Django
projects.&lt;/p&gt;
&lt;p&gt;Help us caption &amp;amp; translate this video!&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://amara.org/v/HIYT/"&gt;http://amara.org/v/HIYT/&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Consequences of an Insightful Algorithm</title><link href="https://pyvideo.org/djangocon-us-2015/consequences-of-an-insightful-algorithm-by-carina.html" rel="alternate"></link><published>2015-09-24T00:00:00+00:00</published><updated>2015-09-24T00:00:00+00:00</updated><author><name>Carina C. Zona</name></author><id>tag:pyvideo.org,2015-09-24:djangocon-us-2015/consequences-of-an-insightful-algorithm-by-carina.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Consequences of an Insightful Algorithm&lt;/p&gt;
&lt;p&gt;We have ethical responsibilities when coding. We’re able to extract
remarkably precise intuitions about an individual. But do we have a
right to know what they didn’t consent to share, even when they
willingly shared the data that leads us there? A major retailer’s
data-driven marketing accidentially revealed to a teen’s family that she
was pregnant. Eek.&lt;/p&gt;
&lt;p&gt;What are our obligations to people who did not expect themselves to be
so intimately known without sharing directly? How do we mitigate against
unintended outcomes? For instance, an activity tracker carelessly
revealed users’ sexual activity data to search engines. A social
network’s algorithm accidentally triggered painful memories for grieving
families who’d recently experienced death of their child and other loved
ones.&lt;/p&gt;
&lt;p&gt;We design software for humans. Balancing human needs and business specs
can be tough. It’s crucial that we learn how to build in systematic
empathy.&lt;/p&gt;
&lt;p&gt;In this talk, we’ll delve into specific examples of uncritical
programming, and painful results from using insightful data in ways that
were benignly intended. You’ll learn ways we can integrate practices for
examining how our code might harm individuals. We’ll look at how to flip
the paradigm, netting consequences that can be better for everyone.&lt;/p&gt;
&lt;p&gt;Help us caption &amp;amp; translate this video!&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://amara.org/v/HIYS/"&gt;http://amara.org/v/HIYS/&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Intro to Client-Side Testing</title><link href="https://pyvideo.org/djangocon-us-2015/intro-to-client-side-testing-by-mark-lavin.html" rel="alternate"></link><published>2015-09-24T00:00:00+00:00</published><updated>2015-09-24T00:00:00+00:00</updated><author><name>Mark Lavin</name></author><id>tag:pyvideo.org,2015-09-24:djangocon-us-2015/intro-to-client-side-testing-by-mark-lavin.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Intro to Client-Side Testing&lt;/p&gt;
&lt;p&gt;Intro/Background Example Project Getting Started with Selenium
Navigating pages Finding elements Waiting on actions Unittesting with
QUnit Why QUnit? Tests and assertions Test fixtures Additional Resources
Q&amp;amp;A&lt;/p&gt;
&lt;p&gt;Help us caption &amp;amp; translate this video!&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://amara.org/v/HIXN/"&gt;http://amara.org/v/HIXN/&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Introduction to Sphinx &amp; Read the Docs</title><link href="https://pyvideo.org/djangocon-us-2015/introduction-to-sphinx-read-the-docs-by-eric.html" rel="alternate"></link><published>2015-09-24T00:00:00+00:00</published><updated>2015-09-24T00:00:00+00:00</updated><author><name>Eric Holscher</name></author><id>tag:pyvideo.org,2015-09-24:djangocon-us-2015/introduction-to-sphinx-read-the-docs-by-eric.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Introduction to Sphinx &amp;amp; Read the Docs&lt;/p&gt;
&lt;p&gt;This talk will have four parts:&lt;/p&gt;
&lt;p&gt;Why Write Documentation Semantic Markup Sphinx Read the Docs The
beginning of this talk will cover why you should write documentation.
Every talk to developers about documentation I feel needs this part,
because when you talk about docs people are inherently skeptical. Once
people get on board that docs are important, you can cover more
interesting concepts.&lt;/p&gt;
&lt;p&gt;Then we will walk through the concepts around semantic documentation
writing. Similar to Semantic HTML, this allows you to mark up your
documentation with metadata that gives you a lot more power and
flexibility around the display and authoring of documentation.&lt;/p&gt;
&lt;p&gt;Then we’ll have a basic introduction to Sphinx. This will talk about the
power that Sphinx gives you to write documentation, and examples of how
to use it. We will also cover the semantic power of Sphinx, playing on
the previous section to understand it in practice.&lt;/p&gt;
&lt;p&gt;Then at last we’ll cover how to host your documentation on Read the
Docs. This will make your documentation beautiful with a custom theme,
and allow you to host multiple versions and formats of your docs.&lt;/p&gt;
&lt;p&gt;The talk will include a basic demo of creating a basic documentation
project, and getting it hosted on Read the Docs during the talk. All of
the software will be running locally, so the demo won’t require an
internet connection.&lt;/p&gt;
&lt;p&gt;Help us caption &amp;amp; translate this video!&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://amara.org/v/HIYQ/"&gt;http://amara.org/v/HIYQ/&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Jane Austen on PEP8: Tips from an English Major on Writing Better Code</title><link href="https://pyvideo.org/djangocon-us-2015/jane-austen-on-pep8-by-lacey-williams-henschel.html" rel="alternate"></link><published>2015-09-24T00:00:00+00:00</published><updated>2015-09-24T00:00:00+00:00</updated><author><name>Lacey Williams Henschel</name></author><id>tag:pyvideo.org,2015-09-24:djangocon-us-2015/jane-austen-on-pep8-by-lacey-williams-henschel.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Jane Austen on PEP8: Tips from an English Major on Writing Better Code&lt;/p&gt;
&lt;p&gt;I have two English degrees, and I’ve identified some concrete ways this
makes me a better developer. This talk will discuss how we can take
lessons from literature to write more readable code, make better tests,
and create more usable websites.&lt;/p&gt;
&lt;p&gt;I’ll compare Two Scoops of Django to Strunk and White’s The Elements of
Style, that familiar freshman comp text, to explore how they are more
alike than they are different. We’ll discuss the importance of
readability, creating a “story arc” in your tests through good user
stories, how variables names have characterization, and the importance
of whitespace and good formatting to everyone. I’ll also compare PEP8 to
the MLA Handbook; there’s a reason both disciplines have a style guide!&lt;/p&gt;
</summary></entry><entry><title>Leveraging Procedural Knowledge</title><link href="https://pyvideo.org/djangocon-us-2015/leveraging-procedural-knowledge-by-k-rain-leander.html" rel="alternate"></link><published>2015-09-24T00:00:00+00:00</published><updated>2015-09-24T00:00:00+00:00</updated><author><name>K Rain Leander</name></author><id>tag:pyvideo.org,2015-09-24:djangocon-us-2015/leveraging-procedural-knowledge-by-k-rain-leander.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Leveraging Procedural Knowledge&lt;/p&gt;
&lt;p&gt;On the road to senior developer, one has to learn multiple languages.
This often seems like a series of massive obstacles wherein each new
language resembles a new beginning. However, developers may often
underestimate the extent to which procedural knowledge from one language
transfers to a new language. In this talk, I will demonstrate that the
process from Red Hat Technical Account Manager to Django Girls workshop
participant to OpenShift developer was a series of procedural knowledge
transfers, wherein the obstacles to learning reduces with each new
technology that is learned. I will provide specific examples, from using
editors to troubleshooting issues, and conclude with practical
recommendations on which language to start with and how to create a
coherent plan for transitioning from one language to another.&lt;/p&gt;
&lt;p&gt;Help us caption &amp;amp; translate this video!&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://amara.org/v/HIXQ/"&gt;http://amara.org/v/HIXQ/&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Making Django Really, Really, Ridiculously Secure (CW)</title><link href="https://pyvideo.org/djangocon-us-2015/making-django-really-really-ridiculously-secure-cw.html" rel="alternate"></link><published>2015-09-24T00:00:00+00:00</published><updated>2015-09-24T00:00:00+00:00</updated><author><name>Kelsey Gilmore-Innis</name></author><id>tag:pyvideo.org,2015-09-24:djangocon-us-2015/making-django-really-really-ridiculously-secure-cw.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Callisto (&lt;a class="reference external" href="http://projectcallisto.org/"&gt;http://projectcallisto.org/&lt;/a&gt;) is an online reporting system
designed to provide a more empowering, transparent, and confidential
reporting experience for college sexual assault survivors. It's
absolutely essential that we keep our user's data secure. So essential,
in fact, that we couldn't leave it up to developers alone. We'll go over
what Django settings, libraries and practices we used to ensure that on
the development end. Then we'll walk through the process of obtaining,
undergoing, and acting on a formal security audit from a professional
security firm. You'll find out what they were looking for, what we
missed, and how we fixed it, and how you might approach similar
challenges for your companies and applications.&lt;/p&gt;
</summary></entry><entry><title>Managing Identities: LDAP, Google Directory, and Django</title><link href="https://pyvideo.org/djangocon-us-2015/managing-identities-ldap-google-directory-and-by.html" rel="alternate"></link><published>2015-09-24T00:00:00+00:00</published><updated>2015-09-24T00:00:00+00:00</updated><author><name>Scott Hacker</name></author><id>tag:pyvideo.org,2015-09-24:djangocon-us-2015/managing-identities-ldap-google-directory-and-by.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Managing Identities: LDAP, Google Directory, and Django&lt;/p&gt;
&lt;p&gt;Universities and other enterprises often deploy a complex mix of systems
for managing identities and permissions for students, faculty and staff.
Standard LDAP, Google Apps for Education/Enterprise, Student Information
Systems, hiring systems, CAS/Single Sign-On, and more must all work
together without conflicts or delays. At the California College of Arts,
we've created a Django-based system to help end-users and staff create
and manage identities, passwords, groups, permissions, and more. Scot
Hacker will demonstrate the system and provide a tour of its strictly
decoupled internals. The system is unusual in that it uses almost no
data modeling of its own, relying instead on communication via
python-ldap, Google and Workday APIs, and old-school file shuffling to
negotiate communications with other systems.&lt;/p&gt;
&lt;p&gt;Help us caption &amp;amp; translate this video!&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://amara.org/v/HIXM/"&gt;http://amara.org/v/HIXM/&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>The D is Silent: Challenges in Teaching Django</title><link href="https://pyvideo.org/djangocon-us-2015/the-d-is-silent-challenges-in-teaching-django-by.html" rel="alternate"></link><published>2015-09-24T00:00:00+00:00</published><updated>2015-09-24T00:00:00+00:00</updated><author><name>Caleb Smith</name></author><id>tag:pyvideo.org,2015-09-24:djangocon-us-2015/the-d-is-silent-challenges-in-teaching-django-by.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;The D is Silent: Challenges in Teaching Django&lt;/p&gt;
&lt;p&gt;What are Django's important design decisions? Maximizes for the 90%
case, but allows for uncommon cases Batteries included Emphasis on
documentation and testing &amp;quot;Configuration over convention&amp;quot; and &amp;quot;Explicit
is better than implicit&amp;quot; What are the benefits of each choice? Good
high-level documentation Easy access to quality libraries An invitation
to explore. What challenges are a consequence of these choices. Do I
need all of Django? What is Django and what is Python? The mixed bag of
&amp;quot;Configuration over convention&amp;quot; What does Flask do differently? How does
Ruby on Rails differ and which parts are harder or easier to teach.
Common mistakes when teaching Django How Django lends itself well to a
Constructivist teaching approach, especially Jerome Bruner's &amp;quot;Spiral
Curriculum&amp;quot;.&lt;/p&gt;
&lt;p&gt;Help us caption &amp;amp; translate this video!&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://amara.org/v/HIXO/"&gt;http://amara.org/v/HIXO/&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Django Authors Panel</title><link href="https://pyvideo.org/djangocon-us-2015/django-authors-panel.html" rel="alternate"></link><published>2015-09-22T00:00:00+00:00</published><updated>2015-09-22T00:00:00+00:00</updated><author><name>Mark Lavin</name></author><id>tag:pyvideo.org,2015-09-22:djangocon-us-2015/django-authors-panel.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Django Authors Panel by Mark Lavin, Andrew Pinkham, Buddy Lindsey, Peter
Baumgartner, Rikki Endsley and Tracy Osborn&lt;/p&gt;
&lt;p&gt;This will be a moderated Q&amp;amp;A with a panel of Django authors. Questions
will be collected in advance from community suggestions. There will also
be time for some questions from the audience.&lt;/p&gt;
&lt;p&gt;The panel will include:&lt;/p&gt;
&lt;p&gt;Andrew Pinkham - author of &amp;quot;Django Unleashed&amp;quot; Mark Lavin - co-author of
&amp;quot;Lightweight Django&amp;quot; Tracy Osborn - author of &amp;quot;Hello Web App&amp;quot; Peter
Baumgartner - co-author of &amp;quot;High Performance Django&amp;quot;&lt;/p&gt;
&lt;p&gt;Help us caption &amp;amp; translate this video!&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://amara.org/v/HHp3/"&gt;http://amara.org/v/HHp3/&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Managing technical debt in (Django) Projects</title><link href="https://pyvideo.org/djangocon-us-2015/managing-technical-debt-in-django-projects-by.html" rel="alternate"></link><published>2015-09-22T00:00:00+00:00</published><updated>2015-09-22T00:00:00+00:00</updated><author><name>Chris Chang</name></author><id>tag:pyvideo.org,2015-09-22:djangocon-us-2015/managing-technical-debt-in-django-projects-by.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Managing technical debt in (Django) Projects by Chris Chang&lt;/p&gt;
&lt;p&gt;We talk about testing, code quality, and coverage. But why? Because we
want to spend less time dealing with technical debt and more time
creating new technical debt (aka new features). Many times, we think we
made the obvious smart decision only to regret it later; you discovered
you’re damned if you do, damned if you don’t. Should you write a
monolithic app or tangle of microservices? They’re all terrible worlds
we’ve made for ourselves. Having maintained, inherited, and created
several large Django projects, I hope to share my experience so you
don’t have to go through the same pains I did.&lt;/p&gt;
&lt;p&gt;We’ll start off with a few minutes covering basics like testing,
coverage and how they relate to the long term health of a project. Now,
everyone knowing the same terminology, we move on to learning to
recognize the many early warning signs and smells of excessive technical
debt. The most important thing, and most of the material is about
setting up the organizational structure for dealing with technical debt:
code review, continuous integration, rotating developers (no silos),
tradeoffs, making sure you have processes for onboarding new developers,
and strategies for documentation. It’s changes like these that end up
keeping things moving, not writing “better” code.&lt;/p&gt;
&lt;p&gt;Finally, we’ll wrap up with a few minutes talking about Django specific
tips: don’t customize the admin, tricks for naming things, signals,
organizing tests, and more. Much of this comes from my time at The Texas
Tribune, where we needed Django projects launched the next day, all
while maintaining a 6 year old Django project.&lt;/p&gt;
&lt;p&gt;Help us caption &amp;amp; translate this video!&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://amara.org/v/HHp4/"&gt;http://amara.org/v/HHp4/&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Adding Geo into your Django</title><link href="https://pyvideo.org/djangocon-us-2015/adding-geo-into-your-django-by-corryn-smith.html" rel="alternate"></link><published>2015-09-21T00:00:00+00:00</published><updated>2015-09-21T00:00:00+00:00</updated><author><name>Corryn Smith</name></author><id>tag:pyvideo.org,2015-09-21:djangocon-us-2015/adding-geo-into-your-django-by-corryn-smith.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Adding Geo into your Django by Corryn Smith&lt;/p&gt;
&lt;p&gt;This presentation will teach the audience the basics of GIS and
GeoDjango. Once you know how to set up a Django project, putting a map
on your webpage hasn't been easier. During my talk, I will show you how
to navigate through the GeoDjango documentation as well as other handy
tools such as Mapbox and Leaflet. In addition, I will show the audience
two GeoDjango examples – a project about my Study Abroad trip and an
interactive campus map! The overall objective is for the audience to
know that GeoDjango exists, how to use it, and to promote creativity for
their next project!&lt;/p&gt;
&lt;p&gt;Help us caption &amp;amp; translate this video!&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://amara.org/v/HH7w/"&gt;http://amara.org/v/HH7w/&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Building theatlantic.com homepage’s WYSIWYG admin with Django and Knockout</title><link href="https://pyvideo.org/djangocon-us-2015/building-theatlantic-com-homepages-wysiwyg-admin.html" rel="alternate"></link><published>2015-09-21T00:00:00+00:00</published><updated>2015-09-21T00:00:00+00:00</updated><author><name>Frankie Dintino</name></author><id>tag:pyvideo.org,2015-09-21:djangocon-us-2015/building-theatlantic-com-homepages-wysiwyg-admin.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Building theatlantic.com homepage’s WYSIWYG admin with Django and
Knockout by Frankie Dintino&lt;/p&gt;
&lt;p&gt;While the front-end of theatlantic.com was written in PHP up until its
recent rewrite, we have relied on a robust Django-powered admin to
manage content for nearly two years. At the time when we began coding
the redesign we had already developed an adequate solution for curating
content into modules on our site: a combination of Grappelli’s
drag-and-drop sortable inline feature and django-nested-admin, a project
we wrote for nested InlineModelAdmins. However, it soon became clear
that our current system would not meet the needs of editors managing The
Atlantic’s new responsive and visually-striking homepage. The workflow
employed by the editors with our sortable nested inlines—edit, save,
preview; adjust, save again, preview; …—would have been too burdensome.&lt;/p&gt;
&lt;p&gt;This challenge led me to propose we build a new tool that could
“live-edit” the homepage in a WYSIWYG interface. It occurred to me that,
if we could find a way to bind the ModelAdmin’s formsets to a javascript
model, and used one of the many MVC javascript frameworks, we could
build the interface using two-way data binding to sync changes with a
hidden form. A project that would have taken months could, with the
right framework, be built in just a few weeks.&lt;/p&gt;
&lt;p&gt;So why Knockout.js? I evaluated most of the popular options. Though I
initially adopted AngularJS, I later abandoned it because, while it is a
fine framework, it is not ideal for integrating with DOM elements that
live outside angular. I stumbled through quite a few angular controllers
and directives (violating their best practices every step along the way)
before changing direction. Knockout, by comparison, turned out to be
absolutely perfect for the task at hand.&lt;/p&gt;
&lt;p&gt;This talk will discuss what was involved in using Knockout to build
two-way data binding with django formsets, and how we implemented
sorting with drag-and-drop functionality, inline editing of html, and
image uploads and cropping. It will also touch briefly on the challenges
we faced making everything testable, and feature a live demo of updating
theatlantic.com homepage using our new modular Django CMS.&lt;/p&gt;
&lt;p&gt;Help us caption &amp;amp; translate this video!&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://amara.org/v/HH6g/"&gt;http://amara.org/v/HH6g/&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Easy App Metrics</title><link href="https://pyvideo.org/djangocon-us-2015/easy-app-metrics-by-frank-wiles.html" rel="alternate"></link><published>2015-09-21T00:00:00+00:00</published><updated>2015-09-21T00:00:00+00:00</updated><author><name>Frank Wiles</name></author><id>tag:pyvideo.org,2015-09-21:djangocon-us-2015/easy-app-metrics-by-frank-wiles.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Easy App Metrics by Frank Wiles&lt;/p&gt;
&lt;p&gt;What to collect How super easy it can be Techniques for collecting
today, but using tomorrow Processing your metrics out of band to not
slow down your code Tips for scaling in large systems Visualizing your
metrics with Graphana&lt;/p&gt;
&lt;p&gt;Help us caption &amp;amp; translate this video!&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://amara.org/v/HH6c/"&gt;http://amara.org/v/HH6c/&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>How to talk to humans: a different approach to soft skills</title><link href="https://pyvideo.org/djangocon-us-2015/how-to-talk-to-humans-a-different-approach-to-soft.html" rel="alternate"></link><published>2015-09-21T00:00:00+00:00</published><updated>2015-09-21T00:00:00+00:00</updated><author><name>Sharon Steed</name></author><id>tag:pyvideo.org,2015-09-21:djangocon-us-2015/how-to-talk-to-humans-a-different-approach-to-soft.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;How to talk to humans: a different approach to soft skills by Sharon
Steed&lt;/p&gt;
&lt;p&gt;Developers are trained to communicate to things with a goal in mind.
When you're talking to something like, say a computer, you type in your
code and it responds by giving you back what you want. Nine times out of
ten, it works perfectly. Why, then, is it so difficult to do this same
thing when talking to a client about a project, updating a superior on
your progress, or pitching an investor your million-dollar idea? Because
talking to people requires a special set of skills - namely, empathy and
a little bit of storytelling. In an industry filled with brilliant
minds, great ideas and mass disruption, so few of the best and brightest
know how to tell their compelling story. The takeaways from this
workshop will be learning how to value the listener and use
vulnerability to improve your social connection.&lt;/p&gt;
&lt;p&gt;This talk will take you through the difficulty of broken communication -
I, myself, stutter and have great difficulty in saying the simplest
things - to discovering how to reframe your perceived weaknesses. None
of us are perfect, but sometimes those things that we feel are our weak
points are the exact things that we can use to our advantage.&lt;/p&gt;
&lt;p&gt;Help us caption &amp;amp; translate this video!&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://amara.org/v/HH6e/"&gt;http://amara.org/v/HH6e/&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Intro to Mocking: Why Unit Testing Doesn't Have To Be So Hard</title><link href="https://pyvideo.org/djangocon-us-2015/intro-to-mocking-why-unit-testing-doesnt-have-to.html" rel="alternate"></link><published>2015-09-21T00:00:00+00:00</published><updated>2015-09-21T00:00:00+00:00</updated><author><name>Daniel Davis</name></author><id>tag:pyvideo.org,2015-09-21:djangocon-us-2015/intro-to-mocking-why-unit-testing-doesnt-have-to.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Intro to Mocking: Why Unit Testing Doesn't Have To Be So Hard by Daniel
Davis&lt;/p&gt;
&lt;p&gt;Many developers want to write better code, but simply don't know how to
write units tests for:&lt;/p&gt;
&lt;p&gt;Code that calls other code (i.e. code with dependencies) Methods that
have no return value Code that throws exceptions Mocking provides a
valuable tool for solving these problems. In this talk, we'll discuss
the scenarios in which Mocking is useful, the strategies for addressing
each of the cases above and write simple, clean unit tests using the
built-in Mock library.&lt;/p&gt;
&lt;p&gt;Help us caption &amp;amp; translate this video!&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://amara.org/v/HH6d/"&gt;http://amara.org/v/HH6d/&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Wagtail - Yet Another Django CMS</title><link href="https://pyvideo.org/djangocon-us-2015/wagtail-yet-another-django-cms-by-tom-dyson.html" rel="alternate"></link><published>2015-09-21T00:00:00+00:00</published><updated>2015-09-21T00:00:00+00:00</updated><author><name>Tom Dyson</name></author><id>tag:pyvideo.org,2015-09-21:djangocon-us-2015/wagtail-yet-another-django-cms-by-tom-dyson.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Wagtail - Yet Another Django CMS by Tom Dyson&lt;/p&gt;
&lt;p&gt;Wagtail was launched in February 2014, shortly after its first
implementation for the Royal College of Art. It has been
enthusiastically received by Django developers around the world, and now
powers sites for small businesses, UN agencies, and global brands in
tech, political and entertainment sectors. Tom will explain why his
agency decided to build a new CMS, share some lessons learned in running
a growing open source project, and outline Wagtail's roadmap to version
2 and beyond.&lt;/p&gt;
&lt;p&gt;Help us caption &amp;amp; translate this video!&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://amara.org/v/HH7a/"&gt;http://amara.org/v/HH7a/&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Automating Your Browser and Desktop Apps</title><link href="https://pyvideo.org/djangocon-us-2015/automating-your-browser-and-desktop-apps-by-al.html" rel="alternate"></link><published>2015-09-19T00:00:00+00:00</published><updated>2015-09-19T00:00:00+00:00</updated><author><name>Al Sweigart</name></author><id>tag:pyvideo.org,2015-09-19:djangocon-us-2015/automating-your-browser-and-desktop-apps-by-al.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Automating Your Browser and Desktop Apps by Al Sweigart&lt;/p&gt;
&lt;p&gt;This talk is an introduction to using the Requests, Beautiful Soup,
Selenium, and PyAutoGUI modules in order to automatically grab data from
the web or interact with desktop applications.&lt;/p&gt;
&lt;p&gt;Attendees will learn:&lt;/p&gt;
&lt;p&gt;How to download files and pages from the web How to use CSS selectors to
find content in a web page How to control a web browser from Python
using Selenium How to programmatically control the keyboard and mouse
The content from this talk is derived from Al Sweigart's book, Automate
the Boring Stuff with Python, which is freely available under a Creative
Commons license at &lt;a class="reference external" href="http://automatetheboringstuff.com"&gt;http://automatetheboringstuff.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Help us caption &amp;amp; translate this video!&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://amara.org/v/HHCL/"&gt;http://amara.org/v/HHCL/&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>How to Practice Inclusion and Benefit Django</title><link href="https://pyvideo.org/djangocon-us-2015/how-to-practice-inclusion-and-benefit-django-by.html" rel="alternate"></link><published>2015-09-19T00:00:00+00:00</published><updated>2015-09-19T00:00:00+00:00</updated><author><name>Kojo Idrissa</name></author><id>tag:pyvideo.org,2015-09-19:djangocon-us-2015/how-to-practice-inclusion-and-benefit-django-by.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;How to Practice Inclusion and Benefit Django by Kojo Idrissa&lt;/p&gt;
&lt;p&gt;WHAT: Inclusion Defined&lt;/p&gt;
&lt;p&gt;Not about morality Inclusion vs. Diversity vs. Political Correctness
WHY: Why does this matter?&lt;/p&gt;
&lt;p&gt;Inherent limits on community membership: not ALL 7 billion humans will
join AND contribute Inclusion lets you maximize the number of
contributors HOW: How do I DO this better?&lt;/p&gt;
&lt;p&gt;Check your assumptions Zen of Python on Inclusiveness Errors should
never pass silently Check for exceptions Discuss errors when they occur
In the face of ambiguity, refuse the temptation to guess: how much does
the ambiguity matter? Get out of your bubble Flip the Demographics
Understanding The Power of Privilege Your Personal Privilege Matrix
Privilege Arbitrage &amp;quot;Turn Your Sadness Into Kindness&amp;quot; Closing&lt;/p&gt;
&lt;p&gt;What if you feel you can't?&lt;/p&gt;
&lt;p&gt;If your heart's not really into it or you feel it's &amp;quot;too hard&amp;quot;, be
honest with yourself and just hang around others like you. An insincere
effort often does more harm than good.&lt;/p&gt;
&lt;p&gt;Recognize that this behavior may leave you isolated from a large (and
growing) portion of the community.&lt;/p&gt;
&lt;p&gt;It's up to all of us&lt;/p&gt;
&lt;p&gt;Just as systems tend towards entropy, if you leave a community alone it
tends towards toxicity. Good communities require continual effort. -
Jacob Kaplan-Moss&lt;/p&gt;
&lt;p&gt;Help us caption &amp;amp; translate this video!&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://amara.org/v/HHB0/"&gt;http://amara.org/v/HHB0/&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>The Texas Tribune: Making Data, and State Politics, Public</title><link href="https://pyvideo.org/djangocon-us-2015/the-texas-tribune-making-data-and-state-politics.html" rel="alternate"></link><published>2015-09-19T00:00:00+00:00</published><updated>2015-09-19T00:00:00+00:00</updated><author><name>Ryan Murphy</name></author><id>tag:pyvideo.org,2015-09-19:djangocon-us-2015/the-texas-tribune-making-data-and-state-politics.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;The Texas Tribune: Making Data, and State Politics, Public by Ryan
Murphy&lt;/p&gt;
&lt;p&gt;The goal of everything we do is the same – how can we produce something
useful for the citizens of Texas that enable them to be better
participants in their state government?&lt;/p&gt;
&lt;p&gt;Our News Apps team is responsible for the building and maintaining of
editorial-focused data explorers. Django's ease of use has made it
possible for us to architect both robust back-end systems for managing
the government data sets that power these apps, and to build compelling
interfaces to the data for our users to find their own stories.&lt;/p&gt;
&lt;p&gt;More details on the three projects we'd discuss:&lt;/p&gt;
&lt;p&gt;The Government Salaries Explorer is our most popular explorer. This
project manages the payroll data we've collected of more than 300
thousand public employees, providing a peak behind the curtains into how
tax dollars are being spent. It required a system that could standardize
the many different formats a public agency may release its payroll
information to us, but also remain easy to use for all members of the
team so updates happen in a timely fashion.&lt;/p&gt;
&lt;p&gt;The Texas Legislative Guide was our spin on a legislative bill tracker.
Instead of placing all the focus on the bills themselves, we instead
created a platform for our reporters to provide context on the many
topics and issues that come up during a legislative session. While we
still have the capacity for users to search for bills, the site's bigger
focus is on the potential changes this session's legislation may have on
the state.&lt;/p&gt;
&lt;p&gt;And finally, our upcoming revamp of our Public Schools Explorer will be
a Django app. This project is currently in it's very early stages, but
it's on track to be released by DjangoCon so there will be plenty to
show by then! The challenge – how can we take Texas Education Agency
data and turn it into something usable for the citizens – and parents –
of Texas? We are building an interface that makes it easy to compare and
districts and campuses to one another, opening up state data that has
always been public but frustratingly trapped within complicated web
forms and paper printouts.&lt;/p&gt;
&lt;p&gt;While this proposal is more focused on &amp;quot;what we did with Django&amp;quot; vs.
&amp;quot;how we did it&amp;quot; – although that will be touched on as well – I believe
the work we've produced is a testament to the impact we've been able to
have on the state and its citizens thanks to the support of a system
that works well for us.&lt;/p&gt;
&lt;p&gt;Help us caption &amp;amp; translate this video!&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://amara.org/v/HHB1/"&gt;http://amara.org/v/HHB1/&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Things that are tired: Uggs, Segways and YOU! Coming back from burnout</title><link href="https://pyvideo.org/djangocon-us-2015/things-that-are-tired-uggs-segways-and-you-by.html" rel="alternate"></link><published>2015-09-19T00:00:00+00:00</published><updated>2015-09-19T00:00:00+00:00</updated><author><name>Barbara Shaurette</name></author><id>tag:pyvideo.org,2015-09-19:djangocon-us-2015/things-that-are-tired-uggs-segways-and-you-by.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Things That are Tired: Uggs, Segways and you! Coming Back from Burnout
by Barbara Shaurette&lt;/p&gt;
&lt;p&gt;Why is burnout such a bad thing?&lt;/p&gt;
&lt;p&gt;When I see that question on paper, the answer seems obvious. But in
nearly a decade in this community, I've seen people run themselves into
the ground without realizing that they can - and should - take the time
to rest. Why? Well, the short answer is that, if you don't take a break
once in a while, the quality of your work suffers. But the long and more
involved answer? Well, as a wise man once said,&lt;/p&gt;
&lt;p&gt;&amp;quot;Life moves pretty fast. If you don't stop and look around once in a
while, you could miss it.&amp;quot; Burnout leads to exhaustion, and that leads
to terrible performance. And no one wants to be known for performing
terribly - we all have too much pride for that. History is full of
examples of times when exhaustion led to disaster - remember the Exxon
Valdez? Imagine your open source project taking a header like that. I'm
actually going to get a little science-y here and cite a few studies, in
particular a recent one from Washington State University that shows how
sleep-deprived people have an impaired ability to take in new
information.&lt;/p&gt;
&lt;p&gt;Of course, you can get plenty of sleep and still be burned out. If your
waking hours are consumed with community work, your relationships can
suffer, and your sanity will erode pretty quickly.&lt;/p&gt;
&lt;p&gt;After nearly a decade in the Python and Django communities, I've
experienced periods of overwork that have made me hate everything I was
doing. I have a lot of good anecdotes, stories that will probably sound
familiar to everyone in the room. Luckily, I've also learned some
tactics for stepping back and recovering. It can be done, and it's
easier than people think. What you're going to hear from this talk is
just plain common sense. But sometimes when you're mired in work with no
obvious way out, you need to hear it from someone else. So I'm giving
everyone permission to let go. (And no, I promise, there will be no
'Frozen' references in my slides.)&lt;/p&gt;
&lt;p&gt;But how do you let go? And when?&lt;/p&gt;
&lt;p&gt;Burnout is pretty easy to recognize if you know what to look for. Are
you staying up every night reading pull requests ... and is that your
primary method of interaction with other human beings? Your user group
may only meet once a month, but is that group still responsible for the
bulk of your email? Do you secretly blame them for your inability to get
to inbox zero? Is the only travel you're doing for conferences? Have you
given up on vacations and just decided to see the world one PyCon or
DjangoCon at a time?&lt;/p&gt;
&lt;p&gt;The biggest indicator of burnout in the community is how you feel about
the community around you. When you find yourself starting to cringe
every time you get a new Twitter follower, it may be time to start
saying no to things.&lt;/p&gt;
&lt;p&gt;The most important piece of advice I have is to stop looking at what
other people are doing. We all know that person who seems to have a hand
in every project, but you can't judge your own performance by what you
imagine theirs to be. You don't know how they may be scrambling behind
the scenes.&lt;/p&gt;
&lt;p&gt;And remember that just because you're invited into a conversation
doesn't mean that you have to contribute to it - sometimes listening is
enough. Emails can sometimes go unanswered - so can phone calls! Think
about what's most important in your life, and start directing your
energy towards those things instead.&lt;/p&gt;
&lt;p&gt;Don't write so much code in your free time. Take a few nights off, go
outside - there's a lot to see out there!&lt;/p&gt;
&lt;p&gt;Your collaborators WILL understand. Especially if you announce your
intentions to the world. Send an email, tweet it out, let people know
you need some time off. You'll be surprised how much understanding
you'll get and how well people will respect your boundaries (you just
need to set them).&lt;/p&gt;
&lt;p&gt;Help us caption &amp;amp; translate this video!&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://amara.org/v/HHB2/"&gt;http://amara.org/v/HHB2/&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Beyond the basics with Elasticsearch</title><link href="https://pyvideo.org/djangocon-us-2015/beyond-the-basics-with-elasticsearch-by-honza-kral.html" rel="alternate"></link><published>2015-09-18T00:00:00+00:00</published><updated>2015-09-18T00:00:00+00:00</updated><author><name>Honza Král</name></author><id>tag:pyvideo.org,2015-09-18:djangocon-us-2015/beyond-the-basics-with-elasticsearch-by-honza-kral.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Beyond the basics with Elasticsearch&lt;/p&gt;
&lt;p&gt;Elasticsearch has many use cases, some of them fairly obvious and widely
used, like plain searching through documents or analytics. In this talk
I would like to go through some of the more advanced scenarios we have
seen in the wild. Some examples of what we will cover:&lt;/p&gt;
&lt;p&gt;Trend detection - how you can use the aggregation framework to go beyond
simple &amp;quot;counting&amp;quot; and make use of the full-text properties of
Elasticsearch. Percolator - percolator is reversed search and many
people use it as such to drive alerts or &amp;quot;stored search&amp;quot; functionality
for their website, let's look at how we can use it to detect languages,
geo locations or drive live search. If we end up with some time to spare
we can explore some other ideas about how we can utilize the features of
a search engine to drive non-trivial data analysis.&lt;/p&gt;
</summary></entry><entry><title>But, why is the admin slow?</title><link href="https://pyvideo.org/djangocon-us-2015/but-why-is-the-admin-slow-by-jacinda-shelly.html" rel="alternate"></link><published>2015-09-18T00:00:00+00:00</published><updated>2015-09-18T00:00:00+00:00</updated><author><name>Jacinda Shelly</name></author><id>tag:pyvideo.org,2015-09-18:djangocon-us-2015/but-why-is-the-admin-slow-by-jacinda-shelly.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;But, why is the admin slow?&lt;/p&gt;
&lt;p&gt;This is the general outline I'm working from so far. I think this could
change slightly as I develop the talk, but this outline conveys the
general theme.&lt;/p&gt;
&lt;p&gt;Introduction and display of basic django-debug-toolbar usage (2 min)&lt;/p&gt;
&lt;p&gt;Things the admin does well (3 min)&lt;/p&gt;
&lt;p&gt;Makes development very fast For many use cases, it &amp;quot;does the right
thing&amp;quot; automatically. For example, modifying the HTML in a callable
won't cause new queries. What can sneak up on you (5 min)&lt;/p&gt;
&lt;p&gt;Having lots of related items visible in the list view Using
list_select_related Overriding queryset for additional select_related
and prefetch_related options What to avoid in callables (3 min)&lt;/p&gt;
&lt;p&gt;Queries that will be executed on every row The default widgets for
many-to-many and foreign key fields (3 min)&lt;/p&gt;
&lt;p&gt;What widgets to use to replace the defaults based on how many options
you have in your database Custom aggregates in the list view (i.e.
custom querysets) (3 min)&lt;/p&gt;
&lt;p&gt;When this is a good idea When this is too slow and you need other
options More general performance improvements through caching (3-5 min)&lt;/p&gt;
&lt;p&gt;Django's caching framework Caching with third-party packages / tools
Custom caching with Redis Questions (Remaining time)&lt;/p&gt;
</summary></entry><entry><title>Django Deployments Done Right</title><link href="https://pyvideo.org/djangocon-us-2015/django-deployments-done-right-by-peter-baumgartner.html" rel="alternate"></link><published>2015-09-18T00:00:00+00:00</published><updated>2015-09-18T00:00:00+00:00</updated><author><name>Peter Baumgartner</name></author><id>tag:pyvideo.org,2015-09-18:djangocon-us-2015/django-deployments-done-right-by-peter-baumgartner.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Django Deployments Done Right&lt;/p&gt;
&lt;p&gt;There's no single standard toolkit for deploying Django sites. In our
years of consulting, we've seen lots of deployment systems in the wild
and where they break down or cause pain. Independent of the system you
use (Salt, Ansible, Fabric, Chef, Docker, etc.), there are a few
principles a good deployment should follow:&lt;/p&gt;
&lt;p&gt;Deployments don't take the site down or interrupt active users on the
site. Deployments don't involve more than one step or are completely
automated. Deployments are fast. A failed deployment never takes down
the current running version of the code. Rolling back to a previous
deployment is a single step. By following these principles, deployments
go from being error-prone, nerve-wracking experiences to trivial
non-events in your daily development cycle. This talk will walk you
through the steps necessary to create a better deployment process.&lt;/p&gt;
</summary></entry><entry><title>Django Tales: How Django and Its Community Can Change Lives</title><link href="https://pyvideo.org/djangocon-us-2015/django-tales-how-django-and-its-community-can-by.html" rel="alternate"></link><published>2015-09-18T00:00:00+00:00</published><updated>2015-09-18T00:00:00+00:00</updated><author><name>Anna Ossowski</name></author><id>tag:pyvideo.org,2015-09-18:djangocon-us-2015/django-tales-how-django-and-its-community-can-by.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Django Tales: How Django and Its Community Can Change Lives by Anna
Ossowski&lt;/p&gt;
&lt;p&gt;&amp;quot;I came for the framework but I stayed for the community.“ Many people
make this statement when asked &amp;quot;Why Django?“. The Django community can
change lives and has changed many lives, including my own. I’d like to
share Django Tales with you, stories of inspiring women whose lives were
changed by learning Django and becoming involved in the community. But
what is it that makes the Django community so special and awesome? What
do we all love about Django and its community? There is no doubt that
the Django community is great but we’re not done yet! There are things
we can improve. So what can we do better? And how can you help improve
our community? How can you help people become part of our community? If
you’re curious about the answers to those questions and would love to
hear inspiring Django Tales, then this is the right talk for you :)&lt;/p&gt;
&lt;p&gt;Some things I will talk about:&lt;/p&gt;
&lt;p&gt;The &amp;quot;Your Django Story“ interview series on the Django Girls blog&lt;/p&gt;
&lt;p&gt;Why Django Stories?&lt;/p&gt;
&lt;p&gt;How Django can change lives: Stories of awesome whose lives were changed
by learning Django&lt;/p&gt;
&lt;p&gt;What’s awesome about the Django community?&lt;/p&gt;
&lt;p&gt;We’re not done yet! What can we do better?&lt;/p&gt;
&lt;p&gt;How can you help people become part of the community/make our community
better?&lt;/p&gt;
</summary></entry><entry><title>Django Views: Functions, Classes, and Generics</title><link href="https://pyvideo.org/djangocon-us-2015/django-views-functions-classes-and-generics-by.html" rel="alternate"></link><published>2015-09-18T00:00:00+00:00</published><updated>2015-09-18T00:00:00+00:00</updated><author><name>Andrew Pinkham</name></author><id>tag:pyvideo.org,2015-09-18:djangocon-us-2015/django-views-functions-classes-and-generics-by.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Django Views: Functions, Classes, and Generics&lt;/p&gt;
&lt;p&gt;The goal of this talk is to make views and HTTP as clear as daylight.
This talk is for you if you're confused about:&lt;/p&gt;
&lt;p&gt;how function views compare to class-based views when to use generic
class-based views- the difference between class-based views and generic
class-based views- or when to use any of these This talk will start with
an introduction to HTTP and how Django handles HTTP. We will then look
at each kind of view in Django, focusing on how each works and why
Django implements it that way. This will allow us to look at the
advantages and shortcomings of each type of view. Finally, with a full
understanding of Django views, we will be able to easily determine when
to use each type of view.&lt;/p&gt;
&lt;p&gt;Table of Contents:&lt;/p&gt;
&lt;p&gt;What is HTTP, anyway? Django's HTTP Request/Response Cycle What is a
callable? History of View Functions Functions Generics Classes and
Generics View Functions (or How I Learned to Stop Worrying and Love
Non-Compliance) Class Based Views (or As DRY as the Sahara) Generic
Class Based Views (or Oh For The Love of Graph Theory) Enhancing Views
(or 1-Size fits no-one) Fixing Your Views When to Use What&lt;/p&gt;
</summary></entry><entry><title>Lightning Talks</title><link href="https://pyvideo.org/djangocon-us-2015/djangocon-2015-lightning-talks.html" rel="alternate"></link><published>2015-09-18T00:00:00+00:00</published><updated>2015-09-18T00:00:00+00:00</updated><author><name>Ricardo Ferraz Leal</name></author><id>tag:pyvideo.org,2015-09-18:djangocon-us-2015/djangocon-2015-lightning-talks.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Lightning Talks&lt;/p&gt;
&lt;p&gt;Ricardo Ferraz Leal &amp;quot;Leveraging Neutron Sciences with Django&amp;quot;&lt;/p&gt;
&lt;p&gt;Grant Jenks &amp;quot;Python Sorted Containers Module&amp;quot;&lt;/p&gt;
&lt;p&gt;Tracy Osborn &amp;quot;Hello Web App Kickstarter Campaign&amp;quot;&lt;/p&gt;
&lt;p&gt;Dan Dietz &amp;quot;Fabric Bolt&amp;quot;&lt;/p&gt;
&lt;p&gt;Andrew Godwin &amp;quot;Channels Everywhere&amp;quot;&lt;/p&gt;
</summary><category term="lightning talks"></category></entry><entry><title>The D is Silent: Challenges in Teaching Django</title><link href="https://pyvideo.org/djangocon-us-2015/djangocon-2015-the-d-is-silent-challenges-in-by.html" rel="alternate"></link><published>2015-09-18T00:00:00+00:00</published><updated>2015-09-18T00:00:00+00:00</updated><author><name>Caleb Smith</name></author><id>tag:pyvideo.org,2015-09-18:djangocon-us-2015/djangocon-2015-the-d-is-silent-challenges-in-by.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;The D is Silent: Challenges in Teaching Django by Caleb Smith&lt;/p&gt;
&lt;p&gt;What are Django's important design decisions? Maximizes for the 90%
case, but allows for uncommon cases Batteries included Emphasis on
documentation and testing &amp;quot;Configuration over convention&amp;quot; and &amp;quot;Explicit
is better than implicit&amp;quot; What are the benefits of each choice? Good
high-level documentation Easy access to quality libraries An invitation
to explore. What challenges are a consequence of these choices. Do I
need all of Django? What is Django and what is Python? The mixed bag of
&amp;quot;Configuration over convention&amp;quot; What does Flask do differently? How does
Ruby on Rails differ and which parts are harder or easier to teach.
Common mistakes when teaching Django How Django lends itself well to a
Constructivist teaching approach, especially Jerome Bruner's &amp;quot;Spiral
Curriculum&amp;quot;.&lt;/p&gt;
</summary></entry><entry><title>E-Commerce with Django at Scale: Effective Performance Lessons Learned</title><link href="https://pyvideo.org/djangocon-us-2015/e-commerce-with-django-at-scale-by-nate-pinchot.html" rel="alternate"></link><published>2015-09-18T00:00:00+00:00</published><updated>2015-09-18T00:00:00+00:00</updated><author><name>Nate Pinchot</name></author><id>tag:pyvideo.org,2015-09-18:djangocon-us-2015/e-commerce-with-django-at-scale-by-nate-pinchot.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;E-Commerce with Django at Scale: Effective Performance Lessons Learned&lt;/p&gt;
&lt;p&gt;I'll take you through the most effective performance lessons we've
learned and show you how you can implement them (with example code).&lt;/p&gt;
&lt;p&gt;TWO-PASS CACHING WITH CLASS-BASED VIEWS&lt;/p&gt;
&lt;p&gt;By far, this is one of the most effective performance optimizations we
have done in terms of HTTP response time.&lt;/p&gt;
&lt;p&gt;Using class-based views, we are able to do two-pass caching. On the
first pass of the view, we render everything that's not specific to the
user. No AJAX calls needed to get user specific content on the page.
I'll show you how.&lt;/p&gt;
&lt;p&gt;DATA CACHING STRATEGY&lt;/p&gt;
&lt;p&gt;I'll review how we use multiple levels of data caching to greatly
improve the amount of time it takes to rebuild the entire cache.&lt;/p&gt;
&lt;p&gt;DB READ REPLICAS FOR PERFORMANCE / CUSTOM BACKEND FOR FAILOVER&lt;/p&gt;
&lt;p&gt;Read replica databases are great for performance. You've set up a few
read replicas and implemented a fancy new database router which sends
read queries to the read replicas (round robin) for any data that
doesn't need to be up-to-the-millisecond fresh (e.g. blog posts, product
descriptions).&lt;/p&gt;
&lt;p&gt;You're sitting back and relishing in the improved performance when one
of your database read replicas goes offline. Now what? I'll show you how
we implemented a custom database backend to handle this gracefully.&lt;/p&gt;
&lt;p&gt;MIGRATIONS RULES&lt;/p&gt;
&lt;p&gt;This is less of a performance optimization and more of a set of rules we
try to stick to. I'll review some snafus we've had and how we avoided
future production issues while keeping the site at 99% uptime.&lt;/p&gt;
</summary></entry><entry><title>Exploring the outer Solar System with Django</title><link href="https://pyvideo.org/djangocon-us-2015/exploring-the-outer-solar-system-with-django-by.html" rel="alternate"></link><published>2015-09-18T00:00:00+00:00</published><updated>2015-09-18T00:00:00+00:00</updated><author><name>Lisa Ballard</name></author><id>tag:pyvideo.org,2015-09-18:djangocon-us-2015/exploring-the-outer-solar-system-with-django-by.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Exploring the outer Solar System with Django&lt;/p&gt;
&lt;p&gt;I'm a web developer at the Planetary Rings Node, part of the NASA
Planetary Data System. Our tiny shop is devoted to archiving,
cataloging, and distributing scientific data sets relevant to planetary
ring systems. Our base of operations is the SETI Institute, where a
research community is busy searching for and studying life in the
universe.&lt;/p&gt;
&lt;p&gt;At the Rings Node I develop and maintain an outer planets space mission
data search tool called OPUS which is built with Django. It lets users
search data, browse images, and access its API via http. I'll talk about
some of the reasons for OPUS, some of the challenges we faced in
building it out and porting it - from a hot mess of php - to what it is
today, and I'll talk a little about our plans for the future.&lt;/p&gt;
&lt;p&gt;And we'll see some pretty pictures of the outer planets. :-D&lt;/p&gt;
</summary></entry><entry><title>Hunting for Treasure in Django</title><link href="https://pyvideo.org/djangocon-us-2015/hunting-for-treasure-in-django-by-sebastian-vetter.html" rel="alternate"></link><published>2015-09-18T00:00:00+00:00</published><updated>2015-09-18T00:00:00+00:00</updated><author><name>Sebastian Vetter</name></author><id>tag:pyvideo.org,2015-09-18:djangocon-us-2015/hunting-for-treasure-in-django-by-sebastian-vetter.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Hunting for Treasure in Django by Sebastian Vetter&lt;/p&gt;
&lt;p&gt;Django is a comprehensive web framework that provides well-defined
concepts such as request, response, middleware and view that make our
lives as perfectionists with deadlines much easier. What many of us are
not aware of is the rich collection of utilities and tooling around
these concepts that are part of the famework. Decorators, helper
functions and context managers that are used internally but can make
life as a developer much easier as well.&lt;/p&gt;
&lt;p&gt;Introduction (~ 2 mins)&lt;/p&gt;
&lt;p&gt;A little bit about me. Why am I talking about this? Django's Hidden
Treasures (~ 4 mins)&lt;/p&gt;
&lt;p&gt;The reason for this talks. What do I consider hidden treasures? Which
Django modules are interesting? Are they documented and were do I find
it? Examples of hidden treasures:&lt;/p&gt;
&lt;p&gt;A quick introduction of the module. What's a possible use case for it?
How does it solve it? Where is it used in the Django?&lt;/p&gt;
&lt;p&gt;cached_property (~ 2 mins)&lt;/p&gt;
&lt;p&gt;import_string (~ 2 mins)&lt;/p&gt;
&lt;p&gt;lazy, LazyObject and lazy_property (~ 3 mins)&lt;/p&gt;
&lt;p&gt;decorators module (~ 4 mins)&lt;/p&gt;
&lt;p&gt;classonlymethod decorator_from_middleware update_wrapper and wraps
(technically not Django) django.views (~ 4 mins)&lt;/p&gt;
&lt;p&gt;debug.cleanse_setting decorators.debug.sensitive_parameters
decorators.debug.sensitive_post_paramete­rs Wrapping up (~ 2 mins)&lt;/p&gt;
&lt;p&gt;Django documentation links. Some suggestions for further investigation.&lt;/p&gt;
</summary></entry><entry><title>I am a doctor... (TW)</title><link href="https://pyvideo.org/djangocon-us-2015/i-am-a-doctor-tw-by-russell-keith-magee.html" rel="alternate"></link><published>2015-09-18T00:00:00+00:00</published><updated>2015-09-18T00:00:00+00:00</updated><author><name>Russell Keith-Magee</name></author><id>tag:pyvideo.org,2015-09-18:djangocon-us-2015/i-am-a-doctor-tw-by-russell-keith-magee.html</id><summary type="html"></summary></entry><entry><title>I never Meta model I didn't like: The Django 1.8 Meta Interface</title><link href="https://pyvideo.org/djangocon-us-2015/i-never-meta-model-i-didnt-like-by-russell-keith.html" rel="alternate"></link><published>2015-09-18T00:00:00+00:00</published><updated>2015-09-18T00:00:00+00:00</updated><author><name>Russell Keith-Magee</name></author><id>tag:pyvideo.org,2015-09-18:djangocon-us-2015/i-never-meta-model-i-didnt-like-by-russell-keith.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;I never Meta model I didn't like: The Django 1.8 Meta Interface&lt;/p&gt;
&lt;p&gt;This talk will explain the new Meta API, and look at Daniel Pyrathon's
django-mailer as an example of using Meta in the real world.&lt;/p&gt;
&lt;p&gt;Talk outline: What is meta programming - Reflection in Python - What
this means in Django History of Django's Meta The new Meta API -
Daniel's GSoC project - API walkthrough So why bother? - How Forms use
meta - How Admin uses meta - django-mailer: GMail in contrib.admin *
Other options? - A teaser of other places where this could be used.&lt;/p&gt;
</summary></entry><entry><title>Keynote</title><link href="https://pyvideo.org/djangocon-us-2015/keynote-by-rikki-endsley.html" rel="alternate"></link><published>2015-09-18T00:00:00+00:00</published><updated>2015-09-18T00:00:00+00:00</updated><author><name>Rikki Endsley</name></author><id>tag:pyvideo.org,2015-09-18:djangocon-us-2015/keynote-by-rikki-endsley.html</id><summary type="html"></summary></entry><entry><title>Lightning Talks - Part 2</title><link href="https://pyvideo.org/djangocon-us-2015/lightning-talks-part-2.html" rel="alternate"></link><published>2015-09-18T00:00:00+00:00</published><updated>2015-09-18T00:00:00+00:00</updated><author><name>Dmitry Filippov</name></author><id>tag:pyvideo.org,2015-09-18:djangocon-us-2015/lightning-talks-part-2.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Lightning Talks&lt;/p&gt;
&lt;p&gt;Dmitry Filippov &amp;quot;Django assistance in PyCharm&amp;quot;&lt;/p&gt;
&lt;p&gt;Paul Bailey &amp;quot;End the Holy Wars of Formatting&amp;quot;&lt;/p&gt;
&lt;p&gt;Trey Hunner &amp;quot;JavaScript is Becoming Pythonic&amp;quot;&lt;/p&gt;
&lt;p&gt;Eduardo Rivas &amp;quot; Sublime Text Django&amp;quot;&lt;/p&gt;
&lt;p&gt;Jeff Sumner &amp;quot;Texas Swim Center&amp;quot;&lt;/p&gt;
&lt;p&gt;Francisco Saldana &amp;quot;Keeping Fast Fast: Rapid Iteration with
TransactionTestCase&amp;quot;&lt;/p&gt;
&lt;p&gt;Raphael Merx &amp;quot;Mocking Outbound Requests with HTTPretty&amp;quot;&lt;/p&gt;
&lt;p&gt;James Tauber &amp;quot;Building a Learning Management System with Pinax&amp;quot;&lt;/p&gt;
&lt;p&gt;Miroslav Shubernetskiy &amp;quot;Filtering in Django&amp;quot;&lt;/p&gt;
&lt;p&gt;Armin Ronacher &amp;quot;rb - Scaling Redis in Python&amp;quot;&lt;/p&gt;
&lt;p&gt;Brendan Sterne &amp;quot;Code Wiki&amp;quot;&lt;/p&gt;
&lt;p&gt;Russell Keith-Magee &amp;quot;Professional Yak Coiffure&amp;quot;&lt;/p&gt;
</summary><category term="lightning talks"></category></entry><entry><title>Minimum Viable Security</title><link href="https://pyvideo.org/djangocon-us-2015/minimum-viable-security-by-jacob-kaplan-moss.html" rel="alternate"></link><published>2015-09-18T00:00:00+00:00</published><updated>2015-09-18T00:00:00+00:00</updated><author><name>Jacob Kaplan-Moss</name></author><id>tag:pyvideo.org,2015-09-18:djangocon-us-2015/minimum-viable-security-by-jacob-kaplan-moss.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Minimum Viable Security&lt;/p&gt;
&lt;p&gt;We'll look at creating a full security program for a startup-sized
company, one that can start quite small, but can be iterated on
continually, and grown to match the growth of your business. This talk
uses the conceit of a five day program, to be completed in a one-week
sprint, but the steps could easily be scaled down to just a few hours,
spread out, or otherwise modified to fit your time and organization.&lt;/p&gt;
&lt;p&gt;Day 1 - Training: for a security program to work, it needs to be
everybody's responsibility, not just a select few. So your first step in
creating a security program is to establish a minimum bar for secure
coding techniques. Luckily, basic secure coding is easily explained and
taught, and there are great free guides and resources that can form the
backbone of a simple, easy training program. On Day 1, you'll pull
together these guides and create a training manual.&lt;/p&gt;
&lt;p&gt;Day 2 - Secure Development Lifecycle: now we know how to write good
code, but how do we ensure that best practices are followed? As we learn
lessons about our own product and its security posture, how do we make
sure those learnings are captured, retained, and applied in the future?
The answer to these questions lies in creating a Secure Development
Lifecycle, which is just a fancy name for procedures and checklists that
capture your best practices, and help remind you of them as you ship new
features. On day 2, you'll write those checklists, adopt some
lightweight process, and being tracking your product security.&lt;/p&gt;
&lt;p&gt;Day 3 - Incident Response: sooner or later, something will go wrong.
When it does, will you be able to respond? Trying to make up an incident
response process when something's already on fire is an unpleasant
experience, and you can avoid it with a little bit of preparation. On
day 3, you'll develop a basic IR plan, run a table-top exercise to try
it out, and be ready to respond if and when something goes bump in the
night.&lt;/p&gt;
&lt;p&gt;Day 4 - Governance, Risk, and Compliance: there's an alphabet soup of
security standards: ISO, SOC, SIG, PCI, HIPAA, FIPS, FISMA, FedRAMP...
oh my! At small scale, most of these are formal attestations probably
aren't worth the investment. However, at larger scale these ways of
formally proving security standards start to become increasingly
important. Completely ignoring formal risk programs can get you into a
bind if you decide to pursue them later. Thus, on day 4 you'll lay the
groundwork for a formal GRC program, making sure you're ready to start
down this path once your business grows to that point.&lt;/p&gt;
&lt;p&gt;Day 5: Brag about it! At this point, you've got a security program far
better than most startups (and better than many established businesses).
This is great! Security is increasingly a concern even for non-technical
customers, and now that you've got a good story to tell, you should tell
it! On day 5, you'll lay out that security story, publicly, and make
sure your customers know about all your hard work.&lt;/p&gt;
</summary></entry><entry><title>Money, Money, Money - Writing software, in a rich (wo)man's world</title><link href="https://pyvideo.org/djangocon-us-2015/money-money-money-by-russell-keith-magee.html" rel="alternate"></link><published>2015-09-18T00:00:00+00:00</published><updated>2015-09-18T00:00:00+00:00</updated><author><name>Russell Keith-Magee</name></author><id>tag:pyvideo.org,2015-09-18:djangocon-us-2015/money-money-money-by-russell-keith-magee.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Money, Money, Money - Writing software, in a rich (wo)man's world&lt;/p&gt;
&lt;p&gt;Free software advocates talk about two types of &amp;quot;Free&amp;quot;: Free as in
freedom, and Free as in beer. While Free (as in freedom) software is
unquestionably better for users and developers alike, Free (as in beer)
software doesn't pay the bills.&lt;/p&gt;
&lt;p&gt;Talk to any prominent open source developer, and amongst the success
stories, you'll also hear some consistent troubles - that they've got
great ideas and grand plans, but no time to execute; that they're about
to burn out due to the pressues of maintaining their project; or that
they've had yet another mailing list discussion with someone who doesn't
understand they're a volunteer. All of these problems stem from a
fundamental disconnect: the discrepancy between the clear demand for a
software product, and the ability to convert that demand into time
needed to service that demand - and that means money.&lt;/p&gt;
</summary></entry><entry><title>opening Keynote</title><link href="https://pyvideo.org/djangocon-us-2015/opening-keynote-by-jackie-kazil.html" rel="alternate"></link><published>2015-09-18T00:00:00+00:00</published><updated>2015-09-18T00:00:00+00:00</updated><author><name>Jackie Kazil</name></author><id>tag:pyvideo.org,2015-09-18:djangocon-us-2015/opening-keynote-by-jackie-kazil.html</id><summary type="html"></summary></entry><entry><title>Performance Testing for Modern Apps</title><link href="https://pyvideo.org/djangocon-us-2015/performance-testing-for-modern-apps-by-dustin.html" rel="alternate"></link><published>2015-09-18T00:00:00+00:00</published><updated>2015-09-18T00:00:00+00:00</updated><author><name>Dustin Whittle</name></author><id>tag:pyvideo.org,2015-09-18:djangocon-us-2015/performance-testing-for-modern-apps-by-dustin.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Performance Testing for Modern Apps&lt;/p&gt;
&lt;p&gt;The performance of your application affects your business more than you
might think. Top engineering organizations think of performance not as a
nice-to-have, but as a crucial feature of their product. Unfortunately,
most engineering teams do not regularly test the performance and
scalability of their infrastructure. Dustin Whittle shares the latest
techniques and tools for performance testing modern web and mobile
applications. Join this session and learn how to capacity plan and
evaluate performance and the scalability of the server-side through
Siege, Bees with Machine Guns, and Locust.io. We will dive into modern
performance testing on the client-side and how to leverage
navigation/resource timing apis and tools like Google PageSpeed and
SiteSpeed.io to understand the real world performance of your users. We
will cover how HTTP2 and modern browsers change the game for performance
optimization with new best practices. Take back an understanding of how
to automate performance and load testing and evaluate the impact it has
on performance and your business.&lt;/p&gt;
</summary></entry><entry><title>Postgres Performance in 15 Minutes</title><link href="https://pyvideo.org/djangocon-us-2015/postgres-performance-in-15-minutes-by-josh-berkus.html" rel="alternate"></link><published>2015-09-18T00:00:00+00:00</published><updated>2015-09-18T00:00:00+00:00</updated><author><name>Josh Berkus</name></author><id>tag:pyvideo.org,2015-09-18:djangocon-us-2015/postgres-performance-in-15-minutes-by-josh-berkus.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;In 15 minutes, plus Q&amp;amp;A time, Postgres expert Josh Berkus will explain
the essentials of making your database performance &amp;quot;good enough&amp;quot; that
you can ignore it and move on to other things. This will include:&lt;/p&gt;
&lt;p&gt;Why database configuration is less than 20% of performance The 14
settings most people need Why connection pooling is essential Avoiding
bad hardware DB performance for the public cloud Stupid things your app
does which kills performance Enjoy this fast-paced roundup of PostgreSQL
performance essentials.&lt;/p&gt;
</summary></entry><entry><title>PostgreSQL in Django 1.8</title><link href="https://pyvideo.org/djangocon-us-2015/postgresql-in-django-1-8-by-christophe-pettus.html" rel="alternate"></link><published>2015-09-18T00:00:00+00:00</published><updated>2015-09-18T00:00:00+00:00</updated><author><name>Christophe Pettus</name></author><id>tag:pyvideo.org,2015-09-18:djangocon-us-2015/postgresql-in-django-1-8-by-christophe-pettus.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;PostgreSQL in Django 1.8&lt;/p&gt;
&lt;p&gt;Among the topics are:&lt;/p&gt;
&lt;p&gt;A survey of the new Django 1.8 PostgreSQL features. Using migrations
with PostgreSQL in interesting ways. Real-life applications of the new
field types. Basic model design for good performance on PostgreSQL.&lt;/p&gt;
</summary></entry><entry><title>The Other Hard Problem: Lessons and Advice on Naming Things</title><link href="https://pyvideo.org/djangocon-us-2015/the-other-hard-problem-lessons-and-advice-on-by.html" rel="alternate"></link><published>2015-09-18T00:00:00+00:00</published><updated>2015-09-18T00:00:00+00:00</updated><author><name>Jacob Burch</name></author><id>tag:pyvideo.org,2015-09-18:djangocon-us-2015/the-other-hard-problem-lessons-and-advice-on-by.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;The Other Hard Problem: Lessons and Advice on Naming Things&lt;/p&gt;
&lt;p&gt;There are only two hard things in Computer Science: cache invalidation
and naming things. -- Phil Karlton&lt;/p&gt;
&lt;p&gt;This quote finds its way into many-a-talk about caching systems
(including my own), and sometimes we as developers will recall it when
we spend an hour to name that one nebulous variable. But why is
something so difficult as nomenclature also thought of as too simple to
actually talk about?&lt;/p&gt;
&lt;p&gt;In this talk, I'll review what has been written in the last few decades
on naming, go over the easy parts of right or wrong as defined in PEP8
and other style guidelines, and finally suggest some patterns and
anti-patterns found in in today's Django and open source environment for
us to adopt (or avoid!) in our everyday naming of variables, libraries
and other &amp;quot;things&amp;quot;.&lt;/p&gt;
</summary></entry><entry><title>Dubious Database Design</title><link href="https://pyvideo.org/djangocon-us-2015/dubious-database-design-by-andrew-godwin.html" rel="alternate"></link><published>2015-09-16T00:00:00+00:00</published><updated>2015-09-16T00:00:00+00:00</updated><author><name>Andrew Godwin</name></author><id>tag:pyvideo.org,2015-09-16:djangocon-us-2015/dubious-database-design-by-andrew-godwin.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Dubious Database Design by Andrew Godwin&lt;/p&gt;
&lt;p&gt;Everyone has seen plenty of articles about how to design data storage
solutions well - but nobody is getting up there and talking about how
bad their storage design is.&lt;/p&gt;
&lt;p&gt;Rather than just listen to more things to do and vague reasons why, come
and see some truly awful examples of storage design, and the lessons we
can learn from it. What happens when you end up reimplementing indexes?
Why shouldn't you turn off durability? Why not make a table for every
user? And how can you render templates purely in the database?&lt;/p&gt;
&lt;p&gt;All this, and more, as we delve into the realm of datastores and
examples both historic and current that you can learn from, and
hopefully come away with a better idea why the rest of us design things
the way we do.&lt;/p&gt;
&lt;p&gt;Help us caption &amp;amp; translate this video!&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://amara.org/v/HGSe/"&gt;http://amara.org/v/HGSe/&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Keynote: "Diversity: We're Not Done Yet"</title><link href="https://pyvideo.org/djangocon-us-2015/keynote-diversity-were-not-done-yet-by-lynn-root.html" rel="alternate"></link><published>2015-09-16T00:00:00+00:00</published><updated>2015-09-16T00:00:00+00:00</updated><author><name>Lynn Root</name></author><id>tag:pyvideo.org,2015-09-16:djangocon-us-2015/keynote-diversity-were-not-done-yet-by-lynn-root.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Keynote: &amp;quot;Diversity: We're Not Done Yet&amp;quot; by Lynn Root&lt;/p&gt;
&lt;p&gt;Help us caption &amp;amp; translate this video!&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://amara.org/v/HGQ1/"&gt;http://amara.org/v/HGQ1/&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>REST Easy — API Security Done Right</title><link href="https://pyvideo.org/djangocon-us-2015/rest-easy-api-security-done-right-by-jeff-schenck.html" rel="alternate"></link><published>2015-09-16T00:00:00+00:00</published><updated>2015-09-16T00:00:00+00:00</updated><author><name>Jeff Schenck</name></author><id>tag:pyvideo.org,2015-09-16:djangocon-us-2015/rest-easy-api-security-done-right-by-jeff-schenck.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;REST Easy — API Security Done Right by Jeff Schenck&lt;/p&gt;
&lt;p&gt;Why REST More and more of our web development is shifting to frontend
web frameworks like Angular, Ember, and Backbone. And this is great!
These frameworks can provide an amazing, responsive, beautiful
experience to our users — and the only price we pay is having to write
JavaScript. Well, having to write JavaScript and having to maintain a
seriously robust, battle-hardened API for the frontend framework to talk
to.&lt;/p&gt;
&lt;p&gt;State of REST Django REST Framework has clearly broken away with a ton
of momentum, and with good reason. It's a solid framework, and the tools
it provides right out of the box — serialization, validation, nested
relationships — are splendid. It even provides basic authentication and
authorization baked right in, which works great in the very simple
cases.&lt;/p&gt;
&lt;p&gt;However, when you start encountering slightly more complicated API
permission setups, things start to get messy.&lt;/p&gt;
&lt;p&gt;REST Security There's a big tectonic shift when trading in your
traditional request-response-Django site for a
frontend-framework-API-Django site. Your application logic used to
reside almost entirely server-side, but now it's split — half
server-side, half browser-side. And the trick with browser-side code is
it runs in a completely untrusted environment. So we're faced with a
much more complicated security situation to batten down.&lt;/p&gt;
&lt;p&gt;You need different authentication strategies: session auth, JWT token
auth, API keys, signed URLs, and combinations thereof. You have
different permission strategies: table-level, row-level, column-level,
and combinations thereof. It gets real complicated.&lt;/p&gt;
&lt;p&gt;REST Easy I'll show how to use the tools at our disposal — Django groups
and permissions, REST Frameworks's permission classes, third-party
libraries — to cobble together a passable security setup for your API.
You'll get plenty of code samples, detailing the kinds of setups we put
together for our site and the custom tooling we built to do it.&lt;/p&gt;
&lt;p&gt;Next-Level REST We'll end by talking about how our tools can serve us
better in the future. If Django is going to have a strong place in the
future of the web, we need strong tooling for building APIs. This is how
we'll get there.&lt;/p&gt;
&lt;p&gt;Help us caption &amp;amp; translate this video!&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://amara.org/v/HGSf/"&gt;http://amara.org/v/HGSf/&lt;/a&gt;&lt;/p&gt;
</summary></entry></feed>