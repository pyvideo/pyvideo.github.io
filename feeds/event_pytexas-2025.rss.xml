<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org - PyTexas 2025</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Sun, 13 Apr 2025 00:00:00 +0000</lastBuildDate><item><title>Building a test framework from scratch (or not)!</title><link>https://pyvideo.org/pytexas-2025/building-a-test-framework-from-scratch-or-not.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;pytest is a fantastic test framework, but why use it when you can just build your own test framework from scratch? Sounds wild, right? Well, it is! In this talk, we will learn what testing in Python is all about by iteratively building features of a framework from the ground up. Through this, we will learn not just what goes into a test framework but why those features are there - the runner, the structure, the assertions, and more. We will develop a deep understanding of how test frameworks work and also how to write good tests with them. We will also gain immense appreciation for mature test frameworks like pytest that save our time by providing off-the-shelf testing features that deliver serious value.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Pandy Knight</dc:creator><pubDate>Sun, 13 Apr 2025 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2025-04-13:/pytexas-2025/building-a-test-framework-from-scratch-or-not.html</guid><category>PyTexas 2025</category></item><item><title>Day 2 Keynote</title><link>https://pyvideo.org/pytexas-2025/day-2-keynote.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Day 2 Keynote&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jay Miller</dc:creator><pubDate>Sun, 13 Apr 2025 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2025-04-13:/pytexas-2025/day-2-keynote.html</guid><category>PyTexas 2025</category></item><item><title>Democratizing Data: Python-Powered Dashboards for Transparent Governance in Austin</title><link>https://pyvideo.org/pytexas-2025/democratizing-data-python-powered-dashboards-for-transparent-governance-in-austin.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Governments generate vast amounts of data, but making it accessible, actionable, and engaging for the public remains a challenge. This session explores how the City of Austin leverages Python to transform open data into interactive dashboards that foster transparency and empower citizens. Through real-world examples from Austin's public sector projects, attendees will learn how data visualization and analytics can strengthen community engagement, enhance decision-making, and create a more informed society.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Tanvi Sharma</dc:creator><pubDate>Sun, 13 Apr 2025 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2025-04-13:/pytexas-2025/democratizing-data-python-powered-dashboards-for-transparent-governance-in-austin.html</guid><category>PyTexas 2025</category></item><item><title>Hot: pathlib, Not: string paths</title><link>https://pyvideo.org/pytexas-2025/hot-pathlib-not-string-paths.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Have you seen pathlib? If not, once I show you, you will never go back to string paths and os.path ever again! pathlib turns paths into path objects, which have attributes and methods that cover a number of operations. In this talk, we will:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Talk about how to create Path objects, and how this differs on Windows vs Mac/Linux&lt;/li&gt;
&lt;li&gt;Talk about the many properties of pure paths&lt;/li&gt;
&lt;li&gt;Talk about folder operations from Path objects, such as creating directory structures and recursive globbing.&lt;/li&gt;
&lt;li&gt;Talk about file operations, made simpler with Path objects, such as reading contents, getting properties like file size, and deleting.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Stop messing with string paths and get with pathlib!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Josh Schneider</dc:creator><pubDate>Sun, 13 Apr 2025 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2025-04-13:/pytexas-2025/hot-pathlib-not-string-paths.html</guid><category>PyTexas 2025</category></item><item><title>Introduction to OpenTelemetry with Python</title><link>https://pyvideo.org/pytexas-2025/introduction-to-opentelemetry-with-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;OpenTelemetry (OTel) is a comprehensive suite of APIs, libraries, and tools designed to collect, generate, and export telemetry data, including metrics, logs, and traces, from software applications. This talk will cover critical concepts related to OTel and show you how to integrate it into your Python application.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jessica Garson</dc:creator><pubDate>Sun, 13 Apr 2025 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2025-04-13:/pytexas-2025/introduction-to-opentelemetry-with-python.html</guid><category>PyTexas 2025</category></item><item><title>Lightning Talks Day 2</title><link>https://pyvideo.org/pytexas-2025/lightning-talks-day-2.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Lightning Talks Day 2&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ayun Daywhea</dc:creator><pubDate>Sun, 13 Apr 2025 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2025-04-13:/pytexas-2025/lightning-talks-day-2.html</guid><category>PyTexas 2025</category></item><item><title>One Year In: Insights and Inspiration from my PSF Journey</title><link>https://pyvideo.org/pytexas-2025/one-year-in-insights-and-inspiration-from-my-psf-journey.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Gain insights from my first year at the PSF, exploring how the CPython project, its surrounding efforts, and the PSF operate. Discover how you can contribute - code to documentation - to help shape Python's future.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jacob Coffee</dc:creator><pubDate>Sun, 13 Apr 2025 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2025-04-13:/pytexas-2025/one-year-in-insights-and-inspiration-from-my-psf-journey.html</guid><category>PyTexas 2025</category></item><item><title>Place-making &amp; productivity: Build maintainable tools with a small team</title><link>https://pyvideo.org/pytexas-2025/place-making-productivity-build-maintainable-tools-with-a-small-team.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;As we bring on new team members, we want to ensure they can ramp up quickly and have a good experience. They should be able to understand &amp;quot;the company way&amp;quot; of accomplishing things and quickly find the tools they need to do their job. Veteran team members should also be able to codify and commoditize the patterns they've developed over time so they can focus on higher-order problems. In large organizations, such tooling might be the purview of a dedicated platform engineering team and have a budget to match. But what if you're a small team, or a team of one, and you want to build something that scales to the whole organization without becoming a full-time job? At ITHAKA, over 100 engineering staff manage hundreds of applications in a handful of languages and frameworks across many teams and products. Despite the variety, most of those engineers still need to perform a core set of tasks when developing, from debugging to traffic routing to feature toggles. Teams are always working on high-priority projects, and it can be difficult to find the time to take stock of things that can be better streamlined or automated. Further, although we have a platform engineering team, as a non-profit we don't have the budget for someone to work on meta-tooling as a full-time job. Over time, several aspects of our development process have become common sources of friction, with a lot of time spent answering questions or debugging local machine setups. In this talk I'll tell the story of my journey to build a tool with a net positive return on investment, from the initial idea to the rollout and adoption. I'll cover the principles that guided my decisions, the tools we use, and the outcomes we've seen so far.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dane Hillard</dc:creator><pubDate>Sun, 13 Apr 2025 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2025-04-13:/pytexas-2025/place-making-productivity-build-maintainable-tools-with-a-small-team.html</guid><category>PyTexas 2025</category></item><item><title>Python meets the crab - Friendship at first sight?</title><link>https://pyvideo.org/pytexas-2025/python-meets-the-crab-friendship-at-first-sight.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python's simplicity often comes at the cost of performance, especially in computationally-intensive tasks. In contrast, Rust enables one to write low-level code that takes full advantage of the underlying hardware. Furthermore, Rust (just like Python) has a vibrant ecosystem with many great libraries. PyO3 (together with the maturin build back-end) allows you to easily integrate the two languages together and make use of the best of both.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Bernát Gábor</dc:creator><pubDate>Sun, 13 Apr 2025 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2025-04-13:/pytexas-2025/python-meets-the-crab-friendship-at-first-sight.html</guid><category>PyTexas 2025</category></item><item><title>Verbs, Not Nouns: Writing Documentation Users Want to Read</title><link>https://pyvideo.org/pytexas-2025/verbs-not-nouns-writing-documentation-users-want-to-read.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Lots of documentation is dull and tough to read. That's because most documentation focuses on describing product features, and those are nouns. Your user's primary concern isn't what your product is, or how it's made. Your user has a problem they want to solve, and they want to know how to use your product to do that. They're looking for a verb. In this talk, you'll find the verbs that go with your nouns, and how that translates into readable documentation.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Brian MacDonald</dc:creator><pubDate>Sun, 13 Apr 2025 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2025-04-13:/pytexas-2025/verbs-not-nouns-writing-documentation-users-want-to-read.html</guid><category>PyTexas 2025</category></item><item><title>Building a distributed asyncio event loop</title><link>https://pyvideo.org/pytexas-2025/building-a-distributed-asyncio-event-loop.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;To support distributed, durable (i.e. resumable) asynchronous code in Temporal, a custom asyncio event loop was required. We will cover how asyncio event loops work under the hood, considerations for building a custom, deterministic one, and gotchas encountered along the way.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chad Retz</dc:creator><pubDate>Sat, 12 Apr 2025 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2025-04-12:/pytexas-2025/building-a-distributed-asyncio-event-loop.html</guid><category>PyTexas 2025</category></item><item><title>Day 1 Keynote - the Python Community</title><link>https://pyvideo.org/pytexas-2025/day-1-keynote-the-python-community.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Mariatta is a Python Core Developer. She co-hosts the podcast series PyPodcats: Hidden Figures of Python, highlighting the voices of underrepresented group members in the Python community. She is the author of PEP 581 for migrating CPython's issue tracker to GitHub, a change that significantly improved the experience for contributing to CPython. She is currently a member of Python Docs Editorial Board. As a serial conference organizer, she has chaired various Python community conferences, including PyCascades, PyCon US, and PyLadiesCon. For her contributions to the Python community, she received the PSF Community Service Award and is a PSF Fellow member. You might also know her from the internet hashtags #IceCreamSelfie and #TypoOfTheDay&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mariatta Wijaya</dc:creator><pubDate>Sat, 12 Apr 2025 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2025-04-12:/pytexas-2025/day-1-keynote-the-python-community.html</guid><category>PyTexas 2025</category></item><item><title>Demystifying Al Agents with Python Code</title><link>https://pyvideo.org/pytexas-2025/demystifying-al-agents-with-python-code.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Everyone’s talking about AI Agents! But what are they, and how can you build them? In this talk, you will learn about how AI Agents are defined, and their key components, including LLMs, tools, and memory. Moving beyond abstract definitions, I will show you how you can implement AI Agents in Python using the OpenAI Python SDK along with basic Python concepts like functions, while loops, and if statements. From there I will demonstrate how Microsoft’s open-source AutoGen framework abstracts away some of the Python boilerplate for you, allowing for simpler setup when you are working with many agents at once. By the end, you will be empowered to create your own agents that access your own APIs to complete tasks that you define.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">William Horton</dc:creator><pubDate>Sat, 12 Apr 2025 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2025-04-12:/pytexas-2025/demystifying-al-agents-with-python-code.html</guid><category>PyTexas 2025</category></item><item><title>Demystifying the World of Serializers for SQLAlchemy ORM Models</title><link>https://pyvideo.org/pytexas-2025/demystifying-the-world-of-serializers-for-sqlalchemy-orm-models.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;SQLAlchemy simplifies SQL model creation and manipulation using Python. However, efficient data transmission requires serialization of Python objects for network interactions and database storage. Serialization transforms data for transmission and storage, which are crucial in database procedures. In this talk, we will explore configurable (de)serialization tools to enhance SQLAlchemy ORM model's capabilities, their advanced use cases, and implementation. We will also compare this to the features of commonly-used serializer alternatives, such as SerializerMixin, Marshmallow-SQLAlchemy, ColanderAlchemy, Serialchemy, SQLAthanor, and more.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ritik Mathur</dc:creator><pubDate>Sat, 12 Apr 2025 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2025-04-12:/pytexas-2025/demystifying-the-world-of-serializers-for-sqlalchemy-orm-models.html</guid><category>PyTexas 2025</category></item><item><title>Generators: The Unsung Hero of Async Programming</title><link>https://pyvideo.org/pytexas-2025/generators-the-unsung-hero-of-async-programming.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Async is often about tackling IO-bound, high concurrency work, but it can also be about long running, interruptible work. While we frequently think about generators in the context of iterators, generators are a great fit in any scenario where the function needs to be interruptible and resumable. In this talk, we’ll take a fresh look at generators and look at how we used them to build a durable orchestration framework.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Anderson</dc:creator><pubDate>Sat, 12 Apr 2025 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2025-04-12:/pytexas-2025/generators-the-unsung-hero-of-async-programming.html</guid><category>PyTexas 2025</category></item><item><title>Lighting Talks Day 1</title><link>https://pyvideo.org/pytexas-2025/lighting-talks-day-1.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Lighting Talks Day 1&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lynn Root</dc:creator><pubDate>Sat, 12 Apr 2025 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2025-04-12:/pytexas-2025/lighting-talks-day-1.html</guid><category>PyTexas 2025</category></item><item><title>Python Untethered: Building Robust Embedded Systems</title><link>https://pyvideo.org/pytexas-2025/python-untethered-building-robust-embedded-systems.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;When code finally leaves your IDE, the destination is often not the cloud or a PC, but an embedded device in a home, office, or even the wild. However, developing applications for the embedded space comes with its own unique set of challenges and pitfalls. Whether designing for the home or enterprise, embedded devices require additional considerations for usability, reliability, and maintainability. In this talk, we'll explore real-world challenges of embedded Python development and provide practical solutions drawn from both DIY projects and enterprise deployments. You'll learn strategies for:
* Ensuring system reliability through power failure tolerance and fault handling
* Building secure remote access and upgrade capabilities
* Implementing effective monitoring and observability
* Managing hardware constraints and system resources
* Designing flexible configuration systems that work in the field
* Whether you're a hobbyist looking to make your home automation more robust or a professional developer designing industrial systems, you'll walk away with concrete patterns and best practices to build more reliable embedded Python applications.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Oliver Rew</dc:creator><pubDate>Sat, 12 Apr 2025 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2025-04-12:/pytexas-2025/python-untethered-building-robust-embedded-systems.html</guid><category>PyTexas 2025</category></item><item><title>Reducing the "Oops Factor": Pipelines for Securing Python Development</title><link>https://pyvideo.org/pytexas-2025/reducing-the-oops-factor-pipelines-for-securing-python-development.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The cyber threat landscape is vast, deep and ever-changing. Short of retraining as cybersecurity professionals, How can we, as Python developers do our part to help keep ourselves, our customers and our data safe? In this talk, we'll look at the current threat landscape, the ways developers commonly fall short, and just how cheap, quick and easy it can be to get some quick wins and drastically reduce the &amp;quot;oops factor&amp;quot; of our Python development lifecycle.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Simon Merrick</dc:creator><pubDate>Sat, 12 Apr 2025 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2025-04-12:/pytexas-2025/reducing-the-oops-factor-pipelines-for-securing-python-development.html</guid><category>PyTexas 2025</category></item><item><title>Signal Processing in Electrochemistry: Application to the US Opioid Crisis</title><link>https://pyvideo.org/pytexas-2025/signal-processing-in-electrochemistry-application-to-the-us-opioid-crisis.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;With an average of 195 daily deaths due to synthetic opioids overdose in 2021, the US have been facing an unprecedented opioids crisis. Fentanyl and its analogues have been a major source of concern, due to their high levels of addiction, fast-acting mechanisms, and detection challenges. Fast, effective, and accurate identification and quantification of fentanyl, its analogues, and metabolites are essential to help prevent overdose-related incidents and to enable agile medical response. Although electrochemical sensors represent a promising technology for selectively detecting opioids at low concentrations, analyzing and processing the data remains one of the major challenges. To tackle this challenge, certain Python libraries, such as scipy.signal, could be useful in processing signals with high levels of noise and interference from other substances. This talk will focus on specific examples of how such libraries could help enable filtering, Fourier transformation, and wavelet analysis of electrochemical data. As examples, code snippets and outputs will be shown to demonstrate how Python can help improve the quality and usability of electrochemical data. Additionally, this talk will show how data processing can further benefit from hyper parameter optimization techniques, enabled by libraries like hyperopt and ray-tune. By doing so, my hope is to demonstrate how Python could be extremely useful in helping address problems at the intersection of statistics, public health, and public policy.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Rodrigo Silva Ferreira</dc:creator><pubDate>Sat, 12 Apr 2025 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2025-04-12:/pytexas-2025/signal-processing-in-electrochemistry-application-to-the-us-opioid-crisis.html</guid><category>PyTexas 2025</category></item><item><title>The Pythonic Ideal in the Age of Generative AI</title><link>https://pyvideo.org/pytexas-2025/the-pythonic-ideal-in-the-age-of-generative-ai.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The advent of generative Artificial Intelligence (AI) programs, such as ChatGPT, and code pair programming tools, such as GitHub Copilot, has ushered in concerns about whether or not it is still valuable to learn to write code, or to continue to improve our ability to write idiomatic, beautiful code. The reality is that generative AI programs can write code that is poor quality or incorrect. In addition, generative AI is still in its infancy and cannot yet replace human innovation or innate expertise for complex tasks, such as writing Pythonic code. Do we need to be worried about AI taking over coding jobs? This talk will cover why learning to write Pythonic code is still a valuable skill to pursue, and will introduce techniques to add generative AI and pair programming AI tools into your teaching (and learning!).&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Heather Crawford</dc:creator><pubDate>Sat, 12 Apr 2025 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2025-04-12:/pytexas-2025/the-pythonic-ideal-in-the-age-of-generative-ai.html</guid><category>PyTexas 2025</category></item><item><title>Typed and Decorated Python GUIs: Help the Language Help You</title><link>https://pyvideo.org/pytexas-2025/typed-and-decorated-python-guis-help-the-language-help-you.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python's increasingly powerful type annotations (and the type checkers and IDEs that consume them) are a great way to manage the complexities of Python GUI programming. This talk will walk through a strictly typed PyQt/PySide GUI application skeleton while touching on custom logging handlers, enum-based error passing, type-aware match statements, and how generic types empower function decorators, decorator factories, and class decorators.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">George Collins</dc:creator><pubDate>Sat, 12 Apr 2025 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2025-04-12:/pytexas-2025/typed-and-decorated-python-guis-help-the-language-help-you.html</guid><category>PyTexas 2025</category></item></channel></rss>