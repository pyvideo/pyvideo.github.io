<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_steven-saporta.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2017-10-06T00:00:00+00:00</updated><entry><title>Automated testing with pytest and fixtures</title><link href="https://pyvideo.org/pygotham-2017/automated-testing-with-pytest-and-fixtures.html" rel="alternate"></link><published>2017-10-06T00:00:00+00:00</published><updated>2017-10-06T00:00:00+00:00</updated><author><name>Steven Saporta</name></author><id>tag:pyvideo.org,2017-10-06:pygotham-2017/automated-testing-with-pytest-and-fixtures.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Pytest is a free Python package that makes writing and running tests for your Python programs easier. Why use Pytest?&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Automatic test discovery finds and executes tests based on the names of files and functions.&lt;/li&gt;
&lt;li&gt;Multiple tests can run in parallel, saving time.&lt;/li&gt;
&lt;li&gt;It's easy to group your tests and run just the relevant ones.&lt;/li&gt;
&lt;li&gt;Testing that your code has raised and expected exception is easy.&lt;/li&gt;
&lt;li&gt;Pytest &amp;quot;fixtures&amp;quot; are a powerful tool for:
- Setting up and tearing down objects or data required by your tests
- Parameterizing tests to run with different environments, inputs, etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This talk is ideal for a moderately technical audience. Basic knowledge of Python programming will be helpful, but is not required.&lt;/p&gt;
</summary></entry><entry><title>Confessions of a Python packaging noob</title><link href="https://pyvideo.org/pygotham-2017/confessions-of-a-python-packaging-noob.html" rel="alternate"></link><published>2017-10-06T00:00:00+00:00</published><updated>2017-10-06T00:00:00+00:00</updated><author><name>Steven Saporta</name></author><id>tag:pyvideo.org,2017-10-06:pygotham-2017/confessions-of-a-python-packaging-noob.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;When my source code repo become too large, I decided to split some modules out into a separate package, which can be installed from GitHub or other repositories using pip. Along the way, I learned about:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The difference between a package and a module&lt;/li&gt;
&lt;li&gt;Setuptools&lt;/li&gt;
&lt;li&gt;The setup.py file&lt;/li&gt;
&lt;li&gt;Using a requirements.txt file in a package&lt;/li&gt;
&lt;li&gt;Recommended directory structure for a package&lt;/li&gt;
&lt;li&gt;Package versioning&lt;/li&gt;
&lt;li&gt;PyPI, the Python Package Index&lt;/li&gt;
&lt;li&gt;Labeling a package version on GitHub&lt;/li&gt;
&lt;li&gt;Using pip to install a package from GitHub&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Iâ€™ll share my packaging journey and provide links to helpful documentation. This talk is suitable for a moderately technical audience. Programmers and non-programmers alike will gain a greater understanding of Python packaging.&lt;/p&gt;
</summary></entry></feed>