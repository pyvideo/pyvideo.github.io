<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_anton-patrushev.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2018-06-22T00:00:00+00:00</updated><entry><title>Как перестать заботиться об окружении и начать жить</title><link href="https://pyvideo.org/pycon-russia-2018/kak-perestat-zabotitsia-ob-okruzhenii-i-nachat-zhit.html" rel="alternate"></link><published>2018-06-22T00:00:00+00:00</published><updated>2018-06-22T00:00:00+00:00</updated><author><name>Антон Патрушев</name></author><id>tag:pyvideo.org,2018-06-22:pycon-russia-2018/kak-perestat-zabotitsia-ob-okruzhenii-i-nachat-zhit.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Антон Патрушев&lt;/strong&gt; , Spherical&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://pycon.ru/2018/en/program/content/patrushev/"&gt;**Как перестать заботиться об окружении и начать
жить**&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Что разработчик хочет от хорошего, отлаженного окружения?
Предсказуемости, скорости развёртывания, минимальных телодвижений.
Чик-чик и работать. Каждый, кто занимается профессиональной разработкой
на чём угодно старается сделать свою ежедневную деятельность более
комфортной. Это хорошо видно по количеству инструментов, которые
доступны разработчикам: их арсенал ширится с каждым годом. При этом, как
и везде, серебряной пули нет: чтобы достичь желаемого приходится долго
копать их все, подбирать подходящую комбинацию инструментов под себя и
«дружить» их между собой.&lt;/p&gt;
&lt;p&gt;Я много общаюсь с коллегами по цеху и очень часто наблюдаю картину, что,
вне зависимости от размера и возраста компании или команды, оптимизации
окружения уделяется слишком мало внимания.&lt;/p&gt;
&lt;p&gt;Мы в Spherical нашли отличную комбинацию инструментов почти с самого
начала. Именно ею я и хотел бы поделиться, затронув ключевые аспекты и
нюансы различных механизмов нашего окружения.&lt;/p&gt;
&lt;p&gt;Итак:&lt;/p&gt;
&lt;p&gt;— devpi: почему вы обязательно должны иметь свой package index и о том,
почему у нас их много;&lt;/p&gt;
&lt;p&gt;— как нужно дружить с extras_require из setup.py чтобы было легко;&lt;/p&gt;
&lt;p&gt;— pew и почему он, на наш взгляд, лучше альтернатив;&lt;/p&gt;
&lt;p&gt;— зачем нужен Docker на машине каждого разработчика.&lt;/p&gt;
</summary></entry><entry><title>Оптимизация: на грани и за</title><link href="https://pyvideo.org/pycon-russia-2015/optimizatsiia-na-grani-i-za.html" rel="alternate"></link><published>2015-09-19T00:00:00+00:00</published><updated>2015-09-19T00:00:00+00:00</updated><author><name>Anton Patrushev</name></author><id>tag:pyvideo.org,2015-09-19:pycon-russia-2015/optimizatsiia-na-grani-i-za.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Нередко при разработке мы сталкиваемся с ситуациями, когда для увеличения производительности приложения надо делать крупные рефакторинги, менять архитектуру. Но что делать, если на это нет времени и производительность нужна прямо здесь и сейчас? Конечно, в первую очередь, нужно прибегнуть к традиционной медицине — профилировать и править узкие места. Но об этом уже сказано очень много. Я бы хотел рассказать о нескольких нетрадиционных техниках, которые мне однажды помогли побороть проблемы с производительностью:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Жизнь без GC: как и зачем?&lt;/li&gt;
&lt;li&gt;Выжмем ещё немного, не переписывая весь код: модификация AST при импорте;&lt;/li&gt;
&lt;li&gt;Декораторы и байткод: пару процентов почти за просто так.&lt;/li&gt;
&lt;/ul&gt;
</summary></entry></feed>