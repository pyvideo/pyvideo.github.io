<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Sat, 02 Nov 2019 00:00:00 +0000</lastBuildDate><item><title>How I Fell In Love With Pytype &amp; Why You Should Too</title><link>https://pyvideo.org/pycon-fr-2019/how-i-fell-in-love-with-pytype-why-you-should-too.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;We all are always finding complex and novel ways of making mistakes and introducing defects into our software, and we all want all the help we can get and all the tools we can carry in our toolbox to fix our mistakes and defects. I’ll relate how experience changed me from a detractor of Pytype to one of its biggest fans and why I believe that it is one of the best tools we can use to craft correct Python code.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nathaniel Manista</dc:creator><pubDate>Sat, 02 Nov 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-11-02:pycon-fr-2019/how-i-fell-in-love-with-pytype-why-you-should-too.html</guid></item><item><title>Code Unto Others</title><link>https://pyvideo.org/pycon-russia-2016/code-unto-others.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Large codebases need not be tragedies of the commons so riddled with complexity and technical debt, but so many are. How does that happen? By what mechanisms and pathologies do a large number of locally reasonable decisions by intelligent authors add up to unmaintainable software? How can it be that the end result of everyone doing everything right is a system “too dangerous to touch” that can’t be modified without likely breaking something?&lt;/p&gt;
&lt;p&gt;I’ve written that software, I’ve maintained that software and brought it back from the brink, and I’ve trained others in what is required to avoid trouble. I’ll share what practices work, and why and how they do. I’ll dive into the designs of classes, functions, modules, and packages. I’ll evaluate the tradeoffs of global state and other dark magic. I’ll even dig into and get personal about naming.&lt;/p&gt;
&lt;p&gt;The first obligation of code is to run correctly. The second obligation of code usually is to run efficiently. The third obligation of code is to play well with other code and other programmers. Come learn how to write code that makes friends without sacrificing function or performance!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nathaniel Manista</dc:creator><pubDate>Sun, 03 Jul 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-07-03:pycon-russia-2016/code-unto-others.html</guid></item><item><title>Code Unto Others</title><link>https://pyvideo.org/pycon-us-2016/nathaniel-manista-augie-fackler-code-unto-others-pycon-2016.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Speakers: Nathaniel Manista, Augie Fackler&lt;/p&gt;
&lt;p&gt;Large codebases written by many authors over long periods of time too often become tragedies of the commons riddled with complexity and technical debt. We’ll cover the pathologies that specifically encumber collaborative software development (drawing on examples from the Mercurial codebase) and describe alternative practices, their efficacy, and the costs of adopting them.&lt;/p&gt;
&lt;p&gt;Slides can be found at: &lt;a class="reference external" href="https://speakerdeck.com/pycon2016"&gt;https://speakerdeck.com/pycon2016&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/PyCon/2016-slides"&gt;https://github.com/PyCon/2016-slides&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nathaniel Manista</dc:creator><pubDate>Thu, 09 Jun 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-06-09:pycon-us-2016/nathaniel-manista-augie-fackler-code-unto-others-pycon-2016.html</guid></item><item><title>Stop Mocking, Start Testing</title><link>https://pyvideo.org/pycon-us-2012/stop-mocking-start-testing.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Project Hosting at Google Code is a large, well-established system
written mostly in Python. We'll share our battle-born convictions about
creating tests for test-unfriendly code and the larger topic of testing.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Augie Fackler</dc:creator><pubDate>Fri, 09 Mar 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-03-09:pycon-us-2012/stop-mocking-start-testing.html</guid></item><item><title>The End Of Object Inheritance &amp; The Beginning Of A New Modularity</title><link>https://pyvideo.org/pycon-us-2013/the-end-of-object-inheritance-the-beginning-of.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;After 15 years' combined experience developing software of all types we
are done with object inheritance. Come learn about elegant, superior
solutions to the problems inheritance claims to adequately solve.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Augie Fackler</dc:creator><pubDate>Fri, 15 Mar 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-03-15:pycon-us-2013/the-end-of-object-inheritance-the-beginning-of.html</guid><category>talk</category></item><item><title>Deliver Your Software In An Envelope</title><link>https://pyvideo.org/pycon-us-2014/deliver-your-software-in-an-envelope.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Guaranteed behavior makes software modules useful. Software guarantees
are commonly incomplete with good reason: promises that are narrow and
few are most easily kept across wide ranges of platforms and long times.
We define the space of a module's allowed behavior to be its &amp;quot;behavioral
envelope&amp;quot; and show that thinking and speaking in terms of envelopes
eases maintenance and makes APIs delightful.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Augie Fackler</dc:creator><pubDate>Sun, 13 Apr 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-04-13:pycon-us-2014/deliver-your-software-in-an-envelope.html</guid></item></channel></rss>