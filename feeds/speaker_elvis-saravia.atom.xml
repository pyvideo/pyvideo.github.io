<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_elvis-saravia.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2019-05-02T13:20:00+00:00</updated><entry><title>Applied Deep Learning for NLP Using PyTorch</title><link href="https://pyvideo.org/pycon-us-2019/applied-deep-learning-for-nlp-using-pytorch.html" rel="alternate"></link><published>2019-05-02T13:20:00+00:00</published><updated>2019-05-02T13:20:00+00:00</updated><author><name>Elvis Saravia</name></author><id>tag:pyvideo.org,2019-05-02:pycon-us-2019/applied-deep-learning-for-nlp-using-pytorch.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Natural language processing (NLP) has experienced a rapid growth over
the last few years and has become an important skill to build
applications that range from social features to clinical and health
solutions. In this tutorial, we will introduce PyTorch as a tool to
build and experiment with various modern NLP techniques by building deep
learning architectures based on convolutional neural networks (CNNs),
recurrent neural networks (RNNs), and bidirectional long short-term
memory networks (biLSTMs).&lt;/p&gt;
&lt;p&gt;We will cover a wide range of topics with the purpose of providing
participants with enough fundamental knowledge and skills to be able to
apply modern NLP to real-world problems using PyTorch. Some concepts and
topics include but not limited to data loaders, vectorization,
computation graphs, sentiment analysis, fine-grained emotion
classification, and neural machine translation.&lt;/p&gt;
&lt;p&gt;Nowadays, it is just not enough to arbitrarily train a model and deploy
it for production use without properly debugging it. This tutorial also
aims to provide hands-on examples and well-organized exercises that
teach students how to properly test, train and evaluate NLP models using
best practices. Once models are properly trained and evaluated they will
be efficiently transformed, stored, and then restored to obtain
inferences from real-world, natural language data.&lt;/p&gt;
</summary><category term="tutorial"></category></entry></feed>