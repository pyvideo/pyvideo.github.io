<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Wed, 01 May 2019 09:00:00 +0000</lastBuildDate><item><title>Getting started with Kubernetes and container orchestration</title><link>https://pyvideo.org/pycon-us-2019/getting-started-with-kubernetes-and-container-orchestration.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;You've started to &amp;quot;containerize&amp;quot; your applications by writing a
Dockerfile or two, and now you want to run your containers in a cluster.
But Kubernetes is quite different from Docker: the smallest unit of
deployment is not a container, but a &lt;em&gt;pod&lt;/em&gt;; pods are accessed through
specialized load balancers called &lt;em&gt;services&lt;/em&gt;; there are &lt;em&gt;labels&lt;/em&gt; and
&lt;em&gt;selectors&lt;/em&gt; everywhere; and everything is created by expressing desired
state with YAML, lots of YAML.&lt;/p&gt;
&lt;p&gt;In this hands-on tutorial, we will learn about Kubernetes and its key
concepts, both in theory (we will become familiar with all the things
evoked in the previous paragraph) and in practice (we will know how to
use them to deploy and scale our applications).&lt;/p&gt;
&lt;p&gt;Kubernetes has the reputation of being a complex system with a steep
learning curve. We will see that it is, indeed, a complex system, but
that it is possible to tame its most essential features in just a few
hours.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jérôme Petazzoni</dc:creator><pubDate>Wed, 01 May 2019 09:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-05-01:pycon-us-2019/getting-started-with-kubernetes-and-container-orchestration.html</guid><category>tutorial</category></item><item><title>Deep dive into Docker storage drivers</title><link>https://pyvideo.org/montreal-python/deep-dive-into-docker-storage-drivers.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Montreal, April 13, 2015 - Jerome Petazzoni presents how aufs and btrfs drivers compare from a high-level perspective, explaining their pros and cons. This will help the audience to make more informed decisions when picking the most appropriate driver for their workloads.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Jérôme Petazzoni: &lt;a class="reference external" href="http://sflx.ca/jpet"&gt;http://sflx.ca/jpet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Slides: &lt;a class="reference external" href="http://sflx.ca/jpdock"&gt;http://sflx.ca/jpdock&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;MP53: &lt;a class="reference external" href="http://sflx.ca/mp53e"&gt;http://sflx.ca/mp53e&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Recorded and edited live by &amp;#64;ChristianAubry at Montréal-Python 53 (Sanctified Terabit) with a little help from Savoir-faire Linux (&lt;a class="reference external" href="http://sflx.ca/jobs"&gt;http://sflx.ca/jobs&lt;/a&gt;).&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jerome Petazzoni</dc:creator><pubDate>Mon, 13 Apr 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-04-13:montreal-python/deep-dive-into-docker-storage-drivers.html</guid></item><item><title>Deploy and scale containers with Docker native, open source orchestration</title><link>https://pyvideo.org/pycon-us-2017/deploy-and-scale-containers-with-docker-native-open-source-orchestration.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Deploy your own cluster! Use it to &amp;quot;build, ship, and run&amp;quot; containerized
applications! Learn how to implement logging, metrics, stateful
services, and more! Learn the True Way of DevOps! Alright, we can't
promise anything about the True Way of DevOps, but everything else will
definitely be in this tutorial.&lt;/p&gt;
&lt;p&gt;We will run a demo app featuring Python components and see some best
practices to &amp;quot;Dockerize&amp;quot; Python code and Flask in particular; but the
tutorial also includes other languages and frameworks.&lt;/p&gt;
&lt;p&gt;Come with your laptop! You don't need to install anything before the
workshop, as long as you have a web browser and a SSH client. Each
student will have their own private cluster during the tutorial, to get
immediately applicable first-hand experience.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jerome Petazzoni</dc:creator><pubDate>Thu, 18 May 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-05-18:pycon-us-2017/deploy-and-scale-containers-with-docker-native-open-source-orchestration.html</guid></item><item><title>Deploying and scaling applications with Docker, Swarm, and a tiny bit of Python magic</title><link>https://pyvideo.org/pycon-us-2016/deploying-and-scaling-applications-with-docker-swarm-and-a-tiny-bit-of-python-magic-pycon-2016.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Speaker: Jérôme Petazzoni&lt;/p&gt;
&lt;p&gt;Docker is an open platform to build, ship, and run any application, anywhere. In this hands-on tutorial, you will learn advanced Docker concepts, and see how to deploy and scale applications using Docker Swarm clustering abilities and reusable, customizable Python tooling.&lt;/p&gt;
&lt;p&gt;Slides can be found at: &lt;a class="reference external" href="https://speakerdeck.com/pycon2016"&gt;https://speakerdeck.com/pycon2016&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/PyCon/2016-slides"&gt;https://github.com/PyCon/2016-slides&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jérôme Petazzoni</dc:creator><pubDate>Mon, 30 May 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-05-30:pycon-us-2016/deploying-and-scaling-applications-with-docker-swarm-and-a-tiny-bit-of-python-magic-pycon-2016.html</guid></item><item><title>Introduction to Docker and containers</title><link>https://pyvideo.org/pycon-us-2016/jerome-petazzoni-introduction-to-docker-and-containers-pycon-2016.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Speaker: Jérôme Petazzoni&lt;/p&gt;
&lt;p&gt;Docker is an open platform to build, ship, and run any application, anywhere. It can be used in many ways: providing clean, isolated development environments; quickly spinning up test instances for CI purposes; ensuring coherence between development and production platform; and much more.&lt;/p&gt;
&lt;p&gt;In this hands-on tutorial, you will learn basic Docker concepts, and use it to run Python applications.&lt;/p&gt;
&lt;p&gt;Slides can be found at: &lt;a class="reference external" href="https://speakerdeck.com/pycon2016"&gt;https://speakerdeck.com/pycon2016&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/PyCon/2016-slides"&gt;https://github.com/PyCon/2016-slides&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jérôme Petazzoni</dc:creator><pubDate>Mon, 30 May 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-05-30:pycon-us-2016/jerome-petazzoni-introduction-to-docker-and-containers-pycon-2016.html</guid></item><item><title>Build reliable, traceable, distributed systems with ZeroMQ</title><link>https://pyvideo.org/pycon-us-2012/build-reliable-traceable-distributed-systems-wi.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;We will show how to build simple yet powerful RPC code with ZeroMQ, with
very few (if any!) modification to existing code. We will build fan-in
and fan-out topologies with ZeroMQ special socket types to implement
PUB/SUB patterns and scale up job-processing tasks. Thanks to
introspection, the resulting services will be self-documented. Finally,
we will show how to implement distributed tracing.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jérôme Petazzoni</dc:creator><pubDate>Fri, 09 Mar 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-03-09:pycon-us-2012/build-reliable-traceable-distributed-systems-wi.html</guid></item></channel></rss>