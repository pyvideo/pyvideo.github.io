<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org - Aleksandr Koshkin</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_aleksandr-koshkin.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2018-06-02T00:00:00+00:00</updated><subtitle></subtitle><entry><title>Знай и люби свой PyObject, ты же программист</title><link href="https://pyvideo.org/minsk-python-meetup/znai-i-liubi-svoi-pyobject-ty-zhe-programmist.html" rel="alternate"></link><published>2015-07-28T00:00:00+00:00</published><updated>2015-07-28T00:00:00+00:00</updated><author><name>Александр Кошкин</name></author><id>tag:pyvideo.org,2015-07-28:/minsk-python-meetup/znai-i-liubi-svoi-pyobject-ty-zhe-programmist.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Если вам интересно как работает Python изнутри – не проходите мимо. В этот раз мы подробно обсудим объектную подсистему: что значит фраза «в Python всё объект», каково быть Python’овским классом, как происходит lookup атрибутов, работает наследование и пр.&lt;/p&gt;
&lt;p&gt;Присоединяйтесь к нам на Python Meetup!
Twitter: &lt;a class="reference external" href="https://twitter.com/pythonminsk"&gt;https://twitter.com/pythonminsk …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Если вам интересно как работает Python изнутри – не проходите мимо. В этот раз мы подробно обсудим объектную подсистему: что значит фраза «в Python всё объект», каково быть Python’овским классом, как происходит lookup атрибутов, работает наследование и пр.&lt;/p&gt;
&lt;p&gt;Присоединяйтесь к нам на Python Meetup!
Twitter: &lt;a class="reference external" href="https://twitter.com/pythonminsk"&gt;https://twitter.com/pythonminsk&lt;/a&gt;
Facebook: &lt;a class="reference external" href="https://www.facebook.com/MinskPythonMeetup"&gt;https://www.facebook.com/MinskPythonMeetup&lt;/a&gt;
Slideshare: &lt;a class="reference external" href="http://www.slideshare.net/MinskPythonMeetup"&gt;http://www.slideshare.net/MinskPythonMeetup&lt;/a&gt;&lt;/p&gt;
</content><category term="Minsk Python Meetup"></category><category term="belarus"></category><category term="minsk"></category></entry><entry><title>Inside a PyPy JIT: is that even legal?</title><link href="https://pyvideo.org/pycon-apac-2018/inside-a-pypy-jit-is-that-even-legal.html" rel="alternate"></link><published>2018-06-02T00:00:00+00:00</published><updated>2018-06-02T00:00:00+00:00</updated><author><name>Aleksandr Koshkin</name></author><id>tag:pyvideo.org,2018-06-02:/pycon-apac-2018/inside-a-pypy-jit-is-that-even-legal.html</id><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This time we are going to dig down to the RPython tool chain core - JIT
compiler generator. We will examine the very essence of the approach
taken by the PyPy team - that is how to quit writing JITted VMs by hand,
stop worrying and have fun again.&lt;/p&gt;
</content><category term="PyCon APAC 2018"></category></entry><entry><title>Знай и люби свой CPython во имя луны и великой справедливости</title><link href="https://pyvideo.org/pycon-russia-2016/znai-i-liubi-svoi-cpython-vo-imia-luny-i-velikoi-spravedlivosti.html" rel="alternate"></link><published>2016-07-04T00:00:00+00:00</published><updated>2016-07-04T00:00:00+00:00</updated><author><name>Aleksandr Koshkin</name></author><id>tag:pyvideo.org,2016-07-04:/pycon-russia-2016/znai-i-liubi-svoi-cpython-vo-imia-luny-i-velikoi-spravedlivosti.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Один из основополагающих способов узнавать новое — выводить старое за границы применимости. Достигая противоречия или получая абсурдные результаты, можно получить представление о более общих концепциях, что позволяет детализировать уже понятое и прикоснуться к неизвестному. В этот раз нечто подобное я постараюсь сделать с основной реализацией ЯП Python — CPython. Мы рассмотрим …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Один из основополагающих способов узнавать новое — выводить старое за границы применимости. Достигая противоречия или получая абсурдные результаты, можно получить представление о более общих концепциях, что позволяет детализировать уже понятое и прикоснуться к неизвестному. В этот раз нечто подобное я постараюсь сделать с основной реализацией ЯП Python — CPython. Мы рассмотрим блоки, из которых сделан интерпретатор, поймем, как они взаимодействуют, вмешаемся в их работу на низком уровне и поймем, какой профит и проблемы из этого можно получить.&lt;/p&gt;
</content><category term="PyCon Russia 2016"></category></entry><entry><title>Python on the edge of a razor: PyPy project</title><link href="https://pyvideo.org/pycon-russia-2017/python-on-the-edge-of-a-razor-pypy-project.html" rel="alternate"></link><published>2017-07-17T00:00:00+00:00</published><updated>2017-07-17T00:00:00+00:00</updated><author><name>Aleksandr Koshkin</name></author><id>tag:pyvideo.org,2017-07-17:/pycon-russia-2017/python-on-the-edge-of-a-razor-pypy-project.html</id><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This time we are going to discuss performance and some technical details of cutting edge implementation of Python VM called PyPy. Write an interpreted language in another interpreted language? Whaaaaaaaa? How this is a good idea?&lt;/p&gt;
</content><category term="PyCon Russia 2017"></category></entry></feed>