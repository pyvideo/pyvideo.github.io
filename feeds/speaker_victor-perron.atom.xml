<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_victor-perron.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2017-09-23T00:00:00+00:00</updated><entry><title>Tester et simuler toute ma prod sur mon PC</title><link href="https://pyvideo.org/pycon-fr-2017/tester-et-simuler-toute-ma-prod-sur-mon-pc.html" rel="alternate"></link><published>2017-09-23T00:00:00+00:00</published><updated>2017-09-23T00:00:00+00:00</updated><author><name>Victor Perron</name></author><id>tag:pyvideo.org,2017-09-23:pycon-fr-2017/tester-et-simuler-toute-ma-prod-sur-mon-pc.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;En découpant notre monolithe en services disjoints, nous avons aussi rencontré le souci de bien vérifier que l'ensemble des briques fonctionnent toujours aussi bien ensemble une fois découpées: les tests unitaires sont loin d'être suffisants.&lt;/p&gt;
&lt;p&gt;Par ailleurs, comment tester un front-end qui communique avec 6 backends ? Comment simuler mon environnement de production fidèlement et rapidement ? Des synchronisations entre différentes bases de données ? Comment y intégrer de véritables objets communicants externes (une voiture par exemple) ?&lt;/p&gt;
&lt;p&gt;La réponse a été complexe à apporter; je vous propose de découvrir notre plateforme de tests fonctionnels, basée sur une VM, une standardisation de la codebase et quelques astuces malignes pour obtenir un environnement robuste, hackable, et qui permet enfin de développer vite et avec confiance des logiciels interconnectés.&lt;/p&gt;
</summary></entry></feed>