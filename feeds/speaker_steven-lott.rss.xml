<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org - Steven Lott</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Sun, 18 May 2025 00:00:00 +0000</lastBuildDate><item><title>Type Hints: Putting more Buzz in your Fizz</title><link>https://pyvideo.org/pycon-us-2020/type-hints-putting-more-buzz-in-your-fizz.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steven Lott</dc:creator><pubDate>Fri, 17 Apr 2020 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2020-04-17:/pycon-us-2020/type-hints-putting-more-buzz-in-your-fizz.html</guid><category>PyCon US 2020</category><category>workshop</category></item><item><title>Unlearning SQL</title><link>https://pyvideo.org/pycon-us-2025/unlearning-sql.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Some people find SQL to be a helpful model for data analysis. They can also find themselves frustrated because some things that seem clear in SQL can seem difficult to restate in Python.&lt;/p&gt;
&lt;p&gt;We'll look at some of the SQL query design patterns in detail. With this, we can formulate Python functions that have the same behavior without the overheads of using an actual database. Even something like SQLite3 involves overheads that can be avoided.&lt;/p&gt;
&lt;p&gt;To keep the talk short, we'll avoid a number of more nuanced SQL features. We'll cover the principle elements of a Select statement including the Group by and Having clauses. This isn't a tutorial, and the audience needs to be comfortable with generator expressions and list comprehensions.&lt;/p&gt;
&lt;p&gt;The concept is to use SQL concepts for initial design, but pivot to Python for a robust implementation.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steven Lott</dc:creator><pubDate>Sun, 18 May 2025 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2025-05-18:/pycon-us-2025/unlearning-sql.html</guid><category>PyCon US 2025</category></item><item><title>NoSQL doesn't mean No Schema</title><link>https://pyvideo.org/pydata-dc-2016/nosql-doesnt-mean-no-schema.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyData DC 2016&lt;/p&gt;
&lt;p&gt;While databases like MongoDB don't require a formal schema, there's still a schema somewhere. It might be merely implied by validation rules in the code. Or, there might be a more formal representation. In some cases, the lack of strict schema creates a dynamic flexibility that creates value rapidly. Other times, the lack of formal structures leads to chaos. How can we find a balance?&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steven Lott</dc:creator><pubDate>Sat, 08 Oct 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-10-08:/pydata-dc-2016/nosql-doesnt-mean-no-schema.html</guid><category>PyData DC 2016</category><category>nosql</category></item><item><title>The Five Kinds of Python Functions</title><link>https://pyvideo.org/pydata-dc-2016/the-five-kinds-of-python-functions.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyData DC 2016&lt;/p&gt;
&lt;p&gt;We'll look at the wide variety of ways that we can leverage Python functions. This will show provide helpful background in ordinary functions, as well as callable objects and lambdas. We'll look closely at how to use generator functions, also. The fifth type of function is a function wraps a special method, like len().&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steven Lott</dc:creator><pubDate>Fri, 07 Oct 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-10-07:/pydata-dc-2016/the-five-kinds-of-python-functions.html</guid><category>PyData DC 2016</category><category>functions</category></item><item><title>Avoiding Bad Database Surprises: Simulation and Scalability - Steven Lott</title><link>https://pyvideo.org/pydata-dc-2018/avoiding-bad-database-surprises-simulation-and-scalability-steven-lott.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steven Lott</dc:creator><pubDate>Fri, 16 Nov 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-11-16:/pydata-dc-2018/avoiding-bad-database-surprises-simulation-and-scalability-steven-lott.html</guid><category>PyData DC 2018</category></item><item><title>Five Kinds of Python Functions - Steven Lott</title><link>https://pyvideo.org/pydata-dc-2018/five-kinds-of-python-functions-steven-lott.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steven Lott</dc:creator><pubDate>Fri, 16 Nov 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-11-16:/pydata-dc-2018/five-kinds-of-python-functions-steven-lott.html</guid><category>PyData DC 2018</category></item><item><title>Keynote: A Sailor's View of Python And the idea of "Defensive Programming" - Steven Lott</title><link>https://pyvideo.org/pydata-dc-2018/keynote-a-sailors-view-of-python-and-the-idea-of-defensive-programming-steven-lott.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steven Lott</dc:creator><pubDate>Fri, 16 Nov 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-11-16:/pydata-dc-2018/keynote-a-sailors-view-of-python-and-the-idea-of-defensive-programming-steven-lott.html</guid><category>PyData DC 2018</category></item></channel></rss>