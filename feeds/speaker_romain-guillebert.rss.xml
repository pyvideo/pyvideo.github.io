<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Sat, 21 Oct 2017 00:00:00 +0000</lastBuildDate><item><title>Interacting with C and Rust using CFFI</title><link>https://pyvideo.org/pycon-ireland-2017/interacting-with-c-and-rust-using-cffi.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;One of Python's main advantages has always been its ability to expose external libraries to Python code very easily, however, writing wrappers around these libraries has always been a pain point that CFFI aims to address. CFFI allows you to call code written in other programming languages without having to write anything other than Python code, it is famous for being able to call C code but is also able to call code written in other languages like Rust and Go. This talk will go over the advantages of using CFFI as opposed to the other ways of calling external libraries in Python (such as writing C extensions) and showcase more advanced ways of using CFFI to improve PyPy's compatibility with Python modules.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Romain Guillebert</dc:creator><pubDate>Sat, 21 Oct 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-10-21:pycon-ireland-2017/interacting-with-c-and-rust-using-cffi.html</guid><category>rust</category></item><item><title>PyPy, The Python Scientific Community and C extensions</title><link>https://pyvideo.org/pydata-london-2015/pypy-the-python-scientific-community-and-c-extensions.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;PyPy is the most popular alternative implementation of Python, but it
falls short in term of compatibility with C extensions, this talk is
about why C extensions are so hard to support on alternative
implementations and why they prevent Python from improving.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Recently we've seen the rise of new technologies like Julia, those have
the ability to build a new ecosystem on a clean slate and thus be better
than Python in some aspects. What would it take to be as good as those
technologies on those aspects without loosing all the things we love
about Python? This talk will describe my perfect future where Python
keeps getting better, gets to keep it's great set of libraries, where
PyPy fits in that future and why C extensions are a big road block.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Romain Guillebert</dc:creator><pubDate>Sat, 20 Jun 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-06-20:pydata-london-2015/pypy-the-python-scientific-community-and-c-extensions.html</guid></item><item><title>PyPy and the future of the Python ecosystem</title><link>https://pyvideo.org/europython-2015/pypy-and-the-future-of-the-python-ecosystem.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Romain Guillebert - PyPy and the future of the Python ecosystem
[EuroPython 2015]
[24 July 2015]
[Bilbao, Euskadi, Spain]&lt;/p&gt;
&lt;p&gt;Python has a great versatile ecosystem but the competition is getting
better, this talk is about how Python can keep up with these new
languages and where PyPy fits into this.&lt;/p&gt;
&lt;p&gt;Recently we've seen the rise of new technologies like Go, Node.js and
Julia, those have the ability to build an ecosystem on a clean slate
and thus be better than Python in some aspects. What would it take to
be as good as those technologies on those aspects without loosing all
the things we love about Python ? This talk will describe my perfect
future where Python keeps getting better, gets to keep it's great set
of libraries and where PyPy fits in that future.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Romain Guillebert</dc:creator><pubDate>Sun, 02 Aug 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-08-02:europython-2015/pypy-and-the-future-of-the-python-ecosystem.html</guid></item><item><title>PyPy status talk (a.k.a.: no no, PyPy is not dead)</title><link>https://pyvideo.org/europython-2014/pypy-status-talk-aka-no-no-pypy-is-not-dead.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;The current status of PyPy, with a particular focus on what happened in
the last two years, since the last EuroPython PyPy talk. We will give a
brief overview of the current speed and the on-going development efforts
on the JIT, the GC, NumPy, Python 3 compatibility, CFFI, STM...&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk we will present the current status of PyPy, with a
particular focus on what happened in the last two years, since the last
EuroPython PyPy talk. We will give an overview of the current speed and
the on-going development efforts, including but not limited to:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;the status of the Just-in-Time Compiler (JIT) and PyPy performance in
general;&lt;/li&gt;
&lt;li&gt;the improvements on the Garbage Collector (GC);&lt;/li&gt;
&lt;li&gt;the status of the NumPy and Python 3 compatibility subprojects;&lt;/li&gt;
&lt;li&gt;CFFI, which aims to be a general C interface mechanism for both
CPython and PyPy;&lt;/li&gt;
&lt;li&gt;a quick overview of the STM (Software Transactional Memory) research
project, which aims at solving the GIL problem.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is the &amp;quot;general PyPy status talk&amp;quot; that we give every year at
EuroPython (except last year; hence the &amp;quot;no no, PyPy is not dead&amp;quot; part
of the title of this talk).&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Romain Guillebert</dc:creator><pubDate>Tue, 22 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-22:europython-2014/pypy-status-talk-aka-no-no-pypy-is-not-dead.html</guid></item><item><title>PyPy : une implémentation rapide de Python</title><link>https://pyvideo.org/pycon-fr-2013/pypy-une-implementation-rapide-de-python.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;PyPy est l'implémentation la plus rapide de Python, cette présentation
répondra à deux questions &amp;quot;Comment fonctionne PyPy ?&amp;quot; et &amp;quot;Qu'est-ce que
PyPy peut m'apporter ?&amp;quot;.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;L'histoire de PyPy (un projet vieux de 10 ans)&lt;/li&gt;
&lt;li&gt;Comment fonctionne PyPy ?&lt;/li&gt;
&lt;li&gt;Qu'est-ce que PyPy peut m'apporter ?&lt;/li&gt;
&lt;li&gt;Le futur de PyPy&lt;/li&gt;
&lt;li&gt;Questions&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Romain Guillebert</dc:creator><pubDate>Sat, 30 Nov 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-11-30:pycon-fr-2013/pypy-une-implementation-rapide-de-python.html</guid></item></channel></rss>