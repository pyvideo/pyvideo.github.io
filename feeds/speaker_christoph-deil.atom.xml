<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_christoph-deil.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2019-10-10T00:00:00+00:00</updated><entry><title>10 ways to debug Python code</title><link href="https://pyvideo.org/pycon-de-2019/10-ways-to-debug-python-code.html" rel="alternate"></link><published>2019-10-10T00:00:00+00:00</published><updated>2019-10-10T00:00:00+00:00</updated><author><name>Christoph Deil</name></author><id>tag:pyvideo.org,2019-10-10:pycon-de-2019/10-ways-to-debug-python-code.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Speaker: Christoph Deil&lt;/p&gt;
&lt;p&gt;Track:PyConDE
Are your debugging skills limited to &amp;quot;print&amp;quot;, or do you sometimes think there must be a better way to figure out what's going on? I will show 10 ways to debug Python code, and share tips and tricks for effective debugging.&lt;/p&gt;
&lt;p&gt;Recorded at the PyConDE &amp;amp; PyData Berlin 2019 conference.
&lt;a class="reference external" href="https://pycon.de"&gt;https://pycon.de&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;More details at the conference page: &lt;a class="reference external" href="https://de.pycon.org/program/TRFD98"&gt;https://de.pycon.org/program/TRFD98&lt;/a&gt;
Twitter:  &lt;a class="reference external" href="https://twitter.com/pydataberlin"&gt;https://twitter.com/pydataberlin&lt;/a&gt;
Twitter:  &lt;a class="reference external" href="https://twitter.com/pyconde"&gt;https://twitter.com/pyconde&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Understanding Numba - the Python and Numpy compiler</title><link href="https://pyvideo.org/europython-2019/understanding-numba-the-python-and-numpy-compiler.html" rel="alternate"></link><published>2019-07-11T00:00:00+00:00</published><updated>2019-07-11T00:00:00+00:00</updated><author><name>Christoph Deil</name></author><id>tag:pyvideo.org,2019-07-11:europython-2019/understanding-numba-the-python-and-numpy-compiler.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Do you have numerical code written in Python and Numpy? Do you wish it
ran faster, using the full potential of your CPU?&lt;/p&gt;
&lt;p&gt;Then you should try Numba, a JIT compiler that translates a subset of
Python and Numpy code into fast machine code.&lt;/p&gt;
&lt;p&gt;This talk will explain how Numba works, and when and how to use it for
numerical algorithms, focusing on how to get very good performance on
the CPU.&lt;/p&gt;
&lt;p&gt;To understand this talk, only a basic knowledge of Python and Numpy is
needed.&lt;/p&gt;
&lt;p&gt;You will learn how Python compiles functions to bytecode and how Numba
compiles bytecode to machine code. Why algorithms implemented using
Numpy sometimes don't yield great performance, and how to do better
using Numba. You will learn about the &amp;#64;numba.jit and &amp;#64;numba.vectorize
decorators and how to create functions that use the CPU well by using
e.g. multi-threading (several CPU cores), vector instructions (single
instruction multiple data) and fast math (trade float accuracy for
speed).&lt;/p&gt;
&lt;p&gt;You will also learn when it does and doesn't make sense to use Numba, by
contrasting it briefly with some other options for high-performance
computing from Python: PyPy, C, C++, Cython, Numexpr, Dask, PyTorch,
Tensorflow and Google JAX&lt;/p&gt;
</summary><category term="CPython"></category><category term="Compiler and Interpreters"></category><category term="Multi-Threading"></category><category term="Performance"></category><category term="Scientific Libraries (Numpy/Pandas/SciKit/...)"></category></entry><entry><title>State of the Astropy universe</title><link href="https://pyvideo.org/euroscipy-2014/state-of-the-astropy-universe.html" rel="alternate"></link><published>2014-10-22T00:00:00+00:00</published><updated>2014-10-22T00:00:00+00:00</updated><author><name>Christoph Deil</name></author><id>tag:pyvideo.org,2014-10-22:euroscipy-2014/state-of-the-astropy-universe.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The &lt;a class="reference external" href="http://www.astropy.org/"&gt;Astropy Project&lt;/a&gt; is a community effort
to develop a single core package for Astronomy in Python and foster
interoperability between Python astronomy packages. In addition an
ecosystem of &lt;a class="reference external" href="http://www.astropy.org/affiliated/index.html"&gt;Astropy affiliated
packages&lt;/a&gt; is growing,
some of which are planned for inclusion in the Astropy core when they
are matured, some with specialised functionality will remain as separate
repositories.&lt;/p&gt;
&lt;p&gt;I will give an overview of the features and implementation of the
Astropy package, focusing on parts that are more generally useful for
scientists and engineers (e.g.
&lt;a class="reference external" href="http://docs.astropy.org/en/latest/units/index.html"&gt;astropy.units&lt;/a&gt;
and
&lt;a class="reference external" href="http://docs.astropy.org/en/latest/modeling/index.html"&gt;astropy.modeling&lt;/a&gt;)
and highlight recent developments in the core and affiliated packages.&lt;/p&gt;
</summary></entry></feed>