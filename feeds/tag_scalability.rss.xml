<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Mon, 16 Sep 2019 00:00:00 +0000</lastBuildDate><item><title>Concurrent asyncio and sanity</title><link>https://pyvideo.org/pycon-uk-2019/concurrent-asyncio-and-sanity.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Do you find programming with asyncio daunting? Are you wondering how you'd build a real-world network-connected service with this and not die trying? In this talk I want to share some best practices and tips to help you create reliable, maintainable applications using concurrency.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Martijn Pieters</dc:creator><pubDate>Mon, 16 Sep 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-09-16:pycon-uk-2019/concurrent-asyncio-and-sanity.html</guid><category>asyncio</category><category>concurrency</category><category>scalability</category></item><item><title>Python: da programmatore a domatore</title><link>https://pyvideo.org/europython-2013/python-da-programmatore-a-domatore.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alessandro Pisa</dc:creator><pubDate>Fri, 05 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-05:europython-2013/python-da-programmatore-a-domatore.html</guid><category>debugging</category><category>testing</category><category>integration</category><category>scalability</category><category>tdd</category><category>optimization</category><category>design</category><category>software-engineering</category><category>best-practices</category><category>architecture</category></item><item><title>Designing Large-Scale Applications in Python</title><link>https://pyvideo.org/europython-2013/designing-large-scale-applications-in-python.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Marc-André Lemburg</dc:creator><pubDate>Thu, 04 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-04:europython-2013/designing-large-scale-applications-in-python.html</guid><category>business</category><category>database</category><category>integration</category><category>scalability</category><category>servers</category><category>refactoring</category><category>application-design</category><category>design</category><category>software-engineering</category><category>framework</category><category>sql</category><category>best-practices</category><category>architecture</category></item><item><title>Python and PostgreSQL for Huge Data Warehouses</title><link>https://pyvideo.org/europython-2013/python-and-postgresql-for-huge-data-warehouses.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Hannu Krosing</dc:creator><pubDate>Thu, 04 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-04:europython-2013/python-and-postgresql-for-huge-data-warehouses.html</guid><category>postgresql</category><category>nosql</category><category>parallelization</category><category>bigdata</category><category>scalability</category><category>pl/python</category><category>olap</category><category>optimization</category><category>architecture</category><category>sql</category><category>performance</category></item><item><title>Python: from programmer to tamer</title><link>https://pyvideo.org/europython-2013/python-from-programmer-to-tamer.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alessandro Pisa</dc:creator><pubDate>Wed, 03 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-03:europython-2013/python-from-programmer-to-tamer.html</guid><category>debugging</category><category>testing</category><category>integration</category><category>scalability</category><category>tdd</category><category>optimization</category><category>design</category><category>software-engineering</category><category>best-practices</category><category>architecture</category></item><item><title>Scalable SQL Patterns - Part 1</title><link>https://pyvideo.org/europython-2013/scalable-sql-patterns-part-1.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">David Cramer</dc:creator><pubDate>Wed, 03 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-03:europython-2013/scalable-sql-patterns-part-1.html</guid><category>web</category><category>postgresql</category><category>scalability</category><category>sql</category></item><item><title>Scalable SQL Patterns - Part 2</title><link>https://pyvideo.org/europython-2013/scalable-sql-patterns-part-2.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">David Cramer</dc:creator><pubDate>Wed, 03 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-03:europython-2013/scalable-sql-patterns-part-2.html</guid><category>web</category><category>postgresql</category><category>scalability</category><category>sql</category></item><item><title>How DISQUS does "it" when "it" isn't Django</title><link>https://pyvideo.org/europython-2013/how-disqus-does-it-when-it-isnt-django.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Adam Hitchcock</dc:creator><pubDate>Tue, 02 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-02:europython-2013/how-disqus-does-it-when-it-isnt-django.html</guid><category>web</category><category>realtime</category><category>mongodb</category><category>zookeeper</category><category>scalability</category><category>django</category><category>celery</category><category>optimization</category><category>gevent</category><category>concurrency</category><category>performance</category></item><item><title>PostgreSQL is Web-Scale (Really :) )</title><link>https://pyvideo.org/europython-2013/postgresql-is-web-scale-really.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk I show you how to set up a python and PostgreSQL based
system which is easy to set up and easy to scale, provides ACID
guarantees where they are needed and delays time-consistency between
unrelated objects for scalability and availability where the latter are
deemed more important.&lt;/p&gt;
&lt;p&gt;The best thing is that this kind of scalability work for both OLTP and
OLAP workloads, so with some planning you can have just a single large
“database” which can take almost any type of load.&lt;/p&gt;
&lt;p&gt;Also, if you hate SQL, you can do all the OLTP stuff in a pythonic way
using an automagically generated ORM layer inside the database, near the
data. If you are really masochistic, you can use the same ORM also for
map-reduce type distributed data processing, though on this side the
small effort of learning SQL usually pays off when queries get more
complex. But as I said, everything runs inside the databse, near the
data and thus even the ORM &amp;amp; map-reduce analytics works fast.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Hannu Krosing</dc:creator><pubDate>Tue, 02 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-02:europython-2013/postgresql-is-web-scale-really.html</guid><category>postgresql</category><category>nosql</category><category>datamining</category><category>parallelization</category><category>distributed</category><category>bigdata</category><category>scalability</category><category>pl/python</category><category>olap</category><category>optimization</category><category>orm</category><category>sql</category><category>performance</category></item><item><title>Uno sguardo agli internal di RestFS</title><link>https://pyvideo.org/europython-2013/uno-sguardo-agli-internal-di-restfs.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Fabrizio Manfredi</dc:creator><pubDate>Tue, 02 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-02:europython-2013/uno-sguardo-agli-internal-di-restfs.html</guid><category>clustering</category><category>HTTP</category><category>parallelization</category><category>distributed</category><category>twisted</category><category>REST</category><category>optimization</category><category>Algorithms</category><category>scalability</category><category>async</category><category>hpc</category><category>performance</category></item><item><title>Machine Learning con Python: previsione in real-time della richiesta di energia elettrica</title><link>https://pyvideo.org/pycon-italia-2017/machine-learning-con-python-previsione-in-real-time-della-richiesta-di-energia-elettrica.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Nel talk si parlerà di come attraverso il linguaggio Python sia
possibile risolvere un problema reale e complesso relativamente alla
trasmissione di energia elettrica. Verrà spiegato il progetto
&lt;strong&gt;RealtimeLoadForecast&lt;/strong&gt; che è stato sviluppato per un importante TSO
(Transmission System Operator). Si tratta di sistema predittivo che
permette di fornire in tempo reale ogni 15 minuti ed entro 5 minuti, le
previsioni delle serie storiche dei consumi di energia elettrica
relativi a circa 500 nodi elettrici.&lt;/p&gt;
&lt;p&gt;Si parlerà dei passi che occorre seguire per ottenere da un semplice
prototipo, un sistema &lt;em&gt;ingegnerizzato&lt;/em&gt; che lavori in tempo reale e di
come sono state utilizzate le librerie di Python per l’acquisizione,
manipolazione e processamento dei dati elettrici ed ambientali.&lt;/p&gt;
&lt;p&gt;Saranno descritte alcune tecniche algoritmiche e di Machine Learning per
ottenere dei modelli predittivi capaci di fornire previsioni accurate ma
con tempi di risposta sfidanti.&lt;/p&gt;
&lt;p&gt;Verrà mostrato un &lt;em&gt;esempio concreto&lt;/em&gt; di implementazione di un algoritmo
predittivo basato sulla libreria Deep Learning &lt;strong&gt;Keras&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Per la comprensione del talk non sono necessari particolari requisiti se
non una conoscenza di base di programmazione in Python e di Machine
Learning.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Felice Tuosto</dc:creator><pubDate>Sat, 08 Apr 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-04-08:pycon-italia-2017/machine-learning-con-python-previsione-in-real-time-della-richiesta-di-energia-elettrica.html</guid><category>Forecasting</category><category>Genetic Algorithms</category><category>Keras</category><category>Data Mining</category><category>programming-paradigms</category><category>scikit-learn</category><category>bigdata</category><category>scalability</category><category>Deep-Learning</category><category>threading</category><category>realtime</category><category>Data-Scientist</category><category>database</category><category>machine-learning</category><category>mysql</category><category>signal-processing</category><category>LoadForecasting</category><category>cassandra</category></item><item><title>It's the message, stupid: python &amp; amqp</title><link>https://pyvideo.org/europython-2011/its-the-message-stupid-python-amqp.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Muharem Hrnjadovic - 21 June 2011 in &amp;quot;Track Ravioli&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Messaging is a well established domain in information technology and can
greatly improve the scalability and throughput of a system when employed
appropriately. Message queues can be used to achieve&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;spatial decoupling i.e. the systems that produce and consume messages
may be deployed on different machines, networks, continents etc.&lt;/li&gt;
&lt;li&gt;temporal decoupling i.e. a system can enqueue a message and carry on
without waiting for the message consumer.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We use e.g. messaging in &lt;a class="reference external" href="http://openquake.org"&gt;OpenQuake&lt;/a&gt; to
distribute calculations of &lt;a class="reference external" href="http://openquake.org/about/gem/"&gt;seismic
hazard&lt;/a&gt; and the respective risk to
human lives and infrastructure.&lt;/p&gt;
&lt;p&gt;There is a huge number of messaging patterns identified in the
&lt;a class="reference external" href="http://www.amazon.com/dp/0321200683/"&gt;industry&lt;/a&gt; and a small
selection of these will be presented to whet your appetite :-)&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.amqp.org/"&gt;AMQP&lt;/a&gt; is a fairly new and open messaging
standard with a number of freely available open source message brokers
(&lt;a class="reference external" href="http://www.rabbitmq.com/"&gt;RabbitMQ&lt;/a&gt;,
&lt;a class="reference external" href="http://www.zeromq.org/"&gt;ZeroMQ&lt;/a&gt;, &lt;a class="reference external" href="http://qpid.apache.org/"&gt;qpid&lt;/a&gt;
etc.) with different features and performance trade-offs.&lt;/p&gt;
&lt;p&gt;In the course of the presentation you will be - introduced to AMQP
concepts and jargon - introduced to available Python AMQP bindings
(focussing on an asynchronous
(&lt;a class="reference external" href="https://launchpad.net/txamqp"&gt;txAMQP&lt;/a&gt;) and a synchronous variant
(most likely &lt;a class="reference external" href="http://ask.github.com/kombu/"&gt;kombu&lt;/a&gt;) - shown code
examples demonstrating how to use these Python bindings&lt;/p&gt;
&lt;p&gt;The presentation (45 minutes in total) is structured as follows:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;7.5 minutes for messaging concepts and patterns&lt;/li&gt;
&lt;li&gt;7.5 minutes for AMQP concepts&lt;/li&gt;
&lt;li&gt;5 minutes for an overview of the Python bindings for AMQP&lt;/li&gt;
&lt;li&gt;10 minutes for txAMQP examples (asynchronous bindings)&lt;/li&gt;
&lt;li&gt;10 minutes for kombu examples (synchronous bindings)&lt;/li&gt;
&lt;li&gt;5 minutes for questions&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;References:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.amqp.org/"&gt;http://www.amqp.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.rabbitmq.com/"&gt;http://www.rabbitmq.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.zeromq.org/"&gt;http://www.zeromq.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://qpid.apache.org/"&gt;http://qpid.apache.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://launchpad.net/txamqp"&gt;https://launchpad.net/txamqp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://ask.github.com/kombu/"&gt;http://ask.github.com/kombu/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://www.amazon.com/dp/0321200683/"&gt;http://www.amazon.com/dp/0321200683/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Muharem Hrnjadovic</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-13:europython-2011/its-the-message-stupid-python-amqp.html</guid><category>amqp</category><category>asynchronous</category><category>patterns</category><category>performance</category><category>queues</category><category>scalability</category><category>technology</category></item><item><title>Spotify: Horizontal scalability for great success</title><link>https://pyvideo.org/europython-2011/spotify-horizontal-scalability-for-great-success.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Nick Barkas - 22 June 2011 in &amp;quot;Track Spaghetti&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;If you run on CPython, it's not possible to get a single-process,
multithreaded Python program to use more than one CPU core at a time
because of the Global Interpreter Lock (GIL). A common way of dealing
with this is to run one instance of a Python program for each core a
machine has and spread the load amongst those processes. This forces
developers to write simple, stateless programs that naturally scale out
to many many servers when needed, while also not having to think about
things like locking and thread scheduling.&lt;/p&gt;
&lt;p&gt;I'll discuss some tools and methods Spotify's backend uses for managing
multiple identical server processes as well as load balancing with DNS,
proxy servers, and using hashing to send repeated requests to the same
process. I will also talk about the difficulties that arise when you
really need to share data or state between processes, and how they can
be dealt with.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nick Barkas</dc:creator><pubDate>Wed, 13 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-13:europython-2011/spotify-horizontal-scalability-for-great-success.html</guid><category>requests</category><category>scalability</category></item><item><title>Scaling Python past 100</title><link>https://pyvideo.org/pycon-us-2011/pycon-2011--scaling-python-past-100.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Scaling Python past 100&lt;/p&gt;
&lt;p&gt;Presented by Mark Ramm&lt;/p&gt;
&lt;p&gt;Sourceforge.net has been in the top 100 sites on the internet, and we
discovered that python was easily able to scale up to handle that
traffic. In fact Python is now the core language for all new features,
and is taking over all of sourceforge.net.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;The path from legacy PHP to modern python tools has been long an bumpy,
and this is the story of how we took Python from a single prototype
site, to the core technology driving SourceForge.net. I will discuss the
mistakes we made along the way, the benefits that sold python, and the
real secret behind our python transformation.&lt;/p&gt;
&lt;p&gt;A few highlights include:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;How we abused libraries for fun and profit&lt;/li&gt;
&lt;li&gt;How a major mistake made us look good&lt;/li&gt;
&lt;li&gt;How the python community worked for us&lt;/li&gt;
&lt;li&gt;How we couldn't have done it without Django AND TurboGears&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mark Ramm</dc:creator><pubDate>Fri, 11 Mar 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--scaling-python-past-100.html</guid><category>casestudy</category><category>pycon</category><category>pycon2011</category><category>scalability</category><category>sourceforge</category><category>turbogears</category></item></channel></rss>