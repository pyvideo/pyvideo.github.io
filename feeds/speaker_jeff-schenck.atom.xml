<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_jeff-schenck.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2015-09-16T00:00:00+00:00</updated><entry><title>Development with Ansible and VMs</title><link href="https://pyvideo.org/djangocon-us-2014/development-with-ansible-and-vms.html" rel="alternate"></link><published>2014-09-11T00:00:00+00:00</published><updated>2014-09-11T00:00:00+00:00</updated><author><name>Jeff Schenck</name></author><id>tag:pyvideo.org,2014-09-11:djangocon-us-2014/development-with-ansible-and-vms.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;How do you set up a kick-ass dev environment? I'll share our team's
setup and tools that give us a dev environment with superpowers: mirrors
production; sets itself up with a single command; documented in code;
repeatable and shareable. I hope you learn something you can put into
action tomorrow!&lt;/p&gt;
&lt;p&gt;Help us caption &amp;amp; translate this video!&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://amara.org/v/FNEf/"&gt;http://amara.org/v/FNEf/&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>REST Easy — API Security Done Right</title><link href="https://pyvideo.org/djangocon-us-2015/rest-easy-api-security-done-right-by-jeff-schenck.html" rel="alternate"></link><published>2015-09-16T00:00:00+00:00</published><updated>2015-09-16T00:00:00+00:00</updated><author><name>Jeff Schenck</name></author><id>tag:pyvideo.org,2015-09-16:djangocon-us-2015/rest-easy-api-security-done-right-by-jeff-schenck.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;REST Easy — API Security Done Right by Jeff Schenck&lt;/p&gt;
&lt;p&gt;Why REST More and more of our web development is shifting to frontend
web frameworks like Angular, Ember, and Backbone. And this is great!
These frameworks can provide an amazing, responsive, beautiful
experience to our users — and the only price we pay is having to write
JavaScript. Well, having to write JavaScript and having to maintain a
seriously robust, battle-hardened API for the frontend framework to talk
to.&lt;/p&gt;
&lt;p&gt;State of REST Django REST Framework has clearly broken away with a ton
of momentum, and with good reason. It's a solid framework, and the tools
it provides right out of the box — serialization, validation, nested
relationships — are splendid. It even provides basic authentication and
authorization baked right in, which works great in the very simple
cases.&lt;/p&gt;
&lt;p&gt;However, when you start encountering slightly more complicated API
permission setups, things start to get messy.&lt;/p&gt;
&lt;p&gt;REST Security There's a big tectonic shift when trading in your
traditional request-response-Django site for a
frontend-framework-API-Django site. Your application logic used to
reside almost entirely server-side, but now it's split — half
server-side, half browser-side. And the trick with browser-side code is
it runs in a completely untrusted environment. So we're faced with a
much more complicated security situation to batten down.&lt;/p&gt;
&lt;p&gt;You need different authentication strategies: session auth, JWT token
auth, API keys, signed URLs, and combinations thereof. You have
different permission strategies: table-level, row-level, column-level,
and combinations thereof. It gets real complicated.&lt;/p&gt;
&lt;p&gt;REST Easy I'll show how to use the tools at our disposal — Django groups
and permissions, REST Frameworks's permission classes, third-party
libraries — to cobble together a passable security setup for your API.
You'll get plenty of code samples, detailing the kinds of setups we put
together for our site and the custom tooling we built to do it.&lt;/p&gt;
&lt;p&gt;Next-Level REST We'll end by talking about how our tools can serve us
better in the future. If Django is going to have a strong place in the
future of the web, we need strong tooling for building APIs. This is how
we'll get there.&lt;/p&gt;
&lt;p&gt;Help us caption &amp;amp; translate this video!&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://amara.org/v/HGSf/"&gt;http://amara.org/v/HGSf/&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Straightening Out AngularJS with Python</title><link href="https://pyvideo.org/pycon-us-2014/straightening-out-angularjs-with-python.html" rel="alternate"></link><published>2014-04-12T00:00:00+00:00</published><updated>2014-04-12T00:00:00+00:00</updated><author><name>Jeff Schenck</name></author><id>tag:pyvideo.org,2014-04-12:pycon-us-2014/straightening-out-angularjs-with-python.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;AngularJS is a really exciting tool for building super slick single-page
apps. But if you want them to play nice with a Python backend (Django,
Pyramid, Flask, etc.) you're going to have to do a little bit of
wrangling. These are the design patterns that worked for us.&lt;/p&gt;
</summary></entry><entry><title>The REST Ascendancy</title><link href="https://pyvideo.org/pycon-us-2015/the-rest-ascendancy.html" rel="alternate"></link><published>2015-04-11T00:00:00+00:00</published><updated>2015-04-11T00:00:00+00:00</updated><author><name>Jeff Schenck</name></author><id>tag:pyvideo.org,2015-04-11:pycon-us-2015/the-rest-ascendancy.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;As frontend web frameworks like AngularJS and Backbone.js take over, is
Python on the server destined to be demoted to a basic REST interface?
If we embrace our new JavaScript overlords, how do we ensure Python is
best positioned for this new world of REST on the server?&lt;/p&gt;
</summary></entry></feed>