<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Sun, 29 Oct 2017 15:30:00 +0100</lastBuildDate><item><title>Blame and the Fallacy of Root Cause Analysis</title><link>https://pyvideo.org/pycon-uk-2017/blame-and-the-fallacy-of-root-cause-analysis.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;So it has finally happened, some dreadful disaster has befallen your organisation: all your systems are down, you've been hacked or some fatal flaw in your software has ruined your whole day. You can't change the past, you can change the future, but only by learning from what went wrong.&lt;/p&gt;
&lt;p&gt;There are two common outcomes from such an experience: blame and Root Cause Analysis. This talk describes why both are wrong and both make future failure more likely.&lt;/p&gt;
&lt;p&gt;This talk also shows a better way of investigating software disaster and a way of identifying problems before they get that far. At the end of the talk you will be more resilient in the face of complex software projects that fail!&lt;/p&gt;
&lt;p&gt;The author has worked as a flying instructor, photojournalist, oilfield engineer, humanitarian worker and software engineer. He has witnessed numerous disasters (and may have even been complicit in some of them).&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Paul Ross</dc:creator><pubDate>Sun, 29 Oct 2017 15:30:00 +0100</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-10-29:pycon-uk-2017/blame-and-the-fallacy-of-root-cause-analysis.html</guid></item><item><title>A faster Python? You Have These Choices</title><link>https://pyvideo.org/europython-2017/a-faster-python-you-have-these-choices.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python was never intended as a fast language but many modern uses of
Python require high performance computing, particularly in data
science. This talk explores your options for squeezing maximum
performance out of critical Python code.&lt;/p&gt;
&lt;p&gt;This talk provides a succinct summary of the options you have: C
extensions, Cython, CFFI, PyPy and many others. It also shows the
trade-offs between execution performance and the cost of writing and
maintaining code with each choice. Each option is also explored for
maturity and ease of use for Python programmers. A real world
programming problem is coded and benchmarked using each of these
techniques. All the code used in the talk is available on GitHub.&lt;/p&gt;
&lt;p&gt;At the end of this talk you will be better place to decide on which
technique to use to make your code run 100x faster.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Paul Ross</dc:creator><pubDate>Thu, 13 Jul 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-07-13:europython-2017/a-faster-python-you-have-these-choices.html</guid></item><item><title>Here be Dragons - Writing Safe C Extensions</title><link>https://pyvideo.org/pycon-uk-2015/here-be-dragons-writing-safe-c-extensions.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Writing Python C Extensions can be daunting; you have to embrace not
just C but Python's C API, which is huge. Not only do you have to worry
about just your standard malloc() and free() but now you also have to
contend with how CPython manages its memory.&lt;/p&gt;
&lt;p&gt;This talk describes what you need to know to write fast ,reliable Python
extensions in 'C'. It demonstrates some of the pitfalls you can
encounter and some simple and robust coding patterns that you can use to
avoid them. After this talk you will be able to write Python extensions
with confidence.&lt;/p&gt;
&lt;p&gt;This talk is largely based on &lt;a class="reference external" href="https://github.com/paulross/PythonExtensionPatterns"&gt;this
material&lt;/a&gt; and
some hard won industrial experience.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Paul Ross</dc:creator><pubDate>Sun, 20 Sep 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-09-20:pycon-uk-2015/here-be-dragons-writing-safe-c-extensions.html</guid></item><item><title>Here be Dragons - Writing Safe C Extensions</title><link>https://pyvideo.org/pycon-us-2016/paul-ross-here-be-dragons-writing-safe-c-extensions-pycon-2016.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Speaker: Paul Ross&lt;/p&gt;
&lt;p&gt;Writing Python Extensions can be daunting. This talk de-mystifies what you need to know to write reliable and blazingly fast Pythonic C code.&lt;/p&gt;
&lt;p&gt;Slides can be found at: &lt;a class="reference external" href="https://speakerdeck.com/pycon2016"&gt;https://speakerdeck.com/pycon2016&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/PyCon/2016-slides"&gt;https://github.com/PyCon/2016-slides&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Paul Ross</dc:creator><pubDate>Mon, 30 May 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-05-30:pycon-us-2016/paul-ross-here-be-dragons-writing-safe-c-extensions-pycon-2016.html</guid></item></channel></rss>