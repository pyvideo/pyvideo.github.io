<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Fri, 08 Nov 2019 00:00:00 +0000</lastBuildDate><item><title>Tip-Top Typing: A Look At Python Typing</title><link>https://pyvideo.org/hsvpy-huntsvilles-python-meetup/tip-top-typing-a-look-at-python-typing.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Have you ever wondered how Python handles types?  What does dynamic typing mean?  How about duck typing?  In this video, we'll look at what a type is in Python, as well as how to use it's most popular typechecker - mypy - to be more effective in using types.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Pat Viafore</dc:creator><pubDate>Fri, 08 Nov 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-11-08:hsvpy-huntsvilles-python-meetup/tip-top-typing-a-look-at-python-typing.html</guid><category>typing</category><category>mypy</category></item><item><title>Free yourself from your ORM with mypy!</title><link>https://pyvideo.org/pytexas-2019/free-yourself-from-your-orm-with-mypy.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Can you decouple yourself from your ORM while still maintaining safety and convenience? You can, and mypy can help! Learn how static type checking and functional patterns can help you write less coupled, more transparent and safer code, without an ORM.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Thomas Stephens</dc:creator><pubDate>Sat, 13 Apr 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-04-13:pytexas-2019/free-yourself-from-your-orm-with-mypy.html</guid><category>mypy</category></item><item><title>MyPy: The Good, The Bad and The Ugly</title><link>https://pyvideo.org/pycon-uk-2017/mypy-the-good-the-bad-and-the-ugly.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;We tried adding MyPy type hints to a few thousand lines of reasonably hairy production code. This talk will discuss some of the challenges that we encountered, how we dealt with them, what we learnt, and whether we thought it was worth all the effort. (Spoiler: we did think it was worth all the effort.)&lt;/p&gt;
&lt;p&gt;I won't have time to give a full overview of MyPy, but I will try to cover enough basics that the talk is mostly accessible to people who aren't already familiar with it.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">David Sim</dc:creator><pubDate>Sun, 29 Oct 2017 12:30:00 +0100</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-10-29:pycon-uk-2017/mypy-the-good-the-bad-and-the-ugly.html</guid><category>mypy</category></item><item><title>mypy Python's gradual typing implementation</title><link>https://pyvideo.org/pycon-israel-2017/mypy-pythons-gradual-typing-implementation.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python is a dynamic language. On small code bases this property is helpful and might increase productivity. On medium to large code bases this might be an impediment. In this session I will introduce mypy, which introduces type hints into Python in attempt to solve that impediment.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Itzhak Kasovitch</dc:creator><pubDate>Tue, 13 Jun 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-06-13:pycon-israel-2017/mypy-pythons-gradual-typing-implementation.html</guid><category>mypy</category></item></channel></rss>