<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org - Brandon Rhodes</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_brandon-rhodes.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2023-04-01T00:00:00+00:00</updated><subtitle></subtitle><entry><title>Python as C++’s limiting case</title><link href="https://pyvideo.org/codedive-2018/python-as-cs-limiting-case.html" rel="alternate"></link><published>2018-11-07T00:00:00+00:00</published><updated>2018-11-07T00:00:00+00:00</updated><author><name>Brandon Rhodes</name></author><id>tag:pyvideo.org,2018-11-07:/codedive-2018/python-as-cs-limiting-case.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The Python language’s memory model can be deduced from first principles: simply take modern C++ conventions and drive their safety and generality to infinity. But this limiting case generates its own compromises and opens its own categories of possible runtime errors. We will explore the position Python has …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The Python language’s memory model can be deduced from first principles: simply take modern C++ conventions and drive their safety and generality to infinity. But this limiting case generates its own compromises and opens its own categories of possible runtime errors. We will explore the position Python has staked out in the language design space of correctness versus performance, the choices Python programmers make when they need to move closer to C++, and the ways that the C++ community keeps adopting conventions that look suspiciously like Python.&lt;/p&gt;
</content><category term="code::dive 2018"></category></entry><entry><title>When Python Practices Go Wrong</title><link href="https://pyvideo.org/codedive-2019/when-python-practices-go-wrong.html" rel="alternate"></link><published>2019-11-20T00:00:00+00:00</published><updated>2019-11-20T00:00:00+00:00</updated><author><name>Brandon Rhodes</name></author><id>tag:pyvideo.org,2019-11-20:/codedive-2019/when-python-practices-go-wrong.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Just because a programming pattern or convention becomes popular doesn’t always mean it’s a good idea! Let’s dig into the consensus the Python community has built around what constitutes “Pythonic” code and look at the cases where the conventional wisdom is wrong. In the process, we …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Just because a programming pattern or convention becomes popular doesn’t always mean it’s a good idea! Let’s dig into the consensus the Python community has built around what constitutes “Pythonic” code and look at the cases where the conventional wisdom is wrong. In the process, we’ll learn how code in a dynamic language can become more readable and more effective.&lt;/p&gt;
</content><category term="code::dive 2019"></category></entry><entry><title>Django: a Data Shovel With a Future</title><link href="https://pyvideo.org/djangocon-us-2014/django-a-data-shovel-with-a-future.html" rel="alternate"></link><published>2014-09-19T00:00:00+00:00</published><updated>2014-09-19T00:00:00+00:00</updated><author><name>Brandon Rhodes</name></author><id>tag:pyvideo.org,2014-09-19:/djangocon-us-2014/django-a-data-shovel-with-a-future.html</id><content type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Help us caption &amp;amp; translate this video!&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://amara.org/v/FPWf/"&gt;http://amara.org/v/FPWf/&lt;/a&gt;&lt;/p&gt;
</content><category term="DjangoCon US 2014"></category></entry><entry><title>DjangoCon EU 2013: Brandon Rhodes - Keynote</title><link href="https://pyvideo.org/djangocon-europe-2013/djangocon-eu-2013-brandon-rhodes-keynote.html" rel="alternate"></link><published>2013-05-15T00:00:00+00:00</published><updated>2013-05-15T00:00:00+00:00</updated><author><name>Brandon Rhodes</name></author><id>tag:pyvideo.org,2013-05-15:/djangocon-europe-2013/djangocon-eu-2013-brandon-rhodes-keynote.html</id><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Videos from DjangoCon Europe 2013 are kindly provided by Heroku, a cloud application platform -- a new way of building and deploying web apps: &lt;a class="reference external" href="http://heroku.com/"&gt;http://heroku.com/&lt;/a&gt;&lt;/p&gt;
</content><category term="DjangoCon Europe 2013"></category></entry><entry><title>Panel: Python 3 Adoption and Barriers</title><link href="https://pyvideo.org/montreal-python/panel-python-3-adoption-and-barriers.html" rel="alternate"></link><published>2014-04-14T00:00:00+00:00</published><updated>2014-04-14T00:00:00+00:00</updated><author><name>Brandon Rhodes</name></author><id>tag:pyvideo.org,2014-04-14:/montreal-python/panel-python-3-adoption-and-barriers.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Montreal, April 14, 2014 - Python 3.4.0 was just released! Many Python developers are enthusiastic about the cleanups in the language and standard library, but many others suffer from missing features in the Python 2 line. What's the status of the migration? How are the core developers in …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Montreal, April 14, 2014 - Python 3.4.0 was just released! Many Python developers are enthusiastic about the cleanups in the language and standard library, but many others suffer from missing features in the Python 2 line. What's the status of the migration? How are the core developers in tune with the larger community? Invited representatives, including CPython core developer Nick Coghlan and CPython and PyPy core developer Alex Gaynor share their experience and answer questions from the audience.&lt;/p&gt;
&lt;p&gt;Useful links:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Brandon Rhodes: &lt;a class="reference external" href="https://twitter.com/brandon_rhodes"&gt;https://twitter.com/brandon_rhodes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Victor Stinner: &lt;a class="reference external" href="https://twitter.com/victor_stinner"&gt;https://twitter.com/victor_stinner&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Nick Coghlan: &lt;a class="reference external" href="https://twitter.com/ncoghlan_dev"&gt;https://twitter.com/ncoghlan_dev&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Alex Gaynor: &lt;a class="reference external" href="https://twitter.com/alex_gaynor"&gt;https://twitter.com/alex_gaynor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Selena Deckelmann: &lt;a class="reference external" href="https://twitter.com/selenamarie"&gt;https://twitter.com/selenamarie&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Alexandre Vassalotti: &lt;a class="reference external" href="https://twitter.com/avassalotti"&gt;https://twitter.com/avassalotti&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;MP45: &lt;a class="reference external" href="http://sflx.ca/mp45e"&gt;http://sflx.ca/mp45e&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Montreal Python: &lt;a class="reference external" href="http://montrealpython.org"&gt;http://montrealpython.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Savoir-faire Linux: &lt;a class="reference external" href="http://www.savoirfairelinux.com"&gt;http://www.savoirfairelinux.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content><category term="Montréal-Python"></category></entry><entry><title>Animating with ASCII</title><link href="https://pyvideo.org/north-bay-python-2017/animating-with-ascii.html" rel="alternate"></link><published>2017-12-02T00:00:00+00:00</published><updated>2017-12-02T00:00:00+00:00</updated><author><name>Brandon Rhodes</name></author><id>tag:pyvideo.org,2017-12-02:/north-bay-python-2017/animating-with-ascii.html</id><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Animating with ASCII (Or, An Analysis Of The Code Behind My Pycon 2017 Talk)&lt;/p&gt;
&lt;p&gt;Keynote presentation from North Bay Python 2017 by Brandon Rhodes&lt;/p&gt;
</content><category term="North Bay Python 2017"></category><category term="keynote"></category></entry><entry><title>Day 3: Keynote: Python Web Technologies</title><link href="https://pyvideo.org/plone-conference-2016-boston/day-3-keynote-python-web-technologies.html" rel="alternate"></link><published>2016-10-21T00:00:00+00:00</published><updated>2016-10-21T00:00:00+00:00</updated><author><name>Brandon Rhodes</name></author><id>tag:pyvideo.org,2016-10-21:/plone-conference-2016-boston/day-3-keynote-python-web-technologies.html</id><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Brandon, who has been using Python since 1997 or 1998 (the exact year has been lost to history), will share his perspective on the past, present, and future of Python for the Web.&lt;/p&gt;
</content><category term="Plone Conference 2016 Boston"></category></entry><entry><title>The design of the ‘Assay’ testing framework</title><link href="https://pyvideo.org/puppy-meetup-zillow-2016-jan-13/the-design-of-the-assay-testing-framework.html" rel="alternate"></link><published>2016-01-13T00:00:00+00:00</published><updated>2016-01-13T00:00:00+00:00</updated><author><name>Brandon Rhodes</name></author><id>tag:pyvideo.org,2016-01-13:/puppy-meetup-zillow-2016-jan-13/the-design-of-the-assay-testing-framework.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The duties of organizing PyCon has prevented me from completing my new testing framework, so instead I am going ahead and sharing all of its good ideas in the hope that other testing frameworks will adopt them and I will get to enjoy them regardless of the framework I …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The duties of organizing PyCon has prevented me from completing my new testing framework, so instead I am going ahead and sharing all of its good ideas in the hope that other testing frameworks will adopt them and I will get to enjoy them regardless of the framework I use! Thoughts on making a testing framework fast, reactive, and Pythonic.&lt;/p&gt;
</content><category term="PuPPy Meetup @ Zillow 2016 Jan 13"></category></entry><entry><title>An Import Loop and a Fiery Reentry</title><link href="https://pyvideo.org/pybay-2018/an-import-loop-and-a-fiery-reentry.html" rel="alternate"></link><published>2018-08-18T00:00:00+00:00</published><updated>2018-08-18T00:00:00+00:00</updated><author><name>Brandon Rhodes</name></author><id>tag:pyvideo.org,2018-08-18:/pybay-2018/an-import-loop-and-a-fiery-reentry.html</id><content type="html"></content><category term="PyBay 2018"></category></entry><entry><title>Keynote: Activation Energy, by Brandon Rhodes</title><link href="https://pyvideo.org/pycon-ar-2018/keynote-activation-energy-by-brandon-rhodes.html" rel="alternate"></link><published>2018-11-23T00:00:00+00:00</published><updated>2018-11-23T00:00:00+00:00</updated><author><name>Brandon Rhodes</name></author><id>tag:pyvideo.org,2018-11-23:/pycon-ar-2018/keynote-activation-energy-by-brandon-rhodes.html</id><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Keynote presented on Friday in the PyCon Argentina 2018.&lt;/p&gt;
</content><category term="PyCon Ar 2018"></category><category term="keynote"></category></entry><entry><title>The Antipodes</title><link href="https://pyvideo.org/pycon-au-2019/the-antipodes.html" rel="alternate"></link><published>2019-08-03T00:00:00+00:00</published><updated>2019-08-03T00:00:00+00:00</updated><author><name>Brandon Rhodes</name></author><id>tag:pyvideo.org,2019-08-03:/pycon-au-2019/the-antipodes.html</id><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Brandon will be speaking at PyCon AU about the antipodes&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://2019.pycon-au.org/talks/brandon"&gt;https://2019.pycon-au.org/talks/brandon&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Sat Aug  3 16:00:00 2019 at Cockle Bay&lt;/p&gt;
</content><category term="PyCon AU 2019"></category></entry><entry><title>A Python Æsthetic: Beauty and Why I Python</title><link href="https://pyvideo.org/pycon-ca-2012/a-python-sthetic-beauty-and-why-i-python.html" rel="alternate"></link><published>2012-11-10T00:00:00+00:00</published><updated>2012-11-10T00:00:00+00:00</updated><author><name>Brandon Rhodes</name></author><id>tag:pyvideo.org,2012-11-10:/pycon-ca-2012/a-python-sthetic-beauty-and-why-i-python.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Why did I start using Python in the late 1990s? Was it for any of the
reasons that I remain a fan today? In this talk we will explore how
Python, even while training us to avoid and become blind to its rough
edges, works to teach us new …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Why did I start using Python in the late 1990s? Was it for any of the
reasons that I remain a fan today? In this talk we will explore how
Python, even while training us to avoid and become blind to its rough
edges, works to teach us new ways of making programs beautiful. Even
novices should learn new things to love about Python by listening to
this talk!&lt;/p&gt;
</content><category term="PyCon CA 2012"></category></entry><entry><title>Skyfield and 15 Years of Bad APIs</title><link href="https://pyvideo.org/pycon-ca-2013/skyfield-and-15-years-of-bad-apis.html" rel="alternate"></link><published>2013-08-10T00:00:00+00:00</published><updated>2013-08-10T00:00:00+00:00</updated><author><name>Brandon Rhodes</name></author><id>tag:pyvideo.org,2013-08-10:/pycon-ca-2013/skyfield-and-15-years-of-bad-apis.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;I released the first version of PyEphem in 1998. Built with SWIG, it
made astronomical calculations in Python only slightly more convenient
than writing C code to make raw calls to the libastro library. A massive
rewrite five years later improved the interface, but a decade of
fielding questions …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;I released the first version of PyEphem in 1998. Built with SWIG, it
made astronomical calculations in Python only slightly more convenient
than writing C code to make raw calls to the libastro library. A massive
rewrite five years later improved the interface, but a decade of
fielding questions from users has convinced me to re-think how an API
can better help programmers cope with an unfamiliar and complex domain
like astronomy. This talk will explore how API design, NumPy
integration, and modern high-performance Python computation combine in
Skyfield, the new pure-Python astronomy library that I will release
during the PyCon Canada sprints!&lt;/p&gt;
</content><category term="PyCon CA 2013"></category><category term="talk"></category></entry><entry><title>Using Python to power Selenium at scale</title><link href="https://pyvideo.org/pycon-ca-2016/using-python-to-power-selenium-at-scale.html" rel="alternate"></link><published>2016-11-13T00:00:00+00:00</published><updated>2016-11-13T00:00:00+00:00</updated><author><name>Brandon Rhodes</name></author><id>tag:pyvideo.org,2016-11-13:/pycon-ca-2016/using-python-to-power-selenium-at-scale.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;How can Python use Selenium to take command of a web browser and step it
through thousands of tests that have to run hundreds of times per day?
What anti-patterns emerge when an organization has been maintaining a
Selenium test suite for multiple years? At Dropbox, I and my …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;How can Python use Selenium to take command of a web browser and step it
through thousands of tests that have to run hundreds of times per day?
What anti-patterns emerge when an organization has been maintaining a
Selenium test suite for multiple years? At Dropbox, I and my co-workers
use Python to deliver test results to hundreds of other engineers. Come
learn the lessons we have learned so far!&lt;/p&gt;
&lt;div class="section" id="brandon-rhodes-bio"&gt;
&lt;h4&gt;Brandon Rhodes Bio&lt;/h4&gt;
&lt;p&gt;Brandon Rhodes works at Dropbox where he strives to deliver a
world-class Python development environment to his fellow Dropboxers. His
most popular open source projects are astronomy libraries for Python
that he has been maintaining since the late 1990s. He speaks at several
Python conferences a year, and in 2016–2017 is the Chair of the main
worldwide PyCon conference as it is held in Portland.&lt;/p&gt;
&lt;/div&gt;
</content><category term="PyCon CA 2016"></category></entry><entry><title>You look at it till a solution occurs</title><link href="https://pyvideo.org/pycon-ireland-2017/you-look-at-it-till-a-solution-occurs.html" rel="alternate"></link><published>2017-10-21T00:00:00+00:00</published><updated>2017-10-21T00:00:00+00:00</updated><author><name>Brandon Rhodes</name></author><id>tag:pyvideo.org,2017-10-21:/pycon-ireland-2017/you-look-at-it-till-a-solution-occurs.html</id><content type="html"></content><category term="PyCon Ireland 2017"></category></entry><entry><title>Python and the Glories of the UNIX Tradition</title><link href="https://pyvideo.org/pycon-uk-2016/python-and-the-glories-of-the-unix-tradition.html" rel="alternate"></link><published>2016-09-16T00:00:00+00:00</published><updated>2016-09-16T00:00:00+00:00</updated><author><name>Brandon Rhodes</name></author><id>tag:pyvideo.org,2016-09-16:/pycon-uk-2016/python-and-the-glories-of-the-unix-tradition.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Keynote presentation by: Brandon Rhodes&lt;/p&gt;
&lt;p&gt;In 1991 the newly-released Python language sallied forth into a profession already riven with rivalry between competing technical traditions. Learn about the stand that Python took on one side of a long-running argument, about the technology ideas it shares with UNIX, and about the …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Keynote presentation by: Brandon Rhodes&lt;/p&gt;
&lt;p&gt;In 1991 the newly-released Python language sallied forth into a profession already riven with rivalry between competing technical traditions. Learn about the stand that Python took on one side of a long-running argument, about the technology ideas it shares with UNIX, and about the important lessons from computing history that Python today delivers to programmers around the world.&lt;/p&gt;
</content><category term="PyCon UK 2016"></category><category term="keynote"></category></entry><entry><title>Using Grok to Walk Like a Duck</title><link href="https://pyvideo.org/pycon-us-2008/using-grok-to-walk-like-a-duck.html" rel="alternate"></link><published>2008-03-16T00:00:00+00:00</published><updated>2008-03-16T00:00:00+00:00</updated><author><name>Brandon Rhodes</name></author><id>tag:pyvideo.org,2008-03-16:/pycon-us-2008/using-grok-to-walk-like-a-duck.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Web development often involves bringing together many different components to build a single site. Authentication, social networking, media management, and content management are examples of the kind of features that are often powered by third-party modules or extensions. This talk introduces Zope's adapter registry and how a declarative web …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Web development often involves bringing together many different components to build a single site. Authentication, social networking, media management, and content management are examples of the kind of features that are often powered by third-party modules or extensions. This talk introduces Zope's adapter registry and how a declarative web framework like Grok lets you use the “Adapter” gang-of-four design pattern to link components together into a cleanly functioning site.&lt;/p&gt;
</content><category term="PyCon US 2008"></category></entry><entry><title>The Mighty Dictionary (#55)</title><link href="https://pyvideo.org/pycon-us-2010/the-mighty-dictionary-55.html" rel="alternate"></link><published>2010-02-19T00:00:00+00:00</published><updated>2010-02-19T00:00:00+00:00</updated><author><name>Brandon Rhodes</name></author><id>tag:pyvideo.org,2010-02-19:/pycon-us-2010/the-mighty-dictionary-55.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The Mighty Dictionary&lt;/p&gt;
&lt;p&gt;Presented by Brandon Craig Rhodes&lt;/p&gt;
&lt;p&gt;Both newcomers and experienced developers alike love Python's built-in
data types â€” especially dictionaries! But how do dictionaries work?
What do they do better than other container types, and where, on the
other hand, are their weaknesses? Using simple, vivid diagrams …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The Mighty Dictionary&lt;/p&gt;
&lt;p&gt;Presented by Brandon Craig Rhodes&lt;/p&gt;
&lt;p&gt;Both newcomers and experienced developers alike love Python's built-in
data types â€” especially dictionaries! But how do dictionaries work?
What do they do better than other container types, and where, on the
other hand, are their weaknesses? Using simple, vivid diagrams that show
the secrets of how the dictionary is implemented, and a series of
progressively interesting examples of its behavior, we will train the
Python developer's mind to picture what the dictionary is doing in just
enough detail to make good decisions, as your data sets get larger,
about when to use dictionaries and when other data structures might be
more appropriate.&lt;/p&gt;
</content><category term="PyCon US 2010"></category><category term="dict"></category><category term="pycon"></category><category term="pycon2010"></category></entry><entry><title>Python, Linkers, and Virtual Memory</title><link href="https://pyvideo.org/pycon-us-2012/python-linkers-and-virtual-memory.html" rel="alternate"></link><published>2012-03-11T00:00:00+00:00</published><updated>2012-03-11T00:00:00+00:00</updated><author><name>Brandon Rhodes</name></author><id>tag:pyvideo.org,2012-03-11:/pycon-us-2012/python-linkers-and-virtual-memory.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Why does “top” show that your Python process uses 110&amp;nbsp;MB of virtual
memory but has a resident set size of 9&amp;nbsp;MB? Does it consume more memory
to spawn several interpreters, or to run one Python and have it fork()
further workers? What is an “undefined symbol,” anyway …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Why does “top” show that your Python process uses 110&amp;nbsp;MB of virtual
memory but has a resident set size of 9&amp;nbsp;MB? Does it consume more memory
to spawn several interpreters, or to run one Python and have it fork()
further workers? What is an “undefined symbol,” anyway? Learn about how
an operating system manages memory, loads shared libraries, and what
this means for Python servers and applications.&lt;/p&gt;
</content><category term="PyCon US 2012"></category></entry><entry><title>Flexing SQLAlchemy's Relational Power</title><link href="https://pyvideo.org/pycon-us-2012/flexing-sqlalchemys-relational-power.html" rel="alternate"></link><published>2012-03-10T00:00:00+00:00</published><updated>2012-03-10T00:00:00+00:00</updated><author><name>Brandon Rhodes</name></author><id>tag:pyvideo.org,2012-03-10:/pycon-us-2012/flexing-sqlalchemys-relational-power.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;How do you take the big step from casual SQLAlchemy user, who treats
your database as a mysterious object store, to advanced power user, who
optimizes critical queries, plans indexing and migrations, and generates
efficient reports? This talk will teach you how databases think; why
humanity invented the Relational …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;How do you take the big step from casual SQLAlchemy user, who treats
your database as a mysterious object store, to advanced power user, who
optimizes critical queries, plans indexing and migrations, and generates
efficient reports? This talk will teach you how databases think; why
humanity invented the Relational Algebra; and how SQLAlchemy grants you
access to relational power.&lt;/p&gt;
</content><category term="PyCon US 2012"></category></entry><entry><title>Documenting Your Project With Sphinx</title><link href="https://pyvideo.org/pycon-us-2012/documenting-your-project-with-sphinx.html" rel="alternate"></link><published>2012-03-08T00:00:00+00:00</published><updated>2012-03-08T00:00:00+00:00</updated><author><name>Brandon Rhodes</name></author><id>tag:pyvideo.org,2012-03-08:/pycon-us-2012/documenting-your-project-with-sphinx.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Python projects can succeed or fail because of their documentation.
Thanks to Sphinx, Python now has a “documentation framework” with
indexing, syntax highlighting, and integration with your code. Students
will be given a small undocumented Python package, and during the
exercises they will give the package a tutorial and …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Python projects can succeed or fail because of their documentation.
Thanks to Sphinx, Python now has a “documentation framework” with
indexing, syntax highlighting, and integration with your code. Students
will be given a small undocumented Python package, and during the
exercises they will give the package a tutorial and reference manual.
Plus: deployment and theming!&lt;/p&gt;
</content><category term="PyCon US 2012"></category></entry><entry><title>SQL for Python Developers</title><link href="https://pyvideo.org/pycon-us-2012/sql-for-python-developers.html" rel="alternate"></link><published>2012-03-07T00:00:00+00:00</published><updated>2012-03-07T00:00:00+00:00</updated><author><name>Brandon Rhodes</name></author><id>tag:pyvideo.org,2012-03-07:/pycon-us-2012/sql-for-python-developers.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Relational databases are often the bread-and-butter of large-scale data
storage, yet they are often poorly understood by Python programmers.
Organizations even split programmers into SQL and front-end teams, each
of which jealously guards its turf. These tutorials will take what you
already know about Python programming, and advance into …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Relational databases are often the bread-and-butter of large-scale data
storage, yet they are often poorly understood by Python programmers.
Organizations even split programmers into SQL and front-end teams, each
of which jealously guards its turf. These tutorials will take what you
already know about Python programming, and advance into a new realm: SQL
programming and database design.&lt;/p&gt;
</content><category term="PyCon US 2012"></category></entry><entry><title>The Naming of Ducks: Where Dynamic Types Meet Smart Conventions</title><link href="https://pyvideo.org/pycon-us-2013/the-naming-of-ducks-where-dynamic-types-meet-sma.html" rel="alternate"></link><published>2013-03-15T00:00:00+00:00</published><updated>2013-03-15T00:00:00+00:00</updated><author><name>Brandon Rhodes</name></author><id>tag:pyvideo.org,2013-03-15:/pycon-us-2013/the-naming-of-ducks-where-dynamic-types-meet-sma.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;While Java and C# use static type declarations to eliminate ambiguity,
the Python programmer must survive through sheer clarity and consistency
in naming variables. We will explore the deep unspoken conventions that
the Python community has developed and honed over two decades to make
Python code readable and meaningful …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;While Java and C# use static type declarations to eliminate ambiguity,
the Python programmer must survive through sheer clarity and consistency
in naming variables. We will explore the deep unspoken conventions that
the Python community has developed and honed over two decades to make
Python code readable and meaningful within the freedom that a
dynamically-typed language grants us.&lt;/p&gt;
</content><category term="PyCon US 2013"></category><category term="talk"></category></entry><entry><title>Documenting Your Project in Sphinx</title><link href="https://pyvideo.org/pycon-us-2013/documenting-your-project-in-sphinx.html" rel="alternate"></link><published>2013-03-14T00:00:00+00:00</published><updated>2013-03-14T00:00:00+00:00</updated><author><name>Brandon Rhodes</name></author><id>tag:pyvideo.org,2013-03-14:/pycon-us-2013/documenting-your-project-in-sphinx.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Projects can succeed or fail because of their documentation. When you
write, you need to concentrate on your prose—not on how to get text
rendered, indexed, highlighted, and cross-referenced. The Sphinx
documentation framework exists to make these parts easy so you can focus
on writing. This tutorial will …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Projects can succeed or fail because of their documentation. When you
write, you need to concentrate on your prose—not on how to get text
rendered, indexed, highlighted, and cross-referenced. The Sphinx
documentation framework exists to make these parts easy so you can focus
on writing. This tutorial will use hands-on exercises to teach you to
write, theme, and deploy documentation using Sphinx!&lt;/p&gt;
</content><category term="PyCon US 2013"></category><category term="tutorial"></category></entry><entry><title>The Day of the EXE Is Upon Us</title><link href="https://pyvideo.org/pycon-us-2014/the-day-of-the-exe-is-upon-us.html" rel="alternate"></link><published>2014-04-13T00:00:00+00:00</published><updated>2014-04-13T00:00:00+00:00</updated><author><name>Brandon Rhodes</name></author><id>tag:pyvideo.org,2014-04-13:/pycon-us-2014/the-day-of-the-exe-is-upon-us.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;It was once quite painful to build your Python app as a single .exe
file. Support forums filled with lamentations as users struggled with
primitive tools. But today, two separate tools exist for compiling your
Python to real machine language! Come learn about how one of the biggest
problems …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;It was once quite painful to build your Python app as a single .exe
file. Support forums filled with lamentations as users struggled with
primitive tools. But today, two separate tools exist for compiling your
Python to real machine language! Come learn about how one of the biggest
problems in commercial and enterprise software has now been solved and
how you can benefit from this achievement.&lt;/p&gt;
</content><category term="PyCon US 2014"></category></entry><entry><title>All Your Ducks In A Row: Data Structures in the Standard Library and Beyond</title><link href="https://pyvideo.org/pycon-us-2014/all-your-ducks-in-a-row-data-structures-in-the-s.html" rel="alternate"></link><published>2014-04-12T00:00:00+00:00</published><updated>2014-04-12T00:00:00+00:00</updated><author><name>Brandon Rhodes</name></author><id>tag:pyvideo.org,2014-04-12:/pycon-us-2014/all-your-ducks-in-a-row-data-structures-in-the-s.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Why are Python programmers crazy about lists and dictionaries, when
other languages tout bitmaps, linked lists, and B+ trees? Are we missing
out? Come learn how data structures are implemented on bare metal, how
to select the right data structure, how the list and dictionary cover a
wide swath …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Why are Python programmers crazy about lists and dictionaries, when
other languages tout bitmaps, linked lists, and B+ trees? Are we missing
out? Come learn how data structures are implemented on bare metal, how
to select the right data structure, how the list and dictionary cover a
wide swath of use cases, and when to dip into the Standard Library or a
third-party package for an alternative.&lt;/p&gt;
</content><category term="PyCon US 2014"></category></entry><entry><title>Closing Messages</title><link href="https://pyvideo.org/pycon-us-2015/closing-messages.html" rel="alternate"></link><published>2015-04-12T00:00:00+00:00</published><updated>2015-04-12T00:00:00+00:00</updated><author><name>Brandon Rhodes</name></author><id>tag:pyvideo.org,2015-04-12:/pycon-us-2015/closing-messages.html</id><content type="html"></content><category term="PyCon US 2015"></category></entry><entry><title>Oh, Come On Who Needs Bytearrays</title><link href="https://pyvideo.org/pycon-us-2015/oh-come-on-who-needs-bytearrays.html" rel="alternate"></link><published>2015-04-12T00:00:00+00:00</published><updated>2015-04-12T00:00:00+00:00</updated><author><name>Brandon Rhodes</name></author><id>tag:pyvideo.org,2015-04-12:/pycon-us-2015/oh-come-on-who-needs-bytearrays.html</id><content type="html"></content><category term="PyCon US 2015"></category></entry><entry><title>Pandas From The Ground Up</title><link href="https://pyvideo.org/pycon-us-2015/pandas-from-the-ground-up.html" rel="alternate"></link><published>2015-04-12T00:00:00+00:00</published><updated>2015-04-12T00:00:00+00:00</updated><author><name>Brandon Rhodes</name></author><id>tag:pyvideo.org,2015-04-12:/pycon-us-2015/pandas-from-the-ground-up.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The typical Pandas user learns one dataframe method at a time, slowly
scraping features together through trial and error until they can solve
the task in front of them. In this tutorial you will re-learn how to
think about dataframes from the ground up, and discover how to select …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The typical Pandas user learns one dataframe method at a time, slowly
scraping features together through trial and error until they can solve
the task in front of them. In this tutorial you will re-learn how to
think about dataframes from the ground up, and discover how to select
intelligently from their abilities to solve your data processing
problems through direct and deliberately-chosen steps.&lt;/p&gt;
</content><category term="PyCon US 2015"></category></entry><entry><title>Thank you</title><link href="https://pyvideo.org/pycon-us-2016/thank-you.html" rel="alternate"></link><published>2016-06-01T00:00:00+00:00</published><updated>2016-06-01T00:00:00+00:00</updated><author><name>Brandon Rhodes</name></author><id>tag:pyvideo.org,2016-06-01:/pycon-us-2016/thank-you.html</id><content type="html"></content><category term="PyCon US 2016"></category></entry><entry><title>Final remarks and conference close</title><link href="https://pyvideo.org/pycon-us-2017/final-remarks-and-conference-close.html" rel="alternate"></link><published>2017-05-21T00:00:00+00:00</published><updated>2017-05-21T00:00:00+00:00</updated><author><name>Brandon Rhodes</name></author><id>tag:pyvideo.org,2017-05-21:/pycon-us-2017/final-remarks-and-conference-close.html</id><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Final remarks and conference close&lt;/p&gt;
</content><category term="PyCon US 2017"></category></entry><entry><title>The Dictionary Even Mightier</title><link href="https://pyvideo.org/pycon-us-2017/the-dictionary-even-mightier.html" rel="alternate"></link><published>2017-05-20T00:00:00+00:00</published><updated>2017-05-20T00:00:00+00:00</updated><author><name>Brandon Rhodes</name></author><id>tag:pyvideo.org,2017-05-20:/pycon-us-2017/the-dictionary-even-mightier.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Since my “Mighty Dictionary” talk at PyCon&amp;nbsp;2010, the Python dictionary
has evolved dramatically. Come learn about all of the the improvements,
up to and including the re-architecture that has just landed with
Python&amp;nbsp;3.6! The talk will discuss iterable views, the dictionary’s
dedicated comprehension syntax, random …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Since my “Mighty Dictionary” talk at PyCon&amp;nbsp;2010, the Python dictionary
has evolved dramatically. Come learn about all of the the improvements,
up to and including the re-architecture that has just landed with
Python&amp;nbsp;3.6! The talk will discuss iterable views, the dictionary’s
dedicated comprehension syntax, random key ordering, the special
key-sharing dictionary designed to underlie object collections, and,
most famously of all, the new “compact dictionary” that cuts dictionary
storage substantially — and carries a fascinating side-effect.&lt;/p&gt;
&lt;p&gt;Each new feature that the talk discusses will be motivated by
considering the trade-offs inherent in hash table data structure design,
and followed up with hints about how you can now use the dictionary even
more effectively in your own code!&lt;/p&gt;
</content><category term="PyCon US 2017"></category></entry><entry><title>Welcome to Pycon 2017</title><link href="https://pyvideo.org/pycon-us-2017/welcome-to-pycon-2017.html" rel="alternate"></link><published>2017-05-19T00:00:00+00:00</published><updated>2017-05-19T00:00:00+00:00</updated><author><name>Brandon Rhodes</name></author><id>tag:pyvideo.org,2017-05-19:/pycon-us-2017/welcome-to-pycon-2017.html</id><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Welcome to Pycon 2017&lt;/p&gt;
</content><category term="PyCon US 2017"></category></entry><entry><title>How To Shut Down Tolkien</title><link href="https://pyvideo.org/pygotham-2014/how-to-shut-down-tolkien.html" rel="alternate"></link><published>2014-10-20T00:00:00+00:00</published><updated>2014-10-20T00:00:00+00:00</updated><author><name>Brandon Rhodes</name></author><id>tag:pyvideo.org,2014-10-20:/pygotham-2014/how-to-shut-down-tolkien.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;While Tolkien had friends who could devise ingenious ways to critique
his work without sounding critical, he had others whose remarks were
merciless and direct — to the point that Tolkien simply stopped sharing
new chapters as he wrote The Lord of the Rings. As programmers we share
many of …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;While Tolkien had friends who could devise ingenious ways to critique
his work without sounding critical, he had others whose remarks were
merciless and direct — to the point that Tolkien simply stopped sharing
new chapters as he wrote The Lord of the Rings. As programmers we share
many of the struggles of writers and artists, and we often react just as
badly to critique of our code. From Tolkien’s experience we will draw
lessons about how to make critique generous instead of damaging, and
actionable instead of personal.&lt;/p&gt;
</content><category term="PyGotham 2014"></category></entry><entry><title>Typesetting with Python</title><link href="https://pyvideo.org/pylondinium-2019/typesetting-with-python.html" rel="alternate"></link><published>2019-06-16T00:00:00+00:00</published><updated>2019-06-16T00:00:00+00:00</updated><author><name>Brandon Rhodes</name></author><id>tag:pyvideo.org,2019-06-16:/pylondinium-2019/typesetting-with-python.html</id><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Brandon Rhodes - Typesetting with Python&lt;/p&gt;
</content><category term="PyLondinium 2019"></category><category term="keynote"></category></entry><entry><title>PyOhio 2011: Sunday Lightning Talks</title><link href="https://pyvideo.org/pyohio-2011/pyohio-2011--sunday-lightning-talks.html" rel="alternate"></link><published>2011-07-30T00:00:00+00:00</published><updated>2011-07-30T00:00:00+00:00</updated><author><name>Brandon Rhodes</name></author><id>tag:pyvideo.org,2011-07-30:/pyohio-2011/pyohio-2011--sunday-lightning-talks.html</id><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Sunday Lightning Talks&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;00:00 Brandon Craig Rhodes - Adventure
&lt;a class="reference external" href="https://bitbucket.org/brandon/adventure/overview"&gt;https://bitbucket.org/brandon/adventure/overview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;05:15 Dave M - Followup on the laptop survey&lt;/li&gt;
&lt;li&gt;08:10 Clayton Parker - Vim and ctags&lt;/li&gt;
&lt;li&gt;13:10 Rich Harkins - Bullwinkle - Python tools inspired by
Perl::Moose http://code.google.com/bullwinkle&lt;/li&gt;
&lt;/ul&gt;
</content><category term="PyOhio 2011"></category><category term="lightning talks"></category><category term="adventure"></category><category term="bullwinkle"></category><category term="ctags"></category><category term="pyohio"></category><category term="pyohio2011"></category><category term="vim"></category></entry><entry><title>PyOhio 2011: Names, Objects, and Plummeting From The Cliff</title><link href="https://pyvideo.org/pyohio-2011/pyohio-2011-names-objects-and-plummeting-from.html" rel="alternate"></link><published>2011-07-30T00:00:00+00:00</published><updated>2011-07-30T00:00:00+00:00</updated><author><name>Brandon Rhodes</name></author><id>tag:pyvideo.org,2011-07-30:/pyohio-2011/pyohio-2011-names-objects-and-plummeting-from.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Names, Objects, and Plummeting From The Cliff&lt;/p&gt;
&lt;p&gt;Presented by Brandon Craig Rhodes&lt;/p&gt;
&lt;p&gt;The assignment statement is often the second thing a new Python
programmer learns, right after the &amp;quot;print&amp;quot; statement - but the beginner
can get seriously bogged down in all of the concepts that assignment
involves! Using a simple …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Names, Objects, and Plummeting From The Cliff&lt;/p&gt;
&lt;p&gt;Presented by Brandon Craig Rhodes&lt;/p&gt;
&lt;p&gt;The assignment statement is often the second thing a new Python
programmer learns, right after the &amp;quot;print&amp;quot; statement - but the beginner
can get seriously bogged down in all of the concepts that assignment
involves! Using a simple analogy, this talk will tackle those issues
head-on.&lt;/p&gt;
</content><category term="PyOhio 2011"></category><category term="assignment"></category><category term="learningpython"></category><category term="pyohio"></category><category term="pyohio2011"></category></entry><entry><title>PyOhio 2011: Procedures, Objects, Reusability: "httplib", "urllib2", and Their Discontents</title><link href="https://pyvideo.org/pyohio-2011/pyohio-2011-procedures-objects-reusability-q.html" rel="alternate"></link><published>2011-07-30T00:00:00+00:00</published><updated>2011-07-30T00:00:00+00:00</updated><author><name>Brandon Rhodes</name></author><id>tag:pyvideo.org,2011-07-30:/pyohio-2011/pyohio-2011-procedures-objects-reusability-q.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Procedures, Objects, Reusability: httplib, urllib2 and their discontents&lt;/p&gt;
&lt;p&gt;Presented by Brandon Craig Rhodes&lt;/p&gt;
&lt;p&gt;Python supports two major programming paradigms: procedures, and object
orientation. This talk will claim that, when it comes to code re-use,
these two paradigms are NOT created equal: because object-oriented
programming encourages the programmer to write …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Procedures, Objects, Reusability: httplib, urllib2 and their discontents&lt;/p&gt;
&lt;p&gt;Presented by Brandon Craig Rhodes&lt;/p&gt;
&lt;p&gt;Python supports two major programming paradigms: procedures, and object
orientation. This talk will claim that, when it comes to code re-use,
these two paradigms are NOT created equal: because object-oriented
programming encourages the programmer to write methods that consider
everything else inside of &amp;quot;self&amp;quot; to be fair game, it encourages highly
coupled code that proves brittle when extended.&lt;/p&gt;
</content><category term="PyOhio 2011"></category><category term="codereuse"></category><category term="httplib"></category><category term="oop"></category><category term="programming"></category><category term="pyohio"></category><category term="pyohio2011"></category><category term="reuse"></category><category term="self"></category><category term="urllib2"></category></entry><entry><title>PyOhio 2011: Squinting at Python Objects</title><link href="https://pyvideo.org/pyohio-2011/pyohio-2011-squinting-at-python-objects.html" rel="alternate"></link><published>2011-07-30T00:00:00+00:00</published><updated>2011-07-30T00:00:00+00:00</updated><author><name>Brandon Rhodes</name></author><id>tag:pyvideo.org,2011-07-30:/pyohio-2011/pyohio-2011-squinting-at-python-objects.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Squinting at Python Objects&lt;/p&gt;
&lt;p&gt;Presented by Brandon Craig Rhodes&lt;/p&gt;
&lt;p&gt;Python classes can gain attributes as if by magic. Thanks to properties,
descriptors, and (if all else fails) &lt;strong&gt;getattr&lt;/strong&gt;() and
&lt;strong&gt;getattribute&lt;/strong&gt;(), the attempt to access obj.something can result in
arbitrary code execution. If you are wondering how your Python …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Squinting at Python Objects&lt;/p&gt;
&lt;p&gt;Presented by Brandon Craig Rhodes&lt;/p&gt;
&lt;p&gt;Python classes can gain attributes as if by magic. Thanks to properties,
descriptors, and (if all else fails) &lt;strong&gt;getattr&lt;/strong&gt;() and
&lt;strong&gt;getattribute&lt;/strong&gt;(), the attempt to access obj.something can result in
arbitrary code execution. If you are wondering how your Python program
is using memory, this can result in a problem: each time you look to see
if something is there, it &lt;strong&gt;is&lt;/strong&gt;, because it is pulled in dynamically
the moment you look for it. In this talk, you will learn how to prod
Python objects gently, and hopefully learn their secrets - and their
memory usage - without actually invoking code.&lt;/p&gt;
</content><category term="PyOhio 2011"></category><category term="descriptors"></category><category term="getattr"></category><category term="getattribute"></category><category term="optimizing"></category><category term="properties"></category><category term="pyohio"></category><category term="pyohio2011"></category></entry><entry><title>Python Design Patterns 1</title><link href="https://pyvideo.org/pyohio-2012/python-design-patterns-1.html" rel="alternate"></link><published>2012-07-29T00:00:00+00:00</published><updated>2012-07-29T00:00:00+00:00</updated><author><name>Brandon Rhodes</name></author><id>tag:pyvideo.org,2012-07-29:/pyohio-2012/python-design-patterns-1.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;The Python community has learned a lot about how to use our language
since we started back in the 1990s, and this talk will use simple
one-slide programs to illustrate the crucial refactorings that can help
make a large real-life application far more testable and maintainable
while making its …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;The Python community has learned a lot about how to use our language
since we started back in the 1990s, and this talk will use simple
one-slide programs to illustrate the crucial refactorings that can help
make a large real-life application far more testable and maintainable
while making its code easier to re-use. This will not be a re-hash of
Gang-of-Four refactorings, but specific to Python.&lt;/p&gt;
</content><category term="PyOhio 2012"></category></entry><entry><title>PyOhio 2013 Keynote: Sine Qua Nons</title><link href="https://pyvideo.org/pyohio-2013/keynote-4.html" rel="alternate"></link><published>2013-07-27T00:00:00+00:00</published><updated>2013-07-27T00:00:00+00:00</updated><author><name>Brandon Rhodes</name></author><id>tag:pyvideo.org,2013-07-27:/pyohio-2013/keynote-4.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;What are the key features of a modern dynamic language like Python that
let a programmer make progress even against difficult problems, even on
days when things are not going well? Starting simple and then ramping up
to complex, Brandon takes us from how beginners can use a Python …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;What are the key features of a modern dynamic language like Python that
let a programmer make progress even against difficult problems, even on
days when things are not going well? Starting simple and then ramping up
to complex, Brandon takes us from how beginners can use a Python
dictionary to pair up matching data, to how to use ctypes to work around
limitations in the built-in Python SSL module, as he takes us through
the tools and approaches that for a Python programmer are all part of a
day's work — the features without which we would not be as productive.&lt;/p&gt;
</content><category term="PyOhio 2013"></category><category term="talk"></category></entry><entry><title>The Clean Architecture in Python</title><link href="https://pyvideo.org/pyohio-2014/the-clean-architecture-in-python.html" rel="alternate"></link><published>2014-07-27T00:00:00+00:00</published><updated>2014-07-27T00:00:00+00:00</updated><author><name>Brandon Rhodes</name></author><id>tag:pyvideo.org,2014-07-27:/pyohio-2014/the-clean-architecture-in-python.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Even design-conscious programmers find large applications difficult to
maintain. Come learn about how the recently propounded “Clean
Architecture” applies in Python, and how this high-level design pattern
fits particularly well with the features of the Python language and
answers questions that experienced programmers have been asking. (An
update of …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Even design-conscious programmers find large applications difficult to
maintain. Come learn about how the recently propounded “Clean
Architecture” applies in Python, and how this high-level design pattern
fits particularly well with the features of the Python language and
answers questions that experienced programmers have been asking. (An
update of my un-recorded talk from PyCon Ireland 2013!)&lt;/p&gt;
</content><category term="PyOhio 2014"></category><category term="talk"></category></entry><entry><title>Watch your Python script with strace</title><link href="https://pyvideo.org/pyohio-2014/watch-your-python-script-with-strace.html" rel="alternate"></link><published>2014-07-26T00:00:00+00:00</published><updated>2014-07-26T00:00:00+00:00</updated><author><name>Brandon Rhodes</name></author><id>tag:pyvideo.org,2014-07-26:/pyohio-2014/watch-your-python-script-with-strace.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Modern operating systems sandbox each process inside of a virtual memory
map from which direct I/O operations are generally impossible. Instead,
a process has to ask the operating system every time it wants to modify
a file or communicate bytes over the network. By using operating system
specific …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Modern operating systems sandbox each process inside of a virtual memory
map from which direct I/O operations are generally impossible. Instead,
a process has to ask the operating system every time it wants to modify
a file or communicate bytes over the network. By using operating system
specific tools to watch the system calls a Python script is making --
using &amp;quot;strace&amp;quot; under Linux or &amp;quot;truss&amp;quot; under Mac OS X -- you can study
how a program is behaving and address several different kinds of bugs.&lt;/p&gt;
</content><category term="PyOhio 2014"></category><category term="talk"></category></entry><entry><title>Pandas Dataframes At The Cinema</title><link href="https://pyvideo.org/pyohio-2015/pandas-dataframes-at-the-cinema.html" rel="alternate"></link><published>2015-08-01T00:00:00+00:00</published><updated>2015-08-01T00:00:00+00:00</updated><author><name>Brandon Rhodes</name></author><id>tag:pyvideo.org,2015-08-01:/pyohio-2015/pandas-dataframes-at-the-cinema.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Using data from the Internet Movie Database, students will use the
Pandas data analysis library to search the data and answer questions
about it. This will be a more focused version of the tutorial I gave at
PyCon this year, with an emphasis on demonstrations that get the
students …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Using data from the Internet Movie Database, students will use the
Pandas data analysis library to search the data and answer questions
about it. This will be a more focused version of the tutorial I gave at
PyCon this year, with an emphasis on demonstrations that get the
students ready to go home and work on the several hours' worth of fun
exercises that the full tutorial includes.&lt;/p&gt;
</content><category term="PyOhio 2015"></category><category term="talk"></category></entry><entry><title>Sunday Lightning Talks</title><link href="https://pyvideo.org/pyohio-2016/sunday-lightning-talks.html" rel="alternate"></link><published>2016-07-31T00:00:00+00:00</published><updated>2016-07-31T00:00:00+00:00</updated><author><name>Brandon Rhodes</name></author><id>tag:pyvideo.org,2016-07-31:/pyohio-2016/sunday-lightning-talks.html</id><content type="html"></content><category term="PyOhio 2016"></category><category term="lightning talks"></category></entry><entry><title>Sunday Lightning Talks</title><link href="https://pyvideo.org/pyohio-2018/sunday-lightning-talks.html" rel="alternate"></link><published>2018-07-29T00:00:00+00:00</published><updated>2018-07-29T00:00:00+00:00</updated><author><name>Dave Forgac</name></author><id>tag:pyvideo.org,2018-07-29:/pyohio-2018/sunday-lightning-talks.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Dave Forgac&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://pyohio.org/2018/schedule/presentation/64/"&gt;https://pyohio.org/2018/schedule/presentation/64/&lt;/a&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Extending Python w/ C/C++ - Devyn Spillane&lt;/li&gt;
&lt;li&gt;Even More Significant Whitespace - Tom Fetherston&lt;/li&gt;
&lt;li&gt;Don't Hire Rockstars, Train Idols - Kojo Idrissa&lt;/li&gt;
&lt;li&gt;I Want a Descriptor in my Dataclass - Rick Teachey&lt;/li&gt;
&lt;li&gt;Saving An Animation in Matplotlib - Brandon Rhodes&lt;/li&gt;
&lt;li&gt;fuzzywuzzy String Matching - Ann …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Dave Forgac&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://pyohio.org/2018/schedule/presentation/64/"&gt;https://pyohio.org/2018/schedule/presentation/64/&lt;/a&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Extending Python w/ C/C++ - Devyn Spillane&lt;/li&gt;
&lt;li&gt;Even More Significant Whitespace - Tom Fetherston&lt;/li&gt;
&lt;li&gt;Don't Hire Rockstars, Train Idols - Kojo Idrissa&lt;/li&gt;
&lt;li&gt;I Want a Descriptor in my Dataclass - Rick Teachey&lt;/li&gt;
&lt;li&gt;Saving An Animation in Matplotlib - Brandon Rhodes&lt;/li&gt;
&lt;li&gt;fuzzywuzzy String Matching - Ann Elliott&lt;/li&gt;
&lt;li&gt;PPB: 15 Lines to Takeoff - Piper Thunstrom&lt;/li&gt;
&lt;li&gt;Get Setup with setup.cfg - Andrew Kubera&lt;/li&gt;
&lt;li&gt;Wagtail – Vince Salvino&lt;/li&gt;
&lt;/ul&gt;
</content><category term="PyOhio 2018"></category></entry><entry><title>DAY 1 Keynote - "Walking The Line"</title><link href="https://pyvideo.org/pytexas-2023/day-1-keynote-walking-the-line.html" rel="alternate"></link><published>2023-04-01T00:00:00+00:00</published><updated>2023-04-01T00:00:00+00:00</updated><author><name>Brandon Rhodes</name></author><id>tag:pyvideo.org,2023-04-01:/pytexas-2023/day-1-keynote-walking-the-line.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&amp;quot;Walking The Line&amp;quot;
Brandon draws on more than 20 years of experience with Python and 30 years with Unix to offer effective patterns and practices to the audiences of his talks, writing, and training. His Python Patterns website offers Pythonic alternatives to the design patterns that are necessary in …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&amp;quot;Walking The Line&amp;quot;
Brandon draws on more than 20 years of experience with Python and 30 years with Unix to offer effective patterns and practices to the audiences of his talks, writing, and training. His Python Patterns website offers Pythonic alternatives to the design patterns that are necessary in less flexible languages. He’s the author of both the old PyEphem astronomy library as well its modern alternative Skyfield, along with smaller projects like the elegant little logging_tree module that’s compatible with every Python back to Python 2.3. He is a Fellow of the Python Software Foundation, on whose behalf he served as the volunteer chair of PyCon 2016–2017 in Portland.&lt;/p&gt;
</content><category term="PyTexas 2023"></category></entry><entry><title>Hoist Your I/O</title><link href="https://pyvideo.org/pywaw-summit-2015/hoist-your-io.html" rel="alternate"></link><published>2015-11-02T00:00:00+00:00</published><updated>2015-11-02T00:00:00+00:00</updated><author><name>Brandon Rhodes</name></author><id>tag:pyvideo.org,2015-11-02:/pywaw-summit-2015/hoist-your-io.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Talk: Hoist Your I/O&lt;/p&gt;
&lt;p&gt;Our programs too often leave control decisions stranded in low-level routines, producing tightly coupled systems that make it difficult to re-use code. What are the warning signs of tightly coupled I/O and how can it be corrected? Particular attention will be paid to …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Talk: Hoist Your I/O&lt;/p&gt;
&lt;p&gt;Our programs too often leave control decisions stranded in low-level routines, producing tightly coupled systems that make it difficult to re-use code. What are the warning signs of tightly coupled I/O and how can it be corrected? Particular attention will be paid to the way that modern Python syntax supports a broader array of solutions than were once possible!&lt;/p&gt;
&lt;p&gt;Speaker: Brandon Rhodes. Brandon is a programmer and instructor working at Dropbox, and is excited that this is his third chance to speak at a Python event in Poland.  For 17 years Brandon has maintained the most popular amateur astronomy library for Python, and will be the Chair of PyCon 2016–2017 in Portland, Oregon.&lt;/p&gt;
&lt;p&gt;Slides: &lt;a class="reference external" href="http://rhodesmill.org/brandon/slides/2015-05-pywaw/hoist/"&gt;http://rhodesmill.org/brandon/slides/2015-05-pywaw/hoist/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;License: For reuse of this video under a more permissive license please get in touch with us. The speakers retain the copyright for their performances.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://summit.pywaw.org"&gt;http://summit.pywaw.org&lt;/a&gt;&lt;/p&gt;
</content><category term="PyWaw Summit 2015"></category></entry><entry><title>Stopping to Sharpen Your Tools</title><link href="https://pyvideo.org/pywaw-summit-2015/stopping-to-sharpen-your-tools.html" rel="alternate"></link><published>2015-11-02T00:00:00+00:00</published><updated>2015-11-02T00:00:00+00:00</updated><author><name>Brandon Rhodes</name></author><id>tag:pyvideo.org,2015-11-02:/pywaw-summit-2015/stopping-to-sharpen-your-tools.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Talk: Stopping to Sharpen Your Tools (Keynote)&lt;/p&gt;
&lt;p&gt;Speaker: Brandon Rhodes. Brandon is a programmer and instructor working at Dropbox, and is excited that this is his third chance to speak at a Python event in Poland.  For 17 years Brandon has maintained the most popular amateur astronomy library for …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Talk: Stopping to Sharpen Your Tools (Keynote)&lt;/p&gt;
&lt;p&gt;Speaker: Brandon Rhodes. Brandon is a programmer and instructor working at Dropbox, and is excited that this is his third chance to speak at a Python event in Poland.  For 17 years Brandon has maintained the most popular amateur astronomy library for Python, and will be the Chair of PyCon 2016–2017 in Portland, Oregon.&lt;/p&gt;
&lt;p&gt;Slides: &lt;a class="reference external" href="http://rhodesmill.org/brandon/slides/2015-05-pywaw/keynote/"&gt;http://rhodesmill.org/brandon/slides/2015-05-pywaw/keynote/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;License: For reuse of this video under a more permissive license please get in touch with us. The speakers retain the copyright for their performances.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://summit.pywaw.org"&gt;http://summit.pywaw.org&lt;/a&gt;&lt;/p&gt;
</content><category term="PyWaw Summit 2015"></category></entry></feed>