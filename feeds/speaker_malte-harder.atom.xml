<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_malte-harder.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2018-10-26T00:00:00+00:00</updated><entry><title>Grammar of Graphics in Python</title><link href="https://pyvideo.org/pycon-de-2018/grammar-of-graphics-in-python.html" rel="alternate"></link><published>2018-10-26T00:00:00+00:00</published><updated>2018-10-26T00:00:00+00:00</updated><author><name>Malte Harder</name></author><id>tag:pyvideo.org,2018-10-26:pycon-de-2018/grammar-of-graphics-in-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A grammar is, according to Wikipedia, the set of structural rules
governing the composition of clauses, phrases, and words in any given
natural language. A grammar of graphics is then the set of structural
rules governing the composition of visual elements. Transforming data
into visual representations using composition is quite powerful and
allows to create complex visualisations with simple building blocks.&lt;/p&gt;
&lt;p&gt;While the ideas behind the grammar of graphics date back well into the
80s, as a Python developer it is only quite recently that we can make
use of it. Altair, backed by the vega specification, is one of the few
plotting libraries in Python that provide such a declarative and
compositional API.&lt;/p&gt;
&lt;p&gt;In this talk I will give an introduction to the core concepts behind the
grammar of graphics as well as practical examples how to use altair API
in Python to create vega plots.&lt;/p&gt;
</summary><category term="Visualisation"></category></entry></feed>