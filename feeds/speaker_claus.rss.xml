<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Thu, 26 Oct 2017 14:30:00 +0100</lastBuildDate><item><title>Implementing Custom Containers</title><link>https://pyvideo.org/pycon-uk-2017/implementing-custom-containers.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;One often encounters the following situation(s):&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;I want to represent my data,&lt;/li&gt;
&lt;li&gt;I want to read/write, load/dump or somehow get/save data,&lt;/li&gt;
&lt;li&gt;I want to iterate over data.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Instead of inventing a completely new class that provides required functionality, it may make sense to mimic or subclass an already existing collection, e.g. a dict, add custom dunder (double underscore) methods and quickly end up with a container that not only serves your purpose but is also very natural to use.&lt;/p&gt;
&lt;p&gt;After a short introduction in which we clarify some notions, we focus on two sample use cases:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;How to extend a tuple to represent data?&lt;/li&gt;
&lt;li&gt;How to implement a dict-like container for data handling?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Throughout the talk we will discover some of the most often needed dunder methods that define a container's behaviour.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Claus</dc:creator><pubDate>Thu, 26 Oct 2017 14:30:00 +0100</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-10-26:pycon-uk-2017/implementing-custom-containers.html</guid></item></channel></rss>