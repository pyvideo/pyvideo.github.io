<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Sun, 30 Sep 2012 00:00:00 +0000</lastBuildDate><item><title>Django templates for Web Designers - part1</title><link>https://pyvideo.org/pycon-india-2012/django-templates-for-web-designers-part1.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Django is a high-level Python based web framework that encourages rapid development and clean, pragmatic design.
Django comes with it's very own templating layer, which is not merely python embedded into HTML, but it is a dumb python-like DSL which, by design, keeps programming logic out of the templates and keeps the presentation layer clean.
In this talk we will introduce ourselves to the Django Template Language and cover most of the useful tags and filters. We will also look into how to write custom tags and filters.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shreyank Gupta</dc:creator><pubDate>Sun, 30 Sep 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-09-30:pycon-india-2012/django-templates-for-web-designers-part1.html</guid><category>django templates</category></item><item><title>Django templates for Web Designers - part2</title><link>https://pyvideo.org/pycon-india-2012/django-templates-for-web-designers-part2.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Django is a high-level Python based web framework that encourages rapid development and clean, pragmatic design.
Django comes with it's very own templating layer, which is not merely python embedded into HTML, but it is a dumb python-like DSL which, by design, keeps programming logic out of the templates and keeps the presentation layer clean.
In this talk we will introduce ourselves to the Django Template Language and cover most of the useful tags and filters. We will also look into how to write custom tags and filters.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shreyank Gupta</dc:creator><pubDate>Sun, 30 Sep 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-09-30:pycon-india-2012/django-templates-for-web-designers-part2.html</guid><category>django templates</category></item><item><title>Django templates for Web Designers - part3</title><link>https://pyvideo.org/pycon-india-2012/django-templates-for-web-designers-part3.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Django is a high-level Python based web framework that encourages rapid development and clean, pragmatic design.
Django comes with it's very own templating layer, which is not merely python embedded into HTML, but it is a dumb python-like DSL which, by design, keeps programming logic out of the templates and keeps the presentation layer clean.
In this talk we will introduce ourselves to the Django Template Language and cover most of the useful tags and filters. We will also look into how to write custom tags and filters.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Shreyank Gupta</dc:creator><pubDate>Sun, 30 Sep 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-09-30:pycon-india-2012/django-templates-for-web-designers-part3.html</guid><category>django templates</category></item><item><title>Mobile apps with Python, Quick! - Part 1</title><link>https://pyvideo.org/pycon-india-2012/mobile-apps-with-python-quick-part-1.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;With &amp;quot;mobile first&amp;quot; as vision statement, we harness significant power of using Python and django to produce clean back-ends especially using django-piston as key library.
The Django framework is quite well known. It is a extremely quick and easy way to develop web sites and apps. Backed by strong developer community and wealth of knowledge available online, it is natural first choice for web-development. But in this case, we use it as an excellent web-app back-end which we drive a mobile front-end.
Sencha is fast becoming an important framework for developing mobile apps which runs elegantly on both Android and iPhone. With almost native API like look and feel, it works like a charm on Android and iPhone platform reducing development time dramatically.
I will try to address the classic problem of disconnect between mobile and web-apps. Putting the system of producing both within single development cycle. Using django-piston as center piece library. We will use extensively to create well defined APIs. These APIs will in turn be used with Sencha based front-ends.
Extending further we will take a look at integration testing of this framework towards creating a rock solid mobile experience. This will be followed by discussion on merits of using browser over native app frameworks.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Supreet Sethi</dc:creator><pubDate>Sun, 30 Sep 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-09-30:pycon-india-2012/mobile-apps-with-python-quick-part-1.html</guid><category>mobile</category><category>mobile first</category><category>sencha</category><category>django</category></item><item><title>Mobile apps with Python, Quick! - Part 2</title><link>https://pyvideo.org/pycon-india-2012/mobile-apps-with-python-quick-part-2.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;With &amp;quot;mobile first&amp;quot; as vision statement, we harness significant power of using Python and django to produce clean back-ends especially using django-piston as key library.
The Django framework is quite well known. It is a extremely quick and easy way to develop web sites and apps. Backed by strong developer community and wealth of knowledge available online, it is natural first choice for web-development. But in this case, we use it as an excellent web-app back-end which we drive a mobile front-end.
Sencha is fast becoming an important framework for developing mobile apps which runs elegantly on both Android and iPhone. With almost native API like look and feel, it works like a charm on Android and iPhone platform reducing development time dramatically.
I will try to address the classic problem of disconnect between mobile and web-apps. Putting the system of producing both within single development cycle. Using django-piston as center piece library. We will use extensively to create well defined APIs. These APIs will in turn be used with Sencha based front-ends.
Extending further we will take a look at integration testing of this framework towards creating a rock solid mobile experience. This will be followed by discussion on merits of using browser over native app frameworks.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Supreet Sethi</dc:creator><pubDate>Sun, 30 Sep 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-09-30:pycon-india-2012/mobile-apps-with-python-quick-part-2.html</guid><category>mobile</category><category>mobile first</category><category>sencha</category><category>django</category></item><item><title>Mobile apps with Python, Quick! - Part 3</title><link>https://pyvideo.org/pycon-india-2012/mobile-apps-with-python-quick-part-3.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;With &amp;quot;mobile first&amp;quot; as vision statement, we harness significant power of using Python and django to produce clean back-ends especially using django-piston as key library.
The Django framework is quite well known. It is a extremely quick and easy way to develop web sites and apps. Backed by strong developer community and wealth of knowledge available online, it is natural first choice for web-development. But in this case, we use it as an excellent web-app back-end which we drive a mobile front-end.
Sencha is fast becoming an important framework for developing mobile apps which runs elegantly on both Android and iPhone. With almost native API like look and feel, it works like a charm on Android and iPhone platform reducing development time dramatically.
I will try to address the classic problem of disconnect between mobile and web-apps. Putting the system of producing both within single development cycle. Using django-piston as center piece library. We will use extensively to create well defined APIs. These APIs will in turn be used with Sencha based front-ends.
Extending further we will take a look at integration testing of this framework towards creating a rock solid mobile experience. This will be followed by discussion on merits of using browser over native app frameworks.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Supreet Sethi</dc:creator><pubDate>Sun, 30 Sep 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-09-30:pycon-india-2012/mobile-apps-with-python-quick-part-3.html</guid><category>mobile</category><category>mobile first</category><category>sencha</category><category>django</category></item><item><title>Mobile apps with Python, Quick! - part4</title><link>https://pyvideo.org/pycon-india-2012/mobile-apps-with-python-quick-part4.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;With &amp;quot;mobile first&amp;quot; as vision statement, we harness significant power of using Python and django to produce clean back-ends especially using django-piston as key library.
The Django framework is quite well known. It is a extremely quick and easy way to develop web sites and apps. Backed by strong developer community and wealth of knowledge available online, it is natural first choice for web-development. But in this case, we use it as an excellent web-app back-end which we drive a mobile front-end.
Sencha is fast becoming an important framework for developing mobile apps which runs elegantly on both Android and iPhone. With almost native API like look and feel, it works like a charm on Android and iPhone platform reducing development time dramatically.
I will try to address the classic problem of disconnect between mobile and web-apps. Putting the system of producing both within single development cycle. Using django-piston as center piece library. We will use extensively to create well defined APIs. These APIs will in turn be used with Sencha based front-ends.
Extending further we will take a look at integration testing of this framework towards creating a rock solid mobile experience. This will be followed by discussion on merits of using browser over native app frameworks.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Supreet Sethi</dc:creator><pubDate>Sun, 30 Sep 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-09-30:pycon-india-2012/mobile-apps-with-python-quick-part4.html</guid><category>mobile</category><category>mobile first</category><category>sencha</category><category>django</category></item><item><title>Snakes on the web</title><link>https://pyvideo.org/pycon-india-2012/snakes-on-the-web.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyCon India 2012 Final Day Opening Keynote&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jacob Kaplan-Moss</dc:creator><pubDate>Sun, 30 Sep 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-09-30:pycon-india-2012/snakes-on-the-web.html</guid><category>keynote</category><category>web development</category></item><item><title>Advanced task management with Celery 1/2</title><link>https://pyvideo.org/pycon-india-2012/advanced-task-management-with-celery-12.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Celery is a really good framework for doing background task processing in Python (and other languages). While it is ridiculously easy to use celery, doing complex task flow has been a challenge in celery. (w.r.t task trees/graphs/dependecies etc.)
This talk introduces the audience to these challenges in celery and also explains how these can be fixed programmatically and by using latest features in Celery (3+).&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mahendra M</dc:creator><pubDate>Sat, 29 Sep 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-09-29:pycon-india-2012/advanced-task-management-with-celery-12.html</guid><category>celery</category></item><item><title>Advanced task management with Celery 2/2</title><link>https://pyvideo.org/pycon-india-2012/advanced-task-management-with-celery-22.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Celery is a really good framework for doing background task processing in Python (and other languages). While it is ridiculously easy to use celery, doing complex task flow has been a challenge in celery. (w.r.t task trees/graphs/dependecies etc.)
This talk introduces the audience to these challenges in celery and also explains how these can be fixed programmatically and by using latest features in Celery (3+).&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mahendra M</dc:creator><pubDate>Sat, 29 Sep 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-09-29:pycon-india-2012/advanced-task-management-with-celery-22.html</guid><category>celery</category></item><item><title>Building better APIs</title><link>https://pyvideo.org/pycon-india-2012/building-better-apis.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A lot of web development today deals with creating APIs that can power mobile apps or even pure Javascript web apps. The objective of this talk is, to share best practices and have open conversation about certain practices which are considered controversial.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Hemant Kumar</dc:creator><pubDate>Sat, 29 Sep 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-09-29:pycon-india-2012/building-better-apis.html</guid><category>api design</category></item><item><title>Enaml: Pythonic, toolkit independent, declarative UIs - Part 2</title><link>https://pyvideo.org/pycon-india-2012/enaml-pythonic-toolkit-independent-declarative-uis-part-2.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Enaml is a DSL for writing platform independent, declarative UIs. In a model-view-controller world, Enaml makes it very easy to develop the view and controller. Typically, the model is built with Traits, but it's model is framework agnostic and provides hooks for using custom model frameworks.
The DSL is a strict superset of Python and provides a simple Pythonic syntax for declaring a UI that binds and reacts to changes in the models. Enaml is dynamically executed and it lets you bind to arbitrary Python expressions. It uses a constraint based layout system which makes it possible to have layouts that are not typically possible with traditional UI toolkits. Enaml also supports asynchronous UIs which allow one to have multiple UIs connecting to the same model running in the same process or out of process. This, in theory, opens up the possibility for a web-based UI to be used to control a model.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Puneeth Chaganti</dc:creator><pubDate>Sat, 29 Sep 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-09-29:pycon-india-2012/enaml-pythonic-toolkit-independent-declarative-uis-part-2.html</guid><category>enaml</category><category>dsl</category></item><item><title>Enaml: Pythonic, toolkit independent, declarative UIs - Part 3</title><link>https://pyvideo.org/pycon-india-2012/enaml-pythonic-toolkit-independent-declarative-uis-part-3.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Enaml is a DSL for writing platform independent, declarative UIs. In a model-view-controller world, Enaml makes it very easy to develop the view and controller. Typically, the model is built with Traits, but it's model is framework agnostic and provides hooks for using custom model frameworks.
The DSL is a strict superset of Python and provides a simple Pythonic syntax for declaring a UI that binds and reacts to changes in the models. Enaml is dynamically executed and it lets you bind to arbitrary Python expressions. It uses a constraint based layout system which makes it possible to have layouts that are not typically possible with traditional UI toolkits. Enaml also supports asynchronous UIs which allow one to have multiple UIs connecting to the same model running in the same process or out of process. This, in theory, opens up the possibility for a web-based UI to be used to control a model.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Puneeth Chaganti</dc:creator><pubDate>Sat, 29 Sep 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-09-29:pycon-india-2012/enaml-pythonic-toolkit-independent-declarative-uis-part-3.html</guid><category>enaml</category><category>dsl</category></item><item><title>Highlights of Python 3.3</title><link>https://pyvideo.org/pycon-india-2012/highlights-of-python-33.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This will be a review session, covering some of the interesting features in Python 3.3.
For the benefit of attendees that are still primarily using Python 2.x, the presentation will also cover a few of the key advantages of the Python 3.x series that aren't available in Python 2.7 or as backports on the Python Package Index.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nick Coghlan</dc:creator><pubDate>Sat, 29 Sep 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-09-29:pycon-india-2012/highlights-of-python-33.html</guid><category>python 3.3</category><category>python3</category><category>python33</category></item><item><title>Powerful building blocks for application development in Python - 1/3</title><link>https://pyvideo.org/pycon-india-2012/powerful-building-blocks-for-application-development-in-python-13.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Enthought has contributed several powerful open source packages to the Python community. Some of these packages are bundled together to form “The Enthought Tool Suite” or ETS. While ETS is best known in scientific computing circles, these tools are general purpose and can be used for a variety of applications In this talk we provide an overview of ETS. We provide an overview of the functionality and benefits of using some of the core ETS packages namely, Traits, TraitsUI, Chaco, Mayavi and Envisage. We will provide examples of these packages and highlight the benefits of using the ETS.
Enthought is also working on a new Pythonic, toolkit-independent, declarative DSL to build GUIs called Enaml. We will take a sneak peek at some of Enaml’s features.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Prabhu Ramachandran</dc:creator><pubDate>Sat, 29 Sep 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-09-29:pycon-india-2012/powerful-building-blocks-for-application-development-in-python-13.html</guid><category>enthought</category><category>ets</category><category>dsl</category><category>enaml</category></item><item><title>Powerful building blocks for application development in Python - 2/3</title><link>https://pyvideo.org/pycon-india-2012/powerful-building-blocks-for-application-development-in-python-23.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Enthought has contributed several powerful open source packages to the Python community. Some of these packages are bundled together to form “The Enthought Tool Suite” or ETS. While ETS is best known in scientific computing circles, these tools are general purpose and can be used for a variety of applications In this talk we provide an overview of ETS. We provide an overview of the functionality and benefits of using some of the core ETS packages namely, Traits, TraitsUI, Chaco, Mayavi and Envisage. We will provide examples of these packages and highlight the benefits of using the ETS.
Enthought is also working on a new Pythonic, toolkit-independent, declarative DSL to build GUIs called Enaml. We will take a sneak peek at some of Enaml’s features.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Prabhu Ramachandran</dc:creator><pubDate>Sat, 29 Sep 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-09-29:pycon-india-2012/powerful-building-blocks-for-application-development-in-python-23.html</guid><category>enthought</category><category>ets</category><category>dsl</category><category>enaml</category></item><item><title>Powerful building blocks for application development in Python - 3/3</title><link>https://pyvideo.org/pycon-india-2012/powerful-building-blocks-for-application-development-in-python-33.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Enthought has contributed several powerful open source packages to the Python community. Some of these packages are bundled together to form “The Enthought Tool Suite” or ETS. While ETS is best known in scientific computing circles, these tools are general purpose and can be used for a variety of applications In this talk we provide an overview of ETS. We provide an overview of the functionality and benefits of using some of the core ETS packages namely, Traits, TraitsUI, Chaco, Mayavi and Envisage. We will provide examples of these packages and highlight the benefits of using the ETS.
Enthought is also working on a new Pythonic, toolkit-independent, declarative DSL to build GUIs called Enaml. We will take a sneak peek at some of Enaml’s features.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Prabhu Ramachandran</dc:creator><pubDate>Sat, 29 Sep 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-09-29:pycon-india-2012/powerful-building-blocks-for-application-development-in-python-33.html</guid><category>enthought</category><category>ets</category><category>dsl</category><category>enaml</category></item><item><title>Rewriting the Wayback machine's live web proxy in Python</title><link>https://pyvideo.org/pycon-india-2012/rewriting-the-wayback-machines-live-web-proxy-in-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The wayback machine is a high traffic website that has been online for over a decade. It was a mostly Java application. One component of the application is the Liveweb proxy. This is an HTTP proxy that archives a resource which is requested through it and the core data source for the wayback machine.
The liveweb proxy was rearchitected from scratch in Python and deployed on the actual website and has been running for a few months now without a single hitch. There were limitations in the standard library which needed to be worked around, careful tuning of parameters to balance disk I/O and memory usage, fine details of the HTTP protocol that needed to be understood and respected.
This talk discusses the architecture and design of the new system to handle the kind of traffic and patterns which are expected of an archiving proxy and how it was deployed.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Noufal Ibrahim</dc:creator><pubDate>Sat, 29 Sep 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-09-29:pycon-india-2012/rewriting-the-wayback-machines-live-web-proxy-in-python.html</guid><category>wayback machine</category><category>liveweb</category><category>http</category></item><item><title>00074</title><link>https://pyvideo.org/pycon-india-2012/00074.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Unknown</dc:creator><pubDate>Fri, 28 Sep 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-09-28:pycon-india-2012/00074.html</guid></item><item><title>00075</title><link>https://pyvideo.org/pycon-india-2012/00075.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Unknown</dc:creator><pubDate>Fri, 28 Sep 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-09-28:pycon-india-2012/00075.html</guid></item><item><title>00076</title><link>https://pyvideo.org/pycon-india-2012/00076.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Unknown</dc:creator><pubDate>Fri, 28 Sep 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-09-28:pycon-india-2012/00076.html</guid></item><item><title>Build your own IVR - Part1</title><link>https://pyvideo.org/pycon-india-2012/build-your-own-ivr-part1.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Participants attending the tutorial will get to know the basics of Asterisk and Python to build their own simple IVR System. They will also learn to develop a Web Interface to access/modify the IVR using Django.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Piyush Aggarwal</dc:creator><pubDate>Fri, 28 Sep 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-09-28:pycon-india-2012/build-your-own-ivr-part1.html</guid><category>ivr</category></item><item><title>Build your own IVR - part2</title><link>https://pyvideo.org/pycon-india-2012/build-your-own-ivr-part2.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Participants attending the tutorial will get to know the basics of Asterisk and Python to build their own simple IVR System. They will also learn to develop a Web Interface to access/modify the IVR using Django.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Piyush Aggarwal</dc:creator><pubDate>Fri, 28 Sep 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-09-28:pycon-india-2012/build-your-own-ivr-part2.html</guid><category>ivr</category></item><item><title>Build your own IVR - part3</title><link>https://pyvideo.org/pycon-india-2012/build-your-own-ivr-part3.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Participants attending the tutorial will get to know the basics of Asterisk and Python to build their own simple IVR System. They will also learn to develop a Web Interface to access/modify the IVR using Django.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Piyush Aggarwal</dc:creator><pubDate>Fri, 28 Sep 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-09-28:pycon-india-2012/build-your-own-ivr-part3.html</guid><category>ivr</category></item><item><title>Build your own IVR - part4</title><link>https://pyvideo.org/pycon-india-2012/build-your-own-ivr-part4.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Participants attending the tutorial will get to know the basics of Asterisk and Python to build their own simple IVR System. They will also learn to develop a Web Interface to access/modify the IVR using Django.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Piyush Aggarwal</dc:creator><pubDate>Fri, 28 Sep 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-09-28:pycon-india-2012/build-your-own-ivr-part4.html</guid><category>ivr</category></item><item><title>Build your own IVR - part5</title><link>https://pyvideo.org/pycon-india-2012/build-your-own-ivr-part5.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Participants attending the tutorial will get to know the basics of Asterisk and Python to build their own simple IVR System. They will also learn to develop a Web Interface to access/modify the IVR using Django.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Piyush Aggarwal</dc:creator><pubDate>Fri, 28 Sep 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-09-28:pycon-india-2012/build-your-own-ivr-part5.html</guid><category>ivr</category></item><item><title>Build your own IVR - part6</title><link>https://pyvideo.org/pycon-india-2012/build-your-own-ivr-part6.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Participants attending the tutorial will get to know the basics of Asterisk and Python to build their own simple IVR System. They will also learn to develop a Web Interface to access/modify the IVR using Django.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Piyush Aggarwal</dc:creator><pubDate>Fri, 28 Sep 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-09-28:pycon-india-2012/build-your-own-ivr-part6.html</guid><category>ivr</category></item><item><title>Build your own IVR - part7</title><link>https://pyvideo.org/pycon-india-2012/build-your-own-ivr-part7.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Participants attending the tutorial will get to know the basics of Asterisk and Python to build their own simple IVR System. They will also learn to develop a Web Interface to access/modify the IVR using Django.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Piyush Aggarwal</dc:creator><pubDate>Fri, 28 Sep 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-09-28:pycon-india-2012/build-your-own-ivr-part7.html</guid><category>ivr</category></item><item><title>Opening Keynote</title><link>https://pyvideo.org/pycon-india-2012/opening-keynote.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyCon India 2012 Opening Keynote&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">David Mertz</dc:creator><pubDate>Fri, 28 Sep 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-09-28:pycon-india-2012/opening-keynote.html</guid><category>keynote</category><category>psf</category><category>python software foundation</category><category>voting systems</category><category>election systems</category></item><item><title>Solving Puzzles with Python - (1/3)</title><link>https://pyvideo.org/pycon-india-2012/solving-puzzles-with-python-13.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Solving puzzles is fun. Writing programs to solve puzzles is even more fun. Doing it is not so trivial. It requires choosing right data structures, algorithms and a bit of smartness.
This tutorial presents Python's powerful constructs like list comprehensions, generators, generator expressions and ideas from functional programming world to write programs to solve puzzles.
I'm planning to cover:
-8 queens puzzle
-sudoku
-and more if time permits&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Anand Chitipothu</dc:creator><pubDate>Fri, 28 Sep 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-09-28:pycon-india-2012/solving-puzzles-with-python-13.html</guid><category>sudoku</category><category>tower of hannoi</category><category>recursion</category><category>puzzles</category></item><item><title>Solving Puzzles with Python - Anand Chitipothu (2/3)</title><link>https://pyvideo.org/pycon-india-2012/solving-puzzles-with-python-anand-chitipothu-23.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Solving puzzles is fun. Writing programs to solve puzzles is even more fun. Doing it is not so trivial. It requires choosing right data structures, algorithms and a bit of smartness.
This tutorial presents Python's powerful constructs like list comprehensions, generators, generator expressions and ideas from functional programming world to write programs to solve puzzles.
I'm planning to cover:
-8 queens puzzle
-sudoku
-and more if time permits&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Anand Chitipothu</dc:creator><pubDate>Fri, 28 Sep 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-09-28:pycon-india-2012/solving-puzzles-with-python-anand-chitipothu-23.html</guid><category>sudoku</category><category>tower of hannoi</category><category>recursion</category><category>puzzles</category></item><item><title>Solving Puzzles with Python - Anand Chitipothu (3/3)</title><link>https://pyvideo.org/pycon-india-2012/solving-puzzles-with-python-anand-chitipothu-33.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Solving puzzles is fun. Writing programs to solve puzzles is even more fun. Doing it is not so trivial. It requires choosing right data structures, algorithms and a bit of smartness.
This tutorial presents Python's powerful constructs like list comprehensions, generators, generator expressions and ideas from functional programming world to write programs to solve puzzles.
I'm planning to cover:
-8 queens puzzle
-sudoku
-and more if time permits&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Anand Chitipothu</dc:creator><pubDate>Fri, 28 Sep 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-09-28:pycon-india-2012/solving-puzzles-with-python-anand-chitipothu-33.html</guid><category>sudoku</category><category>tower of hannoi</category><category>recursion</category><category>puzzles</category></item></channel></rss>