<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/event_pycon-us-2015.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2015-04-16T00:00:00+00:00</updated><entry><title>Keynote - Gabriella Coleman</title><link href="https://pyvideo.org/pycon-us-2015/keynote-gabriella-coleman.html" rel="alternate"></link><published>2015-04-16T00:00:00+00:00</published><updated>2015-04-16T00:00:00+00:00</updated><author><name>Gabriella Coleman</name></author><id>tag:pyvideo.org,2015-04-16:pycon-us-2015/keynote-gabriella-coleman.html</id><summary type="html"></summary></entry><entry><title>Keynote - Guido van Rossum</title><link href="https://pyvideo.org/pycon-us-2015/keynote-guido-van-rossum-1.html" rel="alternate"></link><published>2015-04-16T00:00:00+00:00</published><updated>2015-04-16T00:00:00+00:00</updated><author><name>Guido van Rossum</name></author><id>tag:pyvideo.org,2015-04-16:pycon-us-2015/keynote-guido-van-rossum-1.html</id><summary type="html"></summary></entry><entry><title>A Winning Strategy with The Weakest Link: how to use weak references to make your code more robust</title><link href="https://pyvideo.org/pycon-us-2015/a-winning-strategy-with-the-weakest-link-how-to.html" rel="alternate"></link><published>2015-04-12T00:00:00+00:00</published><updated>2015-04-12T00:00:00+00:00</updated><author><name>Jim Baker</name></author><id>tag:pyvideo.org,2015-04-12:pycon-us-2015/a-winning-strategy-with-the-weakest-link-how-to.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Working with weak references should not just be for Python wizards.
Whether you have a cache, memoizing a function, tracking objects, or
various other bookkeeping needs, you definitely do not want code leaking
memory or resources. In this talk, we will look at illuminating examples
drawn from a variety of sources on how to use weak references to prevent
such bugs.&lt;/p&gt;
</summary></entry><entry><title>Achieving Continuous Delivery: An Automation Story</title><link href="https://pyvideo.org/pycon-us-2015/achieving-continuous-delivery-an-automation-stor.html" rel="alternate"></link><published>2015-04-12T00:00:00+00:00</published><updated>2015-04-12T00:00:00+00:00</updated><author><name>James Cammarata</name></author><id>tag:pyvideo.org,2015-04-12:pycon-us-2015/achieving-continuous-delivery-an-automation-stor.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Continuos Deployment is the act of deploying software constantly. The
idea is if &amp;quot;&amp;quot;release early, release often&amp;quot;&amp;quot; is good, releasing very
often is better. It's not trivial. Automation is part of the battle, and
testing is another. Learn to use tools like Jenkins and Ansible to move
from deploying software once a month to 15 times every hour, and why
you'll want to.&lt;/p&gt;
</summary></entry><entry><title>Avoiding Burnout, and other essentials of Open Source Self-Care</title><link href="https://pyvideo.org/pycon-us-2015/avoiding-burnout-and-other-essentials-of-open-so.html" rel="alternate"></link><published>2015-04-12T00:00:00+00:00</published><updated>2015-04-12T00:00:00+00:00</updated><author><name>Kathleen Danielson</name></author><id>tag:pyvideo.org,2015-04-12:pycon-us-2015/avoiding-burnout-and-other-essentials-of-open-so.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;As technical community managers we are faced with a unique set of
challenges. We do it because we love our communities, but we also are
often guilty of neglecting our own very real needs in order to serve
those communities. We end up feeling guilty, run down, inadequate, and
ultimately burnt out.&lt;/p&gt;
</summary></entry><entry><title>Beyond grep: Practical Logging and Metrics</title><link href="https://pyvideo.org/pycon-us-2015/beyond-grep-practical-logging-and-metrics.html" rel="alternate"></link><published>2015-04-12T00:00:00+00:00</published><updated>2015-04-12T00:00:00+00:00</updated><author><name>Hynek Schlawack</name></author><id>tag:pyvideo.org,2015-04-12:pycon-us-2015/beyond-grep-practical-logging-and-metrics.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Your Python server applications are running but you’re wondering what
they are doing? Your only clue about their current state is the server
load? Let’s have stroll through the landscape of logging and metrics so
you’ll find the perfect fit for your use cases!&lt;/p&gt;
</summary></entry><entry><title>Build and test wheel packages on Linux, OSX &amp; Windows</title><link href="https://pyvideo.org/pycon-us-2015/build-and-test-wheel-packages-on-linux-osx-win.html" rel="alternate"></link><published>2015-04-12T00:00:00+00:00</published><updated>2015-04-12T00:00:00+00:00</updated><author><name>Olivier Grisel</name></author><id>tag:pyvideo.org,2015-04-12:pycon-us-2015/build-and-test-wheel-packages-on-linux-osx-win.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Practical guide to build and test wheel packages for all platforms using
free Continuous Integration services such as Travis CI (Linux and OSX)
and AppVeyor (Windows).&lt;/p&gt;
</summary></entry><entry><title>Bytes in the Machine: Inside the CPython interpreter</title><link href="https://pyvideo.org/pycon-us-2015/bytes-in-the-machine-inside-the-cpython-interpre.html" rel="alternate"></link><published>2015-04-12T00:00:00+00:00</published><updated>2015-04-12T00:00:00+00:00</updated><author><name>Allison Kaptur</name></author><id>tag:pyvideo.org,2015-04-12:pycon-us-2015/bytes-in-the-machine-inside-the-cpython-interpre.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Have you ever wondered how the CPython interpreter works? Do you know
where to find a 1,500 line switch statement in CPython? I'll talk about
the structure of the interpreter that we all use every day by explaining
how Ned Batchelder and I chased down a mysterious bug in Byterun, a
Python interpreter written in Python. We'll also see visualizations of
the VM as it executes your code.&lt;/p&gt;
</summary></entry><entry><title>Choose Your Own WSGI Deployment Adventure</title><link href="https://pyvideo.org/pycon-us-2015/choose-your-own-wsgi-deployment-adventure.html" rel="alternate"></link><published>2015-04-12T00:00:00+00:00</published><updated>2015-04-12T00:00:00+00:00</updated><author><name>Kate Heddleston</name></author><id>tag:pyvideo.org,2015-04-12:pycon-us-2015/choose-your-own-wsgi-deployment-adventure.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;From servers and proxies to configuration management, the Web Server
Gateway Interface (WSGI) deployment ecosystem is complicated for new
developers. This choose your own adventure talk contains decision points
for the audience to choose topics via text and email votes. Each choice
leads down a separate path to explain different confusing WSGI subjects.
Bring your phone or laptop to participate!&lt;/p&gt;
</summary></entry><entry><title>Closing Messages</title><link href="https://pyvideo.org/pycon-us-2015/closing-messages.html" rel="alternate"></link><published>2015-04-12T00:00:00+00:00</published><updated>2015-04-12T00:00:00+00:00</updated><author><name>Brandon Rhodes</name></author><id>tag:pyvideo.org,2015-04-12:pycon-us-2015/closing-messages.html</id><summary type="html"></summary></entry><entry><title>Cutting Off the Internet: Testing Applications that Use Requests</title><link href="https://pyvideo.org/pycon-us-2015/cutting-off-the-internet-testing-applications-th.html" rel="alternate"></link><published>2015-04-12T00:00:00+00:00</published><updated>2015-04-12T00:00:00+00:00</updated><author><name>Ian Cordasco</name></author><id>tag:pyvideo.org,2015-04-12:pycon-us-2015/cutting-off-the-internet-testing-applications-th.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A brief and opinionated view of testing applications and libraries that
use requests by a core-developer of requests. You will receive an
overview of testing with responses, vcr, httpretty, mock, and betamax.&lt;/p&gt;
</summary></entry><entry><title>Describing Descriptors</title><link href="https://pyvideo.org/pycon-us-2015/describing-descriptors.html" rel="alternate"></link><published>2015-04-12T00:00:00+00:00</published><updated>2015-04-12T00:00:00+00:00</updated><author><name>Laura Rupprecht</name></author><id>tag:pyvideo.org,2015-04-12:pycon-us-2015/describing-descriptors.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The Python library uses descriptors frequently, but most developers
overlook this feature. This talk will cover what a descriptor is, the
current uses in the standard library, and how custom descriptors can be
used in a developer’s toolset to eliminate repeated code.&lt;/p&gt;
</summary></entry><entry><title>Eventually Correct: Testing Async Apps</title><link href="https://pyvideo.org/pycon-us-2015/eventually-correct-testing-async-apps.html" rel="alternate"></link><published>2015-04-12T00:00:00+00:00</published><updated>2015-04-12T00:00:00+00:00</updated><author><name>A. Jesse Jiryu Davis</name></author><id>tag:pyvideo.org,2015-04-12:pycon-us-2015/eventually-correct-testing-async-apps.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Async frameworks like Tornado and asyncio scramble our usual strategies
for writing sequential code. This is most problematic when writing
tests: how can you validate the outcome when you don’t know when to
expect it? This talk introduces you to methods and practices for
unittesting async applications.&lt;/p&gt;
</summary></entry><entry><title>Exploring is never boring: understanding CPython without reading the code</title><link href="https://pyvideo.org/pycon-us-2015/exploring-is-never-boring-understanding-cpython.html" rel="alternate"></link><published>2015-04-12T00:00:00+00:00</published><updated>2015-04-12T00:00:00+00:00</updated><author><name>Allison Kaptur</name></author><id>tag:pyvideo.org,2015-04-12:pycon-us-2015/exploring-is-never-boring-understanding-cpython.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Have you started to read the source code of CPython but not gotten as
far as you wanted? Maybe you want to understand more about CPython but
don't know where to begin. I'll present a number of strategies for
getting more familiar with Python under the hood that go beyond &amp;quot;&amp;quot;just
read it!&amp;quot;&amp;quot; This talk isn't about contributing - it's about getting into
the code base and discovering interesting things.&lt;/p&gt;
</summary></entry><entry><title>Finding Spammers &amp; Scammers through Rate Tracking with Python &amp; Redis</title><link href="https://pyvideo.org/pycon-us-2015/finding-spammers-scammers-through-rate-tracking.html" rel="alternate"></link><published>2015-04-12T00:00:00+00:00</published><updated>2015-04-12T00:00:00+00:00</updated><author><name>Jay Chan</name></author><id>tag:pyvideo.org,2015-04-12:pycon-us-2015/finding-spammers-scammers-through-rate-tracking.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk provides an introduction to rate tracking as well as an
explanation of a particularly cool way to implement it. You will learn
what rate tracking is, why you would want to do it, and then how you can
use build a Redis-backed “velocity engine” in Python to do just that.&lt;/p&gt;
</summary></entry><entry><title>Free Software, Free People</title><link href="https://pyvideo.org/pycon-us-2015/free-software-free-people.html" rel="alternate"></link><published>2015-04-12T00:00:00+00:00</published><updated>2015-04-12T00:00:00+00:00</updated><author><name>Pete Fein</name></author><id>tag:pyvideo.org,2015-04-12:pycon-us-2015/free-software-free-people.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Four years after the Arab Spring &amp;amp; 2 years after Snowden, little has
changed. What now? This talk will remember Telecomix, an ad-hoc activist
cluster that supported free communication around the world. Stories of
humans and machines, reflection on 3 years of hacktivism &amp;amp; exploration
of similarities to the free software community. It follows a 2011 Pycon
lightning talk given after Tahrir Square.&lt;/p&gt;
</summary></entry><entry><title>Getting to Jython 2.7 and beyond</title><link href="https://pyvideo.org/pycon-us-2015/getting-to-jython-27-and-beyond.html" rel="alternate"></link><published>2015-04-12T00:00:00+00:00</published><updated>2015-04-12T00:00:00+00:00</updated><author><name>Jim Baker</name></author><id>tag:pyvideo.org,2015-04-12:pycon-us-2015/getting-to-jython-27-and-beyond.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;So how did we get to Jython 2.7 anyway? And what are our future plans?
In this talk, you will get a taste of how Jython works, some new
functionality, and especially how Jython leverages both Python and Java
to provide a very compatible solution.&lt;/p&gt;
</summary></entry><entry><title>Graph Database Patterns in Python</title><link href="https://pyvideo.org/pycon-us-2015/graph-database-patterns-in-python.html" rel="alternate"></link><published>2015-04-12T00:00:00+00:00</published><updated>2015-04-12T00:00:00+00:00</updated><author><name>Elizabeth Ramirez</name></author><id>tag:pyvideo.org,2015-04-12:pycon-us-2015/graph-database-patterns-in-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Creating and using models from a graph database can be quite different
to the ones used for row/column/document-oriented databases, in the
sense that the same query patterns could differ significantly in
structure and performance. This session will present how to create
models in Python for Titan property graphs, that allow you to manipulate
graphs as if you were querying with Gremlin DSL.&lt;/p&gt;
</summary></entry><entry><title>Gradual Typing for Python 3</title><link href="https://pyvideo.org/pycon-us-2015/guido-van-rossum.html" rel="alternate"></link><published>2015-04-12T00:00:00+00:00</published><updated>2015-04-12T00:00:00+00:00</updated><author><name>Guido van Rossum</name></author><id>tag:pyvideo.org,2015-04-12:pycon-us-2015/guido-van-rossum.html</id><summary type="html"></summary></entry><entry><title>Hash Functions and You: Partners in Freedom</title><link href="https://pyvideo.org/pycon-us-2015/hash-functions-and-you-partners-in-freedom.html" rel="alternate"></link><published>2015-04-12T00:00:00+00:00</published><updated>2015-04-12T00:00:00+00:00</updated><author><name>Curtis Lassam</name></author><id>tag:pyvideo.org,2015-04-12:pycon-us-2015/hash-functions-and-you-partners-in-freedom.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Our trusty friend, the hash function, is as crucial to programming as
linked lists or recursion, but it doesn't always get the press that it
deserves.&lt;/p&gt;
&lt;p&gt;We're going to talk about hash functions, some data structures involving
hash functions, the stately bloom filter, and the security implications
of password hashing.&lt;/p&gt;
</summary></entry><entry><title>Improve your development environments with virtualization</title><link href="https://pyvideo.org/pycon-us-2015/improve-your-development-environments-with-virtua.html" rel="alternate"></link><published>2015-04-12T00:00:00+00:00</published><updated>2015-04-12T00:00:00+00:00</updated><author><name>Luke Sneeringer</name></author><id>tag:pyvideo.org,2015-04-12:pycon-us-2015/improve-your-development-environments-with-virtua.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A talk on how to employ virtualization to make development easier, more
portable, and have it more closely adhere to production environments.&lt;/p&gt;
</summary></entry><entry><title>Interactive data for the web</title><link href="https://pyvideo.org/pycon-us-2015/interactive-data-for-the-web.html" rel="alternate"></link><published>2015-04-12T00:00:00+00:00</published><updated>2015-04-12T00:00:00+00:00</updated><author><name>Sarah Bird</name></author><id>tag:pyvideo.org,2015-04-12:pycon-us-2015/interactive-data-for-the-web.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Interactive data visualization libraries are mostly a JavaScript
stronghold. The new Python library, Bokeh, provides a simple, clean way
to make more shiny things. Although it comes from the data science
community, it has a lot to offer web developers. For a visualization you
might have built in d3.js, I'll show how to build it in Bokeh, how to
test it, and how to hook it into your web app.&lt;/p&gt;
</summary></entry><entry><title>Introduction to game programming with Kivy</title><link href="https://pyvideo.org/pycon-us-2015/introduction-to-game-programming-with-kivy.html" rel="alternate"></link><published>2015-04-12T00:00:00+00:00</published><updated>2015-04-12T00:00:00+00:00</updated><author><name>Richard Jones</name></author><id>tag:pyvideo.org,2015-04-12:pycon-us-2015/introduction-to-game-programming-with-kivy.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This tutorial will walk the attendees through development of a simple
game using Kivy with time left over for some experimentation and
exploration of different types of games.&lt;/p&gt;
</summary><category term="kivy"></category></entry><entry><title>Introduction to Spark with python</title><link href="https://pyvideo.org/pycon-us-2015/introduction-to-spark-with-python.html" rel="alternate"></link><published>2015-04-12T00:00:00+00:00</published><updated>2015-04-12T00:00:00+00:00</updated><author><name>Orlando Karam</name></author><id>tag:pyvideo.org,2015-04-12:pycon-us-2015/introduction-to-spark-with-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this tutorial we will cover the basics of writing spark programs in
python (initially from the pyspark shell, later with independent
applications). We will also discuss some of the theory behind spark, and
some performance considerations when using spark in a cluster.&lt;/p&gt;
</summary></entry><entry><title>Keynote - Jacob Kaplan-Moss</title><link href="https://pyvideo.org/pycon-us-2015/keynote-jacob-kaplan-moss-0.html" rel="alternate"></link><published>2015-04-12T00:00:00+00:00</published><updated>2015-04-12T00:00:00+00:00</updated><author><name>Jacob Kaplan-Moss</name></author><id>tag:pyvideo.org,2015-04-12:pycon-us-2015/keynote-jacob-kaplan-moss-0.html</id><summary type="html"></summary></entry><entry><title>Keynote - Van Lindberg - Pycon 2015</title><link href="https://pyvideo.org/pycon-us-2015/keynote-van-lindberg-pycon-2015.html" rel="alternate"></link><published>2015-04-12T00:00:00+00:00</published><updated>2015-04-12T00:00:00+00:00</updated><author><name>Van Lindberg</name></author><id>tag:pyvideo.org,2015-04-12:pycon-us-2015/keynote-van-lindberg-pycon-2015.html</id><summary type="html"></summary></entry><entry><title>Lessons learned with asyncio ("Look ma, I wrote a distributed hash table!")</title><link href="https://pyvideo.org/pycon-us-2015/lessons-learned-with-asyncio-look-ma-i-wrote-a.html" rel="alternate"></link><published>2015-04-12T00:00:00+00:00</published><updated>2015-04-12T00:00:00+00:00</updated><author><name>Nicholas Tollervey</name></author><id>tag:pyvideo.org,2015-04-12:pycon-us-2015/lessons-learned-with-asyncio-look-ma-i-wrote-a.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk introduces the asyncio module. I'll cover what it's for, how
it works and describe how I used it to write a real-world networked
application (a distributed hash table). We'll explore the event loop,
co-routines, futures and networking with examples from my code. This
won't be an exhaustive exposition. Rather, attendees will grasp enough
of asyncio to continue with their own studies.&lt;/p&gt;
</summary></entry><entry><title>Lightning Talks - April 11th 17h30</title><link href="https://pyvideo.org/pycon-us-2015/lighting-talks-april-11th-17h30.html" rel="alternate"></link><published>2015-04-12T00:00:00+00:00</published><updated>2015-04-12T00:00:00+00:00</updated><author><name>Various speakers</name></author><id>tag:pyvideo.org,2015-04-12:pycon-us-2015/lighting-talks-april-11th-17h30.html</id><summary type="html"></summary><category term="lightning talks"></category></entry><entry><title>Lightning Talks - April 12th 08h30</title><link href="https://pyvideo.org/pycon-us-2015/lighting-talks-april-12th-08h30.html" rel="alternate"></link><published>2015-04-12T00:00:00+00:00</published><updated>2015-04-12T00:00:00+00:00</updated><author><name>Various speakers</name></author><id>tag:pyvideo.org,2015-04-12:pycon-us-2015/lighting-talks-april-12th-08h30.html</id><summary type="html"></summary><category term="lightning talks"></category></entry><entry><title>Machine Learning with Scikit-Learn (II)</title><link href="https://pyvideo.org/pycon-us-2015/machine-learning-with-scikit-learn-ii.html" rel="alternate"></link><published>2015-04-12T00:00:00+00:00</published><updated>2015-04-12T00:00:00+00:00</updated><author><name>Olivier Grisel</name></author><id>tag:pyvideo.org,2015-04-12:pycon-us-2015/machine-learning-with-scikit-learn-ii.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This tutorial will offer an overview of common usage and methodological
patterns when using Scikit-Learn to build predictive models. In
particular we will highlight common strategies to deal with data with
heterogeneously typed attributes with pandas dataframes, model
evaluation and tuning. Finally if time permits we will explore the
specificities of working with textual data.&lt;/p&gt;
</summary></entry><entry><title>Make web development awesome with visual diffing tools</title><link href="https://pyvideo.org/pycon-us-2015/make-web-development-awesome-with-visual-diffing.html" rel="alternate"></link><published>2015-04-12T00:00:00+00:00</published><updated>2015-04-12T00:00:00+00:00</updated><author><name>Daniel Vanderkam</name></author><id>tag:pyvideo.org,2015-04-12:pycon-us-2015/make-web-development-awesome-with-visual-diffing.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Visual diffs are a great way to check for regressions on web sites which
may be missed by unit tests. In this talk you'll learn how to run
end-to-end tests on your client and server web libraries using a tool
called dpxdt. I'll also show how you can combine it with web-based diff
tools like &amp;quot;&amp;quot;git webdiff&amp;quot;&amp;quot; to quickly and confidently iterate on web
tools.&lt;/p&gt;
</summary></entry><entry><title>Making Beautiful Graphs in Python and Sharing Them</title><link href="https://pyvideo.org/pycon-us-2015/making-beautiful-graphs-in-python-and-sharing-the.html" rel="alternate"></link><published>2015-04-12T00:00:00+00:00</published><updated>2015-04-12T00:00:00+00:00</updated><author><name>Andrew Seier</name></author><id>tag:pyvideo.org,2015-04-12:pycon-us-2015/making-beautiful-graphs-in-python-and-sharing-the.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;From Python basics to NYT-quality graphics, we walk through workflows to
make beautiful, shareable data visualizations. We’ll also explore 3D
plotting in the browser, cross-language collaboration, and matplotlib
figure conversion. By using Python’s scientific stack and an IPython
notebook--attendees may follow along. For data analysts, data
journalists, and anyone who likes plots.&lt;/p&gt;
</summary></entry><entry><title>Managing Your Infrastructure with SaltStack</title><link href="https://pyvideo.org/pycon-us-2015/managing-your-infrastructure-with-saltstack.html" rel="alternate"></link><published>2015-04-12T00:00:00+00:00</published><updated>2015-04-12T00:00:00+00:00</updated><author><name>Colton Myers</name></author><id>tag:pyvideo.org,2015-04-12:pycon-us-2015/managing-your-infrastructure-with-saltstack.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Are you still using SSH to manage your servers? Deploying code manually
with rsync? There’s a better way. SaltStack is one of the latest and
greatest tools for system management. Once you have a foundation of
lightning-fast remote execution, you can build anything on top of it.
Plus, it’s written in Python, and easy to extend!&lt;/p&gt;
</summary></entry><entry><title>Oh, Come On Who Needs Bytearrays</title><link href="https://pyvideo.org/pycon-us-2015/oh-come-on-who-needs-bytearrays.html" rel="alternate"></link><published>2015-04-12T00:00:00+00:00</published><updated>2015-04-12T00:00:00+00:00</updated><author><name>Brandon Rhodes</name></author><id>tag:pyvideo.org,2015-04-12:pycon-us-2015/oh-come-on-who-needs-bytearrays.html</id><summary type="html"></summary></entry><entry><title>Other people's messy data (and how not to hate it!)</title><link href="https://pyvideo.org/pycon-us-2015/other-peoples-messy-data-and-how-not-to-hate-it.html" rel="alternate"></link><published>2015-04-12T00:00:00+00:00</published><updated>2015-04-12T00:00:00+00:00</updated><author><name>Mali Akmanalp</name></author><id>tag:pyvideo.org,2015-04-12:pycon-us-2015/other-peoples-messy-data-and-how-not-to-hate-it.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Have you ever viscerally hated a dataset? Do you want to just get data
cleaning out of the way? Are you always left wondering how it consumes
most of your time? Whether you work in the sciences, work with
government data or scrape websites, data cleaning is a necessary evil.
We'll share our woes and check out state of the art in day to day data
cleaning tools and strategies.&lt;/p&gt;
</summary></entry><entry><title>Pandas From The Ground Up</title><link href="https://pyvideo.org/pycon-us-2015/pandas-from-the-ground-up.html" rel="alternate"></link><published>2015-04-12T00:00:00+00:00</published><updated>2015-04-12T00:00:00+00:00</updated><author><name>Brandon Rhodes</name></author><id>tag:pyvideo.org,2015-04-12:pycon-us-2015/pandas-from-the-ground-up.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The typical Pandas user learns one dataframe method at a time, slowly
scraping features together through trial and error until they can solve
the task in front of them. In this tutorial you will re-learn how to
think about dataframes from the ground up, and discover how to select
intelligently from their abilities to solve your data processing
problems through direct and deliberately-chosen steps.&lt;/p&gt;
</summary></entry><entry><title>Performance by the Numbers: analyzing the performance of web applications</title><link href="https://pyvideo.org/pycon-us-2015/performance-by-the-numbers-analyzing-the-perform.html" rel="alternate"></link><published>2015-04-12T00:00:00+00:00</published><updated>2015-04-12T00:00:00+00:00</updated><author><name>Geoff Gerrietts</name></author><id>tag:pyvideo.org,2015-04-12:pycon-us-2015/performance-by-the-numbers-analyzing-the-perform.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Everyone knows poor performance when they see it, and performance
concerns affect every application -- web applications more than most.
But finding performance problems can be extraordinarily difficult, and
requires an analytical approach coupled with good instrumentation. This
talk explores approaches to instrumentation and what that
instrumentation can tell you.&lt;/p&gt;
</summary></entry><entry><title>PostgreSQL Proficiency for Python People</title><link href="https://pyvideo.org/pycon-us-2015/postgresql-proficiency-for-python-people-0.html" rel="alternate"></link><published>2015-04-12T00:00:00+00:00</published><updated>2015-04-12T00:00:00+00:00</updated><author><name>Christophe Pettus</name></author><id>tag:pyvideo.org,2015-04-12:pycon-us-2015/postgresql-proficiency-for-python-people-0.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PostgreSQL has become the default database for most green-field
development projects, and is the data storage architecture behind many
major Python-based success stories, such as Instagram. Despite a
reputation as being complex and fiddly, Postgres is easy to install,
administer, maintain, and use... with just a little bit of orientation.
This is that orientation.&lt;/p&gt;
</summary></entry><entry><title>Python Performance Profiling: The Guts And The Glory</title><link href="https://pyvideo.org/pycon-us-2015/python-performance-profiling-the-guts-and-the-gl-0.html" rel="alternate"></link><published>2015-04-12T00:00:00+00:00</published><updated>2015-04-12T00:00:00+00:00</updated><author><name>A. Jesse Jiryu Davis</name></author><id>tag:pyvideo.org,2015-04-12:pycon-us-2015/python-performance-profiling-the-guts-and-the-gl-0.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Your Python program is too slow, and you need to optimize it. Where do
you start? With the right tools, you can optimize your code where it
counts. We’ll explore the guts of the Python profiler “Yappi” to
understand its features and limitations. We’ll learn how to find the
maximum performance wins with minimum effort.&lt;/p&gt;
</summary></entry><entry><title>Pythons are Deaf, So are Some Pythonistas</title><link href="https://pyvideo.org/pycon-us-2015/pythons-are-deaf-so-are-some-pythonistas.html" rel="alternate"></link><published>2015-04-12T00:00:00+00:00</published><updated>2015-04-12T00:00:00+00:00</updated><author><name>en zyme</name></author><id>tag:pyvideo.org,2015-04-12:pycon-us-2015/pythons-are-deaf-so-are-some-pythonistas.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;ASL, like Python, is a language which is both fun and powerful. We have
used Python to build a tool, ASL-CLeaR (American Sign Language Concept
Learning Resource) for the DHH community which will teach STEM
terminology using ASL exclusively. We are also building a summer program
to teach Python in English/ASL to DHH students.&lt;/p&gt;
</summary></entry><entry><title>Rethinking packaging, development and deployment</title><link href="https://pyvideo.org/pycon-us-2015/rethinking-packaging-development-and-deployment-1.html" rel="alternate"></link><published>2015-04-12T00:00:00+00:00</published><updated>2015-04-12T00:00:00+00:00</updated><author><name>Domen Kožar</name></author><id>tag:pyvideo.org,2015-04-12:pycon-us-2015/rethinking-packaging-development-and-deployment-1.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Applying functional programming ideas to solve the problem of packaging
software and configuration of systems in a stateless and deterministic
way. Nix project addresses those problems in unique way based on
academic research that has been applied to real world software
collections in last 10 years.&lt;/p&gt;
</summary></entry><entry><title>Schemas for the Real World</title><link href="https://pyvideo.org/pycon-us-2015/schemas-for-the-real-world-0.html" rel="alternate"></link><published>2015-04-12T00:00:00+00:00</published><updated>2015-04-12T00:00:00+00:00</updated><author><name>Carina C. Zona</name></author><id>tag:pyvideo.org,2015-04-12:pycon-us-2015/schemas-for-the-real-world-0.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Development challenges us to code for users’ personal world. Users give
push-back to ill-fitted assumptions about their own name, gender, sexual
orientation, important relationships, &amp;amp; other attributes that are
individually meaningful. We'll explore how to develop software that
brings real world into focus &amp;amp; that allows individuals to authentically
reflect their personhood &amp;amp; physical world.&lt;/p&gt;
</summary></entry><entry><title>Serialization formats are not toys</title><link href="https://pyvideo.org/pycon-us-2015/serialization-formats-are-not-toys.html" rel="alternate"></link><published>2015-04-12T00:00:00+00:00</published><updated>2015-04-12T00:00:00+00:00</updated><author><name>Tom Eastman</name></author><id>tag:pyvideo.org,2015-04-12:pycon-us-2015/serialization-formats-are-not-toys.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;It’s not in the OWASP Top 10, but you don’t have to look far to hear
stories of security vulnerabilities involving deserialization of user
input. In this talk I’ll go over what the threat is and how you might be
making yourself vulnerable. I’ll cover the features (not bugs: features)
of XML, YAML, and JSON that make them surprisingly dangerous, and how to
protect your code from them.&lt;/p&gt;
</summary></entry><entry><title>Ship it: Deployments with Pip</title><link href="https://pyvideo.org/pycon-us-2015/ship-it-deployments-with-pip.html" rel="alternate"></link><published>2015-04-12T00:00:00+00:00</published><updated>2015-04-12T00:00:00+00:00</updated><author><name>Dan Tracy</name></author><id>tag:pyvideo.org,2015-04-12:pycon-us-2015/ship-it-deployments-with-pip.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Gone are the days where creating system packages or scp-ing tar balls
were required for deployment. With Pip, Fabric, and Jenkins we've
developed a pipeline to simplify deployments and rollbacks that
dove-tails into configuration management and virtualization. New
machines can come fully deployed and ready to rock at a moments notice
allowing you to scale out nodes quickly and painlessly.&lt;/p&gt;
</summary></entry><entry><title>Smart services &amp; smart clients: How micro-services change the way you build and deploy code.</title><link href="https://pyvideo.org/pycon-us-2015/smart-services-smart-clients-how-micro-servic.html" rel="alternate"></link><published>2015-04-12T00:00:00+00:00</published><updated>2015-04-12T00:00:00+00:00</updated><author><name>Frank Stratton</name></author><id>tag:pyvideo.org,2015-04-12:pycon-us-2015/smart-services-smart-clients-how-micro-servic.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;At Runscope we've standardized the idea of small independent &amp;quot;&amp;quot;smart&amp;quot;&amp;quot;
services that can be quickly built, deployed, and scaled. This talk
examines lessons learned from writing these services as well as patterns
found in other platforms. We present a detailed look at the code that
allow us to build dozens of services, serving billions of requests,
while deploying to our cluster over 20 times a day.&lt;/p&gt;
</summary></entry><entry><title>So you think you can PDB?</title><link href="https://pyvideo.org/pycon-us-2015/so-you-think-you-can-pdb-0.html" rel="alternate"></link><published>2015-04-12T00:00:00+00:00</published><updated>2015-04-12T00:00:00+00:00</updated><author><name>Clayton Parker</name></author><id>tag:pyvideo.org,2015-04-12:pycon-us-2015/so-you-think-you-can-pdb-0.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk will be an introduction to the most commonly used Python
Debugger commands and what they do. Learn how to navigate and inspect
code from the pdb prompt so you can better understand how it works. The
Python Debugger is a valuable debugging tool for all levels of Python
programmers. You should walk away being able to debug the next Python
code you encounter!&lt;/p&gt;
</summary></entry><entry><title>streamparse: real-time streams with Python and Apache Storm</title><link href="https://pyvideo.org/pycon-us-2015/streamparse-real-time-streams-with-python-and-ap.html" rel="alternate"></link><published>2015-04-12T00:00:00+00:00</published><updated>2015-04-12T00:00:00+00:00</updated><author><name>Andrew Montalenti</name></author><id>tag:pyvideo.org,2015-04-12:pycon-us-2015/streamparse-real-time-streams-with-python-and-ap.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Real-time streams are everywhere, but does Python have a good way of
processing them? Until recently, there were no good options. A new open
source project, streamparse, makes working with real-time data streams
easy for Pythonistas. If you have ever wondered how to process 10,000
data tuples per second with Python -- while maintaining high
availability and low latency -- this talk is for you.&lt;/p&gt;
</summary></entry><entry><title>Techniques for Debugging Hard Problems</title><link href="https://pyvideo.org/pycon-us-2015/techniques-for-debugging-hard-problems.html" rel="alternate"></link><published>2015-04-12T00:00:00+00:00</published><updated>2015-04-12T00:00:00+00:00</updated><author><name>Alex Gaynor</name></author><id>tag:pyvideo.org,2015-04-12:pycon-us-2015/techniques-for-debugging-hard-problems.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Sometimes your programs have bugs. Often they're shallow things, simple
AttributeErrors or TypeErrors. Sometimes they're large, complex, and
nearly impossible to debug. This talk explores techniques for figuring
these out.&lt;/p&gt;
</summary></entry><entry><title>Terminal whispering</title><link href="https://pyvideo.org/pycon-us-2015/terminal-whispering.html" rel="alternate"></link><published>2015-04-12T00:00:00+00:00</published><updated>2015-04-12T00:00:00+00:00</updated><author><name>Thomas Ballinger</name></author><id>tag:pyvideo.org,2015-04-12:pycon-us-2015/terminal-whispering.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Have you ever wanted to add a status bar to your command line program?
Or maybe color the output a bit? Or do you want to write a fullscreen
terminal application like ls, top, vim, or emacs? Then you need to speak
a bit of terminal! This talk describes how to talk to your terminal from
scratch and goes on to show why Python libraries Blessings and Urwid are
so awesome.&lt;/p&gt;
</summary></entry><entry><title>The Ethical Consequences Of Our Collective Activities</title><link href="https://pyvideo.org/pycon-us-2015/the-ethical-consequences-of-our-collective-activi.html" rel="alternate"></link><published>2015-04-12T00:00:00+00:00</published><updated>2015-04-12T00:00:00+00:00</updated><author><name>Glyph</name></author><id>tag:pyvideo.org,2015-04-12:pycon-us-2015/the-ethical-consequences-of-our-collective-activi.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;As more of the world is controlled by software, software developers have
an increasing obligation to serve that world well. Yet, we don't yet
have a sense of what makes a good ethical standard. The fast pace,
success, and youth (in both historical and demographic terms) of our
industry have given us the sense that such a standard might not be
required. This talk will correct that misconception.&lt;/p&gt;
</summary></entry><entry><title>To ORM or not to ORM</title><link href="https://pyvideo.org/pycon-us-2015/to-orm-or-not-to-orm.html" rel="alternate"></link><published>2015-04-12T00:00:00+00:00</published><updated>2015-04-12T00:00:00+00:00</updated><author><name>Christine Spang</name></author><id>tag:pyvideo.org,2015-04-12:pycon-us-2015/to-orm-or-not-to-orm.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Database ORMs make it really convenient to pythonically query a
database, but it's difficult to decide when to use them and when not
to---and what the alternatives are. In this talk you'll learn strategies
for deciding when and where to use an ORM, when to be cautious, and how
to tell that you're doing the right thing, drawn from real-world lessons
learned building the Inbox email platform.&lt;/p&gt;
</summary></entry><entry><title>WebSockets from the Wire Up</title><link href="https://pyvideo.org/pycon-us-2015/websockets-from-the-wire-up.html" rel="alternate"></link><published>2015-04-12T00:00:00+00:00</published><updated>2015-04-12T00:00:00+00:00</updated><author><name>Christine Spang</name></author><id>tag:pyvideo.org,2015-04-12:pycon-us-2015/websockets-from-the-wire-up.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;HTML5 WebSockets power the real-time web. Come take a deep dive into how
they work, from the big picture down to what goes over the wire,
including insight into the performance benefits of the protocol, via a
real-world example of how WebSockets are implemented client- and
server-side in Python.&lt;/p&gt;
</summary></entry><entry><title>What to do when you need crypto</title><link href="https://pyvideo.org/pycon-us-2015/what-to-do-when-you-need-crypto.html" rel="alternate"></link><published>2015-04-12T00:00:00+00:00</published><updated>2015-04-12T00:00:00+00:00</updated><author><name>Jarret Raim</name></author><id>tag:pyvideo.org,2015-04-12:pycon-us-2015/what-to-do-when-you-need-crypto.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The cryptographic world doesn't lend itself to the typical developer
flow of learning while doing. Add that to the massive amount of bad or
outdated information on the web and many developers are lost or worse,
build insecure systems. This tutorial will introduce developers to
modern cryptography with an eye towards practical scenarios around
password management, encryption and key management.&lt;/p&gt;
</summary></entry><entry><title>Where in your RAM is "python san_diego.py"?</title><link href="https://pyvideo.org/pycon-us-2015/where-in-your-ram-is-python-san_diegopy.html" rel="alternate"></link><published>2015-04-12T00:00:00+00:00</published><updated>2015-04-12T00:00:00+00:00</updated><author><name>Ying Li</name></author><id>tag:pyvideo.org,2015-04-12:pycon-us-2015/where-in-your-ram-is-python-san_diegopy.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Gumshoes, the rogue program &lt;tt class="docutils literal"&gt;san_diego.py&lt;/tt&gt; is threatening to cause
havok! What is it doing to hide itself? What kind of things is it doing?
Who might it be communicating with? RAM is a big place - how can we even
find it, much less any of this information? Stay tuned and find out!&lt;/p&gt;
</summary></entry><entry><title>Your Brain's API: Giving and Getting Technical Help</title><link href="https://pyvideo.org/pycon-us-2015/your-brains-api-giving-and-getting-technical-he.html" rel="alternate"></link><published>2015-04-12T00:00:00+00:00</published><updated>2015-04-12T00:00:00+00:00</updated><author><name>Sasha Laundy</name></author><id>tag:pyvideo.org,2015-04-12:pycon-us-2015/your-brains-api-giving-and-getting-technical-he.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Software engineers are never done learning since our field is always
changing. We are always beginners at some things and experts at others.
Along the way from beginner to expert we have to ask a lot of questions,
but it can be hard to get help. This talk gives concrete tools to help
you ask with confidence, and highlights common expert mistakes that
inadvertently make people feel foolish.&lt;/p&gt;
</summary></entry><entry><title>Zen of Quality</title><link href="https://pyvideo.org/pycon-us-2015/zen-of-quality.html" rel="alternate"></link><published>2015-04-12T00:00:00+00:00</published><updated>2015-04-12T00:00:00+00:00</updated><author><name>Mike Howsden</name></author><id>tag:pyvideo.org,2015-04-12:pycon-us-2015/zen-of-quality.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;It is extremely important to PBS that digital viewers have an awesome
experience when viewing online videos. In this talk, we explain how PBS
built a system to collect, analyze, and measure who's getting a good
experience -- and who's not.&lt;/p&gt;
</summary></entry><entry><title>3D Print Anything with the Blender API</title><link href="https://pyvideo.org/pycon-us-2015/3d-print-anything-with-the-blender-api.html" rel="alternate"></link><published>2015-04-11T00:00:00+00:00</published><updated>2015-04-11T00:00:00+00:00</updated><author><name>Jenny Cheng</name></author><id>tag:pyvideo.org,2015-04-11:pycon-us-2015/3d-print-anything-with-the-blender-api.html</id><summary type="html"></summary></entry><entry><title>A Beginner's Guide to Test-driven Development</title><link href="https://pyvideo.org/pycon-us-2015/a-beginners-guide-to-test-driven-development.html" rel="alternate"></link><published>2015-04-11T00:00:00+00:00</published><updated>2015-04-11T00:00:00+00:00</updated><author><name>Itamar Turner-Trauring</name></author><id>tag:pyvideo.org,2015-04-11:pycon-us-2015/a-beginners-guide-to-test-driven-development.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Software is maintained by humans with limited memory and an unfortunate
tendency to make mistakes. Test-driven development (TDD) can help you
work around these design flaws by providing a permanent, automated
specification for your code. Learn how to implement TDD when bug fixing
and implementing new features and how this process will ensure your code
is correct both now and in the future.&lt;/p&gt;
</summary></entry><entry><title>Advanced Git</title><link href="https://pyvideo.org/pycon-us-2015/advanced-git.html" rel="alternate"></link><published>2015-04-11T00:00:00+00:00</published><updated>2015-04-11T00:00:00+00:00</updated><author><name>David "DB" Baumgold</name></author><id>tag:pyvideo.org,2015-04-11:pycon-us-2015/advanced-git.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;You know clone, commit, push, and pull. Now you're ready for the fun
stuff. This talk will give you the advanced knowledge you need to take
control of your git repository: rebase, cherry-pick, bisect, blame,
squashing, and the reflog. You'll also get a better conceptual
understanding of how git works, allowing you to chain these tools
together to accomplish whatever task you need.&lt;/p&gt;
</summary><category term="git"></category></entry><entry><title>Ansible beyond YAML</title><link href="https://pyvideo.org/pycon-us-2015/ansible-beyond-yaml.html" rel="alternate"></link><published>2015-04-11T00:00:00+00:00</published><updated>2015-04-11T00:00:00+00:00</updated><author><name>Michael Scherer</name></author><id>tag:pyvideo.org,2015-04-11:pycon-us-2015/ansible-beyond-yaml.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Ansible is a configuration management tool whose primary mode of
operation involve using YAML to describe deployments and operations.
However, it can do much more and be extended using python, which is what
we will explore in this talk. Among others, we will see the plugins
system for various part of the tool and how to reuse Ansible in a
script.&lt;/p&gt;
</summary><category term="ansible"></category><category term="yaml"></category></entry><entry><title>Beyond PEP 8 -- Best practices for beautiful intelligible code</title><link href="https://pyvideo.org/pycon-us-2015/beyond-pep-8-best-practices-for-beautiful-inte.html" rel="alternate"></link><published>2015-04-11T00:00:00+00:00</published><updated>2015-04-11T00:00:00+00:00</updated><author><name>Raymond Hettinger</name></author><id>tag:pyvideo.org,2015-04-11:pycon-us-2015/beyond-pep-8-best-practices-for-beautiful-inte.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Distillation of knowledge gained from a decade of Python consulting,
Python training, code reviews, and serving as a core developer. Learn to
avoid some of the hazards of the PEP 8 style guide and learn what really
matters for creating beautiful intelligible code.&lt;/p&gt;
</summary></entry><entry><title>Building a REST API Using Django &amp; Django REST Framework</title><link href="https://pyvideo.org/pycon-us-2015/building-a-rest-api-using-django-django-rest-fr.html" rel="alternate"></link><published>2015-04-11T00:00:00+00:00</published><updated>2015-04-11T00:00:00+00:00</updated><author><name>Kenny Yarboro</name></author><id>tag:pyvideo.org,2015-04-11:pycon-us-2015/building-a-rest-api-using-django-django-rest-fr.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Using a combination of Django and Django REST Framework, we will build a
Restaurant Menu that can be managed via a REST API. Starting from the
install of the Django REST Framework, we will build our way to a
functional API that meets the needs of developers and end-users. You
will walk away with an understanding of the basic concepts of REST APIs
and a working sample project.&lt;/p&gt;
</summary></entry><entry><title>Building secure systems</title><link href="https://pyvideo.org/pycon-us-2015/building-secure-systems.html" rel="alternate"></link><published>2015-04-11T00:00:00+00:00</published><updated>2015-04-11T00:00:00+00:00</updated><author><name>Laurens Van Houtven</name></author><id>tag:pyvideo.org,2015-04-11:pycon-us-2015/building-secure-systems.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;How do you build secure software? Why do we see bad security track
records in projects that otherwise seem to tick all the right
engineering boxes? Why is communicating about security issues so
painful? More importantly: how can we do all of these things better?&lt;/p&gt;
</summary></entry><entry><title>Data Science in Advertising: Or a future when we love ads</title><link href="https://pyvideo.org/pycon-us-2015/data-science-in-advertising-or-a-future-when-we.html" rel="alternate"></link><published>2015-04-11T00:00:00+00:00</published><updated>2015-04-11T00:00:00+00:00</updated><author><name>Soups Ranjan</name></author><id>tag:pyvideo.org,2015-04-11:pycon-us-2015/data-science-in-advertising-or-a-future-when-we.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk would give you an in-depth overview of Real-Time Bidded (RTB)
advertising systems, and why with increasing sophistication in ad-tech,
in the future we will wonder why we ever hated ads. In particular, this
talk will discuss technical challenges in ad systems and how we use
Computational Advertising and Data Science to solve problems around
Click Through Rate (CTR) Prediction, Auto-Bidding systems, Traffic
Prediction, etc.&lt;/p&gt;
</summary></entry><entry><title>Demystifying Docker</title><link href="https://pyvideo.org/pycon-us-2015/demystifying-docker.html" rel="alternate"></link><published>2015-04-11T00:00:00+00:00</published><updated>2015-04-11T00:00:00+00:00</updated><author><name>Andrew T. Baker</name></author><id>tag:pyvideo.org,2015-04-11:pycon-us-2015/demystifying-docker.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Docker was one of last year’s most talked about open source projects -
but what is it? And what does it mean for deploying applications? This
talk will explain what Docker is and where it fits in with other
deployment techniques. Attendees will learn the fundamentals of Docker,
see some practical examples of how Docker is used, and consider if
Docker could be a useful addition to their platform.&lt;/p&gt;
</summary></entry><entry><title>Distributed Systems 101</title><link href="https://pyvideo.org/pycon-us-2015/distributed-systems-101.html" rel="alternate"></link><published>2015-04-11T00:00:00+00:00</published><updated>2015-04-11T00:00:00+00:00</updated><author><name>Laurens Van Houtven</name></author><id>tag:pyvideo.org,2015-04-11:pycon-us-2015/distributed-systems-101.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A very brief introduction to the theory and practice of distributed
systems.&lt;/p&gt;
</summary></entry><entry><title>Don't Make Us Say We Told You So: virtualenv for New Pythonistas</title><link href="https://pyvideo.org/pycon-us-2015/dont-make-us-say-we-told-you-so-virtualenv-for.html" rel="alternate"></link><published>2015-04-11T00:00:00+00:00</published><updated>2015-04-11T00:00:00+00:00</updated><author><name>Matt Makai</name></author><id>tag:pyvideo.org,2015-04-11:pycon-us-2015/dont-make-us-say-we-told-you-so-virtualenv-for.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Even though it’s possible to program without using virtual environments,
you can shoot yourself in the foot without them. This talk will start
with an illustration of how not using virtual environments can mess you
up as a programmer, and will walk you through a simple way to get
started with good habits using virtualenv.&lt;/p&gt;
</summary></entry><entry><title>Experimental pure mathematics using Sage</title><link href="https://pyvideo.org/pycon-us-2015/experimental-pure-mathematics-using-sage.html" rel="alternate"></link><published>2015-04-11T00:00:00+00:00</published><updated>2015-04-11T00:00:00+00:00</updated><author><name>Viviane Pons</name></author><id>tag:pyvideo.org,2015-04-11:pycon-us-2015/experimental-pure-mathematics-using-sage.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Pure mathematics is not always big formulas written on endless
notebooks, it can also be hidden behind python code. In combinatorics,
we study classical computer science objects like trees or graphs with a
mathematical perspective. This talk aims to show how computer
exploration and experimentation can be used to discover and prove new
mathematical results.&lt;/p&gt;
</summary></entry><entry><title>Exploring Minecraft and Python: Learning to Code Through Play</title><link href="https://pyvideo.org/pycon-us-2015/exploring-minecraft-and-python-learning-to-code.html" rel="alternate"></link><published>2015-04-11T00:00:00+00:00</published><updated>2015-04-11T00:00:00+00:00</updated><author><name>Kurt Grandis</name></author><id>tag:pyvideo.org,2015-04-11:pycon-us-2015/exploring-minecraft-and-python-learning-to-code.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Interest and activity in childhood computing education continues to
grow. Meanwhile, Minecraft has become a massive cultural phenomenon as a
fun, motivating platform that encourages exploration and play. This talk
demonstrates how Python can be used to teach programming while exploring
the world of Minecraft. We will cover how to set up learning
environments, curricula, and case studies.&lt;/p&gt;
</summary></entry><entry><title>Facts and Myths about Python names and values</title><link href="https://pyvideo.org/pycon-us-2015/facts-and-myths-about-python-names-and-values.html" rel="alternate"></link><published>2015-04-11T00:00:00+00:00</published><updated>2015-04-11T00:00:00+00:00</updated><author><name>Ned Batchelder</name></author><id>tag:pyvideo.org,2015-04-11:pycon-us-2015/facts-and-myths-about-python-names-and-values.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The behavior of names and values in Python can be confusing. Like many
parts of Python, it has an underlying simplicity that can be hard to
discern, especially if you are used to other programming languages. Here
I'll explain how it all works, and present some facts and myths along
the way. Call-by-reference? Call-by-value? The answer will be clear!&lt;/p&gt;
</summary></entry><entry><title>Finding Your Groove: Contributing to CPython and Beyond</title><link href="https://pyvideo.org/pycon-us-2015/finding-your-groove-contributing-to-cpython-and.html" rel="alternate"></link><published>2015-04-11T00:00:00+00:00</published><updated>2015-04-11T00:00:00+00:00</updated><author><name>Carol Willing</name></author><id>tag:pyvideo.org,2015-04-11:pycon-us-2015/finding-your-groove-contributing-to-cpython-and.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Do you hear a jumble of jargony noise when reading Python mailing lists?
Do you silently edit your dotfiles and playlists to avoid asking
questions on IRC? Come see how Jazz can help you understand and
contribute to Python. While both seem vast and complex, they build on
simple concepts. By mixing art, knowledge, and improv, you can find your
CPython contribution groove and enjoy cool cats' music.&lt;/p&gt;
</summary></entry><entry><title>Fire your supervisord running Python apps on CoreOS</title><link href="https://pyvideo.org/pycon-us-2015/fire-your-supervisord-running-python-apps-on-core.html" rel="alternate"></link><published>2015-04-11T00:00:00+00:00</published><updated>2015-04-11T00:00:00+00:00</updated><author><name>Dan Callahan</name></author><id>tag:pyvideo.org,2015-04-11:pycon-us-2015/fire-your-supervisord-running-python-apps-on-core.html</id><summary type="html"></summary></entry><entry><title>Flask Workshop</title><link href="https://pyvideo.org/pycon-us-2015/flask-workshop.html" rel="alternate"></link><published>2015-04-11T00:00:00+00:00</published><updated>2015-04-11T00:00:00+00:00</updated><author><name>Miguel Grinberg</name></author><id>tag:pyvideo.org,2015-04-11:pycon-us-2015/flask-workshop.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Flask is a web framework for Python based on Werkzeug, Jinja 2 and good
intentions. It is considered a micro-framework, but don't get the
&amp;quot;&amp;quot;micro&amp;quot;&amp;quot; part fool you; Flask can do everything others can do, many
times in a simpler, leaner way. In this tutorial session we will build a
web application together. Bring your laptop and your questions!&lt;/p&gt;
</summary></entry><entry><title>Good Test, Bad Test</title><link href="https://pyvideo.org/pycon-us-2015/good-test-bad-test.html" rel="alternate"></link><published>2015-04-11T00:00:00+00:00</published><updated>2015-04-11T00:00:00+00:00</updated><author><name>Dan Crosta</name></author><id>tag:pyvideo.org,2015-04-11:pycon-us-2015/good-test-bad-test.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In a highly dynamic language like Python, testing is even more critical
than in compiled or more static languages. Like any other code we
produce, tests can be either good or bad. This talk explores three
fallacies of testing, and the mistakes and bad habits these fallacies
encourage; and shows how to write good tests which help assure proper
behavior without impeding development progress.&lt;/p&gt;
</summary></entry><entry><title>Grids, Streets and Pipelines: Building a linguistic street map with scikit-learn</title><link href="https://pyvideo.org/pycon-us-2015/grids-streets-and-pipelines-building-a-linguist.html" rel="alternate"></link><published>2015-04-11T00:00:00+00:00</published><updated>2015-04-11T00:00:00+00:00</updated><author><name>Michelle Fullwood</name></author><id>tag:pyvideo.org,2015-04-11:pycon-us-2015/grids-streets-and-pipelines-building-a-linguist.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Have you built a classifier in scikit-learn with out-of-the-box
features, been disappointed with the results, and wanted to know where
to go next? This talk shows how to add your own feature Pipelines and
how to tune hyperparameters using GridSearchCV. We'll apply this to the
problem of classifying streetnames in Singapore by linguistic origin,
and turn the results into a colour-coded street map.&lt;/p&gt;
</summary></entry><entry><title>Hadoop with Python</title><link href="https://pyvideo.org/pycon-us-2015/hadoop-with-python.html" rel="alternate"></link><published>2015-04-11T00:00:00+00:00</published><updated>2015-04-11T00:00:00+00:00</updated><author><name>Donald Miner</name></author><id>tag:pyvideo.org,2015-04-11:pycon-us-2015/hadoop-with-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this tutorial, students will learn how to use Python with Apache
Hadoop to store, process, and analyze incredibly large data sets. Hadoop
has become the standard in distributed data processing, but has mostly
required Java in the past. Today, there are a numerous open source
projects that support Hadoop in Python and this tutorial will show
students how to use them.&lt;/p&gt;
</summary></entry><entry><title>Hands-on with Pydata: how to build a minimal recommendation engine.</title><link href="https://pyvideo.org/pycon-us-2015/hands-on-with-pydata-how-to-build-a-minimal-reco.html" rel="alternate"></link><published>2015-04-11T00:00:00+00:00</published><updated>2015-04-11T00:00:00+00:00</updated><author><name>Christian Fricke</name></author><id>tag:pyvideo.org,2015-04-11:pycon-us-2015/hands-on-with-pydata-how-to-build-a-minimal-reco.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this tutorial we'll set ourselves the goal of building a minimal
recommendation engine, and in the process learn about Python's excellent
Pydata and related projects and tools: NumPy, pandas, and the IPython
Notebook.&lt;/p&gt;
</summary></entry><entry><title>How our engineering environments are killing diversity (and how we can fix it).</title><link href="https://pyvideo.org/pycon-us-2015/how-our-engineering-environments-are-killing-dive.html" rel="alternate"></link><published>2015-04-11T00:00:00+00:00</published><updated>2015-04-11T00:00:00+00:00</updated><author><name>Kate Heddleston</name></author><id>tag:pyvideo.org,2015-04-11:pycon-us-2015/how-our-engineering-environments-are-killing-dive.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk focuses on how engineering team environments can impact
employee behavior, and how environmental factors can prohibit diversity
at tech companies. I will talk about some of the key problems that exist
in current engineering environments and how they can be fixed.&lt;/p&gt;
</summary></entry><entry><title>How to Be More Effective with Functions</title><link href="https://pyvideo.org/pycon-us-2015/how-to-be-more-effective-with-functions.html" rel="alternate"></link><published>2015-04-11T00:00:00+00:00</published><updated>2015-04-11T00:00:00+00:00</updated><author><name>Brett Slatkin</name></author><id>tag:pyvideo.org,2015-04-11:pycon-us-2015/how-to-be-more-effective-with-functions.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Functions improve readability, encourage reuse, and facilitate
refactoring. Python has many unique features that make functions
significantly more powerful. This talk will show you the best ways to
use functions in Python: when *args is helpful and when it'll crash
your programs; how to use generators for arguments and return values;
the value of keyword vs. keyword-only arguments; and more!&lt;/p&gt;
</summary></entry><entry><title>How to build a brain with Python</title><link href="https://pyvideo.org/pycon-us-2015/how-to-build-a-brain-with-python.html" rel="alternate"></link><published>2015-04-11T00:00:00+00:00</published><updated>2015-04-11T00:00:00+00:00</updated><author><name>Trevor Bekolay</name></author><id>tag:pyvideo.org,2015-04-11:pycon-us-2015/how-to-build-a-brain-with-python.html</id><summary type="html"></summary></entry><entry><title>How to interpret your own genome using (mostly) Python.</title><link href="https://pyvideo.org/pycon-us-2015/how-to-interpret-your-own-genome-using-mostly-p.html" rel="alternate"></link><published>2015-04-11T00:00:00+00:00</published><updated>2015-04-11T00:00:00+00:00</updated><author><name>C. Titus Brown</name></author><id>tag:pyvideo.org,2015-04-11:pycon-us-2015/how-to-interpret-your-own-genome-using-mostly-p.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;We’ve entered the era of the $1000 human genome, and soon it will be
straightforward to get your own genome sequenced by a commercial
company. But what does the data mean? What information can you get out
of your genomic sequence? And what are the barriers to deeper analysis?
What kinds of algorithms and databases are used in genomic analysis? All
this, and more, will be revealed in this talk.&lt;/p&gt;
</summary></entry><entry><title>How to make your code Python 2/3 compatible</title><link href="https://pyvideo.org/pycon-us-2015/how-to-make-your-code-python-23-compatible.html" rel="alternate"></link><published>2015-04-11T00:00:00+00:00</published><updated>2015-04-11T00:00:00+00:00</updated><author><name>Brett Cannon</name></author><id>tag:pyvideo.org,2015-04-11:pycon-us-2015/how-to-make-your-code-python-23-compatible.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;You know Python 3 is an improvement over Python 2 and you want to use
it. Unfortunately you have legacy Python 2 source code that needs to
stay compatible. But don't fret! This talk will show you that you can
make your code be Python 2/3 source-compatible using various tools to
pick up the nitty-gritty work and help modernize your Python code to
newer Python 2 practices.&lt;/p&gt;
</summary></entry><entry><title>How to Write Reusable Code</title><link href="https://pyvideo.org/pycon-us-2015/how-to-write-reusable-code.html" rel="alternate"></link><published>2015-04-11T00:00:00+00:00</published><updated>2015-04-11T00:00:00+00:00</updated><author><name>Greg Ward</name></author><id>tag:pyvideo.org,2015-04-11:pycon-us-2015/how-to-write-reusable-code.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Learning to write high-quality, reusable code takes years of dedicated
work. Or you can take a shortcut: attend this talk and learn some of the
tricks I've figured out over a couple of decades of programming.&lt;/p&gt;
</summary></entry><entry><title>Hyperactive: HTTP/2 and Python</title><link href="https://pyvideo.org/pycon-us-2015/hyperactive-http2-and-python.html" rel="alternate"></link><published>2015-04-11T00:00:00+00:00</published><updated>2015-04-11T00:00:00+00:00</updated><author><name>Cory Benfield</name></author><id>tag:pyvideo.org,2015-04-11:pycon-us-2015/hyperactive-http2-and-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The internet has spoken, HTTP is to get its first serious update in 15
years. In this talk we'll discuss what HTTP/2 is, why it's happening,
and how it's going to affect you and everyone you love. We'll briefly
talk about how you can get started with HTTP/2, and some interesting
projects associated with it, including Hyper, the first Python HTTP/2
library.&lt;/p&gt;
</summary></entry><entry><title>I18N: World Domination the Easy Way</title><link href="https://pyvideo.org/pycon-us-2015/i18n-world-domination-the-easy-way.html" rel="alternate"></link><published>2015-04-11T00:00:00+00:00</published><updated>2015-04-11T00:00:00+00:00</updated><author><name>Sarina Canelake</name></author><id>tag:pyvideo.org,2015-04-11:pycon-us-2015/i18n-world-domination-the-easy-way.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Have you heard about internationalization (i18n) and wondered what it
meant? Perhaps your project already has i18n of its strings but you have
a nagging feeling you could be doing it better. This talk will walk
through the basics of i18n’ing a Django project (but the principles
apply to any project!), and how to make the process of localization
(l10n) go more smoothly.&lt;/p&gt;
</summary></entry><entry><title>Introduction to HTTPS: A Comedy of Errors</title><link href="https://pyvideo.org/pycon-us-2015/introduction-to-https-a-comedy-of-errors.html" rel="alternate"></link><published>2015-04-11T00:00:00+00:00</published><updated>2015-04-11T00:00:00+00:00</updated><author><name>Ashwini Oruganti</name></author><id>tag:pyvideo.org,2015-04-11:pycon-us-2015/introduction-to-https-a-comedy-of-errors.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Given recent increases in hostile attacks on internet services and large
scale surveillance operations by certain unnamed government
organizations, security in our software is becoming ever more important.
We'll give you an idea of how modern crypto works in web services and
clients, look at some of the common flaws in these crypto
implementations, and discuss recent developments in TLS.&lt;/p&gt;
</summary></entry><entry><title>Investigating Python Wats</title><link href="https://pyvideo.org/pycon-us-2015/investigating-python-wats.html" rel="alternate"></link><published>2015-04-11T00:00:00+00:00</published><updated>2015-04-11T00:00:00+00:00</updated><author><name>Amy Hanlon</name></author><id>tag:pyvideo.org,2015-04-11:pycon-us-2015/investigating-python-wats.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Many of us have experienced a &amp;quot;&amp;quot;wat&amp;quot;&amp;quot; in Python - some behavior that
totally mystifies us. We'll look at three areas where wats arise -
identity, mutability, and scope. For each of these three topics, we'll
look at some common surprising behaviors, investigate the cause of the
behaviors, and cover some practical tips on how to avoid related bugs.&lt;/p&gt;
</summary></entry><entry><title>Is Your REST API RESTful?</title><link href="https://pyvideo.org/pycon-us-2015/is-your-rest-api-restful.html" rel="alternate"></link><published>2015-04-11T00:00:00+00:00</published><updated>2015-04-11T00:00:00+00:00</updated><author><name>Miguel Grinberg</name></author><id>tag:pyvideo.org,2015-04-11:pycon-us-2015/is-your-rest-api-restful.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Writing a fully complaint REST API is hard, so hard it is too common for
APIs to violate one or more of the REST architectural principles. In
this talk I will describe the six REST principles, and I will tell you
what happens if you don't follow them.&lt;/p&gt;
</summary></entry><entry><title>Learning from other's mistakes: Data-driven analysis of Python code</title><link href="https://pyvideo.org/pycon-us-2015/learning-from-others-mistakes-data-driven-analy.html" rel="alternate"></link><published>2015-04-11T00:00:00+00:00</published><updated>2015-04-11T00:00:00+00:00</updated><author><name>Andreas Dewes</name></author><id>tag:pyvideo.org,2015-04-11:pycon-us-2015/learning-from-others-mistakes-data-driven-analy.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Static code analysis is an useful tool that can help to detect bugs
early in the software development life cycle. I will explain the basics
of static analysis and show the challenges we face when analyzing Python
code. I will introduce a data-driven approach to code analysis that
makes use of public code and example-based learning and show how it can
be applied to analyzing Python code.&lt;/p&gt;
</summary></entry><entry><title>Lightning Talks - April 10th</title><link href="https://pyvideo.org/pycon-us-2015/lighting-talks-april-10th.html" rel="alternate"></link><published>2015-04-11T00:00:00+00:00</published><updated>2015-04-11T00:00:00+00:00</updated><author><name>Various speakers</name></author><id>tag:pyvideo.org,2015-04-11:pycon-us-2015/lighting-talks-april-10th.html</id><summary type="html"></summary><category term="lightning talks"></category></entry><entry><title>Lightning Talks - April 11th 8h30</title><link href="https://pyvideo.org/pycon-us-2015/lightning-talks-april-11th-8h30.html" rel="alternate"></link><published>2015-04-11T00:00:00+00:00</published><updated>2015-04-11T00:00:00+00:00</updated><author><name>Various speakers</name></author><id>tag:pyvideo.org,2015-04-11:pycon-us-2015/lightning-talks-april-11th-8h30.html</id><summary type="html"></summary><category term="lightning talks"></category></entry><entry><title>Losing your Loops Fast Numerical Computing with NumPy</title><link href="https://pyvideo.org/pycon-us-2015/losing-your-loops-fast-numerical-computing-with-n.html" rel="alternate"></link><published>2015-04-11T00:00:00+00:00</published><updated>2015-04-11T00:00:00+00:00</updated><author><name>Jake VanderPlas</name></author><id>tag:pyvideo.org,2015-04-11:pycon-us-2015/losing-your-loops-fast-numerical-computing-with-n.html</id><summary type="html"></summary></entry><entry><title>Machine Learning 101</title><link href="https://pyvideo.org/pycon-us-2015/machine-learning-101.html" rel="alternate"></link><published>2015-04-11T00:00:00+00:00</published><updated>2015-04-11T00:00:00+00:00</updated><author><name>Kyle Kastner</name></author><id>tag:pyvideo.org,2015-04-11:pycon-us-2015/machine-learning-101.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Machine learning is a crucial part of modern software development.
Libraries like pandas, scikit-learn, gensim, and Theano help developers
build projects that were previously impossible, and these applications
empower our users and can make fundamental improvements in daily life.
This talk will show you the why, what, and how of machine learning in
Python.&lt;/p&gt;
</summary></entry><entry><title>Make your own Smart Air Conditioner</title><link href="https://pyvideo.org/pycon-us-2015/make-your-own-smart-air-conditioner.html" rel="alternate"></link><published>2015-04-11T00:00:00+00:00</published><updated>2015-04-11T00:00:00+00:00</updated><author><name>Miriam Lauter</name></author><id>tag:pyvideo.org,2015-04-11:pycon-us-2015/make-your-own-smart-air-conditioner.html</id><summary type="html"></summary></entry><entry><title>My Python's a little Rust-y</title><link href="https://pyvideo.org/pycon-us-2015/my-pythons-a-little-rust-y.html" rel="alternate"></link><published>2015-04-11T00:00:00+00:00</published><updated>2015-04-11T00:00:00+00:00</updated><author><name>Dan Callahan</name></author><id>tag:pyvideo.org,2015-04-11:pycon-us-2015/my-pythons-a-little-rust-y.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Rust is a new systems programming language from Mozilla that combines
strong compile-time correctness guarantees with fast performance... and
it plays nice with ctypes! Come learn how you can call Rust functions
from Python code and finally say goodbye to hacking C!&lt;/p&gt;
</summary></entry><entry><title>Neural Nets for Newbies</title><link href="https://pyvideo.org/pycon-us-2015/neural-nets-for-newbies.html" rel="alternate"></link><published>2015-04-11T00:00:00+00:00</published><updated>2015-04-11T00:00:00+00:00</updated><author><name>Melanie Warrick</name></author><id>tag:pyvideo.org,2015-04-11:pycon-us-2015/neural-nets-for-newbies.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Neural networks have regained popularity in the last decade, but they
get dismissed as being too complicated to understand and implement. This
talk breaks down the neural net structure as simply as possible, so you
have a framework on which to grow your knowledge in the space. I will
put neural nets in the context of real-world applications and share
Python packages and code where you can get started building your own.
Coming out this talk you won't know everything about neural nets, but
you will walk away with a solid foundation and some resources on where
to go next to learn more.&lt;/p&gt;
</summary></entry><entry><title>Open Source for Newcomers and the People Who Want to Welcome Them</title><link href="https://pyvideo.org/pycon-us-2015/open-source-for-newcomers-and-the-people-who-want.html" rel="alternate"></link><published>2015-04-11T00:00:00+00:00</published><updated>2015-04-11T00:00:00+00:00</updated><author><name>Shauna Gordon-McKeon</name></author><id>tag:pyvideo.org,2015-04-11:pycon-us-2015/open-source-for-newcomers-and-the-people-who-want.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Open source can be fun and rewarding, but it can also be intimidating.
This talk addresses some of the biggest technical and psychological
barriers to contributing, from the perspective of both the newcomers who
want to overcome them and the maintainers who want to remove them.&lt;/p&gt;
</summary></entry><entry><title>Porting Python to run without an OS</title><link href="https://pyvideo.org/pycon-us-2015/porting-python-to-run-without-an-os.html" rel="alternate"></link><published>2015-04-11T00:00:00+00:00</published><updated>2015-04-11T00:00:00+00:00</updated><author><name>Josh Triplett</name></author><id>tag:pyvideo.org,2015-04-11:pycon-us-2015/porting-python-to-run-without-an-os.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;We've ported Python to run directly on hardware, without an OS, as a
testing and exploration environment for firmware, ACPI, and UEFI. This
talk will explore porting Python to a new platform, embedding Python,
recreating enough of libc and POSIX to run Python without an OS, and
binding to platform-specific services. Includes live demo of bare-metal
Python, directly driving hardware.&lt;/p&gt;
</summary></entry><entry><title>PyPy.js: What? How? Why?</title><link href="https://pyvideo.org/pycon-us-2015/pypyjs-what-how-why-0.html" rel="alternate"></link><published>2015-04-11T00:00:00+00:00</published><updated>2015-04-11T00:00:00+00:00</updated><author><name>Ryan Kelly</name></author><id>tag:pyvideo.org,2015-04-11:pycon-us-2015/pypyjs-what-how-why-0.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyPy.js is an experiment in building a fast and compliant in-browser
python interpreter, by compiling PyPy into javascript and retargeting
its JIT to emit javascript code at runtime. This talk will demonstrate
the combination of technologies that make such a thing possible, the
results achieved so far, and the challenges that still remain when
taking python onto javascript's home turf.&lt;/p&gt;
</summary></entry><entry><title>Python by Immersion</title><link href="https://pyvideo.org/pycon-us-2015/python-by-immersion.html" rel="alternate"></link><published>2015-04-11T00:00:00+00:00</published><updated>2015-04-11T00:00:00+00:00</updated><author><name>Stuart Williams</name></author><id>tag:pyvideo.org,2015-04-11:pycon-us-2015/python-by-immersion.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A very fast introduction to Python for software developers with
experience in other languages. Instead of a traditional top-down
presentation of Python's features, syntax, and semantics, students are
immersed in the language bottom-up with hundreds of small examples using
the interactive interpreter to quickly gain familiarity with most of the
core language features.&lt;/p&gt;
</summary></entry></feed>