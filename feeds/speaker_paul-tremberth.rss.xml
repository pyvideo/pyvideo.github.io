<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Sat, 02 Nov 2019 00:00:00 +0000</lastBuildDate><item><title>Comment faire confiance aux métadonnées de musique</title><link>https://pyvideo.org/pycon-fr-2019/comment-faire-confiance-aux-metadonnees-de-musique.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Did you know American singer/songwriter Joan Baez has a near-homonym in Colombia, Joan Báez, who plays progressive rock?
Did you know there are (at least) two bands called Aggression that play thrash metal?
Jazzman Avishai Cohen, anyone? There are two contemporary jazz musicians who go by that name.&lt;/p&gt;
&lt;p&gt;At Deezer, the data we receive from music labels is often ambiguous. And if we display an album in the wrong artist page, users get (rightfully!) mad and may turn to the competition the next time they want to listen to their favorite tracks.&lt;/p&gt;
&lt;p&gt;In this talk, I'll present some of the techniques we use to verify our metadata and fix our music catalog.
We leverage several metadata sources to consolidate a &amp;quot;source of truth&amp;quot; which then helps us spot &amp;amp; correct errors in our database.
We'll explore topics like record linkage, bag-of-words, TF-IDF, graph algorithms and community detections. All of this in Python using scikit-learn, scipy and networkx.&lt;/p&gt;
&lt;p&gt;Slides available at &lt;a class="reference external" href="https://speakerdeck.com/ptrmbrth/how-to-trust-music-metadata-pycon-fr-2019"&gt;https://speakerdeck.com/ptrmbrth/how-to-trust-music-metadata-pycon-fr-2019&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Paul Tremberth</dc:creator><pubDate>Sat, 02 Nov 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-11-02:pycon-fr-2019/comment-faire-confiance-aux-metadonnees-de-musique.html</guid></item><item><title>XPath for web scraping</title><link>https://pyvideo.org/pycon-fr-2015/xpath-for-web-scraping.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;All you need to know about XPath 1.0 in a web scraping project: the
different axes, attribute matching, string functions, EXSLT extensions
plus a few other handy patterns like CSS selectors and Javascript
parsing.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;When you need to extract data from web pages, you usually parse HTML
documents into a DOM tree and then use libraries like BeautifulSoup or
the ElementTree API to extract data from it. Some libraries also support
XPath expressions which can express more complex traversal and search
patterns.&lt;/p&gt;
&lt;p&gt;Everything about XPath 1.0 is defined in W3C lengthly specification but
it can be obscure to read at first. The basics are quite simple to grasp
though, and this talk will go over the most useful syntax patterns you
need to get started.&lt;/p&gt;
&lt;p&gt;What we'll cover: - axes and how to look for specific tags, parent
element, children or siblings nodes - predicates and selecting nodes
based on attribute or content values - built-in string functions that
you should know about - EXSLT extensions supported by lxml and how they
can solve tricky lookups&lt;/p&gt;
&lt;p&gt;We'll end the talk with a few handy tips: - how to use CSS selectors to
do some of the above - how to parse Javascript code with XPath&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Paul Tremberth</dc:creator><pubDate>Sat, 17 Oct 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-10-17:pycon-fr-2015/xpath-for-web-scraping.html</guid></item></channel></rss>