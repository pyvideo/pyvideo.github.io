<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_arianne-dee.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2017-08-14T00:00:00+00:00</updated><entry><title>DjangoCon 2017 - GraphQL in the wild</title><link href="https://pyvideo.org/djangocon-us-2017/djangocon-2017-graphql-in-the-wild.html" rel="alternate"></link><published>2017-08-14T00:00:00+00:00</published><updated>2017-08-14T00:00:00+00:00</updated><author><name>Arianne Dee</name></author><id>tag:pyvideo.org,2017-08-14:djangocon-us-2017/djangocon-2017-graphql-in-the-wild.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;GraphQL in the wild by Arianne Dee&lt;/p&gt;
&lt;p&gt;Since being released by Facebook in 2015, GraphQL has gained a lot of hype for being the best thing since sliced bread and REST APIs. But what is all the hype about and how does GraphQL fare in the real world?&lt;/p&gt;
&lt;p&gt;As a Django developer who has been using GraphQL in production since September 2017, I will discuss how we have addressed real-world concerns like performance and security. I will also highlight some of the joys of using GraphQL and why we have stopped writing REST APIs for new features.&lt;/p&gt;
&lt;p&gt;If you have never heard of GraphQL or have never used the Graphene library, have no fear. There will be an overview of what GraphQL is, as well as a demo on how to incorporate it into a Django project using Graphene.&lt;/p&gt;
</summary></entry></feed>