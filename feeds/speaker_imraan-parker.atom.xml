<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_imraan-parker.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2018-10-11T00:00:00+00:00</updated><entry><title>Distributed microservices in the real world</title><link href="https://pyvideo.org/pycon-za-2018/distributed-microservices-in-the-real-world.html" rel="alternate"></link><published>2018-10-11T00:00:00+00:00</published><updated>2018-10-11T00:00:00+00:00</updated><author><name>Imraan Parker</name></author><id>tag:pyvideo.org,2018-10-11:pycon-za-2018/distributed-microservices-in-the-real-world.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk is intended for anyone interested in deploying microservices
in their environment. It examines what is involved in developing,
deploying and maintaining a distributed microservices architecture.
Moving from a monolithic architecture to a services oriented
architecture has many benefits and tradeoffs that need to be addressed.&lt;/p&gt;
&lt;p&gt;One has to consider whether to go with an off the shelf solution or
build your own. When does it make sense to do the latter? Tasks like
monitoring and debugging is more difficult with the added complexity
that is inherent with a distributed system.&lt;/p&gt;
&lt;p&gt;This first part of the talk reviews what needs to be considered when
deciding to build applications on a distributed microservices
architecture. Topics that will be covered include:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Why choose a microservices architecture, and when not to?&lt;/li&gt;
&lt;li&gt;Objectives of a distributed services architecture&lt;ul&gt;
&lt;li&gt;Service presence&lt;/li&gt;
&lt;li&gt;Heartbeating&lt;/li&gt;
&lt;li&gt;Logging&lt;/li&gt;
&lt;li&gt;Security&lt;/li&gt;
&lt;li&gt;Reliability&lt;/li&gt;
&lt;li&gt;Performance and Scalability&lt;/li&gt;
&lt;li&gt;Monitoring&lt;/li&gt;
&lt;li&gt;Troubleshooting&lt;/li&gt;
&lt;li&gt;Message contracts&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The second part of the talk delves into the micorservices framework
built and used by CareerJunction. It is an in house framework written in
Python 3 (3.5+) which uses asyncio for nonblocking I/O and ZeroMQ as a
concurrency networking library.&lt;/p&gt;
&lt;p&gt;In simple terms, the framework implements a reliable service-oriented
request- reply dialog between a set of client applications, a set of
brokers and a set of worker applications.&lt;/p&gt;
&lt;p&gt;The features of the framework include those discussed in the first part
of the talk and will be showcased by coding and deploying a service.
Above and beyond that, the following topics will be covered:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Conceptual architecture&lt;/li&gt;
&lt;li&gt;Architecture goals&lt;/li&gt;
&lt;li&gt;Coding a service&lt;ul&gt;
&lt;li&gt;Creating and running a service&lt;/li&gt;
&lt;li&gt;Message contract parameters&lt;/li&gt;
&lt;li&gt;Exposing services via HTTP&lt;/li&gt;
&lt;li&gt;Scheduled Jobs&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The last part of the talk examines the lessons learnt over the past few
years, what to avoid and the benefits it brought not only to the IT
team, but to the business as a whole. Topics that will be covered
include:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;IT benefits&lt;/li&gt;
&lt;li&gt;Business benefits&lt;/li&gt;
&lt;li&gt;What to avoid?&lt;/li&gt;
&lt;/ul&gt;
</summary></entry></feed>