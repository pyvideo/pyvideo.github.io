<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_marius-van-niekerk.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2019-11-05T00:00:00+00:00</updated><entry><title>A How-to guide for migrating legacy data applications</title><link href="https://pyvideo.org/pydata-new-york-city-2019/a-how-to-guide-for-migrating-legacy-data-applications.html" rel="alternate"></link><published>2019-11-05T00:00:00+00:00</published><updated>2019-11-05T00:00:00+00:00</updated><author><name>Marius van Niekerk</name></author><id>tag:pyvideo.org,2019-11-05:pydata-new-york-city-2019/a-how-to-guide-for-migrating-legacy-data-applications.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Migrating legacy applications can be daunting. They are frequently large, poorly tested, undermaintained, yet business critical. Over time they may end up relying on deprecated technology and unprepared for changing business needs. Weâ€™ll cover lessons learned in migrating such an application to something maintainable, sharing details on how to go about it in a safe and systematic manner.&lt;/p&gt;
</summary></entry><entry><title>Conda Forge - Community Driven Packaging That Works for You</title><link href="https://pyvideo.org/pydata-new-york-city-2018/conda-forge-community-driven-packaging-that-works-for-you.html" rel="alternate"></link><published>2018-08-17T00:00:00+00:00</published><updated>2018-08-17T00:00:00+00:00</updated><author><name>Marius van Niekerk</name></author><id>tag:pyvideo.org,2018-08-17:pydata-new-york-city-2018/conda-forge-community-driven-packaging-that-works-for-you.html</id><summary type="html"></summary></entry><entry><title>Integrating Scala/Java with your Python code</title><link href="https://pyvideo.org/pydata-carolinas-2016/integrating-scalajava-with-your-python-code.html" rel="alternate"></link><published>2016-09-15T00:00:00+00:00</published><updated>2016-09-15T00:00:00+00:00</updated><author><name>Marius van Niekerk</name></author><id>tag:pyvideo.org,2016-09-15:pydata-carolinas-2016/integrating-scalajava-with-your-python-code.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Occasionally Python-focused data shops need to use JVM languages for
performance reasons. Generally this necessitates throwing away whole
repositories of Python code and starting over or resorting to interop
architectures (e.g., Apache thrift) which increase system complexity.
We provide a technique (and a new library, spylon) for interoperating
easily with the JVM from Python.&lt;/p&gt;
</summary></entry></feed>