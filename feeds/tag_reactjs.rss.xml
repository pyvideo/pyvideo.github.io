<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org - ReactJs</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Sun, 05 Jul 2020 00:00:00 +0000</lastBuildDate><item><title>useFlask() - or how to use a React frontend for your Flask app</title><link>https://pyvideo.org/flaskcon-2020/useflask-or-how-to-use-a-react-frontend-for-your-flask-app.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Many Flask projects nowadays still use mostly static HTML, WTForms and just a bit of AJAX. All the JavaScript is usually included straight from .js files or just minified with Python tools like webassets. But the JavaScript ecosystem has evolved a lot - one can now use tools like Babel to write modern JS even when targeting older browsers and a Webpack+Babel build is very straightforward and allows for advanced preprocessing of JavaScript code. In this talk we'll even go one step further and not only use Webpack to build the assets, but also integrate a small demo Flask app with a React frontend where the Flask app only serves the static HTML page and uses a RESTful API to communicate with the React app. We'll also look into how to keep convenient Flask features such as URL building in client-side code (using the js-flask-urls package) and of course React hooks will be used!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Adrian Mönnich</dc:creator><pubDate>Sun, 05 Jul 2020 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2020-07-05:/flaskcon-2020/useflask-or-how-to-use-a-react-frontend-for-your-flask-app.html</guid><category>FlaskCon 2020</category><category>ReactJs</category><category>Flask</category><category>FlaskCon</category></item><item><title>Choose Your Own Adventure for Client Web Services with GraphQL</title><link>https://pyvideo.org/pycon-italia-2018/choose-your-own-adventure-for-client-web-services-with-graphql.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;div class="section" id="summary"&gt;
&lt;h4&gt;Summary&lt;/h4&gt;
&lt;p&gt;In this talk, we discuss Facebook’s graphql standard, an a la carte way
for front end clients to consume data from the backend, the python
implementation of that standard (graphine), basic queries and mutations,
and some advanced techniques. We’ll work up from shared principals with
traditional REST web services to the new paradigm of data specific to
each client request and how this makes backend and frontend developers
happier and more productive.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="audience-experience"&gt;
&lt;h4&gt;Audience Experience&lt;/h4&gt;
&lt;p&gt;Intermediate (requires some knowledge of Python, Django, REST web
services, etc. But will try to build a shared understanding of the core
concepts).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="duration"&gt;
&lt;h4&gt;Duration&lt;/h4&gt;
&lt;p&gt;45 minutes&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;About me, Prologue to the Adventure (5m)&lt;/li&gt;
&lt;li&gt;Chapter 1 - Architecture and Design (15m)&lt;/li&gt;
&lt;li&gt;Chapter 2 - Advanced Considerations (Authentication, Scaling,
Performance, Rate Limiting, etc.) (10m)&lt;/li&gt;
&lt;li&gt;Chapter 3 - Authentication and Building a Rich Client Web Application
(10m)&lt;/li&gt;
&lt;li&gt;Epilogue + Questions (5m)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;in __on &lt;strong&gt;domenica 22 aprile&lt;/strong&gt; at 11:15 &lt;a class="reference external" href="/p3/schedule/pycon9/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">David Anderson</dc:creator><pubDate>Sun, 22 Apr 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-04-22:/pycon-italia-2018/choose-your-own-adventure-for-client-web-services-with-graphql.html</guid><category>PyCon Italia 2018</category><category>Relay</category><category>reactjs</category><category>django</category><category>graphql</category><category>Graphine</category><category>Apollo</category></item><item><title>Going Isomorphic with Django and React</title><link>https://pyvideo.org/pycon-italia-2018/going-isomorphic-with-django-and-react.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In web development, an isomorphic application is one whose code (in this
case, JavaScript) can run both in the server (in this case, Django) and
the client. In this talk we will understand how it works and why it can
be useful in the daily life. This talk is for developers (both
backenders and frontenders) who believe in “DRY” and will love to learn
something new.&lt;/p&gt;
&lt;p&gt;repo: &lt;a class="reference external" href="https://github.com/nostalgiaz/django-react-ssr"&gt;https://github.com/nostalgiaz/django-react-ssr&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;sabato 21 aprile&lt;/strong&gt; at 18:30 &lt;a class="reference external" href="/p3/schedule/pycon9/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mattia Larentis</dc:creator><pubDate>Sat, 21 Apr 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-04-21:/pycon-italia-2018/going-isomorphic-with-django-and-react.html</guid><category>PyCon Italia 2018</category><category>typescript</category><category>Python</category><category>reactjs</category><category>isomorphic</category><category>django</category><category>rendering</category><category>javascript</category><category>browser</category></item><item><title>Building a Celery alternative in Django on Kubernetes</title><link>https://pyvideo.org/pycon-italia-2019/building-a-celery-alternative-in-django-on-kubernetes.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Every used Celery and been frustrated by the complexity of RabbitMQ, the
Redis visibility timeout, or the deprecated Postgres support? Wish there
was better support for composing tasks into workflows and a web UI for
viewing status and logs? I’ve been working with Celery for years; it is
a great tool but I wanted to build something that fit my use cases
better so I started a new task execution framework.&lt;/p&gt;
&lt;p&gt;This talk isn’t about that framework, however. It is about how to use
Django and React together, how to take advantage of more advanced
Postgres features like recursive queries and select-for-update row
locking, and how to deploy the resulting application onto Google Cloud
Platform’s hosted Kubernetes solution. I hope it is valuable as a how-to
guide covering many current best practices, from CLI and API design to
high-availability and continuous deployment. Everything is open-sourced
on GitHub at &lt;a class="reference external" href="https://github.com/aclowes/yawn"&gt;https://github.com/aclowes/yawn&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Feedback form: &lt;a class="reference external" href="https://python.it/feedback-1568"&gt;https://python.it/feedback-1568&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;Friday 3 May&lt;/strong&gt; at 17:15 &lt;a class="reference external" href="/en/sprints/schedule/pycon10/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alec Clowes</dc:creator><pubDate>Fri, 03 May 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-05-03:/pycon-italia-2019/building-a-celery-alternative-in-django-on-kubernetes.html</guid><category>PyCon Italia 2019</category><category>celery</category><category>reactjs</category><category>postgresql</category><category>kubernetes</category><category>django</category></item></channel></rss>