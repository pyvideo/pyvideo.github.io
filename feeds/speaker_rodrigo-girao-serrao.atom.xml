<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org - Rodrigo Girão Serrão</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_rodrigo-girao-serrao.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2025-05-16T00:00:00+00:00</updated><subtitle></subtitle><entry><title>Pydon'ts – Write elegant Python code (v1.1)</title><link href="https://pyvideo.org/djangocon-us-2021/pydonts-write-elegant-python-code-v11.html" rel="alternate"></link><published>2021-10-23T00:00:00+00:00</published><updated>2021-10-23T00:00:00+00:00</updated><author><name>Rodrigo Girão Serrão</name></author><id>tag:pyvideo.org,2021-10-23:/djangocon-us-2021/pydonts-write-elegant-python-code-v11.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk I show what idiomatic Python code looks like and illustrate how the subjective notion of &amp;quot;beautiful&amp;quot;, or &amp;quot;elegant&amp;quot; code, can make your code objectively better, regardless of your Python skill level.&lt;/p&gt;
&lt;p&gt;We do that by visiting several vanilla Python features that people sometimes forget to learn …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk I show what idiomatic Python code looks like and illustrate how the subjective notion of &amp;quot;beautiful&amp;quot;, or &amp;quot;elegant&amp;quot; code, can make your code objectively better, regardless of your Python skill level.&lt;/p&gt;
&lt;p&gt;We do that by visiting several vanilla Python features that people sometimes forget to learn, as they rush to &lt;tt class="docutils literal"&gt;import&lt;/tt&gt; ing all the shiny modules and frameworks they really want to use.&lt;/p&gt;
&lt;p&gt;In order to achieve this, we go through the learning journey of a hypothetical Pythonista, taking a function written by them and refactoring it incrementally through the use of Pythonic idioms and patterns.&lt;/p&gt;
&lt;p&gt;The whole talk will build around a weekly series of articles I have been publishing, where I explore all the vanilla Python features that make Python one of the most interesting programming languages to learn.&lt;/p&gt;
</content><category term="DjangoCon US 2021"></category></entry><entry><title>Fifty shades of `sign`</title><link href="https://pyvideo.org/pycascades-2022/fifty-shades-of-sign.html" rel="alternate"></link><published>2022-02-06T00:00:00+00:00</published><updated>2022-02-06T00:00:00+00:00</updated><author><name>Rodrigo Girão Serrão</name></author><id>tag:pyvideo.org,2022-02-06:/pycascades-2022/fifty-shades-of-sign.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;(Rodrigo Girão Serrão) The Zen of Python says &amp;quot;there should be one -- and preferably only one -- obvious way to do it&amp;quot;, but what if there's a dozen obvious ways to do it?&lt;/p&gt;
&lt;p&gt;In this talk we take a look at over a dozen implementations of a &lt;em&gt;very&lt;/em&gt; simple function …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;(Rodrigo Girão Serrão) The Zen of Python says &amp;quot;there should be one -- and preferably only one -- obvious way to do it&amp;quot;, but what if there's a dozen obvious ways to do it?&lt;/p&gt;
&lt;p&gt;In this talk we take a look at over a dozen implementations of a &lt;em&gt;very&lt;/em&gt; simple function: the &lt;cite&gt;sign&lt;/cite&gt; function.
The &lt;cite&gt;sign&lt;/cite&gt; function should return -1 for negative numbers, 1 for positive numbers, and 0 if the input is 0. Simple, right?
And it is, but there are multiple implementations that we can look at.&lt;/p&gt;
&lt;p&gt;As we do so, we try to decide which alternative is the best and we even explore a couple of more intricate Python subtleties!
As an example of some of those subtleties, we'll look at Boolean arithmetic, Boolean to integer conversion, and (chained) conditional expressions.&lt;/p&gt;
&lt;p&gt;As we look at different implementations, we try to decide which one is the best. We will do some profiling, but we'll also realise that that's hardly the most important metric to use!&lt;/p&gt;
&lt;p&gt;Which implementation will be the best?&lt;/p&gt;
&lt;p&gt;You can find the talk slides [on GitHub][1] and a written version of the talk [on my blog][2].&lt;/p&gt;
</content><category term="PyCascades 2022"></category></entry><entry><title>The Pokémon trainer's guide to pandas and matplotlib</title><link href="https://pyvideo.org/pycon-us-2024/the-pokemon-trainers-guide-to-pandas-and-matplotlib.html" rel="alternate"></link><published>2024-05-15T00:00:00+00:00</published><updated>2024-05-15T00:00:00+00:00</updated><author><name>Rodrigo Girão Serrão</name></author><id>tag:pyvideo.org,2024-05-15:/pycon-us-2024/the-pokemon-trainers-guide-to-pandas-and-matplotlib.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Pandas and matplotlib are two staples of the Python ecosystem and
fundamental if you're delving into the world of data science.&lt;/p&gt;
&lt;p&gt;In this tutorial, we'll dispense with the typical and uninteresting data
sets or highly theoretical introductions, and instead we'll use data
from the &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Pokémon"&gt;Pokémon franchise&lt;/a&gt;
to provide a …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Pandas and matplotlib are two staples of the Python ecosystem and
fundamental if you're delving into the world of data science.&lt;/p&gt;
&lt;p&gt;In this tutorial, we'll dispense with the typical and uninteresting data
sets or highly theoretical introductions, and instead we'll use data
from the &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Pokémon"&gt;Pokémon franchise&lt;/a&gt;
to provide a fun, hands-on introduction to the basics of data science
with pandas and matplotlib.&lt;/p&gt;
&lt;p&gt;You don't need to be a Pokémon enthusiast or connoisseur to join! All
you need to know is that this won't be your typical pandas tutorial.&lt;/p&gt;
</content><category term="PyCon US 2024"></category></entry><entry><title>503 days working full-time on FOSS: lessons learned</title><link href="https://pyvideo.org/pycon-us-2025/503-days-working-full-time-on-foss-lessons-learned.html" rel="alternate"></link><published>2025-05-16T00:00:00+00:00</published><updated>2025-05-16T00:00:00+00:00</updated><author><name>Rodrigo Girão Serrão</name></author><id>tag:pyvideo.org,2025-05-16:/pycon-us-2025/503-days-working-full-time-on-foss-lessons-learned.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;I worked full-time on a Python FOSS project (Textual) for 503 days, so what did I learn?&lt;/p&gt;
&lt;p&gt;Am I a better (Python) programmer? Am I a better teammate? Am I a better person?&lt;/p&gt;
&lt;p&gt;In this talk, I will share some lessons I learned over the course of these 503 …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;I worked full-time on a Python FOSS project (Textual) for 503 days, so what did I learn?&lt;/p&gt;
&lt;p&gt;Am I a better (Python) programmer? Am I a better teammate? Am I a better person?&lt;/p&gt;
&lt;p&gt;In this talk, I will share some lessons I learned over the course of these 503 days:&lt;/p&gt;
&lt;p&gt;How to get a tech job in this day &amp;amp; age
How to put your ego aside when working with others
How to deal with mistakes
How to interact with users &amp;amp; contributors online
How it feels to collaborate to a large codebase&lt;/p&gt;
&lt;p&gt;As for the first 3 questions... Ask my colleagues!&lt;/p&gt;
</content><category term="PyCon US 2025"></category></entry><entry><title>Lightning Talks - Friday</title><link href="https://pyvideo.org/pycon-us-2025/lightning-talks-friday.html" rel="alternate"></link><published>2025-05-16T00:00:00+00:00</published><updated>2025-05-16T00:00:00+00:00</updated><author><name>Rodrigo Girão Serrão</name></author><id>tag:pyvideo.org,2025-05-16:/pycon-us-2025/lightning-talks-friday.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A collection of lightning talks made by the community.&lt;/p&gt;
&lt;p&gt;2:05 - Rodrigo Girão Serrão - Meta lightning talk
7:15 - Laís Carvalho - Join Humble Data!
10:05 - Cheuk Ting Ho - Too many swags!! Let's review the swags so we know who's giving us good stuff
14:40 - Quang Vu - Enhancing …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A collection of lightning talks made by the community.&lt;/p&gt;
&lt;p&gt;2:05 - Rodrigo Girão Serrão - Meta lightning talk
7:15 - Laís Carvalho - Join Humble Data!
10:05 - Cheuk Ting Ho - Too many swags!! Let's review the swags so we know who's giving us good stuff
14:40 - Quang Vu - Enhancing My Archery Practice with Computer Vision
18:55 - Meagen Voss - Maaah! How I Killed My Site with a Goat Gif
24:25 - Will Lachance - How much energy will my solar panels produce?
29:10 - Amanda Lundberg - Captioner is Human
33:55 - Thomas Weiss - Predicting Fire Weather Using Historical RAWS Data
38:25 - Tom Rutherford - The power and danger of os.fork
42:45 - Cody Maloney - Remember to .close() file-like objects
47:25 - Anthony Shaw - CSnakes: Python in .NET
52:55 - Trey Hunner - Systems, gates, and rage&lt;/p&gt;
</content><category term="PyCon US 2025"></category></entry><entry><title>Comprehending Comprehensions</title><link href="https://pyvideo.org/pyohio-2022/comprehending-comprehensions.html" rel="alternate"></link><published>2022-07-30T00:00:00+00:00</published><updated>2022-07-30T00:00:00+00:00</updated><author><name>Rodrigo Girão Serrão</name></author><id>tag:pyvideo.org,2022-07-30:/pyohio-2022/comprehending-comprehensions.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this short talk, I will introduce all the key ideas necessary for you
to finally understand comprehensions: list, dict, and set
comprehensions, plus generator expressions.&lt;/p&gt;
&lt;p&gt;I will explain the &lt;strong&gt;key&lt;/strong&gt; argument in favour of list comprehensions and
I will show how to turn any suitable loop into its …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this short talk, I will introduce all the key ideas necessary for you
to finally understand comprehensions: list, dict, and set
comprehensions, plus generator expressions.&lt;/p&gt;
&lt;p&gt;I will explain the &lt;strong&gt;key&lt;/strong&gt; argument in favour of list comprehensions and
I will show how to turn any suitable loop into its equivalent
comprehension.&lt;/p&gt;
&lt;p&gt;By the time the talk is over, you'll be much closer to getting your
black belt in comprehension-fu.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;References&lt;/strong&gt;: you &lt;a class="reference external" href="https://gum.co/comprehending-comprehensions"&gt;can get the ebook “Comprehending Comprehensions”&lt;/a&gt;
and you can find the talk slides &lt;a class="reference external" href="https://github.com/mathspp/talks"&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;
</content><category term="PyOhio 2022"></category></entry><entry><title>Animations from First Principles</title><link href="https://pyvideo.org/pyohio-2023/animations-from-first-principles.html" rel="alternate"></link><published>2023-12-16T00:00:00+00:00</published><updated>2023-12-16T00:00:00+00:00</updated><author><name>Rodrigo Girão Serrão</name></author><id>tag:pyvideo.org,2023-12-16:/pyohio-2023/animations-from-first-principles.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;How do animations really work?&lt;/p&gt;
&lt;p&gt;How do you create an animation?&lt;/p&gt;
&lt;p&gt;What if you want to morph a circle into a figure eight?&lt;/p&gt;
&lt;p&gt;As it turns out, all you need is two or three functions and a loop!&lt;/p&gt;
&lt;p&gt;In this talk, we'll go over the basic concepts and code …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;How do animations really work?&lt;/p&gt;
&lt;p&gt;How do you create an animation?&lt;/p&gt;
&lt;p&gt;What if you want to morph a circle into a figure eight?&lt;/p&gt;
&lt;p&gt;As it turns out, all you need is two or three functions and a loop!&lt;/p&gt;
&lt;p&gt;In this talk, we'll go over the basic concepts and code needed to create
an animation &lt;em&gt;from first principles&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Because the talk presents the ideas and the code from first principles,
you will be able to take the key concepts and build your own animations!&lt;/p&gt;
</content><category term="PyOhio 2023"></category></entry></feed>