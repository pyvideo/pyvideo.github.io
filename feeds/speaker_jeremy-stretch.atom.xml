<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org - Jeremy Stretch</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_jeremy-stretch.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2021-10-23T00:00:00+00:00</updated><subtitle></subtitle><entry><title>Leveraging the ORM to enforce object-level permissions</title><link href="https://pyvideo.org/djangocon-us-2021/leveraging-the-orm-to-enforce-object-level-permissions.html" rel="alternate"></link><published>2021-10-23T00:00:00+00:00</published><updated>2021-10-23T00:00:00+00:00</updated><author><name>Jeremy Stretch</name></author><id>tag:pyvideo.org,2021-10-23:/djangocon-us-2021/leveraging-the-orm-to-enforce-object-level-permissions.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Django provides a robust permissions system out of the box, but it’s limited to operating at the model level. What if you want to assign permissions to create, modify, or delete only objects with certain attributes? In NetBox, we did exactly this by leveraging the ORM, JSON, and …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Django provides a robust permissions system out of the box, but it’s limited to operating at the model level. What if you want to assign permissions to create, modify, or delete only objects with certain attributes? In NetBox, we did exactly this by leveraging the ORM, JSON, and database transactions. We’ll quickly demonstrate how easy Django makes it to create a custom authentication backend and permission model to accommodate even complex object-based constraints.&lt;/p&gt;
</content><category term="DjangoCon US 2021"></category></entry></feed>