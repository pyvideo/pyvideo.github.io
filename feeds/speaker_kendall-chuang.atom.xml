<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_kendall-chuang.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2018-10-15T00:00:00+00:00</updated><entry><title>A Python-Driven Web App Framework with Django, Channels, and React</title><link href="https://pyvideo.org/djangocon-us-2018/a-python-driven-web-app-framework-with-django-channels-and-react.html" rel="alternate"></link><published>2018-10-15T00:00:00+00:00</published><updated>2018-10-15T00:00:00+00:00</updated><author><name>Kendall Chuang</name></author><id>tag:pyvideo.org,2018-10-15:djangocon-us-2018/a-python-driven-web-app-framework-with-django-channels-and-react.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;At our company, we have faced a monumental task: designing a simple
framework for data scientists to create powerful, dynamic web
applications using only Python. In order to utilize the power of our
machine-intelligence platform, we need to be able to quickly generate
web applications to cater to different client solutions. We wanted to
move standard data analysis workflows out of the command line, and into
sleek, modern web apps that allow for dynamic construction of charts,
tables, and other visualizations.&lt;/p&gt;
&lt;p&gt;Our talk will focus on how we addressed this problem statement with the
development of an application framework built on Django, Channels, and
React. We picked these technologies for several reasons. Django is
already an incredibly powerful web framework, and we realized very early
on that we could use Django Models, Forms, and Form Validation to serve
as the core of our backend. However, we opted to take a different
approach than server-side rendering, and opted to utilize React on the
frontend to display large trees of dynamically-generated components.&lt;/p&gt;
&lt;p&gt;To connect these two segments, we decided to use websockets, via Django
Channels. Our machine intelligence platform is incredibly powerful, and
it allows us to perform tasks on big data with long-running jobs, such
as topological modeling, auto-group generation, and feature selection.
We use Channels as a way for the Django server to notify the React
client on updates to these processes and to refresh different charts and
tables.&lt;/p&gt;
&lt;p&gt;Lastly, we designed our own Python SDK to allow data scientists to
easily generate Python objects which are serialized and converted into
React components. A developer using this framework doesn’t need to know
Django, React, or Channels, but can utilize the power of all three in
concert to quickly prototype powerful machine-learning applications with
appealing user interfaces.&lt;/p&gt;
&lt;p&gt;Throughout this talk, we will focus on how these technologies interact
with one another, the benefits of these design-choices, and the
challenges that we faced. The potential applications of this
architecture extend far beyond our solutions, and it’s valuable for
listeners to understand how Django can be used outside of traditional
contexts. Hopefully this talk will inspire other Django developers to
consider how their apps can utilize websockets, client- side rendering,
and other web-development paradigms to address different and unique
use-cases.&lt;/p&gt;
</summary></entry><entry><title>TensorFlow on the Web</title><link href="https://pyvideo.org/pybay-2016/tensorflow-on-the-web.html" rel="alternate"></link><published>2016-08-21T00:00:00+00:00</published><updated>2016-08-21T00:00:00+00:00</updated><author><name>Kendall Chuang</name></author><id>tag:pyvideo.org,2016-08-21:pybay-2016/tensorflow-on-the-web.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk will be about walking through the steps to put a TensorFlow project into production on the web with Flask and Heroku. The goal is to introduce the project and show how TensorFlow can be used online for real data tasks, and discuss other considerations for deployment of a TensorFlow project.
​
Abstract
TensorFlow is a deep learning library with Python and C++ bindings that was released in 2015. The talk start with a brief intro to TensorFlow, and then dive into the specific steps to set up a simple project that can be served online.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bio:&lt;/strong&gt;
Kendall is a lead software engineer at YesGraph, where he uses machine learning and Flask to power better invite flows for mobile and web apps. Previously he worked as an independent software consultant for four years, and before that he was a hardware designer at Qualcomm in San Diego for three years. Kendall was an an organizer of the San Diego Python Users Group, where he helped plan six one-day workshops on various Python topics.
​
Bio2
David Clark has a background in astrophysics, where he used Python extensively to analyze astronomical data. He recently transitioned careers to data science. Currently he is doing consulting for two startups. At Palo Alto Scientific, Inc., he uses the machine learning library TensorFlow to model sensor data from a wearable and infer a runner’s performance. He is also doing work for Quantea, Inc., making a dashboard using the Python libraries Bokeh and Pandas.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://speakerdeck.com/pybay2016/kendall-chuang-david-clark-tensorflow-on-the-web"&gt;https://speakerdeck.com/pybay2016/kendall-chuang-david-clark-tensorflow-on-the-web&lt;/a&gt;&lt;/p&gt;
</summary><category term="tensorflow"></category></entry></feed>