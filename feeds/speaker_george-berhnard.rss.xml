<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Sat, 08 Apr 2017 00:00:00 +0000</lastBuildDate><item><title>Performant Python</title><link>https://pyvideo.org/pycon-italia-2017/performant-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python is a great language. Easy to learn, friendly to use, widely used.&lt;/p&gt;
&lt;p&gt;It is not, however, renowned for being fast. In a lot of situations
that does not matter. Sometimes it really does. This talk will
introduce you to some tools and techniques for making sure your
Python code becomes fast enough – without turning into a maintenance
nightmare. Fast code does not have to be unreadable - and when you’re
writing Python, it really pays of to think “pythonically”.&lt;/p&gt;
&lt;p&gt;That does mean using the included batteries, and utilising the
ecosystem of tools around the language, too.&lt;/p&gt;
&lt;p&gt;Warning: may contain small bits of other languages.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">George Berhnard</dc:creator><pubDate>Sat, 08 Apr 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-04-08:pycon-italia-2017/performant-python.html</guid></item></channel></rss>