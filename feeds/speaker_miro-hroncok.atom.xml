<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_miro-hroncok.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2017-06-08T00:00:00+00:00</updated><entry><title>If it Moves, Test it Anyway</title><link href="https://pyvideo.org/pycon-cz-2016/if-it-moves-test-it-anyway.html" rel="alternate"></link><published>2016-10-28T00:00:00+00:00</published><updated>2016-10-28T00:00:00+00:00</updated><author><name>Miro Hrončok</name></author><id>tag:pyvideo.org,2016-10-28:pycon-cz-2016/if-it-moves-test-it-anyway.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;If it Moves, Test it Anyway&lt;/p&gt;
&lt;p&gt;Now you write tests and you want them to be part of the project, run on your CI etc., but:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;the API is secured by a secret token/password/cookie...&lt;/li&gt;
&lt;li&gt;the information on the webpage changes&lt;/li&gt;
&lt;li&gt;it's not even accessible from the wild web&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So how do you test it? You can mock the server part (that's messy),
you can spin off your own testing server (that's hard) or you can
record the HTTP communication with betamax (that's super simple).
I'll show you all the methods and their good, bad and ugly parts.&lt;/p&gt;
</summary></entry><entry><title>Should I mock or should I not?</title><link href="https://pyvideo.org/pycon-cz-2017/should-i-mock-or-should-i-not.html" rel="alternate"></link><published>2017-06-08T00:00:00+00:00</published><updated>2017-06-08T00:00:00+00:00</updated><author><name>Miro Hrončok</name></author><id>tag:pyvideo.org,2017-06-08:pycon-cz-2017/should-i-mock-or-should-i-not.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Mocking. Excellent thing. It allows you to replace parts of your
system under test with mock objects and make assertions about how
they have been used. That makes your life easier when writing tests.
Until it makes your live miserable. Which practices with mocking are
considered good, which are considered bad and what shall you never do
or you will die a horrible death? How to avoid mocking? And should
you try to avoid it at all cost? All you wanted to ask about the pros
and cons of mocking. Demos!&lt;/p&gt;
</summary></entry><entry><title>Lightning talks: Flask Elsa</title><link href="https://pyvideo.org/pycon-sk-2017/lightning-talks-flask-elsa.html" rel="alternate"></link><published>2017-03-12T00:00:00+00:00</published><updated>2017-03-12T00:00:00+00:00</updated><author><name>Miro Hrončok</name></author><id>tag:pyvideo.org,2017-03-12:pycon-sk-2017/lightning-talks-flask-elsa.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Lightning talks: Miro - Flask Elsa&lt;/p&gt;
</summary><category term="lightning talks"></category></entry></feed>