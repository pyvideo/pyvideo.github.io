<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_scott-irwin.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2019-06-15T00:00:00+00:00</updated><entry><title>Dunder methods are special</title><link href="https://pyvideo.org/pylondinium-2019/dunder-methods-are-special.html" rel="alternate"></link><published>2019-06-15T00:00:00+00:00</published><updated>2019-06-15T00:00:00+00:00</updated><author><name>Scott Irwin</name></author><id>tag:pyvideo.org,2019-06-15:pylondinium-2019/dunder-methods-are-special.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Special methods are those methods on a type which are called implicitly by Python to execute a certain operation (e.g., addition). These methods have distinctive names which start and end with double underscores (aka dunder).&lt;/p&gt;
&lt;p&gt;Dunder methods are a language feature which allows developers to implement custom types which have the same features and expressiveness as the Python standard types.&lt;/p&gt;
&lt;p&gt;It is impossible to discuss all of the various dunder methods in a single 25-minute talk, so we will focus on a selected subset of dunder methods. We will discuss how and why you would implement them and in which situations Python will implicitly call them.&lt;/p&gt;
</summary></entry><entry><title>Dataclasses are here. Now what?</title><link href="https://pyvideo.org/pygotham-2018/dataclasses-are-here-now-what.html" rel="alternate"></link><published>2018-10-06T00:00:00+00:00</published><updated>2018-10-06T00:00:00+00:00</updated><author><name>Scott Irwin</name></author><id>tag:pyvideo.org,2018-10-06:pygotham-2018/dataclasses-are-here-now-what.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The PEP 557 dataclasses module is one of the new features added in Python 3.7 and are a decorator which generates the boiler-plate code needed by a data container class. In addition to providing access to stored data values by name, they provide a easy mechanism for including additional features such as default values and customized ordering.&lt;/p&gt;
&lt;p&gt;In this talk we will explore dataclasses from a data container perspective by asking several questions.
- How should one use dataclasses?
- What functionality do dataclasses provide?
- How do these features compare to existing data structures in the standard library like NamedTuple, and dict?
- What about the third-party package attrs?
- What are some additional features of dataclasses?
- When might one want to use dataclasses?&lt;/p&gt;
</summary></entry></feed>