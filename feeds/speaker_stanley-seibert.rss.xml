<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org - Stanley Seibert</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Mon, 08 Jul 2024 00:00:00 +0000</lastBuildDate><item><title>Accelerating Python with the Numba JIT Compiler</title><link>https://pyvideo.org/scipy-2015/accelerating-python-with-the-numba-jit-compiler.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Stanley Seibert</dc:creator><pubDate>Fri, 10 Jul 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-07-10:/scipy-2015/accelerating-python-with-the-numba-jit-compiler.html</guid><category>SciPy 2015</category></item><item><title>How to Accelerate an Existing Codebase with Numba</title><link>https://pyvideo.org/scipy-2019/how-to-accelerate-an-existing-codebase-with-numba.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;If you have ever said to yourself &amp;quot;my code works, but it is too slow!&amp;quot; then this is the talk for you. We will describe best practices for applying the Numba just-in-time compiler to an existing project. This includes techniques for assessing whether Numba is appropriate for your use case, analyzing your program to identify where Numba can help, modifying your core algorithms to be Numba compatible, and understanding compiler errors. In addition, we'll discuss considerations for packaging and distribution of projects that depend on Numba.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Siu Kwan Lam</dc:creator><pubDate>Sat, 13 Jul 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-07-13:/scipy-2019/how-to-accelerate-an-existing-codebase-with-numba.html</guid><category>SciPy 2019</category></item><item><title>Continuous Integration for Scientific Python Projects</title><link>https://pyvideo.org/scipy-2020/continuous-integration-for-scientific-python-projects.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Stanley Seibert</dc:creator><pubDate>Mon, 06 Jul 2020 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2020-07-06:/scipy-2020/continuous-integration-for-scientific-python-projects.html</guid><category>SciPy 2020</category></item><item><title>PIXIE: Blending Just-in-time and Ahead-of-time compilation</title><link>https://pyvideo.org/scipy-2024/pixie-blending-just-in-time-and-ahead-of-time-compilation.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Speeding up Python code traditionally involves the use of Just-In-Time (JIT) or Ahead-Of-Time (AOT) compilation. There are tradeoffs to both approaches, however. As part of the Numba project's aim to create a compiler toolkit, the PIXIE project is being developed. It offers a multiple-language consuming, extensible toolchain, that produces AOT compiled binary extension modules. These PIXIE based extension modules contain CPU-specific function dispatch for AOT use and also support something similar to Link-Time-Optimization (LTO) for use in situations such as JIT compilation and/or cross module optimization. PIXIE modules are easy to load and call from Python, and can be inlined into Numba JIT compilation, giving Python developers access to the benefits of both AOT and JIT.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Stuart Archibald</dc:creator><pubDate>Mon, 08 Jul 2024 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2024-07-08:/scipy-2024/pixie-blending-just-in-time-and-ahead-of-time-compilation.html</guid><category>SciPy 2024</category></item></channel></rss>