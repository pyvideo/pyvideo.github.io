<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_nicolas-crocfer.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2018-10-06T00:00:00+00:00</updated><entry><title>Calculer la QOS de vos infrastructures avec Asyncio</title><link href="https://pyvideo.org/pycon-fr-2018/calculer-la-qos-de-vos-infrastructures-avec-asyncio.html" rel="alternate"></link><published>2018-10-06T00:00:00+00:00</published><updated>2018-10-06T00:00:00+00:00</updated><author><name>Nicolas Crocfer</name></author><id>tag:pyvideo.org,2018-10-06:pycon-fr-2018/calculer-la-qos-de-vos-infrastructures-avec-asyncio.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Notre équipe, composée de 4 développeurs chez OVH, travaille depuis
plusieurs mois sur un projet nommé DEPC (Dependency Checker).&lt;/p&gt;
&lt;p&gt;Cet outil, composé d'une API et d'une WebUI, offre 2 fonctionnalités
principales :&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;manager un graphe de dépendances entre les services d'OVH via la base
de données Neo4j,&lt;/li&gt;
&lt;li&gt;calculer la QOS de chaque noeud du graphe en fonction de metrics
hébergées sur des bases de données TimeSeries.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;L'outil a été initialement développé avec Flask et SQLAlchemy, mais
quelques problèmes de performance, lié à des soucis de scaling Celery,
nous ont poussés à le migrer vers une solution asynchrone. Nous sommes
donc parti sur Asyncio via le framework Sanic, en combinaison avec Gino
pour l'accès à la base de données.&lt;/p&gt;
&lt;p&gt;Le sujet de cette conférence portera sur ce retour d'expérience : nous
aborderons les gains de performances par rapport à l'ancienne stack,
mais également les problèmes que nous avons rencontrés durant la
migration.&lt;/p&gt;
</summary></entry></feed>