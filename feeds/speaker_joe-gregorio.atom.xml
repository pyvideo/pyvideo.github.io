<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_joe-gregorio.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2010-02-19T00:00:00+00:00</updated><entry><title>Threading is not a model (#187)</title><link href="https://pyvideo.org/pycon-us-2010/pycon-2010--threading-is-not-a-model---187.html" rel="alternate"></link><published>2010-02-19T00:00:00+00:00</published><updated>2010-02-19T00:00:00+00:00</updated><author><name>Joe Gregorio</name></author><id>tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--threading-is-not-a-model---187.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Threading is not a model&lt;/p&gt;
&lt;p&gt;Presented by Joe Gregorio&lt;/p&gt;
&lt;p&gt;We have many concurrency/multiprocessing capabilities at our finger
tips, such as threads, processes, locks, mutexes, select, epoll,
transactional memory, etc. But none of them are a model for
multiprocessing, they are only tools on which you would build an
implementation of such a model. So what are the models we can choose
from? How would they be implemented in Python? And why may the GIL
actually be a good thing?&lt;/p&gt;
</summary><category term="multiprocessing"></category><category term="pycon"></category><category term="pycon2010"></category></entry></feed>