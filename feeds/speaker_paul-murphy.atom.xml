<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_paul-murphy.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2014-10-04T00:00:00+00:00</updated><entry><title>Is your helper library opinionated enough?</title><link href="https://pyvideo.org/pytexas-2014/is-your-helper-library-opinionated-enough.html" rel="alternate"></link><published>2014-10-04T00:00:00+00:00</published><updated>2014-10-04T00:00:00+00:00</updated><author><name>Paul Murphy</name></author><id>tag:pyvideo.org,2014-10-04:pytexas-2014/is-your-helper-library-opinionated-enough.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;It's a constant debate.&lt;/p&gt;
&lt;p&gt;How do you build a helper library?&lt;/p&gt;
&lt;p&gt;At one end of the spectrum we have Runscope CEO John Sheehan who thinks
that helper libraries are evil and shouldn't exist at all. At the other
we find helper libraries that don't look or smell anything like the API.
And somewhere in the middle we have helper libraries that are so close
to the API itself that they are nothing more than a thin veneer.&lt;/p&gt;
&lt;p&gt;Which is better? Whoâ€™s right? The real question to me is how idiomatic
should a helper library be? Should a Django library make a Django
developer feel comfortable, or should she have to read the API docs to
understand how it works? Should a Python library look RESTful, or should
it look like a hierarchy of classes?&lt;/p&gt;
&lt;p&gt;At our company, we maintain two libraries. They both have advantages and
disadvantages, they appeal to different developers, and sometimes even
the same developer at different times.&lt;/p&gt;
</summary></entry><entry><title>Unlocking Data Trapped in Audio and Video Files</title><link href="https://pyvideo.org/pytexas-2014/unlocking-data-trapped-in-audio-and-video-files.html" rel="alternate"></link><published>2014-10-04T00:00:00+00:00</published><updated>2014-10-04T00:00:00+00:00</updated><author><name>Paul Murphy</name></author><id>tag:pyvideo.org,2014-10-04:pytexas-2014/unlocking-data-trapped-in-audio-and-video-files.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;As more and more apps record audio and video files we need to start
thinking about what to do with those files. Playing them back isn't
enough. Media files are full of data that developers can start
exploiting thanks to an emergent category of signal and natural language
processing APIs.&lt;/p&gt;
&lt;p&gt;There are only 3 options for processing the words embedded in these
files:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Transcribe them yourself, manually.&lt;/li&gt;
&lt;li&gt;Find a transcript made by someone else.&lt;/li&gt;
&lt;li&gt;Use a library that extracts the words for you.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;As the developer of a python library that automates the extraction and
processing of words in media files, I'll demonstrate how easy it is to
make audio and video libraries fully searchable, create a word cloud of
keywords from a recorded phone call, and extract topics from news
broadcast.&lt;/p&gt;
&lt;p&gt;I'll show coding examples as well as products using this API.&lt;/p&gt;
</summary></entry></feed>