<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_lemaire-arnaud.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2015-10-18T00:00:00+00:00</updated><entry><title>Des boucles aux tranducers</title><link href="https://pyvideo.org/pycon-fr-2015/des-boucles-aux-tranducers.html" rel="alternate"></link><published>2015-10-18T00:00:00+00:00</published><updated>2015-10-18T00:00:00+00:00</updated><author><name>LEMAIRE Arnaud</name></author><id>tag:pyvideo.org,2015-10-18:pycon-fr-2015/des-boucles-aux-tranducers.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Les boucles, tout le monde les utilise pour transformer de large
collection. Et si vous les abandonniez en gagnant par la même occasion
en clarté ? Et si vous pouviez appliquer les mêmes transformations sur
des ensembles infinis tout en améliorant drastiquement les
performances ? Par refactoring successif, nous passerons des boucles aux
filtres et pipelines pour clôturer sur les transducers.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;ul class="simple"&gt;
&lt;li&gt;Présentation de l’étude de cas&lt;/li&gt;
&lt;li&gt;Pourquoi les boucles ne sont pas la bonne manière d’organiser son
code ?&lt;/li&gt;
&lt;li&gt;Introduction de la notion de fonction d’ordre supérieure&lt;/li&gt;
&lt;li&gt;Présentation de map, et refactoring associé (sur le cas initial)&lt;/li&gt;
&lt;li&gt;Présentation de filter, et refactoring associé (sur le cas initial)&lt;/li&gt;
&lt;li&gt;Présentation de reduce, et refactoring associé (sur le cas initial)&lt;/li&gt;
&lt;li&gt;Présentation de reduce sur un cas non trivial (avec accumulateur non
scalaire)&lt;/li&gt;
&lt;li&gt;Énumération des pattern typiques présents dans le code permettant un
refactoring vers les fonctions déjà présentées.&lt;/li&gt;
&lt;li&gt;Chainage des fonctions, architecture pipeline &amp;amp; filter&lt;/li&gt;
&lt;li&gt;Expression de map en fonction de reduce&lt;/li&gt;
&lt;li&gt;Expression de filter en fonction de reduce&lt;/li&gt;
&lt;li&gt;Fonction de composition&lt;/li&gt;
&lt;li&gt;Introduction aux transducers&lt;/li&gt;
&lt;li&gt;Refactoring du code de départ à l’aide des transducers&lt;/li&gt;
&lt;li&gt;Avantages des transducers&lt;/li&gt;
&lt;li&gt;Transducers statefull&lt;/li&gt;
&lt;li&gt;Questions&lt;/li&gt;
&lt;/ul&gt;
</summary></entry></feed>