<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/tag_chipy.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2011-07-14T00:00:00+00:00</updated><entry><title>Playdoh</title><link href="https://pyvideo.org/chipy/playdoh.html" rel="alternate"></link><published>2011-07-14T00:00:00+00:00</published><updated>2011-07-14T00:00:00+00:00</updated><author><name>Kumar McMillan</name></author><id>tag:pyvideo.org,2011-07-14:chipy/playdoh.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Playdoh is Mozilla's starter kit for new Django projects. It aims to be
secure-by-default and set up all the same goodies we use to scale for
high traffic, perform background tasks, localize our sites in many
languages, and other cool things.&lt;/p&gt;
</summary><category term="chipy"></category><category term="playdoh"></category></entry><entry><title>GNU MediaGoblin for a federated media future</title><link href="https://pyvideo.org/chipy/gnu-mediagoblin-for-a-federated-media-future.html" rel="alternate"></link><published>2011-06-09T00:00:00+00:00</published><updated>2011-06-09T00:00:00+00:00</updated><author><name>Christopher Allan Webber</name></author><id>tag:pyvideo.org,2011-06-09:chipy/gnu-mediagoblin-for-a-federated-media-future.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Christopher Allan Webber talks about GNU MediaGoblin, a federated
(decentralized) media publishing system (images, and later other media
like video) written in python and under the AGPL. Infrastructure
discussion describes what it means that GNU MediaGoblin uses an
unframework / is &amp;quot;wsgi minimalist&amp;quot;, about the choice of MongoDB and
MongoKit, and how to impress an audience with ascii art mockups.&lt;/p&gt;
</summary><category term="chipy"></category><category term="foss"></category><category term="gnu"></category><category term="media"></category><category term="mediagoblin"></category><category term="mongodb"></category><category term="mongokit"></category><category term="wsgi"></category></entry><entry><title>Using OpenCV with Python and ROS</title><link href="https://pyvideo.org/chipy/using-opencv-with-python-and-ros.html" rel="alternate"></link><published>2011-06-09T00:00:00+00:00</published><updated>2011-06-09T00:00:00+00:00</updated><author><name>Bill Mania</name></author><id>tag:pyvideo.org,2011-06-09:chipy/using-opencv-with-python-and-ros.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Bill Mania and Eric Kinzle A brief presentation of using the OpenCV
computer vision toolset with Python and ROS. Included at the end will be
a demonstration of tracking a colored object using a camera with
servo-driven pan and tilt capability.&lt;/p&gt;
</summary><category term="billmania"></category><category term="camera"></category><category term="chipy"></category><category term="image"></category><category term="opencv"></category><category term="robot"></category><category term="ros"></category></entry><entry><title>Python/Django deployment</title><link href="https://pyvideo.org/chipy/python-django-deployment.html" rel="alternate"></link><published>2011-02-10T00:00:00+00:00</published><updated>2011-02-10T00:00:00+00:00</updated><author><name>Rohit Sankaran</name></author><id>tag:pyvideo.org,2011-02-10:chipy/python-django-deployment.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;I'll introduce the WSGI ecosystem. We'll then setup a Django app and
deploy it to a VM. I'll cover server setup/config and best practices and
cover software used like Fabric, nginx etc. Sample nginx, WSGI and
Apache configs will be provided. People can follow along and I'll
provide download links after so they can try it at home. This will be
the best meeting ever.&lt;/p&gt;
</summary><category term="apache"></category><category term="chipy"></category><category term="fabric"></category><category term="nginx"></category><category term="wsgi"></category></entry><entry><title>Reverse-engineering Ian Bicking's brain: inside pip and virtualenv.</title><link href="https://pyvideo.org/chipy/reverse-engineering-ian-bicking--39-s-brain--insi.html" rel="alternate"></link><published>2011-02-10T00:00:00+00:00</published><updated>2011-02-10T00:00:00+00:00</updated><author><name>Carl Meyer</name></author><id>tag:pyvideo.org,2011-02-10:chipy/reverse-engineering-ian-bicking--39-s-brain--insi.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Pip and virtualenv: many use them; not so many understand just how they
work their magic. If you're a pip/virtualenv user but haven't yet dared
crack the lid (or you have, and found it a bit difficult to follow),
come along for a fast-paced guided tour. Knowing these tools will help
you make more effective use of them, and might also turn you into a
contributor.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;ul class="simple"&gt;
&lt;li&gt;1 &lt;a class="reference external" href="http://us.pycon.org/2011/schedule/sessions/198/"&gt;http://us.pycon.org/2011/schedule/sessions/198/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;2 &lt;a class="reference external" href="http://pip.openplans.org/"&gt;http://pip.openplans.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;3 &lt;a class="reference external" href="http://virtualenv.openplans.org/"&gt;http://virtualenv.openplans.org/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="chipy"></category><category term="ianbicking"></category><category term="pip"></category><category term="virtualenv"></category></entry><entry><title>Django Deployment for the Average Bloke</title><link href="https://pyvideo.org/chipy/django-deployment-for-the-average-bloke.html" rel="alternate"></link><published>2011-01-13T00:00:00+00:00</published><updated>2011-01-13T00:00:00+00:00</updated><author><name>Carl Karsten</name></author><id>tag:pyvideo.org,2011-01-13:chipy/django-deployment-for-the-average-bloke.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Deploying a Django/Pinax site on the following stack: Linux Debian Lenny
Apache mod_wsgi PostgreSQL.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This is the config you want to use if you don't know what you want to
use. You don't need to make any choices, you don't have to do any
research, and you don't even need to read the docs if you don't want to.
And as an added bonus, I show how to wget a vm image to deploy into with
network ports exposed. It is very much like working with a hosting
provider like Slice Host, and it makes a great framework for testing
server installs.&lt;/p&gt;
</summary><category term="apache"></category><category term="chipy"></category><category term="deployment"></category><category term="mod_wsgi"></category><category term="pinax"></category><category term="postgresql"></category><category term="web"></category></entry><entry><title>ROS - Robot Operating System</title><link href="https://pyvideo.org/chipy/ros---robot-operating-system.html" rel="alternate"></link><published>2011-01-13T00:00:00+00:00</published><updated>2011-01-13T00:00:00+00:00</updated><author><name>Bill Mania</name></author><id>tag:pyvideo.org,2011-01-13:chipy/ros---robot-operating-system.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;ROS is the Robot Operating System, originally from Stanford and now
supported by Willow Garage. ROS has a mature Python interface and is
being used around the world by both amateur and professional
roboticists. At the end of the presentation, if time allows and interest
exists, some rudimentary ROS functionality will be demonstrated on a
robot in progress.&lt;/p&gt;
</summary><category term="chipy"></category><category term="robot"></category><category term="ros"></category></entry><entry><title>Vintage 1978 Superboard II hacking with some Python3 and ZeroMQ</title><link href="https://pyvideo.org/chipy/vintage-1978-superboard-ii-hacking-with-some-pyth.html" rel="alternate"></link><published>2011-01-13T00:00:00+00:00</published><updated>2011-01-13T00:00:00+00:00</updated><author><name>David Beazley</name></author><id>tag:pyvideo.org,2011-01-13:chipy/vintage-1978-superboard-ii-hacking-with-some-pyth.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;I'm not sure if we're still looking for talks on Thursday, but if so,
I'd like to volunteer to give a talk about using Python to do some
retro-computing hacking involving my vintage 1978 Superboard II. It's
not exactly robotics, but it involves hardware and a lot of low-level
hacking (along with some Python3 and ZeroMQ thrown in for good measure
;-).&lt;/p&gt;
</summary><category term="chipy"></category><category term="cool"></category><category term="python3"></category><category term="zeromq"></category></entry><entry><title>Tox</title><link href="https://pyvideo.org/chipy/tox.html" rel="alternate"></link><published>2010-11-11T00:00:00+00:00</published><updated>2010-11-11T00:00:00+00:00</updated><author><name>Kumar McMillan</name></author><id>tag:pyvideo.org,2010-11-11:chipy/tox.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;It's a great new open source tool that helps you support all versions of
python with your existing automated tests. It's not a test runner, it's
a super test runner runner! Or something. There is no easy way to
describe it which is why the front page of the website is sort of
confusing, IMO. We use tox on the Nose project to make sure each code
change doesn't break the tests in Python 2.4, 2.5, 2.6, 2.7, 3.0 or
Jython. Not everybody targets so many environments but if you want to
maintain a widely used module then you probably will want to use tox
someday.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Here's our Hudson matrix setup w/ tox:
&lt;a class="reference external" href="http://hudson.testrun.org/job/nose-unstable/"&gt;http://hudson.testrun.org/job/nose-
unstable/&lt;/a&gt; (we just set
this up recently which is why most builds were broken in one or two
envs) I can also spend some time going over how we are currently
maintaining a test suite that runs in both 2.x and 3.x simultaneously.&lt;/p&gt;
&lt;p&gt;This will be our Best Meeting Ever!&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://codespeak.net/tox/"&gt;http://codespeak.net/tox/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://chipy.org/"&gt;http://chipy.org/&lt;/a&gt;&lt;/p&gt;
</summary><category term="chipy"></category><category term="testing"></category><category term="tox"></category></entry><entry><title>Programming with Twisted</title><link href="https://pyvideo.org/chipy/programming-with-twisted.html" rel="alternate"></link><published>2010-07-08T00:00:00+00:00</published><updated>2010-07-08T00:00:00+00:00</updated><author><name>Dan Griffen</name></author><id>tag:pyvideo.org,2010-07-08:chipy/programming-with-twisted.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;ul class="simple"&gt;
&lt;li&gt;What twisted is and its purpose in life (ie the reactor pattern).&lt;/li&gt;
&lt;li&gt;Non-blocking network programming.&lt;/li&gt;
&lt;li&gt;The confusing topic of deferreds and callbacks everywhere.&lt;/li&gt;
&lt;li&gt;Methods for dealing with blocking APIs.&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="chipy"></category><category term="twisted"></category></entry><entry><title>PyPy and Unladen Swallow: Making your Python Fast</title><link href="https://pyvideo.org/chipy/pypy-and-unladen-swallow--making-your-python-fast.html" rel="alternate"></link><published>2010-07-08T00:00:00+00:00</published><updated>2010-07-08T00:00:00+00:00</updated><author><name>Alex Gaynor</name></author><id>tag:pyvideo.org,2010-07-08:chipy/pypy-and-unladen-swallow--making-your-python-fast.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Python has a reputation for being a bit slow, but it doesn't have to be
that way. This talk will cover why Python is slow, and what two of the
most exciting virtual machines are doing about it.&lt;/p&gt;
</summary><category term="chipy"></category><category term="optimization"></category><category term="performance"></category><category term="pypy"></category><category term="unladenswallow"></category></entry><entry><title>Customizing the Django Admin</title><link href="https://pyvideo.org/chipy/customizing-the-django-admin.html" rel="alternate"></link><published>2010-06-10T00:00:00+00:00</published><updated>2010-06-10T00:00:00+00:00</updated><author><name>Brian Ray</name></author><id>tag:pyvideo.org,2010-06-10:chipy/customizing-the-django-admin.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;I plan on showing a live example and customizing as we go. This will be
a pretty mid-level talk and should be interesting to those not familiar,
those who know django and considered using the admin, and for djangonuts
who want to do some pretty advanced stuff.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;ul class="simple"&gt;
&lt;li&gt;Registering Models in the Admin&lt;/li&gt;
&lt;li&gt;Customizing the filtering, search, general display&lt;/li&gt;
&lt;li&gt;Adding Actions&lt;/li&gt;
&lt;li&gt;Inlines&lt;/li&gt;
&lt;li&gt;Custom Forms&lt;/li&gt;
&lt;li&gt;Making Fields Readonly by inheriting&lt;/li&gt;
&lt;li&gt;Integrating jQuery&lt;/li&gt;
&lt;li&gt;Custom Widgets like Image thumbnails&lt;/li&gt;
&lt;li&gt;Changing look and feel&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="admin"></category><category term="chipy"></category><category term="customizing"></category><category term="jquery"></category></entry><entry><title>Using Python for Blender Animations</title><link href="https://pyvideo.org/chipy/using-python-for-blender-animations.html" rel="alternate"></link><published>2010-06-10T00:00:00+00:00</published><updated>2010-06-10T00:00:00+00:00</updated><author><name>Christopher Allan Webber</name></author><id>tag:pyvideo.org,2010-06-10:chipy/using-python-for-blender-animations.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Creating tools with Python and Blender 2.5's bpy API&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A walk through using Blender 2.5's new Python API to automate various
animation tasks, using examples from the film Patent Absurdity:
&lt;a class="reference external" href="http://patentabsurdity.com/"&gt;http://patentabsurdity.com/&lt;/a&gt;
&lt;a class="reference external" href="http://patentabsurdity.com/fsf_patent_anims.tar.gz"&gt;http://patentabsurdity.com/fsf_patent_anims.tar.gz&lt;/a&gt; has the sources of
the animations demonstrated.&lt;/p&gt;
</summary><category term="blender"></category><category term="chipy"></category><category term="chriswebber"></category></entry><entry><title>Twiggy: A Pythonic Logger</title><link href="https://pyvideo.org/chipy/twiggy--a-pythonic-logger.html" rel="alternate"></link><published>2010-04-08T00:00:00+00:00</published><updated>2010-04-08T00:00:00+00:00</updated><author><name>Peter Fein</name></author><id>tag:pyvideo.org,2010-04-08:chipy/twiggy--a-pythonic-logger.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Twiggy is an early-stage project to build a more Pythonic logging
module. It was started at Pycon 2010.&lt;/p&gt;
&lt;p&gt;Home:
&lt;a class="reference external" href="http://python-%20twiggy.googlecode.com"&gt;http://python-twiggy.googlecode.com&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;See the notes for a quick overview
&lt;a class="reference external" href="http://pythontwiggy.googlecode.com/hg/notes.html"&gt;http://pythontwiggy.googlecode.com/hg/note
s.html&lt;/a&gt;.&lt;/p&gt;
</summary><category term="chipy"></category><category term="logging"></category><category term="twiggy"></category></entry><entry><title>What's coming up in Python 2.7</title><link href="https://pyvideo.org/chipy/what--39-s-coming-up-in-python-2-7.html" rel="alternate"></link><published>2010-04-08T00:00:00+00:00</published><updated>2010-04-08T00:00:00+00:00</updated><author><name>Unknown</name></author><id>tag:pyvideo.org,2010-04-08:chipy/what--39-s-coming-up-in-python-2-7.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;With 2.7 likely being the end of the 2.x line, come see what's in store
for the upcoming release. Changes to unittest, introduction of the
argparse module, and a whole host of 3.1 features are here to ease your
eventual transition into the wonderful world of Python 3.&lt;/p&gt;
</summary><category term="chipy"></category><category term="python2.7"></category></entry><entry><title>Changes to the GIL in Python 3</title><link href="https://pyvideo.org/chipy/changes-to-the-gil-in-python-3.html" rel="alternate"></link><published>2010-01-14T00:00:00+00:00</published><updated>2010-01-14T00:00:00+00:00</updated><author><name>David Beazley</name></author><id>tag:pyvideo.org,2010-01-14:chipy/changes-to-the-gil-in-python-3.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Follow-up to David's last GIL talk in June 2009. This presentation walks
through changes to the GIL that are being made.&lt;/p&gt;
</summary><category term="chipy"></category><category term="gil"></category><category term="python3"></category></entry><entry><title>GitPython and Git Internals</title><link href="https://pyvideo.org/chipy/gitpython-and-git-internals.html" rel="alternate"></link><published>2010-01-14T00:00:00+00:00</published><updated>2010-01-14T00:00:00+00:00</updated><author><name>Christopher Allan Webber</name></author><id>tag:pyvideo.org,2010-01-14:chipy/gitpython-and-git-internals.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Chris covers how git works, the internals, and using the GitPython
library.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://gitorious.org/git-python"&gt;GitPython&lt;/a&gt;&lt;/p&gt;
</summary><category term="chipy"></category><category term="git"></category><category term="gitpython"></category></entry><entry><title>Technical, standards-spec style analysis of Unicode</title><link href="https://pyvideo.org/chipy/technical--standards-spec-style-analysis-of-unico.html" rel="alternate"></link><published>2010-01-14T00:00:00+00:00</published><updated>2010-01-14T00:00:00+00:00</updated><author><name>Jordan Bettis</name></author><id>tag:pyvideo.org,2010-01-14:chipy/technical--standards-spec-style-analysis-of-unico.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;It's a very educational presentation of Unicode, what it is, where it
comes from, how it works, Unicode in Python, ....&lt;/p&gt;
</summary><category term="chipy"></category><category term="unicode"></category></entry><entry><title>REST-ful Web apps with Django Piston</title><link href="https://pyvideo.org/chipy/rest-ful-web-apps-with-django-piston.html" rel="alternate"></link><published>2009-12-10T00:00:00+00:00</published><updated>2009-12-10T00:00:00+00:00</updated><author><name>Unknown</name></author><id>tag:pyvideo.org,2009-12-10:chipy/rest-ful-web-apps-with-django-piston.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;A common complaint about Django, the leading Python web application
framework, is that it doesn't make writing REST APIs easy enough. In
fact the paradigm for a typical Django application involves views which
map to HTML page templates. With end users increasingly expecting rich
interfaces with the responsiveness of a desktop application, this
paradigm is being superseded. Fortunately a third-party Django
application called Piston fills the gap. Django/Piston can be combined
with the Ext JS JavaScript framework and widget set to create
attractive, responsive Web applications, and this talk will show you
how.&lt;/p&gt;
</summary><category term="chipy"></category><category term="extjs"></category><category term="piston"></category></entry><entry><title>Python for Scientific and High Performance Computing (3 of 4)</title><link href="https://pyvideo.org/chipy/python-for-scientific-and-high-performance-compu0.html" rel="alternate"></link><published>2009-11-12T00:00:00+00:00</published><updated>2009-11-12T00:00:00+00:00</updated><author><name>Unknown</name></author><id>tag:pyvideo.org,2009-11-12:chipy/python-for-scientific-and-high-performance-compu0.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python for Scientific and High Performance Computing (part 3 of 4)&lt;/p&gt;
&lt;p&gt;Python, a high-level portable multi-paradigm interpreted programming
language is becoming increasingly popular with the scientific and HPC
communities due to ease of use, large collection of modules,
adaptability, and strong support from vendors and community alike. This
tutorial provides an introduction to Python focused on HPC and
scientific computing. Throughout, we provide concrete examples, hands-on
examples, and links to additional sources of information. The result
will be a clear sense of possibilities and best practices using Python
in HPC environments. We will cover several key concepts: language
basics, NumPy and SciPy, parallel programming, performance issues,
integrating C and Fortran, basic visualization, large production codes,
and finding resources. While it is impossible to address all libraries
and application domains, at the end participants should be able to write
a simple application making use of parallel programming techniques,
visualize the output, and know how to confidently proceed with future
projects with Python.&lt;/p&gt;
&lt;p&gt;ChiPy is a group of Chicago Python Programmers, l33t, and n00bs.
Meetings are held monthly at various locations around Chicago. Also,
ChiPy is a proud sponsor of many Open Source and Educational efforts in
Chicago.&lt;/p&gt;
</summary><category term="chipy"></category><category term="numpy"></category><category term="scipy"></category></entry><entry><title>Python for Scientific and High Performance Computing (2 of 4)</title><link href="https://pyvideo.org/chipy/python-for-scientific-and-high-performance-compu1.html" rel="alternate"></link><published>2009-11-12T00:00:00+00:00</published><updated>2009-11-12T00:00:00+00:00</updated><author><name>Unknown</name></author><id>tag:pyvideo.org,2009-11-12:chipy/python-for-scientific-and-high-performance-compu1.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python for Scientific and High Performance Computing (part 2 of 4)&lt;/p&gt;
&lt;p&gt;Python, a high-level portable multi-paradigm interpreted programming
language is becoming increasingly popular with the scientific and HPC
communities due to ease of use, large collection of modules,
adaptability, and strong support from vendors and community alike. This
tutorial provides an introduction to Python focused on HPC and
scientific computing. Throughout, we provide concrete examples, hands-on
examples, and links to additional sources of information. The result
will be a clear sense of possibilities and best practices using Python
in HPC environments. We will cover several key concepts: language
basics, NumPy and SciPy, parallel programming, performance issues,
integrating C and Fortran, basic visualization, large production codes,
and finding resources. While it is impossible to address all libraries
and application domains, at the end participants should be able to write
a simple application making use of parallel programming techniques,
visualize the output, and know how to confidently proceed with future
projects with Python.&lt;/p&gt;
&lt;p&gt;ChiPy is a group of Chicago Python Programmers, l33t, and n00bs.
Meetings are held monthly at various locations around Chicago. Also,
ChiPy is a proud sponsor of many Open Source and Educational efforts in
Chicago.&lt;/p&gt;
</summary><category term="chipy"></category><category term="numpy"></category><category term="scipy"></category></entry><entry><title>Python for Scientific and High Performance Computing (1 of 4)</title><link href="https://pyvideo.org/chipy/python-for-scientific-and-high-performance-compu2.html" rel="alternate"></link><published>2009-11-12T00:00:00+00:00</published><updated>2009-11-12T00:00:00+00:00</updated><author><name>Unknown</name></author><id>tag:pyvideo.org,2009-11-12:chipy/python-for-scientific-and-high-performance-compu2.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;This tutorial provides an introduction to Python focused on HPC and
scientific computing. Throughout, we provide concrete examples, hands-on
examples, and links to additional sources of information. The result
will be a clear sense of possibilities and best practices using Python
in HPC environments.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python, a high-level portable multi-paradigm interpreted programming
language is becoming increasingly popular with the scientific and HPC
communities due to ease of use, large collection of modules,
adaptability, and strong support from vendors and community alike. This
tutorial provides an introduction to Python focused on HPC and
scientific computing. Throughout, we provide concrete examples, hands-on
examples, and links to additional sources of information. The result
will be a clear sense of possibilities and best practices using Python
in HPC environments. We will cover several key concepts: language
basics, NumPy and SciPy, parallel programming, performance issues,
integrating C and Fortran, basic visualization, large production codes,
and finding resources. While it is impossible to address all libraries
and application domains, at the end participants should be able to write
a simple application making use of parallel programming techniques,
visualize the output, and know how to confidently proceed with future
projects with Python.&lt;/p&gt;
</summary><category term="chipy"></category><category term="numpy"></category><category term="scipy"></category></entry><entry><title>Python for Scientific and High Performance Computing (4 of 4)</title><link href="https://pyvideo.org/chipy/python-for-scientific-and-high-performance-comput.html" rel="alternate"></link><published>2009-11-12T00:00:00+00:00</published><updated>2009-11-12T00:00:00+00:00</updated><author><name>Unknown</name></author><id>tag:pyvideo.org,2009-11-12:chipy/python-for-scientific-and-high-performance-comput.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python for Scientific and High Performance Computing (part 4 of 4)&lt;/p&gt;
&lt;p&gt;Python, a high-level portable multi-paradigm interpreted programming
language is becoming increasingly popular with the scientific and HPC
communities due to ease of use, large collection of modules,
adaptability, and strong support from vendors and community alike. This
tutorial provides an introduction to Python focused on HPC and
scientific computing. Throughout, we provide concrete examples, hands-on
examples, and links to additional sources of information. The result
will be a clear sense of possibilities and best practices using Python
in HPC environments. We will cover several key concepts: language
basics, NumPy and SciPy, parallel programming, performance issues,
integrating C and Fortran, basic visualization, large production codes,
and finding resources. While it is impossible to address all libraries
and application domains, at the end participants should be able to write
a simple application making use of parallel programming techniques,
visualize the output, and know how to confidently proceed with future
projects with Python.&lt;/p&gt;
&lt;p&gt;ChiPy is a group of Chicago Python Programmers, l33t, and n00bs.
Meetings are held monthly at various locations around Chicago. Also,
ChiPy is a proud sponsor of many Open Source and Educational efforts in
Chicago.&lt;/p&gt;
</summary><category term="chipy"></category><category term="numpy"></category><category term="scipy"></category></entry><entry><title>Blender 2.5 loves Python 3</title><link href="https://pyvideo.org/chipy/blender-2-5-loves-python-3.html" rel="alternate"></link><published>2009-10-08T00:00:00+00:00</published><updated>2009-10-08T00:00:00+00:00</updated><author><name>Christopher Allan Webber</name></author><id>tag:pyvideo.org,2009-10-08:chipy/blender-2-5-loves-python-3.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Blender 2.5 loves Python 3&lt;/p&gt;
&lt;p&gt;Presented by Chris Webber on October 8th, 2009&lt;/p&gt;
&lt;p&gt;Chris talks about the upcoming Blender 2.5 release. &amp;quot;Blender 2.5 is the
first app I know of that &lt;em&gt;requires&lt;/em&gt; Python 3.X. So that's pretty
interesting on its own. But there's plenty more interesting stuff to
discuss. It's going to be mostly an overview talk. Blender's python
integration could possibly span 3 separate talks, especially considering
the blender game engine's use of it, which is a separate but interesting
talk.&amp;quot;&lt;/p&gt;
&lt;p&gt;ChiPy is a group of Chicago Python Programmers, l33t, and n00bs.
Meetings are held monthly at various locations around Chicago. Also,
ChiPy is a proud sponsor of many Open Source and Educational efforts in
Chicago. Stay tuned to the mailing list for more info. &lt;a class="reference external" href="http://chipy.org/"&gt;ChiPy
website&lt;/a&gt;&lt;/p&gt;
</summary><category term="blender"></category><category term="chipy"></category><category term="chriswebber"></category><category term="python3"></category></entry><entry><title>Asynchronous vs. Threaded Python</title><link href="https://pyvideo.org/chipy/asynchronous-vs--threaded-python.html" rel="alternate"></link><published>2009-06-11T00:00:00+00:00</published><updated>2009-06-11T00:00:00+00:00</updated><author><name>Unknown</name></author><id>tag:pyvideo.org,2009-06-11:chipy/asynchronous-vs--threaded-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Asynchronous vs. Threaded Python&lt;/p&gt;
&lt;p&gt;Presented at ChiPy by David Beazley on June 12th, 2009&lt;/p&gt;
&lt;p&gt;This is the opening act to Mindblowing GIL. Covers threading vs.
asynchronous programming in Python.&lt;/p&gt;
</summary><category term="asynchronous"></category><category term="chipy"></category><category term="gil"></category><category term="threads"></category></entry><entry><title>Mindblowing Python GIL</title><link href="https://pyvideo.org/chipy/mindblowing-python-gil.html" rel="alternate"></link><published>2009-06-11T00:00:00+00:00</published><updated>2009-06-11T00:00:00+00:00</updated><author><name>David Beazley</name></author><id>tag:pyvideo.org,2009-06-11:chipy/mindblowing-python-gil.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Mindblowing Python GIL&lt;/p&gt;
&lt;p&gt;Presented by David Beazley at ChiPy on June 11, 2009&lt;/p&gt;
&lt;p&gt;David Beazley: mind-blowing presentation about how the Python GIL
actually works and why it's even worse than most people even imagine.&lt;/p&gt;
&lt;p&gt;Slides: &lt;a class="reference external" href="http://www.dabeaz.com/python/GIL.pdf"&gt;http://www.dabeaz.com/python/GIL.pdf&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[VIDEO HAS PROBLEMS: audio is fuzzy]&lt;/p&gt;
</summary><category term="chipy"></category><category term="gil"></category><category term="python-advanced"></category></entry><entry><title>Web Apps with Jython</title><link href="https://pyvideo.org/chipy/web-apps-with-jython.html" rel="alternate"></link><published>2009-05-15T00:00:00+00:00</published><updated>2009-05-15T00:00:00+00:00</updated><author><name>Unknown</name></author><id>tag:pyvideo.org,2009-05-15:chipy/web-apps-with-jython.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Building apps with Jython&lt;/p&gt;
&lt;p&gt;Presented on May 15th, 2009 at ChiPy&lt;/p&gt;
&lt;p&gt;Talks about go_pylons and snakefight and other things that allow you to
build and run Python applications with Jython. WSGI to servlet adapter
in Jython 2.5.&lt;/p&gt;
</summary><category term="chipy"></category><category term="go_pylons"></category><category term="jython"></category><category term="snakefight"></category><category term="wsgi"></category></entry></feed>