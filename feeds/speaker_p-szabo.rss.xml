<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Wed, 04 Jul 2012 00:00:00 +0000</lastBuildDate><item><title>Method restrictions (abstract, final, @override etc.) and implementing them for Python</title><link>https://pyvideo.org/europython-2012/method-restrictions-abstract-final-override-e.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2012] P Szabo - 3 JULY 2012 in &amp;quot;Track Tagliatelle&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The earlier a bug is discovered, the cheaper it is to fix it. Method
restrictions (such as abstract, final and &amp;#64;Override) help the programmer
in discovering incompatibilities between a class and its subclass early
(i.e. at startup time for Python and at compile time for compiled
languages). Python doesnâ€™t provide method restrictions out of the box.
To implement them, we take a deep dive to the realms of Python
metaprogramming (decorators, metaclasses, method wrappers, traceback
inspection and builtins). Lots of short and code examples will be
provided to show the building blocks and how we combine them. Slides:
&lt;a class="reference external" href="http://pts-mini-%20gpl.googlecode.com/svn/trunk/pobjects/ptsmethodrestrictions_2012-07-03.html"&gt;http://pts-mini-gpl.googlecode.com/svn/trunk/pobjects/ptsmethodrestri
ctions_2012-07-03.html&lt;/a&gt;
Source code download: &lt;a class="reference external" href="http://code.google.com/p/pts-mini-%20gpl/source/browse/#svn/trunk/pobjects"&gt;http://code.google.com/p/pts-mini-
gpl/source/browse/#svn/trunk/pobjects&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">P Szabo</dc:creator><pubDate>Wed, 04 Jul 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-07-04:europython-2012/method-restrictions-abstract-final-override-e.html</guid></item></channel></rss>