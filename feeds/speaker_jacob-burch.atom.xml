<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_jacob-burch.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2015-09-18T00:00:00+00:00</updated><entry><title>Django minus Django</title><link href="https://pyvideo.org/djangocon-europe-2014/django-minus-django.html" rel="alternate"></link><published>2014-05-14T00:00:00+00:00</published><updated>2014-05-14T00:00:00+00:00</updated><author><name>Jacob Burch</name></author><id>tag:pyvideo.org,2014-05-14:djangocon-europe-2014/django-minus-django.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Django is a monolithic framework -- or is it? Django prides itself on
being &amp;quot;batteries-included,&amp;quot; but that doesn't mean you need an
appointment at the Genius Bar to replace them. This talk aims to show
the audience how to replace every facet of Django, from the template
engine to the ORM. The talk will also highlight the areas of Django that
still carry this difficulty, and offer direction where Django can go to
fix them.&lt;/p&gt;
</summary></entry><entry><title>DjangoCon EU 2013: Jacob Burch - Having Your Pony and Committing It Too</title><link href="https://pyvideo.org/djangocon-europe-2013/djangocon-eu-2013-jacob-burch-having-your-pony-and-committing-it-too.html" rel="alternate"></link><published>2013-05-15T00:00:00+00:00</published><updated>2013-05-15T00:00:00+00:00</updated><author><name>Jacob Burch</name></author><id>tag:pyvideo.org,2013-05-15:djangocon-europe-2013/djangocon-eu-2013-jacob-burch-having-your-pony-and-committing-it-too.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Videos from DjangoCon Europe 2013 are kindly provided by Heroku, a cloud application platform -- a new way of building and deploying web apps: &lt;a class="reference external" href="http://heroku.com/"&gt;http://heroku.com/&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>NoSQL and Django Panel</title><link href="https://pyvideo.org/djangocon-us-2010/djangocon-2010--nosql-and-django-panel.html" rel="alternate"></link><published>2010-09-09T00:00:00+00:00</published><updated>2010-09-09T00:00:00+00:00</updated><author><name>Jacob Burch</name></author><id>tag:pyvideo.org,2010-09-09:djangocon-us-2010/djangocon-2010--nosql-and-django-panel.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A panel to discuss the future of no-sql/non-related databases in Django.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;The proliferation of non-SQL speaking datastores has caused a lot of
discourse and debate over their potential role in Django's decidedly
SQL-speaking ORM. The goal of this panel is to consolidate and discuss
the root questions of this debate.&lt;/p&gt;
&lt;p&gt;The panel will consist of Django orm contributors and heavy end-users of
both Django and a variety of NoSQL database solutions. Questions to the
panel will briefly cover the NoSQL movement in general and it's staying
power. After that introduction to the debates at hand outside of Django,
questions will shift to focus closely on the issues into integrating
NoSQL and Django--both on current best practices and future plans for
integrating it into the core.&lt;/p&gt;
</summary><category term="casestudy"></category><category term="djangocon"></category><category term="djangocon2010"></category><category term="nosql"></category><category term="orm"></category></entry><entry><title>Cache rules everything around me</title><link href="https://pyvideo.org/djangocon-us-2011/djangocon-2011--cache-rules-everything-around-me.html" rel="alternate"></link><published>2011-09-05T00:00:00+00:00</published><updated>2011-09-05T00:00:00+00:00</updated><author><name>Jacob Burch</name></author><id>tag:pyvideo.org,2011-09-05:djangocon-us-2011/djangocon-2011--cache-rules-everything-around-me.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Cache rules everything around me&lt;/p&gt;
&lt;p&gt;Presented by Jacob Burch, Noah Silas&lt;/p&gt;
&lt;p&gt;This talk aims to briefly introduce the core concepts of caching and
covers the best practices of using Djangoâ€™s cache backend.&lt;/p&gt;
</summary><category term="cache"></category><category term="caching"></category><category term="djangocon"></category><category term="djangocon2011"></category><category term="memcache"></category><category term="web"></category></entry><entry><title>A Gringo's Guide to Internationalization</title><link href="https://pyvideo.org/djangocon-us-2012/a-gringos-guide-to-internationalization.html" rel="alternate"></link><published>2012-09-04T00:00:00+00:00</published><updated>2012-09-04T00:00:00+00:00</updated><author><name>Jacob Burch</name></author><id>tag:pyvideo.org,2012-09-04:djangocon-us-2012/a-gringos-guide-to-internationalization.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Coming from a speaker who escaped a notion to &amp;quot;why would we need to
translate?&amp;quot; this talk aims to show what actually goes into translating a
website or app using Django's Internationalization tools. Covered will
be an overview of batteries included, best practices and anti-patterns
in using them, and some third party tools to help make your life
escaping the myth of a Lingua Franca easier.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;There's often a bubble in the English-speaking programming world that
the entire internet runs on English. Our Top-level domains are shortened
english words. Our programming languages--Python in particular--try to
emulate English words and grammar.&lt;/p&gt;
&lt;p&gt;Firmly in place in this world for many years, my first attempt to
translate a pre-existing site came with a high sticker shock of nuanced
difficulty. This talk covers all the lessons I learned in taking a
fully-fleshed web app with no translation (and a programmer with no
translation experience) to being completely translated.&lt;/p&gt;
&lt;div class="section" id="talk-overview"&gt;
&lt;h4&gt;Talk Overview&lt;/h4&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Introduction to Translation&lt;ol class="arabic"&gt;
&lt;li&gt;Overview of gettext&lt;/li&gt;
&lt;li&gt;Brief history of a translation&lt;/li&gt;
&lt;li&gt;Add gettext calls&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;django-admin.py&lt;/span&gt; makemessages&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;Ship po file to translation service&lt;/li&gt;
&lt;li&gt;Receive file back&lt;/li&gt;
&lt;li&gt;Compile&lt;/li&gt;
&lt;li&gt;Fin&lt;/li&gt;
&lt;li&gt;gettext vs gettext_lazy&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Batteries Included&lt;ol class="arabic"&gt;
&lt;li&gt;gettext Python calls&lt;/li&gt;
&lt;li&gt;Middleware&lt;/li&gt;
&lt;li&gt;template tags&lt;/li&gt;
&lt;li&gt;trans vs. blocktrans&lt;/li&gt;
&lt;li&gt;Anti-patterns of the battery included use.&lt;/li&gt;
&lt;li&gt;Heavy whitespace in blocktrans&lt;/li&gt;
&lt;li&gt;Monster-sized translations&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;The best laid plans of mice and men...&lt;ol class="arabic"&gt;
&lt;li&gt;Problems that get in the way of A history of a translation.&lt;/li&gt;
&lt;li&gt;Realize half the site is still untranslated&lt;/li&gt;
&lt;li&gt;Edit out the translations you already had translated to avoid
re-curring costs&lt;/li&gt;
&lt;li&gt;Have the product adjust so two words change&lt;/li&gt;
&lt;li&gt;Realize common text that's in the database&lt;/li&gt;
&lt;li&gt;Fin?&lt;/li&gt;
&lt;li&gt;Patterns and tools to help&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;poxx.py&lt;/tt&gt; and the idea of a 'canonical' po file.&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;dbgettext&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;Wholly-translated template files (translate_include,
trans_render)&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Advanced Translation Technique&lt;ol class="arabic"&gt;
&lt;li&gt;While undocumented, translation backend is pretty darn flexible
and the source code is a treasure trove to make 'impossible' use
cases not too bad.&lt;/li&gt;
&lt;li&gt;Overview of how the translation service works behind the scenes&lt;/li&gt;
&lt;li&gt;&lt;tt class="docutils literal"&gt;_translation&lt;/tt&gt; thread local&lt;/li&gt;
&lt;li&gt;Merged translations (root-&amp;gt;app-&amp;gt;default)&lt;/li&gt;
&lt;li&gt;Sessions vs. Accept-Language&lt;/li&gt;
&lt;li&gt;Middleware and Context processors&lt;/li&gt;
&lt;li&gt;Example of advanced translation code: Multi-tenancy translation.&lt;/li&gt;
&lt;li&gt;Translating some sites, not translating others&lt;/li&gt;
&lt;li&gt;Translating Site A one way, Site B another&lt;/li&gt;
&lt;li&gt;Using an English translation for duct-tape and profit.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Why Django's i18n sucks.&lt;ol class="arabic"&gt;
&lt;li&gt;In the vein of the &amp;quot;Django Sucks&amp;quot; Key note. It doesn't really, but
it could use some changes--from minor to major.&lt;/li&gt;
&lt;li&gt;Why .po Files are archaic and limited.&lt;/li&gt;
&lt;li&gt;What we can do to improve for 1.5 and beyond.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</summary><category term="django"></category><category term="internationalization"></category></entry><entry><title>The Other Hard Problem: Lessons and Advice on Naming Things</title><link href="https://pyvideo.org/djangocon-us-2015/the-other-hard-problem-lessons-and-advice-on-by.html" rel="alternate"></link><published>2015-09-18T00:00:00+00:00</published><updated>2015-09-18T00:00:00+00:00</updated><author><name>Jacob Burch</name></author><id>tag:pyvideo.org,2015-09-18:djangocon-us-2015/the-other-hard-problem-lessons-and-advice-on-by.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;The Other Hard Problem: Lessons and Advice on Naming Things&lt;/p&gt;
&lt;p&gt;There are only two hard things in Computer Science: cache invalidation
and naming things. -- Phil Karlton&lt;/p&gt;
&lt;p&gt;This quote finds its way into many-a-talk about caching systems
(including my own), and sometimes we as developers will recall it when
we spend an hour to name that one nebulous variable. But why is
something so difficult as nomenclature also thought of as too simple to
actually talk about?&lt;/p&gt;
&lt;p&gt;In this talk, I'll review what has been written in the last few decades
on naming, go over the easy parts of right or wrong as defined in PEP8
and other style guidelines, and finally suggest some patterns and
anti-patterns found in in today's Django and open source environment for
us to adopt (or avoid!) in our everyday naming of variables, libraries
and other &amp;quot;things&amp;quot;.&lt;/p&gt;
</summary></entry><entry><title>Cache Rules Everything Around Me</title><link href="https://pyvideo.org/pycon-us-2012/cache-rules-everything-around-me.html" rel="alternate"></link><published>2012-03-10T00:00:00+00:00</published><updated>2012-03-10T00:00:00+00:00</updated><author><name>Jacob Burch</name></author><id>tag:pyvideo.org,2012-03-10:pycon-us-2012/cache-rules-everything-around-me.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;This talk aims to briefly introduce the core concepts of caching and
covers the best practices of implementing them, using a small variety of
python web frameworks (Flask, Django) for example code.&lt;/p&gt;
</summary></entry></feed>