<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org - Paul Pereyda Karayan</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_paul-pereyda-karayan.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2024-09-21T00:00:00+00:00</updated><subtitle></subtitle><entry><title>Beyond Conventional: Embracing Python &amp; LLMs for Quality Assurance</title><link href="https://pyvideo.org/pybay-2023/Beyond_Conventional_Embracing_Python_LLMs_for_Quality_Assurance.html" rel="alternate"></link><published>2023-10-08T18:00:00+00:00</published><updated>2023-10-08T18:00:00+00:00</updated><author><name>Paul Pereyda Karayan</name></author><id>tag:pyvideo.org,2023-10-08:/pybay-2023/Beyond_Conventional_Embracing_Python_LLMs_for_Quality_Assurance.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;What do you do when your test suite is not fit for purpose? At Opto, we felt like we were locked in a daily battle against the tests written for our Java and TypeScript services. But, when we paired the adaptability of Python with the power of LLMs, we …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;What do you do when your test suite is not fit for purpose? At Opto, we felt like we were locked in a daily battle against the tests written for our Java and TypeScript services. But, when we paired the adaptability of Python with the power of LLMs, we were able to enhance &amp;amp; extend what we had into something that really worked!&lt;/p&gt;
&lt;p&gt;Join us on a journey of transformation where we'll cover:
- Proactive Monitoring: Implementing &amp;quot;production probes&amp;quot; - lightweight and fast Python request &amp;quot;tests&amp;quot;- to actively ensure our services were up and executing core functionalities.
- LLMs in Action: The unexpected efficacy of LLMs in aiding the creation of tests. We'll focus on our Python/TypeScript deployment tools here.
- Quality Over Quantity: Recognizing that just writing tests isn’t the end game. We harnessed FastAPI LLMs to swiftly assess our functional test coverage, helping us identify and address gaps.
- Living Documentation: A sneak peek into how we've sown the seeds for dynamic, ever-evolving documentation using Python.&lt;/p&gt;
&lt;p&gt;Throughout the session, we’ll touch on the trade-offs, democratization &amp;amp; ownership of tests, and how this little endeavor set the stage for Opto's broader embrace of Python.&lt;/p&gt;
</content><category term="PyBay 2023"></category></entry><entry><title>Using AI to Entice Employees to Python</title><link href="https://pyvideo.org/pybay-2024/using-ai-to-entice-employees-to-python.html" rel="alternate"></link><published>2024-09-21T00:00:00+00:00</published><updated>2024-09-21T00:00:00+00:00</updated><author><name>Paul Pereyda Karayan</name></author><id>tag:pyvideo.org,2024-09-21:/pybay-2024/using-ai-to-entice-employees-to-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk, we'll explore how AI being the &amp;quot;&amp;quot;bright shiny object&amp;quot;&amp;quot; as a bridge to bring both technical and non-technical employees into the world of coding. By leveraging AI tools and methodologies, we'll demonstrate how to demystify programming concepts and make them accessible and enjoyable for everyone.&lt;/p&gt;
&lt;p&gt;This …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk, we'll explore how AI being the &amp;quot;&amp;quot;bright shiny object&amp;quot;&amp;quot; as a bridge to bring both technical and non-technical employees into the world of coding. By leveraging AI tools and methodologies, we'll demonstrate how to demystify programming concepts and make them accessible and enjoyable for everyone.&lt;/p&gt;
&lt;p&gt;This comes from experience at our company, Opto Investments, as a professional engineer (PK) and an investment analyst who's a hobbyist pythonista (Manny).&lt;/p&gt;
&lt;p&gt;We'll cover:
- Engagement Strategies: Techniques for demystifying tech and getting through to that inner creativity that we know everyone has&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Lesson Plans and Case Studies we used to personalise the learning experience for individuals with different skill levels.&lt;/li&gt;
&lt;li&gt;Real-World Applications: Practical examples of how AI can be used in everyday tasks to highlight the relevance and importance of coding.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Join us to uncover the &amp;quot;&amp;quot;Secret Snake&amp;quot;&amp;quot; and learn how to leverage the excitement about AI to better teach coding, and make it an exciting and inclusive journey for all.&lt;/p&gt;
</content><category term="PyBay 2024"></category></entry><entry><title>Slaying Software Zombies with LLMs (and Lesser Incantations)</title><link href="https://pyvideo.org/pyohio-2023/slaying-software-zombies-with-llms-and-lesser-incantations.html" rel="alternate"></link><published>2023-12-16T00:00:00+00:00</published><updated>2023-12-16T00:00:00+00:00</updated><author><name>Paul Pereyda Karayan</name></author><id>tag:pyvideo.org,2023-12-16:/pyohio-2023/slaying-software-zombies-with-llms-and-lesser-incantations.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Code is organic: it grows and rots with neglect. So does the associated
“meta-code” - like docs, tests, configurations, and requirements. This
is fertile soil for Zombies, a horde of which can seriously disrupt the
software development process.&lt;/p&gt;
&lt;p&gt;In this talk, we'll explore how automated testing strategies can be used …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Code is organic: it grows and rots with neglect. So does the associated
“meta-code” - like docs, tests, configurations, and requirements. This
is fertile soil for Zombies, a horde of which can seriously disrupt the
software development process.&lt;/p&gt;
&lt;p&gt;In this talk, we'll explore how automated testing strategies can be used
to identify and minimize drift in meta-code. Techniques of yore - such
as Behaviour-Driven Development and Living Documentation - are
resuscitated before your eyes using the arcane magic of Large Language
Models (LLMs). Limitations / good targets for application are discussed
in the context of the author's experience.&lt;/p&gt;
&lt;p&gt;And if you act now, we'll throw in two other hyphenated proper nouns
(Provider-Driven Contracts and Example-Based Requirements) for free!&lt;/p&gt;
</content><category term="PyOhio 2023"></category></entry></feed>