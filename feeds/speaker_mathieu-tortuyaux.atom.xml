<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_mathieu-tortuyaux.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2017-09-24T00:00:00+00:00</updated><entry><title>Kubernetes and Python: from monolithic to micro-services</title><link href="https://pyvideo.org/pycon-fr-2017/kubernetes-and-python-from-monolithic-to-micro-services.html" rel="alternate"></link><published>2017-09-24T00:00:00+00:00</published><updated>2017-09-24T00:00:00+00:00</updated><author><name>Mathieu Tortuyaux</name></author><id>tag:pyvideo.org,2017-09-24:pycon-fr-2017/kubernetes-and-python-from-monolithic-to-micro-services.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Je vais aborder les architectures micro-services avec un exemple d'application Python.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Comment découper une architecture monolithique Python?&lt;/li&gt;
&lt;li&gt;Pourquoi devrais-je utiliser une architecture micro-services?&lt;/li&gt;
&lt;li&gt;Comment gérer ces différents nouveaux micro-services?&lt;/li&gt;
&lt;li&gt;Comment handle le déploiement de ces services w/ Docker et Kubernetes?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Je vais d'abord faire une overview pendant 5 minutes sur les micro-services (notamment une super analogie avec la musique!), puis je vais décrire et commenter les guidelines que Google conseille pour découper son application. (5 min) Enfin je passerai au cas &amp;quot;pratique&amp;quot; (10 min): comment organiser ses repos, comment faire communiquer nos micro-services et enfin le déploiement de ces services avec Kubernetes/GKE.&lt;/p&gt;
</summary></entry></feed>