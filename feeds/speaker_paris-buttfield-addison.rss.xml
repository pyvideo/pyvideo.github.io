<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org - Paris Buttfield-Addison</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Wed, 29 May 2024 00:00:00 +0000</lastBuildDate><item><title>Let's build a video game, train a bot to play it, and deploy it on a smartphone in 30 minutes</title><link>https://pyvideo.org/north-bay-python-2019/lets-build-a-video-game-train-a-bot-to-play-it-and-deploy-it-on-a-smartphone-in-30-minutes.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Paris Buttfield-Addison</dc:creator><pubDate>Sat, 02 Nov 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-11-02:/north-bay-python-2019/lets-build-a-video-game-train-a-bot-to-play-it-and-deploy-it-on-a-smartphone-in-30-minutes.html</guid><category>North Bay Python 2019</category></item><item><title>Nightmare on LLM Street: The Perils and Paradoxes of Knowing Your Foe</title><link>https://pyvideo.org/north-bay-python-2024/nightmare-on-llm-street-the-perils-and-paradoxes-of-knowing-your-foe.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;As Large Language Models (LLMs) gain trust across various sectors for tasks ranging from generating text to solving complex queries, their influence continues to expand. Yet, this trust is shadowed by significant risks, such as the subtle yet serious threat of data poisoning. This talk will delve into how deceptively crafted data can infiltrate an LLM’s training set, leading these models to propagate errors, biases, or outright fabrications—a real challenge to the integrity of their outputs.&lt;/p&gt;
&lt;p&gt;While there are various algorithms and approaches designed to mitigate these risks, this session will focus particularly on the Rank-One Model Editing (ROME) algorithm. ROME is notable for its ability to edit an LLM's knowledge in a targeted manner after training, providing a means to recalibrate AI outputs. However, it also presents a potential for misuse, as it can be employed to embed false narratives deeply within a model.&lt;/p&gt;
&lt;p&gt;Key Discussion Points:
- &lt;strong&gt;Why People Trust LLMs&lt;/strong&gt;: Exploring the reasons behind the widespread trust in LLMs and the associated risks.
- &lt;strong&gt;The Art of Data Poisoning&lt;/strong&gt;: A closer look at how maliciously crafted data is inserted into training sets and its profound impact on model behavior.
- &lt;strong&gt;Focus on ROME&lt;/strong&gt;: Discussing how the Rank-One Model Editing algorithm can both safeguard against and potentially contribute to the corruption of LLMs.
- &lt;strong&gt;Ethical Considerations&lt;/strong&gt;: Reflecting on the ethical implications of manipulating the knowledge within LLMs, which requires not just technical skill but also wisdom and responsibility.&lt;/p&gt;
&lt;p&gt;This presentation is designed for data scientists, AI researchers, and Python enthusiasts interested in understanding the vulnerabilities of LLMs and the tools available to protect these systems. While acknowledging other algorithms and methods, this talk will provide a quick demonstration of ROME, offering insights into its utility and dangers.&lt;/p&gt;
&lt;p&gt;As people continue to integrate LLMs into everything, we must remain vigilant against the risks of data manipulation. This session challenges us to consider whether we are paying enough attention to these threats, or if we are, metaphorically, just fiddling while Rome burns—allowing foundational trust in data to erode.&lt;/p&gt;
&lt;p&gt;Join me in this exploration of ROME, where we navigate the fine balance between correcting and corrupting the digital minds that are—whether we like it or not—becoming an integral part of our technological landscape.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Paris Buttfield-Addison</dc:creator><pubDate>Wed, 29 May 2024 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2024-05-29:/north-bay-python-2024/nightmare-on-llm-street-the-perils-and-paradoxes-of-knowing-your-foe.html</guid><category>North Bay Python 2024</category></item><item><title>Code the Docs: Interactive Document Environments</title><link>https://pyvideo.org/pycon-au-2016/code-the-docs-interactive-document-environments.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Paris Buttfield-Addison
&lt;a class="reference external" href="https://2016.pycon-au.org/schedule/184/view_talk"&gt;https://2016.pycon-au.org/schedule/184/view_talk&lt;/a&gt;
Distributing example code and applications with documentation is now easy. There are a million different ways to get code to people: from zips, to GitHub, to gists, and beyond. Code is easy to distribute. But how do we create a better link between example code, and written documentation?
Luckily, clever boffins have come up with some solutions: interactive document environments. These let the live code and the documentation sit side-by-side with one another, the distributed example code is the documentation.&lt;/p&gt;
&lt;p&gt;This talk will take a brief look at some of the different interactive document environments out there – mainly Jupyter, IPython Notebooks, and Swift Playgrounds – and the various strengths, weaknesses, and caveats of these tools. We’ll also explore the future, and discuss where these tools are going, as well as the implications for technical documentation. Learn how to add interactivity to your documentation, and why this might be a good idea!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Paris Buttfield-Addison</dc:creator><pubDate>Mon, 15 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-15:/pycon-au-2016/code-the-docs-interactive-document-environments.html</guid><category>PyCon AU 2016</category></item><item><title>Building, designing, teaching and training simulation environments for Machine Learning</title><link>https://pyvideo.org/pycon-au-2019/building-designing-teaching-and-training-simulation-environments-for-machine-learning.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Imagine you're building a fancy robot-driven warehouse. Your pick, place, and packing robots need to get around quickly, find the right item and put it to the right place without colliding with each other, shelves, or people. But you don't have any robots yet, and you need to start. Try simulations!&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://2019.pycon-au.org/talks/building-designing-teaching-and-training-simulation-environments-for-machine-learning"&gt;https://2019.pycon-au.org/talks/building-designing-teaching-and-training-simulation-environments-for-machine-learning&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Fri Aug  2 11:50:00 2019 at C3.6&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Paris Buttfield-Addison</dc:creator><pubDate>Fri, 02 Aug 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-08-02:/pycon-au-2019/building-designing-teaching-and-training-simulation-environments-for-machine-learning.html</guid><category>PyCon AU 2019</category></item><item><title>Code the Docs: Interactive Document Environments</title><link>https://pyvideo.org/write-the-docs-2016/code-the-docs-interactive-document-environments.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Tim McJones, Paris Buttfield-Addison
&lt;a class="reference external" href="http://lanyrd.com/2016/writethedocs/sfbztt/"&gt;http://lanyrd.com/2016/writethedocs/sfbztt/&lt;/a&gt;
Distributing example code and applications with documentation is now easy. There are a million different ways to get code to people: from zips, to GitHub, to gists, and beyond. Code is easy to distribute. But how do we create a better link between example code, and written documentation?
Luckily, clever boffins have come up with some solutions: interactive document environments. These let the live code and the documentation sit side-by-side with one another, the distributed example code is the documentation.
This talk will take a brief look at some of the different interactive document environments out there – mainly IPython Notebooks and Swift Playgrounds – and the various strengths, weaknesses, and caveats of these tools. We’ll also explore the future, and discuss where these tools are going, as well as the implications for technical documentation.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Tim McJones</dc:creator><pubDate>Sun, 22 May 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-05-22:/write-the-docs-2016/code-the-docs-interactive-document-environments.html</guid><category>Write the Docs 2016</category></item></channel></rss>