<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Wed, 23 May 2018 00:00:00 +0000</lastBuildDate><item><title>Can packaging improve Django deployments?</title><link>https://pyvideo.org/djangocon-europe-2018/can-packaging-improve-django-deployments.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;How can packaging Django projects make deployments easier, faster and more reliable?&lt;/p&gt;
&lt;p&gt;Deployments of Django projects can be a challenging task. Beside the Python source code itself you usually have to handle a lot of other stuff:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Installing Python dependencies&lt;/li&gt;
&lt;li&gt;Shipping JavaScript code and installing it's dependencies&lt;/li&gt;
&lt;li&gt;Compiling SCSS to CSS&lt;/li&gt;
&lt;li&gt;Collecting static files&lt;/li&gt;
&lt;li&gt;Building documentation&lt;/li&gt;
&lt;li&gt;Compiling translations&lt;/li&gt;
&lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And of course you want a deployment approach that is independent of a specific hosting solution.&lt;/p&gt;
&lt;p&gt;Also you have to think about the scalability of your deployment when the number of servers you operate increases.&lt;/p&gt;
&lt;p&gt;This usually means that &lt;cite&gt;git pull&lt;/cite&gt; is not the best way to deal with these tasks.&lt;/p&gt;
&lt;p&gt;So I will discuss different ways to package your Django project like&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Wheels&lt;/li&gt;
&lt;li&gt;JavaScript packages&lt;/li&gt;
&lt;li&gt;Operating system packages&lt;/li&gt;
&lt;li&gt;Containers&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Some of these concepts will hopefully help you to make your deployment process easier, faster and more reliable.&lt;/p&gt;
&lt;p&gt;Markus Zapke-Gründemann&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Markus Zapke-Gründemann</dc:creator><pubDate>Wed, 23 May 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-05-23:djangocon-europe-2018/can-packaging-improve-django-deployments.html</guid></item><item><title>Lightning Talks (day 1)</title><link>https://pyvideo.org/djangocon-europe-2010/djangoconeu-lightningtalksmontag905flv.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Markus Zapke-Gründemann</dc:creator><pubDate>Mon, 24 May 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-05-24:djangocon-europe-2010/djangoconeu-lightningtalksmontag905flv.html</guid><category>lightning talks</category></item><item><title>Writing multi-language documentation using Sphinx</title><link>https://pyvideo.org/europython-2014/writing-multi-language-documentation-using-sphinx.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;How to write multi-language documentation? What tools can you use? What
mistakes should you avoid? This talk is based on the experiences I
gathered while working on several multi-language documentation projects
using &lt;a class="reference external" href="http://sphinx-doc.org/"&gt;Sphinx&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Internationalized documentation is a fairly new topic. And there are
different approaches to do this. I will talk about how Sphinx
internationalization support works, which tools and services I use and
how to organize the translation workflow in an Open Source project.
Finally I will have a look at what the future of internationalization in
Sphinx might bring.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Markus Zapke-Gründemann</dc:creator><pubDate>Wed, 23 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-23:europython-2014/writing-multi-language-documentation-using-sphinx.html</guid></item><item><title>Mercurial Migration im großen Stil</title><link>https://pyvideo.org/pycon-de-2011/mercurial-migration-im-groen-stil.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Ein paar SVN-Repositories sind schnell nach Mercurial migriert. Und das
Entwicklerteam hat sich nach einer kurzen Einarbeitungszeit auch an das
neue Versionskontrollsystem (VCS) gewöhnt. So oder so ähnlich kennen
viele den Wechsel zu Mercurial. Was aber, wenn das alles alles im großen
Stil geschieht?&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Markus Zapke-Gründemann</dc:creator><pubDate>Thu, 06 Oct 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-10-06:pycon-de-2011/mercurial-migration-im-groen-stil.html</guid></item><item><title>Mercurial - ein verteiltes Versionskontrollsystem</title><link>https://pyvideo.org/pycon-de-2012/mercurial-ein-verteiltes-versionskontrollsystem.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Dieser Vortrag stellt Mercurial vor, zeigt aber auch optimale
Vorgehensweisen für den Entwicklungsalltag sowie die Grundlagen der
Entwicklung von Mercurial Extensions.&lt;/p&gt;
&lt;p&gt;Mercurial ist ein verteiltes Versionskontrollsystem. Die Befehle und
Funktionen sind einfach zu lernen.&lt;/p&gt;
&lt;p&gt;Da es unabhängig vom einem Server arbeitet kann jeder lokal und auch
ohne Internetverbindung Dokumente oder Quellcode damit verwalten.
Trotzdem kann man mit Mercurial die Repositories untereinander
austauschen und so auch über weite Entfernungen zusammen arbeiten.&lt;/p&gt;
&lt;p&gt;Mercurial ist komplett in Python geschrieben und lässt sich deshalb
einfach erweitern.&lt;/p&gt;
&lt;p&gt;Viele bekannte Open Source Projekte und Firmen setzen Mercurial ein. So
zum Beispiel Atlassian, Dovecot, Gajim, Google, Facebook, Mozilla,
OpenOffice, OpenSolaris, Python, PyPy, RabbitMQ, Unity, Vim oder Xen.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Markus Zapke-Gründemann</dc:creator><pubDate>Thu, 01 Nov 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-11-01:pycon-de-2012/mercurial-ein-verteiltes-versionskontrollsystem.html</guid><category>dvcs</category><category>mercurial</category><category>python</category><category>softwareentwicklung</category></item><item><title>Virtuelle Entwicklungsumgebungen mit Vagrant</title><link>https://pyvideo.org/pycon-de-2012/virtuelle-entwicklungsumgebungen-mit-vagrant.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Oft benötigt man für verschiedene Projekte ganz unterschiedliche
Bibliotheken, Dienste und Werkzeuge. Alle Abhängigkeiten auf einer
Maschine zu installieren kann schnell anstrengend bis unmöglich werden.
Hier kommt Vagrant ins Spiel: Mit Hilfe von Vagrant kann man einfach und
schnell Virtuelle Maschinen als Entwicklungsumgebungen erstellen,
konfigurieren und benutzen.&lt;/p&gt;
&lt;p&gt;Durch die Nutzung von (vorhandenen) Provisioning Tools wie Chef oder
Puppet kann man vorhandene Konfigurationen von Produktiv-System zum
Setup der Virtuellen Maschinen nutzen. Außerdem lassen sich mit Vagrant
auch komplexe Cluster-Setups auf dem eigenen Rechner aufbauen.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Markus Zapke-Gründemann</dc:creator><pubDate>Wed, 31 Oct 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-10-31:pycon-de-2012/virtuelle-entwicklungsumgebungen-mit-vagrant.html</guid><category>vagrant</category><category>virtual box</category><category>virtuelle maschinen</category></item><item><title>Sphinx i18n</title><link>https://pyvideo.org/pycon-de-2013/sphinx-i18n.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Sphinx hat schon rudimentäre Unterstützung für die Internationalisierung
von Dokumentationen mit Hilfe von gettext. Dieser Vortrag berichtet über
die eigenen Erfahrungen und diskutiert weitergehende Lösungsansätze.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Markus Zapke-Gründemann</dc:creator><pubDate>Tue, 15 Oct 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-10-15:pycon-de-2013/sphinx-i18n.html</guid><category>dokumentation</category><category>gettext</category><category>i18n</category><category>internationalisierung</category><category>sphinx</category><category>transifex</category></item></channel></rss>