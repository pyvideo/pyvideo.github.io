<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org - Philipp Schiele</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Mon, 10 Jul 2023 00:00:00 +0000</lastBuildDate><item><title>Convex Optimization using CVXPY</title><link>https://pyvideo.org/scipy-2022/convex-optimization-using-cvxpy.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In a convex optimization problem, the goal is to find a numerical assignment to a variable that minimizes an objective function, while also satisfying some constraints. The variable might represent parameters in a machine learning model, trades in a financial portfolio, actuations for controllers of a physical system, or tunable parameters for the design of a physical device. In industry, convex optimization problems are solved to land rockets, allocate financial portfolios, fit machine learning models, and control self-driving cars, among other applications. By abstracting away numerical solvers, CVXPY makes it easy to specify and solve convex optimization problems. CVXPY is best understood as a rewriting system for convex optimization problems, with a user-facing front-end and a solver-facing back-end:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Front-end: CVXPY provides users with a large library of atomic functions, like exp, log, and norm. These atoms can be composed according to a simple rule that guarantees convexity of the composition, forming the grammar of CVXPY. Formulating problems using this rule is known as Disciplined Convex Programming.&lt;/li&gt;
&lt;li&gt;Back-end: When the &lt;cite&gt;solve&lt;/cite&gt; method on a problem is called, CVXPY transparently rewrites it into a terse numerical format expected by a solver; it will then call the solver, and return a solution to the user.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This tutorial will cover the basics of convex optimization with CVXPY, with an emphasis on real-world applications. Attendees will come away with:
* A thorough understanding of what a convex optimization problem is.
* The ability to model real-world problems as convex optimization problems, using CVXPY.
* The ability to use CVXPY Parameters to solve many related convex optimization problems in a short amount of time.
* An exposure to advanced features included in CVXPY, including quasiconvex programming, log-log convex programming, and differentiating through parametric convex optimization problems.&lt;/p&gt;
&lt;p&gt;Target audience:
* Computationally-minded scientists and engineers from any field who are interested in learning about a powerful tool for solving mathematically modeled problems.&lt;/p&gt;
&lt;p&gt;Prerequisites:
* Basic understanding of linear algebra and probability.
* We do _not_ assume any familiarity with convex optimization or mathematical programming.&amp;quot;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/cvxgrp/cvx_short_course"&gt;https://github.com/cvxgrp/cvx_short_course&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Steven Diamond</dc:creator><pubDate>Mon, 11 Jul 2022 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2022-07-11:/scipy-2022/convex-optimization-using-cvxpy.html</guid><category>SciPy 2022</category></item><item><title>Disciplined Saddle Programming | SciPy 2023</title><link>https://pyvideo.org/scipy-2023/disciplined-saddle-programming-scipy-2023.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Our recent work implements a domain-specific language called Disciplined Saddle Programming (DSP) in Python. It is available at &lt;a class="reference external" href="https://github.com/cvxgrp/dsp"&gt;https://github.com/cvxgrp/dsp&lt;/a&gt;. DSP allows specifying convex-concave saddle, or minimax problems, a class of convex optimization problems commonly used in game theory, machine learning, and finance. One application for DSP is to naturally describe and solve robust optimization problems. We show numerous examples of these problems, including robust regressions and economic applications. However, this only represents a fraction of problems solvable with DSP, and we want to engage with the SciPy community to hear about further potential applications.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Eric Sager Luxenberg</dc:creator><pubDate>Mon, 10 Jul 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-07-10:/scipy-2023/disciplined-saddle-programming-scipy-2023.html</guid><category>SciPy 2023</category></item></channel></rss>