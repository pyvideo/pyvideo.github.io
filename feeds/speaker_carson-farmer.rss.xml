<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Mon, 14 Jul 2014 00:00:00 +0000</lastBuildDate><item><title>Light-weight real-time event detection with Python</title><link>https://pyvideo.org/scipy-2014/light-weight-real-time-event-detection-with-pytho.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Real-time feeds of user activity from various apps such as Twitter,
Foursquare, and others are becoming increasingly available. These
'digital footprints' provide new means to understand how individuals
utilize the places and spaces of urban environments. We present a
light-weight framework for real-time event detection in a city based on
existing SciPy libraries and real-time Twitter streams.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this paper, we utilize real-time 'social information sources' to
automatically detect important events at the urban scale. The goal is to
provide city planners and others with information on &lt;em&gt;what&lt;/em&gt; is going on,
and &lt;em&gt;when&lt;/em&gt; and &lt;em&gt;where&lt;/em&gt; it is happening. Traditionally, this type of
analysis would require a large investment in heavy-duty computing
infrastructure, however, we suggest that a focus on real-time analytics
in a lightweight streaming framework is the most logical step forward.&lt;/p&gt;
&lt;p&gt;Using online Latent Semantic Analysis (LSA) from the
&lt;tt class="docutils literal"&gt;`gensim&lt;/tt&gt; &amp;lt;&lt;a class="reference external" href="https://github.com/piskvorky/gensim/"&gt;https://github.com/piskvorky/gensim/&lt;/a&gt;&amp;gt;`__ Python package, we
extract 'topics' from tweets in an online training fashion. To maintain
real-time relevance, the topic model is continually updated, and
depending on parameterization, can 'forget' past topics. Based on a set
of learned topics, a grid of spatially located tweets for each
identified topic is generated using standard &lt;tt class="docutils literal"&gt;numpy&lt;/tt&gt; and
&lt;tt class="docutils literal"&gt;scipy.spatial&lt;/tt&gt; functionality. Using an efficient streaming algorithm
for approximating 2D kernel density estimation (KDE), locations with the
highest density of tweets on a particular topic are located. Locations
are semantically labeled using the learned topics, based on the
assumption that events can be directly tied to a particularly popular
topic at a particular location.&lt;/p&gt;
&lt;p&gt;To facilitate real time visualization of results, we utilize the
&lt;tt class="docutils literal"&gt;`pico&lt;/tt&gt; &amp;lt;&lt;a class="reference external" href="https://github.com/fergalwalsh/pico"&gt;https://github.com/fergalwalsh/pico&lt;/a&gt;&amp;gt;`__ Python/Javascript
library as a real-time bridge between server-side Python analysis and
client-side Javascript visualization. This enables fast, responsive
interactivity of computationally intensive tasks. Additionally, since
&lt;tt class="docutils literal"&gt;pico&lt;/tt&gt; allows streaming data from Python to Javascript, updates to the
web-interface are sent and consumed as needed, such that only
significant changes in an event's status, or the introduction of a new
event, will cause updates to the visualizations. Finally, because all
models, data structures, and outputs on the server side are pickle-able
Python objects, this entire framework is small enough to be deployed on
almost any server with Python installed.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Carson Farmer</dc:creator><pubDate>Mon, 14 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-14:scipy-2014/light-weight-real-time-event-detection-with-pytho.html</guid></item><item><title>Geospatial data in Python: Database, Desktop, and the Web part 1</title><link>https://pyvideo.org/scipy-2014/geospatial-data-in-python-database-desktop-and.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Using the wide range of tools and libraries available for working with
geospatial data, it is now possible to transport geospatial data from a
database to a web-interface in only a few lines of code. In this
tutorial, we explore some of these libraries and work through examples
which showcase the power of Python for geospatial data.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Tools and libraries for working with geospatial data in Python are
currently undergoing rapid development and expansion. Libraries such as
shapely, fiona, rasterio, geopandas, and others now provide Pythonic
ways of reading, writing, editing, and manipulating geographic data. In
this tutorial, participants will be exposed to a number of new and
legacy geospatial libraries in Python, with a focus on simple and rapid
interaction with geospatial data.&lt;/p&gt;
&lt;p&gt;We will utilize Python to interact with geographic data from a database
to a web interface, all the while showcasing how Python can be used to
access data from online resources, query spatially enabled databases,
perform coordinate transformations and geoprocessing functions, and
export geospatial data to web-enabled formats for visualizing and
sharing with others. Time permitting, we will also briefly explore
Python plugin development for the QGIS Desktop GIS environment.&lt;/p&gt;
&lt;p&gt;This tutorial should be accessible to anyone who has basic Python
knowledge (though familiarity with Pandas, NumPy, matplotlib, etc. will
be helpful) as well as familiarity with IPython Notebook. We will take
some time at the start of the tutorial to go over installation
strategies for geospatial libraries (GDAL/OGR, Proj.4, GEOS) and their
Python bindings (Shapely, Fiona, GeoPandas) on Windows, Mac, and Linux.
Some knowledge of geospatial concepts such as map projections and GIS
data formats will also be helpful.&lt;/p&gt;
&lt;div class="section" id="outline"&gt;
&lt;h4&gt;Outline&lt;/h4&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Introduction to geospatial data&lt;ul&gt;
&lt;li&gt;Map projections, data formats, and looking at maps&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Introduction to geospatial libraries&lt;ul&gt;
&lt;li&gt;GDAL/OGR (Fiona); Shapely (GEOS); PostGIS; GeoPandas; and more&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;GeoPandas&lt;ul&gt;
&lt;li&gt;Reading data from various sources&lt;/li&gt;
&lt;li&gt;Data manipulation and plotting&lt;/li&gt;
&lt;li&gt;Writing data to various sources&lt;/li&gt;
&lt;li&gt;Getting data from the web&lt;/li&gt;
&lt;li&gt;Pushing data to the web (for maps)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Putting it all together&lt;ul&gt;
&lt;li&gt;Quick example: From database to web&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Introduction to QGIS Desktop GIS (time permitting)&lt;ul&gt;
&lt;li&gt;Python interface (PyQGIS)&lt;/li&gt;
&lt;li&gt;Building a simple plugin&lt;/li&gt;
&lt;li&gt;Plugin deployment&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Carson Farmer</dc:creator><pubDate>Wed, 09 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-09:scipy-2014/geospatial-data-in-python-database-desktop-and.html</guid><category>geospatial</category><category>gis</category><category>tutorial</category></item><item><title>Geospatial data in Python: Database, Desktop, and the Web part 2</title><link>https://pyvideo.org/scipy-2014/geospatial-data-in-python-database-desktop-and-0.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Using the wide range of tools and libraries available for working with
geospatial data, it is now possible to transport geospatial data from a
database to a web-interface in only a few lines of code. In this
tutorial, we explore some of these libraries and work through examples
which showcase the power of Python for geospatial data.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Carson Farmer</dc:creator><pubDate>Wed, 09 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-09:scipy-2014/geospatial-data-in-python-database-desktop-and-0.html</guid><category>geospatial</category><category>gis</category><category>tutorial</category></item><item><title>Geospatial data in Python: Database, Desktop and the Web - Part 3</title><link>https://pyvideo.org/scipy-2014/geospatial-data-in-python-database-desktop-and-1.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Using the wide range of tools and libraries available for working with
geospatial data, it is now possible to transport geospatial data from a
database to a web-interface in only a few lines of code. In this
tutorial, we explore some of these libraries and work through examples
which showcase the power of Python for geospatial data.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Tools and libraries for working with geospatial data in Python are
currently undergoing rapid development and expansion. Libraries such as
shapely, fiona, rasterio, geopandas, and others now provide Pythonic
ways of reading, writing, editing, and manipulating geographic data. In
this tutorial, participants will be exposed to a number of new and
legacy geospatial libraries in Python, with a focus on simple and rapid
interaction with geospatial data.&lt;/p&gt;
&lt;p&gt;We will utilize Python to interact with geographic data from a database
to a web interface, all the while showcasing how Python can be used to
access data from online resources, query spatially enabled databases,
perform coordinate transformations and geoprocessing functions, and
export geospatial data to web-enabled formats for visualizing and
sharing with others. Time permitting, we will also briefly explore
Python plugin development for the QGIS Desktop GIS environment.&lt;/p&gt;
&lt;p&gt;This tutorial should be accessible to anyone who has basic Python
knowledge (though familiarity with Pandas, NumPy, matplotlib, etc. will
be helpful) as well as familiarity with IPython Notebook. We will take
some time at the start of the tutorial to go over installation
strategies for geospatial libraries (GDAL/OGR, Proj.4, GEOS) and their
Python bindings (Shapely, Fiona, GeoPandas) on Windows, Mac, and Linux.
Some knowledge of geospatial concepts such as map projections and GIS
data formats will also be helpful.&lt;/p&gt;
&lt;div class="section" id="outline"&gt;
&lt;h4&gt;Outline&lt;/h4&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Introduction to geospatial data&lt;ul&gt;
&lt;li&gt;Map projections, data formats, and looking at maps&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Introduction to geospatial libraries&lt;ul&gt;
&lt;li&gt;GDAL/OGR (Fiona); Shapely (GEOS); PostGIS; GeoPandas; and more&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;GeoPandas&lt;ul&gt;
&lt;li&gt;Reading data from various sources&lt;/li&gt;
&lt;li&gt;Data manipulation and plotting&lt;/li&gt;
&lt;li&gt;Writing data to various sources&lt;/li&gt;
&lt;li&gt;Getting data from the web&lt;/li&gt;
&lt;li&gt;Pushing data to the web (for maps)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Putting it all together&lt;ul&gt;
&lt;li&gt;Quick example: From database to web&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Introduction to QGIS Desktop GIS (time permitting)&lt;ul&gt;
&lt;li&gt;Python interface (PyQGIS)&lt;/li&gt;
&lt;li&gt;Building a simple plugin&lt;/li&gt;
&lt;li&gt;Plugin deployment&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Carson Farmer</dc:creator><pubDate>Wed, 09 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-09:scipy-2014/geospatial-data-in-python-database-desktop-and-1.html</guid><category>geospatial</category><category>gis</category><category>tutorial</category></item></channel></rss>