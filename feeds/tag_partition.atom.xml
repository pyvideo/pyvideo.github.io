<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/tag_partition.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2013-10-17T00:00:00+00:00</updated><entry><title>Table Partitioning with Django</title><link href="https://pyvideo.org/pycon-de-2013/table-partitioning-with-django.html" rel="alternate"></link><published>2013-10-17T00:00:00+00:00</published><updated>2013-10-17T00:00:00+00:00</updated><author><name>Max Tepkeev</name></author><id>tag:pyvideo.org,2013-10-17:pycon-de-2013/table-partitioning-with-django.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Table partitioning can be thought of as a division of one large table
into several smaller tables which represent that original table. Table
partitioning is &amp;quot;transparent&amp;quot;, that means that in theory you don't need
to change any code to work with partitioned tables.&lt;/p&gt;
&lt;p&gt;We will talk about table partitioning theory in general and
implementations in different database servers. Why and when we need to
do table partitioning. What problems we can face and how we can solve
them.&lt;/p&gt;
&lt;p&gt;Django provides us with great database abstraction and ORM, but how can
we use it with table partitioning ? We will talk about existing
libraries for Django to work with table partitioning, their differences,
which is the best (if any) and why.&lt;/p&gt;
</summary><category term="database"></category><category term="django"></category><category term="partition"></category><category term="partitioning"></category></entry></feed>