<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org - Thomas Stephens</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Sat, 01 Apr 2023 00:00:00 +0000</lastBuildDate><item><title>Kubernetes after 18 months</title><link>https://pyvideo.org/pytexas-2017/kubernetes-after-18-months.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Learn from our experience deploying both new and legacy applications to Kubernetes over the last 18 months. Weâ€™ve done everything from building greenfield microservices to migrating our existing core HTTP applications and video processing pipeline to Kubernetes, across different cloud vendors.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Thomas Stephens</dc:creator><pubDate>Sat, 18 Nov 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-11-18:/pytexas-2017/kubernetes-after-18-months.html</guid><category>PyTexas 2017</category></item><item><title>Free yourself from your ORM with mypy!</title><link>https://pyvideo.org/pytexas-2019/free-yourself-from-your-orm-with-mypy.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Can you decouple yourself from your ORM while still maintaining safety and convenience? You can, and mypy can help! Learn how static type checking and functional patterns can help you write less coupled, more transparent and safer code, without an ORM.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Thomas Stephens</dc:creator><pubDate>Sat, 13 Apr 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-04-13:/pytexas-2019/free-yourself-from-your-orm-with-mypy.html</guid><category>PyTexas 2019</category><category>mypy</category></item><item><title>A Tale of Two Typings</title><link>https://pyvideo.org/pytexas-2023/a-tale-of-two-typings.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&amp;quot;A Tale of Two Typings&amp;quot;
We discuss two different methodologies we have used to add type annotations to our Python services: gradually adding type annotations, or incrementally re-writing the code with type annotations. We'll discuss the benefits and challenges of each, when either may be appropriate, and our real-world experiences doing both.
Speaker: Thomas Stephens&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Thomas Stephens</dc:creator><pubDate>Sat, 01 Apr 2023 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2023-04-01:/pytexas-2023/a-tale-of-two-typings.html</guid><category>PyTexas 2023</category></item></channel></rss>