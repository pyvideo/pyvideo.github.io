<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Fri, 12 Jul 2019 00:00:00 +0000</lastBuildDate><item><title>Astro Pi: Python on the International Space Station</title><link>https://pyvideo.org/europython-2019/astro-pi-python-on-the-international-space-station.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A collaboration between the Raspberry Pi Foundation and the European
Space Agency put two Raspberry Pi computers augmented with sensor boards
and camera modules on the International Space Station in 2015. Every
year we run a series of competitions for kids in schools around Europe
to design science experiments using the available sensors.&lt;/p&gt;
&lt;p&gt;Mission Zero is a low-barrier challenge where students can run a 1
minute Python program in space to display a message to the astronauts.
They have access to the sensors for conditional logic but cannot record
data or take photos.&lt;/p&gt;
&lt;p&gt;Mission Space Lab is a more involved challenge, including planning an
experiment, writing and testing code which will run for 3 hours in
space, either studying life in space or life on earth (which includes
taking photos of Earth out of the ISS window). MSL teams get to keep the
data and photo they record in their experiment and are to write a report
analysing their findings.&lt;/p&gt;
&lt;p&gt;A small tech team at the Raspberry Pi Foundation maintain the operating
system used in flight and work in collaboration with ESA and partners to
keep the operation of the Pis running smoothly on the ISS LAN.&lt;/p&gt;
&lt;p&gt;As well as sharing details of the OS maintenance and devops for the
Astro Pis, I'll share photos taken from space and show findings from
student experiments using opencv, tensorflow, scikit-learn, ephem and
more.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ben Nuttall</dc:creator><pubDate>Fri, 12 Jul 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-07-12:europython-2019/astro-pi-python-on-the-international-space-station.html</guid><category>Data</category><category>Education</category><category>Linux</category><category>OpenCV</category><category>Raspberry PI</category></item><item><title>Don't do this at work</title><link>https://pyvideo.org/europython-2019/dont-do-this-at-work.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk I reframe a computer programming workshop for kids I
delivered earlier this year, exploring and sharing my experience
throughout that journey, from preparation to delivery, by recreating a
simple yet engaging enough game.&lt;/p&gt;
&lt;p&gt;With that I'll both demonstrate several Python related techniques and
tools many may not be aware of, on one hand, and, on the other, extract
provocative questions about general learning processes, especially when
targeted at professional developers.&lt;/p&gt;
&lt;p&gt;I promise zero slides and a somewhat fast-paced live (re)coding session,
intertwined with comments on good/bad techniques, along with a
surprising exploration of the turtle module in the Standard Library --
it is more capable than you think.&lt;/p&gt;
&lt;p&gt;I wrap up with a self-code review and with thoughts on how such a game
could be improved, what implications that could have for both beginners
and seasoned professionals: should you do this at work?&lt;/p&gt;
&lt;p&gt;Targeting 10 minute Q&amp;amp;A / discussion by the end!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Tiago Montes</dc:creator><pubDate>Fri, 12 Jul 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-07-12:europython-2019/dont-do-this-at-work.html</guid><category>Best Practice</category><category>Education</category><category>Learning</category><category>Life</category><category>Python Skills</category></item><item><title>Game Development with CircuitPython</title><link>https://pyvideo.org/europython-2019/game-development-with-circuitpython.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Making computer games is difficult: it requires creativity,
multidisciplinary knowledge of art, psychology, math, computer science,
physics and others, patience, open mind and dedication. Making computer
games with Python is a nightmare. You hit practically every sharp corner
that Python has, starting with installation, through binary libraries,
poor hardware support, up to distribution.&lt;/p&gt;
&lt;p&gt;PewPew devices are an attempt at solving the worst problems by giving
you a dedicated, cheap, simple and portable gaming device, that you can
easily program with Python with just a simple text editor. They also
make pretty neat conference badges. I will talk about how they were
conceived, how they are used, and how you can extend and improve them
yourself.&lt;/p&gt;
&lt;p&gt;At the end of the talk you should have a good idea about what is
CircuitPython and MicroPython and how they can be used to build and
program such simple devices. You should also know where to find the
resources necessary to try designing and building your own.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Radomir Dopieralski</dc:creator><pubDate>Fri, 12 Jul 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-07-12:europython-2019/game-development-with-circuitpython.html</guid><category>Education</category><category>Gadgets</category><category>Hardware/IoT</category><category>Learning</category><category>MicroPython</category></item><item><title>Tools of the Trade: The Making of a Code Editor.</title><link>https://pyvideo.org/europython-2019/tools-of-the-trade-the-making-of-a-code-editor.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk tells the story of Mu, a native code editor written in Python
(&lt;a class="reference external" href="https://codewith.mu/"&gt;https://codewith.mu/&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;One Sunday afternoon I foolishly asked myself, &amp;quot;How hard can it be to
write a simple code editor?&amp;quot; Several years later an international team
of volunteers are still working on the project. We have had to address:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Cross platform GUI development.&lt;/li&gt;
&lt;li&gt;Cross platform packaging solutions for Python.&lt;/li&gt;
&lt;li&gt;Creating an interactive visual debugger.&lt;/li&gt;
&lt;li&gt;Integrating with iPython notebook.&lt;/li&gt;
&lt;li&gt;Integrating with various IoT MicroPython devices.&lt;/li&gt;
&lt;li&gt;Integrating with frameworks such as PyGame/PyGameZero and Flask.&lt;/li&gt;
&lt;li&gt;Automating cross platform testing.&lt;/li&gt;
&lt;li&gt;Researching and testing UX with a challenging user base.&lt;/li&gt;
&lt;li&gt;Accessibility for all.&lt;/li&gt;
&lt;li&gt;Internationalisation.&lt;/li&gt;
&lt;li&gt;Creating an inclusive, welcoming and supportive community.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This talk will explain why Mu was created, how Mu was created and, most
importantly, shares the decision making, technical research and
implementation details of Mu in the hope others can learn from our
mistakes, mis-steps and muck-ups.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nicholas Tollervey</dc:creator><pubDate>Fri, 12 Jul 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-07-12:europython-2019/tools-of-the-trade-the-making-of-a-code-editor.html</guid><category>Cross-Platform-Development</category><category>Development</category><category>Education</category><category>Packaging</category><category>failures/mistakes</category></item><item><title>Gamifying the study of algorithms</title><link>https://pyvideo.org/europython-2019/gamifying-the-study-of-algorithms.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Do you remember when you used to learn algorithms? It was probably
either back when you were studying for your degree, or when you were
brushing up for a technical interview. If you're like most of the
developers I know, solving algorithms probably went from being a fun
past-time, to a bothersome necessity, to a thing of the past. Our life
has been greatly improved by our tools and there's little need to know
all sorting methods out there, or how to search through a tree. Or maybe
we're wrong, maybe knowing these things could make a difference in how
we write code.&lt;/p&gt;
&lt;p&gt;I am going to try to dispel some of the myths surrounding the study of
algorithms and competitive programming, and argue that sharpening this
skill is something that benefits us, as software developers, outside of
passing technical tests; that knowing many algorithms makes us better
and faster problem solvers.&lt;/p&gt;
&lt;p&gt;Lastly, this talk is about resources and ways in which to gamify the
study of algorithms. Going at it the same way as for exams or interviews
makes it very bothersome very quickly. It gets easy to lose sight of the
biggest picture and to start thinking of algorithms in abstract terms,
outside their applications. All these are factors that prompt the
question: why should I carry on with it?&lt;/p&gt;
&lt;p&gt;Therefore, something needs to be changed in the way we do this.
Algorithms are fun and they don't deserve the disdain we give them.
Knowing algorithms is not only for the geniuses and innovators.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Iulia Avram</dc:creator><pubDate>Thu, 11 Jul 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-07-11:europython-2019/gamifying-the-study-of-algorithms.html</guid><category>Algorithms</category><category>Best Practice</category><category>Education</category><category>Fun and Humor</category></item><item><title>The world's cheapest, simplest plotter</title><link>https://pyvideo.org/europython-2019/the-worlds-cheapest-simplest-plotter.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;I present an ultra-cheap (total cost of materials :€12.50) plotter that
can be built with minimal skills.&lt;/p&gt;
&lt;p&gt;At its heart is a Raspberry Pi Zero and some relatively custom software,
driving three servo motors.&lt;/p&gt;
&lt;p&gt;The mechanical hardware can be built from nothing but stiff card, a
ball-point pen and some glue. The only tools required are a ruler, a
sharp knife, a screwdriver and something to make holes in the card.&lt;/p&gt;
&lt;p&gt;Almost everything required can be found in a desk or kitchen drawer. The
entire device can be built with no special skills in about an hour (and
much of that time will be spent getting the glue off the kitchen table
before you get in trouble).&lt;/p&gt;
&lt;p&gt;As you can see from the following images, the plotter produces images
with a distinct charm:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.dropbox.com/s/s7x3cnxzp1zwnp0/europython.jpg?dl=0"&gt;https://www.dropbox.com/s/s7x3cnxzp1zwnp0/europython.jpg?dl=0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.dropbox.com/s/lzykb02rxh2d9ef/IMG_0065.jpg?dl=0"&gt;https://www.dropbox.com/s/lzykb02rxh2d9ef/IMG_0065.jpg?dl=0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.dropbox.com/s/8ibihhbfz9gmql0/IMG_0067.jpg?dl=0"&gt;https://www.dropbox.com/s/8ibihhbfz9gmql0/IMG_0067.jpg?dl=0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.dropbox.com/s/50lemnzw5ismcrq/IMG_0075.jpg?dl=0"&gt;https://www.dropbox.com/s/50lemnzw5ismcrq/IMG_0075.jpg?dl=0&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It can also function as the world's most inconvenient camera: take a
photo using the Raspberry Pi's camera, convert it into lines, and draw
it.&lt;/p&gt;
&lt;p&gt;This is fun, but it's much more than that. There are barriers of skill,
expense and materials around robotics. This project comes with me to
African PyCons, and makes it possible for programmers to explore
Python-based robotics, however limited their resources.&lt;/p&gt;
&lt;p&gt;The tools and complete kit of materials to build several plotters can be
carried in a small box. The plotter code is published on GitHub:
&lt;a class="reference external" href="https://github.com/evildmp/PantoGraph"&gt;https://github.com/evildmp/PantoGraph&lt;/a&gt;. The code for converting bitmaps
to cartesian vectors is at &lt;a class="reference external" href="https://github.com/evildmp/linedraw/"&gt;https://github.com/evildmp/linedraw/&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I expect this to appeal to anyone who is interested in the idea of
Python- driven robotics but is put off by the cost and complexity of
hardware required actually to achieve something.&lt;/p&gt;
&lt;p&gt;It will be particularly of interest to people involved in education, or
who'd like to explore Python with young people. The code, mathematics
and especially the hardware in this project are all simple.&lt;/p&gt;
&lt;p&gt;The code resists the temptation to abstraction, and makes a point of
breaking operations down into steps that are as easy as possible to
follow. The project shows that doing things with robotics isn't just for
people with well-equipped workshops and the engineering skills to use
them.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Daniele Procida</dc:creator><pubDate>Thu, 11 Jul 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-07-11:europython-2019/the-worlds-cheapest-simplest-plotter.html</guid><category>Education</category></item><item><title>Teaching Programming to the Next Generation</title><link>https://pyvideo.org/europython-2019/teaching-programming-to-the-next-generation.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Our generation of young people in school (aged 5-18) have noticed the
connection between Computer pRogramming, Technology &amp;amp; Success and
Billionaires.On mass they are clamoring to master the skill of Computer
pRogramming. We describe a successful working model for the teaching of
Computer pRogamming.&lt;/p&gt;
&lt;p&gt;Computer Science is now regarded as one of the leading disciplines in
the 21st century. Computers are ubiquitous and prevalent in most, if not
all, sectors of our modern society – applications include using them in
weather forecasting, robotic surgery, space exploration, e-commerce,
smart cities, driverless cars, etc.&lt;/p&gt;
&lt;p&gt;Therefore, coding or computer programming is now regarded by many as an
essential skill for the young person, and it has been dubbed the ‘4th’
R’ (computer pRogramming) along with Reading, wRiting and aRithmetic.&lt;/p&gt;
&lt;p&gt;In recognition of the new status of computer programming, governments
worldwide have launched initiatives to have it taught in schools from
Kindergarten through to junior school and all the way through secondary
school.&lt;/p&gt;
&lt;p&gt;So, the question emerges is how do we best teach and motivate the next
generation in acquiring this skill? Given the fact that this field is
very much in its infancy, there are insufficient number of skilled
Computer Science teachers and very little pedagogy to guide the
educator. Therefore, the whole world is learning how best to teach this
subject by trial and error.&lt;/p&gt;
&lt;p&gt;The talk will describe a case study whereby coding/computer programming,
in the form of Python programming, was introduced to a group of 110
young people from the ages of 11 to 18 (Years 7-13 in a U.K secondary
school). The talk will include descriptions of the various teaching
methodologies introduced to the young people for this purpose and the
outcomes; the talk will also address various challenges and questions
about how to teach coding to young people. The talk will conclude with
helpful suggestions, based on the findings of the case study, on how to
proceed with the teaching of computer programming to these people.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lilian Nandi anonymous</dc:creator><pubDate>Wed, 10 Jul 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-07-10:europython-2019/teaching-programming-to-the-next-generation.html</guid><category>All Other Programming Languages</category><category>Education</category><category>Programming</category><category>Python 3</category><category>Teaching</category></item><item><title>Using Python to Teach Computational Finance</title><link>https://pyvideo.org/europython-2019/using-python-to-teach-computational-finance.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this demo-driven session, we will introduce the Probo package for
teaching Python programming and concepts from computational finance to
beginning programmers in the domain of finance. We'll show how Python is
the perfect tool for teaching computational thinking to develop deeper
quantitative reasoning. Jupyter notebooks, together with Python packages
such as NumPy and Pandas, provide the ideal learning environment.&lt;/p&gt;
&lt;p&gt;We will start by introducing the Probo package for derivative pricing
and hedging. We will demo the pricing of European and American options
via the famous Black-Scholes option pricing model. Other examples
include Monte Carlo simulation and binomial trees. Using Probo, the
answers to derivative pricing problems are right at the students'
fingertips. Students can operationalize their understanding by going
directly from the mathematics of derivative pricing theories to their
implementation in clean and simple code.&lt;/p&gt;
&lt;p&gt;We will end with a demonstration using Probo to teach the concept of
dynamic hedging. Dynamic hedging is perhaps &lt;em&gt;the&lt;/em&gt; crucial concept in
modern financial derivatives theory. It is also one of the most
difficult concepts to grasp. We'll show how developing deeper intuition
is possible with computational thinking via Monte Carlo simulation of
delta-hedging. By leveraging the power and simplicity of Python and
Jupyter notebooks, the Probo package provides the ideal learning
platform for students of computational finance.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Tyler Brough</dc:creator><pubDate>Wed, 10 Jul 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-07-10:europython-2019/using-python-to-teach-computational-finance.html</guid><category>Beginners</category><category>Business</category><category>Business Cases</category><category>Education</category><category>Jupyter</category></item><item><title>How to Become a Kickass Team Lead 101</title><link>https://pyvideo.org/pycon-italia-2019/how-to-become-a-kickass-team-lead-101.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Title: How to Become a Kickass Team Lead 101&lt;/p&gt;
&lt;p&gt;Audience Level: Beginner&lt;/p&gt;
&lt;p&gt;Requirements: None&lt;/p&gt;
&lt;div class="section" id="summary"&gt;
&lt;h4&gt;SUMMARY&lt;/h4&gt;
&lt;p&gt;Most engineers who get promoted to the role of a team lead, tech lead or
lead developer (regardless of the wording of the title) feel like they
were thrown in cold waters as they, most probably, lack prior training
or education on the subject matter. Most of us that survive and actually
get to like the new role and arrive at really good results, manage to
educate themselves on the skills and habits required to become an
effective team leader.&lt;/p&gt;
&lt;p&gt;In this talk, I will cover the most important lessons about being an
effective team lead without any previous knowledge about the subject.
This is a practical talk and the audience will walk away with a lot of
material and advice to upgrade their engineering leadership game, as
well as a recommended set of resources for further study. The talk is
primarily focused on developing leadership skills and is tailored
towards engineers and software teams.&lt;/p&gt;
&lt;p&gt;The learning goals are: - How to develop practical leadership skills for
your day-to-day job - Understand the core components of leadership: ATM
(Ability, Team, Mission) - How to build teamwork on a foundation of
trust - How to overcome the main dysfunctions to look in order to
tighten up your team - Increase your awareness of the main anti-patterns
that team leads end up doing&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Feedback form:&lt;/strong&gt; &lt;a class="reference external" href="https://python.it/feedback-1668"&gt;https://python.it/feedback-1668&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;Friday 3 May&lt;/strong&gt; at 11:15 &lt;a class="reference external" href="/en/sprints/schedule/pycon10/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ahmad Alhour</dc:creator><pubDate>Fri, 03 May 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-05-03:pycon-italia-2019/how-to-become-a-kickass-team-lead-101.html</guid><category>management</category><category>community</category><category>leadership</category><category>teamwork</category><category>tech-lead</category><category>education</category></item><item><title>Leaving Certificate Computer Science &amp; Python</title><link>https://pyvideo.org/pycon-ireland-2018/leaving-certificate-computer-science-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk is broken into 4 sections: Section 1: The structure of the Leaving Certificate Computer Science pilot scheme Section 2: The structure of the Leaving Certificate CS Specification Section 3: How Python can be applied to the Leaving Certificate CS specification Section 4 : The Computer Science Teachers' Association of Ireland and Python Ireland I am the founder of the Computer Science Teachers' Association of Ireland and have been in contact with Nicolas Laurence about links between the CSTAI and Python Ireland. Nicolas suggested that I should come to the conference and submit a talk about this topic.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Stephen Murphy</dc:creator><pubDate>Sat, 10 Nov 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-11-10:pycon-ireland-2018/leaving-certificate-computer-science-python.html</guid><category>Education</category></item><item><title>Using iPython Notebook in the Classroom</title><link>https://pyvideo.org/europython-2013/using-ipython-notebook-in-the-classroom.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Anders Lehmann</dc:creator><pubDate>Thu, 04 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-04:europython-2013/using-ipython-notebook-in-the-classroom.html</guid><category>Pedagogical learning</category><category>iPython</category><category>education</category><category>physics</category><category>Learning environment</category><category>interactive</category></item><item><title>How do we struggle with Python in Martin?</title><link>https://pyvideo.org/pycon-sk-2018/how-do-we-struggle-with-python-in-martin.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Od roku 2014 sa programovacím jazykom na gymnáziu Viliama Pauliny Tótha
stal Python. O tom akým spôsobom prebieha výučba, ako sme sa k jazyku
Python dostali a aké problémy sme museli riešiť, by som sa chcel s vami
podeliť. Nedajú sa ani opomenúť herné prostredia, ktoré pri vyučovaní
využívame. Takisto v poslednom roku sme začali využívať Jupyter
Notebooky s rozšírením Nbgrader, čo výučbu opäť posunulo dopredu. Ako
inšpiráciu pre ostatných by som rád ukázal aj niektoré príklady, s
ktorými trápime našich študentov.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Tomáš Dudík</dc:creator><pubDate>Fri, 09 Mar 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-03-09:pycon-sk-2018/how-do-we-struggle-with-python-in-martin.html</guid><category>Education</category><category>JupiterNotebook</category><category>PyCon SK</category><category>Python</category></item><item><title>Pythonプログラミング教育に関する考察</title><link>https://pyvideo.org/pycon-japan-2012/pythonpuroguramingujiao-yu-niguan-surukao-cha.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;プログラミング未経験者を対象にPythonプログラミング教育を行った経験からプログラミングからシステム開発のスキルを学ぶときに気をつけるべき事項について示す。また、プログラミングの効率を改善するための開発環境等に関しても言及する。&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">土屋 陽介</dc:creator><pubDate>Sat, 15 Sep 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-09-15:pycon-japan-2012/pythonpuroguramingujiao-yu-niguan-surukao-cha.html</guid><category>education</category></item><item><title>When data meets education! The secret life of data in education</title><link>https://pyvideo.org/pycon-us-2018/when-data-meets-education-the-secret-life-of-data-in-education.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In the last decades, the power of data and analytics has transformed instruction in education. Increasingly, large-scale data is available on student learning and interaction online. Much of this data represents student behavior. This has allowed researchers to model and track many elements of student learning that were not previously feasible at scale: engagement, affect, collaborative skill, and robust learning. In turn, these models can be used in prediction of long-term student outcomes, and to analyze the factors driving long-term success of students,&lt;/p&gt;
&lt;p&gt;This talk will focus on secret life of data in education, the key points of my talk will be:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Data meets education&lt;/li&gt;
&lt;li&gt;Course tracking&lt;/li&gt;
&lt;li&gt;Student Behaviour&lt;/li&gt;
&lt;li&gt;Data-driven education&lt;/li&gt;
&lt;li&gt;Finishing strong&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Rizky Ariestiyansyah</dc:creator><pubDate>Thu, 10 May 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-05-10:pycon-us-2018/when-data-meets-education-the-secret-life-of-data-in-education.html</guid><category>education</category></item><item><title>Growing a Python community</title><link>https://pyvideo.org/pycon-italia-2017/growing-a-python-community.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk is about people, not tools.&lt;/p&gt;
&lt;p&gt;I would like to share one recipe of building a community from scratch.&lt;/p&gt;
&lt;p&gt;It reveals hands-on experience about the organisational journey,
including insider details and financial questions.&lt;/p&gt;
&lt;p&gt;The information is packed into the story, how one year ago a tempting
idea of making a little Python conference in Munich was born. Six month
later, with poor German skills, no business network and mostly foreign
crew a little idea was converted into PyCon.DE. This conference had a
noticeable Italian flavour, and it’s time to tell why.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Anton Caceres</dc:creator><pubDate>Sat, 08 Apr 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-04-08:pycon-italia-2017/growing-a-python-community.html</guid><category>humor</category><category>conferences</category><category>business</category><category>community</category><category>beer</category><category>teamwork</category><category>social</category><category>education</category></item><item><title>Python in Africa</title><link>https://pyvideo.org/pycon-italia-2017/python-in-africa.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;“What is Python?” is a common phrase in Africa, especially when you try
to advertise Python events. This is because Python is a relatively new
programming language in most parts of Africa. In most countries where
global companies like Google, Amazon and Oracle are absent, Python is
rarely used as a programming language in businesses. Despite this, a
number of Python enthusiasts from different parts of the globe have been
working so hard to promote the use of Python in Africa by setting up a
vibrant community on the continent.&lt;/p&gt;
&lt;p&gt;In my talk, I will share on the various Python initiatives taking place
in some parts of the African continent and how they have advanced the
use of Python in Africa. I will also present the challenges faced by
developers in Africa in building their Python community. My talk will
also present the milestones that have been achieved so far in trying to
advance the use of Python in Africa. I will also share on the
opportunities that Africa presents in terms of making an impact within
the Python community. I will conclude my talk by highlighting ways in
which we can all make a difference in advancing the use and knowledge of
Python in Africa.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Anna Makarudze</dc:creator><pubDate>Fri, 07 Apr 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-04-07:pycon-italia-2017/python-in-africa.html</guid><category>conferences</category><category>business</category><category>startup</category><category>beginner</category><category>community</category><category>women</category><category>teamwork</category><category>OpenSource</category><category>social</category><category>pyladies</category><category>education</category><category>Learning environment</category><category>user-groups</category></item><item><title>SocialLearning: encontrando materiales formativos de manera colaborativa</title><link>https://pyvideo.org/pycon-es-2015/sociallearning-encontrando-materiales-formativos-de-manera-colaborativa.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;SocialLearning: encontrando materiales formativos de manera colaborativa&lt;/p&gt;
&lt;p&gt;Social learning es una plataforma de gestión documental orientada al descubrimiento y clasificación de recursos formativos (videos, documentos, páginas web, etc) a partir de búsquedas en redes sociales de forma masiva y automatizada.&lt;/p&gt;
&lt;p&gt;Es un proyecto libre (&lt;a class="reference external" href="https://github.com/alabarga/SocialLearning"&gt;https://github.com/alabarga/SocialLearning&lt;/a&gt;) desarrollado en Python y utiliza librerías como Django, REST framework, NTLTK, Celery/Redis, etc.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alberto Labarga</dc:creator><pubDate>Tue, 02 Feb 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-02-02:pycon-es-2015/sociallearning-encontrando-materiales-formativos-de-manera-colaborativa.html</guid><category>T. Científico</category><category>education</category></item><item><title>Designing hardware APIs to facilitate hands-on learning</title><link>https://pyvideo.org/pycon-au-2016/designing-hardware-apis-to-facilitate-hands-on-learning.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Andreas Antoniades
&lt;a class="reference external" href="https://2016.pycon-au.org/schedule/172/view_talk"&gt;https://2016.pycon-au.org/schedule/172/view_talk&lt;/a&gt;
Through experimentation with educational hardware and software, Obelisk Systems has identified the need for, and developed a brand new framework to allow students (both university and high-school) fluid interaction with complex hardware within classrooms. This framework is further implemented into an API that handles all low-level sensor access whilst maintaining relevance to a wide variety of students.
This API will be used to interface with space experimentation and education hardware being developed by Obelisk Systems.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andreas Antoniades</dc:creator><pubDate>Mon, 15 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-15:pycon-au-2016/designing-hardware-apis-to-facilitate-hands-on-learning.html</guid><category>education</category></item><item><title>Doing Math with Python</title><link>https://pyvideo.org/pycon-au-2016/doing-math-with-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Amit Saha
&lt;a class="reference external" href="https://2016.pycon-au.org/schedule/83/view_talk"&gt;https://2016.pycon-au.org/schedule/83/view_talk&lt;/a&gt;
The talk aims to highlight how Python is the perfect programming language to make programming more fun and immediately applicable to young learners. By making use of standard library modules such as the fractions module, third party packages such as matplotlib and sympy, the audience will learn how to write programs to solve common math problems. Some of the topics that will be discussed are:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Simulating uniform and non-uniform random events&lt;/li&gt;
&lt;li&gt;Drawing Fractals&lt;/li&gt;
&lt;li&gt;Solving algebraic equations and inequalities&lt;/li&gt;
&lt;li&gt;Solving calculus problems&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Amit Saha</dc:creator><pubDate>Mon, 15 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-15:pycon-au-2016/doing-math-with-python.html</guid><category>education</category></item><item><title>Exploring Kivy in the classroom - GUI and App development for Python</title><link>https://pyvideo.org/pycon-au-2016/exploring-kivy-in-the-classroom-gui-and-app-development-for-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Amanda Hogan
&lt;a class="reference external" href="https://2016.pycon-au.org/schedule/88/view_talk"&gt;https://2016.pycon-au.org/schedule/88/view_talk&lt;/a&gt;
Graphical User Interface with Python is a tricky business. Come and learn a bit about Kivy and learn about my successes and failures using it with my Senior Software Development students (in NSW) to introduce GUI and App development with Python.
In this workshop you'll be introduced to the Kivy library, the tagging and formatting in kv files, setting up the python classes to support the UI and passing parameters between them.
The workshop is not really suitable for the Python beginner because we need to play around with classes and methods (one of the challenges with using it in the classroom) but will otherwise be a fairly measured pace.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Amanda Hogan</dc:creator><pubDate>Mon, 15 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-15:pycon-au-2016/exploring-kivy-in-the-classroom-gui-and-app-development-for-python.html</guid><category>kivy</category><category>education</category></item><item><title>Integrating Python within a School Context</title><link>https://pyvideo.org/pycon-au-2016/integrating-python-within-a-school-context.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Brad Nielsen
&lt;a class="reference external" href="https://2016.pycon-au.org/schedule/185/view_talk"&gt;https://2016.pycon-au.org/schedule/185/view_talk&lt;/a&gt;
Python is an ideal first programming language for secondary school students due to the simplicity of its syntax, its enforced code formatting, and the extensibility of the language. Introducing Python to a school however, takes planning, an incremental approach, and modification to existing curriculum plans based on experience. In this presentation, you will be given an overview of how a high school has introduced Python through years 8-12. You will also learn about various Python packages and environments that can be of benefit to a school including: Python Turtle, Grok Learning, Pygame, Flask, and PythonAnywhere.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Brad Nielsen</dc:creator><pubDate>Mon, 15 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-15:pycon-au-2016/integrating-python-within-a-school-context.html</guid><category>education</category></item><item><title>MicroPython: Embedded programming for everyone</title><link>https://pyvideo.org/pycon-au-2016/micropython-embedded-programming-for-everyone.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Jim Mussared
&lt;a class="reference external" href="https://2016.pycon-au.org/schedule/110/view_talk"&gt;https://2016.pycon-au.org/schedule/110/view_talk&lt;/a&gt;
Embedded programming allows students to take their programs into the physical world - to build robots and interactive gadgets with sensors and displays. Until recently, this has been almost exclusively the domain of lower level languages like C which is not known for its beginner friendliness.&lt;/p&gt;
&lt;p&gt;MicroPython is an optimized implementation of Python 3 designed to be run on the sort of embedded microcontrollers that are making their way into the classroom, allowing Python to take the place of C. In particular, the BBC MicroBit, the pyboard and the ESP8266 all now support MicroPython.&lt;/p&gt;
&lt;p&gt;By using a language that students are already familiar with, more time can be spent on fun things like building robots and less time debugging code or setting up development tools.&lt;/p&gt;
&lt;p&gt;One of the problems with teaching embedded programming in a classroom environment is the equipment required - both the actual boards and any additional accessories or modules. We will also demonstrate a browser-based MicroBit simulator which makes embedded programming accessible to more students and also allows for the creation of structured lessons, problems and assessments.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jim Mussared</dc:creator><pubDate>Mon, 15 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-15:pycon-au-2016/micropython-embedded-programming-for-everyone.html</guid><category>MicroPython</category><category>education</category></item><item><title>Python at Terrace</title><link>https://pyvideo.org/pycon-au-2016/python-at-terrace.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Tim Stephens
&lt;a class="reference external" href="https://2016.pycon-au.org/schedule/95/view_talk"&gt;https://2016.pycon-au.org/schedule/95/view_talk&lt;/a&gt;
The development of the Digital Technologies curriculum and the shift from ICT to DT has dramatically changed the teaching of computing in schools. This change has challenged teachers to find new solutions and software to assist them in their teaching of the curriculum. Some schools have employed Python as a way of meeting these challenges and requirements outlined in the curriculum documents.
The band description 8.6 states that  by the end of Grade Eight students should be using a general purpose language to code solutions. At Terrace we decided to use Python to achieve this outcome because of Python’s ease of deployment, cost and syntax light approach. Students in Grade Eight use the turtle and functions to write their name and create shapes. In Grades Nine and Ten the band description states:Students develop modular solutions to complex problems using an object-oriented programming language where appropriate, and evaluate their solutions and existing information systems based on a broad set of criteria including connections to existing policies and their enterprise potential. To achieve this we get students to program classes and databases. Students create a piece of software that creates customers for a bank or a character creator for an RPG. Students design, implement and evaluate the software that they create. In this presentation I will share the successes and failures over the past five years and provide people with software options, programs of work and ideas for Grades Eight to Ten when using Python.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Tim Stephens</dc:creator><pubDate>Mon, 15 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-15:pycon-au-2016/python-at-terrace.html</guid><category>education</category></item><item><title>Smart City: Connecting the dots and digital kids</title><link>https://pyvideo.org/pycon-au-2016/smart-city-connecting-the-dots-and-digital-kids.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Roland Gesthuizen
&lt;a class="reference external" href="https://2016.pycon-au.org/schedule/203/view_talk"&gt;https://2016.pycon-au.org/schedule/203/view_talk&lt;/a&gt;
Schools face a daunting challenge to increase their student
exposure to coding, hands-on technology learning to solve some
real-world problems and teaching STEM principles (Science, Technology,
Engineering and Mathematics) through design, construction and testing.
This personal presentation by a leading teacher illustrate journey to
connect his students to some real-world problems and the challenges
faced along the way. Following on from an earlier
computational-thinking challenge to build and program a moving
vehicle, Roland's current mission is to challenge students to design,
build a smart city consisting of intelligent vehicles and
infrastructure. To do this they need to program a navigation algorithm
to autonomously navigate vehicles through a series of traffic
challenges that test collision avoidance and road safety. They have
been invited to showcase their work at the ITS2016 Word Congress in
Melbourne with a maker-space for delegates to share our hands-on
problem solving and learning with the software and models developed by
the students. Moonshots live in a grey area between audacious
technology and pure science fiction. Our moonshot was to empower
students around the globe to build and control their future.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Roland Gesthuizen</dc:creator><pubDate>Mon, 15 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-15:pycon-au-2016/smart-city-connecting-the-dots-and-digital-kids.html</guid><category>education</category></item><item><title>Teaching geometry using Logo/Python turtle module, or how to sneak programming into maths class</title><link>https://pyvideo.org/pycon-au-2016/teaching-geometry-using-logopython-turtle-module-or-how-to-sneak-programming-into-maths-class.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Vivian Li
&lt;a class="reference external" href="https://2016.pycon-au.org/schedule/117/view_talk"&gt;https://2016.pycon-au.org/schedule/117/view_talk&lt;/a&gt;
With the new national curriculum for Digital Technologies, there is a fantastic opportunity (and in some schools, need) to teach programming in conjunction with other learning areas. Python is an ideal first language, and there is a natural and deep relationship between mathematics and computer science.&lt;/p&gt;
&lt;p&gt;We used the Python’s Turtle module (an implementation of Logo) to create resources that integrate the Year 7 Geometry topic and the basics of Python programming in a way that’s highly engaging for students. Learn about how we integrated the two subject areas and the results of our pilot run with a cohort of Year 7 students in NSW.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Vivian Li</dc:creator><pubDate>Mon, 15 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-15:pycon-au-2016/teaching-geometry-using-logopython-turtle-module-or-how-to-sneak-programming-into-maths-class.html</guid><category>education</category></item><item><title>Teaching Python: Ten+ Years of Successes, Trials and Tribulations</title><link>https://pyvideo.org/pycon-au-2016/teaching-python-ten-years-of-successes-trials-and-tribulations.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Bruce Fuda
&lt;a class="reference external" href="https://2016.pycon-au.org/schedule/125/view_talk"&gt;https://2016.pycon-au.org/schedule/125/view_talk&lt;/a&gt;
Teaching programming has always been a challenge given the lack of experience, understanding and knowledge students in schools generally have about what is involved and what it means to be studying &amp;quot;IT&amp;quot;. It hasn't been helped by a lack of robust curriculum in most states and territories in Australia. With the recent endorsement of the Australian Curriculum: Digital Technologies, most states and territories have implementation timelines as early as 2017, and this means that teachers (and those who want to support them in their classrooms) now have an obligation to deliver ambitious, engaging and rigorous learning activities in their classrooms. Having been in the enviable situation of being supported and encouraged to design and implement innovative computer science curricula for students in years 6-12, I'll be sharing the reasons why I choose to use Python as my primary teaching language in high school, and identify the tips, tricks and traps teachers need to watch out for when using it as the basis for learning not just programming skills, but computational thinking more generally. This includes an explanation of the importance of a project-driven approach, and demonstration of the techniques I use and projects my students work on in class.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Bruce Fuda</dc:creator><pubDate>Mon, 15 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-15:pycon-au-2016/teaching-python-ten-years-of-successes-trials-and-tribulations.html</guid><category>education</category></item><item><title>Teaching Python with Minecraft</title><link>https://pyvideo.org/pycon-au-2016/teaching-python-with-minecraft.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Digital K
&lt;a class="reference external" href="https://2016.pycon-au.org/schedule/134/view_talk"&gt;https://2016.pycon-au.org/schedule/134/view_talk&lt;/a&gt;
Minecraft is one of the best selling video games of all time. So, why not use it as a tool for teaching Python?&lt;/p&gt;
&lt;p&gt;Instead of clicking to place blocks, students can create giant shapes, structures or even games within the game by learning some basic Python code - and along the way, key programming concepts.&lt;/p&gt;
&lt;p&gt;This presentation will cover how it works, and what you need to set this up for school or home. We'll look at examples of coding projects, how it can relate to other subjects in the curriculum (such as maths and design), and discuss why this is a great tool for introducing beginners to text-based coding.&lt;/p&gt;
&lt;p&gt;No prior knowledge required, although some familiarity with the Minecraft game and/ or text-based coding will be useful.&lt;/p&gt;
&lt;p&gt;Recommended for teachers or parents of students in Years 5 - 12 who are at a beginner or intermediate stage of learning programming.  Budding young coders also welcome!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Digital K</dc:creator><pubDate>Mon, 15 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-15:pycon-au-2016/teaching-python-with-minecraft.html</guid><category>education</category></item><item><title>Learn Python The Fun Way</title><link>https://pyvideo.org/europython-2016/learn-python-the-fun-way.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Liana Bakradze - Learn Python The Fun Way
[EuroPython 2016]
[18 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/learn-python-the-fun-way"&gt;https://ep2016.europython.eu//conference/talks/learn-python-the-fun-way&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Programming is one of the most important 21st-century skills and tons
of different online and offline resources can help you to master it.&lt;/p&gt;
&lt;p&gt;On the other hand, playing games is really effective way for us to
learn and it's also the most fun.&lt;/p&gt;
&lt;p&gt;But is it possible to learn real programming language like Python by
playing a game?&lt;/p&gt;
&lt;p&gt;In this talk I'll show you some projects that allow you to achieve
that. I also want to inspire you to help such projects and to suggest
ideas how to do that.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;Programming is one of the most important 21st-century skills. It
doesn't only provide promising career opportunities but teaches how to
reason logically, systematically and creatively.&lt;/p&gt;
&lt;p&gt;Code readability, rich standard library, straightforward syntax and
other features make Python a great language for teaching beginners how
to program. Python community is very supportive and friendly to
newcomers and does awesome work to make Python available to everyone.
Tons of different online and offline resources can help you to master
Python programming. Problem solving is the classical way of learning
how to code. But it can be boring for some people, especially for
kids.&lt;/p&gt;
&lt;p&gt;On the other hand, playing games is really effective way for us to
learn and it's also the most fun. You can find different games
designed to teach basics of programming, but most of them use special
visual environments and don't teach real text based languages.&lt;/p&gt;
&lt;p&gt;But is it possible to learn programming language like Python by playing a game?&lt;/p&gt;
&lt;p&gt;In this talk I'll show you a few projects for different age and levels
that allow you to achieve that. I'll pay attention on methods that are
used to teach programming.&lt;/p&gt;
&lt;p&gt;I also want to inspire you to help such projects and to suggest ideas
how to do that.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Liana Bakradze</dc:creator><pubDate>Thu, 28 Jul 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-07-28:europython-2016/learn-python-the-fun-way.html</guid><category>education</category><category>gamification</category></item><item><title>Labs in the Wild: Teaching Signal Processing Using Wearables &amp; Jupyter Notebooks</title><link>https://pyvideo.org/scipy-2016/labs-in-the-wild-teaching-signal-processing-using-wearables-jupyter-notebooks-scipy-2016.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Jupyter notebooks and the Python ecosystem provide a unique opportunity for interactive, web-based, teaching of content that has not traditionally leveraged scientific computing resources. We discuss the design and implementation of a new biological signal processing course at Harvard, ES155, which fuses Wearable technology and cloud-based analysis of data. ES155 bridges the gap that has traditionally existed between Electrical Engineering and Computer Science education, in a framework that we term “Labs in the Wild”. In the process of designing the course, we have had to solve the problem of serving Jupyter notebooks on the cloud reliably using AWS EC2 instances. This is a challenging problem because a successful approach must be scalable, cost-effective, reliable, and address the privacy concerns associated with cloud-based technologies. We describe our system in this talk, and perform a live demo of how students in our class interact with the system, and give examples of ingenious final projects put together by students. Being cloud-based, our system lowers the barrier of entry for students to begin using Python for scientific computing.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Demba Ba</dc:creator><pubDate>Fri, 15 Jul 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-07-15:scipy-2016/labs-in-the-wild-teaching-signal-processing-using-wearables-jupyter-notebooks-scipy-2016.html</guid><category>SciPy 2016</category><category>jupyter notebook</category><category>wearable</category><category>education</category></item><item><title>Practical Experience in Teaching Numerical Methods with IPython Notebooks</title><link>https://pyvideo.org/scipy-2014/practical-experience-in-teaching-numerical-method.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;New tools like the IPython notebook can enhance both lectures and
textbooks, by making class time and individual study more interactive
through the inclusion of executable code and animations. I will demo
some materials and activities I've provided for students using the
IPython notebook. I will focus on practical issues I've faced that are
particular to this teaching approach.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Traditional university teaching is based on the use of lectures in class
and textbooks out of class. The medium (lecture or book) discourages the
natural curiosity that can lead to deeper understanding by investigating
the result of changing a parameter, or looking at the full results of a
time-dependent simulation.&lt;/p&gt;
&lt;p&gt;The IPython notebook provides a single medium in which mathematics,
explanations, executable code, and animated or interactive visualization
can be combined. Notebooks that combine all of these components can
enable new modes of student-led inquiry: the student can experiment with
modifications to the code and see the results, all without stepping away
from the mathematical explanations themselves. When notebooks are used
by students in the classroom, students can quickly share and discuss
results with the instructor or other class members. The instructor can
facilitate deeper learning by posing questions that students may answer
through writing appropriate code, during class time.&lt;/p&gt;
&lt;p&gt;For the past four years, I have taught a graduate numerical analysis
course using SAGE worksheets and IPython notebooks. I will show examples
of the notebooks I've developed and successfully used in this course. I
will describe some practical aspects of my experience, such as:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Tradeoffs between using IPython and SAGE&lt;/li&gt;
&lt;li&gt;Experiences with use of cloud computing platforms&lt;/li&gt;
&lt;li&gt;Dealing with students' installation issues&lt;/li&gt;
&lt;li&gt;Quickly getting students up to speed with the Python language and
packages&lt;/li&gt;
&lt;li&gt;Testing and evaluating homework in a math course that is
programming-intensive&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">David I. Ketcheson</dc:creator><pubDate>Wed, 09 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-09:scipy-2014/practical-experience-in-teaching-numerical-method.html</guid><category>education</category><category>ipynb</category></item><item><title>Project based introduction to scientific computing for physics majors</title><link>https://pyvideo.org/scipy-2014/project-based-introduction-to-scientific-computin.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;This talk will present an overview of a project-based introductory
course in scientific computing using python for physics majors at Cal
Poly San Luis Obispo.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Computational tools and skills are as critical to the training of
physics majors as calculus and math, yet they receive much less emphasis
in the undergraduate curriculum. One-off courses that introduce
programming and basic numerical problem-solving techniques with
commercial software packages for topics that appear in the traditional
physics curriculum are insufficient to prepare students for the
computing demands of modern technical careers. Yet tight budgets and
rigid degree requirements constrain the ability to expand computational
course offerings for physics majors.&lt;/p&gt;
&lt;p&gt;This talk will present an overview of a recently revamped course at Cal
Poly San Luis Obispo that uses Python and associated scientific
computing libraries to introduce the fundamentals of open-source tools,
version control systems, programming, numerical problem solving and
algorithmic thinking to undergraduate physics majors. The spirit of the
course is similar to the bootcamps organized by &lt;a class="reference external" href="http://software-carpentry.org"&gt;Software
Carpentry&lt;/a&gt; for researchers in science
but is offered as a ten-week for-credit course. In addition to having a
traditional in-class component, students learn the basics of Python by
completing tutorials on &lt;a class="reference external" href="http://www.codecademy.com"&gt;Codecademy&lt;/a&gt;'s
Python track and practice their algorithmic thinking by tackling
&lt;a class="reference external" href="http://projecteuler.net"&gt;Project Euler&lt;/a&gt; problems. This approach of
incorporating online training may provide a different way of thinking
about the role of MOOCs in higher education. The early part of the
course focuses on skill-building, while the second half is devoted to
application of these skills to an independent research-level
computational physics project. Examples of recent projects and their
results will be presented.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jennifer Klay</dc:creator><pubDate>Wed, 09 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-09:scipy-2014/project-based-introduction-to-scientific-computin.html</guid><category>education</category><category>physics</category></item><item><title>Scientific Computing in the Undergraduate Meteorology Curriculum at Millersville Univ</title><link>https://pyvideo.org/scipy-2014/scientific-computing-in-the-undergraduate-meteoro.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Scientific computing is an important aspect of the undergraduate
meteorology curriculum at Millersville University. All students take a
course in Fortran, and many take additional courses in Python and
atmospheric numerical modeling. This presentation discusses how
scientific computing is incorporated into the curriculum, and why
Fortran and Python were chosen as the languages to be taught.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Scientific computing is integrated into the undergraduate meteorology
curriculum at Millersville University. The curriculum guidelines
published by the American Meteorological Society specifically address
scientific computing in undergraduate atmospheric sciences curricula,
stating that students should gain “experience using a high-level
structured programming language (e.g., C, C++, Python, MATLAB, IDL, or
Fortran).” This is addressed at Millersville via the
programming-specific courses are ESCI 282 – &lt;em&gt;Fortran Programming for the
Earth Sciences&lt;/em&gt;, and ESCI 386 – &lt;em&gt;Scientific Programming, Analysis and
Visualization with Python&lt;/em&gt;. There are also additional courses in which
the students are required to use scientific computing as part of their
assignments. Examples of these courses are ESCI 445 – &lt;em&gt;Numerical
Modeling of the Atmosphere and Oceans&lt;/em&gt;, and ESCI 390 – &lt;em&gt;Remote Sensing&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Although the university’s computer science department teaches
programming courses in Java, this is not very applicable to our
students’ needs for scientific programming. We therefore teach our own
programming courses in-house. The required programming course taken by
all students is the Fortran course, which teaches them the elements of
programming. This is many students’ first exposure to programming. Most
then follow-on by taking the Python course. In the Python course,
scientific data analysis and visualization are stressed, using the
Scientific Python, Numerical Python, and Matplotlib libraries.&lt;/p&gt;
&lt;p&gt;In the elective numerical modeling course, students are required to
write programs for finite-difference solutions to various 1-D and 2-D
partial differential equations relevant to modeling the fluid dynamics
of the atmosphere. They may program in any language of their choosing,
but the majority of students choose Python, even if they have no prior
experience with it. This is because of Python’s intuitive syntax and
ease of use. In the elective remote sensing course students are
introduced to and use IDL/ENVI for display and analysis of remote
sensing imagery.&lt;/p&gt;
&lt;p&gt;Prior to 2012 the current Python course was instead taught as a course
in IDL. The transition was made for several reasons. The primary reason
was the limited market and usage of IDL compared to more pervasive
languages such as MATLAB and Python. Many students would not have access
to IDL once they graduate. Also, Python is gaining traction in usage in
the atmospheric and oceanic sciences, and is not proprietary like IDL
and MATLAB, so students will have access to it no matter where they find
employment or graduate school opportunities. The high cost of
maintaining an institutional IDL license is also an issue that the
university must address annually, and it times of lean budgets it
becomes an attractive target for elimination. The IDL course is still on
the books, but there are no immediate plans for upcoming offerings.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alex DeCaria</dc:creator><pubDate>Wed, 09 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-09:scipy-2014/scientific-computing-in-the-undergraduate-meteoro.html</guid><category>education</category><category>meteorology</category></item><item><title>Zeke: A Python Platform for Teaching Mathematical Modeling of Infectious Diseases</title><link>https://pyvideo.org/scipy-2014/zeke-a-python-platform-for-teaching-mathematical.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Zeke is an educational platform implemented using Python, SciPy and
Django which allows students and researchers interested in the modeling
of infectious diseases to learn both modeling and scientific computing
skills in an interactive environment, without forcing theoretical and
computational skills to be developed simultaneously.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Computational and mathematical models can yield profound insights in the
study of the spread of infectious diseases, illustrating difficult
concepts such as herd immunity, suggesting new avenues for empirical
research, and obtaining repeatable, quantifiable evidence in situations
where other study designs are difficult if not impossible.&lt;/p&gt;
&lt;p&gt;Teaching infectious disease modeling presents a challenge however, as it
requires the development of three unrelated skill sets: the theory of
infectious disease models, subject-matter expertise about the diseases
themselves, and the programming skills needed to implement all but the
simplest models.&lt;/p&gt;
&lt;p&gt;Rather than forcing these skill sets to be developed in parallel, &lt;em&gt;Zeke&lt;/em&gt;
is an educational platform meant to allow students to develop these
skills in sequence. It uses a zombie epidemic to remove the need for
specific expertise regarding disease systems, relying instead on a
familiar cultural reference. Students are allowed to first explore the
theory of modeling, a Django front-end enabling interaction with models
without the need for scientific computing skills. All the models are
however implemented to be stand-alone models that can be run using SciPy
or other packages, and as students grow in sophistication the
open-source nature of &lt;em&gt;Zeke&lt;/em&gt; allows them to develop both computational
and subject-specific expertise in a stepwise fashion.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Eric Lofgren</dc:creator><pubDate>Wed, 09 Jul 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-07-09:scipy-2014/zeke-a-python-platform-for-teaching-mathematical.html</guid><category>education</category></item><item><title>The London Python Code Dojo - an Education in Developer Education</title><link>https://pyvideo.org/europython-2011/the-london-python-code-dojo-an-education-in-dev.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Nicholas Tollervey - 24 June 2011 in &amp;quot;Track Ravioli &amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The London Python Code Dojo is a community organised monthly meeting for
Python programmers in the UK. Variously described as social coding,
developer training, &amp;quot;Scrapheap Challenge&amp;quot; for Pythonistas and &amp;quot;I didn't
learn coding like this when I was a lad&amp;quot;, we've forked the traditional
code-dojo format and turned it into something very different.&lt;/p&gt;
&lt;p&gt;This talk will explain and explore what happens in the dojo, how it's
organised and why various changes were made to the classic dojo format.
Reference will also be made to influences from music education and
philosophy of education.&lt;/p&gt;
&lt;p&gt;Hopefully, by the end of the talk you'll all want to go organise a dojo!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nicholas Tollervey</dc:creator><pubDate>Sun, 24 Jul 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-07-24:europython-2011/the-london-python-code-dojo-an-education-in-dev.html</guid><category>community</category><category>education</category></item><item><title>Brendan McCane - Introductory programming with Python</title><link>https://pyvideo.org/kiwi-pycon-2009/brendan-mccane---introductory-programming-with-py.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Introductory programming with Python&lt;/p&gt;
&lt;p&gt;Presented by Brendan McCane&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;In first semester 2009, CS at Otago introduced an introductory
programming course using Python. This talk will describe the course and
student outcomes.&lt;/p&gt;
&lt;p&gt;Outline&lt;/p&gt;
&lt;p&gt;The talk will cover the following topics: - the problems of teaching and
learning programming - does language make a difference? - why Python is
a good choice for a first language - the structure of the course -
things that worked well, and things that didn't - what students thought
about it - impact on learning Java in the second semester - changes for
2010 Note: this is a preliminary outline, it's likely that it will
change somewhat before the conference.&lt;/p&gt;
&lt;p&gt;[VIDEO HAS ISSUES: Sound and video are poor. Slides are hard to read.]&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Brendan McCane</dc:creator><pubDate>Sat, 07 Nov 2009 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2009-11-07:kiwi-pycon-2009/brendan-mccane---introductory-programming-with-py.html</guid><category>education</category><category>kiwipycon</category><category>kiwipycon2009</category></item><item><title>Lightning Talks Sunday and Conference Close</title><link>https://pyvideo.org/pycon-au-2012/lightning-talks-sunday-and-conference-close-0.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Various speakers</dc:creator><pubDate>Thu, 23 Aug 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-08-23:pycon-au-2012/lightning-talks-sunday-and-conference-close-0.html</guid><category>lightning talks</category><category>education</category></item><item><title>Lightning Talks Saturday</title><link>https://pyvideo.org/pycon-au-2012/lightning-talks-saturday-0.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Various speakers</dc:creator><pubDate>Wed, 22 Aug 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-08-22:pycon-au-2012/lightning-talks-saturday-0.html</guid><category>lightning talks</category><category>education</category></item></channel></rss>