<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/event_odessapy-2018.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2018-09-30T00:00:00+00:00</updated><entry><title>Async Python and Web Sockets</title><link href="https://pyvideo.org/odessapy-2018/async-python-and-web-sockets.html" rel="alternate"></link><published>2018-09-30T00:00:00+00:00</published><updated>2018-09-30T00:00:00+00:00</updated><author><name>Anton Caceres</name></author><id>tag:pyvideo.org,2018-09-30:odessapy-2018/async-python-and-web-sockets.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Modern webapps react not just to user actions, but also to server events. Such bi-directional communication can be easily achieved using Web Sockets, a protocol standardized by W3C to be a default tool for full-duplex connections on the Web.&lt;/p&gt;
&lt;p&gt;Although most of web-frameworks do not support Web Sockets out of the box, Python has multiple options available making it a piece of cake. In combination with native async tools introduced since Python 3.4, the code can be very easy and elegant, leaving no excuses for long polling and other hacks. This talk showcases integrating Web Sockets in Python web-apps, focusing on situations that can make good use of it and presenting implementations with most popular frameworks.&lt;/p&gt;
</summary><category term="websockets"></category></entry><entry><title>Competitive programming using Python</title><link href="https://pyvideo.org/odessapy-2018/competitive-programming-using-python.html" rel="alternate"></link><published>2018-09-30T00:00:00+00:00</published><updated>2018-09-30T00:00:00+00:00</updated><author><name>Andrii Soldatenko</name></author><id>tag:pyvideo.org,2018-09-30:odessapy-2018/competitive-programming-using-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Competitive programming is really fantastic discipline to improve your programming and math skills. The idea is very simple given well-known computer science problems, solve them as quickly as possible. From another point, these challenges have been used frequently in the initial coding interview tasks. Usually all participants uses C/C++/Java, but last decade we can see increasing trend of contestants who uses Python in programming challenges.&lt;/p&gt;
&lt;p&gt;In this talk I’ll show you how to start compete using Python, I’ll share couple personal tips &amp;amp; tricks how to prepare and start to take part into programming contests using Python. I’ll show you how to motivate yourself to practice and how to define of class of problem and how to try to solve it. I’ll demonstrate you some limits of Python and how to avoid it to make correct and fast solutions. I’ll discuss with you how to master the art of testing and how to crack and generate hidden test cases and boundaries. Also I’ll explain how to quickly estimate complexity of you solution, without too many proofs and math to get desired AC (Accepted).&lt;/p&gt;
&lt;p&gt;It takes a long time to become a good competitive programmer, but it is also an opportunity to learn a lot.&lt;/p&gt;
</summary></entry><entry><title>Django-prototyper - from idea to deploy in 5 minuets</title><link href="https://pyvideo.org/odessapy-2018/django-prototyper-from-idea-to-deploy-in-5-minuets.html" rel="alternate"></link><published>2018-09-30T00:00:00+00:00</published><updated>2018-09-30T00:00:00+00:00</updated><author><name>Vitaliy Kucheryaviy</name></author><id>tag:pyvideo.org,2018-09-30:odessapy-2018/django-prototyper-from-idea-to-deploy-in-5-minuets.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Are you developing with Django? Imagine creating your apps 10x ..100x times faster! I will show audience a live demo of the tool (django-prototyper) that automatizes Django projects bootstrap and maintenance. Also will show a new advanced features like automatic admin generation and plugin development.&lt;/p&gt;
</summary></entry><entry><title>How I migrate from REST API to GraphQL</title><link href="https://pyvideo.org/odessapy-2018/how-i-migrate-from-rest-api-to-graphql.html" rel="alternate"></link><published>2018-09-30T00:00:00+00:00</published><updated>2018-09-30T00:00:00+00:00</updated><author><name>Igor Davydenko</name></author><id>tag:pyvideo.org,2018-09-30:odessapy-2018/how-i-migrate-from-rest-api-to-graphql.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Hype around GraphQL now bigger than ever and I want to talk about it. How's easy to migrate from REST API to GraphQL, especially if you are Django developer? What you need to know to succeed? GraphQL in production is not a myth, and there are libraries to make it easy in Python world. Let's talk about them and path to migrate from Django REST Framework to Django + Graphene. Also I will talk why the migration will benefit frontend developers as well.&lt;/p&gt;
</summary><category term="graphql"></category></entry><entry><title>How to debug. Everything</title><link href="https://pyvideo.org/odessapy-2018/how-to-debug-everything.html" rel="alternate"></link><published>2018-09-30T00:00:00+00:00</published><updated>2018-09-30T00:00:00+00:00</updated><author><name>Vsevolod Solovyov</name></author><id>tag:pyvideo.org,2018-09-30:odessapy-2018/how-to-debug-everything.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;You know that person everybody comes to when the shit hits the fan and that bug is not going to fix itself? Want to become one? Come to learn about all the skills you'll need when your application freezes in production, leaks memory like crazy or dies under load in fifteen seconds&lt;/p&gt;
</summary><category term="debug"></category></entry><entry><title>Journey to the distributed task queue</title><link href="https://pyvideo.org/odessapy-2018/journey-to-the-distributed-task-queue.html" rel="alternate"></link><published>2018-09-30T00:00:00+00:00</published><updated>2018-09-30T00:00:00+00:00</updated><author><name>Yehor Nazarkin</name></author><id>tag:pyvideo.org,2018-09-30:odessapy-2018/journey-to-the-distributed-task-queue.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Речь пойдет об эволюции наших подходов и решений в управлении распределенными задачами. На примере эволюции сервиса от стадии стартапа и гонки за функциональности к стабильной системе с разделением по типам и приоритетам, возможностью масштабирования и поддержкой клиентов на других языках (программирования)&lt;/p&gt;
</summary></entry><entry><title>Make it fast</title><link href="https://pyvideo.org/odessapy-2018/make-it-fast.html" rel="alternate"></link><published>2018-09-30T00:00:00+00:00</published><updated>2018-09-30T00:00:00+00:00</updated><author><name>Alexander Solovyov</name></author><id>tag:pyvideo.org,2018-09-30:odessapy-2018/make-it-fast.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Any project passes “we need more features” and “omg why is everything so slow” phases during its life. They intertwine, they are not always pronounced, but they are there. Weirdly enough Kasta gets phase #2 regularly; few times a year. Some of the iterations are especially remarkable. This story is going to tell you how we quickly (heh) discover them and, for the lack of a better word - solve them.&lt;/p&gt;
</summary></entry><entry><title>Парсинг с помощью Python фреймворка Scrapy в промышленных масштабаx</title><link href="https://pyvideo.org/odessapy-2018/parsing-s-pomoshchiu-python-freimvorka-scrapy-v-promyshlennykh-masshtabax.html" rel="alternate"></link><published>2018-09-30T00:00:00+00:00</published><updated>2018-09-30T00:00:00+00:00</updated><author><name>Dmitry Kondratenko</name></author><id>tag:pyvideo.org,2018-09-30:odessapy-2018/parsing-s-pomoshchiu-python-freimvorka-scrapy-v-promyshlennykh-masshtabax.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&amp;quot;В данном докладе будет открыта тема модификации фреймворка Scrapy как основного фреймворка для потреб промышленного парсинга. Почему выбор пал именно на данный фреймворк. Будет рассказано про практические применения на объемах более 10 млн ссылок в день. Как быстро и эффективно парсить такие объем, а самое главное дебаг и суппорт на таком к-ве данных.&lt;/p&gt;
</summary><category term="scrapy"></category></entry><entry><title>SQLAlchemy: practic magic</title><link href="https://pyvideo.org/odessapy-2018/sqlalchemy-practic-magic.html" rel="alternate"></link><published>2018-09-30T00:00:00+00:00</published><updated>2018-09-30T00:00:00+00:00</updated><author><name>Vitaliy Androsenko</name></author><id>tag:pyvideo.org,2018-09-30:odessapy-2018/sqlalchemy-practic-magic.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;В докладе будут описаны интересные фишки алхимии, про которые все забывают сразу после прочтения документации, а так же подняты вопросы обхода наиболее опасных ям для начинающих магов&lt;/p&gt;
</summary><category term="sqlalchemy"></category></entry></feed>