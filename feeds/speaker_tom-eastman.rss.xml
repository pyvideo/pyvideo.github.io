<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Sat, 24 Aug 2019 00:00:00 +0000</lastBuildDate><item><title>Using Python, Django, and ruthlessness to protect people from social media harassment.</title><link>https://pyvideo.org/kiwi-pycon-2019/using-python-django-and-ruthlessness-to-protect-people-from-social-media-harassment.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk, I present 'secateur', a tool for Twitter users to protect themselves from some forms of online harassment. I discuss using Python and Django to create tools that integrate with Twitter, use its APIs, and block lots of people (LOTS of people).&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Tom Eastman</dc:creator><pubDate>Sat, 24 Aug 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-08-24:kiwi-pycon-2019/using-python-django-and-ruthlessness-to-protect-people-from-social-media-harassment.html</guid><category>twitter</category><category>APIs</category><category>secateur</category><category>django</category></item><item><title>Using Python, Django, and ruthlessness to protect people from social media harassment.</title><link>https://pyvideo.org/pycon-au-2019/using-python-django-and-ruthlessness-to-protect-people-from-social-media-harassment.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk, I present 'secateur', a tool for Twitter users to protect themselves from some forms of online harassment. I discuss using Python and Django to create tools that integrate with Twitter, use its APIs, and block lots of people (LOTS of people).&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://2019.pycon-au.org/talks/using-python-django-and-ruthlessness-to-protect-people-from-social-media-harassment"&gt;https://2019.pycon-au.org/talks/using-python-django-and-ruthlessness-to-protect-people-from-social-media-harassment&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Fri Aug  2 17:20:00 2019 at C3.3&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Tom Eastman</dc:creator><pubDate>Fri, 02 Aug 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-08-02:pycon-au-2019/using-python-django-and-ruthlessness-to-protect-people-from-social-media-harassment.html</guid></item><item><title>Keynote: Tom Eastman</title><link>https://pyvideo.org/pycon-au-2018/keynote-tom-eastman.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Tom will be speaking on Saturday afternoon, about how we learn to get better at our craft.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Tom Eastman</dc:creator><pubDate>Fri, 24 Aug 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-08-24:pycon-au-2018/keynote-tom-eastman.html</guid><category>keynote</category></item><item><title>The dangerous, exquisite art of safely handing user-uploaded files</title><link>https://pyvideo.org/kiwi-pycon-2016/the-dangerous-exquisite-art-of-safely-handing-user-uploaded-files.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Tom Eastman
&lt;a class="reference external" href="https://kiwi.pycon.org/schedule/presentation/110/"&gt;https://kiwi.pycon.org/schedule/presentation/110/&lt;/a&gt;
&amp;quot;Come On, What Harm Can a User Profile photo Do?&amp;quot;.  The most dangerous thing you can do with your web application is allow people to upload files to it, not even the best web frameworks can fully protect you from the range of damage that can be done.  I'll show you every scary thing I know about that can be done with a file upload, and how to protect yourself from -- hopefully -- most of them.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Tom Eastman</dc:creator><pubDate>Sun, 11 Sep 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-09-11:kiwi-pycon-2016/the-dangerous-exquisite-art-of-safely-handing-user-uploaded-files.html</guid></item><item><title>The dangerous, exquisite art of safely handing user-uploaded files.</title><link>https://pyvideo.org/pycon-au-2016/the-dangerous-exquisite-art-of-safely-handing-user-uploaded-files.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Tom Eastman
&lt;a class="reference external" href="https://2016.pycon-au.org/schedule/148/view_talk"&gt;https://2016.pycon-au.org/schedule/148/view_talk&lt;/a&gt;
Every web application has an attack surface -- the exposed points of interaction where a malicious or mischievous user can commit malice, or mischief (respectively). Possibly nowhere, however, is more vulnerable than places a user is allowed to upload arbitrary files.&lt;/p&gt;
&lt;p&gt;The scope for abuse is eye-widening: The contents of the file, the type of the file, the size and encoding of the file, even the &lt;em&gt;name&lt;/em&gt; of the file can be a potent vector for attacking your system.&lt;/p&gt;
&lt;p&gt;The scariest part? Even the best and most secure web-frameworks (yes, I'm talking about Django) can't protect you from all of it.&lt;/p&gt;
&lt;p&gt;In this talk, I'll show you every scary thing I know about that can be done with a file upload, and how to protect yourself from -- hopefully -- most of them.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Tom Eastman</dc:creator><pubDate>Mon, 15 Aug 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-08-15:pycon-au-2016/the-dangerous-exquisite-art-of-safely-handing-user-uploaded-files.html</guid></item><item><title>The Server Side: The coolest parts of backend development with Django</title><link>https://pyvideo.org/djangocon-au-2013/the-server-side-the-coolest-parts-of-backend-dev.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;There are few feelings more sweet than being a web-app backend
developer, and knowing that the vaguaries and frustrations of front-end
design, Javascript inconsistencies, and web-browser quirks are &amp;quot;Someone
Else's Problem&amp;quot;.&lt;/p&gt;
&lt;p&gt;The backend developer, instead, has just three goals: Make the system
lightning fast and infinitely scalable; ensure its absolute security and
impregnability; and guarantee its absolute correctness, stability, and
general perfection in the face of all input at all times.&lt;/p&gt;
&lt;p&gt;I'll take that over having to debug CSS rendering quirks any day of the
week.&lt;/p&gt;
&lt;p&gt;In this talk I'll cover these three goals and how Django helps make each
one achievable, including a tour of some of the lesser known features of
the framework, such as:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Magic tricks you can do with Django's caching framework beyond the
naive &amp;quot;cache this page&amp;quot;, and its ability to take advantage of the
browser's own cache in marvellous ways.&lt;/li&gt;
&lt;li&gt;Taking Django's testing framework to its logical (and illogical)
extremes. Including clever uses of selenium and webdriver to run unit
tests, integration tests and even Javascript tests.&lt;/li&gt;
&lt;li&gt;Considerations of Django use and web security. Including the sorts of
things Django does a great job of protecting you from, and the things
where your own due dilligence will always be required.&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Tom Eastman</dc:creator><pubDate>Fri, 05 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-05:djangocon-au-2013/the-server-side-the-coolest-parts-of-backend-dev.html</guid></item><item><title>Using Cython for distributed-multiprocess steganographic md5sum-collision generation...</title><link>https://pyvideo.org/kiwi-pycon-2013/using-cython-for-distributed-multiprocess-stegano-.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Cython is a dialect of Python that compiles to native C. In this talk
I'll give a general overview of Cython, how it works, and uses it can be
put to, both useful and, perhaps, somewhat whimsical.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&amp;#64; Kiwi PyCon 2013 - Saturday, 07 Sep 2013 - Track 2&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Audience level&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Intermediate&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Cython is brilliant, it looks like Python but compiles to native C. It
can be used as a simple way of writing lightning-fast C extensions for
Python, or for a simple means of hooking into already-existing C
libraries. If you are writing CPU intensive applications, like, say,
hypothetically, cracking one-way cryptographic functions, Cython is a
perfect mixture of simple expressiveness while making sure the 'inner
loop' of your code is running as close to the bare metal as possible.&lt;/p&gt;
&lt;p&gt;And that's all this talk will be about, honest.&lt;/p&gt;
&lt;p&gt;Why are you looking at me like that?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Slides&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://speakerdeck.com/nzpug/tom-eastman-using-cython-for-distributed-multiprocess-steganographic-md5sum-collision-generation-for-dot-dot-dot-reasons"&gt;https://speakerdeck.com/nzpug/tom-eastman-using-cython-for-distributed-multiprocess-steganographic-md5sum-collision-generation-for-dot-dot-dot-reasons&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Tom Eastman</dc:creator><pubDate>Fri, 13 Sep 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-09-13:kiwi-pycon-2013/using-cython-for-distributed-multiprocess-stegano-.html</guid></item><item><title>Playing to lose: making sensible security decisions by assuming the worst</title><link>https://pyvideo.org/kiwi-pycon-2015/playing-to-lose-making-sensible-security-decisio.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The unfortunate truth about networked applications is that an attacker
only needs to know one thing you didn't know to get past your defences.
You need to know everything, they don't.&lt;/p&gt;
&lt;p&gt;The odds aren't in your favour. You're eventually going to get hacked.&lt;/p&gt;
&lt;p&gt;That's the bad news. But if you stop thinking about a security
compromise as &amp;quot;that thing you close your eyes and hope never happens&amp;quot;,
and instead start thinking about it as an inevitability, then you can
start making better security decisions.&lt;/p&gt;
&lt;p&gt;&amp;quot;If they compromise my web servers, how do I protect my application
servers?&amp;quot;&lt;/p&gt;
&lt;p&gt;&amp;quot;If they break my application server code, how can I prevent them from
gaining a foothold on my infrastructure?&amp;quot;&lt;/p&gt;
&lt;p&gt;&amp;quot;If they poison my web-site with cross-site scripting, how do I find out
before my users get hurt?&amp;quot;&lt;/p&gt;
&lt;p&gt;In short: &amp;quot;If I'm going to get hacked, how do I make it hurt less?&amp;quot;&lt;/p&gt;
&lt;p&gt;This is a talk about defence in depth.&lt;/p&gt;
&lt;p&gt;Building a secure system isn't about luck, it’s about planning.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Tom Eastman</dc:creator><pubDate>Sun, 06 Sep 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-09-06:kiwi-pycon-2015/playing-to-lose-making-sensible-security-decisio.html</guid></item><item><title>Using Cython for distributed-multiprocess steganographic md5sum-collision generation</title><link>https://pyvideo.org/pycon-au-2013/using-cython-for-distributed-multiprocess-stegano.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Cython is brilliant, it looks like Python but compiles to native C. It
can be used as a simple way of writing lightning-fast C extensions for
Python, or for a simple means of hooking into already-existing C
libraries. If you are writing CPU intensive applications, like, say,
hypothetically, cracking one-way cryptographic functions, Cython is a
perfect mixture of simple expressiveness while making sure the 'inner
loop' of your code is running as close to the bare metal as possible.&lt;/p&gt;
&lt;p&gt;And that's all this talk will be about, honest.&lt;/p&gt;
&lt;p&gt;Why are you looking at me like that?&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Tom Eastman</dc:creator><pubDate>Sat, 06 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-06:pycon-au-2013/using-cython-for-distributed-multiprocess-stegano.html</guid></item><item><title>Caching: A trip down the rabbit hole by Tom Eastman</title><link>https://pyvideo.org/pycon-au-2014/caching-a-trip-down-the-rabbit-hole-by-tom-eastm.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The question: How do I make my website fast?&lt;/p&gt;
&lt;p&gt;If that sounds like a loaded question to you: good, we're on the same
page.&lt;/p&gt;
&lt;p&gt;In this talk I will give you a full overview of one of the most powerful
and headache-inducing tools in the web-developer's kit: caching.&lt;/p&gt;
&lt;p&gt;This is a talk for all experience levels, from beginner to seriously
brain-melty. The code and scenarios we'll be exploring are within the
context of a Django project, but the principles are applicable to all of
web development.&lt;/p&gt;
&lt;p&gt;We'll begin our journey in the light, warm land of web browser caches:
learning how you can make your users' web browsers do all the work for
you. Making your site feel rocket-fast and responsive with little more
than some finely crafted HTTP response headers.&lt;/p&gt;
&lt;p&gt;From there, we'll begin our descent into the underworld of server-level
caching, using reverse-proxies such as Varnish or Nginx that shield the
application code from having to do any work. What they do, how they can
help, and more important -- when do they &lt;em&gt;not&lt;/em&gt; help, and when do you
have to go deeper.&lt;/p&gt;
&lt;p&gt;Finally we'll explore the dark art of application-level caching. Whether
it's caching whole responses, partial responses, preventing repetitive
SQL queries or expensive API response serialization calls. And, if our
brains haven't exploded yet, we might throw in some asynchronous
cached-view-generation just for good measure.&lt;/p&gt;
&lt;p&gt;Whether you're a hobbyist or a grizzled veteran, you should come out of
this talk with a few new tricks up your sleeve for making all your sites
do more with less work.&lt;/p&gt;
&lt;p&gt;Expect references from -- depending on mood -- Alice in Wonderland, The
Matrix, or Dante Alighieri's &amp;quot;Inferno&amp;quot;.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Tom Eastman</dc:creator><pubDate>Mon, 11 Aug 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-08-11:pycon-au-2014/caching-a-trip-down-the-rabbit-hole-by-tom-eastm.html</guid></item><item><title>Serialization formats aren't toys by Tom Eastman</title><link>https://pyvideo.org/pycon-au-2014/serialization-formats-arent-toys-by-tom-eastman.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Do you have an API?&lt;/p&gt;
&lt;p&gt;Do you accept input from users? Do you accept it in XML? What about
YAML? Or maybe JSON? How safe are you?&lt;/p&gt;
&lt;p&gt;Are you sure?&lt;/p&gt;
&lt;p&gt;It’s not in the OWASP Top 10, but you don’t have to look far to hear
stories of security vulnerabilities involving deserialization of user
input. Why do they keep happening?&lt;/p&gt;
&lt;p&gt;In this talk I’ll go over what the threat is, how you are making
yourself vulnerable and how to mitigate the problem. I’ll cover the
features (not bugs, features) of formats like XML, YAML, and JSON that
make them surprisingly dangerous, and how to protect your code from
them.&lt;/p&gt;
&lt;p&gt;Because here’s the thing: If you are using, say, a compliant, properly
implemented XML parser to parse your XML, you are NOT safe. Possibly
quite the opposite.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Tom Eastman</dc:creator><pubDate>Thu, 07 Aug 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-08-07:pycon-au-2014/serialization-formats-arent-toys-by-tom-eastman.html</guid></item><item><title>Playing to lose: making sensible security decisions by assuming the worst</title><link>https://pyvideo.org/pycon-au-2015/playing-to-lose-making-sensible-security-decisio-0.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The unfortunate truth about networked applications is that an attacker
only needs to know one thing you didn't know to get past your defenses.
You need to know everything, they don't.&lt;/p&gt;
&lt;p&gt;The odds aren't in your favour. You're eventually going to get hacked.&lt;/p&gt;
&lt;p&gt;That's the bad news. But if you stop thinking about a security
compromise as that thing you close your eyes and hope never happens&amp;quot;,
and instead start thinking about it as an inevitability, then you can
start making better security decisions.&lt;/p&gt;
&lt;p&gt;&amp;quot;If they compromise my web servers, how do I protect my application
servers?&amp;quot;&lt;/p&gt;
&lt;p&gt;&amp;quot;If they break my application server code, how can I prevent them from
gaining a foothold on my infrastructure?&amp;quot;&lt;/p&gt;
&lt;p&gt;&amp;quot;If they poison my web-site with cross-site scripting, how do I find out
before my users get hurt?&amp;quot;&lt;/p&gt;
&lt;p&gt;In short: &amp;quot;If I’m going to get hacked, how do I make it hurt less?&amp;quot;&lt;/p&gt;
&lt;p&gt;This is a talk about defense in depth.&lt;/p&gt;
&lt;p&gt;Building a secure system isn’t about luck, it’s about planning.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Tom Eastman</dc:creator><pubDate>Tue, 04 Aug 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-08-04:pycon-au-2015/playing-to-lose-making-sensible-security-decisio-0.html</guid></item><item><title>The one true way of doing Django deployments...</title><link>https://pyvideo.org/pycon-au-2015/the-one-true-way-of-doing-django-deployments.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;...doesn't exist. (Sorry)&lt;/p&gt;
&lt;p&gt;The power and flexibility of Django comes with drawbacks. One of the
toughest for project management is working out how to deploy your Django
application. If you ask five different authorities on how you should do
it, you'll get six different answers.&lt;/p&gt;
&lt;p&gt;And if someone says &amp;quot;Just use fabric!&amp;quot;: they're not helping.&lt;/p&gt;
&lt;p&gt;Release management, dependency wrangling, virtualenv care and feeding;
to .whl or .deb? To containerize or Heroku-ize? Do you really have to
allow your servers unconstrained Internet access just to build your
virtualenv?&lt;/p&gt;
&lt;p&gt;As a Django user, you might end up writing more deployment solutions
than Django projects. I know I have.&lt;/p&gt;
&lt;p&gt;There's no one true way of doing Django deployments, but some work
better than others. Maybe I can show you.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Tom Eastman</dc:creator><pubDate>Tue, 04 Aug 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-08-04:pycon-au-2015/the-one-true-way-of-doing-django-deployments.html</guid></item><item><title>Serialization formats are not toys</title><link>https://pyvideo.org/pycon-us-2015/serialization-formats-are-not-toys.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;It’s not in the OWASP Top 10, but you don’t have to look far to hear
stories of security vulnerabilities involving deserialization of user
input. In this talk I’ll go over what the threat is and how you might be
making yourself vulnerable. I’ll cover the features (not bugs: features)
of XML, YAML, and JSON that make them surprisingly dangerous, and how to
protect your code from them.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Tom Eastman</dc:creator><pubDate>Sun, 12 Apr 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-04-12:pycon-us-2015/serialization-formats-are-not-toys.html</guid></item></channel></rss>