<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org - authentication</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/tag_authentication.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2022-06-03T00:00:00+00:00</updated><subtitle></subtitle><entry><title>Overcoming access control in web APIs</title><link href="https://pyvideo.org/europython-2020/overcoming-access-control-in-web-apis.html" rel="alternate"></link><published>2020-07-23T00:00:00+00:00</published><updated>2020-07-23T00:00:00+00:00</updated><author><name>Adam Hopkins</name></author><id>tag:pyvideo.org,2020-07-23:/europython-2020/overcoming-access-control-in-web-apis.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;How to address security concerns using Sanic&lt;/p&gt;
&lt;p&gt;Great, you've developed a great web API. Awesome, you are about to deploy it. But, how do you secure it and manage access?&lt;/p&gt;
&lt;p&gt;Learn about different approaches to securing a web API whether it is meant for third-party integrations or driving a …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;How to address security concerns using Sanic&lt;/p&gt;
&lt;p&gt;Great, you've developed a great web API. Awesome, you are about to deploy it. But, how do you secure it and manage access?&lt;/p&gt;
&lt;p&gt;Learn about different approaches to securing a web API whether it is meant for third-party integrations or driving a modern single-page application. Not all APIs are the same, so we will explore different considerations to make when crafting a solution to handle token-based authentication, and scoping to define access levels.&lt;/p&gt;
&lt;p&gt;As one of the core developers of the async web framework Sanic, I will primarily focus on authentication and authorization tools inside Sanic to showcase how to address these issues. However, the concepts should be broadly applicable enough to take back and apply to any web API. The goal is to learn the hot spots, and identify strategies to overcome them.&lt;/p&gt;
&lt;p&gt;Core take aways will include:
- how to implement various JWT strategies;
- best practices for storing JWTs on a browser; and
- controlling access privileges using structured scopes.&lt;/p&gt;
&lt;p&gt;Time permitting, we will even discuss some tools to be used to help ease the anxiety and make security more approachable.&lt;/p&gt;
</content><category term="EuroPython 2020"></category><category term="europython"></category><category term="europython-2020"></category><category term="europython-online"></category><category term="APIs"></category><category term="Authentication"></category><category term="Best Practice"></category><category term="RESTful"></category><category term="Web"></category></entry><entry><title>Building Scalable APIs With Flask and Docker</title><link href="https://pyvideo.org/flaskcon-2021/building-scalable-apis-with-flask-and-docker.html" rel="alternate"></link><published>2021-12-01T00:00:00+00:00</published><updated>2021-12-01T00:00:00+00:00</updated><author><name>Emma Donery</name></author><id>tag:pyvideo.org,2021-12-01:/flaskcon-2021/building-scalable-apis-with-flask-and-docker.html</id><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Many backend software engineers can build rest APIs but very few can build scalable APIs, which accommodate changes and growth.During this talk wewill learn how to build scalable APIs that doesn't often need to be re-written in case of growth using Python Flask micro-framework and Docker.&lt;/p&gt;
</content><category term="FlaskCon 2021"></category><category term="flask"></category><category term="authentication"></category><category term="security"></category></entry><entry><title>Flask-Multipass - A pluggable authentication framework for Flask</title><link href="https://pyvideo.org/flaskcon-2021/flask-multipass-a-pluggable-authentication-framework-for-flask.html" rel="alternate"></link><published>2021-12-01T00:00:00+00:00</published><updated>2021-12-01T00:00:00+00:00</updated><author><name>Adrian Mönnich</name></author><id>tag:pyvideo.org,2021-12-01:/flaskcon-2021/flask-multipass-a-pluggable-authentication-framework-for-flask.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Authentication using username and password may be easy, but if you prefer letting some third party handle it, that may be tricky: You are now dealing with protocols like OAuth, OIDC or SAML - and all of them have their own pitfalls. And depending on what you use, you may …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Authentication using username and password may be easy, but if you prefer letting some third party handle it, that may be tricky: You are now dealing with protocols like OAuth, OIDC or SAML - and all of them have their own pitfalls. And depending on what you use, you may even have to change because the provider you are using is changing their APIs. Flask-Multipass provides an easy-to-use wrapper around this complexity. This talk will go into details on why the extension was created, which cases it covers (and which it doesn't - it's not another Flask-Login!), and how its flexibility allows easy implementation of new authentication methods.&lt;/p&gt;
</content><category term="FlaskCon 2021"></category><category term="flask"></category><category term="authentication"></category><category term="security"></category></entry><entry><title>Autenticazione e autorizzazione in salsa microservice</title><link href="https://pyvideo.org/pycon-italia-2022/autenticazione-e-autorizzazione-in-salsa-microservice.html" rel="alternate"></link><published>2022-06-03T00:00:00+00:00</published><updated>2022-06-03T00:00:00+00:00</updated><author><name>Gianluca Carucci</name></author><id>tag:pyvideo.org,2022-06-03:/pycon-italia-2022/autenticazione-e-autorizzazione-in-salsa-microservice.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Autenticazione e autorizzazione in salsa microservice - PyCon Italia
2022&lt;/p&gt;
&lt;p&gt;Se partiamo da un monolite è tutto facile: verifichiamo le credenziali
sul database (e/o utilizziamo oauth) e il gioco è fatto. Ma cosa succede
in un mondo distribuito? Chi verifica le credenziali? Come ogni servizio
identifica in modo sicuro …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Autenticazione e autorizzazione in salsa microservice - PyCon Italia
2022&lt;/p&gt;
&lt;p&gt;Se partiamo da un monolite è tutto facile: verifichiamo le credenziali
sul database (e/o utilizziamo oauth) e il gioco è fatto. Ma cosa succede
in un mondo distribuito? Chi verifica le credenziali? Come ogni servizio
identifica in modo sicuro l’utente e gli assegna i giusti ruoli? Se
partiamo da un monolite è tutto facile: verifichiamo le credenziali sul
database (e/o utilizziamo oauth) e il gioco è fatto. I monoliti sono
semplici e utili in tantissimi casi, ma non sempre. A volte abbiamo
bisogno di una architettura a microservizi, magari con linguaggi e stack
tecnologici differenti. Chi verifica le credenziali? Come ogni servizio
è in grado di identificare in modo sicuro l’utente e assegnargli i
giusti ruoli per poter esaudire le richieste? Queste sono alcune domande
che un sistema distribuito ci impone di valutare. In questo talk
analizzeremo tramite demo e un caso reale e complesso, i diversi modi e
le tecniche per gestire l’autorizzazione e l’autenticazione in un mondo
a microservizi, illustrando pregi e difetti di ogni soluzione. slides:&lt;/p&gt;
&lt;p&gt;Speaker: Gianluca Carucci&lt;/p&gt;
</content><category term="PyCon Italia 2022"></category><category term="apis"></category><category term="architecture"></category><category term="authentication"></category><category term="distributed systems"></category><category term="microservices"></category></entry><entry><title>Come sfruttare le session auth di Django per un progetto multi tenant</title><link href="https://pyvideo.org/pycon-italia-2022/come-sfruttare-le-session-auth-di-django-per-un-progetto-multi-tenant.html" rel="alternate"></link><published>2022-06-03T00:00:00+00:00</published><updated>2022-06-03T00:00:00+00:00</updated><author><name>Matteo Vitali</name></author><id>tag:pyvideo.org,2022-06-03:/pycon-italia-2022/come-sfruttare-le-session-auth-di-django-per-un-progetto-multi-tenant.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Come sfruttare le potenzialità della session auth di Django in un
progetto multi tenant - PyCon Italia 2022&lt;/p&gt;
&lt;p&gt;Descriverò l’approccio e il metodo di implementazione di un’app multi
tenant in Django, nella quale viene sfruttata la session auth di Django
per recuperare il tenant che domina ogni risorsa …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Come sfruttare le potenzialità della session auth di Django in un
progetto multi tenant - PyCon Italia 2022&lt;/p&gt;
&lt;p&gt;Descriverò l’approccio e il metodo di implementazione di un’app multi
tenant in Django, nella quale viene sfruttata la session auth di Django
per recuperare il tenant che domina ogni risorsa richiesta dietro
autenticazione. Una soluzione a cui la letteratura sul tema non fa
solitamente riferimento. La “letteratura” sull’argomento multi tenant è
abbastanza varia a approfondita e come del resto lo sono anche i metodi
e gli approcci alla gestione a tenant multipli. In questo talk verrà
descritto, attraverso alcuni esempi, il metodo adottato per la gestione
di un’app backend in Django, con gestione di tenant multipli e
interfacciabile, dietro autenticazione, tramite chiamate API RESTful.
Adottando la session authentication di Django, verrà mostrato come sia
possibile renderla depositaria del tenant che domina tutte le risorse
richieste, per poter filtrarle dinamicamente sulla base dei dati
depositati nella sessione di autenticazione di un utente.&lt;/p&gt;
&lt;p&gt;Speaker: Matteo Vitali&lt;/p&gt;
</content><category term="PyCon Italia 2022"></category><category term="apis"></category><category term="authentication"></category><category term="django"></category><category term="rest"></category></entry></feed>