<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Sun, 04 Aug 2019 00:00:00 +0000</lastBuildDate><item><title>Knowledge Graph made simple using NLP and Transfer Learning</title><link>https://pyvideo.org/pydata-delhi-2019/knowledge-graph-made-simple-using-nlp-and-transfer-learning.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In 30 years, dunnhumby has built a huge knowledge base. GRAKN.AI is a
powerful Knowledge Graph database that provides automated reasoning to
connect information together and derive powerful insights. The challenge
is that it has its own query language. We present here a solution based
on NLP and transfer learning that converts any questions into a GRAKN
query, making its content accessible to all.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;dunnhumby&lt;/strong&gt; , the world’s first data science platform has around 400+
Data Scientist, delivering 1000+ projects yearly using 50+ analytical
solutions. This huge knowledge base has an abundance of information
which can be explored to extract useful insights to help employees and
stakeholders better the processes and progress in right direction.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;GRAKN&lt;/strong&gt; : GRAKN.AI is knowledge graph, a database to organise complex
networks of data and make it queryable, by performing knowledge
engineering. Grakn provides the knowledge foundation for cognitive and
intelligent (e.g. AI) systems, by providing an intelligent language for
modelling, transactions and analytics.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Graql&lt;/strong&gt; : GRAKN’s query language provides an enhanced
entity-relationship schema to model complex datasets. It performs
logical inference through entity and relationship type deductive
reasoning, as well as rule-based reasoning. This allows the discovery of
facts and patterns that would otherwise be too hard to find.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The issue&lt;/strong&gt; : As mentioned above GRAKN has its own query language
called graql. Naïve users cannot efficiently leverage the power of GRAKN
directly due to lack of technical knowledge.&lt;/p&gt;
&lt;p&gt;An example of query to find an expert at the algorithm XGBoost:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
match
$ expert isa employee, has name $name_expert;
$algorithm isa algorithm, has name=’XGBoost’;
($expert, $algorithm) isa leverage;
get $name_expert;
&lt;/pre&gt;
&lt;p&gt;But what if they could express their question or request in their
natural language?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The opportunity&lt;/strong&gt; : We have developed a solution which convert the
natural language text into GRAKN queries and act as a precursor to the
GRAKN input interface. Hence making knowledge graphs explorable to users
who want to focus on insights rather than technicality.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Our Solution&lt;/strong&gt; : Algorithm is explained below:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Take input text string&lt;/li&gt;
&lt;li&gt;Identify nouns and verbs from the string by using Word2Vec and
Transfer Learning&lt;/li&gt;
&lt;li&gt;Infer the nouns in the entity list available in Knowledge database&lt;/li&gt;
&lt;li&gt;Similarly, infer verbs in the relations list available in Knowledge
database&lt;/li&gt;
&lt;li&gt;Also, match exact entity values with the nouns in the database.&lt;/li&gt;
&lt;li&gt;Using the collection of similar entity, relations generate a match
query containing entity and relations.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Eg.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;User&lt;/em&gt;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
“Tell me who is an expert at ‘XGBoost’ ”
&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Text2GQL&lt;/em&gt;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
match
$ expert isa employee, has name $name_expert;
$algorithm isa algorithm, has name=’XGBoost’;
($expert, $algorithm) isa leverage;
get $name_expert;
&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Future enhancement&lt;/strong&gt; : Idea is to make the tool generic which takes
schema, data source (json) and input string and generates a grakn query
which would be used an input to grakn interface. Also we can use similar
approach to automate the process of parsing documents and identifying
entities and relations which could be inserted in the graph database.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Suyog Swami</dc:creator><pubDate>Sun, 04 Aug 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-08-04:pydata-delhi-2019/knowledge-graph-made-simple-using-nlp-and-transfer-learning.html</guid></item></channel></rss>