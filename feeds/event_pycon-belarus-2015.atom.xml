<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/event_pycon-belarus-2015.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2015-01-31T00:00:00+00:00</updated><entry><title>Advanced Redis data structures</title><link href="https://pyvideo.org/pycon-belarus-2015/advanced-redis-data-structures.html" rel="alternate"></link><published>2015-01-31T00:00:00+00:00</published><updated>2015-01-31T00:00:00+00:00</updated><author><name>Amir Salihefendic</name></author><id>tag:pyvideo.org,2015-01-31:pycon-belarus-2015/advanced-redis-data-structures.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;I will showcase and explain following projects: bitmapist A powerful
Python cohort analytics library using Redis'es bitmap feature
&lt;a class="reference external" href="https://github.com/Doist/bitmapist"&gt;https://github.com/Doist/bitmapist&lt;/a&gt; Was mainly built because I did not
want to pay $2000+/USD/month to MixPanel for cohort analytics. fixedlist
A highly specific fixed list data structure that can be used to optimize
timelines (such as Twitter's home screen). Implemented in Python using
Redis. Optimizing further with Lua scripting How to move away from
Python and into Lua scripting when you need to optimize further.&lt;/p&gt;
</summary></entry><entry><title>Getting maximum of Python, Django with Postgres 9.4</title><link href="https://pyvideo.org/pycon-belarus-2015/getting-maximum-of-python-django-with-postgres-94.html" rel="alternate"></link><published>2015-01-31T00:00:00+00:00</published><updated>2015-01-31T00:00:00+00:00</updated><author><name>Володимир Гоцик</name></author><id>tag:pyvideo.org,2015-01-31:pycon-belarus-2015/getting-maximum-of-python-django-with-postgres-94.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Postgres предоставляет много встроенных возможностей для создания
эфективных приложений, использующих базы данных. А в версии 9.4
появляется еще и полноценное JSON поле, при правильном использовании
которого, отпадает необходимость использвания NoSQL баз данных. В
докладе мы рассмотрим, как использовать этот потенциал по максимуму в
своих Python/Django приложениях.&lt;/p&gt;
</summary></entry><entry><title>Контроль за стилем кода</title><link href="https://pyvideo.org/pycon-belarus-2015/kontrol-za-stilem-koda.html" rel="alternate"></link><published>2015-01-31T00:00:00+00:00</published><updated>2015-01-31T00:00:00+00:00</updated><author><name>Кирилл Борисов</name></author><id>tag:pyvideo.org,2015-01-31:pycon-belarus-2015/kontrol-za-stilem-koda.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Стремление каждого разработчика ПО — писать код. Всё, что от этого кода
требуется — работать без ошибок и соответствовать задумке. Не секрет,
что для более-менее сложного продукта требуется объединить несколько
программистов в одну команду и заставить их работать вместе... И вот тут
начинаются проблемы: каждый пишет по-своему и затрудняется понять код
коллеги. Что в итоге? Падает эффективность, снижается качество продукта,
увеличивается время вхождения для новых разработчиков. Решить эти
проблемы помогает контроль за стилем кода. В этом докладе я расскажу про
то, какие практики вам могут пригодиться на выбранном пути и какие
средства для этого есть в экосистеме Python.&lt;/p&gt;
</summary></entry><entry><title>lightning talks</title><link href="https://pyvideo.org/pycon-belarus-2015/lightning-talks.html" rel="alternate"></link><published>2015-01-31T00:00:00+00:00</published><updated>2015-01-31T00:00:00+00:00</updated><author><name>Various speakers</name></author><id>tag:pyvideo.org,2015-01-31:pycon-belarus-2015/lightning-talks.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Lightning talks&lt;/p&gt;
</summary><category term="lightning talks"></category></entry><entry><title>Обработка текстов на русском/английском/украинском с помощью Python</title><link href="https://pyvideo.org/pycon-belarus-2015/obrabotka-tekstov-na-russkomangliiskomukrainskom-s-pomoshchiu-python.html" rel="alternate"></link><published>2015-01-31T00:00:00+00:00</published><updated>2015-01-31T00:00:00+00:00</updated><author><name>Михаил Коробов</name></author><id>tag:pyvideo.org,2015-01-31:pycon-belarus-2015/obrabotka-tekstov-na-russkomangliiskomukrainskom-s-pomoshchiu-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Обзор инструментов для обработки текста и рассказать, что с текстом
можно сделать, а что сложно&lt;/p&gt;
</summary></entry><entry><title>Painless testing for Django</title><link href="https://pyvideo.org/pycon-belarus-2015/painless-testing-for-django.html" rel="alternate"></link><published>2015-01-31T00:00:00+00:00</published><updated>2015-01-31T00:00:00+00:00</updated><author><name>Максим Харандзюк</name></author><id>tag:pyvideo.org,2015-01-31:pycon-belarus-2015/painless-testing-for-django.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Описание: доклад о опыте TDD для команды у которой нет возможности
выделять отдельный QA. Использование библиотеки factory_boy и
обьяснение почему не стоит использовать фикстуры. Библиотека WebTest.
Сравнение с Selenium . Примеры использования Mocks и почему их стоит
избегать&lt;/p&gt;
</summary></entry><entry><title>Python — это не Haskell</title><link href="https://pyvideo.org/pycon-belarus-2015/python-eto-ne-haskell.html" rel="alternate"></link><published>2015-01-31T00:00:00+00:00</published><updated>2015-01-31T00:00:00+00:00</updated><author><name>Андрей Власовских</name></author><id>tag:pyvideo.org,2015-01-31:pycon-belarus-2015/python-eto-ne-haskell.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Идеи функционального программирования довольно популярны, в том числе и
в среде программистов на Python, который не является функциональным
языком. В докладе речь пойдёт об особенностях функционального стиля в
Python, об его отличиях от типичных функциональных языков типа Haskell.&lt;/p&gt;
</summary></entry><entry><title>Python refactoring with Rope and Traad</title><link href="https://pyvideo.org/pycon-belarus-2015/python-refactoring-with-rope-and-traad.html" rel="alternate"></link><published>2015-01-31T00:00:00+00:00</published><updated>2015-01-31T00:00:00+00:00</updated><author><name>Austin Bingham</name></author><id>tag:pyvideo.org,2015-01-31:pycon-belarus-2015/python-refactoring-with-rope-and-traad.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python Refactoring with Rope and Traad – The rope library is a powerful
tool for refactoring Python code, but to be truly useful it needs to be
available to development environments. Traad is a tool which makes it
simpler to integrate rope into nearly any tool by exposing a simple HTTP
API. In this session we’ll look at how traad and rope work together, and
we’ll see how traad integrates with at least one popular editor.&lt;/p&gt;
</summary></entry><entry><title>Python's (future) type annotation system(s)</title><link href="https://pyvideo.org/pycon-belarus-2015/pythons-future-type-annotation-systems.html" rel="alternate"></link><published>2015-01-31T00:00:00+00:00</published><updated>2015-01-31T00:00:00+00:00</updated><author><name>David Mertz</name></author><id>tag:pyvideo.org,2015-01-31:pycon-belarus-2015/pythons-future-type-annotation-systems.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python is a dynamically (but strongly, for some value of &amp;quot;strongly&amp;quot;)
typed programming language. Notwithstanding its dynamism, checking
types--or other behaviors--of variables has always been possible in
Python code, and a steady stream of users have had a desire to do so. At
a conceptual level, enforcing a type is a subset of enforcing an
invariant on a variable, and the broader demand for design by contract
has been a recurrent theme in Python discussions. PEP 316 addressed this
desire (but was not accepted) a decade ago, as did the long defunct
library PyDBC. Currently maintained, however, is the PyContracts
library, which allows documenting and enforcing both types narrowly, and
predicates of variables more broadly. I myself wrote a simple recipe for
basic type checking using PEP 3107 annotations at the Python Cookbook:
Type checking using Python 3.x annotations
(&lt;a class="reference external" href="http://code.activestate.com/recipes/578528-type-checking-using"&gt;http://code.activestate.com/recipes/578528-type-checking-using&lt;/a&gt;-
python-3x-annotations/).&lt;/p&gt;
</summary></entry><entry><title>Разработка высокопроизводительныx функциональных тестов для Django проектов</title><link href="https://pyvideo.org/pycon-belarus-2015/razrabotka-vysokoproizvoditelnyx-funktsionalnykh-testov-dlia-django-proektov.html" rel="alternate"></link><published>2015-01-31T00:00:00+00:00</published><updated>2015-01-31T00:00:00+00:00</updated><author><name>Андрей Солдатенко</name></author><id>tag:pyvideo.org,2015-01-31:pycon-belarus-2015/razrabotka-vysokoproizvoditelnyx-funktsionalnykh-testov-dlia-django-proektov.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;ul class="simple"&gt;
&lt;li&gt;способы уменьшения время выполнения тестов;&lt;/li&gt;
&lt;li&gt;шаблоны проектирования быстрых тестов;&lt;/li&gt;
&lt;li&gt;генерация тестовых данных;&lt;/li&gt;
&lt;li&gt;как правильно дебажить тесты;&lt;/li&gt;
&lt;li&gt;параллельное выполнения тестов;&lt;/li&gt;
&lt;li&gt;Sause Labs;&lt;/li&gt;
&lt;/ul&gt;
</summary></entry><entry><title>Transducers in Python</title><link href="https://pyvideo.org/pycon-belarus-2015/transducers-in-python.html" rel="alternate"></link><published>2015-01-31T00:00:00+00:00</published><updated>2015-01-31T00:00:00+00:00</updated><author><name>Austin Bingham</name></author><id>tag:pyvideo.org,2015-01-31:pycon-belarus-2015/transducers-in-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Understanding Transducers Through Python – Transducers are a new and
interesting functional programming concept that comes from the world of
Clojure. In this talk we’ll learn about transducers by seeing how to
implement them in Python. By using transducers to build familiar
functional programming elements like map and filter, we’ll see that
transducers are actually simple, elegant, and quite powerful.&lt;/p&gt;
</summary></entry><entry><title>Возможности и подходы расширения OpenStack</title><link href="https://pyvideo.org/pycon-belarus-2015/vozmozhnosti-i-podkhody-rasshireniia-openstack.html" rel="alternate"></link><published>2015-01-31T00:00:00+00:00</published><updated>2015-01-31T00:00:00+00:00</updated><author><name>Владимир Еремин</name></author><id>tag:pyvideo.org,2015-01-31:pycon-belarus-2015/vozmozhnosti-i-podkhody-rasshireniia-openstack.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;OpenStack назван одним из лучших open source проектов (по версии
&lt;a class="reference external" href="http://opensource.com/business/14/12/top-10-open-source-projects-2014"&gt;http://opensource.com/business/14/12/top-10-open-source-projects-2014&lt;/a&gt;) и
написан полностью на Python. OpenStack уже включает в себя целую кучу
готовых к использованию батареек, но если есть необходимость добавить
что-то свое -- вы можете это сделать без изменения базового кода, просто
написав собственное расширение. Я расскажу, что такое OpenStack и что он
умеет из коробки, какие возможности расширения своей функциональности
предоставляет эта платформа и как мы это используем у себя в уютненьком
Яндексе.&lt;/p&gt;
</summary></entry><entry><title>Введение в aiohttp</title><link href="https://pyvideo.org/pycon-belarus-2015/vvedenie-v-aiohttp.html" rel="alternate"></link><published>2015-01-31T00:00:00+00:00</published><updated>2015-01-31T00:00:00+00:00</updated><author><name>Андрей Светлов</name></author><id>tag:pyvideo.org,2015-01-31:pycon-belarus-2015/vvedenie-v-aiohttp.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;aiohttp -- это HTTP Web сервер и клиент для asyncio (PEP-3156). Лекция
даёт общее представление о библиотеке, показывает как выполнять
клиентские запросы и строить Web сервер с поточной выдачей и
Web-сокетами.&lt;/p&gt;
</summary></entry></feed>