<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/event_pygotham-2017.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2017-10-07T00:00:00+00:00</updated><entry><title>A Plug for Plugins</title><link href="https://pyvideo.org/pygotham-2017/a-plug-for-plugins.html" rel="alternate"></link><published>2017-10-07T00:00:00+00:00</published><updated>2017-10-07T00:00:00+00:00</updated><author><name>Mahmoud Hashemi</name></author><id>tag:pyvideo.org,2017-10-07:pygotham-2017/a-plug-for-plugins.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The philosophy of small, focused software has its merits, but for most of us, software is big. From your browser to your kernel, the size of these applications is lost on most of us. How do these programs even grow to this size?&lt;/p&gt;
&lt;p&gt;In all of these cases, the answer involves an often-overlooked pattern: the plugin. Call them modules or extensions, if you'd prefer, but they are wildly successful. In fact, the only thing wider than the success of plugin-based architecture is the variety of implementations, especially in Python's dynamic environment.&lt;/p&gt;
&lt;p&gt;This talk covers the basis for plugins, reviews Python's current offerings using examples, and provides guidance as to the bright future of plugin architecture.&lt;/p&gt;
</summary></entry><entry><title>Automated Video Editing with Stitcher</title><link href="https://pyvideo.org/pygotham-2017/automated-video-editing-with-stitcher.html" rel="alternate"></link><published>2017-10-07T00:00:00+00:00</published><updated>2017-10-07T00:00:00+00:00</updated><author><name>Peter Karp</name></author><id>tag:pyvideo.org,2017-10-07:pygotham-2017/automated-video-editing-with-stitcher.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;BuzzFeed generates hours of video every day with an extensive catalog going back several years. Content needs to be re-formatted for different devices, or cropped and trimmed to be re-purposed in new ways. Some of the routine effort goes to appending advertisements to a large number of videos or updating text overlays for internationalization. The common tools for video editing are complex and memory intensive and do not provide simple bulk batching of tasks. We are creating Stitcher to perform some of these routine tasks as well as processing for innovative front-end video applications.&lt;/p&gt;
&lt;p&gt;Stitcher is a declarative language for describing sequential and parallel editing operations on videos to a stitching service written in Python and built with moviepy, marshmallow and the popular transcoding tool ffmpeg. It can be used for scripting many of the repetitive tasks that occur in a high volume video production environment.&lt;/p&gt;
&lt;p&gt;The Stitcher syntax is loosely based on SMIL, a markup for multimedia video editing. It can describe the complex assembly of different source content including
videos, text and images in sequence, or in parallel as an overlay.&lt;/p&gt;
&lt;p&gt;This talk describes some of the production problems found in high volume environments and how Python tools such as Stitcher, moviepy, and ffmpeg help solve them.&lt;/p&gt;
</summary></entry><entry><title>Building a “Pun Generator” in Python</title><link href="https://pyvideo.org/pygotham-2017/building-a-pun-generator-in-python.html" rel="alternate"></link><published>2017-10-07T00:00:00+00:00</published><updated>2017-10-07T00:00:00+00:00</updated><author><name>Max Schwartz</name></author><id>tag:pyvideo.org,2017-10-07:pygotham-2017/building-a-pun-generator-in-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The core of this talk will focus on edit distance, an important algorithm in Natural Language Processing (and Computational Biology) for determining how similar two strings are. While some of the coding involved may be beyond the “beginner level” this talk is targeted to, the goal will be to convey an understanding of how this algorithm works to even those with no prior programming experience. I will also introduce various methods of phonetic representation (writing the actual sounds of words), and touch briefly on part-of-speech tagging (identifying words as nouns, verbs, etc.). All of this will tie together to form the beginnings of a “pun generator,” although the first version of this is probably closer to a “Weird Al song title generator.” I will then talk about possible next steps for expanding this.&lt;/p&gt;
</summary></entry><entry><title>Darth Linguo, building an ungrammatical corpus by corruption</title><link href="https://pyvideo.org/pygotham-2017/darth-linguo-building-an-ungrammatical-corpus-by-corruption.html" rel="alternate"></link><published>2017-10-07T00:00:00+00:00</published><updated>2017-10-07T00:00:00+00:00</updated><author><name>Pablo González Martínez</name></author><id>tag:pyvideo.org,2017-10-07:pygotham-2017/darth-linguo-building-an-ungrammatical-corpus-by-corruption.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Natural Language Processing methods mostly belong to two big families. Rule based systems are informed by humans with linguistic knowledge who feed a system rules they are costly to produce and refine because of the man hours required but mystakes and problems can be addressed straightforwardly. Statistical Based methods rely on drawing inferences through the analysis of large corpora with machine learning techniques, while they are very advantageous in that all they need is big amounts of data, they are often blindsided by relatively simple linguistic problems that are hard to correct. This brings an idea, what if we could use rule based approaches to polish the patterns that are learned by statistical systems? My first attempt at this integrates a classical idea in language acquisition theory and theoretical linguistics, the concept of negative data. Linguists often use ungrammatical (&amp;quot;wrong&amp;quot;) sentences to pry at the structures of language, I intend to see if a computer system can benefit from such an approach. The first step of this is getting the negative data, a corpus of &amp;quot;corrupt&amp;quot; sentences, for this I take a regular corpus of Spanish and write Darth Linguo, a program to generate several kinds of grammatical mistakes from the data.   Once I have this data I will use it first to test just how privy several kinds of language models are to the ungrammatical patterns and then to divise a neural network language model that can integrate negative data into its learning process.&lt;/p&gt;
</summary></entry><entry><title>Edward - Probabilistic Modeling Made Easy</title><link href="https://pyvideo.org/pygotham-2017/edward-probabilistic-modeling-made-easy.html" rel="alternate"></link><published>2017-10-07T00:00:00+00:00</published><updated>2017-10-07T00:00:00+00:00</updated><author><name>Maja Rudolph</name></author><id>tag:pyvideo.org,2017-10-07:pygotham-2017/edward-probabilistic-modeling-made-easy.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Edward is a python library for probabilistic modeling and inference. It is based on tensorflow and leverages the computational graph and tools such as automatic differentiation to automate inference in probabilistic models. This means that users can skip the difficult step of deriving a custom inference algorithm and can use Edward to fit more complex probabilistic models to their data.
All they have to do is specify the probabilistic model.&lt;/p&gt;
&lt;div class="section" id="outline-of-the-talk"&gt;
&lt;h4&gt;Outline of the talk&lt;/h4&gt;
&lt;p&gt;First, I will introduce the tensorflow and Edward basics that are necessary to look at a few modeling examples.
The examples we will cover include how to fit a Bayesian neural network and an embedding model to real data.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="goals"&gt;
&lt;h4&gt;Goals&lt;/h4&gt;
&lt;p&gt;By introducing probabilistic modeling in Edward and giving an overview of how it can be used, I hope to encourage people to use Edward for their data science projects an/or to start contributing to the library.&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>Fighting Human Trafficking with Code</title><link href="https://pyvideo.org/pygotham-2017/fighting-human-trafficking-with-code.html" rel="alternate"></link><published>2017-10-07T00:00:00+00:00</published><updated>2017-10-07T00:00:00+00:00</updated><author><name>Alexandra Wilde</name></author><id>tag:pyvideo.org,2017-10-07:pygotham-2017/fighting-human-trafficking-with-code.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Human Trafficking remains a massive problem in the United States. Traffickers develop sophisticated networks to support their businesses, and rely on technology to do it. Coders have the power to fight this, by empowering investigators with more sophisticated technological tools of their own. This talk discusses Python tools and analytics developed for the Human Trafficking Response Unit at the Manhattan DA's office, and what a Python programmer can do, at any experience level, to contribute to the fight.&lt;/p&gt;
</summary></entry><entry><title>Finding the narrative in networks with python</title><link href="https://pyvideo.org/pygotham-2017/finding-the-narrative-in-networks-with-python.html" rel="alternate"></link><published>2017-10-07T00:00:00+00:00</published><updated>2017-10-07T00:00:00+00:00</updated><author><name>Leah Guthrie</name></author><id>tag:pyvideo.org,2017-10-07:pygotham-2017/finding-the-narrative-in-networks-with-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;I will demonstrate how taking the view of communities of people, dolphins, bacteria and financial systems as networks can help us understand them better. This will be an interactive coding session where we will graph and analyze networks using Networkx and identify the stories that they tell. We will go over solutions for two common pitfalls relating to (1) computation time and memory and (2) network visualization (avoiding visualizing hair balls). I will also identify publicly available databases as well as python packages that may be useful for generating network data on your own. This talk will end by highlighting the ways that analyzing networks has a utility ranging from a personal practice for reflecting on your own social networks to a citizen scientist endeavor.&lt;/p&gt;
</summary></entry><entry><title>Fixing the Tech Interview</title><link href="https://pyvideo.org/pygotham-2017/fixing-the-tech-interview.html" rel="alternate"></link><published>2017-10-07T00:00:00+00:00</published><updated>2017-10-07T00:00:00+00:00</updated><author><name>James Bennett</name></author><id>tag:pyvideo.org,2017-10-07:pygotham-2017/fixing-the-tech-interview.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Technical interviewing is a mess. Social media is full of stories from experienced, qualified developers who struggle to get through even initial screening at tech companies, and those same tech companies' blogs are full of stories about how they can't find enough qualified developers. Something is very obviously wrong here, but what? And what can we do about it?&lt;/p&gt;
&lt;p&gt;Drawing from experience on both ends of the interviewing table, this talk will explore some of the underlying causes of bad interviews, challenge assumptions baked in to popular interview processes, and discuss ways to build more reliable and more humane technical interviews. This talk is for anyone involved in tech hiring who's interested in learning why current approaches so often fail, and how to fix it. No experience as an interviewer or hiring manager is required. Attendees will come away with an understanding of major systemic issues in how tech interviews are typically conducted, and a framework and specific suggestions for how to remedy these issues and build interview processes which are better and more useful for everyone involved.&lt;/p&gt;
</summary></entry><entry><title>Fixing web data in production: best practices for bad situations</title><link href="https://pyvideo.org/pygotham-2017/fixing-web-data-in-production-best-practices-for-bad-situations.html" rel="alternate"></link><published>2017-10-07T00:00:00+00:00</published><updated>2017-10-07T00:00:00+00:00</updated><author><name>Aaron Knight</name></author><id>tag:pyvideo.org,2017-10-07:pygotham-2017/fixing-web-data-in-production-best-practices-for-bad-situations.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In a perfect world, all of the data underlying your web app is accurate, complete, and error-free. But in the real world, production data sometimes needs to be updated.&lt;/p&gt;
&lt;p&gt;Perhaps you made some bad choices when setting up your models. Or maybe a bug introduced some inconsistent data. So how do you fix it? The naïve approach might be to run an update directly on your production database, but that kind of approach is extremely risky.&lt;/p&gt;
&lt;p&gt;This talk will outline some best practices for fixing production data. We'll go beyond the obvious precautions such as testing your scripts and ensuring that you have a database backup. Instead, this talk will focus on writing scripts that are idempotent, reversible, and performant.&lt;/p&gt;
</summary></entry><entry><title>How to Identify, Train and Grow Junior Developers</title><link href="https://pyvideo.org/pygotham-2017/how-to-identify-train-and-grow-junior-developers.html" rel="alternate"></link><published>2017-10-07T00:00:00+00:00</published><updated>2017-10-07T00:00:00+00:00</updated><author><name>John Healy</name></author><id>tag:pyvideo.org,2017-10-07:pygotham-2017/how-to-identify-train-and-grow-junior-developers.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;One of the biggest problems facing any growing software-based company is finding the right engineers to grow the team. Often, engineering leadership responds to this need by engaging a variety of outside resources, including recruiters or internal HR departments. Unfortunately, these resources tend to be ill-equipped to find the right talent, instead taking a one-size-fits-all approach that leads the growing company to compete over the same limited and expensive resources that big companies look for.
In this talk, you'll learn how to find the many great individuals passed over by this process, many of whom are likely better fits for your business than even the best on-paper candidate. You'll learn how to help these people become great contributors to your team, often more quickly than expected. Finally, you'll learn about some pitfalls to avoid as a company in order to get the best out of your employees.
If you're new to Python or software development, this talk is also for you! You'll learn how to get the most out of your education, whether its self study, college, or a bootcamp. You'll learn how to identify small and growing teams that are worth your time and energy. Most importantly, you'll learn that breaking in to the industry takes work, but its not as hard as you think it is!&lt;/p&gt;
</summary></entry><entry><title>import madness # how to implement mergesort from scratch using only import statements</title><link href="https://pyvideo.org/pygotham-2017/import-madness-how-to-implement-mergesort-from-scratch-using-only-import-statements.html" rel="alternate"></link><published>2017-10-07T00:00:00+00:00</published><updated>2017-10-07T00:00:00+00:00</updated><author><name>George London</name></author><id>tag:pyvideo.org,2017-10-07:pygotham-2017/import-madness-how-to-implement-mergesort-from-scratch-using-only-import-statements.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Recently I had trouble importing a module. So I started actually reading the documentation of the Python import
system and realized that I had been writing Python for years without understanding basics like &amp;quot;a module is a file&amp;quot;
or &amp;quot;importing a module executes it&amp;quot;.&lt;/p&gt;
&lt;p&gt;A few days later I had a terrible realization -- it's possible to implement a mergesort algorithm in Python using
only the &lt;cite&gt;import&lt;/cite&gt; statement.&lt;/p&gt;
&lt;p&gt;Actually making it work requires learning (and subverting) almost all of the import system's underlying machinery.
So walking through how it's done creates an excellent (and entertaining) opportunity to shine some light on the
darker corners of a system that Python programmers use nearly every day but can work for years without ever really understanding.&lt;/p&gt;
&lt;p&gt;This talk starts off with an explanation of the basic fundamentals of the import system, i.e.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;What does the word &amp;quot;module&amp;quot; actually mean?&lt;/li&gt;
&lt;li&gt;How does Python find the source code I'm importing?&lt;/li&gt;
&lt;li&gt;What is Python actually doing when I import code?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;From there, things get pretty weird.&lt;/p&gt;
&lt;p&gt;The rest of the talk explains how the import system alone gives us the tools to emulate function evaluation
and how that means that we can (but shouldn't!) write algorithms using import statements instead of functions.&lt;/p&gt;
&lt;p&gt;I describe the classic mergesort algorithm and then I show how to actually implement it using imports
(under the theory that nothing helps retain knowledge like watching it applied to a trainwreck.)&lt;/p&gt;
&lt;p&gt;I briefly discuss how &amp;quot;computation&amp;quot; is an abstract process that can be accomplished in more ways
that we might intuitively realize. And then I wrap up with some practical advice on how users can avoid ImportErrors
and a warning about the serious but non-obvious security risks of importing Python code.&lt;/p&gt;
</summary></entry><entry><title>Machine Music: Exploring Machine Learning By Generating Music Or How To Teach A Computer To Rock Out</title><link href="https://pyvideo.org/pygotham-2017/machine-music-exploring-machine-learning-by-generating-music-or-how-to-teach-a-computer-to-rock-out.html" rel="alternate"></link><published>2017-10-07T00:00:00+00:00</published><updated>2017-10-07T00:00:00+00:00</updated><author><name>Gabe Levine</name></author><id>tag:pyvideo.org,2017-10-07:pygotham-2017/machine-music-exploring-machine-learning-by-generating-music-or-how-to-teach-a-computer-to-rock-out.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk will go through the ups and downs of a machine learning    beginner trying to create a Recurrent Neural Network (RNN) to implement    a music generating algorithm. We will build off of Gabe’s PyGotham 2016    talk (The Sounds Of Data: &lt;a class="reference external" href="https://www.youtube.com/watch?v=vb9c_WFMYeI"&gt;https://www.youtube.com/watch?v=vb9c_WFMYeI&lt;/a&gt;)    and will attempt to implement an RNN based on Alex Graves’ GeneratingSequences With Recurrent Neural Networks    (&lt;a class="reference external" href="https://arxiv.org/pdf/1308.0850.pdf"&gt;https://arxiv.org/pdf/1308.0850.pdf&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Gabe Levine is a &lt;a class="reference external" href="http://pitchfork.com/reviews/albums/12049-migration/"&gt;musician&lt;/a&gt;    turned &lt;a class="reference external" href="https://github.com/gabelev"&gt;software engineer&lt;/a&gt;, and Jonathan Arfa is a &lt;a class="reference external" href="https://github.com/jarfa"&gt;Statistics and     Machine Learning enthusiast&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Make mind-bending, interactive 3D projects with TouchDesigner and Python</title><link href="https://pyvideo.org/pygotham-2017/make-mind-bending-interactive-3d-projects-with-touchdesigner-and-python.html" rel="alternate"></link><published>2017-10-07T00:00:00+00:00</published><updated>2017-10-07T00:00:00+00:00</updated><author><name>Suby Raman</name></author><id>tag:pyvideo.org,2017-10-07:pygotham-2017/make-mind-bending-interactive-3d-projects-with-touchdesigner-and-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;TouchDesigner is a free programming platform that makes 2D/3D programming accessible and fun to users of all levels. It easily pulls video data from tech like the Kinect, Oculus Rift, the HTC Vive, and streaming internet video. Because it uses Python, you can leverage the entire ecosystem of Python tools to push your art to the next level; everything from simple parsing of TCP messages, to transforming 3D geometry with numpy, to complex signal processing with scikit. Not only that; TouchDesigner allows Python programmers to create complex, portable user interfaces for any project.&lt;/p&gt;
&lt;p&gt;I've been using TouchDesigner to develop interactive dance visualizers using the Kinect, and I'm excited to show what it is capable of. I'll give a high-level overview of how to start working with 2D/3D data in TouchDesigner, and I’ll demo a simple project that uses real-time data from Websockets to generate 3D media. All of you in the audience will contribute!&lt;/p&gt;
</summary></entry><entry><title>Music Synthesis in Python</title><link href="https://pyvideo.org/pygotham-2017/music-synthesis-in-python.html" rel="alternate"></link><published>2017-10-07T00:00:00+00:00</published><updated>2017-10-07T00:00:00+00:00</updated><author><name>Dror Ayalon</name></author><id>tag:pyvideo.org,2017-10-07:pygotham-2017/music-synthesis-in-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;div class="section" id="music-synthesis-in-python"&gt;
&lt;h4&gt;Music Synthesis in Python&lt;/h4&gt;
&lt;p&gt;Python has become a one-stop-shop for everything audio - from cutting edge digital signal processing packages to music synthesis and music composition packages. This plethora of audio related packages allows developers and musicians to build the most creative projects and experiences in a single programming language.&lt;/p&gt;
&lt;p&gt;The goal of this talk to provide attendees with the knowledge of the fabulous audio analysis and music creation tools available in Python.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="talk-overview"&gt;
&lt;h4&gt;Talk Overview&lt;/h4&gt;
&lt;p&gt;The talk will start with a presentation of one of my recent projects, &lt;a class="reference external" href="https://www.drorayalon.com/#/luncz/"&gt;Luncz&lt;/a&gt; (pronounces “Luntz”), a tool that analyzes live playing and generates a bass line to accompany the musician. Luncz helps the musician to stay within the musical context of the original idea and leaves enough room for this idea to be developed. We will breakdown Luncz technical components and learn about the capabilities of the DSP packages that were used to build it and the Csound Python interface that was used to generate the playback.&lt;/p&gt;
&lt;p&gt;Followed by the project presentation, we will briefly review a variety of available Python tools and packages for music creation, music analysis, and Python interfaces to the most used digital music synthesis engines. Among these tools are pyAudio, LibROSA, pyAudio, athenaCL, Cecilia, Pyo, Soundgrain, and Csound’s, Supercollider’s and ChucK’s Python APIs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="about-the-speaker"&gt;
&lt;h4&gt;About The Speaker&lt;/h4&gt;
&lt;p&gt;Dror Ayalon is a maker, programmer, user experience designer, and a user interface designer, and was the Product Manager for a few very successful start-ups. Dror is currently a graduate student at NYU. As a lifelong music lover, he researches and develops innovative music creation tools, using music information retrieval (MIR) techniques, digital signal processing (DSP), and machine learning algorithms, that will allow musicians to compose music in a variety of new ways and formats.&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>Natural Language Processing from Scratch</title><link href="https://pyvideo.org/pygotham-2017/natural-language-processing-from-scratch.html" rel="alternate"></link><published>2017-10-07T00:00:00+00:00</published><updated>2017-10-07T00:00:00+00:00</updated><author><name>Bruno Gonçalves</name></author><id>tag:pyvideo.org,2017-10-07:pygotham-2017/natural-language-processing-from-scratch.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;We introduce the fundamental technique of natural language processing using Python and OpenNasa datasets. In particular:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;bag of words models&lt;/li&gt;
&lt;li&gt;stop words&lt;/li&gt;
&lt;li&gt;tf/idf&lt;/li&gt;
&lt;li&gt;basic topic modeling&lt;/li&gt;
&lt;li&gt;word clouds&lt;/li&gt;
&lt;li&gt;language detection&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A GitHub repository will be made available with all the code and slides used during the talk.&lt;/p&gt;
</summary></entry><entry><title>Python for Education: Emulating x86 Assembler on the Web</title><link href="https://pyvideo.org/pygotham-2017/python-for-education-emulating-x86-assembler-on-the-web.html" rel="alternate"></link><published>2017-10-07T00:00:00+00:00</published><updated>2017-10-07T00:00:00+00:00</updated><author><name>Gene Callahan</name></author><id>tag:pyvideo.org,2017-10-07:pygotham-2017/python-for-education-emulating-x86-assembler-on-the-web.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Emu86 is a browser-based interpreter for x86 assembly language written in Python, using the Django framework. It allows code-stepping, displays registers, flags, memory, and the stack, and provides online help for all instructions. It is a great learning tool for introducing students to assembler, and it illustrates the potential of &amp;quot;courseware as code&amp;quot; for education.&lt;/p&gt;
</summary></entry><entry><title>Running Vintage Software: PyPI's Aging Codebase.</title><link href="https://pyvideo.org/pygotham-2017/running-vintage-software-pypis-aging-codebase.html" rel="alternate"></link><published>2017-10-07T00:00:00+00:00</published><updated>2017-10-07T00:00:00+00:00</updated><author><name>Ernest W. Durbin III</name></author><id>tag:pyvideo.org,2017-10-07:pygotham-2017/running-vintage-software-pypis-aging-codebase.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;From it's origins in the early days as a metadata server to the current trove of hosted packages, PyPI has grown into a critical part of the Python Communities Infrastructure.&lt;/p&gt;
&lt;p&gt;Originally conceived and implemented in 2002 as a simple set of metadata, the codebase that backs PyPI has been pushed well beyond it's limits. While some may call it &amp;quot;legacy&amp;quot; software, I choose to view it like one may view a classic car that still sees it's time on the road.&lt;/p&gt;
&lt;p&gt;This talk will present some of the challenges common to keeping a Vintage Car on the road as well as their counter parts when dealing with Vintage Software and take a look at the approaches that have worked well to keep PyPI up and running as a full rewrite is underway.&lt;/p&gt;
&lt;p&gt;Also covered will be an overview of the history of PyPI as a whole, as well as what the future holds and how you (yes you!) can contribute.&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;Technical Topics covered include:&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="first last simple"&gt;
&lt;li&gt;External caching, Content Delivery Networks&lt;/li&gt;
&lt;li&gt;Internal caching, to speed up common or repetitive requests which just can't be cached in the CDN&lt;/li&gt;
&lt;li&gt;Metrics, Metrics, Metrics! Not just for monitoring! Keep track of what features just aren't worth supporting any longer or what methods are prime for optimization&lt;/li&gt;
&lt;li&gt;Dealing with issues related to scaling even when major refactors or changes aren't feasible.&lt;/li&gt;
&lt;li&gt;Increasing reliability&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;The desired outcome for attendees of this talk is a sense of how to approach a Vintage codebase that must remain up and running even as it's predecessor may be in progress. Big rewrites can take time! Don't feel defeated sustaining an old project, it is what your users need!&lt;/p&gt;
&lt;p&gt;Novice attendees may find the history and high level concepts interesting, but Intermediate attendees should get the most out of this talk. Specifically some of the technical bits will make the most sense and be most applicable if you've ever worked on a medium to large production web service.&lt;/p&gt;
</summary></entry><entry><title>Shipping secret messages through barcodes</title><link href="https://pyvideo.org/pygotham-2017/shipping-secret-messages-through-barcodes.html" rel="alternate"></link><published>2017-10-07T00:00:00+00:00</published><updated>2017-10-07T00:00:00+00:00</updated><author><name>Karina Ruzinov</name></author><id>tag:pyvideo.org,2017-10-07:pygotham-2017/shipping-secret-messages-through-barcodes.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Barcodes are used every day to keep track of the most important things in our lives and our businesses. We use them to track packages, to count inventory, and even to encode secret information! How these encodings work are very rarely discussed and there are even fewer libraries to help create them using Python.&lt;/p&gt;
&lt;p&gt;Shipping labels are typically generated through a specific language which can initially seem confusing and unapproachable. I will walk you through how I've used Python to lower that barrier to entry. The width and frequency of the bars will start to seem less arbitrary and you'll learn how to interpret the secret encoded information.&lt;/p&gt;
</summary></entry><entry><title>Solving a crossword puzzle the hard way</title><link href="https://pyvideo.org/pygotham-2017/solving-a-crossword-puzzle-the-hard-way.html" rel="alternate"></link><published>2017-10-07T00:00:00+00:00</published><updated>2017-10-07T00:00:00+00:00</updated><author><name>Alec Barrett</name></author><id>tag:pyvideo.org,2017-10-07:pygotham-2017/solving-a-crossword-puzzle-the-hard-way.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The New York Times crossword puzzle gets harder as the week goes on. I can confidently finish a Thursday, but struggle a little on Friday and Saturday. In an effort to become a better solver, and a better programmer, I set out to solve a crossword puzzle the hard way: by writing a Python program to do it for me.&lt;/p&gt;
&lt;p&gt;The task is not trivial, and I have not previously come across automated crossword puzzle solvers in the wild. Crosswords are rife with wordplay and non-linear thinking, which still elude contemporary AI. The computer's advantages are speed and breadth: it can rapidly filter lists of words based on surrounding words and related criteria, and I allow my program access to libraries that serve as dictionary, thesaurus, and search engine. My program parses the clues and feeds them into Natural Language Toolkit (NLTK), spaCy, Google Knowledge Graph, and Wikipedia. From the responses, it generates a set of candidate answers, then narrows them down based on word length and intersecting letters.&lt;/p&gt;
&lt;p&gt;In this talk I will explain the program's pipeline -- from inputting a series of clues and grid to producing a list of candidate answers ranked by how likely they are to be correct. There will be a live demonstration of the program using the NYT's most recent Monday puzzle.&lt;/p&gt;
</summary></entry><entry><title>Start Being Static with MyPy</title><link href="https://pyvideo.org/pygotham-2017/start-being-static-with-mypy.html" rel="alternate"></link><published>2017-10-07T00:00:00+00:00</published><updated>2017-10-07T00:00:00+00:00</updated><author><name>Mark Koh</name></author><id>tag:pyvideo.org,2017-10-07:pygotham-2017/start-being-static-with-mypy.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python's native dynamic typing is one of the things that makes Python so fast and simple to work in.  However, when python code bases start to become large and have many contributors, they can start to become unmaintainable and error-prone.&lt;/p&gt;
&lt;p&gt;MyPy is a static type-checking library that you can add to your python projects to check the Type Hints proposed in &lt;a class="reference external" href="https://www.python.org/dev/peps/pep-0484/"&gt;PEP 484&lt;/a&gt;.  Static typing allows you to explicitly specify what types of objects your functions expect -- it looks like this:&lt;/p&gt;
&lt;!-- code-block: python

from typing import Iterator

def fib(n: int) -&gt; Iterator[int]:
    a, b = 0, 1
    while a &lt; n:
        yield a
        a, b = b, a + b --&gt;
&lt;p&gt;MyPy is a project blessed (and being worked on) by Guido himself, and is the key to making Python robust enough for enterprise production code bases.  This talk will cover the following topics:
- The benefits of static type checking in Python
- A crash course on adding Type Hints and MyPy to your code base
- A demo for adding MyPy type checking to your CI/CD pipeline
- Learnings from adding static type checking to systems at Spotify&amp;amp;trade;&lt;/p&gt;
</summary></entry><entry><title>The 8 things that happen at the "." between an object and the attribute</title><link href="https://pyvideo.org/pygotham-2017/the-8-things-that-happen-at-the-between-an-object-and-the-attribute.html" rel="alternate"></link><published>2017-10-07T00:00:00+00:00</published><updated>2017-10-07T00:00:00+00:00</updated><author><name>Andy Fundinger</name></author><id>tag:pyvideo.org,2017-10-07:pygotham-2017/the-8-things-that-happen-at-the-between-an-object-and-the-attribute.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;We rarely think about the dot &amp;quot;.&amp;quot; between our objects and their fields, but there are quite a lot of things that happen every time we use one in Python. This talk will explore the details of what happens, how the descriptor protocol works, and how it can be used to alter the Python object model.&lt;/p&gt;
&lt;p&gt;Actions to be explored:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;The instance __dict__ is checked.&lt;/li&gt;
&lt;li&gt;The class __dict__ is checked.&lt;/li&gt;
&lt;li&gt;The base classes __dicts__ are checked.&lt;/li&gt;
&lt;li&gt;__getattr__ runs.&lt;/li&gt;
&lt;li&gt;__getattribute__ runs.&lt;/li&gt;
&lt;li&gt;The __get__ method on the object in the class __dict__ is called.&lt;/li&gt;
&lt;li&gt;The object in the class __dict__ is checked for a __set__ method.&lt;/li&gt;
&lt;li&gt;raise AttributeError&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Most of the talk will focus on 6 &amp;amp; 7 to explain the Descriptor protocol. Examples will include altering method binding and property behaviors, as well as supporting method implementation reuse via Descriptors.&lt;/p&gt;
</summary></entry><entry><title>The Other Async</title><link href="https://pyvideo.org/pygotham-2017/the-other-async.html" rel="alternate"></link><published>2017-10-07T00:00:00+00:00</published><updated>2017-10-07T00:00:00+00:00</updated><author><name>David Beazley</name></author><id>tag:pyvideo.org,2017-10-07:pygotham-2017/the-other-async.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyGotham 2017 keynote by David Beazley&lt;/p&gt;
</summary></entry><entry><title>There's a sign for that!</title><link href="https://pyvideo.org/pygotham-2017/theres-a-sign-for-that.html" rel="alternate"></link><published>2017-10-07T00:00:00+00:00</published><updated>2017-10-07T00:00:00+00:00</updated><author><name>Heather Shapiro</name></author><id>tag:pyvideo.org,2017-10-07:pygotham-2017/theres-a-sign-for-that.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Ever wonder how to be more visually accessible to those around you? American Sign Language (ASL) is the main form of communication for many deaf Americans, yet it is not widely known in the hearing community. Learn how to convert your speech to text and then to sign to be more inclusive!&lt;/p&gt;
&lt;p&gt;This talk will explain how to use Speech to Text APIs in Python in order to record audio, convert it to text, and match it to a similar gif to show the phrase!&lt;/p&gt;
</summary></entry><entry><title>Those Who Care, Teach!</title><link href="https://pyvideo.org/pygotham-2017/those-who-care-teach.html" rel="alternate"></link><published>2017-10-07T00:00:00+00:00</published><updated>2017-10-07T00:00:00+00:00</updated><author><name>Kenneth Love</name></author><id>tag:pyvideo.org,2017-10-07:pygotham-2017/those-who-care-teach.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Many of us want to share our knowledge and bring people into programming or help advance people that are already here. One of the issues with this, though, is getting into teaching or mentoring is hard and a lot of us aren't sure how to do it. I can't help you get over any shyness you have but I can help you be listened to once you've reached out to people. In this talk, I'll cover ways to have a wider audience through inclusive language, positive reinforcements, and taking yourself off of any pedestals you've been placed on. I'll also cover a few tips and tricks for helping students learn what you're teaching.&lt;/p&gt;
</summary></entry><entry><title>Threat Modeling Python Web Apps written with Flask and Django</title><link href="https://pyvideo.org/pygotham-2017/threat-modeling-python-web-apps-written-with-flask-and-django.html" rel="alternate"></link><published>2017-10-07T00:00:00+00:00</published><updated>2017-10-07T00:00:00+00:00</updated><author><name>Jared Smith</name></author><id>tag:pyvideo.org,2017-10-07:pygotham-2017/threat-modeling-python-web-apps-written-with-flask-and-django.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Ever wanted to know how your web app can be compromised? Wonder no more. In this talk, we'll build a threat model for realistic Flask and Django apps. We'll learn how to spot potential weak points, where to spend time and money on security improvements, and how to discover breaches before it's too late. We'll dive into the typical weak points of Python web apps, for both Flask and Django, as well as specific flaws with an we will look at for each Flask and Django. After finding the potential weak points, we will learn how to prioritize what should be fixed first and where to spend time and money fixing weaknesses first. Wherever possible, popular libraries for each framework will be relied upon to secure the apps, and you will learn where to go to learn more if necessary about each potential flaw. Finally, we'll discuss some of the best practices in security you should be taking to discover breaches into these apps before it's too late, such as setting up a central logging system and implementing analytics to detect malicious users who have breached the site.&lt;/p&gt;
</summary></entry><entry><title>Valuing Job Offers - Finance 101 with Python</title><link href="https://pyvideo.org/pygotham-2017/valuing-job-offers-finance-101-with-python.html" rel="alternate"></link><published>2017-10-07T00:00:00+00:00</published><updated>2017-10-07T00:00:00+00:00</updated><author><name>Aaron Hall, MBA</name></author><id>tag:pyvideo.org,2017-10-07:pygotham-2017/valuing-job-offers-finance-101-with-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;How do we value job offers? If one firm offers X and another Y, the matter may be straightforward if everything else is equal. But that is rarely the case.&lt;/p&gt;
&lt;p&gt;How do we value options? How do we deal with the uncertainty of vesting and company performance? Should we value perks?&lt;/p&gt;
&lt;p&gt;This talk will present introductory financial theory, with pure Python functions first, and the objects delegating calculations to Numpy, to answer these questions.&lt;/p&gt;
&lt;p&gt;The speaker has an MBA, works in finance, has taught Python at Columbia and NYU, and is a former business professor and financial advisor.&lt;/p&gt;
</summary></entry><entry><title>When to avoid the subway: using python to make your commute slightly less terrible</title><link href="https://pyvideo.org/pygotham-2017/when-to-avoid-the-subway-using-python-to-make-your-commute-slightly-less-terrible.html" rel="alternate"></link><published>2017-10-07T00:00:00+00:00</published><updated>2017-10-07T00:00:00+00:00</updated><author><name>Josh Laurito</name></author><id>tag:pyvideo.org,2017-10-07:pygotham-2017/when-to-avoid-the-subway-using-python-to-make-your-commute-slightly-less-terrible.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;While there are already great tools for real time analysis of traffic, figuring out the value of waking up 15 minutes early isn't always obvious. But we can figure out times and days that are most likely to have breakdowns as delays on our own,  and use this to improve our commute.&lt;/p&gt;
&lt;p&gt;Primarily,  this talk is about:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;setting up a system to gather unique information about train performance&lt;/li&gt;
&lt;li&gt;finding factors that correlate with delays and complaints about poor train experiences&lt;/li&gt;
&lt;li&gt;using this information to find the best times to avoid,  and where there's the most value in waking up early to commute&lt;/li&gt;
&lt;li&gt;making this information accessible and convenient for me and my friends/ co-workers&lt;/li&gt;
&lt;/ul&gt;
</summary></entry><entry><title>Why you (!) should teach kids how to code</title><link href="https://pyvideo.org/pygotham-2017/why-you-should-teach-kids-how-to-code.html" rel="alternate"></link><published>2017-10-07T00:00:00+00:00</published><updated>2017-10-07T00:00:00+00:00</updated><author><name>Tobias "Tobi" Schraink</name></author><id>tag:pyvideo.org,2017-10-07:pygotham-2017/why-you-should-teach-kids-how-to-code.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Learning how to code is ever more important and the more kids code, the better. But what can you get out of teaching kids? Why it will make you better at your job, and what opportunities there are in NYC, all in one talk.&lt;/p&gt;
</summary></entry><entry><title>A Python and a Gopher walk into a bar - Embedding Python in Go</title><link href="https://pyvideo.org/pygotham-2017/a-python-and-a-gopher-walk-into-a-bar-embedding-python-in-go.html" rel="alternate"></link><published>2017-10-06T00:00:00+00:00</published><updated>2017-10-06T00:00:00+00:00</updated><author><name>Massimiliano Pippi</name></author><id>tag:pyvideo.org,2017-10-06:pygotham-2017/a-python-and-a-gopher-walk-into-a-bar-embedding-python-in-go.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;You often hear of projects porting between Python and Go. The tradeoffs between the two languages are well known, and the path is well documented with success stories on either end of the journey.  But what if you want—or need—to use both languages in the same application?&lt;/p&gt;
&lt;p&gt;Datadog’s Agent is written in Go, but has a requirement to support a large existing library of Python plugins developed in house and by our community. During the talk we will share the benefits of supporting both languages and lessons learned about how to combine them performantly. From battling cgo to dancing with the GIL as we maintained concurrency, learn from our experiences in combining multiple languages in a single application.&lt;/p&gt;
</summary></entry><entry><title>Algorithmic fairness and algorithmic discrimination</title><link href="https://pyvideo.org/pygotham-2017/algorithmic-fairness-and-algorithmic-discrimination.html" rel="alternate"></link><published>2017-10-06T00:00:00+00:00</published><updated>2017-10-06T00:00:00+00:00</updated><author><name>Manojit Nandi</name></author><id>tag:pyvideo.org,2017-10-06:pygotham-2017/algorithmic-fairness-and-algorithmic-discrimination.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;As data-driven models are more commonly used in decision-making and public policy, we as data practitioners must be aware of the systematic biases present in our data, so we do not discriminate or reinforce vicious cycles against vulnerable groups.  I will explain the concept of algorithmic fairness and how it relates to the traditional view of machine learning classifiers. I will discuss ways to measure the extent to which a classifier discriminates against a particular minority group and showcase special algorithms for mitigating the level of disparate impact of a classifier. At the end of the talk, I will point interested audience members to resources where they can learn more about emerging trends in this topic.&lt;/p&gt;
</summary></entry><entry><title>An Introduction to the Raft Distributed Consensus Algorithm</title><link href="https://pyvideo.org/pygotham-2017/an-introduction-to-the-raft-distributed-consensus-algorithm.html" rel="alternate"></link><published>2017-10-06T00:00:00+00:00</published><updated>2017-10-06T00:00:00+00:00</updated><author><name>Laura Hampton</name></author><id>tag:pyvideo.org,2017-10-06:pygotham-2017/an-introduction-to-the-raft-distributed-consensus-algorithm.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Individual computers are prone to failure, and are often unable to cope with  demands for high availability, low latency, and ability to handle large volumes of data and traffic. These demands will only increase in the future. Systems in which a consensus algorithm orchestrates a coherent group of replicated state machines have emerged as a way to meet these demands. These systems offer fault tolerance and resilience while allowing users to interact with what appears to be a single machine.&lt;/p&gt;
&lt;p&gt;This talk will offer a brief discussion of distributed systems and an introduction to the Raft distributed consensus algorithm, implemented in Python. Raft is used by MongoDB and Docker Swarm, among other technologies. In this talk, you will learn how Raft works, and how it solves the problems presented by replicating data across multiple machines.&lt;/p&gt;
</summary></entry><entry><title>Automated testing with pytest and fixtures</title><link href="https://pyvideo.org/pygotham-2017/automated-testing-with-pytest-and-fixtures.html" rel="alternate"></link><published>2017-10-06T00:00:00+00:00</published><updated>2017-10-06T00:00:00+00:00</updated><author><name>Steven Saporta</name></author><id>tag:pyvideo.org,2017-10-06:pygotham-2017/automated-testing-with-pytest-and-fixtures.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Pytest is a free Python package that makes writing and running tests for your Python programs easier. Why use Pytest?&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Automatic test discovery finds and executes tests based on the names of files and functions.&lt;/li&gt;
&lt;li&gt;Multiple tests can run in parallel, saving time.&lt;/li&gt;
&lt;li&gt;It's easy to group your tests and run just the relevant ones.&lt;/li&gt;
&lt;li&gt;Testing that your code has raised and expected exception is easy.&lt;/li&gt;
&lt;li&gt;Pytest &amp;quot;fixtures&amp;quot; are a powerful tool for:
- Setting up and tearing down objects or data required by your tests
- Parameterizing tests to run with different environments, inputs, etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This talk is ideal for a moderately technical audience. Basic knowledge of Python programming will be helpful, but is not required.&lt;/p&gt;
</summary></entry><entry><title>Avant-Garde Regular Expressions</title><link href="https://pyvideo.org/pygotham-2017/avant-garde-regular-expressions.html" rel="alternate"></link><published>2017-10-06T00:00:00+00:00</published><updated>2017-10-06T00:00:00+00:00</updated><author><name>James Cropcho</name></author><id>tag:pyvideo.org,2017-10-06:pygotham-2017/avant-garde-regular-expressions.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Don’t settle on being just regular! In this fast-paced talk, you will learn how to create advanced regular expressions, as well as powerful and unconventional nuances to using them.&lt;/p&gt;
&lt;p&gt;I will introduce verbose expressions, lookahead assertions, greedy expressions, multi-line expressions, locale-aware expressions and more, with many code examples. I will introduce robust ways to use regular expressions, including named groups and returning matches as an Iterator.&lt;/p&gt;
&lt;p&gt;I will briefly highlight multiple-expression design practices, testing, developer tooling, and even historical origins of the name.&lt;/p&gt;
&lt;p&gt;Beginner-level regular expression familiarity is assumed. Please join me!&lt;/p&gt;
</summary></entry><entry><title>bqplot - Seamless Interactive Visualizations in the Jupyter Notebook</title><link href="https://pyvideo.org/pygotham-2017/bqplot-seamless-interactive-visualizations-in-the-jupyter-notebook.html" rel="alternate"></link><published>2017-10-06T00:00:00+00:00</published><updated>2017-10-06T00:00:00+00:00</updated><author><name>Dhruv Madeka</name></author><id>tag:pyvideo.org,2017-10-06:pygotham-2017/bqplot-seamless-interactive-visualizations-in-the-jupyter-notebook.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;bqplot is a Python plotting library based on d3.js that offers its functionality directly in the Jupyter Notebook, including selections, interactions, and arbitrary css customizations. In bqplot, every element of a chart is an interactive ipython widget that can be bound to a python function, which serves as the callback when an interaction takes place. The bidirectional communication between Python and JavaScript is a feature of bqplot that makes the python code aware of any interactions the user has with the visualization. This allows the rapid generation of full fledged web applications directly in the Notebook with just a few lines of Python code. We will also review some of bqplot's many new and innovative visualizations and interactions - including the MarketMap and the FastIntervalSelector and demonstrate concrete applications that leverage them to enhance a Data Science or Machine Learning workflow.&lt;/p&gt;
&lt;p&gt;The talk will also cover bqplot's seamless integration with the native Jupyter widgets - including layout and styling of web applications, as well as the integration with other widget libraries such as ipyleaflet or ipyvolume. We will also demonstrate the simple way to export bqplot charts as stand alone web applications through the embedding mechanism of the ipywidgets library.&lt;/p&gt;
&lt;p&gt;Finally, we will highlight bqplot as the first plotting library to have complete integration with the new JupyterLab IDE by demonstrating dashboarding, resizing and custom integrations.&lt;/p&gt;
</summary></entry><entry><title>Build your own "Not Hotdog" deep learning model</title><link href="https://pyvideo.org/pygotham-2017/build-your-own-not-hotdog-deep-learning-model.html" rel="alternate"></link><published>2017-10-06T00:00:00+00:00</published><updated>2017-10-06T00:00:00+00:00</updated><author><name>Brendan Sudol</name></author><id>tag:pyvideo.org,2017-10-06:pygotham-2017/build-your-own-not-hotdog-deep-learning-model.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk focuses on the code and concepts behind image classification models. First, I'll break down how convolutional neural networks work. I'll present a few methods for dealing with small amounts of training data (data pre-processing and image augmentation / transformations). I'll show how to leverage (and extend) a network that's been pre-trained on a large image dataset (transfer learning). I'll use libraries like Keras and Tensorflow, and I'll show a working prototype (and open-source it) that identifies photos of pizza, because pizza (NY style of course) is way better than hotdogs :)&lt;/p&gt;
</summary></entry><entry><title>Building A Rigorous, Inclusive, and Sustainable CSForAll Movement in NYC and Beyond</title><link href="https://pyvideo.org/pygotham-2017/building-a-rigorous-inclusive-and-sustainable-csforall-movement-in-nyc-and-beyond.html" rel="alternate"></link><published>2017-10-06T00:00:00+00:00</published><updated>2017-10-06T00:00:00+00:00</updated><author><name>Michael Preston</name></author><id>tag:pyvideo.org,2017-10-06:pygotham-2017/building-a-rigorous-inclusive-and-sustainable-csforall-movement-in-nyc-and-beyond.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyGotham 2017 keynote by Michael Preston&lt;/p&gt;
</summary></entry><entry><title>Code Review, Forwards and Back</title><link href="https://pyvideo.org/pygotham-2017/code-review-forwards-and-back.html" rel="alternate"></link><published>2017-10-06T00:00:00+00:00</published><updated>2017-10-06T00:00:00+00:00</updated><author><name>Sumana Harihareswara</name></author><id>tag:pyvideo.org,2017-10-06:pygotham-2017/code-review-forwards-and-back.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The setting: an office conference room. The characters: a developer, who's written a chunk of new Python code, and a team lead, who's about to review it. You'll see the code. It's not great.&lt;/p&gt;
&lt;p&gt;What happens if the reviewer waves it through, or lets conflict aversion get the best of them? What if the reviewer says it should be &amp;quot;better&amp;quot; but doesn't articulate how? What if the review is abrasive, or nitpicky, or laid-back? What if the reviewer rewrites the code right there and then? And if we fast-forward to the same team years later, how has this code reviewing style affected the quality and evolution of the codebase, and the team's culture, skill and sustainability?&lt;/p&gt;
&lt;p&gt;See a fast-paced montage of ways things can go. Recognize patterns from your past and present. Learn scripts for phrasing criticism constructively. And laugh.&lt;/p&gt;
</summary></entry><entry><title>Confessions of a Python packaging noob</title><link href="https://pyvideo.org/pygotham-2017/confessions-of-a-python-packaging-noob.html" rel="alternate"></link><published>2017-10-06T00:00:00+00:00</published><updated>2017-10-06T00:00:00+00:00</updated><author><name>Steven Saporta</name></author><id>tag:pyvideo.org,2017-10-06:pygotham-2017/confessions-of-a-python-packaging-noob.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;When my source code repo become too large, I decided to split some modules out into a separate package, which can be installed from GitHub or other repositories using pip. Along the way, I learned about:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The difference between a package and a module&lt;/li&gt;
&lt;li&gt;Setuptools&lt;/li&gt;
&lt;li&gt;The setup.py file&lt;/li&gt;
&lt;li&gt;Using a requirements.txt file in a package&lt;/li&gt;
&lt;li&gt;Recommended directory structure for a package&lt;/li&gt;
&lt;li&gt;Package versioning&lt;/li&gt;
&lt;li&gt;PyPI, the Python Package Index&lt;/li&gt;
&lt;li&gt;Labeling a package version on GitHub&lt;/li&gt;
&lt;li&gt;Using pip to install a package from GitHub&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I’ll share my packaging journey and provide links to helpful documentation. This talk is suitable for a moderately technical audience. Programmers and non-programmers alike will gain a greater understanding of Python packaging.&lt;/p&gt;
</summary></entry><entry><title>Context propagation for Python concurrency models</title><link href="https://pyvideo.org/pygotham-2017/context-propagation-for-python-concurrency-models.html" rel="alternate"></link><published>2017-10-06T00:00:00+00:00</published><updated>2017-10-06T00:00:00+00:00</updated><author><name>Emanuele Palazzetti</name></author><id>tag:pyvideo.org,2017-10-06:pygotham-2017/context-propagation-for-python-concurrency-models.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Asynchronous Python can dramatically improve application performance by allowing work during traditional waiting periods. But when asynchronous libraries and frameworks are used to build web applications, request data often needs to be manually propagated across functions. Usually these frameworks provide a clean way to attach such context to the request object itself so it can be retrieved later in the route handler.&lt;/p&gt;
&lt;p&gt;Explicitly passing the request or context objects from function to function can be time consuming and tedious. It is also error prone, especially when the code base is big and different teams are responsible for passing context data to inner functions.&lt;/p&gt;
&lt;p&gt;At Datadog we faced these problems when we started to support asyncio and asynchronous web frameworks in our Application Performance Monitoring (APM) service. In this talk Emanuele will go over some techniques that his team used in the Python APM client to add in-process context propagation, explaining how it fits in the wide world of python concurrency models and simplifies context propagation, while maintaining asynchronous Python performance.&lt;/p&gt;
</summary></entry><entry><title>Create Single Python Executables for Easy Deployment</title><link href="https://pyvideo.org/pygotham-2017/create-single-python-executables-for-easy-deployment.html" rel="alternate"></link><published>2017-10-06T00:00:00+00:00</published><updated>2017-10-06T00:00:00+00:00</updated><author><name>Angela Fox</name></author><id>tag:pyvideo.org,2017-10-06:pygotham-2017/create-single-python-executables-for-easy-deployment.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;div class="section" id="background"&gt;
&lt;h4&gt;Background&lt;/h4&gt;
&lt;p&gt;Given Python's scripting design, developers struggle with putting Python into a concise structure (wrangling messy files everywhere, etc.). I work as a software engineer and product owner at a small, early stage startup called FINDMINE  that uses machine learning to scale the currently manual and tedious process of product curation. We develop and maintain five large scale Python applications which make up the FINDMINE product, as well as two open source Python libraries. As you can imagine, as FINDMINE has continued to grow as a company and serve more clients, the engineering team has faced some very familiar startup growing pains as we scale our software and our development team.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="problem-1-wrangling-third-party-dependencies"&gt;
&lt;h4&gt;Problem 1: Wrangling Third Party Dependencies&lt;/h4&gt;
&lt;p&gt;All of our applications at FINDMINE are written in Python 3.5 and 3.6. As many developers and maintainers of large scale software systems in Python can attest, organizing your source code in a concise structure can be a struggle because of Python’s scripting design. Furthermore, it’s often important to have a Python package deployment strategy, because deployment can be complicated by your code’s reliance on third party dependencies.&lt;/p&gt;
&lt;p&gt;I know many people can relate to the frustration of running a python application, only to have it crash because the machine you’re using happens to be missing some arbitrary list of dependencies. Suddenly you’re piping pip freeze into files and wrangling them all over the place!&lt;/p&gt;
&lt;p&gt;So we were looking for a solution that would give us a two  things. First, the ability to deploy our applications as a single executable. Second, we wanted a way to package all the application’s dependencies into that single executable, so that it could run on any machine without any problems.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="problem-2-lacking-a-replicable-environment-for-development-and-testing"&gt;
&lt;h4&gt;Problem 2: Lacking a Replicable Environment for Development and Testing&lt;/h4&gt;
&lt;p&gt;Our second problem was one that will be very familiar to anyone who has worked in a small startup environment - we didn’t have a replicable environment for development and testing. Our five applications share configurations and modules, including an communication protocol that defines how the applications would communicate certain information with one another. Making changes to any of these shared components meant that we encountered many development coordination and versioning issues.&lt;/p&gt;
&lt;p&gt;We wanted to mature our development process and create a build process that would ensure a consistent environment for developing, testing and running our software. We also recognized that we needed to start using a continuous integration development practice, and needed an automated build and test functionality to detect integration errors.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-solution"&gt;
&lt;h4&gt;The Solution&lt;/h4&gt;
&lt;p&gt;To solve these two problems we came up with a unique way to use Pex, a packaging utility, and Bazel, a build tool, together. Over the course of my presentation, I'm going to introduce both of these tools for those who are unfamiliar with them. Then, I’m going to walk through our cool way of using Pex and Bazel together, but rather than describing our actual FINDMINE build structure - I’m going to use a super simple Sample Application for demo purposes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="why-you-should-attend"&gt;
&lt;h4&gt;Why you should attend&lt;/h4&gt;
&lt;p&gt;Anybody who develops software in Python, regardless of their level, could benefit from learning about Pex and Bazel and how to leverage them to speed up developing, building, testing and deploying Python applications. I'll discuss our methodology, show a demo in action, and show you where to go to replicate this for your own applications. Finally, I'll discuss the learnings and insights we discovered while struggling through the muck in coming to this solution.&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>Creating a Bittorrent Client using Asyncio</title><link href="https://pyvideo.org/pygotham-2017/creating-a-bittorrent-client-using-asyncio.html" rel="alternate"></link><published>2017-10-06T00:00:00+00:00</published><updated>2017-10-06T00:00:00+00:00</updated><author><name>Ahmed Abdalla</name></author><id>tag:pyvideo.org,2017-10-06:pygotham-2017/creating-a-bittorrent-client-using-asyncio.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The purpose of this talk is explain the BitTorrent protocol and relevant Asyncio API used to create a BitTorrent client that can actually download a &amp;quot;.torrent&amp;quot; file. The BitTorrent application will be built and presented as a set of steps (code snippets, i.e. coroutines) that implement various parts of the protocol and build up a final program that can download a file. Talk will cover,&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Parsing a .torrent file&lt;/li&gt;
&lt;li&gt;Connecting to a tracker&lt;/li&gt;
&lt;li&gt;Establishing concurrent peer network connections using Asyncio&lt;/li&gt;
&lt;li&gt;Torrent download strategy&lt;/li&gt;
&lt;li&gt;Relevant Asyncio/event loop concepts where necessary&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Attendees need not know Asyncio and will learn the relevant functions needed to accomplish the task. No prior knowledge of the BitTorrent protocol is necessary either.&lt;/p&gt;
</summary></entry><entry><title>Dask for task scheduling</title><link href="https://pyvideo.org/pygotham-2017/dask-for-task-scheduling.html" rel="alternate"></link><published>2017-10-06T00:00:00+00:00</published><updated>2017-10-06T00:00:00+00:00</updated><author><name>Matthew Rocklin</name></author><id>tag:pyvideo.org,2017-10-06:pygotham-2017/dask-for-task-scheduling.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Dask is a library for parallel and distributed computing for Python, commonly known for parallelizing libraries like NumPy and pandas.  This talk discusses using Dask for task scheduling workloads, such as might be handled by Celery and Airflow, in a scalable and accessible manner.&lt;/p&gt;
&lt;p&gt;Most previous talks on Dask focus on &amp;quot;big data&amp;quot; collections like distributed pandas dataframes.  In this talk we'll diverge a bit and talk about more real-time and fine-grained settings.  We'll discuss dask's concurrent.futures interface, integration with await/async syntax, dynamic workload handling, and more.  This will focus more on the web-backend crowd than on the data-science crowd.&lt;/p&gt;
</summary></entry><entry><title>Everything You Ever Wanted to Know About Web Authentication in Python</title><link href="https://pyvideo.org/pygotham-2017/everything-you-ever-wanted-to-know-about-web-authentication-in-python.html" rel="alternate"></link><published>2017-10-06T00:00:00+00:00</published><updated>2017-10-06T00:00:00+00:00</updated><author><name>Randall Degges</name></author><id>tag:pyvideo.org,2017-10-06:pygotham-2017/everything-you-ever-wanted-to-know-about-web-authentication-in-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Want to learn how web authentication works? How your login information is transmitted from a web browser to a web server, and what happens from that point onwards? How authentication protocols work behind the scenes?&lt;/p&gt;
&lt;p&gt;In this talk, Randall Degges, Developer Advocate at Okta, will walk you through the entire web authentication flow, covering:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Credential transmission&lt;/li&gt;
&lt;li&gt;Cookies&lt;/li&gt;
&lt;li&gt;Sessions&lt;/li&gt;
&lt;li&gt;Databases&lt;/li&gt;
&lt;li&gt;Best practices&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;By the end of this talk, you’ll be intimately familiar with web authentication in Python.&lt;/p&gt;
</summary></entry><entry><title>From Monolithic to Serverless with AWS Step Functions</title><link href="https://pyvideo.org/pygotham-2017/from-monolithic-to-serverless-with-aws-step-functions.html" rel="alternate"></link><published>2017-10-06T00:00:00+00:00</published><updated>2017-10-06T00:00:00+00:00</updated><author><name>Scott Triglia</name></author><id>tag:pyvideo.org,2017-10-06:pygotham-2017/from-monolithic-to-serverless-with-aws-step-functions.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;div class="section" id="summary"&gt;
&lt;h4&gt;Summary&lt;/h4&gt;
&lt;p&gt;Sometimes it seems like you can hardly go a day without hearing about how “serverless” is going to change the world of backend architecture. But aside from toy proofs of concept, how are you realistically supposed to put it into practice? Most of us work with years-old codebases that are resistant to decoupling, much less easy to transition to serverless.&lt;/p&gt;
&lt;p&gt;Come hear how Yelp has been moving a 10 year old codebase from tangled spaghetti toward a serverless future using AWS Step Functions (SFN). You’ll gain familiarity with SFN as infrastructure, learn how it can be used to effectively disentangle complicated systems, and understand how to incrementally introduce serverless components into your monolithic application.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="who-and-why"&gt;
&lt;h4&gt;Who and Why&lt;/h4&gt;
&lt;p&gt;This session is targeted at any developer interested in introducing serverless architectures, but concerned that their current systems are hopelessly complicated to integrate. The talk will be very focused on pragmatic approaches and grounded in a case study on a Yelp system which has been using these strategies to move steadily toward serverless architectures.&lt;/p&gt;
&lt;/div&gt;
</summary></entry><entry><title>Functions Within Functions: An Intro to Decorators and Closures</title><link href="https://pyvideo.org/pygotham-2017/functions-within-functions-an-intro-to-decorators-and-closures.html" rel="alternate"></link><published>2017-10-06T00:00:00+00:00</published><updated>2017-10-06T00:00:00+00:00</updated><author><name>Eric Fulmer</name></author><id>tag:pyvideo.org,2017-10-06:pygotham-2017/functions-within-functions-an-intro-to-decorators-and-closures.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;One of the greatest things about Python is its dynamic nature. This dynamicity extends to how functions work. Python can create new functions at runtime, returning them based on arguments to other functions. Functions can also store external data inside themselves to use in future calls. While all of this sounds abstract and weird, it allows for some extremely useful features: closures and decorators. Decorators allow you to use pre-existing functions to extend your own functions with new behavior, or to create an interface that other programmers can use. This talk will provide an accessible tutorial to these ideas and how to apply them, as well as provide an expanded way of thinking about how to write and use functions, which is becoming more and more common in &amp;quot;mainstream&amp;quot; languages popular in industry, like Java, JavaScript, and of course Python.&lt;/p&gt;
</summary></entry><entry><title>High Performance Microservices</title><link href="https://pyvideo.org/pygotham-2017/high-performance-microservices.html" rel="alternate"></link><published>2017-10-06T00:00:00+00:00</published><updated>2017-10-06T00:00:00+00:00</updated><author><name>Peter Sperl</name></author><id>tag:pyvideo.org,2017-10-06:pygotham-2017/high-performance-microservices.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Architecture plays an important role in determining the ultimate performance of a system.  Caching effectiveness, for example, is largely determined by interface design and data storage policy, while IPC overhead is strongly influenced by service deployment strategy and the method of data exchange.&lt;/p&gt;
&lt;p&gt;The techniques and designs presented are general and not specific to any one service framework.   While many of the topics discussed apply to services and systems implemented in any language, the presented performance comparisons were run in Python and there are tips and tricks that are Python specific, such as taking liberties with the garbage collector.&lt;/p&gt;
</summary></entry><entry><title>Indexing all the things: Building your search engine in Python</title><link href="https://pyvideo.org/pygotham-2017/indexing-all-the-things-building-your-search-engine-in-python.html" rel="alternate"></link><published>2017-10-06T00:00:00+00:00</published><updated>2017-10-06T00:00:00+00:00</updated><author><name>Joe Cabrera</name></author><id>tag:pyvideo.org,2017-10-06:pygotham-2017/indexing-all-the-things-building-your-search-engine-in-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Since the emergence of Elasticsearch, common Information Retrieval tasks such as indexing, scoring and retrieval of documents into a search engine have never been easier. However unique challenges still exist for indexing large sets of data from databases. At Jopwell, we need to insure that data in our database is kept in constant sync with data in our search index.&lt;/p&gt;
&lt;p&gt;Initially you need to take data from a traditional SQL database and flatten it for indexing in Elasticsearch. Since indexing this data can be a memory intensive task, Celery is useful for ensuring you can index large sets of data in both a distributed and memory-conservative manner. Once all your documents are in your Elasticsearch index, you need to retrieve data from your database related to a user’s search results.&lt;/p&gt;
&lt;p&gt;In this talk, I’ll show the basics of creating a search engine in Python, keeping these it synced with another data store and how you can keep your index running smoothly.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Talk Outline&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Introduction to the problem (2 min)&lt;/li&gt;
&lt;li&gt;Building your document indexer (7 min)&lt;ul&gt;
&lt;li&gt;Flattening database data into a search document&lt;/li&gt;
&lt;li&gt;Using Celery to index documents efficiently&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Scoring and search results retrieval (7 min)&lt;ul&gt;
&lt;li&gt;Scoring algorithms&lt;/li&gt;
&lt;li&gt;Retrieving matching results from the database&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Strategies for syncing data from (7 min)&lt;ul&gt;
&lt;li&gt;Traditional SQL database&lt;/li&gt;
&lt;li&gt;Elasticsearch index&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Future work (2 min)&lt;/li&gt;
&lt;/ul&gt;
</summary></entry><entry><title>Intellectual Property for Engineers</title><link href="https://pyvideo.org/pygotham-2017/intellectual-property-for-engineers.html" rel="alternate"></link><published>2017-10-06T00:00:00+00:00</published><updated>2017-10-06T00:00:00+00:00</updated><author><name>Noah Kantrowitz</name></author><id>tag:pyvideo.org,2017-10-06:pygotham-2017/intellectual-property-for-engineers.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Intellectual property is everywhere in software, especially in open source. From licenses to copyrights, our world is one drenched in IP. This talk will cover the essentials of IP law in the US, giving both open source developers and users a working knowledge of the systems behind those big blocks of legal text. Starting from the four main branches of IP, we'll cover topics like copyrights, licenses, trademarks, CLAs, and more.&lt;/p&gt;
</summary></entry><entry><title>Keep On Mockin' In The Real World</title><link href="https://pyvideo.org/pygotham-2017/keep-on-mockin-in-the-real-world.html" rel="alternate"></link><published>2017-10-06T00:00:00+00:00</published><updated>2017-10-06T00:00:00+00:00</updated><author><name>Andrew Burrows</name></author><id>tag:pyvideo.org,2017-10-06:pygotham-2017/keep-on-mockin-in-the-real-world.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk is an example-led romp through some of the trickier aspects of mocking and patching. It picks up where a beginner's guide leaves off and looks at the sort of problems you are likely to face when writing tests for the kind of real code that is currently in your codebase. Based on years of experience teaching and mentoring developers in my workplace on testing and mocking techniques I've collected together many of the follow up questions and war stories people have brought to me after hitting problems using mocks in their tests. This talk will equip you with a set of tools, tips and tricks you can use in your own testing and a greater appreciation of what kind of code might make life difficult when mocking.&lt;/p&gt;
</summary></entry><entry><title>Loop better: a deeper look at iteration in Python</title><link href="https://pyvideo.org/pygotham-2017/loop-better-a-deeper-look-at-iteration-in-python.html" rel="alternate"></link><published>2017-10-06T00:00:00+00:00</published><updated>2017-10-06T00:00:00+00:00</updated><author><name>Trey Hunner</name></author><id>tag:pyvideo.org,2017-10-06:pygotham-2017/loop-better-a-deeper-look-at-iteration-in-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;dl class="docutils"&gt;
&lt;dt&gt;What's the difference between an iterable, an iterator, and a generator?  Do you know how to create infinitely long iterables?&lt;/dt&gt;
&lt;dd&gt;Come to this talk to learn some of Python's slightly more advanced looping techniques.&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;Iterables are a very big deal in Python and they became even more important in Python 3.  There's quite a bit beyond the basics when it comes to loops and looping in Python.  Let's learn some of Python's slightly more advanced looping techniques!&lt;/p&gt;
&lt;p&gt;In this session, we'll take a step back and learn about how looping actually works in Python.  We'll then learn about a number of Python looping techniques that you've probably overlooked.&lt;/p&gt;
&lt;p&gt;We'll learn about the difference between sequences, iterables, and iterators.  We'll also reveal the iterator protocol that powers &lt;cite&gt;for&lt;/cite&gt; loops in Python.&lt;/p&gt;
&lt;p&gt;After we learn the basics, we'll learn some techniques for working with infinite infinite iterables, generators, and generator expressions.&lt;/p&gt;
&lt;p&gt;Attendees will walk away from this session with specific actionable recommendations for refactoring their own code as well as a wealth of new topics to look deeper into after the session.&lt;/p&gt;
</summary></entry><entry><title>Managing Complexity: Config As Code, Custom Ansible Modules, and You</title><link href="https://pyvideo.org/pygotham-2017/managing-complexity-config-as-code-custom-ansible-modules-and-you.html" rel="alternate"></link><published>2017-10-06T00:00:00+00:00</published><updated>2017-10-06T00:00:00+00:00</updated><author><name>Zach Marine</name></author><id>tag:pyvideo.org,2017-10-06:pygotham-2017/managing-complexity-config-as-code-custom-ansible-modules-and-you.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Managing complex configurations is, well, complex. Take postgres as an example: with roles, group memberships, granted privileges, and default privileges all affecting each other, keeping straight how everything fits together can feel impossible. This talk discusses an approach we took at Squarespace to simplify this chaos using a custom ansible module and config as code. Taking this problem as a case study, we'll discuss what ansible is and how to write a custom module for it, how to express config as code, and techniques for testing config as code.&lt;/p&gt;
</summary></entry><entry><title>Monkey Patching My Life: Being a Trans Python Developer</title><link href="https://pyvideo.org/pygotham-2017/monkey-patching-my-life-being-a-trans-python-developer.html" rel="alternate"></link><published>2017-10-06T00:00:00+00:00</published><updated>2017-10-06T00:00:00+00:00</updated><author><name>Piper Thunstrom</name></author><id>tag:pyvideo.org,2017-10-06:pygotham-2017/monkey-patching-my-life-being-a-trans-python-developer.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Transition is remarkably like monkey patching a very complex legacy system: From changing identifiers to modifying our behavior, to interacting with interfaces that aren't quite sure how to deal with the modifications.&lt;/p&gt;
&lt;p&gt;This talk will cover my experiences transitioning quite publicly in the New York City area Python community and how those interactions can inform how we design systems: both social and software.&lt;/p&gt;
</summary></entry><entry><title>Next Level Testing Revisited</title><link href="https://pyvideo.org/pygotham-2017/next-level-testing-revisited.html" rel="alternate"></link><published>2017-10-06T00:00:00+00:00</published><updated>2017-10-06T00:00:00+00:00</updated><author><name>James Saryerwinnie</name></author><id>tag:pyvideo.org,2017-10-06:pygotham-2017/next-level-testing-revisited.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Unit and integration tests are great first steps towards improving the quality of your python project. Ever wonder if there’s even more you can do?   In this talk we’ll cover additional types of tests that can help improve the quality and robustness of your python projects: stateful property-based testing, generative fuzz testing, long term stability testing and advanced multithreaded testing.&lt;/p&gt;
&lt;p&gt;This talk is more than just theory.  We'll look at specific libraries and frameworks that help you write these advanced tests.  I'll also show you real world examples of bugs these tests have found from projects that I maintain.&lt;/p&gt;
</summary></entry><entry><title>Nim: A New Option for Optimizing Inner Loops</title><link href="https://pyvideo.org/pygotham-2017/nim-a-new-option-for-optimizing-inner-loops.html" rel="alternate"></link><published>2017-10-06T00:00:00+00:00</published><updated>2017-10-06T00:00:00+00:00</updated><author><name>Z. D. Smith</name></author><id>tag:pyvideo.org,2017-10-06:pygotham-2017/nim-a-new-option-for-optimizing-inner-loops.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;a class="reference external" href="https://nim-lang.org/"&gt;Nim&lt;/a&gt; is a relatively young and unknown programming language that provides an enticing mix of features to the Python programmer looking to deploy highly optimized, efficient code. It has a syntax that should be familiar to Pythonistas, including significant whitespace. It is oriented towards expressiveness and ease of composition, including a powerful macro and templating system. However, it is also fast: it's strongly typed, imperative, and compiles to C.&lt;/p&gt;
&lt;p&gt;Python has extremely robust support for importing shared libraries written in C as a means to optimize certain areas of an application for performance. However, C is... C. It's tricky to write, requires manual memory management and manual pointer manipulation, has no type inference... It's everything that most Python programmers write Python in order to avoid.&lt;/p&gt;
&lt;p&gt;However, the fact that Nim compiles to C means we can write highly performant code in a modern language and then employ Python's robust and pervasive C support to call it.&lt;/p&gt;
&lt;p&gt;In this talk we'll review a little bit of the Nim language itself, and dive into how to smoothly use it in a Python application.&lt;/p&gt;
</summary></entry><entry><title>Psychology of Estimation: Faster is not always better</title><link href="https://pyvideo.org/pygotham-2017/psychology-of-estimation-faster-is-not-always-better.html" rel="alternate"></link><published>2017-10-06T00:00:00+00:00</published><updated>2017-10-06T00:00:00+00:00</updated><author><name>Amin Yazdani</name></author><id>tag:pyvideo.org,2017-10-06:pygotham-2017/psychology-of-estimation-faster-is-not-always-better.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In 1979,  Daniel Kahneman and Amos Tversky coined the term “Planning Fallacy” to describe plans and forecasts that are unrealistically close to best-case scenarios. These plans can be improved by consulting the statistics of similar cases.&lt;/p&gt;
&lt;p&gt;When you look at the software development and projects done using Agile methodologies, you can see the same phenomena. Projects are estimated too optimistically at start. We are usually too focused on best-case scenarios. Although our experience shows that statistically projects are done closer to their worst-case scenario, we stay optimistic. When issues arise, we blame the odd task that took more than expected, or the unexpected technical difficulty that took a few extra weeks or months. But we should have known better, shouldn’t we have?&lt;/p&gt;
&lt;p&gt;In this talk, Amin explains the psychology of estimation and the reasons behind our behaviour. He walks us through the red flags that we can look for to spot Planning Fallacy and describes solutions for estimating more accurately.&lt;/p&gt;
</summary></entry><entry><title>PyGotham 2017 Closing Remarks</title><link href="https://pyvideo.org/pygotham-2017/pygotham-2017-closing-remarks.html" rel="alternate"></link><published>2017-10-06T00:00:00+00:00</published><updated>2017-10-06T00:00:00+00:00</updated><author><name>Paul Logston</name></author><id>tag:pyvideo.org,2017-10-06:pygotham-2017/pygotham-2017-closing-remarks.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyGotham 2017 Closing Remarks&lt;/p&gt;
</summary></entry><entry><title>PyGotham 2017 Opening Remarks</title><link href="https://pyvideo.org/pygotham-2017/pygotham-2017-opening-remarks.html" rel="alternate"></link><published>2017-10-06T00:00:00+00:00</published><updated>2017-10-06T00:00:00+00:00</updated><author><name>Paul Logston</name></author><id>tag:pyvideo.org,2017-10-06:pygotham-2017/pygotham-2017-opening-remarks.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyGotham 2017 Opening Remarks&lt;/p&gt;
</summary></entry><entry><title>PySHED: a Python framework for Streaming Heterogeneous Event Data</title><link href="https://pyvideo.org/pygotham-2017/pyshed-a-python-framework-for-streaming-heterogeneous-event-data.html" rel="alternate"></link><published>2017-10-06T00:00:00+00:00</published><updated>2017-10-06T00:00:00+00:00</updated><author><name>Christopher J. Wright</name></author><id>tag:pyvideo.org,2017-10-06:pygotham-2017/pyshed-a-python-framework-for-streaming-heterogeneous-event-data.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Data is naturally heterogeneous, containing data and metadata in a highly interrelated web. Financial data, where the goal is to correlate stock price with contextual metadata like news stories, is highly heterogeneous. However, this class of data is very difficult to handle in a traditional pipelining sense, as the different data types need to be treated in their own bespoke way. Our new library PySHED aims to tackle these issues by creating a streaming data processing protocol for heterogeneous data. The simple, elegant, and flexible protocol enables developers to properly handle their different data types while retaining all the pipelining power for combining, processing, and splitting streams of data. Furthermore, our approach automatically stores provenance information enabling traceback, reanalysis of data, and data introspection. We will discuss the application of this framework to live x-ray experiment data analysis. Finally we'll discuss future integrations with parallel processing and feedback between data collection and analysis.&lt;/p&gt;
</summary></entry><entry><title>Scaling Sparta: Military Lessons for Growing A Dev Team</title><link href="https://pyvideo.org/pygotham-2017/scaling-sparta-military-lessons-for-growing-a-dev-team.html" rel="alternate"></link><published>2017-10-06T00:00:00+00:00</published><updated>2017-10-06T00:00:00+00:00</updated><author><name>Emily Freeman</name></author><id>tag:pyvideo.org,2017-10-06:pygotham-2017/scaling-sparta-military-lessons-for-growing-a-dev-team.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Scaling systems is hard, but we’re developers — that’s kind of our thing. Scaling people? Well, that’s significantly harder. Humans are complicated.&lt;/p&gt;
&lt;p&gt;Broadly speaking, companies have three stages of development: infancy, those awkward teenage years and — if they survive the trials of adolescence — adulthood. An infant startup is so drastically different from its adult incarnation that they can be considered different companies. Each will have a unique mission and culture.&lt;/p&gt;
&lt;p&gt;Scaling isn’t just about making what you have bigger. An ant can’t be scaled to the size of an elephant. Because the internal structure is fundamentally different. Instead, companies have to evolve.&lt;/p&gt;
&lt;p&gt;But companies aren’t living, breathing organisms. They’re collections of people — families, tribes and civilizations.&lt;/p&gt;
&lt;p&gt;So how do you scale a team of two to twenty? The answer starts over 2,000 years ago in Sparta.&lt;/p&gt;
&lt;p&gt;This talk will focus on three distinct military organizations: Spartans, Mongols and Romans. Sparta’s standing army numbered 10,000 whereas Rome’s peaked at half a million. We’ll look at the structure of each military and apply the lessons learned to our development teams and organizations.&lt;/p&gt;
</summary></entry><entry><title>Spark Streaming for World Domination (and other projects)</title><link href="https://pyvideo.org/pygotham-2017/spark-streaming-for-world-domination-and-other-projects.html" rel="alternate"></link><published>2017-10-06T00:00:00+00:00</published><updated>2017-10-06T00:00:00+00:00</updated><author><name>Win Suen</name></author><id>tag:pyvideo.org,2017-10-06:pygotham-2017/spark-streaming-for-world-domination-and-other-projects.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Ask not what you can do for real time data streams but what they can do for you. This talk will give an overview of Apache Spark and pyspark (Spark's Python API), with an emphasis on Spark's Streaming API. We'll be munging and visualizing Twitter data streams as a motivating example. Learn how your streaming data projects can benefit from bigger, better, faster data processing and analytics. Your life will be changed for the better - master streaming data, achieve world domination!&lt;/p&gt;
</summary></entry><entry><title>The Evolution of API Design: from RPC to GraphQL</title><link href="https://pyvideo.org/pygotham-2017/the-evolution-of-api-design-from-rpc-to-graphql.html" rel="alternate"></link><published>2017-10-06T00:00:00+00:00</published><updated>2017-10-06T00:00:00+00:00</updated><author><name>Eric Baer</name></author><id>tag:pyvideo.org,2017-10-06:pygotham-2017/the-evolution-of-api-design-from-rpc-to-graphql.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Over the last 60 years, API designs have changed to respond to everything from new network topologies and new languages, to the pressures of managing ever larger code bases. Today’s most popular API pattern, REST, was developed in a time where the cost of making API requests was plummeting. At the time, bandwidth was getting cheaper, latency was dropping, and the computing power of devices was still tracking Moore’s Law. Mobile turned this on its head. The environments in which apps and APIs need to perform today have effectively regressed a decade.&lt;/p&gt;
&lt;p&gt;This talk will explore some of the new client-server interaction models that address today’s pressures and use history to understand the tradeoffs that we made at the transition between the previous designs. I will introduce major tools that are attempting to change the API landscape including GraphQL and Falcor. Since GraphQL is the dominant technology in this space, I will examine some of its functionality, touch on some of its syntax and present a live coding demo that shows off a GraphQL server from 0 to 1. Demonstrating a complete implementation in under 10 minutes will give a strong sense of what’s possible, and what kind of complexity burden a tool like this would impose. Spoiler: There is no silver bullet.&lt;/p&gt;
</summary></entry><entry><title>The Fastest FizzBuzz in the West: How to Make Your Own Programming Language</title><link href="https://pyvideo.org/pygotham-2017/the-fastest-fizzbuzz-in-the-west-how-to-make-your-own-programming-language.html" rel="alternate"></link><published>2017-10-06T00:00:00+00:00</published><updated>2017-10-06T00:00:00+00:00</updated><author><name>Dustin Ingram</name></author><id>tag:pyvideo.org,2017-10-06:pygotham-2017/the-fastest-fizzbuzz-in-the-west-how-to-make-your-own-programming-language.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk, you'll learn how I built DIVSPL (Dustin Ingram's Very Special Programming Language), a tongue-in-cheek domain-specific language, which is particularly good for implementing FizzBuzz -- as quickly as possible.&lt;/p&gt;
&lt;p&gt;We'll build DIVSPL with RPLY, an implementation of David Beazley's PLY (but with a &amp;quot;cooler&amp;quot; API) and make it compatible with RPython, a restricted subset of the Python programming language. Along the way, you'll learn about lexers, parsers, and grammars, and in the end, you'll know how to build your own language.'&lt;/p&gt;
&lt;p&gt;This talk is for anyone who has ever wondered how computers understand programming languages, or how to create your own programming language. It will be approachable for novices who have never studied programming language design, but will offer tools and concepts that will enable experienced users to actually build their own language, if they so desire.&lt;/p&gt;
&lt;p&gt;The audience should understand that a programming language consists of a set of symbols and patterns, and that an interpreter determines whether any given set of symbols and patterns is &amp;quot;valid&amp;quot; or &amp;quot;invalid&amp;quot;. The audience will NOT need prior experience or knowledge of advanced programming language concepts.&lt;/p&gt;
&lt;p&gt;After watching the talk, the novice users in the audience should gain an understanding of how a computer understands a programming language, including programming language concepts such as tokens, lexers, parsers and grammars.  Furthermore, experienced users should be able to implement a very simple DSL of their own using the tools discussed.&lt;/p&gt;
</summary></entry><entry><title>The Ministry of Silly Talks</title><link href="https://pyvideo.org/pygotham-2017/the-ministry-of-silly-talks.html" rel="alternate"></link><published>2017-10-06T00:00:00+00:00</published><updated>2017-10-06T00:00:00+00:00</updated><author><name>Fangfei Shen</name></author><id>tag:pyvideo.org,2017-10-06:pygotham-2017/the-ministry-of-silly-talks.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Lightning Talks from PyGotham 2017&lt;/p&gt;
</summary><category term="lightning talks"></category></entry><entry><title>Tracing the flow of knowledge using Pyspark</title><link href="https://pyvideo.org/pygotham-2017/tracing-the-flow-of-knowledge-using-pyspark.html" rel="alternate"></link><published>2017-10-06T00:00:00+00:00</published><updated>2017-10-06T00:00:00+00:00</updated><author><name>Jessica Cox</name></author><id>tag:pyvideo.org,2017-10-06:pygotham-2017/tracing-the-flow-of-knowledge-using-pyspark.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk will be focused on doing Natural Language Processing (NLP) in a Python-based Spark environment using PySpark. Examples will be drawn from a Citing Sentences project underway within Elsevier Labs (&lt;a class="reference external" href="http://labs.elsevier.com/"&gt;http://labs.elsevier.com/&lt;/a&gt;). The goal of this project is to build and analyze citation networks to understand the diffusion and flow of ideas through the scientific research landscape. Much like a social network, scientists want to understand how others are ‘talking’ about their papers.  Are they supporting their work?  Disagreeing with it?  Is it being referred to as a discovery?&lt;/p&gt;
&lt;p&gt;The development of our input datasets is out of scope for this talk, partly because the framework for citing sentence extraction is built out in Spark Scala rather than PySpark. However, our citing sentence dataframe formats will be described and documented and sample data will be provided so that others can explore and reproduce our analyses.&lt;/p&gt;
&lt;p&gt;The presentation will cover:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Reformatting, manipulating, and combining dataframes to meet specific analysis needs&lt;/li&gt;
&lt;li&gt;Preparing data for use with NLP tools and techniques&lt;/li&gt;
&lt;li&gt;Using PySpark, SparkSQL, SparkML and other Spark libraries within Python code to perform NLP&lt;/li&gt;
&lt;li&gt;Moving Spark Dataframes in and out of Pandas for additional analysis and to do visualizations&lt;/li&gt;
&lt;li&gt;Performing additional natural language analysis in NLTK within the PySpark environment&lt;/li&gt;
&lt;li&gt;Generating export formats suitable for other tools, such as for visualization with Gephi&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The following code will be provided for audience members to return to the topic and continue learning after the event:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;A &amp;quot;Community Edition&amp;quot; DataBricks compatible notebook with &amp;nbsp;SparkML, SparkSQL, &amp;nbsp;PySpark, and NLTK code&lt;/li&gt;
&lt;li&gt;A sample datafile of citing sentences from Elsevier's CCBY-licensed articles&lt;/li&gt;
&lt;/ul&gt;
</summary></entry><entry><title>Try-Monads With Big Data Using PySpark</title><link href="https://pyvideo.org/pygotham-2017/try-monads-with-big-data-using-pyspark.html" rel="alternate"></link><published>2017-10-06T00:00:00+00:00</published><updated>2017-10-06T00:00:00+00:00</updated><author><name>Jordan Yaker</name></author><id>tag:pyvideo.org,2017-10-06:pygotham-2017/try-monads-with-big-data-using-pyspark.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Tired of errors killing your code when they happen? Do you often think about whether Schrödinger's cat is truly dead or alive? Monads are the answer to the woes that plague your life!&lt;/p&gt;
&lt;p&gt;This talk will cover the following topics:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;What exactly is a Monad?&lt;/li&gt;
&lt;li&gt;Ok, so what's a Try-Monad?&lt;/li&gt;
&lt;li&gt;How will a Try-Monad help with Stream Processing?&lt;/li&gt;
&lt;li&gt;How do I add a Try-Monad to a PySpark application?&lt;/li&gt;
&lt;li&gt;How do I test my Monad-ified code?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you're interested in writing Python Stream Processing applications that can handle errors gracefully then this talk is for you!&lt;/p&gt;
</summary></entry></feed>