<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Thu, 31 Oct 2019 00:00:00 +0000</lastBuildDate><item><title>Test Fast, Fix More - Property based testing with Hypothesis</title><link>https://pyvideo.org/pycon-se-2019/test-fast-fix-more-property-based-testing-with-hypothesis.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Test Fast, Fix More – Property based in Python testing with Hypothesis Did you ever miss that corner case bug? Maybe it was a negative integer, strange timezone conversion behaviour, off by one error or something entirely else. These subtle bugs are often hard to catch and are easily missed in test cases. You like me have probably ran into plenty of code utilising only happy path testing, only to later discover subtle bugs which are easily fixed once pointed out. This is where property based testing comes into the picture.  In this talk I will focus on a wonderful Python library called Hypothesis but the concepts apply to other languages as well. Hypethesis is based on the same concept as the famous QuickCheck library for Haskell, which in turn have been ported a large number of languages. Hypothesis uses a wide range of input to find edge cases that you could otherwise easily miss, once it finds these cases it narrows down the input to the minimal breaking example to provide failures which are easier to understand.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexander Hultér</dc:creator><pubDate>Thu, 31 Oct 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-10-31:pycon-se-2019/test-fast-fix-more-property-based-testing-with-hypothesis.html</guid><category>hypothesis</category><category>testing</category></item><item><title>Property Based Testing in Python with Hypothesis</title><link>https://pyvideo.org/pycon-philippines-2019/property-based-testing-in-python-with-hypothesis.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;High unit-test coverage is great, but it cannot effectively find bugs triggered by interactions between multiple features. Since it is not scalable to write tests for all possible interactions, we turn to property-based testing - an approach where we generate tests instead of writing them.  Property-based testing (PBT) is a random-testing approach that first became popular in the Haskell community as QuickCheck. It works by generating random examples to find minimal counterexamples to a pattern or law that ought to always hold true. PBT is especially useful in testing edge cases and interactions between multiple features, particularly in stateful systems. This talk introduces the principles of PBT along with its history and success stories. We then illustrate PBT patterns and examples in Python using Hypothesis. Finally, we see how it fits in with TDD and integration testing.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Anthony Khong</dc:creator><pubDate>Sat, 23 Feb 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-02-23:pycon-philippines-2019/property-based-testing-in-python-with-hypothesis.html</guid><category>hypothesis</category><category>testing</category></item><item><title>Beyond Unit Tests: Taking Your Testing to the Next Level</title><link>https://pyvideo.org/pycon-us-2018/beyond-unit-tests-taking-your-testing-to-the-next-level.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;You've used pytest and you've used mypy, but bugs are still slipping through your code. What's next? In this talk, we cover two simple but powerful tools for keeping your code problem-free. Property-based testing, provided by the &lt;a class="reference external" href="https://hypothesis.readthedocs.io/en/latest/"&gt;Hypothesis&lt;/a&gt; library, lets you run hundreds of tests from a single template. Contracts, via &lt;a class="reference external" href="https://github.com/deadpixi/contracts"&gt;dpcontracts&lt;/a&gt;, make your program test itself. You'll learn how and why to use these tools and how to combine them with the rest of your testing suite.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Hillel Wayne</dc:creator><pubDate>Fri, 11 May 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-05-11:pycon-us-2018/beyond-unit-tests-taking-your-testing-to-the-next-level.html</guid><category>hypothesis</category><category>dpcontracts</category></item><item><title>Hypothesis: Property­-based testing for Python</title><link>https://pyvideo.org/pycon-cz-2018/hypothesis-property-based-testing-for-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;We all know we should be writing tests, but coming up with tests for every edge case is hard work and you will inevitably miss some. Tell Hypothesis what kind of data your tests need and let it explore that space. When it finds a bug, it finds the simplest case where your code fails.&lt;/p&gt;
&lt;p&gt;In this talk, I'll show you how to use Hypothesis in your projects to find more bugs than you would imagine.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Rae Knowler</dc:creator><pubDate>Sun, 03 Jun 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-06-03:pycon-cz-2018/hypothesis-property-based-testing-for-python.html</guid><category>hypothesis</category><category>test</category></item></channel></rss>