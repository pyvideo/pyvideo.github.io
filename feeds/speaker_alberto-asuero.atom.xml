<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_alberto-asuero.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2018-10-07T00:00:00+00:00</updated><entry><title>Motor de optimización de rutas para el mundo real: Python y otras bestias</title><link href="https://pyvideo.org/pycon-es-2018/motor-de-optimizacion-de-rutas-para-el-mundo-real-python-y-otras-bestias.html" rel="alternate"></link><published>2018-10-07T00:00:00+00:00</published><updated>2018-10-07T00:00:00+00:00</updated><author><name>Josema Camacho</name></author><id>tag:pyvideo.org,2018-10-07:pycon-es-2018/motor-de-optimizacion-de-rutas-para-el-mundo-real-python-y-otras-bestias.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Construir un motor de optimización para la planificación de rutas de vehículos de recogida de residuos, de reparto de mercancías, u otras muchas aplicaciones, no es tarea fácil por dos importantes motivos:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;La enorme cantidad de restricciones involucradas en el problema: restricciones a la hora de circular con los vehículos, puntos de parada que hay que visitar a cierta hora, conductores con horarios, camiones que se llenan y vacían, entregas y recogidas…&lt;/li&gt;
&lt;li&gt;Es un problema de optimización combinatoria bestial (NP-duro). Por ejemplo, para un sólo vehículo que tendría que visitar 100 localizaciones, existen &lt;tt class="docutils literal"&gt;100!&lt;/tt&gt; rutas posibles… &lt;tt class="docutils literal"&gt;100! = 9.33 * 10^157&lt;/tt&gt;. El número estimado de átomos en el universo visible es sólo &lt;tt class="docutils literal"&gt;10^80&lt;/tt&gt;, ¡casi nada!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Cayetano y Josema forman parte del equipo de Geographica que ha desarrollado una solución para resolver este tipo de problemas. Nos contarán como han montado este motor de optimización de rutas usando datos de OpenStreetMaps, PostgreSQL (con sus extensiones PostGIS y PgRouting) para ingestionarlos y procesarlos, las metaheuristicas de OR-Tools para darles sentido y Apache Airflow con Kuberntes para orquestar a estas bestias. Todo esto apoyado muy sólidamente con el SciPy ecosystem, lo mejor de Python para computación científica: Pandas, NumPy, Scikit-learn…&lt;/p&gt;
</summary></entry></feed>