<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/event_pycon-uk-2016.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2016-09-29T00:00:00+00:00</updated><entry><title>Addition: well, that escalated quickly</title><link href="https://pyvideo.org/pycon-uk-2016/addition-well-that-escalated-quickly.html" rel="alternate"></link><published>2016-09-29T00:00:00+00:00</published><updated>2016-09-29T00:00:00+00:00</updated><author><name>Zara Siddique</name></author><id>tag:pyvideo.org,2016-09-29:pycon-uk-2016/addition-well-that-escalated-quickly.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Zara Siddique&lt;/p&gt;
&lt;p&gt;I'm interested in optimal addition chains. These first seemed to me like an adding game with only one rule: you can only use numbers you’ve used before, and you have to start at 1.&lt;/p&gt;
&lt;p&gt;What if I were to ask you how many additions we needed to get to 4? Well 1 + 1 = 2 and 2 + 2 = 4, which is clearly 2 equations. Now try to get to 172, and do it with as few additions as possible. This is where the problem begins.&lt;/p&gt;
&lt;p&gt;This talk will explore the various methods one can use to calculate optimal addition chains. We will look at why many intuitive solutions don’t work (no matter how hard I tried), and why there is not yet an efficient solution.&lt;/p&gt;
&lt;p&gt;The final part looks at the Scholz Conjecture, the most famous unsolved problem related to addition chains, and one way you can use Python to show whether it is true for specific numbers.&lt;/p&gt;
</summary></entry><entry><title>Ancient Greek Philosophy, Medieval Mental Models and 21st Century Technology</title><link href="https://pyvideo.org/pycon-uk-2016/ancient-greek-philosophy-medieval-mental-models-and-21st-century-technology.html" rel="alternate"></link><published>2016-09-29T00:00:00+00:00</published><updated>2016-09-29T00:00:00+00:00</updated><author><name>Owen Campbell</name></author><id>tag:pyvideo.org,2016-09-29:pycon-uk-2016/ancient-greek-philosophy-medieval-mental-models-and-21st-century-technology.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Owen Campbell&lt;/p&gt;
&lt;p&gt;I'll talk about how the use of paper systems led to a simplification of the ideas developed by Aristotle over two thousand years ago and how the thinking that we encode into our software today is still limited by that simplification.&lt;/p&gt;
&lt;p&gt;I'll give some simple examples and then describe how, for the first time in human history, we now possess technology that is perfectly capable of implementing a far richer understanding of the world than Aristotle could possibly have imagined - but how we need to change our own mental models to take advantage of that possibility.
Fair Warning&lt;/p&gt;
&lt;p&gt;There is a little known rule:     If, during a Python conference, a quotation from Monty Python is appropriate, then it must be used, preferably with audience participation.&lt;/p&gt;
&lt;p&gt;If you chose to attend my talk, you should probably familiarise yourself with Bruce's Philosophers Song&lt;/p&gt;
</summary></entry><entry><title>Form Follows Functions</title><link href="https://pyvideo.org/pycon-uk-2016/form-follows-functions.html" rel="alternate"></link><published>2016-09-29T00:00:00+00:00</published><updated>2016-09-29T00:00:00+00:00</updated><author><name>Ed Singleton</name></author><id>tag:pyvideo.org,2016-09-29:pycon-uk-2016/form-follows-functions.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Ed Singleton&lt;/p&gt;
&lt;p&gt;A revolution in materials lead to a revolution in architecture, and a complete rethink of how we design buildings.&lt;/p&gt;
&lt;p&gt;The lessons learned in this process are still lessons we need to remember today, and they can be used to change the way we argue with each other over styles and patterns.&lt;/p&gt;
&lt;p&gt;We'll be looking at the history of what happened, and then trying to apply &amp;quot;form follows function&amp;quot; to some controversial areas to see if it helps us resolve them.&lt;/p&gt;
</summary></entry><entry><title>Sunday Lightening Talks</title><link href="https://pyvideo.org/pycon-uk-2016/sunday-lightening-talks.html" rel="alternate"></link><published>2016-09-29T00:00:00+00:00</published><updated>2016-09-29T00:00:00+00:00</updated><author><name>Zeth Green</name></author><id>tag:pyvideo.org,2016-09-29:pycon-uk-2016/sunday-lightening-talks.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Hosted by Zeth Green&lt;/p&gt;
</summary><category term="lightning talks"></category></entry><entry><title>Symbolic Computation with Python using SymPy</title><link href="https://pyvideo.org/pycon-uk-2016/symbolic-computation-with-python-using-sympy.html" rel="alternate"></link><published>2016-09-29T00:00:00+00:00</published><updated>2016-09-29T00:00:00+00:00</updated><author><name>Sartaj Singh</name></author><id>tag:pyvideo.org,2016-09-29:pycon-uk-2016/symbolic-computation-with-python-using-sympy.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Sartaj Singh&lt;/p&gt;
&lt;p&gt;This workshop aims to introduce attendees to SymPy, a computer aided algebra system (CAS) written in Python. We will show basics of constructing and manipulating mathematical expressions in SymPy, the most common issues and differences from other computer algebra systems, and how to deal with them.&lt;/p&gt;
&lt;p&gt;Attendees will take home an introductory level understanding of SymPy. This knowledge should be enough for attendees to start using SymPy for solving mathematical problems and hacking SymPy's internals (though hacking core modules may require additional expertise).&lt;/p&gt;
</summary><category term="workshop"></category><category term="sympy"></category></entry><entry><title>1001 ways of Python</title><link href="https://pyvideo.org/pycon-uk-2016/1001-ways-of-python.html" rel="alternate"></link><published>2016-09-20T00:00:00+00:00</published><updated>2016-09-20T00:00:00+00:00</updated><author><name>Ana Paula Carvalho</name></author><id>tag:pyvideo.org,2016-09-20:pycon-uk-2016/1001-ways-of-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Ana Paula Carvalho&lt;/p&gt;
&lt;p&gt;Python is very ubiquitous due to its simplicity, versatility and enormous library collections. These features make Python the go-to language in many domains ranging from science to business used by skilled computer scientists and people with little to no coding experience.&lt;/p&gt;
&lt;p&gt;This talk is aimed at complete newcomers to Python, and at sparking their curiosity to explore it, by showing how much we can achieve with little code in fields such as web development, games, scientific simulations, machine learning, cryptography and many others.&lt;/p&gt;
&lt;p&gt;Furthermore, it hopes to inspire the audience to improve its area of expertise with Python, to explore other domains, to teach, to learn, to create and to engage with the Python community.&lt;/p&gt;
&lt;p&gt;Apologies for some of the picture corruption in this video and a/v sync issues. We had a some first day glitches in our recording set up.&lt;/p&gt;
</summary></entry><entry><title>A RaspberryPi super computer in a briefcase</title><link href="https://pyvideo.org/pycon-uk-2016/a-raspberrypi-super-computer-in-a-briefcase.html" rel="alternate"></link><published>2016-09-20T00:00:00+00:00</published><updated>2016-09-20T00:00:00+00:00</updated><author><name>Russel Winder</name></author><id>tag:pyvideo.org,2016-09-20:pycon-uk-2016/a-raspberrypi-super-computer-in-a-briefcase.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Russel Winder&lt;/p&gt;
&lt;p&gt;Russel Winder will be leading a project at PyCon UK 2016 to develop a new open-source supercomputer, based on Raspberry Pis in clusters.&lt;/p&gt;
&lt;p&gt;This talk will introduce the project, and explain how you can join in.&lt;/p&gt;
&lt;p&gt;Following the talk on our open day, Russel will hold a planning and introduction session that day. On Monday work on the project will begin in earnest during the sprints.&lt;/p&gt;
&lt;p&gt;Everyone's welcome. You don't need to be an expert or an advanced programmer to join in. It's meant to be a fun project and an opportunity to learn. However, if you have an actual briefcase and some skills that would help make the finished project look impressive, you'll be especially warmly welcomed...&lt;/p&gt;
&lt;p&gt;You can just turn up and join in, but you can also contact Russel if you'd like to help plan the project.&lt;/p&gt;
&lt;p&gt;Don't forget to bring your Raspberry Pis with you.&lt;/p&gt;
&lt;p&gt;Apologies for some of the picture corruption in this video and a/v sync issues. We had a some first day glitches in our recording set up.&lt;/p&gt;
</summary></entry><entry><title>Education Day Introduction</title><link href="https://pyvideo.org/pycon-uk-2016/education-day-introduction.html" rel="alternate"></link><published>2016-09-20T00:00:00+00:00</published><updated>2016-09-20T00:00:00+00:00</updated><author><name>Daniele Marco Procida</name></author><id>tag:pyvideo.org,2016-09-20:pycon-uk-2016/education-day-introduction.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Danielle Procida&lt;/p&gt;
&lt;p&gt;Apologies for some of the picture corruption in this video and a/v sync issues. We had a some first day glitches in our recording set up.&lt;/p&gt;
</summary></entry><entry><title>If Only Everything Was Radioactive: Randomness and Computing</title><link href="https://pyvideo.org/pycon-uk-2016/if-only-everything-was-radioactive-randomness-and-computing.html" rel="alternate"></link><published>2016-09-20T00:00:00+00:00</published><updated>2016-09-20T00:00:00+00:00</updated><author><name>Cory Benfield</name></author><id>tag:pyvideo.org,2016-09-20:pycon-uk-2016/if-only-everything-was-radioactive-randomness-and-computing.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Cory Benfield&lt;/p&gt;
&lt;p&gt;Having access to randomness turns out to be remarkably important in computing. Whether you’re a scientist working on a simulation, someone trying to send secret messages, or just a person who wants to play a randomly generated video game level, having access to some kind of non-determinism is vital. But computers, as we all know, are thoroughly deterministic entities. So how can we get randomness?&lt;/p&gt;
&lt;p&gt;This talk will investigate how randomness works on computers. We’ll introduce you to random number generators, talk about the different kinds that are available and when to use them, and then talk about how to get access to random numbers from your Python code.&lt;/p&gt;
&lt;p&gt;Apologies for some of the picture corruption in this video and a/v sync issues. We had a some first day glitches in our recording set up.&lt;/p&gt;
</summary></entry><entry><title>An Arabish lesson: Introducing Django to the foreign world</title><link href="https://pyvideo.org/pycon-uk-2016/an-arabish-lesson-introducing-django-to-the-foreign-world.html" rel="alternate"></link><published>2016-09-18T00:00:00+00:00</published><updated>2016-09-18T00:00:00+00:00</updated><author><name>Bashar Al-Abdulhadi</name></author><id>tag:pyvideo.org,2016-09-18:pycon-uk-2016/an-arabish-lesson-introducing-django-to-the-foreign-world.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Bashar Al-Abdulhadi&lt;/p&gt;
&lt;p&gt;Sharing ideas why should developers work on translation/internationalization of their packages, why it's important for Django to spread when there are more languages for it and sharing some real world experience in this field.&lt;/p&gt;
</summary></entry><entry><title>An Introduction to Property Based Testing</title><link href="https://pyvideo.org/pycon-uk-2016/an-introduction-to-property-based-testing.html" rel="alternate"></link><published>2016-09-18T00:00:00+00:00</published><updated>2016-09-18T00:00:00+00:00</updated><author><name>Alex Chan</name></author><id>tag:pyvideo.org,2016-09-18:pycon-uk-2016/an-introduction-to-property-based-testing.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Alex Chan&lt;/p&gt;
</summary></entry><entry><title>Assessing performance of Support Vector Machine kernels</title><link href="https://pyvideo.org/pycon-uk-2016/assessing-performance-of-support-vector-machine-kernels.html" rel="alternate"></link><published>2016-09-18T00:00:00+00:00</published><updated>2016-09-18T00:00:00+00:00</updated><author><name>Tim Vivian-Griffiths</name></author><id>tag:pyvideo.org,2016-09-18:pycon-uk-2016/assessing-performance-of-support-vector-machine-kernels.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Tim Vivian-Griffiths&lt;/p&gt;
&lt;p&gt;Machine learning methods can present new possibilities for research topics looking at identifying genetic aetiologies of disease. However in complex disorders, such as those seen in psychiatric conditions, this can be especially hard given the loosely defined phenotype classifications of the diseases.&lt;/p&gt;
&lt;p&gt;In this study, I examine how well the different kernel methods for Support Vector Machines do when trying to perform a binary classification on phenotypes that have been simulated from genotyped genetic data in schizophrenia cases and controls. These simulated phenotypes were made from different aspects of the data, either the main-effects or pairwise interactions between different mutations. The advantage of using simulated phenotypes over real case/control status is that now, the aetiology of the binary outcomes is known. The results show that when interactions between 20% of the inputs features are included, any small contribution of these are detectable when using a Radial Basis Function (RBF) kernel in a Support Vector Machine when compared with the performance of a linear kernel.&lt;/p&gt;
&lt;p&gt;These results show that the different performances of the RBF and linear kernels can be used to detect the presence of pairwise interactions between features, even when the effect sizes of these are only marginally larger in size than the main-effects.&lt;/p&gt;
</summary></entry><entry><title>Attempting to Win at Blackjack</title><link href="https://pyvideo.org/pycon-uk-2016/attempting-to-win-at-blackjack.html" rel="alternate"></link><published>2016-09-18T00:00:00+00:00</published><updated>2016-09-18T00:00:00+00:00</updated><author><name>William Dudley</name></author><id>tag:pyvideo.org,2016-09-18:pycon-uk-2016/attempting-to-win-at-blackjack.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;William Dudley&lt;/p&gt;
&lt;p&gt;How risky should you be when playing blackjack? Without card-counting, is there any way you can 'beat the dealer'? Do riskier players win more than safer players? This talk addresses these questions using some Python code I wrote after just a few months of learning the language.&lt;/p&gt;
</summary></entry><entry><title>Behind the scenes: writing tutorials</title><link href="https://pyvideo.org/pycon-uk-2016/behind-the-scenes-writing-tutorials.html" rel="alternate"></link><published>2016-09-18T00:00:00+00:00</published><updated>2016-09-18T00:00:00+00:00</updated><author><name>Emmanuelle Delescolle</name></author><id>tag:pyvideo.org,2016-09-18:pycon-uk-2016/behind-the-scenes-writing-tutorials.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Emmanuelle Delescolle&lt;/p&gt;
&lt;p&gt;There are many ways to contribute to OpenSource, writing code is only one of them. Sadly writing code is often the only one which is recognized as valuable. Among the many ways you can contribute to OpenSource, one is writing tutorials, books, workshop or class lessons. In short different ways to spread knowledge. But what constitute the process of building such resources?&lt;/p&gt;
</summary></entry><entry><title>Cerberus - Data Validation for Humans</title><link href="https://pyvideo.org/pycon-uk-2016/cerberus-data-validation-for-humans.html" rel="alternate"></link><published>2016-09-18T00:00:00+00:00</published><updated>2016-09-18T00:00:00+00:00</updated><author><name>Nicola Iarocci</name></author><id>tag:pyvideo.org,2016-09-18:pycon-uk-2016/cerberus-data-validation-for-humans.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Nicola Iarocci&lt;/p&gt;
&lt;p&gt;Soon or later in their career, every programmer has to deal with data validation. Be it a web, desktop or mobile application, you just cannot avoid data validation. A robust, powerful yet easy-to-use data validation library can be a valuable tool in your toolset.&lt;/p&gt;
&lt;p&gt;Cerberus is a lightweight and extensible open source data validation library for Python. It provides type checking and other validation, transformation and normalisation rules out of the box and it is designed to be easily extensible and customized. During Beta, which has been around since 2012, Cerberus has been serving as the core validation system for the Eve REST Framework and other open source projects. Just recently the project has hit version 1.0, with many new features and enhancements added.&lt;/p&gt;
&lt;p&gt;In this talk I will introduce the project, illustrate some real-life use cases, and show how easily it can be extended and customised to meet the most diverse needs.&lt;/p&gt;
</summary></entry><entry><title>Chat bots: What is AI?</title><link href="https://pyvideo.org/pycon-uk-2016/chat-bots-what-is-ai.html" rel="alternate"></link><published>2016-09-18T00:00:00+00:00</published><updated>2016-09-18T00:00:00+00:00</updated><author><name>Chloe Parkes</name></author><id>tag:pyvideo.org,2016-09-18:pycon-uk-2016/chat-bots-what-is-ai.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Chloe Parkes&lt;/p&gt;
&lt;p&gt;Artificial intelligence is a widely growing field, with so many uses. I'd like to talk about what Artificial intelligence is, and how it's being used throughout the industry. The focus will be around chat bots, using ones within the customer service areas as the main examples as well as the well known Clever bot. I will also go through how they are written, which will be based on using Python, and AIML.&lt;/p&gt;
</summary></entry><entry><title>Children's Day Show and Tell</title><link href="https://pyvideo.org/pycon-uk-2016/childrens-day-show-and-tell.html" rel="alternate"></link><published>2016-09-18T00:00:00+00:00</published><updated>2016-09-18T00:00:00+00:00</updated><author><name>Nicholas Tollervey</name></author><id>tag:pyvideo.org,2016-09-18:pycon-uk-2016/childrens-day-show-and-tell.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Hosted by Nicholas Tollervey&lt;/p&gt;
</summary></entry><entry><title>Developing CS education, how can you help</title><link href="https://pyvideo.org/pycon-uk-2016/developing-cs-education-how-can-you-help.html" rel="alternate"></link><published>2016-09-18T00:00:00+00:00</published><updated>2016-09-18T00:00:00+00:00</updated><author><name>Laura Dixon</name></author><id>tag:pyvideo.org,2016-09-18:pycon-uk-2016/developing-cs-education-how-can-you-help.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Laura Dixon&lt;/p&gt;
&lt;p&gt;Many developers seem extremely keen to influence and help to improve CS education, however it is not always clear how best to help. I aim to highlight some misconceptions and provide some suggestions of how teachers and professionals can work together to achieve real results.&lt;/p&gt;
</summary></entry><entry><title>Distributed systems from scratch: lessons learned the hard way!</title><link href="https://pyvideo.org/pycon-uk-2016/distributed-systems-from-scratch-lessons-learned-the-hard-way.html" rel="alternate"></link><published>2016-09-18T00:00:00+00:00</published><updated>2016-09-18T00:00:00+00:00</updated><author><name>Becky Lewis</name></author><id>tag:pyvideo.org,2016-09-18:pycon-uk-2016/distributed-systems-from-scratch-lessons-learned-the-hard-way.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Becky Lewis&lt;/p&gt;
&lt;p&gt;The software industry as a whole is moving further towards integrating smaller systems together rather than building monoliths. This can be trickier than it appears, especially when the system needs to grow and evolve.&lt;/p&gt;
&lt;p&gt;This talk is meant to help highlight some of the pitfalls that can trip up teams who may be used to creating smaller systems or monoliths, take a look at deployment, scaling and monitoring and discuss issues that are still problematic for us here at EnergyDeck.&lt;/p&gt;
</summary></entry><entry><title>Easy solutions to hard problems</title><link href="https://pyvideo.org/pycon-uk-2016/easy-solutions-to-hard-problems.html" rel="alternate"></link><published>2016-09-18T00:00:00+00:00</published><updated>2016-09-18T00:00:00+00:00</updated><author><name>David R. MacIver</name></author><id>tag:pyvideo.org,2016-09-18:pycon-uk-2016/easy-solutions-to-hard-problems.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;David R. MacIver&lt;/p&gt;
&lt;p&gt;A lot of interesting problems are computationally hard: Travelling salesmen, colouring graphs, packing knapsack. These are all what's called &amp;quot;NP-hard&amp;quot;, which most people usually hear as meaning &amp;quot;intractable&amp;quot;.&lt;/p&gt;
&lt;p&gt;But actually we have good tools for solving specific NP hard problems, and most NP hard problems can be reduced to them. When you do this it turns out that although there are pathological cases, most individual instances of NP hard problems you're likely to encounter are quite tractable in practice.&lt;/p&gt;
&lt;p&gt;Amongst these tools are Mixed Integer Linear Programming solvers. There are high quality open source implementations (and amazing proprietary ones), and they're actually much easier to use than you might expect.&lt;/p&gt;
&lt;p&gt;We'll start with a quick overview of the idea of NP-hardness and introduce some common NP-hard problems. We'll then see how to transform these problems into forms we can feed to a solver. We'll finish with some practical examples of how this sort of thing can be useful in day to day problems.&lt;/p&gt;
</summary></entry><entry><title>Euler's Key to Cryptography</title><link href="https://pyvideo.org/pycon-uk-2016/eulers-key-to-cryptography.html" rel="alternate"></link><published>2016-09-18T00:00:00+00:00</published><updated>2016-09-18T00:00:00+00:00</updated><author><name>Timothy John Weaving</name></author><id>tag:pyvideo.org,2016-09-18:pycon-uk-2016/eulers-key-to-cryptography.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Timothy John Weaving&lt;/p&gt;
&lt;p&gt;Cryptography lies at the heart of the modern era; online transactions, authentication and secure network communications all rely on the encryption and decryption of data. This talk begins with a short introduction to RSA Public Key Cryptography and subsequently explores its mathematical foundations; touching upon Euler's totient function, the Extended Euclidean Algorithm and Modular Exponentiation.&lt;/p&gt;
</summary></entry><entry><title>From QA to UX Learning how to accommodate developers</title><link href="https://pyvideo.org/pycon-uk-2016/from-qa-to-ux-learning-how-to-accommodate-developers.html" rel="alternate"></link><published>2016-09-18T00:00:00+00:00</published><updated>2016-09-18T00:00:00+00:00</updated><author><name>Yulia Zozulya</name></author><id>tag:pyvideo.org,2016-09-18:pycon-uk-2016/from-qa-to-ux-learning-how-to-accommodate-developers.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Yulia Zozulya&lt;/p&gt;
&lt;p&gt;Developers make peculiar users. We’re very picky on what settings we want, and if we can tweak something we will. This whole idea of “default application settings” rarely applies to us. Knowing this, when making tools for developers, we often face many challenges and interesting scenarios on how to best define settings, what the defaults should be and how to make them easily discoverable. This session will provide some examples of what developers typically request in terms of features, how tricky it can be to balance between the variety of requested options and the aim for simplicity.&lt;/p&gt;
</summary></entry><entry><title>High School Pythonistas</title><link href="https://pyvideo.org/pycon-uk-2016/high-school-pythonistas.html" rel="alternate"></link><published>2016-09-18T00:00:00+00:00</published><updated>2016-09-18T00:00:00+00:00</updated><author><name>Jessica Upani</name></author><id>tag:pyvideo.org,2016-09-18:pycon-uk-2016/high-school-pythonistas.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Jessica Upani&lt;/p&gt;
&lt;p&gt;Everything from a lack of teachers to dysfunctional computer labs has led to a loss of interest in Junior Computer studies learners registering for the subject in their senior grades. These has led to yet a bigger problem which is what I want to address in my talk. PYNAM is short for Python Namibia. It is a Python programming society. We established PYNAM during the Feb 2015 PyCon Namibia conference. We primarily aim at bringing the Python Community in Namibia together and to promote Python to the young children through our school outreach programs. This year we are hosting a first ever programming day where the learners get to showcase their software and also raise money to help fix the computer lab at the school. My talk will report about the programs that the learners will create, the whole experience of developing the systems and organizing the event.&lt;/p&gt;
</summary></entry><entry><title>Introducing type hints challenges and lessons</title><link href="https://pyvideo.org/pycon-uk-2016/introducing-type-hints-challenges-and-lessons.html" rel="alternate"></link><published>2016-09-18T00:00:00+00:00</published><updated>2016-09-18T00:00:00+00:00</updated><author><name>Angela Santin</name></author><id>tag:pyvideo.org,2016-09-18:pycon-uk-2016/introducing-type-hints-challenges-and-lessons.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Angela Santin&lt;/p&gt;
&lt;p&gt;A large proportion of our codebase at Smarkets is written in Python, and we recently decided to introduce type hints in both Python 2 and Python 3 components.&lt;/p&gt;
&lt;p&gt;In this talk I will discuss the motivation behind this decision as well as the benefits and challenges we've encountered along the way.&lt;/p&gt;
</summary></entry><entry><title>Neurodiversity in Technology</title><link href="https://pyvideo.org/pycon-uk-2016/neurodiversity-in-technology.html" rel="alternate"></link><published>2016-09-18T00:00:00+00:00</published><updated>2016-09-18T00:00:00+00:00</updated><author><name>John Chandler</name></author><id>tag:pyvideo.org,2016-09-18:pycon-uk-2016/neurodiversity-in-technology.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;John Chandler&lt;/p&gt;
&lt;p&gt;We rightly talk a lot about diversity in technology these days. One area that seems to be neglected is to do with neurodiversity: the acknowledgement of neurological diversity as a result of Autism Spectrum, ADHD, Dyspraxia, Dyslexia, Dyscalculia, Tourette Syndrome, and more.&lt;/p&gt;
&lt;p&gt;&amp;quot;Neurodiversity may be every bit as crucial for the human race as biodiversity is for life in general. Who can say what form of wiring will prove best at any given moment? Cybernetics and computer culture, for example, may favor a somewhat autistic cast of mind.&amp;quot; - Harvey Blume&lt;/p&gt;
&lt;p&gt;I hope to provide an introduction to this large and complex subject, with particular reference to autism and its hidden contribution to computing. Disclaimer: I am considered neurotypical and am not an expert!&lt;/p&gt;
</summary></entry><entry><title>PiNet A project that was never intended to be</title><link href="https://pyvideo.org/pycon-uk-2016/pinet-a-project-that-was-never-intended-to-be.html" rel="alternate"></link><published>2016-09-18T00:00:00+00:00</published><updated>2016-09-18T00:00:00+00:00</updated><author><name>Andrew Mulholland</name></author><id>tag:pyvideo.org,2016-09-18:pycon-uk-2016/pinet-a-project-that-was-never-intended-to-be.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Andrew Mulholland | Sunday 12:00 | Assembly Room&lt;/p&gt;
&lt;p&gt;A deep dive into a project that was never intended to be. 3 years ago, I threw up a simple script to help a single school setup network booting/logins with Raspberry Pis, up onto Github. Since then, the open source project has grown to 4000+ lines of Python/Bash and is used right across the world, from a prison in Kenya to hundreds of schools across Europe and North America. The talk will include an overview of how the project accidentally came into existence, a bit on how to build software/documentation for educators (many complete beginners to Linux) and how this was a complete shock to me (a teenage programmer). I will end the talk with a dive into the underlying technologies and how Python and Bash can be made to effectively work together.&lt;/p&gt;
</summary></entry><entry><title>Prisoners, Cooperation and Spatial Structure</title><link href="https://pyvideo.org/pycon-uk-2016/prisoners-cooperation-and-spatial-structure.html" rel="alternate"></link><published>2016-09-18T00:00:00+00:00</published><updated>2016-09-18T00:00:00+00:00</updated><author><name>Nikoleta Evdokia Glynatsi</name></author><id>tag:pyvideo.org,2016-09-18:pycon-uk-2016/prisoners-cooperation-and-spatial-structure.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Nikoleta Evdokia Glynatsi&lt;/p&gt;
&lt;p&gt;The talk will be a brief introduction to Game Theory: the Prisoner's Dilemma, the tournaments that have been carried out since 1980 and the Axelrod library. Moreover, it will focus on my summer research which is on Spatial tournaments for the Iterated Prisoners Dilemma. It will mention some key points as to why spatial structure was chosen for further research.&lt;/p&gt;
&lt;p&gt;My contribution to the Axelrod library will be shown and how the results where analyzed and implemented.&lt;/p&gt;
</summary></entry><entry><title>Python and static types: Let's use mypy!</title><link href="https://pyvideo.org/pycon-uk-2016/python-and-static-types-lets-use-mypy.html" rel="alternate"></link><published>2016-09-18T00:00:00+00:00</published><updated>2016-09-18T00:00:00+00:00</updated><author><name>Daniel F Moisset</name></author><id>tag:pyvideo.org,2016-09-18:pycon-uk-2016/python-and-static-types-lets-use-mypy.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Daniel F Moisset&lt;/p&gt;
&lt;p&gt;Python has always been one of the most dynamic languages, and that's the most important factor in making it as flexible and expressive as it is. However, some recent efforts being done to also bring the world of static typing into Python, initially as a 3rd party project called mypy, and currently with some support in the core language in the form of PEP-484.&lt;/p&gt;
&lt;p&gt;Will this make Python a more boring, restrictive, and Java-like language? Is this practical given how dynamic python programs are? are the tools ready for production use? are they hard to use? What are the real benefits? My talk intends to give some background and answer these questions, although the title should be a spoiler about what the answers will be!&lt;/p&gt;
</summary></entry><entry><title>Python in Medicine: ventilator data</title><link href="https://pyvideo.org/pycon-uk-2016/python-in-medicine-ventilator-data.html" rel="alternate"></link><published>2016-09-18T00:00:00+00:00</published><updated>2016-09-18T00:00:00+00:00</updated><author><name>Gusztav Belteki</name></author><id>tag:pyvideo.org,2016-09-18:pycon-uk-2016/python-in-medicine-ventilator-data.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Gusztav Belteki&lt;/p&gt;
&lt;p&gt;Modern mechanical ventilators are computer-controlled devices which automatically adapt their functions in order to meet the patient's needs to achieve synchrony with the patient's own breathing efforts. During this process the ventilator device measures various physical parameters pressures, flows, volumes at a high sampling frequency e.g. 100 Hz. I am downloading data from the ventilators over long periods, several days, as comma separated values text files. These produces large datasets, that is, time series data with more than 10 million time stamps. I have been using Python and its add-on packages, IPython notebook, numpy, pandas, matplotlib and scipy, to handle, analyse, interpret and visualise these data. I have developed data analysis pipelines that create various reports about the mechanical ventilation and ventilation-patient interaction.&lt;/p&gt;
&lt;p&gt;In my talk I would like to present some of these workflows as IPython notebooks. I think anyone who needs to analyse csv or tab-delimited or similar data will find this interesting. I would like people to make people to realise that this is a much better and more reproducible way of analysing these kind of data than trying to use a spreadsheet program. In addition, I would like to show and discuss how I have got here as someone who has no programming background and learned Python in his free time while working in a full time job.&lt;/p&gt;
</summary></entry><entry><title>Queueing and Python: pip install ciw</title><link href="https://pyvideo.org/pycon-uk-2016/queueing-and-python-pip-install-ciw.html" rel="alternate"></link><published>2016-09-18T00:00:00+00:00</published><updated>2016-09-18T00:00:00+00:00</updated><author><name>Geraint Palmer</name></author><id>tag:pyvideo.org,2016-09-18:pycon-uk-2016/queueing-and-python-pip-install-ciw.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Geraint Palmer&lt;/p&gt;
&lt;p&gt;Queueing systems dominate our day-to-day life: for example supermarkets, airports, traffic systems, and call centres, naming only a few obvious examples. A better understanding of these queues can help businesses and service providers optimise these systems, improving efficiency, profit and satisfaction levels. Sometimes some unintuitive behaviour can arise, and so modelling and investigating queues mathematically has become very popular and important. One prominent method of doing so is by using computer simulation.&lt;/p&gt;
&lt;p&gt;This talk will present Ciw, a new Python library for simulating open queueing networks. This talk will demonstrate using Ciw's simple interface to model and simulate a queueing system, and an overview of it's many features will also be given.&lt;/p&gt;
&lt;p&gt;The library is currently being used in two academic settings: one theoretical project that investigates queueing networks that deadlock, and another practical project in which patient flows are modelled in an ophthalmology clinic. Synopses of these projects and their results will be discussed.&lt;/p&gt;
</summary></entry><entry><title>Saturday Lightening Talks</title><link href="https://pyvideo.org/pycon-uk-2016/saturday-lightening-talks.html" rel="alternate"></link><published>2016-09-18T00:00:00+00:00</published><updated>2016-09-18T00:00:00+00:00</updated><author><name>Zeth Green</name></author><id>tag:pyvideo.org,2016-09-18:pycon-uk-2016/saturday-lightening-talks.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Hosted by Zeth Green&lt;/p&gt;
</summary><category term="lightning Talks"></category></entry><entry><title>Scripting across hosts with Chopsticks</title><link href="https://pyvideo.org/pycon-uk-2016/scripting-across-hosts-with-chopsticks.html" rel="alternate"></link><published>2016-09-18T00:00:00+00:00</published><updated>2016-09-18T00:00:00+00:00</updated><author><name>Daniel Pope</name></author><id>tag:pyvideo.org,2016-09-18:pycon-uk-2016/scripting-across-hosts-with-chopsticks.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Daniel Pope&lt;/p&gt;
&lt;p&gt;Chopsticks lets your import and run Python code on remote Unix hosts over SSH. It works with no code deployment and no preinstalled software other than Python and SSH. It has built-in support for running code on many hosts in parallel.&lt;/p&gt;
&lt;p&gt;Unlike Fabric or Ansible, Chopsticks not opinionated about the structure of the code you run, allowing it to be used for orchestration, auditing, diagnostics, monitoring probes, and more.&lt;/p&gt;
&lt;p&gt;Also unlike these, Chopsticks is not wedded to SSH, so it can transparently work on Docker containers over pipes, local subprocesses - and in future, sudo?&lt;/p&gt;
&lt;p&gt;Daniel will demonstrate Chopsticks in action, walk through the API, and explain the three clever tricks that Chopsticks is built on.&lt;/p&gt;
</summary><category term="Chopsticks"></category></entry><entry><title>Simulating a CPU with Python</title><link href="https://pyvideo.org/pycon-uk-2016/simulating-a-cpu-with-python.html" rel="alternate"></link><published>2016-09-18T00:00:00+00:00</published><updated>2016-09-18T00:00:00+00:00</updated><author><name>Sarah Mount</name></author><id>tag:pyvideo.org,2016-09-18:pycon-uk-2016/simulating-a-cpu-with-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Sarah Mount&lt;/p&gt;
&lt;p&gt;Simulating a CPU with Python or: surprising programs you might have thought were better written in C&lt;/p&gt;
&lt;p&gt;Can you imagine writing a complete functional simulator for a CPU architecture in Python? This talk describes the Revelation simulator for the Adapteva Epiphany architecture. The simulator is written in RPython, the restricted Python that underlies the PyPy interpreter, and uses Pydgin, a framework for writing CPU simulators . Revelation is simple to understand (because Python) but also fast (thanks to the automatically generated just-in-time interpreter provided by the RPython toolchain). By the end of this talk you will be convinced that functional simulators for complex CPU architectures can actually be pretty simple to implement.&lt;/p&gt;
</summary></entry><entry><title>Speech to Text</title><link href="https://pyvideo.org/pycon-uk-2016/speech-to-text.html" rel="alternate"></link><published>2016-09-18T00:00:00+00:00</published><updated>2016-09-18T00:00:00+00:00</updated><author><name>Sheryll</name></author><id>tag:pyvideo.org,2016-09-18:pycon-uk-2016/speech-to-text.html</id><summary type="html"></summary></entry><entry><title>Sunday 18th Introduction</title><link href="https://pyvideo.org/pycon-uk-2016/sunday-18th-introduction.html" rel="alternate"></link><published>2016-09-18T00:00:00+00:00</published><updated>2016-09-18T00:00:00+00:00</updated><author><name>Daniele Marco Procida</name></author><id>tag:pyvideo.org,2016-09-18:pycon-uk-2016/sunday-18th-introduction.html</id><summary type="html"></summary></entry><entry><title>Taking control of your Bluetooth devices</title><link href="https://pyvideo.org/pycon-uk-2016/taking-control-of-your-bluetooth-devices.html" rel="alternate"></link><published>2016-09-18T00:00:00+00:00</published><updated>2016-09-18T00:00:00+00:00</updated><author><name>Helen Sherwood-Taylor</name></author><id>tag:pyvideo.org,2016-09-18:pycon-uk-2016/taking-control-of-your-bluetooth-devices.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Helen Sherwood-Taylor&lt;/p&gt;
&lt;p&gt;Bluetooth Low Energy (BTLE) is a part of the Bluetooth standard aimed at bringing wireless technology to low power devices, and it's getting into everything - lightbulbs, robots, personal health and fitness devices and plenty more. However, these devices don't always come with a nice developer friendly API - often all you get is a phone app.&lt;/p&gt;
&lt;p&gt;We will investigate one of these devices and see how we can decipher some meaning from the conversations it has with its app. Armed with that information, we can go into Python and start writing code to control our device. Along the way we'll looking at the protocols and properties used in BTLE interactions and see how the same principles can be applied to a multitude of devices.&lt;/p&gt;
</summary></entry><entry><title>Type checking, Whose responsibility is it?</title><link href="https://pyvideo.org/pycon-uk-2016/type-checking-whose-responsibility-is-it.html" rel="alternate"></link><published>2016-09-18T00:00:00+00:00</published><updated>2016-09-18T00:00:00+00:00</updated><author><name>Samathy Barratt</name></author><id>tag:pyvideo.org,2016-09-18:pycon-uk-2016/type-checking-whose-responsibility-is-it.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Samathy Barratt&lt;/p&gt;
&lt;p&gt;In a scenario where one is writing a function that will be used by another programmer who may not be able to see that function (i.e is using a module, or other abstracted calling method) whose responsibility is it to ensure the correct type of the arguments, the caller or the callee?&lt;/p&gt;
&lt;p&gt;This talk discusses ideas around which way is best and why in the hope to help you increase performance and reduce errors.&lt;/p&gt;
</summary></entry><entry><title>Using Machine Learning to solve a classification problem with scikit-learn</title><link href="https://pyvideo.org/pycon-uk-2016/using-machine-learning-to-solve-a-classification-problem-with-scikit-learn.html" rel="alternate"></link><published>2016-09-18T00:00:00+00:00</published><updated>2016-09-18T00:00:00+00:00</updated><author><name>Ian Ozsvald</name></author><id>tag:pyvideo.org,2016-09-18:pycon-uk-2016/using-machine-learning-to-solve-a-classification-problem-with-scikit-learn.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Ian Ozsvald&lt;/p&gt;
&lt;p&gt;This talk is aimed at developers who want to use machine learning to solve their own binary (2 class) classification task. No prior machine learning or math experience is required. This talk will cover feature engineering (including a robust solution to 'the problem of null data'), predicting the right class with a Random Forest, cross-validating to avoid over-fitting, diagnosing problems in the classifier and approaches to deploying the classifier in the real world. My goal is to provide you with a process that you can take back to the office to try with your own data. It'll be backed by reproducible working code.&lt;/p&gt;
</summary></entry><entry><title>Why do kids need to code and how can we help?</title><link href="https://pyvideo.org/pycon-uk-2016/why-do-kids-need-to-code-and-how-can-we-help.html" rel="alternate"></link><published>2016-09-18T00:00:00+00:00</published><updated>2016-09-18T00:00:00+00:00</updated><author><name>Cat Lamin</name></author><id>tag:pyvideo.org,2016-09-18:pycon-uk-2016/why-do-kids-need-to-code-and-how-can-we-help.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Cat Lamin&lt;/p&gt;
&lt;p&gt;I want to talk about the issues facing teachers today with the introduction of the new computing curriculum. I want to talk about my own experiences in the primary classroom and how people in the Python community can help and support teachers to achieve the best they can.&lt;/p&gt;
</summary></entry><entry><title>10 years 7 deployments and a lesson</title><link href="https://pyvideo.org/pycon-uk-2016/10-years-7-deployments-and-a-lesson.html" rel="alternate"></link><published>2016-09-17T00:00:00+00:00</published><updated>2016-09-17T00:00:00+00:00</updated><author><name>Daniele Marco Procida</name></author><id>tag:pyvideo.org,2016-09-17:pycon-uk-2016/10-years-7-deployments-and-a-lesson.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Daniele Marco Procida&lt;/p&gt;
&lt;p&gt;Some Python deployment tales of horror and madness, and a lesson for us from the world of PHP.&lt;/p&gt;
</summary></entry><entry><title>5 mistakes you will make building a Python Software House</title><link href="https://pyvideo.org/pycon-uk-2016/5-mistakes-you-will-make-building-a-python-software-house.html" rel="alternate"></link><published>2016-09-17T00:00:00+00:00</published><updated>2016-09-17T00:00:00+00:00</updated><author><name>Maciej Dziergwa</name></author><id>tag:pyvideo.org,2016-09-17:pycon-uk-2016/5-mistakes-you-will-make-building-a-python-software-house.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Maciej Dziergwa&lt;/p&gt;
&lt;p&gt;In 2005 I became keen on programming in Python, but at the time there were no job opportunities for Python developers in Poland.&lt;/p&gt;
&lt;p&gt;That’s why I decided to start my own Python Software House, and today I employ more than 200 people, including over 100 Python developers. Over 11 years of experience in company leadership allows me to see this career path from a wider perspective.&lt;/p&gt;
&lt;p&gt;I realize now, how easy it is to make wrong decisions, underestimate threats or undervalue opportunities.&lt;/p&gt;
&lt;p&gt;I will gladly share some lessons learnt from working with more than 100 clients, dozens of Python frameworks, and last but not least, a great number of talented developers.&lt;/p&gt;
</summary></entry><entry><title>Declarative user interfaces in Python using ENAML</title><link href="https://pyvideo.org/pycon-uk-2016/declarative-user-interfaces-in-python-using-enaml.html" rel="alternate"></link><published>2016-09-17T00:00:00+00:00</published><updated>2016-09-17T00:00:00+00:00</updated><author><name>Tom Stordy-Allison</name></author><id>tag:pyvideo.org,2016-09-17:pycon-uk-2016/declarative-user-interfaces-in-python-using-enaml.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Tom Stordy-Allison&lt;/p&gt;
&lt;p&gt;Enaml is an open source library for building rich user interfaces utilizing a declarative extension to the Python language grammar. The Enaml DSL is a strict superset of Python allowing developers to declaratively define dynamic user interface hierarchies. Notable features of the framework include: automatic data binding dependency analysis, a cassowary constraint based layout system, and support for multiple model change notification systems (and asynchronous bindings).&lt;/p&gt;
&lt;p&gt;Enaml has been used for building production Python applications at J.P. Morgan for several years. This talk will provide a brief introduction to the language, cover some of the notable features, and also look at some of the features that J.P. Morgan have been adding to the language.&lt;/p&gt;
</summary></entry><entry><title>Django CMS in the real time web</title><link href="https://pyvideo.org/pycon-uk-2016/django-cms-in-the-real-time-web.html" rel="alternate"></link><published>2016-09-17T00:00:00+00:00</published><updated>2016-09-17T00:00:00+00:00</updated><author><name>Iacopo Spalletti</name></author><id>tag:pyvideo.org,2016-09-17:pycon-uk-2016/django-cms-in-the-real-time-web.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Django CMS in the real time web: how to mix CMS, websockets, REST for a fully real time experience&lt;/p&gt;
&lt;p&gt;Lacopo Spalletti&lt;/p&gt;
&lt;p&gt;CMS websites are usually kind of boring: get a request, pick data from storage, stamp them on a template and return to the client. This is less and less suitable for the current web experience, and more advanced and flexible architecture are needed: what if we mix the best CMS for Django with the real time web technologies? We'll end up with the best of both worlds: this talk will show how to use a few applications and techniques to achieve this goal. I'll show how to integrate django CMS with django channels, a REST API and an Angular JS client in a fully featured SPA managed by django CMS.&lt;/p&gt;
</summary></entry><entry><title>Django REST framework</title><link href="https://pyvideo.org/pycon-uk-2016/django-rest-framework.html" rel="alternate"></link><published>2016-09-17T00:00:00+00:00</published><updated>2016-09-17T00:00:00+00:00</updated><author><name>Tom Christie</name></author><id>tag:pyvideo.org,2016-09-17:pycon-uk-2016/django-rest-framework.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Django REST framework: Schemas, Hypermedia &amp;amp; Client libraries.&lt;/p&gt;
&lt;p&gt;Tom Christie&lt;/p&gt;
&lt;p&gt;An introduction into using the very latest features of Django REST framework.&lt;/p&gt;
&lt;p&gt;This talk will demonstrate creating schema-driven &amp;amp; hypermedia-driven APIs. We'll look how you can interacting with these APIs using a dynamic client library, and discuss the design considerations of taking an interface-first approach to API design.&lt;/p&gt;
</summary></entry><entry><title>Folklore and fantasy in the information age</title><link href="https://pyvideo.org/pycon-uk-2016/folklore-and-fantasy-in-the-information-age.html" rel="alternate"></link><published>2016-09-17T00:00:00+00:00</published><updated>2016-09-17T00:00:00+00:00</updated><author><name>Gail Ollis</name></author><id>tag:pyvideo.org,2016-09-17:pycon-uk-2016/folklore-and-fantasy-in-the-information-age.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Gail Ollis&lt;/p&gt;
&lt;p&gt;Software development is not easy.&lt;/p&gt;
&lt;p&gt;As grown-ups we know better than to believe that difficult things can be achieved by a simple wave of a magic wand, yet faith persists that this new idea, that new tool, will make all the difference.&lt;/p&gt;
&lt;p&gt;Meanwhile for the hard-bitten cynics it is all the emperor's new clothes. I invite you to join me in a more constructive realm between belief and cynicism, where we can embrace the power of stories, listen with an open mind, but not be bewitched by the expectation of a fairy-tale ending.&lt;/p&gt;
</summary></entry><entry><title>Friday Lightening Talks</title><link href="https://pyvideo.org/pycon-uk-2016/friday-lightening-talks.html" rel="alternate"></link><published>2016-09-17T00:00:00+00:00</published><updated>2016-09-17T00:00:00+00:00</updated><author><name>Zeth Green</name></author><id>tag:pyvideo.org,2016-09-17:pycon-uk-2016/friday-lightening-talks.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Lightening talks hosted by Zeth Green&lt;/p&gt;
</summary><category term="lightning Talks"></category></entry><entry><title>I love being Pythonic</title><link href="https://pyvideo.org/pycon-uk-2016/i-love-being-pythonic.html" rel="alternate"></link><published>2016-09-17T00:00:00+00:00</published><updated>2016-09-17T00:00:00+00:00</updated><author><name>Busra Koken</name></author><id>tag:pyvideo.org,2016-09-17:pycon-uk-2016/i-love-being-pythonic.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Busra Koken&lt;/p&gt;
&lt;p&gt;Python seems like an executable pseudo code. It has unique strengths and charms that can be hard to grasp. Programmers familiar with other languages may try to write Python as if it’s C++, Java, or whatever they know best. It’s important for everyone to know—the Pythonic—way to do the most common things in Python. Python philosophy suggests to be explicit, to choose simple over complex, and to maximise readability.&lt;/p&gt;
&lt;p&gt;In this talk, I am going to share my story of switching from a C-family language to Python. What Pythonic thinking means here is that understanding python implementations, dynamic language structure, supported programming styles, data structures and functional extensions. The more you learn the strength of Python language the more you enjoy coding.&lt;/p&gt;
</summary></entry><entry><title>Introducing MetaClasses</title><link href="https://pyvideo.org/pycon-uk-2016/introducing-metaclasses.html" rel="alternate"></link><published>2016-09-17T00:00:00+00:00</published><updated>2016-09-17T00:00:00+00:00</updated><author><name>Amit Kumar</name></author><id>tag:pyvideo.org,2016-09-17:pycon-uk-2016/introducing-metaclasses.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk is based on the metaclasses in Python. The secret sauce which create classes.&lt;/p&gt;
</summary></entry><entry><title>Lessons learned from PHP</title><link href="https://pyvideo.org/pycon-uk-2016/lessons-learned-from-php.html" rel="alternate"></link><published>2016-09-17T00:00:00+00:00</published><updated>2016-09-17T00:00:00+00:00</updated><author><name>Jenny Wong</name></author><id>tag:pyvideo.org,2016-09-17:pycon-uk-2016/lessons-learned-from-php.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Jenny Wong&lt;/p&gt;
&lt;p&gt;PHP can be called Python’s sibling in many ways. Many developers switch from PHP to Python and vice versa. This talk will be looking at the communities, their trials and tribulations and ultimately what can be learn from each other.&lt;/p&gt;
</summary></entry><entry><title>Life as the Sourcerer's Apprentice</title><link href="https://pyvideo.org/pycon-uk-2016/life-as-the-sourcerers-apprentice.html" rel="alternate"></link><published>2016-09-17T00:00:00+00:00</published><updated>2016-09-17T00:00:00+00:00</updated><author><name>Eva Gonzalez</name></author><id>tag:pyvideo.org,2016-09-17:pycon-uk-2016/life-as-the-sourcerers-apprentice.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Eva Gonzalez&lt;/p&gt;
&lt;p&gt;A quick (and by no means complete) guide to what recruiters look for in CV's and the hiring process.&lt;/p&gt;
</summary></entry><entry><title>Micro Python, the Internet of Things and the £3 device</title><link href="https://pyvideo.org/pycon-uk-2016/micro-python-the-internet-of-things-and-the-ps3-device.html" rel="alternate"></link><published>2016-09-17T00:00:00+00:00</published><updated>2016-09-17T00:00:00+00:00</updated><author><name>Kirk Northrop</name></author><id>tag:pyvideo.org,2016-09-17:pycon-uk-2016/micro-python-the-internet-of-things-and-the-ps3-device.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Presentation by: Kirk Northrop&lt;/p&gt;
&lt;p&gt;The Internet of Things has been talked about hugely over the last ten years, but with the rise of the Raspberry Pi and Arduino, it is suddenly starting to become real. Nowadays, you can build an entire, WiFi connected device for £3 including the batteries and using Micro Python.&lt;/p&gt;
</summary><category term="micro python"></category></entry><entry><title>Python Cat Flaps - creating smart devices with Python</title><link href="https://pyvideo.org/pycon-uk-2016/python-cat-flaps-creating-smart-devices-with-python.html" rel="alternate"></link><published>2016-09-17T00:00:00+00:00</published><updated>2016-09-17T00:00:00+00:00</updated><author><name>Dr Andrew Robinson</name></author><id>tag:pyvideo.org,2016-09-17:pycon-uk-2016/python-cat-flaps-creating-smart-devices-with-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Dr Andrew Robinson&lt;/p&gt;
&lt;p&gt;Want to run Python on your toaster, build a smart cat flap, or monitor a squirrel in a tree? With a live visualisation of data collected from the streets of Cardiff learn how to use Python to build a wireless smart gadget. Using the ThingsNetwork in Manchester as a case study of creating a smart, connected city and a wildlife monitoring project in the rural environment, the talk will consider radio communications and coding for low power. Through practical demonstrations, discover the challenges of literally running Python in the field!&lt;/p&gt;
</summary></entry><entry><title>Python in Education</title><link href="https://pyvideo.org/pycon-uk-2016/python-in-education.html" rel="alternate"></link><published>2016-09-17T00:00:00+00:00</published><updated>2016-09-17T00:00:00+00:00</updated><author><name>Nicholas Tollervey</name></author><id>tag:pyvideo.org,2016-09-17:pycon-uk-2016/python-in-education.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Nicholas Tollervey&lt;/p&gt;
&lt;p&gt;The Python community spend a lot of time, energy and effort in making our language a joy to learn and teach. This short talk gives an overview of some of the ways the UK's Python community have been promoting education and explains how you can get involved yourself.&lt;/p&gt;
</summary></entry><entry><title>Python, Locales and Writing Systems</title><link href="https://pyvideo.org/pycon-uk-2016/python-locales-and-writing-systems.html" rel="alternate"></link><published>2016-09-17T00:00:00+00:00</published><updated>2016-09-17T00:00:00+00:00</updated><author><name>Rae Knowler</name></author><id>tag:pyvideo.org,2016-09-17:pycon-uk-2016/python-locales-and-writing-systems.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Rae Knowler&lt;/p&gt;
&lt;p&gt;Python 3 removes a lot of the confusion around Unicode handling in Python, but that by no means fixes everything. Different locales and writing systems have unique behaviours that can trip you up. Here's some of the worst ones and how to handle them correctly.&lt;/p&gt;
</summary></entry><entry><title>Saturday 17th Introduction</title><link href="https://pyvideo.org/pycon-uk-2016/saturday-17th-introduction.html" rel="alternate"></link><published>2016-09-17T00:00:00+00:00</published><updated>2016-09-17T00:00:00+00:00</updated><author><name>Daniele Marco Procida</name></author><id>tag:pyvideo.org,2016-09-17:pycon-uk-2016/saturday-17th-introduction.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Danielle Procida introduces the second day.&lt;/p&gt;
</summary></entry><entry><title>Sponsor Session, Bank of America</title><link href="https://pyvideo.org/pycon-uk-2016/sponsor-session-bank-of-america.html" rel="alternate"></link><published>2016-09-17T00:00:00+00:00</published><updated>2016-09-17T00:00:00+00:00</updated><author><name>Daniele Marco Procida</name></author><id>tag:pyvideo.org,2016-09-17:pycon-uk-2016/sponsor-session-bank-of-america.html</id><summary type="html"></summary></entry><entry><title>Taking the robot out of Mr Robot</title><link href="https://pyvideo.org/pycon-uk-2016/taking-the-robot-out-of-mr-robot.html" rel="alternate"></link><published>2016-09-17T00:00:00+00:00</published><updated>2016-09-17T00:00:00+00:00</updated><author><name>Kerstin Kollmann</name></author><id>tag:pyvideo.org,2016-09-17:pycon-uk-2016/taking-the-robot-out-of-mr-robot.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Taking the robot out of Mr. Robot or: Why tech sucks &amp;amp; how you can help to make it better&lt;/p&gt;
&lt;p&gt;Kerstin Kollmann&lt;/p&gt;
&lt;p&gt;Not everything about the tech industry is as &amp;quot;cool&amp;quot; as it is sometimes made out to be – by the media, representations in fiction or indeed members of the tech community themselves – though not everyone is equally aware of how or why it is more difficult &amp;quot;to tech&amp;quot; for some than it is for others, regardless of innate talent or skills.&lt;/p&gt;
&lt;p&gt;In my talk I want to point out some of the barriers which make it harder or less fun for some of us to participate and how everyone can contribute to making tech a little more welcoming for everyone else. (&amp;amp; I might use examples from your new favourite fictional texts while I'm at it.)&lt;/p&gt;
</summary></entry><entry><title>Tech interviews that don't suck</title><link href="https://pyvideo.org/pycon-uk-2016/tech-interviews-that-dont-suck.html" rel="alternate"></link><published>2016-09-17T00:00:00+00:00</published><updated>2016-09-17T00:00:00+00:00</updated><author><name>Marc Tamlyn</name></author><id>tag:pyvideo.org,2016-09-17:pycon-uk-2016/tech-interviews-that-dont-suck.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;For many interviewees and interviewers, hiring engineers is a difficult and stressful process. It's widely regarded that inverting a binary tree on a whiteboard is not a great approach to finding the best people to work with, but what is?&lt;/p&gt;
&lt;p&gt;I recently had the opportunity to design an interview process from scratch. We will look at the interview process I created, its strengths, weaknesses and inspiration.&lt;/p&gt;
</summary></entry><entry><title>The state of PyPy</title><link href="https://pyvideo.org/pycon-uk-2016/the-state-of-pypy.html" rel="alternate"></link><published>2016-09-17T00:00:00+00:00</published><updated>2016-09-17T00:00:00+00:00</updated><author><name>Ronan Lamy</name></author><id>tag:pyvideo.org,2016-09-17:pycon-uk-2016/the-state-of-pypy.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The state of PyPy&lt;/p&gt;
&lt;p&gt;Ronan Lamy&lt;/p&gt;
&lt;p&gt;PyPy is a fast and highly-compatible alternative implementation of Python. Its just-in-time compiler, backed by a state-of-the art garbage collector, allow it to run pure-Python(2) code on average 7 times faster than CPython 2.7, the reference implementation.&lt;/p&gt;
&lt;p&gt;This presentation will give a tour of PyPy's features with special emphasis on recent developments:&lt;/p&gt;
&lt;p&gt;cpyext, PyPy's emulation layer for CPython's C API, has been overhauled in order to soon allow full compatibility with all C extensions.
Python 3 support is steadily improving with a recent 3.3-compatible release and development being started on a 3.5 version.&lt;/p&gt;
</summary></entry><entry><title>Timezones: A tale of (more than) two cities</title><link href="https://pyvideo.org/pycon-uk-2016/timezones-a-tale-of-more-than-two-cities.html" rel="alternate"></link><published>2016-09-17T00:00:00+00:00</published><updated>2016-09-17T00:00:00+00:00</updated><author><name>Stephanos Papanikolopoulos</name></author><id>tag:pyvideo.org,2016-09-17:pycon-uk-2016/timezones-a-tale-of-more-than-two-cities.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Stephanos Papanikolopoulos&lt;/p&gt;
&lt;p&gt;Sooner or later every developer has to deal with timezones. You've probably heard of GMT, UTC, apparent solar time, leap seconds, the International Meridian Conference, POSIX time. But what are they exactly? What problem did we solve? What problems were introduced by the solution? Why is it harder to subtract two datetimes than subtracting two numbers?&lt;/p&gt;
</summary></entry><entry><title>Using Python for National Cipher Challenge</title><link href="https://pyvideo.org/pycon-uk-2016/using-python-for-national-cipher-challenge.html" rel="alternate"></link><published>2016-09-17T00:00:00+00:00</published><updated>2016-09-17T00:00:00+00:00</updated><author><name>Thomas Campbell</name></author><id>tag:pyvideo.org,2016-09-17:pycon-uk-2016/using-python-for-national-cipher-challenge.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Thomas Campbell&lt;/p&gt;
&lt;p&gt;The National Cipher Challenge is run by The University of Southampton every year and invites people to break ciphers of varying difficulty, from simple Caesar ciphers to Enigma and beyond. In this talk, I’ll describe how I used python to tackle the 2015 challenge and demonstrate some of the code I used in doing so.&lt;/p&gt;
</summary></entry><entry><title>Where am I? What am I doing here?</title><link href="https://pyvideo.org/pycon-uk-2016/where-am-i-what-am-i-doing-here.html" rel="alternate"></link><published>2016-09-17T00:00:00+00:00</published><updated>2016-09-17T00:00:00+00:00</updated><author><name>Stephen Simmons</name></author><id>tag:pyvideo.org,2016-09-17:pycon-uk-2016/where-am-i-what-am-i-doing-here.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Where am I? What am I doing here?&amp;quot; -- Motion detection and sensor fusion on wearables and Micro:Bit with Python&lt;/p&gt;
&lt;p&gt;Stephen Simmons&lt;/p&gt;
&lt;p&gt;Accelerometers, gyroscopes and magnetometers are suddenly everywhere -- in phones, wearables, and even in the BBC micro:bit. They are cheap, ultra-low power, and often can be read remotely using Bluetooth Low Energy. In this talk, learn how Python can help you:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;collect raw multi-axis data in real time;&lt;/li&gt;
&lt;li&gt;combine them optimally into a useful representation for analysis;&lt;/li&gt;
&lt;li&gt;deal with noisy and missing data with Kalman filters; and&lt;/li&gt;
&lt;li&gt;extract high-level gesture information.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The talk will include examples using MetaWear CPRO wearables and the BBC micro:bit&lt;/p&gt;
</summary></entry><entry><title>Friday 16th September, Introduction</title><link href="https://pyvideo.org/pycon-uk-2016/friday-16th-september-introduction.html" rel="alternate"></link><published>2016-09-16T00:00:00+00:00</published><updated>2016-09-16T00:00:00+00:00</updated><author><name>Zeth Green</name></author><id>tag:pyvideo.org,2016-09-16:pycon-uk-2016/friday-16th-september-introduction.html</id><summary type="html"></summary></entry><entry><title>Introduction to the Education Track</title><link href="https://pyvideo.org/pycon-uk-2016/introduction-to-the-education-track.html" rel="alternate"></link><published>2016-09-16T00:00:00+00:00</published><updated>2016-09-16T00:00:00+00:00</updated><author><name>Nicholas Tollervey</name></author><id>tag:pyvideo.org,2016-09-16:pycon-uk-2016/introduction-to-the-education-track.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Nicholas Tollervey and Carrie-Ann Philbin.&lt;/p&gt;
</summary></entry><entry><title>Python and the Glories of the UNIX Tradition</title><link href="https://pyvideo.org/pycon-uk-2016/python-and-the-glories-of-the-unix-tradition.html" rel="alternate"></link><published>2016-09-16T00:00:00+00:00</published><updated>2016-09-16T00:00:00+00:00</updated><author><name>Brandon Rhodes</name></author><id>tag:pyvideo.org,2016-09-16:pycon-uk-2016/python-and-the-glories-of-the-unix-tradition.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Keynote presentation by: Brandon Rhodes&lt;/p&gt;
&lt;p&gt;In 1991 the newly-released Python language sallied forth into a profession already riven with rivalry between competing technical traditions. Learn about the stand that Python took on one side of a long-running argument, about the technology ideas it shares with UNIX, and about the important lessons from computing history that Python today delivers to programmers around the world.&lt;/p&gt;
</summary><category term="keynote"></category></entry><entry><title>Transforming the government’s Digital Marketplace from portal to platform</title><link href="https://pyvideo.org/pycon-uk-2016/transforming-the-governments-digital-marketplace-from-portal-to-platform.html" rel="alternate"></link><published>2016-09-16T00:00:00+00:00</published><updated>2016-09-16T00:00:00+00:00</updated><author><name>Kevin Keenoy</name></author><id>tag:pyvideo.org,2016-09-16:pycon-uk-2016/transforming-the-governments-digital-marketplace-from-portal-to-platform.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Presentation by: Kevin Keenoy&lt;/p&gt;
&lt;p&gt;The public sector can use the Digital Marketplace (&lt;a class="reference external" href="https://www.digitalmarketplace.service.gov.uk/"&gt;https://www.digitalmarketplace.service.gov.uk/&lt;/a&gt;) to find people and technology for digital projects. Over £1,000,000,000 has been spent on cloud services by government through the G-Cloud framework since it launched in 2012, over half of that spend being with SMEs rather than big systems integrators.&lt;/p&gt;
&lt;p&gt;Back in 2014 the Digital Marketplace was a single Grails application (written in Groovy, running on the JVM) that provided a simple searchable catalogue of cloud services. Applications from suppliers to provide their services were handled externally by two separate systems run by the Crown Commercial Service.&lt;/p&gt;
&lt;p&gt;Since then we have rebuilt the Digital Marketplace from scratch in Python as a RESTful system of Flask applications and expanded its functionality to supplant these external systems. It is now on its way to becoming a general-purpose platform for handling suppliers’ applications to sell their services to government.&lt;/p&gt;
&lt;p&gt;This talk will explain how the the architecture of the system has evolved over a series of iterations of supplier application processes, and also delve deeper into how we drive both the frontend applications and data validation from a separate “content repository” of YAML files that can be maintained by content designers rather than developers.&lt;/p&gt;
</summary></entry></feed>