<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Tue, 30 Oct 2012 00:00:00 +0000</lastBuildDate><item><title>Funktionale Programmierung mit Python</title><link>https://pyvideo.org/pycon-de-2012/funktionale-programmierung-mit-python.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;In den letzten Jahren hat die funktionale Programmierung wieder mehr
Aufmerksamkeit erhalten. Das Vorurteil nur für akademische Nutzer
interessant zu sein hat sich stark abgeschwächt. Haskell, Erlang und F#
sind funktionale Programmiersprachen, die verstärkt für praktische
Zwecke zum Einsatz kommen.&lt;/p&gt;
&lt;p&gt;Python unterstütz mehrere Programmierparadigmen. Neben der prozeduralen
und objektorientierten unterstütz es auch wichtige Konzepte der
funktionalen Programmierung. Der Vortrag zeigt wie sich diese Merkmale
wie Funktionen als Objekte erster Klasse, Funktionsabschlüsse
(Closures), Funktionen ohne Seiteneffekte, Currying, verzögerte
Auswertung, Vermeidung veränderlicher Datenstrukturen und Einsatz von
Iteratoren, Generator und Comprehensions anstatt von Schleifen nutzen
lassen. Beispiele verdeutlichen die Vor- und Nachteile des funktionellem
Ansatzes für verschiedene Aufgaben.&lt;/p&gt;
&lt;p&gt;Der Aufbau eines Programms mit funktionalen Ansatz kann sich stark von
dem eines objektorientierten unterscheiden. Beispiele zeigen wie mit
Python Teile eines Programms die Vorteile der funktionalen
Programmierung nutzen können und sich schrittweise funktionale
Prinzipien in objektorientierte Programme einbeziehen lassen.&lt;/p&gt;
&lt;p&gt;Der Vortrag verdeutlicht wie das Modul itertools die verzögerte
Auswertung unterstützt. Mit den Funktionen dieses Moduls lassen sich
Algorithmen oft kurz, gut lesbar und effizient umsetzen. Auch hier ist
eine Integration in sonst nicht-funktional geschriebene Programme
einfach möglich.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mike Müller</dc:creator><pubDate>Tue, 30 Oct 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-10-30:pycon-de-2012/funktionale-programmierung-mit-python.html</guid><category>closure</category><category>funktional</category><category>generator</category><category>iterator</category><category>itertools</category><category>paradigma</category><category>verzögerte auswertung</category></item><item><title>PyCon 2009: A Curious Course on Coroutines and Concurrency (Part 3 of 3)</title><link>https://pyvideo.org/pycon-us-2009/pycon-2009--a-curious-course-on-coroutines-and-c0.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A Curious Course on Coroutines and Concurrency (part 3 of 3)&lt;/p&gt;
&lt;p&gt;Presented at PyCon 2009 by David Beazley&lt;/p&gt;
&lt;p&gt;If you are a programmer who cares about Python and concurrency, then you
should also care about Python coroutines. Although they were first
introduced in Python 2.5, coroutines remain one of Python's most
overlooked features--- often vaguely described as a curious &amp;quot;extension&amp;quot;
of generator functions with little insight as to how they might be
applied to real-world problems. This tutorial examines coroutines in a
more practical light by showing how they are actually a very elegant way
to implement a processing &amp;quot;task.&amp;quot; Using this task abstraction, it is
possible to use coroutines to implement processing pipelines, event
handling systems, and programs based on cooperative multitasking.
Moreover, if you define tasks using coroutines, they can be easily
incorporated into more traditional concurrent programs that utilize
threads or message passing.&lt;/p&gt;
&lt;p&gt;[VIDEO HAS ISSUES: bit of clipping start to finish.]&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">David Beazley</dc:creator><pubDate>Tue, 17 Feb 2009 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2009-02-17:pycon-us-2009/pycon-2009--a-curious-course-on-coroutines-and-c0.html</guid><category>concurrency</category><category>coroutines</category><category>generator</category><category>pycon</category><category>pycon2009</category><category>python-advanced</category></item><item><title>PyCon 2009: A Curious Course on Coroutines and Concurrency (Part 2 of 3)</title><link>https://pyvideo.org/pycon-us-2009/pycon-2009--a-curious-course-on-coroutines-and-c1.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A Curious Course on Coroutines and Concurrency (part 2 of 3)&lt;/p&gt;
&lt;p&gt;Presented at PyCon 2009 by David Beazley&lt;/p&gt;
&lt;p&gt;If you are a programmer who cares about Python and concurrency, then you
should also care about Python coroutines. Although they were first
introduced in Python 2.5, coroutines remain one of Python's most
overlooked features--- often vaguely described as a curious &amp;quot;extension&amp;quot;
of generator functions with little insight as to how they might be
applied to real-world problems. This tutorial examines coroutines in a
more practical light by showing how they are actually a very elegant way
to implement a processing &amp;quot;task.&amp;quot; Using this task abstraction, it is
possible to use coroutines to implement processing pipelines, event
handling systems, and programs based on cooperative multitasking.
Moreover, if you define tasks using coroutines, they can be easily
incorporated into more traditional concurrent programs that utilize
threads or message passing.&lt;/p&gt;
&lt;p&gt;[VIDEO HAS ISSUES: bit of clipping start to finish.]&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">David Beazley</dc:creator><pubDate>Tue, 17 Feb 2009 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2009-02-17:pycon-us-2009/pycon-2009--a-curious-course-on-coroutines-and-c1.html</guid><category>concurrency</category><category>coroutines</category><category>generator</category><category>pycon</category><category>pycon2009</category><category>python-advanced</category></item><item><title>PyCon 2009: A Curious Course on Coroutines and Concurrency (Part 1 of 3)</title><link>https://pyvideo.org/pycon-us-2009/pycon-2009--a-curious-course-on-coroutines-and-co.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A Curious Course on Coroutines and Concurrency (part 1 of 3)&lt;/p&gt;
&lt;p&gt;Presented at PyCon 2009 by David Beazley&lt;/p&gt;
&lt;p&gt;If you are a programmer who cares about Python and concurrency, then you
should also care about Python coroutines. Although they were first
introduced in Python 2.5, coroutines remain one of Python's most
overlooked features--- often vaguely described as a curious &amp;quot;extension&amp;quot;
of generator functions with little insight as to how they might be
applied to real-world problems. This tutorial examines coroutines in a
more practical light by showing how they are actually a very elegant way
to implement a processing &amp;quot;task.&amp;quot; Using this task abstraction, it is
possible to use coroutines to implement processing pipelines, event
handling systems, and programs based on cooperative multitasking.
Moreover, if you define tasks using coroutines, they can be easily
incorporated into more traditional concurrent programs that utilize
threads or message passing.&lt;/p&gt;
&lt;p&gt;[VIDEO HAS ISSUES: bit of clipping start to finish.]&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">David Beazley</dc:creator><pubDate>Tue, 17 Feb 2009 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2009-02-17:pycon-us-2009/pycon-2009--a-curious-course-on-coroutines-and-co.html</guid><category>concurrency</category><category>coroutines</category><category>generator</category><category>pycon</category><category>pycon2009</category><category>python-advanced</category></item></channel></rss>