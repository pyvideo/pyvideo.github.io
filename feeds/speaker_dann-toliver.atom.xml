<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_dann-toliver.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2015-11-07T00:00:00+00:00</updated><entry><title>RPython: turtles all the way down</title><link href="https://pyvideo.org/pycon-ca-2015/rpython-turtles-all-the-way-down-dann-toliver.html" rel="alternate"></link><published>2015-11-07T00:00:00+00:00</published><updated>2015-11-07T00:00:00+00:00</updated><author><name>Dann Toliver</name></author><id>tag:pyvideo.org,2015-11-07:pycon-ca-2015/rpython-turtles-all-the-way-down-dann-toliver.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;We'll describe a small Logo-inspired language for communicating with turtles, and talk about the implementation of that language in RPython -- a toolkit for building interpreters for dynamic languages, and part of the PyPy project.&lt;/p&gt;
&lt;p&gt;Of particular interest are the performance characteristics of building the interpreter with RPython instead of running it directly, and where that performance increase originates: RPython's meta-tracing framework creates a custom tracing JIT VM for our interpreter. This gives us compiler-like performance for the cost of an interpreter, which is a pretty great bargain, and stands to permanently alter the dynamics of building dynamic languages.&lt;/p&gt;
</summary></entry></feed>