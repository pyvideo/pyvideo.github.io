<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Thu, 20 Jul 2017 00:00:00 +0000</lastBuildDate><item><title>Live Coding in Python v2.16</title><link>https://pyvideo.org/vancouver-python-developers/live-coding-in-python-v216.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Demonstrates an Eclipse plugin that runs your Python code while you type it, including a new feature: live unit tests. Also shows Emacs package and new PyCharm plugin, as well as the old features of turtle graphics and live coding display.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Don Kirkby</dc:creator><pubDate>Thu, 20 Jul 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-07-20:vancouver-python-developers/live-coding-in-python-v216.html</guid><category>live coding</category><category>tools</category></item><item><title>Click: A Pleasure to Write, a Pleasure to Use</title><link>https://pyvideo.org/vancouver-python-developers/click-a-pleasure-to-write-a-pleasure-to-use.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;As developers, we spend a lot of time trying to automate tasks that we have to carry out repeatedly. A likely result is a little (or not so little) command line tool that supposedly makes our lives easier.&lt;/p&gt;
&lt;p&gt;The Python standard library and the wider community have come up with a wide range of packages that make it easier and quicker to write a Python script that can handle arguments and options.&lt;/p&gt;
&lt;p&gt;My personal experience is that they are good, but not great... until I came across click: a tool written by Armin Ronacher. It's just beautiful to work with and create simple, yet powerful, command line tools.&lt;/p&gt;
&lt;p&gt;In this talk, I will take a look at the landscape of Python packages that help building command line tools such as argparse and docopt. I will then introduce click and illustrate some of the benefits over its alternatives before looking at a concrete example to show some of its main features.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Sebastian Vetter</dc:creator><pubDate>Sat, 04 Jun 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-06-04:vancouver-python-developers/click-a-pleasure-to-write-a-pleasure-to-use.html</guid></item><item><title>Deciding between Continuity and Change in Open Source</title><link>https://pyvideo.org/vancouver-python-developers/deciding-between-continuity-and-change-in-open-source.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;When you’re a big, for-profit project, it can be easy to justify a change from outdated software to the new hotness: figure out why the old software isn’t working for you, do a cost-benefit analysis, and – if it still seems like a good idea – make the change.&lt;/p&gt;
&lt;p&gt;When you’re a community of volunteers, that justification can be less clear: cost-benefit analyses will rarely be about money. Worse still, the human costs can be difficult to justify: It’s difficult to get volunteers to do more unpaid work than they’re already doing. If your community depends on Open Source software, you get the added political difficulty of needing to navigate the divide between large-scale change and making small improvements to systems your community actively contributes to.&lt;/p&gt;
&lt;p&gt;Whilst the motivation might be different, the process isn’t: leading a community towards change means understanding why existing systems aren’t suitable, making your community enthusiastic about the need for change, and then actually making that change.&lt;/p&gt;
&lt;p&gt;To help make this point more concretely, we’ll look at how and why linux.conf.au – a long-running Open Source conference in Australia – effected a move away away from a bespoke legacy conference management software to one based on Symposion, the popular Django-based software created for the Python Software Foundation. We’ll also look at how that’s led to the PSF funding Registrasion, a Django-based conference sales platform.&lt;/p&gt;
&lt;p&gt;With this case study as a guide, we’ll talk about how to make a decision to replace the software that your community runs on. In particular, we’ll cover how to identify and engage with stakeholders within a community; the value of prototypes in maintaining interest; and what a cost-benefit analysis might look like when your currencies are human joy, and burnout prevention.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Christopher Neugebauer</dc:creator><pubDate>Sat, 04 Jun 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-06-04:vancouver-python-developers/deciding-between-continuity-and-change-in-open-source.html</guid></item><item><title>Making the Most out of Code Reviews</title><link>https://pyvideo.org/vancouver-python-developers/making-the-most-out-of-code-reviews.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Code review is like a buzzword in the programming world. Developers often talk about how important it is. But what really happens during code review? What do you achieve out of it? How can we learn during code review? This talk will present ideas of what should be the goals of a code review, and how developers can learn during code review process.&lt;/p&gt;
&lt;p&gt;Code reviewing is considered to be an important phase in software development to ensure code quality. Generally during code review, the goal is to find mistakes, if any was made. This can create a negative experience to the team. It’s likely that some team member is not comfortable with the idea of having their work scrutinized. Junior developers may feel like they are not qualified enough to provide feedback. This talk will explore the different goals of code review process. In addition to ensure code quality, code review should be considered as a learning tool. It should be considered a positive and rewarding experience.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mariatta Wijaya</dc:creator><pubDate>Sat, 04 Jun 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-06-04:vancouver-python-developers/making-the-most-out-of-code-reviews.html</guid></item><item><title>Open Source and You</title><link>https://pyvideo.org/vancouver-python-developers/open-source-and-you.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Open source is nothing if not communities, yet so much about our communities are left to chance. Professional community managers are helping, but change, especially cultural change, must be bottom up as much as it is top down.&lt;/p&gt;
&lt;p&gt;In this talk we’ll look at open source web tech communities and see who gets what right so we can all learn from them. We’ll finish by exploring what every community member can do to shape and improve the communities to which they belong.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Josh Simmons</dc:creator><pubDate>Sat, 04 Jun 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-06-04:vancouver-python-developers/open-source-and-you.html</guid></item><item><title>Protect Your Users with Circuit Breakers</title><link>https://pyvideo.org/vancouver-python-developers/protect-your-users-with-circuit-breakers.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The inevitability of failures is the bane of scaling any modern web service and can cause serious pain for end users! Lucky for us, there are techniques that can help protect your product and handle failures in subsystems gracefully. This talk will dive into one of these in depth, the Circuit Breaker pattern, and explore the options it gives us for keeping our users safe.&lt;/p&gt;
&lt;p&gt;We will be focusing on several real-world problems and how they can be addressed by circuit breakers. You should expect to leave the talk with details on simple circuit breakers as well as understanding how they can be adapted for more complex situations. We’ll also discuss some options for how to implement your circuit breaker in readable Python.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Scott Triglia</dc:creator><pubDate>Sat, 04 Jun 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-06-04:vancouver-python-developers/protect-your-users-with-circuit-breakers.html</guid></item><item><title>Python in the NHL Front Office</title><link>https://pyvideo.org/vancouver-python-developers/python-in-the-nhl-front-office.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Advancements in statistical analysis have recently emerged in professional hockey as a way for teams to improve their performance, player development, and decision making. Working at the forefront of this analytics revolution, from the blogosphere to the National Hockey League, Josh will discuss the ways he uses Python to process data and solve problems to guide decision makers in all facets of front office activities.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Josh Simmons</dc:creator><pubDate>Sat, 04 Jun 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-06-04:vancouver-python-developers/python-in-the-nhl-front-office.html</guid></item><item><title>Ship It: Python Packaging and Distribution</title><link>https://pyvideo.org/vancouver-python-developers/ship-it-python-packaging-and-distribution.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;If we were writing Go or Java it’d be obvious how to distribute the fruits of our labour: compile code and ship the executable. Alas, we’re into Python, where packaging and distribution is not so straightforward. We’ve got sources, distributions, eggs, wheels, native integration - it’s not easy or obvious what you’re supposed to be doing, or even what the options are.&lt;/p&gt;
&lt;p&gt;This talk is about packaging and distributing Python code. It will cover the ecosystem's challenges, the general approaches to solving them, a brief history of major tools, finishing with an overview of the tools that working Pythonistas are likely to encounter in 2016.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nathaniel Knight</dc:creator><pubDate>Sat, 04 Jun 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-06-04:vancouver-python-developers/ship-it-python-packaging-and-distribution.html</guid></item><item><title>The Highs and Lows of a Python Data Stack</title><link>https://pyvideo.org/vancouver-python-developers/the-highs-and-lows-of-a-python-data-stack.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Many of you may have heard about NumPy, SciPy, and sklearn. Under the hood, a lot of smartness which can be attributed by many different projects, and languages.&lt;/p&gt;
&lt;p&gt;We shall traverse the Python Data (aka PyData) stack, from high level wrapper with Jupyter notebook, down to the low level of optimization used in Numba to translate python into LLVM to allow native execution. It will let you make better use of Python as a numerical tool and preach more cool Python to others.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Boris Lau</dc:creator><pubDate>Sat, 04 Jun 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-06-04:vancouver-python-developers/the-highs-and-lows-of-a-python-data-stack.html</guid></item></channel></rss>