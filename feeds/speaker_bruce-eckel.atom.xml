<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_bruce-eckel.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2013-03-15T00:00:00+00:00</updated><entry><title>Rethinking Errors: Learning from Scala and Go</title><link href="https://pyvideo.org/pycon-us-2013/rethinking-errors-learning-from-scala-and-go.html" rel="alternate"></link><published>2013-03-15T00:00:00+00:00</published><updated>2013-03-15T00:00:00+00:00</updated><author><name>Bruce Eckel</name></author><id>tag:pyvideo.org,2013-03-15:pycon-us-2013/rethinking-errors-learning-from-scala-and-go.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;C++ brought exceptions to mainstream programming; Java goes further with
checked exceptions. But are exceptions the one way to report all errors?
Scala and Go suggest there is more than one kind of error, so there
should be more than one kind of error reporting, and different responses
to errors. Iâ€™ll show the Scala and Go approaches to the error problem,
and how to apply this to Python.&lt;/p&gt;
</summary><category term="talk"></category></entry></feed>