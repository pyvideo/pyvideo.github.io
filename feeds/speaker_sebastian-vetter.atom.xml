<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_sebastian-vetter.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2017-11-18T00:00:00+00:00</updated><entry><title>Double Click: continue building better CLIs</title><link href="https://pyvideo.org/pycon-ca-2017/double-click-continue-building-better-clis.html" rel="alternate"></link><published>2017-11-18T00:00:00+00:00</published><updated>2017-11-18T00:00:00+00:00</updated><author><name>Sebastian Vetter</name></author><id>tag:pyvideo.org,2017-11-18:pycon-ca-2017/double-click-continue-building-better-clis.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Some of you might have been to my previous talk &amp;quot;Click - A Pleasure to Write, A Pleasure to Use&amp;quot;, a brief overview of the powerful features provided by click to build command-line tools. You can find a recording of it on YouTube. But don't worry, I'll give you a super quick summary at the beginning of this talk.&lt;/p&gt;
&lt;p&gt;In this talk, we will look at some more advanced features of click to build an example command-line tools. I will show you how nested commands make it easy to modularize your (complex) application and how you can use custom parameter types to improve validation. Come and join me for a journey into a world with no clicking but with a lot of click.&lt;/p&gt;
</summary></entry><entry><title>Click: A Pleasure to Write, a Pleasure to Use</title><link href="https://pyvideo.org/vancouver-python-developers/click-a-pleasure-to-write-a-pleasure-to-use.html" rel="alternate"></link><published>2016-06-04T00:00:00+00:00</published><updated>2016-06-04T00:00:00+00:00</updated><author><name>Sebastian Vetter</name></author><id>tag:pyvideo.org,2016-06-04:vancouver-python-developers/click-a-pleasure-to-write-a-pleasure-to-use.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;As developers, we spend a lot of time trying to automate tasks that we have to carry out repeatedly. A likely result is a little (or not so little) command line tool that supposedly makes our lives easier.&lt;/p&gt;
&lt;p&gt;The Python standard library and the wider community have come up with a wide range of packages that make it easier and quicker to write a Python script that can handle arguments and options.&lt;/p&gt;
&lt;p&gt;My personal experience is that they are good, but not great... until I came across click: a tool written by Armin Ronacher. It's just beautiful to work with and create simple, yet powerful, command line tools.&lt;/p&gt;
&lt;p&gt;In this talk, I will take a look at the landscape of Python packages that help building command line tools such as argparse and docopt. I will then introduce click and illustrate some of the benefits over its alternatives before looking at a concrete example to show some of its main features.&lt;/p&gt;
</summary></entry><entry><title>Click: A Pleasure To Write, A Pleasure To Use</title><link href="https://pyvideo.org/pycon-au-2016/click-a-pleasure-to-write-a-pleasure-to-use.html" rel="alternate"></link><published>2016-08-15T00:00:00+00:00</published><updated>2016-08-15T00:00:00+00:00</updated><author><name>Sebastian Vetter</name></author><id>tag:pyvideo.org,2016-08-15:pycon-au-2016/click-a-pleasure-to-write-a-pleasure-to-use.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Sebastian Vetter
&lt;a class="reference external" href="https://2016.pycon-au.org/schedule/64/view_talk"&gt;https://2016.pycon-au.org/schedule/64/view_talk&lt;/a&gt;
We have a wide variety of packages and modules in Python that help build
commandline tools in different ways. One of the more recent contenders is
'click'. It uses a very intuitive approach to create simple CLIs as well as
complex ones. In this talk, I will introduce building CLIs with 'click' and
illustrate some of its advantages.&lt;/p&gt;
</summary><category term="click"></category></entry><entry><title>Hunting Treasures in Django</title><link href="https://pyvideo.org/pycaribbean-2016/pycaribbean-2016-hunting-treasures-in-django-by-sebastian-vetter.html" rel="alternate"></link><published>2016-02-21T00:00:00+00:00</published><updated>2016-02-21T00:00:00+00:00</updated><author><name>Sebastian Vetter</name></author><id>tag:pyvideo.org,2016-02-21:pycaribbean-2016/pycaribbean-2016-hunting-treasures-in-django-by-sebastian-vetter.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Django is a comprehensive web framework that provides well-defined concepts such as request, response, middleware and view that make our lives as perfectionists with deadlines much easier. What many of us are not aware of is the rich collection of utilities and tooling around these concepts that are part of the famework. Decorators, helper functions and context managers that are used internally but can make life as a developer much easier as well.&amp;quot;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Sebastian Vette&lt;/li&gt;
&lt;/ul&gt;
</summary></entry><entry><title>Click: A Pleasure To Write, A Pleasure To Use</title><link href="https://pyvideo.org/pycon-us-2016/sebastian-vetter-click-a-pleasure-to-write-a-pleasure-to-use-pycon-2016.html" rel="alternate"></link><published>2016-05-31T00:00:00+00:00</published><updated>2016-05-31T00:00:00+00:00</updated><author><name>Sebastian Vetter</name></author><id>tag:pyvideo.org,2016-05-31:pycon-us-2016/sebastian-vetter-click-a-pleasure-to-write-a-pleasure-to-use-pycon-2016.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Speaker: Sebastian Vetter&lt;/p&gt;
&lt;p&gt;We have a wide variety of packages and modules in Python that help build commandline tools in different ways. One of the more recent contenders is 'click'. It uses a very intuitive approach to create simple CLIs as well as complex ones. In this talk, I will introduce building CLIs with 'click' and illustrate some of its advantages.&lt;/p&gt;
&lt;p&gt;Slides can be found at: &lt;a class="reference external" href="https://speakerdeck.com/pycon2016"&gt;https://speakerdeck.com/pycon2016&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/PyCon/2016-slides"&gt;https://github.com/PyCon/2016-slides&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Hunting for Treasure in Django</title><link href="https://pyvideo.org/djangocon-us-2015/hunting-for-treasure-in-django-by-sebastian-vetter.html" rel="alternate"></link><published>2015-09-18T00:00:00+00:00</published><updated>2015-09-18T00:00:00+00:00</updated><author><name>Sebastian Vetter</name></author><id>tag:pyvideo.org,2015-09-18:djangocon-us-2015/hunting-for-treasure-in-django-by-sebastian-vetter.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Hunting for Treasure in Django by Sebastian Vetter&lt;/p&gt;
&lt;p&gt;Django is a comprehensive web framework that provides well-defined
concepts such as request, response, middleware and view that make our
lives as perfectionists with deadlines much easier. What many of us are
not aware of is the rich collection of utilities and tooling around
these concepts that are part of the famework. Decorators, helper
functions and context managers that are used internally but can make
life as a developer much easier as well.&lt;/p&gt;
&lt;p&gt;Introduction (~ 2 mins)&lt;/p&gt;
&lt;p&gt;A little bit about me. Why am I talking about this? Django's Hidden
Treasures (~ 4 mins)&lt;/p&gt;
&lt;p&gt;The reason for this talks. What do I consider hidden treasures? Which
Django modules are interesting? Are they documented and were do I find
it? Examples of hidden treasures:&lt;/p&gt;
&lt;p&gt;A quick introduction of the module. What's a possible use case for it?
How does it solve it? Where is it used in the Django?&lt;/p&gt;
&lt;p&gt;cached_property (~ 2 mins)&lt;/p&gt;
&lt;p&gt;import_string (~ 2 mins)&lt;/p&gt;
&lt;p&gt;lazy, LazyObject and lazy_property (~ 3 mins)&lt;/p&gt;
&lt;p&gt;decorators module (~ 4 mins)&lt;/p&gt;
&lt;p&gt;classonlymethod decorator_from_middleware update_wrapper and wraps
(technically not Django) django.views (~ 4 mins)&lt;/p&gt;
&lt;p&gt;debug.cleanse_setting decorators.debug.sensitive_parameters
decorators.debug.sensitive_post_parameteÂ­rs Wrapping up (~ 2 mins)&lt;/p&gt;
&lt;p&gt;Django documentation links. Some suggestions for further investigation.&lt;/p&gt;
</summary></entry><entry><title>Moby and the Beanstalk</title><link href="https://pyvideo.org/pycon-au-2015/moby-and-the-beanstalk.html" rel="alternate"></link><published>2015-08-04T00:00:00+00:00</published><updated>2015-08-04T00:00:00+00:00</updated><author><name>Sebastian Vetter</name></author><id>tag:pyvideo.org,2015-08-04:pycon-au-2015/moby-and-the-beanstalk.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The popularity of Docker these days is incredible and a lot of people
are already using it for their production systems. Although it makes a
lot of things much simpler, it's not a silver bullet and comes with some
caveats of it's own. This talk will describe the journey of my team at
Mobify from a self-hosted VM to a AWS-backed web app deployed using
Docker.&lt;/p&gt;
</summary></entry></feed>