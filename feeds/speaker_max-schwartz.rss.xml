<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Sat, 06 Oct 2018 00:00:00 +0000</lastBuildDate><item><title>Building a Read Aloud eBook in Python</title><link>https://pyvideo.org/pygotham-2018/building-a-read-aloud-ebook-in-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This is a project by Binod Gyawali, Beata Beigman Klebanov, and Anastassia Loukina.&lt;/p&gt;
&lt;p&gt;Nowadays books are increasingly consumed not only through reading but also through listening. But what does it take to create an eBook where the reader can switch between the two modalities? In this talk we describe how Python can be used to apply NLP and speech processing technologies to combine an existing eBook in EPUB format and an audio book into a single Read Aloud book. The system we developed uses Python libraries to read the EPUB file contents, NLP methods to process the content, open-sourced speech processing tools (Kaldi-based forced alignment) to align the audio files with the eBook content, and finally creates a Read Aloud book using the alignment information, EPUB content, and the audio files. We use the ebooklib Python library (with some updates to add Read Aloud EPUB generation functionality) to generate the final Read Aloud book.&lt;/p&gt;
&lt;p&gt;We'll conclude with a demonstration of a Read Aloud eBook and showcase an educational application which uses such a book. In this application a student alternates between listening to audiobook and reading aloud. During listening, the text of the book is highlighted along with the audio playback to help students follow along with the narration and maintain focus.&lt;/p&gt;
&lt;p&gt;The talk will be an informative talk with no coding involved.  We will discuss the system to generate the Read Aloud eBook, show the demo of the book and discuss the challenges that we faced in the process. The targeted audience will be beginner level. Though we do not require the audience to have any prior understanding of eBook structure or forced alignment, familiarity with these would be an advantage.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Max Schwartz</dc:creator><pubDate>Sat, 06 Oct 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-10-06:pygotham-2018/building-a-read-aloud-ebook-in-python.html</guid></item><item><title>Building a “Pun Generator” in Python</title><link>https://pyvideo.org/pygotham-2017/building-a-pun-generator-in-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The core of this talk will focus on edit distance, an important algorithm in Natural Language Processing (and Computational Biology) for determining how similar two strings are. While some of the coding involved may be beyond the “beginner level” this talk is targeted to, the goal will be to convey an understanding of how this algorithm works to even those with no prior programming experience. I will also introduce various methods of phonetic representation (writing the actual sounds of words), and touch briefly on part-of-speech tagging (identifying words as nouns, verbs, etc.). All of this will tie together to form the beginnings of a “pun generator,” although the first version of this is probably closer to a “Weird Al song title generator.” I will then talk about possible next steps for expanding this.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Max Schwartz</dc:creator><pubDate>Sat, 07 Oct 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-10-07:pygotham-2017/building-a-pun-generator-in-python.html</guid></item></channel></rss>