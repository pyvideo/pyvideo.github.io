<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org - PyCon UK 2022</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/event_pycon-uk-2022.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2022-09-18T00:00:00+00:00</updated><subtitle></subtitle><entry><title>Alternative History Retrocomputing</title><link href="https://pyvideo.org/pycon-uk-2022/alternative-history-retrocomputing.html" rel="alternate"></link><published>2022-09-18T00:00:00+00:00</published><updated>2022-09-18T00:00:00+00:00</updated><author><name>Peter Russell</name></author><id>tag:pyvideo.org,2022-09-18:/pycon-uk-2022/alternative-history-retrocomputing.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python is a very high-level programming language. I've been using it for very low-level programming. We'll meet an unusual computer.&lt;/p&gt;
&lt;p&gt;We're all guilty of rolling our own implementation of existing code, but how far have you taken it? Ever reimplemented multiplication? Did you use CPU instructions that had literally …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python is a very high-level programming language. I've been using it for very low-level programming. We'll meet an unusual computer.&lt;/p&gt;
&lt;p&gt;We're all guilty of rolling our own implementation of existing code, but how far have you taken it? Ever reimplemented multiplication? Did you use CPU instructions that had literally never been used before?&lt;/p&gt;
&lt;p&gt;The development of microprocessors like the Zilog Z80 and MOS 6502 in the 1970s eventually gave rise to the 8-bit home computers that many remember fondly. When Marcel van Kervinck and Walter Belgers designed the Gigatron, a quirky but surprisingly capable computer made from 74xx series logic ICs, they showed that a different course of history was possible - we could have had microcomputers without microprocessors, perhaps much earlier. They also created a world of unclimbed mountains: on the Gigatron you can be the first person to implement your favourite game or algorithm.&lt;/p&gt;
&lt;p&gt;A few years ago I built a Gigatron, and I'm having great fun with it. I started off trying to implement a Forth interpreter, but while I've programmed for many years, I'd never written low-level code before. I really thought it would be easy! In this talk I'll show what I've achieved with the Gigatron, how working within the challenging architecture has broadened my perspective on programming, and how Python was at the heart of it all.&lt;/p&gt;
&lt;p&gt;The talk will explore technical details, but won't require specialist knowledge. It's likely to touch on:
* Python as an assembly language
* Test Driven Development
* CFFI
* Hypothesis
* Data analysis with Matplotlib and other parts of the scientific stack.
* System Architecture
* Hard real-time programming
* Programming language implementation.&lt;/p&gt;
</content><category term="PyCon UK 2022"></category></entry><entry><title>Connecting those thoughts: Personal knowledge management with Python</title><link href="https://pyvideo.org/pycon-uk-2022/connecting-those-thoughts-personal-knowledge-management-with-python.html" rel="alternate"></link><published>2022-09-18T00:00:00+00:00</published><updated>2022-09-18T00:00:00+00:00</updated><author><name>Mark Farragher</name></author><id>tag:pyvideo.org,2022-09-18:/pycon-uk-2022/connecting-those-thoughts-personal-knowledge-management-with-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Apps such as Obsidian.md have revolutionised note-taking for the digital age, through connected markdown files. I discuss how I developed a Python package that enabled me to become more effective at learning at university and built a knowledge graph of 500+ notes.&lt;/p&gt;
&lt;p&gt;Software has emerged in the last …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Apps such as Obsidian.md have revolutionised note-taking for the digital age, through connected markdown files. I discuss how I developed a Python package that enabled me to become more effective at learning at university and built a knowledge graph of 500+ notes.&lt;/p&gt;
&lt;p&gt;Software has emerged in the last few years, such as Roam Research and Obsidian.md, for writing notes in a highly-connected format.  These apps can display notes in an extensive knowledge graph and have enabled a new wave of personal knowledge management (PKM) for the digital age.  This talk provides an introduction to personal knowledge management and shows how I used Python to improve my learning through my Obsidiantools package.&lt;/p&gt;
&lt;p&gt;During my MPhil programme in Health Data Science at the University of Cambridge in 2021-22, I wrote all my notes as markdown files through Obsidian.md.  I developed the Obsidiantools package for analysing Obsidian.md vaults, in order to improve my Obsidian workflows and analyse my notes via the Python data science stack, NLP packages and NetworkX.  Within 3 months, I had written over 65k words in 250+ notes and used network analysis through the Python data stack to improve my strategy for studying.&lt;/p&gt;
&lt;p&gt;Connected notes even go back hundreds of years in an analogue format, through the use of index cards and Zettelkasten systems.  In a more modern form, digital note vaults are at the intersection of NLP and network analysis, so there are data science challenges to tackle in those domains (Roam Research even offers a $150k prize for one of those challenges, in case you are tempted).&lt;/p&gt;
&lt;p&gt;Talk structure:
- Introduction to personal knowledge management (PKM)
- My MPhil notes as connected notes
- The Obsidiantools package
- Data science challenges and wrap-up&lt;/p&gt;
</content><category term="PyCon UK 2022"></category></entry><entry><title>OpenSAFELY: a python powered response to the COVID pandemic</title><link href="https://pyvideo.org/pycon-uk-2022/opensafely-a-python-powered-response-to-the-covid-pandemic.html" rel="alternate"></link><published>2022-09-18T00:00:00+00:00</published><updated>2022-09-18T00:00:00+00:00</updated><author><name>Becky Smith</name></author><id>tag:pyvideo.org,2022-09-18:/pycon-uk-2022/opensafely-a-python-powered-response-to-the-covid-pandemic.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;OpenSAFELY is a secure, transparent, open-source platform, built in Python, in response to the COVID pandemic.  It provides almost real-time analysis of millions of electronic health records.  We will discuss privacy, security and research goals achieved by a cross-disciplinary team of researchers, epidemiologists and developers working together.&lt;/p&gt;
&lt;p&gt;OpenSAFELY is …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;OpenSAFELY is a secure, transparent, open-source platform, built in Python, in response to the COVID pandemic.  It provides almost real-time analysis of millions of electronic health records.  We will discuss privacy, security and research goals achieved by a cross-disciplinary team of researchers, epidemiologists and developers working together.&lt;/p&gt;
&lt;p&gt;OpenSAFELY is a secure, transparent, open-source software platform for analysis of electronic health records (EHR) data, built in Python.&lt;/p&gt;
&lt;p&gt;OpenSAFELY was built as a fast response to the Covid-19 pandemic to provide almost real-time analysis of millions of NHS records related to Covid data such as hospitalisations, deaths, risk factors and vaccinations.&lt;/p&gt;
&lt;p&gt;In this talk, we will tell the story of how OpenSAFELY came to be, the privacy, security and research goals it addresses with software, and how research best practices can be achieved by a cross-disciplinary team of researchers, epidemiologists and software developers working alongside each other.&lt;/p&gt;
&lt;p&gt;We will describe the particular challenges that face researchers working with potentially identifiable patient data, and how the inherent risks of such data can be mitigated.&lt;/p&gt;
&lt;p&gt;A key concept is the idea of pseudonymised data; i.e. data where a patient's immediately identifiable information (name, exact address, date of birth etc) has been obfuscated). While this sort of data has been superficially anonymised, it can be quite easy to re-identify individuals from the information available. For example, a malicious intruder might easily find and read Boris Johnson’s entire health record by searching for a patient who matches information that is openly available on his Wikipedia page: his age, the dates he tested positive and was admitted to hospital for Covid-19, and the fact that he lives in London.&lt;/p&gt;
&lt;p&gt;OpenSAFELY is a range of tools that aims to allow analysis of EHR data while adhering to these principles; it aims to substantially exceed, by design, the current requirements on securing sensitive healthcare data.  OpenSAFELY does not move patient data outside of the secure environments where it already resides: instead, trusted analysts can run large scale computation across pseudonymised patient records in situ, and in near-real-time.&lt;/p&gt;
&lt;p&gt;OpenSAFELY contains a range of flexible, pragmatic, but broadly standardised tools that users work with to convert raw patient data into “research ready” datasets, and to then execute code across those datasets. We will discuss the architecture of the platform, some of the tools we chose to use, and reasons for the design decisions made.&lt;/p&gt;
</content><category term="PyCon UK 2022"></category></entry><entry><title>Pointers? In my Python? It's more likely than you think</title><link href="https://pyvideo.org/pycon-uk-2022/pointers-in-my-python-its-more-likely-than-you-think.html" rel="alternate"></link><published>2022-09-18T00:00:00+00:00</published><updated>2022-09-18T00:00:00+00:00</updated><author><name>Eli Holderness</name></author><id>tag:pyvideo.org,2022-09-18:/pycon-uk-2022/pointers-in-my-python-its-more-likely-than-you-think.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Learn about Python's memory handling, including:
- what pointers are, and why it matters
- what object IDs are, and what they mean
- how CPython can tell when you're done with an object, and what happens next&lt;/p&gt;
&lt;p&gt;No C knowledge required!&lt;/p&gt;
&lt;p&gt;Python is a wonderful thing that takes all the complication …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Learn about Python's memory handling, including:
- what pointers are, and why it matters
- what object IDs are, and what they mean
- how CPython can tell when you're done with an object, and what happens next&lt;/p&gt;
&lt;p&gt;No C knowledge required!&lt;/p&gt;
&lt;p&gt;Python is a wonderful thing that takes all the complication of memory management away from us. We don’t have to worry about pre-allocating memory for our objects, or remember to free it once we’re done. So, given that we’re not doing it manually, how do these things happen? Do we have to care? Well, sometimes. Maybe.&lt;/p&gt;
&lt;p&gt;In this talk, we’ll discuss what a pointer is, where they crop up in Python, and what you need to know in order to avoid getting tripped up by them. We’ll also cover the &lt;cite&gt;id&lt;/cite&gt; of an object, how it varies between different implementations like IronPython and PyPy, and why &lt;cite&gt;is&lt;/cite&gt; is different from &lt;cite&gt;==&lt;/cite&gt;. Finally, we’ll talk about garbage collection, what reference counting is, and how CPython knows when it’s time to get rid of unused objects.&lt;/p&gt;
&lt;p&gt;Whether you just want to understand what’s going on under the hood without having to dive into the implementation, or you’re on the hunt for some new diabolical things to do with code (self-referential lists are only the beginning!), come along to this talk and learn about the pointers in your Python.&lt;/p&gt;
&lt;p&gt;This talk is aimed at anyone with an interest in how Python handles objects in memory, or who’s ever been confused by side-effects popping up in their code. Absolutely no knowledge of C is required, and Python beginners are extremely welcome.&lt;/p&gt;
</content><category term="PyCon UK 2022"></category></entry><entry><title>Sunday Lightning Talks</title><link href="https://pyvideo.org/pycon-uk-2022/sunday-lightning-talks.html" rel="alternate"></link><published>2022-09-18T00:00:00+00:00</published><updated>2022-09-18T00:00:00+00:00</updated><author><name>Adam Johnson</name></author><id>tag:pyvideo.org,2022-09-18:/pycon-uk-2022/sunday-lightning-talks.html</id><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Lightning Talks&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Ian Thomas: Visualising large datasets&lt;/li&gt;
&lt;li&gt;Adam Johnson: My PyCon photos&lt;/li&gt;
&lt;li&gt;George Angelchev: How to keep calm and dev on&lt;/li&gt;
&lt;li&gt;Alexander Fleischli: The coolest keyboard&lt;/li&gt;
&lt;li&gt;Michal Grochmal: Let's write a (bad) programming language in 30 lines of python&lt;/li&gt;
&lt;/ol&gt;
</content><category term="PyCon UK 2022"></category></entry><entry><title>Welcome &amp; UKPA AGM</title><link href="https://pyvideo.org/pycon-uk-2022/welcome-ukpa-agm.html" rel="alternate"></link><published>2022-09-18T00:00:00+00:00</published><updated>2022-09-18T00:00:00+00:00</updated><author><name>Unknown</name></author><id>tag:pyvideo.org,2022-09-18:/pycon-uk-2022/welcome-ukpa-agm.html</id><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Welcome&lt;/p&gt;
&lt;p&gt;Welcome&lt;/p&gt;
</content><category term="PyCon UK 2022"></category></entry><entry><title>An introduction to async programming - Writing a Telegram Antispam Bot in Python</title><link href="https://pyvideo.org/pycon-uk-2022/an-introduction-to-async-programming-writing-a-telegram-antispam-bot-in-python.html" rel="alternate"></link><published>2022-09-17T00:00:00+00:00</published><updated>2022-09-17T00:00:00+00:00</updated><author><name>Marc-André Lemburg</name></author><id>tag:pyvideo.org,2022-09-17:/pycon-uk-2022/an-introduction-to-async-programming-writing-a-telegram-antispam-bot-in-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Learn how easy it is to get started with asynchronous programming in Python.&lt;/p&gt;
&lt;p&gt;The talk will provide a quick introduction to the basic concepts of async programming and demonstrate the techniques based on a Telegram antispam bot using the async library Pyrogram.&lt;/p&gt;
&lt;p&gt;The talk will provide a quick introduction …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Learn how easy it is to get started with asynchronous programming in Python.&lt;/p&gt;
&lt;p&gt;The talk will provide a quick introduction to the basic concepts of async programming and demonstrate the techniques based on a Telegram antispam bot using the async library Pyrogram.&lt;/p&gt;
&lt;p&gt;The talk will provide a quick introduction to the basic concepts of async programming and demonstrate the techniques based on a Telegram antispam bot using the async library Pyrogram.&lt;/p&gt;
&lt;p&gt;The async event loop will be covered, co-routines, the concept of awaiting input and how to think &amp;quot;async&amp;quot;.&lt;/p&gt;
&lt;p&gt;The code for the project is available as a real working product at &lt;a class="reference external" href="https://github.com/eGenix/egenix-telegram-antispam-bot"&gt;https://github.com/eGenix/egenix-telegram-antispam-bot&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Slides of the talk are available at: &lt;a class="reference external" href="https://downloads.egenix.com/python/PyCon-UK-2022-Talk-Intro-to-Async.pdf"&gt;https://downloads.egenix.com/python/PyCon-UK-2022-Talk-Intro-to-Async.pdf&lt;/a&gt;&lt;/p&gt;
</content><category term="PyCon UK 2022"></category></entry><entry><title>Do not trust my [or any] computational research.</title><link href="https://pyvideo.org/pycon-uk-2022/do-not-trust-my-or-any-computational-research.html" rel="alternate"></link><published>2022-09-17T00:00:00+00:00</published><updated>2022-09-17T00:00:00+00:00</updated><author><name>Vincent Knight</name></author><id>tag:pyvideo.org,2022-09-17:/pycon-uk-2022/do-not-trust-my-or-any-computational-research.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In research, peer review is considered a pillar of trust. This is problematic. A lot of research is, at best, not reproducible or, sometimes, even wrong, despite peer review. This talk will discuss the origins of peer review, problems with peer review and some things that could be better …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In research, peer review is considered a pillar of trust. This is problematic. A lot of research is, at best, not reproducible or, sometimes, even wrong, despite peer review. This talk will discuss the origins of peer review, problems with peer review and some things that could be better.&lt;/p&gt;
&lt;p&gt;In this talk I will describe the research publication pipeline that is based on peer review. Peer review in some sense resembles what happens on an open source software pull request but it is also fundamentally different. For example it is often a somewhat secretive affair with ambiguous comments from referees with no room for discussion.&lt;/p&gt;
&lt;p&gt;I will discuss the historic origins of peer review and highlight a number of problems that are prevalent as a result.&lt;/p&gt;
&lt;p&gt;This will lead to thoughts on the difference between trust and confidence. Should we trust research which implies trusting the peer review process, or should we instead aim to have confidence in the research? And, if that's the goal, how can that be achieved?&lt;/p&gt;
&lt;p&gt;I will include some examples of specific peer review processes from pure mathematics (my original field of research) but also discuss topics related to the wider software development industry (such as zero-trust security).&lt;/p&gt;
&lt;p&gt;This will conclude with a hopefully optimistic answer to the question: &amp;quot;If we were inventing the research publication pipeline today, what would it look like?&amp;quot;.&lt;/p&gt;
&lt;p&gt;I hope that this talk will not only be of interest to Python users doing research but also to the wider Python community who might be interested in understanding what &amp;quot;trust the research&amp;quot; means.&lt;/p&gt;
</content><category term="PyCon UK 2022"></category></entry><entry><title>Giving Python to non-developers: A real-life story</title><link href="https://pyvideo.org/pycon-uk-2022/giving-python-to-non-developers-a-real-life-story.html" rel="alternate"></link><published>2022-09-17T00:00:00+00:00</published><updated>2022-09-17T00:00:00+00:00</updated><author><name>Philippe Masson</name></author><id>tag:pyvideo.org,2022-09-17:/pycon-uk-2022/giving-python-to-non-developers-a-real-life-story.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Learn how JPMorgan gave access to Python to hundreds of non-developers: what infrastructure was required, what training was given and how to shift the culture.  Lessons learnt from the human side of Python.&lt;/p&gt;
&lt;p&gt;When JPMorgan decided to give Python development tools to hundreds of non-developers, it was a no-brainer …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Learn how JPMorgan gave access to Python to hundreds of non-developers: what infrastructure was required, what training was given and how to shift the culture.  Lessons learnt from the human side of Python.&lt;/p&gt;
&lt;p&gt;When JPMorgan decided to give Python development tools to hundreds of non-developers, it was a no-brainer.&lt;/p&gt;
&lt;p&gt;Given the huge amounts of financial data available and the tools becoming easier to use, it made sense to allow the business to extract relevant information directly themselves.&lt;/p&gt;
&lt;p&gt;But how?&lt;/p&gt;
&lt;p&gt;Clearly the infrastructure had to be there: a Python development &amp;amp; runtime environment, access to data and to JPMorgan analytics.&lt;/p&gt;
&lt;p&gt;But having the infrastructure ready was only the beginning.  We needed training.  It needed to be relevant, rewarding, and even fun.&lt;/p&gt;
&lt;p&gt;And what about the culture?  How do we get non-developers to take their first plunge into Python, and then get into good development habits, without becoming full-time developers?&lt;/p&gt;
&lt;p&gt;This is the story of our on-going journey.  We learnt some important lessons along the way.  We’ll share them so that you too can give Python to non-developers.&lt;/p&gt;
</content><category term="PyCon UK 2022"></category></entry><entry><title>HPy: a better C API for Python</title><link href="https://pyvideo.org/pycon-uk-2022/hpy-a-better-c-api-for-python.html" rel="alternate"></link><published>2022-09-17T00:00:00+00:00</published><updated>2022-09-17T00:00:00+00:00</updated><author><name>Ronan Lamy</name></author><id>tag:pyvideo.org,2022-09-17:/pycon-uk-2022/hpy-a-better-c-api-for-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;HPy is a new C API for Python. Unlike the standard one, it isn't tied to CPython implementation details. It is therefore fully compatible with alternate implementations and with any future changes to CPython itself.&lt;/p&gt;
&lt;p&gt;The official Python C API is specific to the current implementation of CPython. It …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;HPy is a new C API for Python. Unlike the standard one, it isn't tied to CPython implementation details. It is therefore fully compatible with alternate implementations and with any future changes to CPython itself.&lt;/p&gt;
&lt;p&gt;The official Python C API is specific to the current implementation of CPython. It has served us well and forms the basis upon which our entire extension ecosystem rests.
However, it exposes a lot of internal details which makes it hard to implement it for other Python implementations (e.g. PyPy, GraalPython, Jython, IronPython, etc.), and
prevents major evolutions of CPython itself, such as using a GC instead of refcounting, or removing the GIL.&lt;/p&gt;
&lt;p&gt;This is where HPy comes in. It's a new C API designed from the ground up according to the following goals:
* running much faster on alternate implementations, and at native speed on CPython
* making it possible to compile a single binary which runs unmodified on all supported Python implementations and versions
* being simpler and more manageable than the Python/C API
* providing an improved debugging experience.&lt;/p&gt;
&lt;p&gt;We'll discuss its current status and show how existing extensions can be gradually ported to it.&lt;/p&gt;
</content><category term="PyCon UK 2022"></category></entry><entry><title>Living With Technical Debt: Acknowledge It, Specify It, Reduce It</title><link href="https://pyvideo.org/pycon-uk-2022/living-with-technical-debt-acknowledge-it-specify-it-reduce-it.html" rel="alternate"></link><published>2022-09-17T00:00:00+00:00</published><updated>2022-09-17T00:00:00+00:00</updated><author><name>Reka Horvath</name></author><id>tag:pyvideo.org,2022-09-17:/pycon-uk-2022/living-with-technical-debt-acknowledge-it-specify-it-reduce-it.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Technical debt is the elephant in the room: complex engineering problems meet awkward organizational issues. To make it more tangible, we'll divide it into 3 categories and discuss engineering and business strategies for each:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Gather info about &lt;strong&gt;vague&lt;/strong&gt; issues.&lt;/li&gt;
&lt;li&gt;Express &lt;strong&gt;antipatterns&lt;/strong&gt; as code.&lt;/li&gt;
&lt;li&gt;Automatically fix &lt;strong&gt;straightforward&lt;/strong&gt; issues.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;## Summary&lt;/p&gt;
&lt;p&gt;In …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Technical debt is the elephant in the room: complex engineering problems meet awkward organizational issues. To make it more tangible, we'll divide it into 3 categories and discuss engineering and business strategies for each:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Gather info about &lt;strong&gt;vague&lt;/strong&gt; issues.&lt;/li&gt;
&lt;li&gt;Express &lt;strong&gt;antipatterns&lt;/strong&gt; as code.&lt;/li&gt;
&lt;li&gt;Automatically fix &lt;strong&gt;straightforward&lt;/strong&gt; issues.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;## Summary&lt;/p&gt;
&lt;p&gt;In this talk, we make tech debt more tangible by dividing it into 3 categories and showing strategies for each:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;vague issues&lt;/li&gt;
&lt;li&gt;antipatterns&lt;/li&gt;
&lt;li&gt;fixable problems&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In each category, we'll discuss not just the technical complexities, but also the business impact and the organizational challenges. We'll introduce several tools to mitigate the consequences and to eliminate parts of the tech debt.&lt;/p&gt;
&lt;p&gt;## Vague Issues: Acknowledge Them&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Make it visible when working with the code.&lt;/li&gt;
&lt;li&gt;Make it visible when taking business decisions.&lt;/li&gt;
&lt;li&gt;Acknowledge the business impact: longer development time, higher probability of bugs.&lt;/li&gt;
&lt;li&gt;Encourage open and constructive discussion.&lt;/li&gt;
&lt;li&gt;Gather info about this specific issue and recognize general patterns.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;## Identify Antipatterns And Express Them As Code&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;General vs specific to your codebase: Not an either - or, but rather a continuum.&lt;/li&gt;
&lt;li&gt;Express antipatterns as code.&lt;/li&gt;
&lt;li&gt;Find similar issues across the whole code base.&lt;/li&gt;
&lt;li&gt;Avoid adding even more debt of the same kind.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;## Automatically fix straightforward issues&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;If the antipattern can be codified, perhaps the fix can be codified as well.&lt;/li&gt;
&lt;li&gt;Roll out fixes with large-scale changes.&lt;/li&gt;
&lt;li&gt;Risks of large-scale changes.&lt;/li&gt;
&lt;li&gt;Avoid re-adding the same kind of debt.&lt;/li&gt;
&lt;/ul&gt;
</content><category term="PyCon UK 2022"></category></entry><entry><title>Meta Generators: Playing Safe with Long Sequences</title><link href="https://pyvideo.org/pycon-uk-2022/meta-generators-playing-safe-with-long-sequences.html" rel="alternate"></link><published>2022-09-17T00:00:00+00:00</published><updated>2022-09-17T00:00:00+00:00</updated><author><name>Alastair Stanley</name></author><id>tag:pyvideo.org,2022-09-17:/pycon-uk-2022/meta-generators-playing-safe-with-long-sequences.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Let’s take a closer look at generators and why you may not be getting your expected improvements. Sometimes the memory benefit is negated by necessity; sometimes it's by mistake. &amp;quot;Meta generators&amp;quot; can solve this problem, allowing a much wider range of safe, fast operations on very large generators …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Let’s take a closer look at generators and why you may not be getting your expected improvements. Sometimes the memory benefit is negated by necessity; sometimes it's by mistake. &amp;quot;Meta generators&amp;quot; can solve this problem, allowing a much wider range of safe, fast operations on very large generators.&lt;/p&gt;
&lt;p&gt;Through this talk, I want to highlight the dangers of trying to write very large or theoretically infinite Python generators to lists (obvious), and the ease with which it can be done accidentally (less obvious).&lt;/p&gt;
&lt;p&gt;The talk will start with an example of when one might want to use some very large generators to solve a problem. I will discuss some common operations that we use to combine generators (chain, product, zip, etc.), and then go into detail about why some of these are &amp;quot;safe&amp;quot; to use on very large generators (chain, zip), while others are very much not (product).&lt;/p&gt;
&lt;p&gt;The second part of the talk, which will explain our solution to this problem – &amp;quot;meta-generators&amp;quot; – also doubles as a recommendation for a future language feature.&lt;/p&gt;
</content><category term="PyCon UK 2022"></category></entry><entry><title>Property-Based Testing the Python Way</title><link href="https://pyvideo.org/pycon-uk-2022/property-based-testing-the-python-way.html" rel="alternate"></link><published>2022-09-17T00:00:00+00:00</published><updated>2022-09-17T00:00:00+00:00</updated><author><name>Emma Saroyan</name></author><id>tag:pyvideo.org,2022-09-17:/pycon-uk-2022/property-based-testing-the-python-way.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;What if I told you that you could write simpler tests but get better results?&lt;/p&gt;
&lt;p&gt;What if I told you can automatically generate your test data?&lt;/p&gt;
&lt;p&gt;This may sound difficult to your traditional testing approach but can be easily done with Hypothesis, the Python library used for property-based testing …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;What if I told you that you could write simpler tests but get better results?&lt;/p&gt;
&lt;p&gt;What if I told you can automatically generate your test data?&lt;/p&gt;
&lt;p&gt;This may sound difficult to your traditional testing approach but can be easily done with Hypothesis, the Python library used for property-based testing.&lt;/p&gt;
&lt;p&gt;This is an introductory talk about property-based testing. The talk requires some previous knowledge about testing to make the most out of it but if you are new and curious I think you would get something out of it.&lt;/p&gt;
&lt;p&gt;The talk approaches a simple problem from two different testing perspectives. Giving you an idea about property-based testing and how it’s different from the traditional approach with Python.&lt;/p&gt;
&lt;p&gt;The main focus of the topic would be Hypothesis and how you can achieve your testing goals with it.&lt;/p&gt;
&lt;p&gt;By the end of this talk you would have a solid understanding of property-based testing with Hypothesis, that would help you decide which testing approach fits your need.&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;Given below is a rough overview of the talk structure:&lt;/dt&gt;
&lt;dd&gt;The testing problem.
The traditional approach.
Cons of traditional approach.
What property-based testing.
Intro to Hypothesis.
Same problem solution with Hypothesis.
Why choose Hypothesis as a go-to property based testing tool.
Parameterized testing with Pytest vs Hypothesis approach.
When or when not to use property based testing.
How you can adopt &lt;cite&gt;hypothesis&lt;/cite&gt; in your code base.&lt;/dd&gt;
&lt;/dl&gt;
</content><category term="PyCon UK 2022"></category></entry><entry><title>Rapid prototyping in BBC News with Python and AWS</title><link href="https://pyvideo.org/pycon-uk-2022/rapid-prototyping-in-bbc-news-with-python-and-aws.html" rel="alternate"></link><published>2022-09-17T00:00:00+00:00</published><updated>2022-09-17T00:00:00+00:00</updated><author><name>Ben Nuttall</name></author><id>tag:pyvideo.org,2022-09-17:/pycon-uk-2022/rapid-prototyping-in-bbc-news-with-python-and-aws.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;BBC News Labs is an innovation team within BBC R&amp;amp;D, working with journalists and production teams to build prototypes to demonstrate and trial new ideas for ways to help journalists or bring new experiences to audiences. We make use of modern cloud technologies to accelerate delivery and reduce …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;BBC News Labs is an innovation team within BBC R&amp;amp;D, working with journalists and production teams to build prototypes to demonstrate and trial new ideas for ways to help journalists or bring new experiences to audiences. We make use of modern cloud technologies to accelerate delivery and reduce friction.&lt;/p&gt;
&lt;p&gt;BBC News Labs is an innovation team within BBC R&amp;amp;D, working with journalists and production teams to build prototypes to demonstrate and trial new ideas for ways to help journalists or bring new experiences to audiences.&lt;/p&gt;
&lt;p&gt;We work in short project cycles to research and build prototypes. We have worked with the BBC's flagship radio news programme production team to enrich programme timelines with metadata to provide enhanced experiences to the audience. We are currently working with local radio teams around the UK to provide the means to capture highlights in live radio for re-use and for social media, reducing the workload for producers, and getting more mileage from linear broadcast programmes.&lt;/p&gt;
&lt;p&gt;Working in short cycles, it's important for us to be able to quickly build processing pipelines connected to BBC services, test and iterate on ideas and demonstrate working prototypes. We make use of modern cloud technologies to accelerate delivery and reduce friction.&lt;/p&gt;
&lt;p&gt;In this talk I will share our ways of working, our ideation and research methods, and the tools we use to be able to build, deploy and iterate quickly, the BBC's cloud deployment platform, and our use of serverless AWS services such as Lambda, Step Functions and Serverless Postgres.&lt;/p&gt;
</content><category term="PyCon UK 2022"></category></entry><entry><title>Saturday Lightning Talks</title><link href="https://pyvideo.org/pycon-uk-2022/saturday-lightning-talks.html" rel="alternate"></link><published>2022-09-17T00:00:00+00:00</published><updated>2022-09-17T00:00:00+00:00</updated><author><name>Unknown</name></author><id>tag:pyvideo.org,2022-09-17:/pycon-uk-2022/saturday-lightning-talks.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Lightning Talks&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Sean Sabbage: ADHD &amp;amp; Me&lt;/li&gt;
&lt;li&gt;Alastair Stanley: How to walk in a straight line&lt;/li&gt;
&lt;li&gt;Alex Carney: Introducing Esbonio&lt;/li&gt;
&lt;li&gt;Larry Hastings: Give your programs appeal!&lt;/li&gt;
&lt;li&gt;Adrian Covaci: The secret life of Monads&lt;/li&gt;
&lt;li&gt;Heather Williams: Chaos Game&lt;/li&gt;
&lt;li&gt;Colin Moore-Hill: Build communities&lt;/li&gt;
&lt;li&gt;Max Kahan: SnakeViz will get you a promotion&lt;/li&gt;
&lt;li&gt;Mark …&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Lightning Talks&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Sean Sabbage: ADHD &amp;amp; Me&lt;/li&gt;
&lt;li&gt;Alastair Stanley: How to walk in a straight line&lt;/li&gt;
&lt;li&gt;Alex Carney: Introducing Esbonio&lt;/li&gt;
&lt;li&gt;Larry Hastings: Give your programs appeal!&lt;/li&gt;
&lt;li&gt;Adrian Covaci: The secret life of Monads&lt;/li&gt;
&lt;li&gt;Heather Williams: Chaos Game&lt;/li&gt;
&lt;li&gt;Colin Moore-Hill: Build communities&lt;/li&gt;
&lt;li&gt;Max Kahan: SnakeViz will get you a promotion&lt;/li&gt;
&lt;li&gt;Mark Shannon: How you can help make Python 3.12 faster&lt;/li&gt;
&lt;li&gt;Eshwari Chandrashekhar: Build vs Buy&lt;/li&gt;
&lt;/ol&gt;
</content><category term="PyCon UK 2022"></category></entry><entry><title>Saturday Welcome Session</title><link href="https://pyvideo.org/pycon-uk-2022/saturday-welcome-session.html" rel="alternate"></link><published>2022-09-17T00:00:00+00:00</published><updated>2022-09-17T00:00:00+00:00</updated><author><name>Unknown</name></author><id>tag:pyvideo.org,2022-09-17:/pycon-uk-2022/saturday-welcome-session.html</id><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Welcome&lt;/p&gt;
&lt;p&gt;Welcome&lt;/p&gt;
</content><category term="PyCon UK 2022"></category></entry><entry><title>Using python to create a prototype for web accessibility research</title><link href="https://pyvideo.org/pycon-uk-2022/using-python-to-create-a-prototype-for-web-accessibility-research.html" rel="alternate"></link><published>2022-09-17T00:00:00+00:00</published><updated>2022-09-17T00:00:00+00:00</updated><author><name>Peter Johnson</name></author><id>tag:pyvideo.org,2022-09-17:/pycon-uk-2022/using-python-to-create-a-prototype-for-web-accessibility-research.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;According to the WHO over 1 billion people live with some form of disability; almost everyone is likely to experience some form of disability at some point. This talk discusses the importance of web accessibility and how I used python to develop a tool that ensembles multiple accessibility evaluation …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;According to the WHO over 1 billion people live with some form of disability; almost everyone is likely to experience some form of disability at some point. This talk discusses the importance of web accessibility and how I used python to develop a tool that ensembles multiple accessibility evaluation tools.&lt;/p&gt;
&lt;p&gt;The web was designed to be accessible to all people regardless of their ability, use of hardware, software, language, and location. Web accessibility means designing websites, tools, and technology to be inclusive to people with disabilities so that they can perceive, understand, navigate, and interact with the web and contribute to it. Web accessibility evaluation means verifying that this is the case.&lt;/p&gt;
&lt;p&gt;The process of automatic accessibility evaluation is of interest to accessibility practitioners and researchers given that manual evaluation requires a lot of time and effort. My research has shown that most accessibility evaluations are conducted using a single evaluation tool.
This talk discusses how using the python ecosystem has allowed the development of a prototype to ensemble the results from multiple automated accessibility evaluation tools. The prototype generated a HTML report which aggregated results from the different evaluation tools removing the reliance of the results from a single tool.&lt;/p&gt;
&lt;p&gt;Python’s rich set of libraries such as wxPython, matplotlib, numpy and pandas made this project possible within a short timeframe.&lt;/p&gt;
&lt;p&gt;The results from developing this prototype tool was included in research published at HCI International 2022 - &lt;a class="reference external" href="https://link.springer.com/chapter/10.1007/978-3-031-06417-3_71"&gt;https://link.springer.com/chapter/10.1007/978-3-031-06417-3_71&lt;/a&gt;
This talk hopes to inspire others to use python to conduct research and improve web accessibility.&lt;/p&gt;
</content><category term="PyCon UK 2022"></category></entry><entry><title>Vectorise all the things! How basic linear algebra can speed up your data science code</title><link href="https://pyvideo.org/pycon-uk-2022/vectorise-all-the-things-how-basic-linear-algebra-can-speed-up-your-data-science-code.html" rel="alternate"></link><published>2022-09-17T00:00:00+00:00</published><updated>2022-09-17T00:00:00+00:00</updated><author><name>Jodie Burchell</name></author><id>tag:pyvideo.org,2022-09-17:/pycon-uk-2022/vectorise-all-the-things-how-basic-linear-algebra-can-speed-up-your-data-science-code.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Do you feel like your data science code is horribly inefficient, but you don’t know how to make things faster? Fear not! In this talk, we’ll speed up some common operations using tricks from linear algebra - all within the comfort of the Python ecosystem.&lt;/p&gt;
&lt;p&gt;Have you found …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Do you feel like your data science code is horribly inefficient, but you don’t know how to make things faster? Fear not! In this talk, we’ll speed up some common operations using tricks from linear algebra - all within the comfort of the Python ecosystem.&lt;/p&gt;
&lt;p&gt;Have you found that your data science code works beautifully on a few dozen test rows, but leaves you wondering how to spend the next couple of hours after you start looping through your full data set? Are you only familiar with Python, and wish there was a way to speed things up without subjecting yourself to learning C? In this talk, I will show you some simple tricks, borrowed from linear algebra, which can give you significant performance gains in your Python data science code. I will gently take you through the basics of linear algebra, explaining core operations such as matrix addition, subtraction and multiplication, scalar multiplication and the dot product. I will then show you some examples of how you can easily utilise these concepts in your machine learning code to speed up common data science operations such as distance calculations, classification tasks and finding nearest neighbours.&lt;/p&gt;
</content><category term="PyCon UK 2022"></category></entry><entry><title>Exception Groups and except*</title><link href="https://pyvideo.org/pycon-uk-2022/exception-groups-and-except.html" rel="alternate"></link><published>2022-09-16T00:00:00+00:00</published><updated>2022-09-16T00:00:00+00:00</updated><author><name>Irit Katriel</name></author><id>tag:pyvideo.org,2022-09-16:/pycon-uk-2022/exception-groups-and-except.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python 3.11 introduces new features that make it possible to raise and handle multiple unrelated exceptions. This talk briefly covers what they do and how they work, and answers a frequently asked question: why we needed to add new language syntax to handle exception groups.&lt;/p&gt;
&lt;p&gt;Python 3.11 …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python 3.11 introduces new features that make it possible to raise and handle multiple unrelated exceptions. This talk briefly covers what they do and how they work, and answers a frequently asked question: why we needed to add new language syntax to handle exception groups.&lt;/p&gt;
&lt;p&gt;Python 3.11 introduces new features that make it possible to raise and handle multiple unrelated exceptions at the same time (see PEP 654). This talk, given by one of the authors of PEP 654, will describe how they work and some of the design decisions we made while developing these features. In particular, why we needed to add the new syntax except* to handle exception groups.&lt;/p&gt;
</content><category term="PyCon UK 2022"></category></entry><entry><title>Fish and Chips and Apache Kafka®</title><link href="https://pyvideo.org/pycon-uk-2022/fish-and-chips-and-apache-kafkar.html" rel="alternate"></link><published>2022-09-16T00:00:00+00:00</published><updated>2022-09-16T00:00:00+00:00</updated><author><name>Tibs</name></author><id>tag:pyvideo.org,2022-09-16:/pycon-uk-2022/fish-and-chips-and-apache-kafkar.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Apache Kafka® is the de facto standard in the data streaming world for sending
messages from multiple producers to multiple consumers, in a fast, reliable
and scalable manner.&lt;/p&gt;
&lt;p&gt;Come and learn the basic concepts and how to use it, by modelling a fish and
chips shop!&lt;/p&gt;
&lt;p&gt;Handling large numbers …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Apache Kafka® is the de facto standard in the data streaming world for sending
messages from multiple producers to multiple consumers, in a fast, reliable
and scalable manner.&lt;/p&gt;
&lt;p&gt;Come and learn the basic concepts and how to use it, by modelling a fish and
chips shop!&lt;/p&gt;
&lt;p&gt;Handling large numbers of events is an increasing challenge in our cloud
centric world. For instance, in the IoT (Internet of Things) industry, devices
are all busy announcing their current state, which we want to
manage and report on, and meanwhile we want to send firmware and other updates
&lt;em&gt;back&lt;/em&gt; to specific groups of devices.&lt;/p&gt;
&lt;p&gt;Traditional messaging solutions don't scale well for this type of problem. We
want to guarantee not to lose events, to handle high volumes in a timely
manner, and to be able to distribute message reception or production across
multiple consumers or producers (compare to sharding for database reads).&lt;/p&gt;
&lt;p&gt;As it turns out, there is a good solution available: Apache Kafka® - it
provides all the capabilities we are looking for.&lt;/p&gt;
&lt;p&gt;In this talk, rather than considering some imaginary IoT scenario, I'm going
to look at how one might use Kafka to model the events required to run a fish
and chip shop: ordering (plaice and chips for me, please), food preparation,
accounting and so on.&lt;/p&gt;
&lt;p&gt;I'll demonstrate handling of multiple producers and consumers, automatic routing of
events as new consumers are added, persistence, which allows a new consumer to
start consuming events from the past, and more.&lt;/p&gt;
</content><category term="PyCon UK 2022"></category></entry><entry><title>Friday Lightning Talks</title><link href="https://pyvideo.org/pycon-uk-2022/friday-lightning-talks.html" rel="alternate"></link><published>2022-09-16T00:00:00+00:00</published><updated>2022-09-16T00:00:00+00:00</updated><author><name>Unknown</name></author><id>tag:pyvideo.org,2022-09-16:/pycon-uk-2022/friday-lightning-talks.html</id><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Lightning Talks&lt;/p&gt;
&lt;p&gt;Lightning Talks&lt;/p&gt;
</content><category term="PyCon UK 2022"></category></entry><entry><title>Friday Welcome Session</title><link href="https://pyvideo.org/pycon-uk-2022/friday-welcome-session.html" rel="alternate"></link><published>2022-09-16T00:00:00+00:00</published><updated>2022-09-16T00:00:00+00:00</updated><author><name>Unknown</name></author><id>tag:pyvideo.org,2022-09-16:/pycon-uk-2022/friday-welcome-session.html</id><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Welcome&lt;/p&gt;
&lt;p&gt;Welcome&lt;/p&gt;
</content><category term="PyCon UK 2022"></category></entry><entry><title>How to wag a dog</title><link href="https://pyvideo.org/pycon-uk-2022/how-to-wag-a-dog.html" rel="alternate"></link><published>2022-09-16T00:00:00+00:00</published><updated>2022-09-16T00:00:00+00:00</updated><author><name>Daniele Procida</name></author><id>tag:pyvideo.org,2022-09-16:/pycon-uk-2022/how-to-wag-a-dog.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Dogs wag their tails. When the opposite happens, it represents a disturbing, problematic reversal of the proper order. But not in software and its documentation! I believe the tail of documentation can and should wag the dog of software, and I'll show just how powerful this tail can be …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Dogs wag their tails. When the opposite happens, it represents a disturbing, problematic reversal of the proper order. But not in software and its documentation! I believe the tail of documentation can and should wag the dog of software, and I'll show just how powerful this tail can be.&lt;/p&gt;
&lt;p&gt;The tail of the dog expresses its disposition and reflects its health, and we expect it to be a reliable outward sign of what's going on inside the dog. We expect the same kind of relationship between software and documentation: that documentation should reliably tell us about the software, providing clear and up-to-date insights into it.&lt;/p&gt;
&lt;p&gt;I think that this is a naïve view of both dogs and software.&lt;/p&gt;
&lt;p&gt;I will discuss, with examples, why it's a problematic idea for documentation. It's not actually true, and failing to recognise this is one reason why documentation is often so bad. Recognising the true nature of the relationship on the other hand puts documentation authors in a much more powerful position than they are usually understood to have - and that's something they can use to their advantage.&lt;/p&gt;
&lt;p&gt;In other words, the tail is already wagging the dog, and that's the way it should be.&lt;/p&gt;
&lt;p&gt;This talk is about documentation, but it's also an exploration and critique of some commonly-held ideas about the relationship between supposedly active and creative activities - of which making software is one example - and those seen as more passive and interpretive ones - like documentation.&lt;/p&gt;
&lt;p&gt;Along the way, this talk will discuss topics including: the relationship between seeing and looking, riding on motorbikes, visiting museums, and why we should reconsider now-discredited pre-Newtonian theories of vision.&lt;/p&gt;
&lt;p&gt;We'll get from dogs and their tales to an approach to documentation that improves &lt;strong&gt;both&lt;/strong&gt; documentation and software, and gives us a tool for reassessing other patterns of work and life too.&lt;/p&gt;
</content><category term="PyCon UK 2022"></category></entry><entry><title>I hate writing tests, that's why I use Hypothesis</title><link href="https://pyvideo.org/pycon-uk-2022/i-hate-writing-tests-thats-why-i-use-hypothesis.html" rel="alternate"></link><published>2022-09-16T00:00:00+00:00</published><updated>2022-09-16T00:00:00+00:00</updated><author><name>Cheuk Ting Ho</name></author><id>tag:pyvideo.org,2022-09-16:/pycon-uk-2022/i-hate-writing-tests-thats-why-i-use-hypothesis.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Ok, I lied, I still write tests. But instead of the example-based tests that we normally write, have you heard of property-based testing? By using Hypothesis, instead of thinking about what data I should test it for, it will generate test data, including boundary cases, for you.&lt;/p&gt;
&lt;p&gt;In this …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Ok, I lied, I still write tests. But instead of the example-based tests that we normally write, have you heard of property-based testing? By using Hypothesis, instead of thinking about what data I should test it for, it will generate test data, including boundary cases, for you.&lt;/p&gt;
&lt;p&gt;In this talk, we will explore what is property-based testing and why it can do a lot of heavy lifting in writing tests for us. As a contributor, I will introduce Hypothesis, a Python library that can help perform property-based tests with ease.&lt;/p&gt;
&lt;p&gt;At the start of the talk, we will understand the power of property-based tests, what is it, how is it different from what we “normally do” - testing by example, and why is it useful in testing our code. This will be followed by demonstrations using Hypothesis. With a few examples, we will have a glimpse of how to create strategies - recipes for describing the test data you want to generate.&lt;/p&gt;
&lt;p&gt;After that, we will also explore the Ghostwriters in Hypothesis which will actually write the test for you.&lt;/p&gt;
&lt;p&gt;This talk is for Pythonistas who are new to property-based testing and found thinking of what parameters to use for testing a difficult task. This talk may provide them with a new approach to writing tests, which will be more efficient for some cases.&lt;/p&gt;
</content><category term="PyCon UK 2022"></category></entry><entry><title>It's Your Call(able): a tour of Python's callable (function) interface</title><link href="https://pyvideo.org/pycon-uk-2022/its-your-callable-a-tour-of-pythons-callable-function-interface.html" rel="alternate"></link><published>2022-09-16T00:00:00+00:00</published><updated>2022-09-16T00:00:00+00:00</updated><author><name>Dom Weldon</name></author><id>tag:pyvideo.org,2022-09-16:/pycon-uk-2022/its-your-callable-a-tour-of-pythons-callable-function-interface.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A deep dive into python functions and the callable interface. We take a tour into everything that happens on on a “def” line and when you call the resulting function. We'll also explore how to harness detailed function metadata, and how to hack the decorator pattern.&lt;/p&gt;
&lt;p&gt;Functions are fundamental …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A deep dive into python functions and the callable interface. We take a tour into everything that happens on on a “def” line and when you call the resulting function. We'll also explore how to harness detailed function metadata, and how to hack the decorator pattern.&lt;/p&gt;
&lt;p&gt;Functions are fundamental to python, and are amongst the first features of python that most users learn. We define a function with parameters, and call it arguments to create a callable object, which then returns a value.&lt;/p&gt;
&lt;p&gt;However, there is more to this callable interface than meets the eye, and there are lots of useful and powerful things we can do with callables in python. You may have come across some of these already: (anonymous) lambda functions, the __call__ magic method, the decorator pattern, the __doc__ property, and modules like functools and inspect which provide detailed about functions and allow us to alter functions at runtime. The now-retired Python 3.6 release added typing __annotations__ to this mix, and opened up a new world of metadata to use alongside your callables.&lt;/p&gt;
&lt;p&gt;Lots of libraries, particularly web frameworks like Flask, Django, and FastAPI, and testing toolkits like pytest, use this callable interface to implement their API. As developers, understanding these advanced features of python’s callable interface is particularly useful when writing generic, automation focused code, and understanding how such prominent libraries work.&lt;/p&gt;
&lt;p&gt;This talk gives a deep-dive into python functions, and the associated callable interface. We’ll start with a quick tour of the basics, before covering python’s more advanced callable features, and exploring some examples about how, why, and when you may wish to use these features yourself.&lt;/p&gt;
</content><category term="PyCon UK 2022"></category></entry><entry><title>PyScript and my journey to the Web</title><link href="https://pyvideo.org/pycon-uk-2022/pyscript-and-my-journey-to-the-web.html" rel="alternate"></link><published>2022-09-16T00:00:00+00:00</published><updated>2022-09-16T00:00:00+00:00</updated><author><name>Scott Irwin</name></author><id>tag:pyvideo.org,2022-09-16:/pycon-uk-2022/pyscript-and-my-journey-to-the-web.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;While PyScript is not yet ready for production use, it has provided an opportunity for a back-end Python developer like me to learn more about front-end web development. This talk chronicles how I used PyScript in my journey to better understand how to build web applications in Python!&lt;/p&gt;
&lt;p&gt;This …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;While PyScript is not yet ready for production use, it has provided an opportunity for a back-end Python developer like me to learn more about front-end web development. This talk chronicles how I used PyScript in my journey to better understand how to build web applications in Python!&lt;/p&gt;
&lt;p&gt;This talk chronicles how I used Python to journey from web ‘noob’ to something greater.&lt;/p&gt;
&lt;p&gt;While I’ve been using Python to develop back-end services for several years, I had not previously developed any web applications. PyScript presented an excellent opportunity for me to leverage my existing Python knowledge to help fill this gap in my skills.&lt;/p&gt;
&lt;p&gt;PyScript is a framework that enables developers to create Python applications in the browser using HTML's interface and the power of Pyodide, WebAssembly (WASM), and other modern web technologies. It was announced by Peter Wang during his recent keynote at PyCon US 2022. While it is classed as “very alpha” and not yet suitable for production, it has proven to be a useful tool for exploration and learning.&lt;/p&gt;
</content><category term="PyCon UK 2022"></category></entry><entry><title>Unexploded Bombs</title><link href="https://pyvideo.org/pycon-uk-2022/unexploded-bombs.html" rel="alternate"></link><published>2022-09-16T00:00:00+00:00</published><updated>2022-09-16T00:00:00+00:00</updated><author><name>Hannah Hazi</name></author><id>tag:pyvideo.org,2022-09-16:/pycon-uk-2022/unexploded-bombs.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Find the flaws in your codebase ... before they explode&lt;/p&gt;
&lt;p&gt;The SS Richard Montgomery is a ship with a strange history. Sunk in the mouth of the Thames Estuary during WWII, she's filled with an unknown number of explosives. There have been various attempts over the years to figure out …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Find the flaws in your codebase ... before they explode&lt;/p&gt;
&lt;p&gt;The SS Richard Montgomery is a ship with a strange history. Sunk in the mouth of the Thames Estuary during WWII, she's filled with an unknown number of explosives. There have been various attempts over the years to figure out the danger from this ship and potentially clear her - but so far, nothing has been done.&lt;/p&gt;
&lt;p&gt;Every codebase has its own unexploded bombs. potentially serious problems lurking beneath the surface of our code. How can we identify and tackle them? Software is just as vital to our safety as other kinds of engineering - I'll delve into some famous cases such as the Therac-25 incidents to show what can go wrong when we don't appreciate this.&lt;/p&gt;
&lt;p&gt;Let's use the Richard Montgomery as a metaphor to explore ways to make our code safer and more robust. Together, we can develop into software professionals and clear up problems in advance. &lt;em&gt;Before&lt;/em&gt; we set anything on fire.&lt;/p&gt;
</content><category term="PyCon UK 2022"></category></entry></feed>