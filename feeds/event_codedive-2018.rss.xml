<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org - code::dive 2018</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Wed, 07 Nov 2018 00:00:00 +0000</lastBuildDate><item><title>Python as C++’s limiting case</title><link>https://pyvideo.org/codedive-2018/python-as-cs-limiting-case.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The Python language’s memory model can be deduced from first principles: simply take modern C++ conventions and drive their safety and generality to infinity. But this limiting case generates its own compromises and opens its own categories of possible runtime errors. We will explore the position Python has staked out in the language design space of correctness versus performance, the choices Python programmers make when they need to move closer to C++, and the ways that the C++ community keeps adopting conventions that look suspiciously like Python.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Brandon Rhodes</dc:creator><pubDate>Wed, 07 Nov 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-11-07:/codedive-2018/python-as-cs-limiting-case.html</guid><category>code::dive 2018</category></item></channel></rss>