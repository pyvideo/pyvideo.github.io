<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_ashwini-oruganti.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2017-05-20T00:00:00+00:00</updated><entry><title>pyca/tls</title><link href="https://pyvideo.org/pyninsula-2017/pycatls.html" rel="alternate"></link><published>2017-03-26T00:00:00+00:00</published><updated>2017-03-26T00:00:00+00:00</updated><author><name>Ashwini Oruganti</name></author><id>tag:pyvideo.org,2017-03-26:pyninsula-2017/pycatls.html</id><summary type="html"></summary></entry><entry><title>Designing secure APIs with state machines</title><link href="https://pyvideo.org/pycon-us-2017/designing-secure-apis-with-state-machines.html" rel="alternate"></link><published>2017-05-20T00:00:00+00:00</published><updated>2017-05-20T00:00:00+00:00</updated><author><name>Ashwini Oruganti</name></author><id>tag:pyvideo.org,2017-05-20:pycon-us-2017/designing-secure-apis-with-state-machines.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Did you ever need to create an application whose behavior varies with
its state, while still presenting a consistent interface to its callers?
A good, layered design using state machines can help avoid the tedious
'if' checks for flags, and ensure that if your code runs at all, it will
run with all the required values initialized. I will demonstrate this
with examples, and talk about some available tools and libraries to
build state machines in Python.&lt;/p&gt;
&lt;p&gt;I will also discuss how to effectively use the process of threat
modeling to build secure web applications. Threat modeling is a computer
security technique that helps you better understand the systems you
create, identify attacks, and build defenses. I will talk about things
that we, as software developers, can do to assess the security of our
applications in the real world through this process.&lt;/p&gt;
</summary></entry><entry><title>Introduction to HTTPS: A Comedy of Errors</title><link href="https://pyvideo.org/pybay-2016/introduction-to-https-a-comedy-of-errors.html" rel="alternate"></link><published>2016-08-20T00:00:00+00:00</published><updated>2016-08-20T00:00:00+00:00</updated><author><name>Ashwini Oruganti</name></author><id>tag:pyvideo.org,2016-08-20:pybay-2016/introduction-to-https-a-comedy-of-errors.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Given recent increases in hostile attacks on internet services and large scale surveillance operations by certain unnamed government organizations, security in our software is becoming ever more important. We'll give you an idea of how modern crypto works in web services and clients, look at some of the common flaws in these crypto implementations, and discuss recent developments in TLS.
​
Abstract
In this talk I'll explain what happens behind the scenes when we try to establish a secure connection to a web site.
I'll cover the common security flaws in popular TLS implementations like OpenSSL, and show how these issues can be avoided if we have a well-designed TLS implementation in a high level language like Python.&lt;/p&gt;
&lt;p&gt;Finally, I'll demonstrate and discuss how the API design of OpenSSL leads to application bugs, and a lack of abstract secure defaults leads to insecure applications.&lt;/p&gt;
&lt;p&gt;Bio
Ashwini is a Software Engineer at Eventbrite, and an open source developer living in San Francisco. In the past, she has worked on a pure Python TLS implementation through the Stripe Open Source Retreat, an asynchronous event-driven networking framework - Twisted, and a PHP implementation in RPython called HippyVM. She also served as a Director of the Python Software Foundation last year.&lt;/p&gt;
</summary></entry><entry><title>Dispelling The 'Genius Programmer' Myth Through Code Review</title><link href="https://pyvideo.org/djangocon-us-2016/dispelling-the-genius-programmer-myth-through-code-review.html" rel="alternate"></link><published>2016-08-10T00:00:00+00:00</published><updated>2016-08-10T00:00:00+00:00</updated><author><name>Ashwini Oruganti</name></author><id>tag:pyvideo.org,2016-08-10:djangocon-us-2016/dispelling-the-genius-programmer-myth-through-code-review.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;DjangoCon US 2016 - Dispelling The 'Genius Programmer' Myth Through Code Review by Ashwini Oruganti&lt;/p&gt;
&lt;p&gt;Open source libraries have high quality standards. And understandably so, since the more important and widely used a project becomes, the more essential it is to maintain it. But this at times affects one of the fundamental advantages of open source software - contributions. Strict quality requirements and harsh code reviews make the process of contributing patches discouraging, disappointing, and even stressful.&lt;/p&gt;
&lt;p&gt;In this talk, I will discuss tools and processes used by major Python libraries to maintain a high level of code quality and a robust code review culture. I will work through a list of people's code review fears with personal anecdotes, and how to deal with them and be more receptive to critical feedback. Through real examples taken from popular open source Python libraries, I will try to show what makes a good code review, what makes a bad code review, and what minor changes can turn the latter into the former.&lt;/p&gt;
</summary></entry><entry><title>Dispelling the 'Genius Programmer' myth through code review</title><link href="https://pyvideo.org/pycon-us-2016/ashwini-oruganti-dispelling-the-genius-programmer-myth-through-code-review-pycon-2016.html" rel="alternate"></link><published>2016-05-31T00:00:00+00:00</published><updated>2016-05-31T00:00:00+00:00</updated><author><name>Ashwini Oruganti</name></author><id>tag:pyvideo.org,2016-05-31:pycon-us-2016/ashwini-oruganti-dispelling-the-genius-programmer-myth-through-code-review-pycon-2016.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Speaker: Ashwini Oruganti&lt;/p&gt;
&lt;p&gt;We often hear people lament how hard it is to get a patch accepted to large Python open source libraries. Through a series of (often amusing) real-life anecdotes from Twisted, RPython, Cryptography, and examples from many other Python libraries, come learn about code reviews, getting your patches accepted, and tools/processes to encourage quality contributions.&lt;/p&gt;
&lt;p&gt;Slides can be found at: &lt;a class="reference external" href="https://speakerdeck.com/pycon2016"&gt;https://speakerdeck.com/pycon2016&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/PyCon/2016-slides"&gt;https://github.com/PyCon/2016-slides&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Introduction to HTTPS: A Comedy of Errors</title><link href="https://pyvideo.org/pygotham-2015/introduction-to-https-a-comedy-of-errors-0.html" rel="alternate"></link><published>2015-08-16T00:00:00+00:00</published><updated>2015-08-16T00:00:00+00:00</updated><author><name>Ashwini Oruganti</name></author><id>tag:pyvideo.org,2015-08-16:pygotham-2015/introduction-to-https-a-comedy-of-errors-0.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Given recent increases in hostile attacks on internet services and large
scale surveillance operations by certain unnamed government
organizations, security in our software is becoming ever more important.
Through this talk, I'll give you an idea of how modern crypto works in
web services and clients, look at some of the common flaws in these
crypto implementations, and discuss recent developments in TLS.&lt;/p&gt;
</summary></entry><entry><title>Twisted Logic: Endpoints and Why You Shouldn't Be Scared of Twisted</title><link href="https://pyvideo.org/pycon-us-2013/twisted-logic-endpoints-and-why-you-shouldnt-be.html" rel="alternate"></link><published>2013-03-15T00:00:00+00:00</published><updated>2013-03-15T00:00:00+00:00</updated><author><name>Ashwini Oruganti</name></author><id>tag:pyvideo.org,2013-03-15:pycon-us-2013/twisted-logic-endpoints-and-why-you-shouldnt-be.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;This talk will be a survey of my learning experience adding new endpoint
APIs to Twisted, an event-driven networking engine (as a Google Summer
of Code project), with a special focus on the analysis of some of the
horror stories that surround Twisted. Right from the asynchronous I/O
model to Deferreds: if it scares you, we’ll figure a way out and see
what the makers of Twisted say when confronted.&lt;/p&gt;
</summary><category term="talk"></category></entry><entry><title>Kneel And Disconnect: Getting The Fastest Connection Out Of A Hostname</title><link href="https://pyvideo.org/pycon-us-2014/kneel-and-disconnect-getting-the-fastest-connect.html" rel="alternate"></link><published>2014-04-12T00:00:00+00:00</published><updated>2014-04-12T00:00:00+00:00</updated><author><name>Ashwini Oruganti</name></author><id>tag:pyvideo.org,2014-04-12:pycon-us-2014/kneel-and-disconnect-getting-the-fastest-connect.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Did you know that when you resolve a hostname, you can get multiple
addresses back, and pick any one to connect to? Some of these addresses
will connect near instantly, while others might take a long time or time
out. This talk is about a Twisted endpoint API I built that takes a
hostname, and returns the connection that takes the least time to
complete, from the list of resolved host addresses.&lt;/p&gt;
</summary></entry><entry><title>Introduction to HTTPS: A Comedy of Errors</title><link href="https://pyvideo.org/pycon-us-2015/introduction-to-https-a-comedy-of-errors.html" rel="alternate"></link><published>2015-04-11T00:00:00+00:00</published><updated>2015-04-11T00:00:00+00:00</updated><author><name>Ashwini Oruganti</name></author><id>tag:pyvideo.org,2015-04-11:pycon-us-2015/introduction-to-https-a-comedy-of-errors.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Given recent increases in hostile attacks on internet services and large
scale surveillance operations by certain unnamed government
organizations, security in our software is becoming ever more important.
We'll give you an idea of how modern crypto works in web services and
clients, look at some of the common flaws in these crypto
implementations, and discuss recent developments in TLS.&lt;/p&gt;
</summary></entry></feed>