<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Sat, 05 Aug 2017 00:00:00 +0000</lastBuildDate><item><title>Call a C API from Python becomes more enjoyable with CFFI</title><link>https://pyvideo.org/pycon-au-2017/call-a-c-api-from-python-becomes-more-enjoyable-with-cffi.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;em&gt;Python is slow ! Python can't access bare metal !&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;You often hear theses assumptions? Theses limitations can be surpassed
by Python extensions written in C. However, according to my personal
experience, doing this by leveraging C may yield to several issues
(e.g., memory management).&lt;/p&gt;
&lt;p&gt;C Foreign Function Interface for Python (a.k.a., CFFI) allows you to
easily write Python extensions. One of the main aims of CFFI is to
wrap C libraries. Along the same lines, it may also be used for
performance enhancement.&lt;/p&gt;
&lt;p&gt;I am firstly presenting CFFI and it's two modes of utilization: API level and ABI level.
Then I will share my own experience about wrapping &lt;a class="reference external" href="https://github.com/google/shaderc"&gt;shaderc&lt;/a&gt;
library in six hours (&lt;a class="reference external" href="https://github.com/realitix/pyshaderc"&gt;pyshaderc&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Next we are going to the next level, let's wrap all the Vulkan API!
Vulkan is the new 3D API and is not a piece of cake.
To see the real advantage of CFFI, a side by side comparison between two
Python modules is going to be presented:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;CVulkan&lt;/strong&gt; is a Vulkan wrapper written fully in C, it's a classic C extension for Python&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;vulkan&lt;/strong&gt; is its CFFI counterpart without any C written, only Python&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I have developed two versions of Vulkan wrapper (one in a pure C, and
the second by leveraging CFFI) and I can assure you that CFFI is
way better!&lt;/p&gt;
&lt;p&gt;Let's code!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jean-Sébastien Bevilacqua</dc:creator><pubDate>Sat, 05 Aug 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-08-05:pycon-au-2017/call-a-c-api-from-python-becomes-more-enjoyable-with-cffi.html</guid></item><item><title>Call a C API from Python becomes more enjoyable with CFFI</title><link>https://pyvideo.org/pyparis-2017/call-a-c-api-from-python-becomes-more-enjoyable-with-cffi.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The objective of this call is to share the best way to write a C
extension for Python. Lot of good libraries are written in C, a Python
developer should know how to quickly write a C library wrapper. After
this call, Python developers will fully understand taking and ending of
Python extensions.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jean-Sébastien Bevilacqua</dc:creator><pubDate>Mon, 12 Jun 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-06-12:pyparis-2017/call-a-c-api-from-python-becomes-more-enjoyable-with-cffi.html</guid></item><item><title>Call a C API from Python becomes more enjoyable with CFFI</title><link>https://pyvideo.org/europython-2017/call-a-c-api-from-python-becomes-more-enjoyable-with-cffi.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python is slow ! Python can’t access bare metal!&lt;/p&gt;
&lt;p&gt;You often hear theses assumptions? Theses limitations can be
surpassed by Python extensions written in C. However, according to my
personal experience, doing this by leveraging C may yield to several
issues (e.g., memory management).&lt;/p&gt;
&lt;p&gt;C Foreign Function Interface for Python (a.k.a., CFFI) allows you to
easily write Python extensions. One of the main aims of CFFI is to to
wrap C libraries. Along the same lines, it may also be used for
performance enhancement.&lt;/p&gt;
&lt;p&gt;By this call, I am firstly presenting CFFI and it’s two modes of
utilization: API level and ABI level. Then I will share my own
experience about wrapping &lt;a class="reference external" href="https://github.com/google/shaderc"&gt;shaderc library&lt;/a&gt; in six hours &lt;a class="reference external" href="https://github.com/realitix/pyshaderc"&gt;pyshaderc&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Next we are going to the next level, let’s wrap all the Vulkan API!
Vulkan is the new 3D API and is not a piece of cake. To see the real
advantage of CFFI, a side by side comparison between two Python
modules is going to be presented:&lt;/p&gt;
&lt;p&gt;CVulkan is a Vulkan wrapper written fully in C, it’s a classic C
extension for Python vulkan is its CFFI counterpart without any C
written, only Python&lt;/p&gt;
&lt;p&gt;I have developed two versions of Vulkan wrapper (one in a pure C, and
the second by leveraging CFFI) and I can assure you that CFFI is a a
way better!&lt;/p&gt;
&lt;p&gt;Let’s code!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jean-Sébastien Bevilacqua</dc:creator><pubDate>Wed, 12 Jul 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-07-12:europython-2017/call-a-c-api-from-python-becomes-more-enjoyable-with-cffi.html</guid></item></channel></rss>