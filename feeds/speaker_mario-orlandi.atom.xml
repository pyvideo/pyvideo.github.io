<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_mario-orlandi.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2019-09-16T00:00:00+00:00</updated><entry><title>Real time data acquisition, from Arduino to the web, using PubSub with Redis, Django and other friends</title><link href="https://pyvideo.org/pycon-uk-2019/real-time-data-acquisition-from-arduino-to-the-web-using-pubsub-with-redis-django-and-other-friends.html" rel="alternate"></link><published>2019-09-16T00:00:00+00:00</published><updated>2019-09-16T00:00:00+00:00</updated><author><name>Mario Orlandi</name></author><id>tag:pyvideo.org,2019-09-16:pycon-uk-2019/real-time-data-acquisition-from-arduino-to-the-web-using-pubsub-with-redis-django-and-other-friends.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;I'll apply PubSub to collect data in real-time from TCP-enabled peripherals, like Arduino or others, and deliver them to a data server for storage, processing, and broadcasting to remote clients (typically smartphones or tablets) for real-time monitoring and inspection&lt;/p&gt;
</summary></entry><entry><title>Internet delle cose con Redis e django-channels</title><link href="https://pyvideo.org/pycon-italia-2019/internet-delle-cose-con-redis-e-django-channels.html" rel="alternate"></link><published>2019-05-03T00:00:00+00:00</published><updated>2019-05-03T00:00:00+00:00</updated><author><name>Mario Orlandi</name></author><id>tag:pyvideo.org,2019-05-03:pycon-italia-2019/internet-delle-cose-con-redis-e-django-channels.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/morlandi/sinewave"&gt;https://github.com/morlandi/sinewave&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;L’esempio proposto ha lo scopo di esaminare alcuni possibili paradigmi
di comunicazione fra dispositivi periferici e un server centrale, con
particolare riferimento al protocollo PUB/SUB reso disponibile da Redis.
L’invio di informazioni da parte del dispositivo può essere
concretizzato sia utilizzando una delle tante librerie client
disponibili (Python o altri linguaggi), sia mediante una funzione
“publish” minimale (per es. scritta in C); questa seconda opzione può
essere convenientemente utilizzata in contesti limitati quali Arduino o
altre schede embedded. Le informazioni ricevute sul server possono
essere ulteriormente propagate ad eventuali clients web che avessero
manifestato il proprio interesse, predisponendo sul server un processo
“listener” incaricato di raccogliere i dati come subscriber, per poi
eseguirne il broadcast via WebSocket; l’esempio proposto illustra una
semplice implementazione basata su django-channels.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Feedback form:&lt;/strong&gt; &lt;a class="reference external" href="https://python.it/feedback-1726"&gt;https://python.it/feedback-1726&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;Friday 3 May&lt;/strong&gt; at 12:00 &lt;a class="reference external" href="/en/sprints/schedule/pycon10/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</summary><category term="pub/sub"></category><category term="redis"></category><category term="arduino"></category></entry></feed>