<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_miquel-torres.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2016-11-06T00:00:00+00:00</updated><entry><title>Lessons Learned Open Sourcing Codespeed</title><link href="https://pyvideo.org/pycon-ireland-2016/lessons-learned-open-sourcing-codespeed.html" rel="alternate"></link><published>2016-11-06T00:00:00+00:00</published><updated>2016-11-06T00:00:00+00:00</updated><author><name>Miquel Torres</name></author><id>tag:pyvideo.org,2016-11-06:pycon-ireland-2016/lessons-learned-open-sourcing-codespeed.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Open Sourcing a Python project can teach you lessons in so diverse
fields as Software Engineering, Project Management, Marketing,
Community Management and more. Looking back at the past 7 years,
Codespeed, my first Open Source project, has been a niche but very
successful project by many metrics. It is or has been in use by
well-known projects and organizations like the PSF, PyPy, Twisted,
RubySpec, Julia (lang), companies like AMD, Dropbox and many others,
and to this date there is no clear alternative. And yet its codebase
has become a mess and active development grounded to a halt for a
spell of two or three years.&lt;/p&gt;
&lt;p&gt;What lessons can we learn from that story? This talk will highlight
some aspects that went horribly wrong, as well as explain some
concepts in the original design that proved key for the project's
success.&lt;/p&gt;
</summary></entry></feed>