<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_jean-paul-smets.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2018-11-14T00:00:00+00:00</updated><entry><title>Inside Rapid.Space: Open Hardware and Free Software = Ultra Low Cost High Performance Cloud</title><link href="https://pyvideo.org/pyparis-2018/inside-rapidspace-open-hardware-and-free-software-ultra-low-cost-high-performance-cloud.html" rel="alternate"></link><published>2018-11-14T00:00:00+00:00</published><updated>2018-11-14T00:00:00+00:00</updated><author><name>Jean-Paul Smets</name></author><id>tag:pyvideo.org,2018-11-14:pyparis-2018/inside-rapidspace-open-hardware-and-free-software-ultra-low-cost-high-performance-cloud.html</id><summary type="html"></summary></entry><entry><title>A multi-core Python HTTP server (much) faster than Go (spoiler: Cython)</title><link href="https://pyvideo.org/pycon-fr-2018/a-multi-core-python-http-server-much-faster-than-go-spoiler-cython.html" rel="alternate"></link><published>2018-10-06T00:00:00+00:00</published><updated>2018-10-06T00:00:00+00:00</updated><author><name>Jean-Paul Smets</name></author><id>tag:pyvideo.org,2018-10-06:pycon-fr-2018/a-multi-core-python-http-server-much-faster-than-go-spoiler-cython.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A multi-core Python HTTP server that is about 40% to 110% faster than Go
can be built by relying on Cython language and lwan C library. A proof
of concept validates the possibility of high performance system
programming in Cython language.&lt;/p&gt;
</summary></entry><entry><title>Improving python memory management in a multi-process environment with wendelin.core</title><link href="https://pyvideo.org/pyparis-2017/improving-python-memory-management-in-a-multi-process-environment-with-wendelincore.html" rel="alternate"></link><published>2017-06-12T00:00:00+00:00</published><updated>2017-06-12T00:00:00+00:00</updated><author><name>Jean-Paul Smets</name></author><id>tag:pyvideo.org,2017-06-12:pyparis-2017/improving-python-memory-management-in-a-multi-process-environment-with-wendelincore.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk explains how to efficiently use memory with mutli-process
deployments of cpython on multi-core servers or clusters, thanks to a
distributed transactional memory manager: wendelin.core.&lt;/p&gt;
</summary></entry><entry><title>Industrial Monitoring with the Wendelin Big Data platform</title><link href="https://pyvideo.org/pydata-paris-2015/industrial-monitoring-with-the-wendelin-big-data.html" rel="alternate"></link><published>2015-04-14T00:00:00+00:00</published><updated>2015-04-14T00:00:00+00:00</updated><author><name>Jean-Paul Smets</name></author><id>tag:pyvideo.org,2015-04-14:pydata-paris-2015/industrial-monitoring-with-the-wendelin-big-data.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk presents the Wendelin Big Data “Full Stack” and introduces a
first success story related to the collection of vibration data in wind
turbines and the analysis of vibrations.&lt;/p&gt;
&lt;p&gt;Wendelin (&lt;a class="reference external" href="http://wendelin.io/"&gt;http://wendelin.io/&lt;/a&gt;) combines automated cluster deployment,
distributed data persistency for NumPy arrays, parallel data processing,
fluentd compliant data ingestion interface and JIO compliant javascript
interface. It is an all­in­one open source solution that provides a 100%
native python alternative to hybrid solutions based on Spark.&lt;/p&gt;
&lt;p&gt;The talk is derived from the presentation made at MariaDB community
event (&lt;a class="reference external" href="https://mariadb.org/en/community-events/"&gt;https://mariadb.org/en/community-events/&lt;/a&gt;). The presentation of
Wendelin Full Stack will be shorter than in Santa Clara in order to
provide enough time to present the first implementation for Wind
Turbines. We will show in particular which parts of data analysis are
handled on server side with pydata libraries, which parts of data
analysis are handled on browser side in javascript and how both can be
integrated to minimize implementation costs.&lt;/p&gt;
&lt;p&gt;The talk concludes on Wendelin platform roadmap.&lt;/p&gt;
</summary></entry></feed>