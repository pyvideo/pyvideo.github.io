<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_eric-fulmer.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2017-10-06T00:00:00+00:00</updated><entry><title>Functions Within Functions: An Intro to Decorators and Closures</title><link href="https://pyvideo.org/pygotham-2017/functions-within-functions-an-intro-to-decorators-and-closures.html" rel="alternate"></link><published>2017-10-06T00:00:00+00:00</published><updated>2017-10-06T00:00:00+00:00</updated><author><name>Eric Fulmer</name></author><id>tag:pyvideo.org,2017-10-06:pygotham-2017/functions-within-functions-an-intro-to-decorators-and-closures.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;One of the greatest things about Python is its dynamic nature. This dynamicity extends to how functions work. Python can create new functions at runtime, returning them based on arguments to other functions. Functions can also store external data inside themselves to use in future calls. While all of this sounds abstract and weird, it allows for some extremely useful features: closures and decorators. Decorators allow you to use pre-existing functions to extend your own functions with new behavior, or to create an interface that other programmers can use. This talk will provide an accessible tutorial to these ideas and how to apply them, as well as provide an expanded way of thinking about how to write and use functions, which is becoming more and more common in &amp;quot;mainstream&amp;quot; languages popular in industry, like Java, JavaScript, and of course Python.&lt;/p&gt;
</summary></entry></feed>