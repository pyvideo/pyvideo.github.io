<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Wed, 24 Oct 2018 00:00:00 +0000</lastBuildDate><item><title>Achieving Resilient Code with Integration Tests</title><link>https://pyvideo.org/pycon-de-2018/achieving-resilient-code-with-integration-tests.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;You are maybe like me: I never learned at school how to write tests. My
teachers gave me at first a broad overview of computer history. Then,
they explained me some basic design patterns. And to finish, I often had
to write more or less basic programs, to validate and demonstrate my
skills. Not the kind of code I would be really proud of today: the
procrastinator monkey living in my head at this time was more thinking
about planning my summer holidays, rather than writing Ninja code!&lt;/p&gt;
&lt;p&gt;And to make things worse, my studies focused on network and system
engineering. Not software architecture. Funny story, because I decided
to become programmer a couple of years later…&lt;/p&gt;
&lt;p&gt;What I realize now is that I don’t have as much time as before to learn.
And in a world driven by business, where time is money, and where
tradeoffs are the rule, there is rarely enough money to write both shiny
new features and a complete test suite.&lt;/p&gt;
&lt;p&gt;People who practice Test-Driven Development know how complicated it can
be to write proper tests. TDD is often discouraging at first: the
learning curve is steep. But this problem also exists in the testing
world in general. Because writing good tests is hard, many beginners get
headaches trying to reach this goal. How to convince project managers to
have more time for writing tests in these conditions…&lt;/p&gt;
&lt;p&gt;But “le jeu en vaut la chandelle” as we say in French (&amp;quot;the juice is
worth the squeeze&amp;quot;). Well tested applications are not only easier to
maintain and extend. They also have in general a better API. That’s what
we will see in this talk, by focusing on how to write integration tests.
Our journey will begin with a presentation of different testing
strategies. We will then jump to the practical part, using Pytest,
interface testing , dependency injections and stubs, amongst many
others. And because we want to add nice buzzwords on our resume after
PyConDE, we will finish this talk by automating the whole with Docker
Compose.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexandre Figura</dc:creator><pubDate>Wed, 24 Oct 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-10-24:pycon-de-2018/achieving-resilient-code-with-integration-tests.html</guid><category>Programming</category><category>Python</category></item><item><title>Integration Tests with Super Powers</title><link>https://pyvideo.org/europython-2018/integration-tests-with-super-powers.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;You are maybe like me: I never learned at school how to write tests. My
teachers gave me at first a broad overview of computer history. Then,
they explained me some basic design patterns. And to finish, I often had
to write more or less basic programs, to validate and demonstrate my
skills. Not the kind of code I would be really proud of today: the
procrastinator monkey living in my head at this time was more thinking
about planning my summer holidays, rather than writing Ninja code!&lt;/p&gt;
&lt;p&gt;And to make things worse, my studies focused on network and system
engineering. Not software architecture. Funny story, because I decided
to become programmer a couple of years later…&lt;/p&gt;
&lt;p&gt;What I realize now is that I don’t have as much time as before to learn.
And in a world driven by business, where time is money, and where
tradeoffs are the rule, there is rarely enough money to write both shiny
new features and a complete test suite.&lt;/p&gt;
&lt;p&gt;People who practice Test-Driven Development know how complicated it can
be to write proper tests. TDD is often discouraging at first: the
learning curve is steep. But this problem also exists in the testing
world in general. Because writing good tests is hard, many beginners get
headaches trying to reach this goal. How to convince project managers to
have more time for writing tests in these conditions…&lt;/p&gt;
&lt;p&gt;But “le jeu en vaut la chandelle” as we say in French (&amp;quot;the juice is
worth the squeeze&amp;quot;). Well tested applications are not only easier to
maintain and extend. They also have in general a better API. That’s what
we will see in this talk, by focusing on how to write integration tests.
Our journey will begin with a presentation of different testing
strategies. We will then jump to the practical part, using Pytest,
interface testing , dependency injections and stubs, amongst many
others. And because we want to add nice buzzwords on our resume after
EuroPython, we will finish this talk by automating the whole with Docker
Compose.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexandre Figura</dc:creator><pubDate>Fri, 27 Jul 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-07-27:europython-2018/integration-tests-with-super-powers.html</guid></item><item><title>Building International Teams</title><link>https://pyvideo.org/pycon-fr-2017/building-international-teams.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Building a successful team is not that easy. But when your members come from countries all over the globe, it starts to become really challenging! We can all speak in English, we still have different cultures and different mindsets. However, this diversity turns out to be the greatest strength of international teams. To understand why, we need to look back in history, to travel through the ages, and see where our modern civilizations come from. At the end of our journey, we will discover what makes these teams so polyvalent, and why they can be an example for all of us.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alexandre Figura</dc:creator><pubDate>Sun, 24 Sep 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-09-24:pycon-fr-2017/building-international-teams.html</guid></item></channel></rss>