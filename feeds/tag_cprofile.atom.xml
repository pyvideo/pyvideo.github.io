<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/tag_cprofile.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2010-07-31T00:00:00+00:00</updated><entry><title>PyOhio 2010: Making it go faster</title><link href="https://pyvideo.org/pyohio-2010/pyohio-2010--making-it-go-faster.html" rel="alternate"></link><published>2010-07-31T00:00:00+00:00</published><updated>2010-07-31T00:00:00+00:00</updated><author><name>W. Matthew Wilson</name></author><id>tag:pyvideo.org,2010-07-31:pyohio-2010/pyohio-2010--making-it-go-faster.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Making it go faster&lt;/p&gt;
&lt;p&gt;Presented by W. Matthew Wilson&lt;/p&gt;
&lt;p&gt;An introduction to profiling python code.&lt;/p&gt;
&lt;p&gt;I'll use cProfile, pstats, and RunSnakeRun to find where code is getting
bogged down in a real-world example. I'll measure the run-time cost with
timeit, refactor, and measure it again.&lt;/p&gt;
&lt;p&gt;Finally, I'll talk about the limits of python optimization and show how
to replace python code with C.&lt;/p&gt;
</summary><category term="cprofile"></category><category term="optimizing"></category><category term="pstats"></category><category term="pyohio"></category><category term="pyohio2010"></category><category term="runsnakerun"></category><category term="timeit"></category></entry></feed>