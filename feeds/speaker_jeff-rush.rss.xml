<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Sun, 05 Oct 2014 00:00:00 +0000</lastBuildDate><item><title>A Talk of Lightning Talks</title><link>https://pyvideo.org/pytexas-2012/a-talk-of-lightning-talks.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jeff Rush</dc:creator><pubDate>Sat, 15 Sep 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-09-15:pytexas-2012/a-talk-of-lightning-talks.html</guid><category>lightning talks</category></item><item><title>Debugging Strategies: A guided Discussion</title><link>https://pyvideo.org/pytexas-2012/debugging-strategies-a-guided-discussion.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jeff Rush</dc:creator><pubDate>Sat, 15 Sep 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-09-15:pytexas-2012/debugging-strategies-a-guided-discussion.html</guid></item><item><title>The Magic of Metaprogramming</title><link>https://pyvideo.org/pytexas-2011/the-magic-of-metaprogramming.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Learn the magic of writing programs that monitor, alter and react to the
execution of program code by responding to imports, changes to
variables, calls to functions and invocations of the builtins. This talk
goes beyond the static world of metaclasses and class decorators into
the dynamics of tracepoints.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jeff Rush</dc:creator><pubDate>Sat, 10 Sep 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-09-10:pytexas-2011/the-magic-of-metaprogramming.html</guid></item><item><title>Lightning Talks</title><link>https://pyvideo.org/pytexas-2014/lightning-talks-11.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;ul class="simple"&gt;
&lt;li&gt;(00:00) - Sasha Hart -- Make PyPI Fast&lt;/li&gt;
&lt;li&gt;(0:01:36) - Sasha Hart -- Find Your Editor&lt;/li&gt;
&lt;li&gt;(0:04:17) - Jeff Rush -- Ways to Call Out&lt;/li&gt;
&lt;li&gt;(0:06:28) - Jeff Rush -- Weak References&lt;/li&gt;
&lt;li&gt;(0:08:17) - James Powell -- Newton's Method&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">James Powell</dc:creator><pubDate>Sun, 05 Oct 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-10-05:pytexas-2014/lightning-talks-11.html</guid><category>lightning talks</category></item><item><title>Deconstruction of an Object (#62)</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--deconstruction-of-an-object---62.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Deconstruction of an Object&lt;/p&gt;
&lt;p&gt;Presented by Jeff Rush (Tau Productions Inc.)&lt;/p&gt;
&lt;p&gt;An incremental deconstruction of a class definition identifying the key
elements such as layered namespaces, common attributes, lifecycle and
access controls. We'll also look at calling into, out of and through an
object, making classes extensible and various object behaviors like
containment, sequence, iteration and arithmetic.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jeff Rush</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--deconstruction-of-an-object---62.html</guid><category>deconstruction</category><category>pycon</category><category>pycon2010</category></item><item><title>Interfaces, Adapters and Factories (#181)</title><link>https://pyvideo.org/pycon-us-2010/pycon-2010--interfaces--adapters-and-factories---.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Interfaces, Adapters, and Factories&lt;/p&gt;
&lt;p&gt;Presented by Jeff Rush&lt;/p&gt;
&lt;p&gt;A step-by-step introduction to the idea of object interfaces and
adapters using incremental code examples, based on the zope.interface
module. The case for adaption to ease code brittleness will be made and
how we can reason about interfaces. I'll show how to automatically check
code for conformance to your interfaces and then cover where objects
come from, the several kinds of object factories in Python and how one
kind can be based on interfaces.&lt;/p&gt;
&lt;p&gt;[VIDEO HAS ISSUES: Beginning out of focus]&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jeff Rush</dc:creator><pubDate>Fri, 19 Feb 2010 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--interfaces--adapters-and-factories---.html</guid><category>adapters</category><category>interfaces</category><category>pycon</category><category>pycon2010</category><category>zope.interface</category></item><item><title>The Magic of Metaprogramming</title><link>https://pyvideo.org/pycon-us-2013/the-magic-of-metaprogramming-0.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Learn the magic of writing programs that monitor, alter and react to the
execution of program code by responding to imports, changes to
variables, calls to functions and invocations of the builtins. This talk
goes beyond the static world of metaclasses and class decorators.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jeff Rush</dc:creator><pubDate>Fri, 15 Mar 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-03-15:pycon-us-2013/the-magic-of-metaprogramming-0.html</guid><category>talk</category></item></channel></rss>