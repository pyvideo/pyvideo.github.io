<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Fri, 06 Oct 2017 00:00:00 +0000</lastBuildDate><item><title>Nim: A New Option for Optimizing Inner Loops</title><link>https://pyvideo.org/pygotham-2017/nim-a-new-option-for-optimizing-inner-loops.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;a class="reference external" href="https://nim-lang.org/"&gt;Nim&lt;/a&gt; is a relatively young and unknown programming language that provides an enticing mix of features to the Python programmer looking to deploy highly optimized, efficient code. It has a syntax that should be familiar to Pythonistas, including significant whitespace. It is oriented towards expressiveness and ease of composition, including a powerful macro and templating system. However, it is also fast: it's strongly typed, imperative, and compiles to C.&lt;/p&gt;
&lt;p&gt;Python has extremely robust support for importing shared libraries written in C as a means to optimize certain areas of an application for performance. However, C is... C. It's tricky to write, requires manual memory management and manual pointer manipulation, has no type inference... It's everything that most Python programmers write Python in order to avoid.&lt;/p&gt;
&lt;p&gt;However, the fact that Nim compiles to C means we can write highly performant code in a modern language and then employ Python's robust and pervasive C support to call it.&lt;/p&gt;
&lt;p&gt;In this talk we'll review a little bit of the Nim language itself, and dive into how to smoothly use it in a Python application.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Z. D. Smith</dc:creator><pubDate>Fri, 06 Oct 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-10-06:pygotham-2017/nim-a-new-option-for-optimizing-inner-loops.html</guid></item></channel></rss>