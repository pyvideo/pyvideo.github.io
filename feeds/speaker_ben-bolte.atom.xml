<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_ben-bolte.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2016-09-14T00:00:00+00:00</updated><entry><title>Deep Language Modeling for Question Answering using Keras</title><link href="https://pyvideo.org/pydata-carolinas-2016/deep-language-modeling-for-question-answering-using-keras.html" rel="alternate"></link><published>2016-09-14T00:00:00+00:00</published><updated>2016-09-14T00:00:00+00:00</updated><author><name>Ben Bolte</name></author><id>tag:pyvideo.org,2016-09-14:pydata-carolinas-2016/deep-language-modeling-for-question-answering-using-keras.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Neural network models have revolutionized many areas of data analysis,
but have yet to make their way into mainstream usage in a number of
popular fields. Recent advances in question-answering have come
largely from creative applications of deep learning. In this tutorial,
I will demonstrate how to modify the open-source framework Keras to
build some of these models.&lt;/p&gt;
&lt;p&gt;Question answering has received more focus as large search engines
have basically mastered general information retrieval and are starting
to cover more edge cases. Question answering happens to be one of
those edge cases, because it could involve a lot of syntatic nuance
that doesn’t get captured by standard information retrieval models,
like BM-25 or LSI. Hypothetically, deep learning models are better
suited to this type of task because of their ability to capture
higher-order syntax. Two papers, “Applying deep learning to answer
selection: a study and an open task” (Feng et. al. 2015) and “LSTM-
based deep learning models for non-factoid answer selection” (Tan et.
al. 2016), are recent examples which have applied deep learning to
question-answering tasks with good results.&lt;/p&gt;
&lt;p&gt;Feng et. al. used an in-house Java framework for their work, and Tan
et. al. built their model entirely from Theano. This tutorial will
demonstrate how to replicate the models used by each group using the
popular open-source framework Keras, adding custom functions to
include recent advances from the neural networks community.&lt;/p&gt;
</summary></entry></feed>