<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_matt-davis.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2019-07-11T00:00:00+00:00</updated><entry><title>Introduction to Python</title><link href="https://pyvideo.org/scipy-2019/introduction-to-python.html" rel="alternate"></link><published>2019-07-11T00:00:00+00:00</published><updated>2019-07-11T00:00:00+00:00</updated><author><name>Matt Davis</name></author><id>tag:pyvideo.org,2019-07-11:scipy-2019/introduction-to-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This tutorial is a gentle introduction to Python for folks who are completely new to it and may not have much experience programming. We’ll work in a Jupyter Notebook, one of the most popular tools in scientific Python. You’ll learn how to write beautiful Python while practicing loops, if’s, functions, and usage of Python’s built-in features in a series of fun, interactive exercises. By the end of the tutorial we think you’ll be ready to write your own basic Python -- but most importantly, we want you to learn the form and vocabulary of Python so that you can understand Python documentation and interpret code written by others. To continue learning more about Python as it’s applied to data and science, join our companion tutorial titled Introduction to Scientific Python.&lt;/p&gt;
</summary><category term="tutorial"></category></entry><entry><title>Introduction to Python and Programming (Beginner Level)</title><link href="https://pyvideo.org/scipy-2018/introduction-to-python-and-programming-beginner-level.html" rel="alternate"></link><published>2018-07-09T00:00:00+00:00</published><updated>2018-07-09T00:00:00+00:00</updated><author><name>Matt Davis</name></author><id>tag:pyvideo.org,2018-07-09:scipy-2018/introduction-to-python-and-programming-beginner-level.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This tutorial is a gentle introduction to Python for folks who are
completely new to it and may not have much experience programming. We’ll
work in a Jupyter Notebook, one of the most popular tools in scientific
Python. You’ll learn how to write beautiful Python while practicing
loops, if’s, functions, and usage of Python’s built-in features in a
series of fun, interactive exercises. By the end of the tutorial we
think you’ll be ready to write your own basic Python -- but most
importantly, we want you to learn the form and vocabulary of Python so
that you can understand Python documentation and interpret code written
by others. To continue learning more about Python as it’s applied to
data and science, join our companion tutorial titled Introduction to
Scientific Python.Presenter(s): Speaker: Matt Davis, Clover Health
Speaker: Alyssa Whitwell, Clover Health&lt;/p&gt;
</summary></entry><entry><title>Software Engineering Techniques (Beginner Level)</title><link href="https://pyvideo.org/scipy-2018/software-engineering-techniques-beginner-level.html" rel="alternate"></link><published>2018-07-09T00:00:00+00:00</published><updated>2018-07-09T00:00:00+00:00</updated><author><name>Matt Davis</name></author><id>tag:pyvideo.org,2018-07-09:scipy-2018/software-engineering-techniques-beginner-level.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;As a user of scientific Python libraries like NumPy, Pandas, and
matplotlib it’s worth asking how the maintainers of those libraries
manage to keep the codebases running quickly and correctly when there
are large codebases, many features, and many contributors. Those
developers have to think deliberately about the design of their code;
they use a number of techniques to make their lives easier, among them
testing, debugging, profiling, and packaging. Exactly as these
techniques are useful to library maintainers, they can also be useful to
researchers, data scientists, and analysts who are trying keep code fast
and correct as it undergoes changes. This tutorial will introduce
attendees to deliberate code design, testing using the pytest framework,
Python’s debugging tools, profiling code to understand performance, and
how to reuse code in multiple places.Presenter(s): Speaker: Matt Davis,
Clover Health Speaker: Alyssa Whitwell, Clover Health&lt;/p&gt;
</summary></entry><entry><title>Python Performance Investigation by Example</title><link href="https://pyvideo.org/pycon-us-2018/python-performance-investigation-by-example.html" rel="alternate"></link><published>2018-05-12T00:00:00+00:00</published><updated>2018-05-12T00:00:00+00:00</updated><author><name>Matt Davis</name></author><id>tag:pyvideo.org,2018-05-12:pycon-us-2018/python-performance-investigation-by-example.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Occasionally we’ll find that some bit of Python we’ve written doesn’t
run as fast as we’d like, what can we do? Performance bottlenecks aren’t
always intuitive or easy to spot by reading code so we need to collect
data with &lt;a class="reference external" href="https://docs.python.org/3.6/library/profile.html"&gt;profiling&lt;/a&gt;. Once we’ve identified the bottleneck we’ll need
to change our approach, but what options are faster than others?&lt;/p&gt;
&lt;p&gt;This talk illustrates a Python performance investigation and
improvements using an &lt;a class="reference external" href="http://www.adventofcode.com/"&gt;Advent of Code&lt;/a&gt; programming challenge. I’ll walk
through starting from a slow (but correct) solution, look at profiling
data to investigate &lt;em&gt;why&lt;/em&gt; it’s slow, and explore multiple paths for
improving performance, including more efficient algorithms and using
third-party tools like &lt;a class="reference external" href="http://cython.org/"&gt;Cython&lt;/a&gt;. You’ll leave this talk with a recipe
for analyzing Python performance and information about some options for
improved performance.&lt;/p&gt;
</summary></entry><entry><title>A Practical Introduction to Airflow</title><link href="https://pyvideo.org/pybay-2016/a-practical-introduction-to-airflow.html" rel="alternate"></link><published>2016-08-20T00:00:00+00:00</published><updated>2016-08-20T00:00:00+00:00</updated><author><name>Matt Davis</name></author><id>tag:pyvideo.org,2016-08-20:pybay-2016/a-practical-introduction-to-airflow.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Moving data through transformations and from one place to another is a big part of data science/eng. We’ve been using Airflow for several months at Clover Health and have learned a lot about its strengths and weaknesses. We will use this talk to give a practical introduction to Airflow that gives people the information they need to decide whether Airflow is right for them and how to get started.
​
Abstract
Airflow is a popular pipeline orchestration tool for Python that allows users to configure complex (or simple!) multi-system workflows that are executed in parallel across any number of workers. A single pipeline might contain bash, Python, and SQL operations. With dependencies specified between tasks, Airflow knows which ones it can run in parallel and which ones must run after others. Airflow is written in Python and users can add their own operators with custom functionality, doing anything Python can do.&lt;/p&gt;
&lt;p&gt;At Clover Health, we’ve been pushing Airflow’s limits, digging into the source code, and contributing patches upstream. In this talk, we’ll cover the basics of Airflow so you can use what we’ve learned to start your Airflow journey on the right foot. This talk aims to answer questions such as: What is Airflow useful for? How do I get started? What do I need to know that’s not in the docs?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bio:&lt;/strong&gt;
I have been a scientific Python developer since 2008. I’ve worked in atmospheric science, astronomy, urban planning, web applications, and healthcare. I maintain several open source Python libraries and am currently a data engineer at Clover Health.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://speakerdeck.com/pybay2016/matt-davis-a-practical-introduction-to-airflow"&gt;https://speakerdeck.com/pybay2016/matt-davis-a-practical-introduction-to-airflow&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>A Pratctical Introduction to Airflow</title><link href="https://pyvideo.org/pydata-san-francisco-2016/a-pratctical-introduction-to-airflow.html" rel="alternate"></link><published>2016-08-24T00:00:00+00:00</published><updated>2016-08-24T00:00:00+00:00</updated><author><name>Matt Davis</name></author><id>tag:pyvideo.org,2016-08-24:pydata-san-francisco-2016/a-pratctical-introduction-to-airflow.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;PyData SF 2016&lt;/p&gt;
&lt;p&gt;Airflow is a pipeline orchestration tool for Python that allows users to configure multi-system workflows that are executed in parallel across workers. I’ll cover the basics of Airflow so you can start your Airflow journey on the right foot. This talk aims to answer questions such as: What is Airflow useful for? How do I get started? What do I need to know that’s not in the docs?&lt;/p&gt;
&lt;p&gt;Airflow is a popular pipeline orchestration tool for Python that allows users to configure complex (or simple!) multi-system workflows that are executed in parallel across any number of workers. A single pipeline might contain bash, Python, and SQL operations. With dependencies specified between tasks, Airflow knows which ones it can run in parallel and which ones must run after others. Airflow is written in Python and users can add their own operators with custom functionality, doing anything Python can do.&lt;/p&gt;
&lt;p&gt;Moving data through transformations and from one place to another is a big part of data science/engineering, but there are only two widely-used orchestration systems for doing so that are written in Python: Luigi and Airflow. We’ve been using Airflow (&lt;a class="reference external" href="http://pythonhosted.org/airflow/"&gt;http://pythonhosted.org/airflow/&lt;/a&gt;) for several months at Clover Health and have learned a lot about its strengths and weaknesses. We use it to run several pipelines multiple times per day. One includes over 450 heavily linked tasks!&lt;/p&gt;
</summary><category term="airflow"></category></entry><entry><title>Version Control and Unit Testing for Scientific Software, SciPy2013 Tutorial, Part 3 of 3</title><link href="https://pyvideo.org/scipy-2013/version-control-and-unit-testing-for-scientific-s.html" rel="alternate"></link><published>2013-06-27T00:00:00+00:00</published><updated>2013-06-27T00:00:00+00:00</updated><author><name>Matt Davis</name></author><id>tag:pyvideo.org,2013-06-27:scipy-2013/version-control-and-unit-testing-for-scientific-s.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Presenters: Matt Davis, Katy Huff&lt;/p&gt;
&lt;p&gt;Description&lt;/p&gt;
&lt;p&gt;Writing software can be a frustrating process but developers have come
up with ways to make it less stressful and error prone. Version control
saves the history of your project and makes it easier for multiple
people to participate in development. Unit testing and testing
frameworks help ensure the correctness of your code and help you find
errors by quickly executing and testing your entire code base. These
tools can save you time and stress and are valuable to anyone writing
software of any description.&lt;/p&gt;
&lt;p&gt;This collaborative, hands-on tutorial will cover version control with
Git plus writing and running unit tests in Python (and IPython!) using
the nose testing framework. Attendees should be comfortable with the
basics of Python and the command line but no experience with scientific
Python is necessary.&lt;/p&gt;
&lt;p&gt;Outline&lt;/p&gt;
&lt;p&gt;The tutorial will be split into two two-hour lessons. The first lesson
will cover git/GitHub and the second lesson will cover unit testing.
Throughout the entirety of the tutorial students will be working in
pairs. Our teaching style is to have frequent, short exercises for
students. Ideally instructors aren't talking for more than a few minutes
before they stop and students do something on their own machines.
Instructors then give an explanation and example, then move on to the
next item.&lt;/p&gt;
&lt;p&gt;Lesson 1: git/GitHub&lt;/p&gt;
&lt;p&gt;Students will work in pairs and in each pair one student will make a
GitHub repo, then give the other student commit access on that repo.
Students will take turns making modifications to learn various bits of
git functionality.&lt;/p&gt;
&lt;p&gt;Lesson 2: Unit Testing&lt;/p&gt;
&lt;p&gt;Continuing to work in pairs, students will use test driven development
to construct a small scientific program in the IPython Notebook and then
take their work to .py files to see how nose works from the command
line.&lt;/p&gt;
&lt;p&gt;Required Packages&lt;/p&gt;
&lt;p&gt;In addition to standard Python this tutorial will require the nose
testing framework, the IPython Notebook, and the command line interface
to Git. Installing Git varies by platform. Windows users should install
Git Bash (aka msysgit), Mac users should install the Mac OS X Command
Line Tools, and Linux users should use the packaging system for their
particular Linux distribution. The Anaconda CE Python installer includes
nose and the IPython Notebook.&lt;/p&gt;
&lt;p&gt;Documentation&lt;/p&gt;
&lt;p&gt;Material will be adapted from existing Software Carpentry lessons,
especially:
&lt;a class="reference external" href="https://github.com/swcarpentry/boot-camps/tree/master/version-control/git/git-and-github"&gt;https://github.com/swcarpentry/boot-camps/tree/master/version-control/git/git-and-github&lt;/a&gt;
&lt;a class="reference external" href="https://github.com/swcarpentry/boot-camps/tree/master/python/sw_engineering"&gt;https://github.com/swcarpentry/boot-camps/tree/master/python/sw_engineering&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Other links: &lt;a class="reference external" href="http://software-carpentry.org/"&gt;http://software-carpentry.org/&lt;/a&gt; - The software carpentry
organization with links to many lessons and past boot camps.
&lt;a class="reference external" href="https://github.com/swcarpentry/boot-camps"&gt;https://github.com/swcarpentry/boot-camps&lt;/a&gt; - Standard Software Carpentry
boot camp curriculum. &lt;a class="reference external" href="https://github.com/thehackerwithin/PyTrieste/wiki"&gt;https://github.com/thehackerwithin/PyTrieste/wiki&lt;/a&gt;
- Early Software Carpentry curriculum from a two week boot camp at the
International Center for Theoretical Physics.
&lt;a class="reference external" href="https://code.google.com/p/hacker-within/w/list"&gt;https://code.google.com/p/hacker-within/w/list&lt;/a&gt; - Lesson notes for a
three hour lightning lesson at the American Nuclear Society Conference
2011.
&lt;a class="reference external" href="http://software-carpentry.org/blog/2012/02/trieste-italy-workshop-week-1.html"&gt;http://software-carpentry.org/blog/2012/02/trieste-italy-workshop-week-1.html&lt;/a&gt;
- A blog post about the first week of the two week ICTP boot camp.
&lt;a class="reference external" href="http://software-carpentry.org/blog/2012/04/lessons-learned-at-the-university-of-chicago.html"&gt;http://software-carpentry.org/blog/2012/04/lessons-learned-at-the-university-of-chicago.html&lt;/a&gt;
- A blog post about a two day boot camp at the University of Chicago.
&lt;a class="reference external" href="http://software-carpentry.org/blog/2011/11/knowledge-of-the-second-kind.html"&gt;http://software-carpentry.org/blog/2011/11/knowledge-of-the-second-kind.html&lt;/a&gt;
- A blog post about what the hacker within did before it was absorbed
into Software Carpentry (it's no longer really its own entity).&lt;/p&gt;
</summary><category term="lightning talks"></category><category term="Tech"></category></entry><entry><title>Teaching with the IPython Notebook</title><link href="https://pyvideo.org/pycon-us-2013/teaching-with-the-ipython-notebook.html" rel="alternate"></link><published>2013-03-16T00:00:00+00:00</published><updated>2013-03-16T00:00:00+00:00</updated><author><name>Matt Davis</name></author><id>tag:pyvideo.org,2013-03-16:pycon-us-2013/teaching-with-the-ipython-notebook.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;The IPython Notebook offers a number of advantages when teaching
programming. It eliminates the need to switch between the command line
and an editor, provides a consistent interface for students, and
provides an easy to share and reuse file format. I’ll discuss how I and
others are using the IPython Notebook to reduce the mental load on
students to make learning and teaching easier for everyone.&lt;/p&gt;
</summary><category term="talk"></category></entry></feed>