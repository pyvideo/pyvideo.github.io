<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/tag_mercurial.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2012-11-01T00:00:00+00:00</updated><entry><title>分散バージョン管理システムの組織化</title><link href="https://pyvideo.org/pycon-japan-2012/fen-san-baziyonguan-li-shisutemunozu-zhi-hua.html" rel="alternate"></link><published>2012-09-15T00:00:00+00:00</published><updated>2012-09-15T00:00:00+00:00</updated><author><name>飯野 卓見</name></author><id>tag:pyvideo.org,2012-09-15:pycon-japan-2012/fen-san-baziyonguan-li-shisutemunozu-zhi-hua.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;分散バージョン管理システム(主にMercurial)をより良く使いこなすために、より効果的な構成管理を行うために必要なブランチ戦略とリポジトリの組織化の方法について、実例を交えて紹介します。&lt;/p&gt;
</summary><category term="version control"></category><category term="mercurial"></category></entry><entry><title>PyOhio 2010: Lightning Talks</title><link href="https://pyvideo.org/pyohio-2010/pyohio-2010--lightning-talks.html" rel="alternate"></link><published>2010-07-31T00:00:00+00:00</published><updated>2010-07-31T00:00:00+00:00</updated><author><name>Eric Floehr</name></author><id>tag:pyvideo.org,2010-07-31:pyohio-2010/pyohio-2010--lightning-talks.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Lightning Talks&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;00:00 - Eric Floehr: &lt;a class="reference external" href="http://www.manning.com/sande/"&gt;Hello World, Computer Programming for Kids and
Beginners&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;06:00 - Eric Floehr: &lt;a class="reference external" href="http://codespeak.net/lxml/"&gt;lxml&lt;/a&gt;,
&lt;a class="reference external" href="https://fedorahosted.org/suds/"&gt;suds&lt;/a&gt;, and
&lt;a class="reference external" href="http://www.djangoproject.com/"&gt;Django&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;11:40 - (sending people up for swag by rows)&lt;/li&gt;
&lt;li&gt;15:10 - Greg Malcolm: Distributed revision control
(&lt;a class="reference external" href="http://mercurial.selenic.com/"&gt;mercurial&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;23:55 - John Nielsen: Talking about threads in Python, the GIL and
concurrency&lt;/li&gt;
&lt;li&gt;30:10 - Calvin Hendryx-Parker: &lt;a class="reference external" href="http://plone.org/"&gt;Plone 4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;37:00 - Gloria Jacobs: Funky Python Tools&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="lightning talks"></category><category term="concurrency"></category><category term="gil"></category><category term="lxml"></category><category term="mercurial"></category><category term="plone"></category><category term="plone4"></category><category term="pyohio"></category><category term="pyohio2010"></category><category term="suds"></category></entry><entry><title>The development process of Python</title><link href="https://pyvideo.org/europython-2011/the-development-process-of-python.html" rel="alternate"></link><published>2011-07-13T00:00:00+00:00</published><updated>2011-07-13T00:00:00+00:00</updated><author><name>Ezio Melotti</name></author><id>tag:pyvideo.org,2011-07-13:europython-2011/the-development-process-of-python.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Ezio Melotti - 24 June 2011 in &amp;quot;Track Ravioli &amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python is an open source language, where everyone can contribute, and
thanks to Mercurial now it's even easier. With this talk I want to
unveil what happens &amp;quot;behind the scenes&amp;quot; of CPython and how you can get
involved and be part of the open source community that allows Python to
be one of the most popular programming languages.&lt;/p&gt;
&lt;p&gt;I will explain:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;what is the workflow of the CPython development;&lt;/li&gt;
&lt;li&gt;how to get a clone of Python;&lt;/li&gt;
&lt;li&gt;how to use Mercurial to do all the most common operations;&lt;/li&gt;
&lt;li&gt;what is the structure of the main CPython repository;&lt;/li&gt;
&lt;li&gt;what other are repositories are used;&lt;/li&gt;
&lt;li&gt;how to use the bug tracker to report and find bugs;&lt;/li&gt;
&lt;li&gt;how to use remote Mercurial repos to contribute code;&lt;/li&gt;
&lt;li&gt;what tools are used;&lt;/li&gt;
&lt;li&gt;how to get in touch with the core developers;&lt;/li&gt;
&lt;li&gt;what are the plans for the future.&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="community"></category><category term="contribute"></category><category term="cpython"></category><category term="mercurial"></category><category term="workflow"></category></entry><entry><title>Mercurial - ein verteiltes Versionskontrollsystem</title><link href="https://pyvideo.org/pycon-de-2012/mercurial-ein-verteiltes-versionskontrollsystem.html" rel="alternate"></link><published>2012-11-01T00:00:00+00:00</published><updated>2012-11-01T00:00:00+00:00</updated><author><name>Markus Zapke-Gründemann</name></author><id>tag:pyvideo.org,2012-11-01:pycon-de-2012/mercurial-ein-verteiltes-versionskontrollsystem.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Dieser Vortrag stellt Mercurial vor, zeigt aber auch optimale
Vorgehensweisen für den Entwicklungsalltag sowie die Grundlagen der
Entwicklung von Mercurial Extensions.&lt;/p&gt;
&lt;p&gt;Mercurial ist ein verteiltes Versionskontrollsystem. Die Befehle und
Funktionen sind einfach zu lernen.&lt;/p&gt;
&lt;p&gt;Da es unabhängig vom einem Server arbeitet kann jeder lokal und auch
ohne Internetverbindung Dokumente oder Quellcode damit verwalten.
Trotzdem kann man mit Mercurial die Repositories untereinander
austauschen und so auch über weite Entfernungen zusammen arbeiten.&lt;/p&gt;
&lt;p&gt;Mercurial ist komplett in Python geschrieben und lässt sich deshalb
einfach erweitern.&lt;/p&gt;
&lt;p&gt;Viele bekannte Open Source Projekte und Firmen setzen Mercurial ein. So
zum Beispiel Atlassian, Dovecot, Gajim, Google, Facebook, Mozilla,
OpenOffice, OpenSolaris, Python, PyPy, RabbitMQ, Unity, Vim oder Xen.&lt;/p&gt;
</summary><category term="dvcs"></category><category term="mercurial"></category><category term="python"></category><category term="softwareentwicklung"></category></entry><entry><title>Hg and Git : Can't we all just get along? (#154)</title><link href="https://pyvideo.org/pycon-us-2010/pycon-2010--hg-and-git---can--39-t-we-all-just-ge.html" rel="alternate"></link><published>2010-02-19T00:00:00+00:00</published><updated>2010-02-19T00:00:00+00:00</updated><author><name>Scott Chacon</name></author><id>tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--hg-and-git---can--39-t-we-all-just-ge.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Hg and Git: Can't we all just get along?&lt;/p&gt;
&lt;p&gt;Presented by Scott Chacon&lt;/p&gt;
&lt;p&gt;There is a fair amount of unnecessary animosity between developers about
version control systems, especially between Mercurial and Git users. In
reality, these two systems are very similar and can actually cooperate
pretty well. In this talk we will show just how similar Git and
Mercurial are, look at some of their technical differences, and see how
they can work together by looking at hg-git, the bidirectional
Git/Mercurial bridge, implemented in Python.&lt;/p&gt;
</summary><category term="git"></category><category term="hg"></category><category term="mercurial"></category><category term="pycon"></category><category term="pycon2010"></category></entry><entry><title>Modern version control: Mercurial internals (#113)</title><link href="https://pyvideo.org/pycon-us-2010/pycon-2010--modern-version-control--mercurial-int.html" rel="alternate"></link><published>2010-02-19T00:00:00+00:00</published><updated>2010-02-19T00:00:00+00:00</updated><author><name>Dirkjan Ochtman</name></author><id>tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--modern-version-control--mercurial-int.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Modern version control: Mercurial internals&lt;/p&gt;
&lt;p&gt;Presented by Dirkjan Ochtman&lt;/p&gt;
&lt;p&gt;In this talk, I'd like to talk a bit about Mercurial. This will not be a
beginner-level talk on DVCS or hg; it aims to be a higher-level
discussion of the concepts employed in Mercurial. After having discussed
these, I'd also like to compare Mercurial and git based on UI,
performance and underlying concepts.&lt;/p&gt;
</summary><category term="hg"></category><category term="mercurial"></category><category term="pycon"></category><category term="pycon2010"></category></entry></feed>