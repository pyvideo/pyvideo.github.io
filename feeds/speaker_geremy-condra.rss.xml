<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Fri, 09 Mar 2012 00:00:00 +0000</lastBuildDate><item><title>Through the Side Channel: Timing and Implementation Attacks in Python</title><link>https://pyvideo.org/pycon-us-2011/pycon-2011--through-the-side-channel--timing-and-.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Through the Side Channel: Timing and Implementation Attacks in Python&lt;/p&gt;
&lt;p&gt;Presented by Geremy Condra&lt;/p&gt;
&lt;p&gt;Python's dynamic nature, large standard library, and concern for beauty
over performance make it an elegant and uniquely easy to use language,
but they also cause some unique problems. In this talk we'll explore how
features ranging from dictionaries to duck typing can become security
risks, demonstrate those attacks on real Python projects, and examine
how you can protect yourself and your code.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;Over the last decade, an increasing body of evidence has accumulated
indicating that even when a system is hardened enough to provide strong
guarantees about its high-level behavior, implementation details and
especially performance properties can still provide attackers with an
easy way in. For Python, this is especially problematic: its generally
high-level view and the emphasis placed on flexibility often mean that
it can be difficult to stop attackers from gaining a foothold, while its
comparatively low execution speed increases the efficacy of wide variety
of implementation and timing attacks.&lt;/p&gt;
&lt;p&gt;To help Pythonistas understand and cope with these problems, we've
divided this talk into two parts: in the first, we demonstrate the
attacks against a series of widely-deployed Python projects with the
goal of both improving awareness about the issue and demonstrating
common weaknesses to be avoided. The second demonstrates effective
countermeasures and alternative constructions with the goal of improving
defenders' odds of spotting and correcting these flaws in their own
code.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Geremy Condra</dc:creator><pubDate>Fri, 11 Mar 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--through-the-side-channel--timing-and-.html</guid><category>hacking</category><category>hardening</category><category>pycon</category><category>pycon2011</category><category>security</category></item><item><title>TUF: Secure Software Updates in Python</title><link>https://pyvideo.org/pycon-us-2011/pycon-2011--tuf--secure-software-updates-in-pytho.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;TUF: Secure Software Updates in Python&lt;/p&gt;
&lt;p&gt;Presented by Geremy Condra&lt;/p&gt;
&lt;p&gt;From an attacker's point of view there are few entry points with as much
to offer as a vulnerable software updater, yet history tells us that
such vulnerabilities are common. In this talk we'll demonstrate a number
of attacks, explain how common approaches fail to defend against them,
and demonstrate a pure Python library (TUF) that provides both robust
protection and extreme ease of use.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;Vulnerabilities in software update systems expose users to huge range of
potential security risks, including:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Freeze attacks,&lt;/li&gt;
&lt;li&gt;Mix-and-match attacks,&lt;/li&gt;
&lt;li&gt;Rollback attacks, and&lt;/li&gt;
&lt;li&gt;Endless data attacks&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the first part of this talk, we'll demonstrate each of these against
real- world software updaters and explain how commonly used
countermeasures fail in application. We'll then move on to the second
part of the talk, demonstrating TUF, its internals, and the mechanisms
it uses to additionally defend against key compromise. Finally, we'll
demonstrate how easy it is to integrate TUF into your application and
its lifecycle.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Geremy Condra</dc:creator><pubDate>Fri, 11 Mar 2011 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2011-03-11:pycon-us-2011/pycon-2011--tuf--secure-software-updates-in-pytho.html</guid><category>pycon</category><category>pycon2011</category><category>security</category><category>tuf</category><category>updates</category></item><item><title>Certainty in an Uncertain World: Gaining Confidence through Security Testing</title><link>https://pyvideo.org/pycon-us-2012/certainty-in-an-uncertain-world-gaining-confiden.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Nobody thinks you have to be a performance expert to write performance
tests- why assume that you have to be a security expert to write
security tests? During this presentation I'll show you how to use
fuzzers, attack tools, and other simple techniques to help protect your
users, improve the strength of your existing tests, and gain confidence
in the security of your code. There will be demos!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Geremy Condra</dc:creator><pubDate>Fri, 09 Mar 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-03-09:pycon-us-2012/certainty-in-an-uncertain-world-gaining-confiden.html</guid></item></channel></rss>