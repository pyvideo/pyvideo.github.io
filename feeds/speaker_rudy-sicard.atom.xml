<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_rudy-sicard.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2016-08-04T00:00:00+00:00</updated><entry><title>Leveraging documentation power for better web APIs</title><link href="https://pyvideo.org/europython-2016/leveraging-documentation-power-for-better-web-apis.html" rel="alternate"></link><published>2016-08-04T00:00:00+00:00</published><updated>2016-08-04T00:00:00+00:00</updated><author><name>Rudy Sicard</name></author><id>tag:pyvideo.org,2016-08-04:europython-2016/leveraging-documentation-power-for-better-web-apis.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Rudy Sicard - Leveraging documentation power for better web APIs
[EuroPython 2016]
[21 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/leveraging-documentation-power-for-better-web-apis"&gt;https://ep2016.europython.eu//conference/talks/leveraging-documentation-power-for-better-web-apis&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Web APIs that are easier to understand, develop, test and use, is a
popular subject. &amp;quot;An API is only as good as its documentation&amp;quot;. We
decided to play with this proverb and leverage the power of
documentation. We propose to use the code documentation and the type
system to provide lots of free features: explorable APIs, better error
messages, automatic testing.&lt;/p&gt;
&lt;p&gt;Python is perfect to explore code and documentation dynamically. We'll
demonstrate what we came up to and the lessons we've learned.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;'Rich' web APIs that are easier to understand, develop, test and use,
is a popular subject. There are a lot of new specification languages
(e.g. swagger, apiblueprint ...) and libraries (django-rest-framework,
drf ...) that provide features in this direction. Following the old
proverb &amp;quot;An API is only as good as its documentation&amp;quot;, we decided to
play with these ideas and focus on leveraging the power of
documentation. We propose to use the code documentation and the type
system to provide:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Browsable APIs, that are easy to interact with and visualize, reducing the need to provide custom UIs&lt;/li&gt;
&lt;li&gt;Verification of inputs/outputs along with precise error message if needed&lt;/li&gt;
&lt;li&gt;Automatic [de]-serialization of inputs/ouputs outside of the domain code&lt;/li&gt;
&lt;li&gt;Smart exception handling, e.g. exceptions that are not documented are automatically converted into internal errors&lt;/li&gt;
&lt;li&gt;automatic testing, e.g. input, output and result including exceptions are tested ensuring the code works and the documentation is up-to-date.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This use case is one of the rare situation where introspection is
desirable and unavoidable. And Python is a good language to
explore/exploit code and documentation dynamically. The perfect excuse
to spend some time on meta coding a first implementation while being
at work. We'll demonstrate what we came up to, the advantages and
limitations compared to other approaches. And we'll share the lessons
we learned from this experiment.&lt;/p&gt;
</summary></entry></feed>