<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Thu, 10 Oct 2019 00:00:00 +0000</lastBuildDate><item><title>Keynote: Python 2020+ - Lukas Langa</title><link>https://pyvideo.org/pycon-de-2019/keynote-python-2020-lukas-langa.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Speaker: Łukasz Langa&lt;/p&gt;
&lt;p&gt;While very successful, Python's peculiarly missing in some spaces like mobile devices, client-side Web, or gaming. Should we do something about it? How could we go about changing that?&lt;/p&gt;
&lt;p&gt;Recorded at the PyConDE &amp;amp; PyData Berlin 2019 conference.
&lt;a class="reference external" href="https://pycon.de"&gt;https://pycon.de&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;More details at the conference page: &lt;a class="reference external" href="https://de.pycon.org/program/JFNCMQ"&gt;https://de.pycon.org/program/JFNCMQ&lt;/a&gt;
Follow us on Twitter:  &lt;a class="reference external" href="https://twitter.com/pydataberlin"&gt;https://twitter.com/pydataberlin&lt;/a&gt;, &lt;a class="reference external" href="https://twitter.com/pyconde"&gt;https://twitter.com/pyconde&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Łukasz Langa</dc:creator><pubDate>Thu, 10 Oct 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-10-10:pycon-de-2019/keynote-python-2020-lukas-langa.html</guid></item><item><title>Python Steering Council Panel</title><link>https://pyvideo.org/pybay-2019/python-steering-council-panel.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk was presented at PyBay2019 - 4th annual Bay Area Regional Python conference. See pybay.com for more details about PyBay and click SHOW MORE for more information about this talk.&lt;/p&gt;
&lt;p&gt;Description
Elected as prescribed in PEP 8017, the Python Steering Council is a 5-person committee that assumes a mandate to maintain the quality and stability of the Python language and CPython interpreter, improve the contributor experience, formalize and maintain a relationship between the Python core team and the PSF, establish decision making processes for Python Enhancement Proposals, seek consensus among contributors and the Python core team, and resolve decisions and disputes in decision making among the language.&lt;/p&gt;
&lt;p&gt;This session will be moderated by , Paul Everitt (Python Software Foundation), to introduce a discussion with members of the community. Barry Warsaw (Steering Council), Łukasz Langa (3.8 Release Manager), Emily Morehouse (Core Dev), Benjamin Peterson (2.7 Release Manager)&lt;/p&gt;
&lt;p&gt;Abstract
Barry Warsaw: Barry Warsaw is a Sr. Staff Engineer with LinkedIn, working on the Python Foundation team. He has been a core Python developer since the first workshop at NIST in 1994. As the first non-Dutch contributor, he's been dubbed Python's Terry Gilliam. In 2009, he became the FLUFL (Friendly Language Uncle For Life) via the humorous PEP 401. Today, he is one of 5 members of the Python Steering Council, helping to provide leadership for the future of Python.Barry has served as Python Release Manager, Jython project leader, and GNU Mailman project leader. He served as co-chair of the Pycon Language Summit for 4 years. He currently mentors new contributors on their journeys to becoming core developers. Outside of Python, Barry is a semi-pro bass player, and studies tai chi.&lt;/p&gt;
&lt;p&gt;Benjamin Peterson: Creator of six (&lt;a class="reference external" href="http://pypi.python.org/pypi/six"&gt;http://pypi.python.org/pypi/six&lt;/a&gt;), a Python 2 and 3 compatibility library. Release manager for Python 2.6 and 2.7.&lt;/p&gt;
&lt;p&gt;Emily Morehouse: Emily Morehouse-Valcarcel is the Director of Engineering at Cuttlesoft, a digital product agency focused on creating beautifully designed software. Her passion is driven by a blend of empathy, strategy, curiosity, and human-centered design. She's a Python Core Developer, avid OSS contributor, and constant learner focused on building tools to automate the mundane and shed light on the complexity of the human experience. Emily holds degrees in Computer Science, Criminology, and Theatre from Florida State University.&lt;/p&gt;
&lt;p&gt;Lukasz Langa: ambv on Github. Python core developer, Python 3.8 release manager, creator of Black, pianist, dad. Likes analog modular synthesizers, immersive single-player role playing games (Fallout, Elder Scrolls), and single malt Scotch whisky.&lt;/p&gt;
&lt;p&gt;Paul Everitt: Paul is the PyCharm Developer Advocate at JetBrains. Before that, Paul was a co-founder of Zope Corporation, taking the first open source application server through $14M of funding. Paul has bootstrapped both the Python Software Foundation and the Plone Foundation. Paul was an officer in the US Navy, starting www.navy.mil in 1993.&lt;/p&gt;
&lt;p&gt;Sponsor Acknowledgement
This and other PyBay2019 videos are via the help of our media partner AlphaVoice (&lt;a class="reference external" href="https://www.alphavoice.io/"&gt;https://www.alphavoice.io/&lt;/a&gt;)!&lt;/p&gt;
&lt;p&gt;#pybay #pybay2019 #python #python3&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Paul Everitt</dc:creator><pubDate>Sat, 17 Aug 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-08-17:pybay-2019/python-steering-council-panel.html</guid></item><item><title>The latest with BLACK, so you can stop worrying about Formatting</title><link>https://pyvideo.org/pybay-2019/the-latest-with-black-so-you-can-stop-worrying-about-formatting.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk was presented at PyBay2019 - 4th annual Bay Area Regional Python conference. See pybay.com for more details about PyBay and click SHOW MORE for more information about this talk.&lt;/p&gt;
&lt;p&gt;Description
What good is a code style if it's not internally consistent? What good is a linter when it slows you down? What if you could out-source your worries about code formatting, adopt a consistent style, and make your team faster all at the same time?&lt;/p&gt;
&lt;p&gt;Come hear about Black: a new code style and a tool that allows you to format your Python code automatically. In the talk you'll learn not only how the style looks like but why it is the way it is. I will do my best to convince you not only that it's good but that it's good enough. You'll see how you can integrate it with your current workflow and how it speeds up your life while making your code prettier on average.&lt;/p&gt;
&lt;p&gt;Lose your attachments, delegate the boring job of moving tokens around to satisfy the linter, and save time for more important matters. Guaranteed to increase the life expectancy of space bars and Enter keys on your new MacBook's keyboard.&lt;/p&gt;
&lt;p&gt;About the speaker
ambv on Github. Python core developer, Python 3.8 release manager, creator of Black, pianist, dad. Likes analog modular synthesizers, immersive single-player role playing games (Fallout, Elder Scrolls), and single malt Scotch whisky.&lt;/p&gt;
&lt;p&gt;Sponsor Acknowledgement
This and other PyBay2019 videos are via the help of our media partner AlphaVoice (&lt;a class="reference external" href="https://www.alphavoice.io/"&gt;https://www.alphavoice.io/&lt;/a&gt;)!&lt;/p&gt;
&lt;p&gt;#pybay #pybay2019 #python #python3&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Łukasz Langa</dc:creator><pubDate>Fri, 16 Aug 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-08-16:pybay-2019/the-latest-with-black-so-you-can-stop-worrying-about-formatting.html</guid></item><item><title>Python 2020</title><link>https://pyvideo.org/pylondinium-2019/python-2020.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;You should contribute to Python. By inventing a new kind of Python!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Łukasz Langa</dc:creator><pubDate>Sun, 16 Jun 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-06-16:pylondinium-2019/python-2020.html</guid><category>keynote</category></item><item><title>Life Is Better Painted Black, or: How to Stop Worrying and Embrace Auto-Formatting</title><link>https://pyvideo.org/pycon-us-2019/life-is-better-painted-black-or-how-to-stop-worrying-and-embrace-auto-formatting.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;What good is a code style if it's not internally consistent? What good
is a linter when it slows you down? What if you could out-source your
worries about code formatting, adopt a consistent style, and make your
team faster all at the same time?&lt;/p&gt;
&lt;p&gt;Come hear about Black: a new code style and a tool that allows you to
format your Python code automatically. In the talk you'll learn not only
how the style looks like but why it is the way it is. I will do my best
to convince you not only that it's good but that it's &lt;em&gt;good enough&lt;/em&gt;.
You'll see how you can integrate it with your current workflow and how
it speeds up your life while making your code prettier on average.&lt;/p&gt;
&lt;p&gt;Lose your attachments, delegate the boring job of moving tokens around
to satisfy the linter, and save time for more important matters.
Guaranteed to increase the life expectancy of space bars and Enter keys
on your new MacBook's keyboard.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Łukasz Langa</dc:creator><pubDate>Fri, 03 May 2019 14:35:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-05-03:pycon-us-2019/life-is-better-painted-black-or-how-to-stop-worrying-and-embrace-auto-formatting.html</guid><category>talk</category></item><item><title>Lightning Talks Friday 2018-05-11</title><link>https://pyvideo.org/pycon-us-2018/lightning-talks-friday-2018-05-11.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;table border="1" class="colwidths-given docutils"&gt;
&lt;caption&gt;Lightning Talks&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col width="10%" /&gt;
&lt;col width="30%" /&gt;
&lt;col width="60%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Time&lt;/th&gt;
&lt;th class="head"&gt;Speaker&lt;/th&gt;
&lt;th class="head"&gt;Title&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=bTAFl8P2DkE&amp;amp;t=00m40s"&gt;00:40&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Katie Cunningham&lt;/td&gt;
&lt;td&gt;You need a hobby&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=bTAFl8P2DkE&amp;amp;t=05m01s"&gt;05:01&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Łukasz Langa&lt;/td&gt;
&lt;td&gt;Black&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=bTAFl8P2DkE&amp;amp;t=10m05s"&gt;10:05&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Sage Sharp&lt;/td&gt;
&lt;td&gt;Outreachy&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=bTAFl8P2DkE&amp;amp;t=14m44s"&gt;14:44&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Joshua Lowe&lt;/td&gt;
&lt;td&gt;Edublocks&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=bTAFl8P2DkE&amp;amp;t=18m07s"&gt;18:07&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Mahmoud Hasemi&lt;/td&gt;
&lt;td&gt;Restructuring Data in Python&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=bTAFl8P2DkE&amp;amp;t=23m00s"&gt;23:00&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Quang Wu&lt;/td&gt;
&lt;td&gt;Python code style for blind programmers&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=bTAFl8P2DkE&amp;amp;t=28m50s"&gt;28:50&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Alex Rosengarten&lt;/td&gt;
&lt;td&gt;Music from chaos: Audiofying the Lorenz Attractor&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=bTAFl8P2DkE&amp;amp;t=34m05s"&gt;34:05&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Sahuna Gordon-McKeon&lt;/td&gt;
&lt;td&gt;Legacies of disruption&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=bTAFl8P2DkE&amp;amp;t=39m02s"&gt;39:02&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Travis Oliphant&lt;/td&gt;
&lt;td&gt;More sustainable Open Source!&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=bTAFl8P2DkE&amp;amp;t=42m07s"&gt;42:07&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;James Powell&lt;/td&gt;
&lt;td&gt;Code or die&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=bTAFl8P2DkE&amp;amp;t=48m56s"&gt;48:56&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Scott Shawcroft&lt;/td&gt;
&lt;td&gt;Circuit Python&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=bTAFl8P2DkE&amp;amp;t=51m57s"&gt;51:57&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Sean Harrington&lt;/td&gt;
&lt;td&gt;Hacking on 23&amp;amp;Me and DbSNP&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Katie Cunningham</dc:creator><pubDate>Fri, 11 May 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-05-11:pycon-us-2018/lightning-talks-friday-2018-05-11.html</guid><category>lightning talks</category></item><item><title>Panel Discussion: What is Static Typing in Python?</title><link>https://pyvideo.org/pybay-2017/panel-discussion-what-is-static-typing-in-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This panel discussion was MC by Daniel Pyrathon and held as part of the opening night at PyBay, SF Bay Area's regional Python Conference, on Friday, August 11, 2017.  For more information on PyBay, visit &lt;a class="reference external" href="https://pybay.com"&gt;https://pybay.com&lt;/a&gt;, subscribe to be notified of upcoming conferences.&lt;/p&gt;
&lt;p&gt;What is static typing in Python?&lt;/p&gt;
&lt;p&gt;Python added support for annotation as part of function definitions with PEP 3107. PEP 484 later provided a standard syntax for type annotations, bringing static analysis, runtime type checking, and faster refactoring to Python. Since Python is a dynamic programming language, type hints don’t have any influence at runtime, but they allow certain tools to save time with fewer bugs. For example, IDEs such as PyCharm are able to perform safer refactoring, and static analysis tools such as Mypy can perform further type checks during build phases.&lt;/p&gt;
&lt;p&gt;So far, static typing has been adopted by some renowned open source projects such as Zulip and is used at companies such as Google, Instagram, Lyft, and Quora.&lt;/p&gt;
&lt;p&gt;What will we be speaking about during this panel?&lt;/p&gt;
&lt;p&gt;We’ll be making this panel discussion accessible to everyone, so expect the panel to start with an introduction to static typing and then go deeper into best practices, support, and experience from open source project maintainers and companies. Since this feature has been a topic of substantial debate in the community, we’ll be discussing not only the pros but also the cons of this feature. Indeed, there are situations where type hinting may do more harm than good, and our panelists will be sharing with us their words of advice on this topic.&lt;/p&gt;
&lt;p&gt;Why might this panel discussion be interesting to you?&lt;/p&gt;
&lt;p&gt;Type hints are one of the new additions to the Python syntax may drastically increase the speed at which you program. Beginners will learn more about where the language development is heading.
Open source project maintainers and contributors will learn the tooling, support, and best “getting started” advice from our expert panelists.&lt;/p&gt;
&lt;p&gt;Project managers, CTOs, and engineers will learn how type hints can make their team more productive. We know companies spend a huge amount of money recruiting and sourcing engineers, and I’m sure they would do everything possible to make their onboarding experience more enjoyable, easier and faster since employees can expect to be more productive with an annotated codebase.
This panel will not only help developers learn more about static typing, but also help identify areas where static type checking isn’t doing a good job, and learn how we can all improve it together.&lt;/p&gt;
&lt;p&gt;Our panelists
And now for the part that I’m most proud of, our list of panelists:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;Łukasz Langa&lt;/p&gt;
&lt;p&gt;Łukasz is one of the PEP484 authors, a Python core developer, and currently a Production Engineer at Facebook. Łukasz has also been using mypy at work and I imagine has also been part of the latest push to port Instagram’s code base to Python 3! Łukasz is a long-time Python contributor, was a mentor for the Python Software Foundation for Google Summer of Code, and has spoken about Python around the world.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Jelle Zijlstra&lt;/p&gt;
&lt;p&gt;Jelle is a Staff Engineer at Quora, where he works on infrastructure, internationalization, development tools, and ML infrastructure. He’s a contributor to mypy and has also used mypy at Quora. Jelle will offer his perspective on advocating for static type checking at a great engineering organization like Quora and will also be talking about typeshed, a project that hosts type stubs for the standard library and major third-party libraries.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Ethan Smith&lt;/p&gt;
&lt;p&gt;Ethan has been involved with mypy for a while and has been working on typical, a project that uses the frame evaluation API (PEP 523) to dynamically generate stubs. While Ethan is still in college, he has been doing some amazing work to improve the support of type hints.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Andrey Vlasovskikh&lt;/p&gt;
&lt;p&gt;Andrey is the PyCharm community lead and maintainer of IdeaVim. PyCharm is used by many Python developers and its support for type checking “out of the box” makes it easy for developers to adopt.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Matthias Kramm&lt;/p&gt;
&lt;p&gt;Matthias is the author of pytype, one of the maintainers of typeshed, and has been working on Python static analysis tools for Google. Pytype is used in a few hundred projects at Google, including YouTube! Matthias will give us great insight into adopting type checking “at scale”!&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Łukasz Langa</dc:creator><pubDate>Fri, 11 Aug 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-08-11:pybay-2017/panel-discussion-what-is-static-typing-in-python.html</guid><category>panel</category><category>static-typing</category></item><item><title>Gradual Typing of Production Applications</title><link>https://pyvideo.org/pycascades-2018/gradual-typing-of-production-applications.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Thanks to Python's dynamism and brevity, it's easy to start a project. But how do you keep it maintainable and easy to understand as it grows? Come learn how annotating it with types makes your program better for human readers and more robust during execution. No Haskell experience required!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Łukasz Langa</dc:creator><pubDate>Mon, 22 Jan 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-01-22:pycascades-2018/gradual-typing-of-production-applications.html</guid></item><item><title>Gradual Typing of Production Applications</title><link>https://pyvideo.org/pycon-russia-2017/gradual-typing-of-production-applications.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Thanks to Python's dynamic nature and minimal boilerplate, it's easy to start a project. But how do you keep it maintainable and easy to understand as it grows beyond a million lines of code? Come learn how annotating it with types makes your program better for human readers and more robust during execution. No prior Haskell experience required!&lt;/p&gt;
&lt;p&gt;In an hour I'm going to demonstrate real world problems of big software projects that type annotations solve. The talk is going to explain how you can introduce typing to an already mature application, what is a sensible workflow to follow and how to solve common gotchas.  No ducks were harmed in the making of this talk.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Łukasz Langa</dc:creator><pubDate>Sun, 16 Jul 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-07-16:pycon-russia-2017/gradual-typing-of-production-applications.html</guid></item><item><title>Let Them Configure!</title><link>https://pyvideo.org/pycon-ukraine-2012/let-them-configure.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A look at possible approaches to introducing configurability to your Python application, and a quick analysis of the most common problems.&lt;/p&gt;
&lt;p&gt;Today's JSON will be tomorrow's XML. Convention over configuration or configuration over hard-coded defaults? Should the user be given the freedom to decide or should the programmer free users from confusion over too many options?&lt;/p&gt;
&lt;p&gt;This talk presents answers to both sides of the argument. In the first part, I discuss different options for handling configuration in Python applications. Each will receive its share of benefits and problems, and some quick examples of how to use them in real code. In the second part, I describe things you can do right now to increase configurability of your existing applications.&lt;/p&gt;
&lt;p&gt;The final part will briefly introduce the new configparser module from Python 3.2.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Łukasz Langa</dc:creator><pubDate>Sat, 20 Oct 2012 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2012-10-20:pycon-ukraine-2012/let-them-configure.html</guid></item><item><title>Thinking in Coroutines</title><link>https://pyvideo.org/pycon-ukraine-2016/thinking-in-coroutines.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Łukasz Langa</dc:creator><pubDate>Sat, 23 Apr 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-04-23:pycon-ukraine-2016/thinking-in-coroutines.html</guid></item><item><title>Unicode: what is the big deal?</title><link>https://pyvideo.org/pycon-us-2017/unicode-what-is-the-big-deal.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Ever wondered why people complain that text processing is a hard
problem? Or why Python 3 would introduce such a big backward
incompatibility with switching to Unicode? Wonder no more, this talk is
for you.&lt;/p&gt;
&lt;p&gt;In 30 minutes I'm going to demonstrate real world text processing
problems and how Python 3 helps solve them. The talk is going to explain
how you should split your text from binary data in your application,
what are sensible defaults and what are possible gotchas. All this
sprinkled with a healthy dose of frustration by a guy whose first name
starts with Ł.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Łukasz Langa</dc:creator><pubDate>Sat, 20 May 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2017-05-20:pycon-us-2017/unicode-what-is-the-big-deal.html</guid></item><item><title>A song of ice and fire: type hinting in Python</title><link>https://pyvideo.org/pycon-pl-2014/a-song-of-ice-and-fire-type-hinting-in-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Tytuł/Topic: A song of ice and fire: type hinting in Python
Prelegent/Speaker: Łukasz Langa&lt;/p&gt;
&lt;p&gt;Type hints? Why would anybody want &lt;em&gt;that&lt;/em&gt; in Python?! Come and listen to the war story behind designing the optional type annotations PEP for Python 3.5. We'll talk about how this can help your team move faster with less bugs. No Java knowledge required!&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://pl.pycon.org/2014/pl/agenda"&gt;http://pl.pycon.org/2014/pl/agenda&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Łukasz Langa</dc:creator><pubDate>Sat, 18 Oct 2014 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2014-10-18:pycon-pl-2014/a-song-of-ice-and-fire-type-hinting-in-python.html</guid></item><item><title>Thinking In Coroutines</title><link>https://pyvideo.org/pycon-us-2016/ukasz-langa-thinking-in-coroutines-pycon-2016.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Speaker: Łukasz Langa&lt;/p&gt;
&lt;p&gt;The wait for the killer feature of Python 3 is over! Come learn about asyncio and the beauty of event loops, coroutines, futures, executors and the mighty async/await. Practical examples. Bad puns. Pretty pictures. No prior asyncore, Twisted or Node.js experience required.&lt;/p&gt;
&lt;p&gt;Slides can be found at: &lt;a class="reference external" href="https://speakerdeck.com/pycon2016"&gt;https://speakerdeck.com/pycon2016&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/PyCon/2016-slides"&gt;https://github.com/PyCon/2016-slides&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Łukasz Langa</dc:creator><pubDate>Mon, 30 May 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-05-30:pycon-us-2016/ukasz-langa-thinking-in-coroutines-pycon-2016.html</guid></item><item><title>Let Them Configure!</title><link>https://pyvideo.org/pycon-us-2013/let-them-configure.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;A look at possible approaches to introducing configurability to your
Python application, and a quick analysis of the most common problems.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Łukasz Langa</dc:creator><pubDate>Sat, 16 Mar 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-03-16:pycon-us-2013/let-them-configure.html</guid><category>talk</category></item><item><title>Composability Through Multiple Inheritance</title><link>https://pyvideo.org/pycon-us-2013/composability-through-multiple-inheritance.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;One of the turning points in history was when manufacturing embraced
intermediate production. By creating simple components that can be
integrated into complex products, manufacturers are able to build faster
and cheaper, achieving better quality. In this tale of developer meets
engineer,I describe how I'm using Python's inheritance model to bring
this manufacturing reality to life in source code.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Łukasz Langa</dc:creator><pubDate>Fri, 15 Mar 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-03-15:pycon-us-2013/composability-through-multiple-inheritance.html</guid><category>talk</category></item><item><title>Lightning Talks - Friday evening</title><link>https://pyvideo.org/pycon-us-2013/friday-evening-lightning-talks.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Lightning talks from Friday evening.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=1vui-LupKJI#t=0m"&gt;00:00&lt;/a&gt; - Intro to Lightning Talks - MC Larry Hasting&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=1vui-LupKJI#t=1m56s"&gt;01:56&lt;/a&gt; - Instrumental - Matthew J Desmarais&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=1vui-LupKJI#t=7m14s"&gt;07:14&lt;/a&gt; - Statvent - Christian Wyglendowski&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=1vui-LupKJI#t=12m4s"&gt;12:04&lt;/a&gt; - Switchboard - Kyle Adams&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=1vui-LupKJI#t=16m14s"&gt;16:14&lt;/a&gt; - hy: a lisp variant - Paul Tag&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=1vui-LupKJI#t=20m40s"&gt;20:40&lt;/a&gt; - 5 packages you need to know - Łukasz Langa&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=1vui-LupKJI#t=26m24s"&gt;26:24&lt;/a&gt; - The future of Linux containers - Solomon
Hykes&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=1vui-LupKJI#t=32m8s"&gt;32:08&lt;/a&gt; - SciPy 2013 - Andy Terrel, Anthony Scopatz&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=1vui-LupKJI#t=35m39s"&gt;35:39&lt;/a&gt; - BirdFish - Preston Holmes&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=1vui-LupKJI#t=41m20s"&gt;41:20&lt;/a&gt; - Julython - Robert Myers&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=1vui-LupKJI#t=44m20s"&gt;44:20&lt;/a&gt; - CLDR: Common locale data repository - Martin
von Löwis&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=1vui-LupKJI#t=48m49s"&gt;48:49&lt;/a&gt; - Spine demo and Python port of runtime - Terry
Simons&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">MC Larry Hasting</dc:creator><pubDate>Fri, 15 Mar 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-03-15:pycon-us-2013/friday-evening-lightning-talks.html</guid><category>lightning talks</category></item></channel></rss>