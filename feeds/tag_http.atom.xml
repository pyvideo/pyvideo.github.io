<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/tag_http.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2019-05-04T00:00:00+00:00</updated><entry><title>Communicating Between Microservices</title><link href="https://pyvideo.org/pycon-italia-2019/communicating-between-microservices.html" rel="alternate"></link><published>2019-05-04T00:00:00+00:00</published><updated>2019-05-04T00:00:00+00:00</updated><author><name>Anton Caceres</name></author><id>tag:pyvideo.org,2019-05-04:pycon-italia-2019/communicating-between-microservices.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Microservices are not just a bunch of little apps, it’s a connected
ecosystem.&lt;/p&gt;
&lt;p&gt;Within a monolith, code modules invoke each other simply by using
language- level function calls, but in a microservice architecture,
communication between components does not come for free anymore.
Choosing not just a protocol, but a paradigm for communication between
endpoints is considered the most tricky issue of microservice approach.&lt;/p&gt;
&lt;p&gt;Writing microservices in Python is a joy, but when you decide on it,
there is often no way back. Therefore it is always an advantage to know
what to expect in advance, not just from inspiring blog posts but also
from the harsh reality.&lt;/p&gt;
&lt;p&gt;Having a bunch of smooth as well as tricky microservice migrations in
the past, I would like to share typical pitfalls of choosing a framework
stack, communication protocol, conventions, and deployment process — all
covered by real projects.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Feedback form:&lt;/strong&gt; &lt;a class="reference external" href="https://python.it/feedback-1638"&gt;https://python.it/feedback-1638&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;Saturday 4 May&lt;/strong&gt; at 17:15 &lt;a class="reference external" href="/en/sprints/schedule/pycon10/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</summary><category term="MessageQueues"></category><category term="microservices"></category><category term="HTTP"></category><category term="communication"></category><category term="architecture"></category><category term="websockets"></category></entry><entry><title>Server side story</title><link href="https://pyvideo.org/europython-2013/server-side-story.html" rel="alternate"></link><published>2013-07-04T00:00:00+00:00</published><updated>2013-07-04T00:00:00+00:00</updated><author><name>Simone Deponti</name></author><id>tag:pyvideo.org,2013-07-04:europython-2013/server-side-story.html</id><summary type="html"></summary><category term="HTTP"></category><category term="networking"></category><category term="deploy"></category><category term="mobile"></category><category term="javascript"></category><category term="desktop"></category><category term="sysadmin"></category><category term="json"></category><category term="gevent"></category><category term="design"></category><category term="software-engineering"></category><category term="best-practices"></category><category term="application-design"></category><category term="websockets"></category><category term="architecture"></category></entry><entry><title>Web Applications on Python3 and Python2 with TurboGears - Part 1</title><link href="https://pyvideo.org/europython-2013/web-applications-on-python3-and-python2-with-turbogears-part-1.html" rel="alternate"></link><published>2013-07-04T00:00:00+00:00</published><updated>2013-07-04T00:00:00+00:00</updated><author><name>Alessandro Molina</name></author><id>tag:pyvideo.org,2013-07-04:europython-2013/web-applications-on-python3-and-python2-with-turbogears-part-1.html</id><summary type="html"></summary><category term="web"></category><category term="WSGI"></category><category term="sqlalchemy"></category><category term="HTTP"></category><category term="turbogears"></category><category term="mongodb"></category><category term="html"></category><category term="python3"></category></entry><entry><title>Web Applications on Python3 and Python2 with TurboGears - Part 2</title><link href="https://pyvideo.org/europython-2013/web-applications-on-python3-and-python2-with-turbogears-part-2.html" rel="alternate"></link><published>2013-07-04T00:00:00+00:00</published><updated>2013-07-04T00:00:00+00:00</updated><author><name>Alessandro Molina</name></author><id>tag:pyvideo.org,2013-07-04:europython-2013/web-applications-on-python3-and-python2-with-turbogears-part-2.html</id><summary type="html"></summary><category term="web"></category><category term="WSGI"></category><category term="sqlalchemy"></category><category term="HTTP"></category><category term="turbogears"></category><category term="mongodb"></category><category term="html"></category><category term="python3"></category></entry><entry><title>Lost in OAuth? Learn Velruse And Get Your Life Back!</title><link href="https://pyvideo.org/europython-2013/lost-in-oauth-learn-velruse-and-get-your-life-back.html" rel="alternate"></link><published>2013-07-03T00:00:00+00:00</published><updated>2013-07-03T00:00:00+00:00</updated><author><name>Andrew Mleczko</name></author><id>tag:pyvideo.org,2013-07-03:europython-2013/lost-in-oauth-learn-velruse-and-get-your-life-back.html</id><summary type="html"></summary><category term="web"></category><category term="pyramid"></category><category term="HTTP"></category><category term="open-source"></category><category term="case-study"></category></entry><entry><title>Uno sguardo agli internal di RestFS</title><link href="https://pyvideo.org/europython-2013/uno-sguardo-agli-internal-di-restfs.html" rel="alternate"></link><published>2013-07-02T00:00:00+00:00</published><updated>2013-07-02T00:00:00+00:00</updated><author><name>Fabrizio Manfredi</name></author><id>tag:pyvideo.org,2013-07-02:europython-2013/uno-sguardo-agli-internal-di-restfs.html</id><summary type="html"></summary><category term="clustering"></category><category term="HTTP"></category><category term="parallelization"></category><category term="distributed"></category><category term="twisted"></category><category term="REST"></category><category term="optimization"></category><category term="Algorithms"></category><category term="scalability"></category><category term="async"></category><category term="hpc"></category><category term="performance"></category></entry><entry><title>Rewriting the Wayback machine's live web proxy in Python</title><link href="https://pyvideo.org/pycon-india-2012/rewriting-the-wayback-machines-live-web-proxy-in-python.html" rel="alternate"></link><published>2012-09-29T00:00:00+00:00</published><updated>2012-09-29T00:00:00+00:00</updated><author><name>Noufal Ibrahim</name></author><id>tag:pyvideo.org,2012-09-29:pycon-india-2012/rewriting-the-wayback-machines-live-web-proxy-in-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The wayback machine is a high traffic website that has been online for over a decade. It was a mostly Java application. One component of the application is the Liveweb proxy. This is an HTTP proxy that archives a resource which is requested through it and the core data source for the wayback machine.
The liveweb proxy was rearchitected from scratch in Python and deployed on the actual website and has been running for a few months now without a single hitch. There were limitations in the standard library which needed to be worked around, careful tuning of parameters to balance disk I/O and memory usage, fine details of the HTTP protocol that needed to be understood and respected.
This talk discusses the architecture and design of the new system to handle the kind of traffic and patterns which are expected of an archiving proxy and how it was deployed.&lt;/p&gt;
</summary><category term="wayback machine"></category><category term="liveweb"></category><category term="http"></category></entry><entry><title>PyOhio 2011: Creating Web APIs that are a joy to use</title><link href="https://pyvideo.org/pyohio-2011/pyohio-2011--creating-web-apis-that-are-a-joy-to-.html" rel="alternate"></link><published>2011-07-30T00:00:00+00:00</published><updated>2011-07-30T00:00:00+00:00</updated><author><name>Issac Kelly</name></author><id>tag:pyvideo.org,2011-07-30:pyohio-2011/pyohio-2011--creating-web-apis-that-are-a-joy-to-.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Creating Web APIs that are a joy to use&lt;/p&gt;
&lt;p&gt;Presented by Issac Kelly&lt;/p&gt;
&lt;p&gt;Issac is an avid API consumer. He&amp;amp;aposll cover how to make an API that
is not terrible. This is apparently very difficult to do, and many
anti-patterns will be shown. No care will be taken to protect the
guilty. This talk is not as focused on Python, as it is on creating Web
APIs, and an understanding of HTTP is assumed.&lt;/p&gt;
</summary><category term="api"></category><category term="http"></category><category term="pyohio"></category><category term="pyohio2011"></category><category term="webapi"></category></entry><entry><title>Echtzeit Web-Apps mit Mushroom</title><link href="https://pyvideo.org/pycon-de-2013/echtzeit-web-apps-mit-mushroom.html" rel="alternate"></link><published>2013-10-15T00:00:00+00:00</published><updated>2013-10-15T00:00:00+00:00</updated><author><name>Michael P. Jung</name></author><id>tag:pyvideo.org,2013-10-15:pycon-de-2013/echtzeit-web-apps-mit-mushroom.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;&lt;a class="reference external" href="https://bitbucket.org/terreon/mushroom"&gt;Mushroom&lt;/a&gt; ist ein einfach zu
verwendendes Echtzeit-Web-Messaging-Framework, welches neben
Browser-Push-Nachrichten auch Funktionen für die
Interprozesskommunikation zur Verfügung stellt.&lt;/p&gt;
&lt;p&gt;Dieser Vortrag versucht, Lust auf das Echtzeit-Web zu machen und
beantwortet grundlegende Fragen zu Themen wie Skalierbarkeit und
Deployment.&lt;/p&gt;
</summary><category term="echtzeit"></category><category term="gevent"></category><category term="http"></category><category term="ipc"></category><category term="javascript"></category><category term="long polling"></category><category term="messagin"></category><category term="mushroom"></category><category term="network"></category><category term="python"></category><category term="real-time"></category><category term="websocket"></category></entry><entry><title>Hacking the Social Web with Python</title><link href="https://pyvideo.org/pycon-us-2010/pycon-2010--hacking-the-social-web-with-python.html" rel="alternate"></link><published>2010-02-19T00:00:00+00:00</published><updated>2010-02-19T00:00:00+00:00</updated><author><name>David Recordon</name></author><id>tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--hacking-the-social-web-with-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Open Stack: Hacking the Social Web&lt;/p&gt;
&lt;p&gt;Presented by David Recordon/Mike Malone&lt;/p&gt;
&lt;p&gt;In this tutorial we'll explain what the Open Stack is and how you can
use tools like OAuth, OpenID, and Portable Contacts to integrate your
app with the rest of the web. We'll cover each component in depth, and
walk through example Python implementations for a variety of scenarios.&lt;/p&gt;
&lt;p&gt;Intended Audience&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Beginning to intermediate Python programmers interested in Web
Development&lt;/li&gt;
&lt;li&gt;Python programmers who provide or consumer web service APIs&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Class Outline&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Intro: what is the &amp;quot;Open Stack&amp;quot;&lt;/li&gt;
&lt;li&gt;Working with HTTP in Python&lt;/li&gt;
&lt;li&gt;Working with responses: JSON, XML, Atom, RSS, HTML&lt;/li&gt;
&lt;li&gt;Decentralized identity with OpenID&lt;ul&gt;
&lt;li&gt;Implementing a Provider in Python&lt;/li&gt;
&lt;li&gt;Implementing a Relying Party in Python&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Delegated authorization with OAuth&lt;ul&gt;
&lt;li&gt;Implementing a Provider in Python&lt;/li&gt;
&lt;li&gt;Implementing a Consumer in Python&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Exchanging contacts with Portable Contacts&lt;/li&gt;
&lt;li&gt;Aggregating activity with Activity Streams&lt;/li&gt;
&lt;li&gt;Discovering how to communicate: LRDD + XRD&lt;/li&gt;
&lt;li&gt;Making markup structured: microformats&lt;/li&gt;
&lt;li&gt;The future of the Open Stack&lt;/li&gt;
&lt;li&gt;Learn more &amp;amp; get involved: resources and communities&lt;/li&gt;
&lt;li&gt;Q&amp;amp;A;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Requirements&lt;/p&gt;
&lt;p&gt;Some experience doing web development or working with web service APIs&lt;/p&gt;
</summary><category term="atom"></category><category term="http"></category><category term="json"></category><category term="oauth"></category><category term="openid"></category><category term="pycon"></category><category term="pycon2010"></category><category term="rss"></category><category term="tutorial"></category><category term="xml"></category></entry></feed>