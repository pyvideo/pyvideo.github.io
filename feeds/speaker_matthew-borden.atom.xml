<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org - Matthew Borden</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_matthew-borden.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2018-11-15T00:00:00+00:00</updated><subtitle></subtitle><entry><title>Good Code, Bad Code &amp; Code Review</title><link href="https://pyvideo.org/write-the-docs-australia-2018/good-code-bad-code-code-review.html" rel="alternate"></link><published>2018-11-15T00:00:00+00:00</published><updated>2018-11-15T00:00:00+00:00</updated><author><name>Matthew Borden</name></author><id>tag:pyvideo.org,2018-11-15:/write-the-docs-australia-2018/good-code-bad-code-code-review.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Code review is the duty of every developer in a team. We are the guards
of the mystical “good” code and defenders against evil technical debt.
It’s universally agreed that it’s easy to spot “bad” code and much
harder to determine “good” code.&lt;/p&gt;
&lt;p&gt;I’m going to …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Code review is the duty of every developer in a team. We are the guards
of the mystical “good” code and defenders against evil technical debt.
It’s universally agreed that it’s easy to spot “bad” code and much
harder to determine “good” code.&lt;/p&gt;
&lt;p&gt;I’m going to share some of my experiences working on a team producing a
large amount of code every day, with few reviewers. We’ll dive into
looking for smart architectural and design decisions, coherently
understanding what problem the author intended to solve and
understanding how they implemented a solution.&lt;/p&gt;
&lt;p&gt;I’ll touch on automating away the most common issues within Code Review
and pulling the technical brains out of your team mates into great
documentation. Most importantly we’ll talk about the human side of code
review and how to manage code review within large and small teams. Code
review helps our teams grow institutional knowledge and shared
understanding of the systems we build together. A strong understanding
of how to review code will help you to write better code and help you
help your teammates to write better code.&lt;/p&gt;
</content><category term="Write the Docs Australia 2018"></category><category term="WTD Australia 2018"></category><category term="write the docs"></category><category term="wtd australia 2018"></category></entry></feed>