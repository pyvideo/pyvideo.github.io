<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_roberto-polli.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2019-05-05T00:00:00+00:00</updated><entry><title>Using OpenAPI (and Python) to standardize a Country's API Ecosystem</title><link href="https://pyvideo.org/pycon-italia-2019/using-openapi-and-python-to-standardize-a-countrys-api-ecosystem.html" rel="alternate"></link><published>2019-05-05T00:00:00+00:00</published><updated>2019-05-05T00:00:00+00:00</updated><author><name>Roberto Polli</name></author><id>tag:pyvideo.org,2019-05-05:pycon-italia-2019/using-openapi-and-python-to-standardize-a-countrys-api-ecosystem.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Creating an &lt;a class="reference external" href="https://teamdigitale.governo.it/en/projects/api.htm"&gt;API
Ecosystem&lt;/a&gt; is
one of the goal of the &lt;a class="reference external" href="https://teamdigitale.governo.it/en/"&gt;Italian Government Digital Transformation
Team&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This talk shows how OpenAPI (formerly known as Swagger) is a cornerstone
for standardizing the behavior of the APIs created by thousands of
Public Administrations.&lt;/p&gt;
&lt;p&gt;After a brief introduction to OpenAPI, we’ll show the current work on
documenting service management semantics (eg. circuit breaker) and
standardizing API elements and schemas.&lt;/p&gt;
&lt;p&gt;Code samples are based on
&lt;tt class="docutils literal"&gt;`connexion&lt;/tt&gt; &amp;lt;&lt;a class="reference external" href="https://connexion.readthedocs.io/en/latest/quickstart.html#running-%20it"&gt;https://connexion.readthedocs.io/en/latest/quickstart.html#running-%20it&lt;/a&gt;&amp;gt;`__:
a python framework based on flask which makes trivial creating REST APIs
and sandboxes useful for testing and interoperability.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Feedback form:&lt;/strong&gt; &lt;a class="reference external" href="https://python.it/feedback-1681"&gt;https://python.it/feedback-1681&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;Sunday 5 May&lt;/strong&gt; at 10:15 &lt;a class="reference external" href="/en/sprints/schedule/pycon10/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</summary><category term="web"></category><category term="REST API Frameworks"></category><category term="openapi"></category></entry><entry><title>Will ipython replace bash?</title><link href="https://pyvideo.org/europython-2013/will-ipython-replace-bash.html" rel="alternate"></link><published>2013-07-03T00:00:00+00:00</published><updated>2013-07-03T00:00:00+00:00</updated><author><name>Roberto Polli</name></author><id>tag:pyvideo.org,2013-07-03:europython-2013/will-ipython-replace-bash.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;While python is widely used for automating administration tasks, it’s
not still widely known and used between system administrators.&lt;/p&gt;
&lt;p&gt;iPython is an interactive python shell that embeds bash functionalities.
We’ll show how to :&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;replace some bash tasks avoiding common errors&lt;/li&gt;
&lt;li&gt;resembling some bash behaviour&lt;/li&gt;
&lt;li&gt;create testing (nose) and monitoring scripts&lt;/li&gt;
&lt;li&gt;reuse existing python modules (eg.iotop, psutil, …)&lt;/li&gt;
&lt;li&gt;use flask to expose those scripts on HTTP&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Wanna see something specific? Leave a comment! We’ll tune the talk
agenda on the audience interests!&lt;/p&gt;
&lt;div class="section" id="there-is-also-a-teaser-video"&gt;
&lt;h4&gt;There is also a teaser video.&lt;/h4&gt;
&lt;/div&gt;
</summary><category term="flask"></category><category term="testing"></category><category term="devops"></category><category term="sysadmin"></category><category term="linux"></category><category term="iPython"></category><category term="bash"></category></entry><entry><title>Interoperability Rules for an European API Ecosystem: do we still need SOAP?</title><link href="https://pyvideo.org/europython-2018/interoperability-rules-for-an-european-api-ecosystem-do-we-still-need-soap.html" rel="alternate"></link><published>2018-07-26T00:00:00+00:00</published><updated>2018-07-26T00:00:00+00:00</updated><author><name>Roberto Polli</name></author><id>tag:pyvideo.org,2018-07-26:europython-2018/interoperability-rules-for-an-european-api-ecosystem-do-we-still-need-soap.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;div class="section" id="intro"&gt;
&lt;h4&gt;Intro&lt;/h4&gt;
&lt;p&gt;Italy is introducing a new API Ecosystem because the complexity of the
old SOAP-based protocol was now a barrier for the creation of newer
services.&lt;/p&gt;
&lt;p&gt;This talk presents the Digital Transformation Team ongoing work on an
interoperability framework based on (REST) API, including:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;the scheme standardization based on EU standards, ontologies and RFC&lt;/li&gt;
&lt;li&gt;an availability strategy based on a distributed circuit-breaker and
throttling patterns&lt;/li&gt;
&lt;li&gt;a contract-first (API-first) approach to REST services via &lt;a class="reference external" href="https://www.openapis.org/"&gt;OpenAPI
spec&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="challenges"&gt;
&lt;h4&gt;Challenges&lt;/h4&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;when you can replace SOAP Headers with the HTTP semantics introduced
in RFC 7230-7238&lt;/li&gt;
&lt;li&gt;strategies for a non-repudiation system based on HTTP (eg. DOSETA,
JWS, ..)&lt;/li&gt;
&lt;li&gt;the path towards an European interoperable API Ecosystem&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="prerequisites"&gt;
&lt;h4&gt;Prerequisites&lt;/h4&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;basic knowledge of SOAP, REST and the HTTP protocol&lt;/li&gt;
&lt;li&gt;general web service issues, DDOS, availability and metrics&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary></entry><entry><title>Just one Shade of OpenStack</title><link href="https://pyvideo.org/pycon-italia-2017/just-one-shade-of-openstack.html" rel="alternate"></link><published>2017-04-09T00:00:00+00:00</published><updated>2017-04-09T00:00:00+00:00</updated><author><name>Roberto Polli</name></author><id>tag:pyvideo.org,2017-04-09:pycon-italia-2017/just-one-shade-of-openstack.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Want to start using openstack? Come to this talk and meet shade! Shade
is a python library that wraps the many OpenStack clients.&lt;/p&gt;
&lt;p&gt;This introductory talk presents:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;an overview of openstack&lt;/li&gt;
&lt;li&gt;connecting to openstack with shade&lt;/li&gt;
&lt;li&gt;creating and listing machines, networks &amp;amp; co&lt;/li&gt;
&lt;li&gt;shade usage in ansible modules&lt;/li&gt;
&lt;li&gt;contributing to shade (tox, git review, …)&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="OpenStack"></category><category term="OpenSource"></category><category term="cloud"></category></entry><entry><title>TCP / IP Animated</title><link href="https://pyvideo.org/europython-2017/tcp-ip-animated.html" rel="alternate"></link><published>2017-07-10T00:00:00+00:00</published><updated>2017-07-10T00:00:00+00:00</updated><author><name>Roberto Polli</name></author><id>tag:pyvideo.org,2017-07-10:europython-2017/tcp-ip-animated.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This interactive game teaches is the follow-up of the Router Game by
Roberto Polli, and teaches various TCP / IP protocols using paper and
pen.&lt;/p&gt;
&lt;p&gt;Participants are divided in teams, simulating exchanges through
various protocols (DNS, TCP, IP)&lt;/p&gt;
&lt;p&gt;Every player has an L3 role: a PC or mobile phone, a Router, a Load
Balancer ... and must communicate with the others following the
associate specification (eg. a TCP client may buffer frames, a Load
Balancer re-encapsulates IP datagram, ... )&lt;/p&gt;
&lt;p&gt;The team which is faster in exhanging messages wins.&lt;/p&gt;
</summary></entry><entry><title>Tox as project descriptor: not only Continuous Integration</title><link href="https://pyvideo.org/pycon-italia-2016/tox-as-project-descriptor-not-only-continuous-integration.html" rel="alternate"></link><published>2016-06-22T00:00:00+00:00</published><updated>2016-06-22T00:00:00+00:00</updated><author><name>Roberto Polli</name></author><id>tag:pyvideo.org,2016-06-22:pycon-italia-2016/tox-as-project-descriptor-not-only-continuous-integration.html</id><summary type="html"></summary></entry><entry><title>Scaling MySQL with Python</title><link href="https://pyvideo.org/europython-2015/scaling-mysql-with-python.html" rel="alternate"></link><published>2015-08-05T00:00:00+00:00</published><updated>2015-08-05T00:00:00+00:00</updated><author><name>Roberto Polli</name></author><id>tag:pyvideo.org,2015-08-05:europython-2015/scaling-mysql-with-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Roberto Polli - Scaling MySQL with Python
[EuroPython 2015]
[20 July 2015]
[Bilbao, Euskadi, Spain]&lt;/p&gt;
&lt;p&gt;Python is the language of choice for the orchestration part of  MySQL 5.6.&lt;/p&gt;
&lt;p&gt;After a brief introduction of  MySQL replication architecture, the
talk [Slides here][1] presents the python utilities released by MySQL:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;a set of drivers in pure-python&lt;/li&gt;
&lt;li&gt;mysql-utilites for replication, management and failover&lt;/li&gt;
&lt;li&gt;fabric, a tool for scaling, sharding and provisioning new servers&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You will see how to:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;create resilient configurations in minutes&lt;/li&gt;
&lt;li&gt;use mysql-fabric to create high available infrastructures&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As a plus, we'll show how we:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;implemented a fabric provider for provisioning new databases via docker&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;# Prerequisites&lt;/p&gt;
&lt;p&gt;Basic database knowledge,  transactions, replication.&lt;/p&gt;
&lt;p&gt;MySQL specific concepts (eg: binary logs) are briefly introduced in the talk.&lt;/p&gt;
&lt;p&gt;[1]: &lt;a class="reference external" href="http://www.slideshare.net/ioggstream/scaling-mysql-with-python"&gt;http://www.slideshare.net/ioggstream/scaling-mysql-with-python&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>The Router Game</title><link href="https://pyvideo.org/europython-2016/the-router-game.html" rel="alternate"></link><published>2016-08-05T00:00:00+00:00</published><updated>2016-08-05T00:00:00+00:00</updated><author><name>Roberto Polli</name></author><id>tag:pyvideo.org,2016-08-05:europython-2016/the-router-game.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Roberto Polli - The Router Game
[EuroPython 2016]
[18 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/the-router-game"&gt;https://ep2016.europython.eu//conference/talks/the-router-game&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;This interactive game teaches the basic of ip and ethernet protocol
using just paper and pens, and become very popular with our interns
and in our LUG meetings.&lt;/p&gt;
&lt;p&gt;Participants are divided in teams, simulating simple network
infrastructures (eg. computers connected by an hub and a switch).&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;This interactive game teaches the basic of ip and ethernet protocol
using just paper and pens, and become very popular with our interns
and LUG meetings.&lt;/p&gt;
&lt;p&gt;Participants are divided in teams, simulating simple network
infrastructures (eg. computers connected by an hub and a switch).&lt;/p&gt;
&lt;p&gt;Every player has a role:  a PC or mobile phone, an HUB, a Switch, a
Router, and must communicate with the others following the associate
specification (eg. an hub should broadcast message to every neighbour,
a switch should populate the mac address table, ...)&lt;/p&gt;
&lt;p&gt;The team which is faster in exchanging messages  wins.&lt;/p&gt;
</summary></entry><entry><title>Statistics 101 for System Administrators</title><link href="https://pyvideo.org/europython-2014/statistics-101-for-system-administrators.html" rel="alternate"></link><published>2014-07-22T00:00:00+00:00</published><updated>2014-07-22T00:00:00+00:00</updated><author><name>Roberto Polli</name></author><id>tag:pyvideo.org,2014-07-22:europython-2014/statistics-101-for-system-administrators.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Python allows every sysadmin to run (and learn) basic statistics on
system data, replacing sed, awk, bc and gnuplot with an unique, reusable
and interactive framework. The talk is a case study where python allowed
us to highlight some network performance points in minutes using
itertools, scipy and matplotlib. The presentation includes code snippets
and a brief plot discussion.&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;div class="section" id="agenda"&gt;
&lt;h4&gt;Agenda&lt;/h4&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;A latency issue&lt;/li&gt;
&lt;li&gt;Data distribution&lt;/li&gt;
&lt;li&gt;30 seconds correlation with pearsonr&lt;/li&gt;
&lt;li&gt;Combinating data&lt;/li&gt;
&lt;li&gt;Plotting and the power of color&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="an-use-case"&gt;
&lt;h4&gt;An use case&lt;/h4&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Network latency issues&lt;/li&gt;
&lt;li&gt;Correlate latency with other events&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="first-statistics"&gt;
&lt;h4&gt;First statistics&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;we created our parsing library&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;&lt;a class="reference external" href="http://chimera.labs.oreilly.com/books/1230000000393/ch06.html"&gt;using various
recipes&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Having the data in a dict like&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt; table = {
&amp;gt;   'time': [ 1,2,3, ..],
&amp;gt;   'elapsed': [ 0.12, 12.43, ..],
&amp;gt;   'error': [ 2, 0, ..],
&amp;gt;   'size': [123,3223, ..],
&amp;gt;   'peers': [2313, 2303, ..],
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;It's easy to get max, min and standard deviation&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt; print [k, max(v), min(v), stats.mean(v) ] for k,v in table.items() ]
&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="distribution"&gt;
&lt;h4&gt;Distribution&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;A distribution shows event frequency&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt; from matplotlib import pyplot
&amp;gt; pyplot.hist(table['elapsed'])
&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Time and Size distributions&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="linear-correlation"&gt;
&lt;h4&gt;(Linear) Correlation&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;What's correlation&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;What's not correlation&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;pearsonr and probability&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;catch for linear correlation&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt; from scipy.stats.stats import pearsonr
&amp;gt; a, b = range(0,10), range(0,20, 2)
&amp;gt; c = [randint(0,10) for x in a]
&amp;gt; pearsonr(a, b), pearsonr(a,c)
&amp;gt; (1.0, 0.0), (0.43, 0.2)
&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="combinations"&gt;
&lt;h4&gt;Combinations&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;using itertools.combinations&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;netfishing correlation&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt;from itertools import combination
&amp;gt;for f1, f2 in combinations(table, 2):
&amp;gt;        r, p_value = pearsonr(table[f1], table[f2])
&amp;gt;        print(&amp;quot;the correlation between %s and %s is: %s&amp;quot; % (f1, f2, r))
&amp;gt;        print(&amp;quot;the probability of a given distribution (see manual) is: %s&amp;quot; % p_value)
&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="plot-always"&gt;
&lt;h4&gt;Plot always&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;pearsonr finds &lt;em&gt;only&lt;/em&gt; linear correlation&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;our eyes work better :P&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;so...plot always!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;color is the 3d dimension of a plot!&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;gt; from pyplot import scatter, title, xlabel, ylabel, legend
&amp;gt; from pyplot import savefig, close as closefig
&amp;gt;
&amp;gt; for f1, f2 in combinations(table, 2):
&amp;gt;    scatter(table[f1], table[2], label=&amp;quot;%s_%s&amp;quot; % (f1,f2))
&amp;gt;    # add legend and other labels
&amp;gt;    r, p = pearsonr(table[f1], table[f2])
&amp;gt;    title(&amp;quot;Correlation: %s v %s, %s&amp;quot; % (f1, f2, r))
&amp;gt;    xlabel(f1), ylabel(f2)
&amp;gt;    legend(loc='upper left') # show the legend in a suitable corner
&amp;gt;    savefig(f1 + &amp;quot;_&amp;quot; + f2 + &amp;quot;.png&amp;quot;)
&amp;gt;    closefig()
&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="wrap-up"&gt;
&lt;h4&gt;Wrap Up!&lt;/h4&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;do not use pearsonr to &lt;em&gt;exclude&lt;/em&gt; relation between events&lt;/li&gt;
&lt;li&gt;plots may serve better&lt;/li&gt;
&lt;li&gt;scatter plot can show a system thruput and exclude correlation
between fields A and fields B&lt;/li&gt;
&lt;li&gt;continue collecting results&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</summary><category term="Tech"></category></entry><entry><title>Test Driven Deployment with Nose Test and IPython</title><link href="https://pyvideo.org/pycon-italia-2015/test-driven-deployment-with-nose-test-and-ipython.html" rel="alternate"></link><published>2015-06-09T00:00:00+00:00</published><updated>2015-06-09T00:00:00+00:00</updated><author><name>Roberto Polli</name></author><id>tag:pyvideo.org,2015-06-09:pycon-italia-2015/test-driven-deployment-with-nose-test-and-ipython.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Devops gospel is widespread, but what happens to big legacy
infrastructures? The switch to Continuous Delivery is hard:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;customers are reluctant to disruptive changes;&lt;/li&gt;
&lt;li&gt;old operation teams must adapt to new technologies.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We’ll show how a light Test Driven approach to system delivery allowed
us to:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;reduce software updates time;&lt;/li&gt;
&lt;li&gt;eliminate maintenance issues;&lt;/li&gt;
&lt;li&gt;contribute to open source;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The operation team had no troubles thanks to the fast learning curve of
python.&lt;/p&gt;
&lt;p&gt;The library we contribute has been included in Red Hat 389 Directory
Server.&lt;/p&gt;
</summary></entry></feed>