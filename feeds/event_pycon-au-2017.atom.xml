<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/event_pycon-au-2017.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2017-08-06T00:00:00+00:00</updated><entry><title>An introduction to nodepool</title><link href="https://pyvideo.org/pycon-au-2017/an-introduction-to-nodepool.html" rel="alternate"></link><published>2017-08-06T00:00:00+00:00</published><updated>2017-08-06T00:00:00+00:00</updated><author><name>Joshua Hesketh</name></author><id>tag:pyvideo.org,2017-08-06:pycon-au-2017/an-introduction-to-nodepool.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Nodepool is a system for launching single-use test nodes (VM's) on demand based on images built with cached data. It is designed to work with any OpenStack based cloud, and is part of a suite of tools that form a comprehensive test system including Jenkins and Zuul.&lt;/p&gt;
&lt;p&gt;Nodepool works across multiple clouds and scales to launching and managing thousands of nodes per an hour.&lt;/p&gt;
&lt;p&gt;This talk is an introduction on how to deploy and use nodepool for CI. Given time we may also touch on how it may be used to manage nodes for workloads other than just testing.&lt;/p&gt;
</summary></entry><entry><title>Code Reviews Using Art Critique Principles</title><link href="https://pyvideo.org/pycon-au-2017/code-reviews-using-art-critique-principles.html" rel="alternate"></link><published>2017-08-06T00:00:00+00:00</published><updated>2017-08-06T00:00:00+00:00</updated><author><name>Stacy Morse</name></author><id>tag:pyvideo.org,2017-08-06:pycon-au-2017/code-reviews-using-art-critique-principles.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Code reviews don‚Äôt have to be a time consuming, morale zapping, arduous tasks. Not only can they catch bugs and errors but they can contribute in positive ways to the individual developer, the team, management and company as a whole.&lt;/p&gt;
&lt;p&gt;Art critiques have existed in academia for hundreds of years. The methodology of the critique has evolved to be time sensitive and productive, while keeping the enthusiasm of the student artist intact.&lt;/p&gt;
&lt;p&gt;The purpose of the art critique is to get peers and mentors to look at the work and raise any problems they may see. It‚Äôs also time where people with more experience could contribute their knowledge in a helpful way. This process is about producing the best work, quickly and in a productive and constructive way.&lt;/p&gt;
&lt;p&gt;These methods can be applied to code review.&lt;/p&gt;
&lt;p&gt;PyCon attendees will come away from this talk with a set of methods that will enable them to preform constructive code reviews using art critique principles.&lt;/p&gt;
</summary></entry><entry><title>conference.close()</title><link href="https://pyvideo.org/pycon-au-2017/conferenceclose.html" rel="alternate"></link><published>2017-08-06T00:00:00+00:00</published><updated>2017-08-06T00:00:00+00:00</updated><author><name>Richard Jones</name></author><id>tag:pyvideo.org,2017-08-06:pycon-au-2017/conferenceclose.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Conference Closing&lt;/p&gt;
</summary></entry><entry><title>Decoding the Frustrations and Vulnerabilities of Modern Text Processing</title><link href="https://pyvideo.org/pycon-au-2017/decoding-the-frustrations-and-vulnerabilities-of-modern-text-processing.html" rel="alternate"></link><published>2017-08-06T00:00:00+00:00</published><updated>2017-08-06T00:00:00+00:00</updated><author><name>Evan Kohilas</name></author><id>tag:pyvideo.org,2017-08-06:pycon-au-2017/decoding-the-frustrations-and-vulnerabilities-of-modern-text-processing.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;When it comes to processing text, Python is easily one of the best languages for the job. However, in today's modern world, with emojisüëåüèª, ∆íŒø—èŒµŒπgŒ∑ ‚ÑìŒ±nŒ≥uŒ±gŒµs, and
mÃïaÃ®ÃïÃ∂lÕÅicÃ∑iÕÅÕúoÃ∂ÕüÕúusÕ† “âÕûdÃ¥aÕútÃõÕòÃµaÃ®“â we are no longer dealing with easy and safe to handle ASCII input.&lt;/p&gt;
&lt;p&gt;Join us as we go through the adventures of battling UnicodeError dragons, working with Python3's I/O, what to do when working with bytes, how to account for data from the web and/or databases nicely, what the different types of string literals are, the new f&amp;quot;{format_strings}&amp;quot;, and the security vulnerabilities that string formatting and malicious input can possess (and how to prevent it).&lt;/p&gt;
</summary></entry><entry><title>Don't Look Back in Anger: Wildman Whitehouse and the Great Failure of 1858</title><link href="https://pyvideo.org/pycon-au-2017/dont-look-back-in-anger-wildman-whitehouse-and-the-great-failure-of-1858.html" rel="alternate"></link><published>2017-08-06T00:00:00+00:00</published><updated>2017-08-06T00:00:00+00:00</updated><author><name>Lilly Ryan</name></author><id>tag:pyvideo.org,2017-08-06:pycon-au-2017/dont-look-back-in-anger-wildman-whitehouse-and-the-great-failure-of-1858.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In the 1850s, Edward Orange Wildman Whitehouse was appointed the lead engineer of the first attempt to build a trans-Atlantic telegraph cable. With the entire population of two continents waiting for his go-live, their handlebar moustaches aquiver, he demonstrated in fine form just how spectacularly a big project can be a bigger disaster.&lt;/p&gt;
&lt;p&gt;This is a story of project development gone very wrong, and a lesson about the importance of honest reflection in technical work. Lilly outlines some of the mistakes made during one of the biggest tech delivery projects in history, and how a constructive view of failure helped to turn it all around.&lt;/p&gt;
&lt;p&gt;You'll learn:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;How to handle complex tasks gracefully&lt;/li&gt;
&lt;li&gt;The importance of being open to feedback&lt;/li&gt;
&lt;li&gt;How to foster good team relationships to deliver great work&lt;/li&gt;
&lt;/ul&gt;
</summary></entry><entry><title>Gradual Typing in Python</title><link href="https://pyvideo.org/pycon-au-2017/gradual-typing-in-python.html" rel="alternate"></link><published>2017-08-06T00:00:00+00:00</published><updated>2017-08-06T00:00:00+00:00</updated><author><name>Tom Manderson</name></author><id>tag:pyvideo.org,2017-08-06:pycon-au-2017/gradual-typing-in-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Dynamically typed languages let you write a larger variety of programs than those with static types. Unfortunately, a lot of those are invalid. From version 3.5 onwards, Python has had a standardised system for adding types to your Python programs so you can increase your confidence in your code.&lt;/p&gt;
&lt;p&gt;By gradually adding types to your Python programs you can get the best of both worlds - add static types where they're useful, but retain the flexibility of dynamic typing where you want it. The talk covers a little of the history of typechecking in Python, some short demos, and a brief report on adding types to an existing project.&lt;/p&gt;
</summary></entry><entry><title>Hot reloading Python web-servers at scale</title><link href="https://pyvideo.org/pycon-au-2017/hot-reloading-python-web-servers-at-scale.html" rel="alternate"></link><published>2017-08-06T00:00:00+00:00</published><updated>2017-08-06T00:00:00+00:00</updated><author><name>Chenyang Wu</name></author><id>tag:pyvideo.org,2017-08-06:pycon-au-2017/hot-reloading-python-web-servers-at-scale.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Every web application involves continuous changes to the server. It could vary from minor bug fixes, small feature improvements, to major feature releases. How to keep serving your users while replacing your app with a newer version is a problem everybody has to face. It's like replacing car wheels while driving at a full speed. One common practice for rolling out changes to production is turning down a few percentage of the servers and rotate until all changes have been updated on all servers. This common approach is, however, not ideal: it requires either non-trivial amount of extra resources dedicated for rollout, or significant overhead of rollout complexity and speed in case the reserved resource is falling short. More ideally, there's the ‚Äúhot reload‚Äù land, where you can push changes with the same speed or even faster, and no extra resource required. We're going to talk about how Instagram got there.&lt;/p&gt;
&lt;p&gt;In this talk, we're going to talk about the benefits of hot reload, and the path we took to get there, and the efforts to make it scale to thousands of servers. It requires no extra resources, even at a machine level, and minimal overhead, which means you could run your servers to nearly full utilization and can still roll out your code changes. With the new deployment system, we not only saved a ton of servers, but also made our continuous rollout faster by enabling full parallelism, thus scaling code rollout to more simultaneous changes, more developers, and in turn, more users.&lt;/p&gt;
</summary></entry><entry><title>How to handle abandoned projects, Take Two</title><link href="https://pyvideo.org/pycon-au-2017/how-to-handle-abandoned-projects-take-two.html" rel="alternate"></link><published>2017-08-06T00:00:00+00:00</published><updated>2017-08-06T00:00:00+00:00</updated><author><name>Katie McLaughlin</name></author><id>tag:pyvideo.org,2017-08-06:pycon-au-2017/how-to-handle-abandoned-projects-take-two.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;At PyCon AU 2015, Katie was due to present two talks: one on acknowledging contributions that aren't code, and one on how to handle abandoned projects.&lt;/p&gt;
&lt;p&gt;The second talk was never presented.&lt;/p&gt;
&lt;p&gt;This keynote explores the content of that talk, examining how to handle an unexpected blow to the leadership of an open source project.&lt;/p&gt;
&lt;p&gt;It is also a story about the events around that Sunday afternoon in Brisbane.&lt;/p&gt;
&lt;p&gt;This is a talk about mitigation against failure, software abandonment, speaker anxiety, the amazing Python community, and ice cream.&lt;/p&gt;
&lt;p&gt;Content warning: This talk contains strong themes.&lt;/p&gt;
</summary></entry><entry><title>Improving Your Documentation: A talk for developers who want to write stuff good</title><link href="https://pyvideo.org/pycon-au-2017/improving-your-documentation-a-talk-for-developers-who-want-to-write-stuff-good.html" rel="alternate"></link><published>2017-08-06T00:00:00+00:00</published><updated>2017-08-06T00:00:00+00:00</updated><author><name>Charelle Collett</name></author><id>tag:pyvideo.org,2017-08-06:pycon-au-2017/improving-your-documentation-a-talk-for-developers-who-want-to-write-stuff-good.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;You're part of a team of developers on a small open source project.  You don't have the luxury of dedicated technical writers, but you know that clear, comprehensive, and easy to use documentation is important for your users to get the most from your project.  How do you achieve that?  Never fear - I'm here to help!&lt;/p&gt;
&lt;p&gt;In this talk Charelle will cover:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Why people are reading your documentation&lt;/li&gt;
&lt;li&gt;Some simple points about English you may have forgotten from school&lt;/li&gt;
&lt;li&gt;Ways to make your docs clear, easy to follow and frustration free&lt;/li&gt;
&lt;li&gt;How to test your documentation&lt;/li&gt;
&lt;li&gt;Various markup languages, tools and features&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Your documentation is important: It's the authority on how your project works, and high quality docs shows that you care about your users.&lt;/p&gt;
</summary></entry><entry><title>Lessons from building serverless services in bleeding edge python</title><link href="https://pyvideo.org/pycon-au-2017/lessons-from-building-serverless-services-in-bleeding-edge-python.html" rel="alternate"></link><published>2017-08-06T00:00:00+00:00</published><updated>2017-08-06T00:00:00+00:00</updated><author><name>developerjack</name></author><id>tag:pyvideo.org,2017-08-06:pycon-au-2017/lessons-from-building-serverless-services-in-bleeding-edge-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python makes serverless simple. In this session I'll build and explain a serverless service to support our support team (and I will try saying it fast).  I deep dive on running and porting applications to a serverless application environment like AWS lambda. This comes with a variety of debugging, system architecture and version compatibility concerns and limitations that I will ununfold throughout the talk.
Attendees will leave the room with the tools and techniques to adopt serverless principles and tools to build scalable serverless APIs and applications.&lt;/p&gt;
</summary></entry><entry><title>Lightflow - A lightweight, distributed workflow system</title><link href="https://pyvideo.org/pycon-au-2017/lightflow-a-lightweight-distributed-workflow-system.html" rel="alternate"></link><published>2017-08-06T00:00:00+00:00</published><updated>2017-08-06T00:00:00+00:00</updated><author><name>Andreas Moll</name></author><id>tag:pyvideo.org,2017-08-06:pycon-au-2017/lightflow-a-lightweight-distributed-workflow-system.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The Australian Synchrotron, located in Clayton, Melbourne, is one of Australia‚Äôs most important pieces of research infrastructure. Light emitted from accelerated electrons, flying at nearly the speed of light, is used by 10 beamlines in order to conduct a very diverse range of research. After more than 10 years of operation, the beamlines at the Australian Synchrotron are well established and the demand for automation of research tasks is growing. Such tasks routinely involve the reduction of  TB-scale data, online (realtime) analysis of the recorded data to guide experiments, and fully automated data management workflows.&lt;/p&gt;
&lt;p&gt;In order to meet these demands, a generic, distributed workflow system was developed. It is based on well-established Python libraries and tools such as Celery, NetworkX, Redis and MongoDB. The individual tasks of a workflow are arranged in a directed acyclic graph and one or more directed acyclic graphs form a workflow. Workers consume the tasks, allowing the processing of a workflow to scale horizontally. Data can flow between tasks and a variety of specialised tasks is available. The motivation for the development of Lightflow and interrelated design decisions will be presented in the context of existing Python libraries and workflow systems. Lightflow, its concepts and use cases from the Australian Synchrotron will demonstrate how clever software design can solve problems across various domains.&lt;/p&gt;
</summary></entry><entry><title>Lightning Talks - Sunday</title><link href="https://pyvideo.org/pycon-au-2017/lightning-talks-sunday.html" rel="alternate"></link><published>2017-08-06T00:00:00+00:00</published><updated>2017-08-06T00:00:00+00:00</updated><author><name>Sam Kitajima-Kimbrel</name></author><id>tag:pyvideo.org,2017-08-06:pycon-au-2017/lightning-talks-sunday.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;table border="1" class="colwidths-given docutils"&gt;
&lt;caption&gt;Lightning Talks&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col width="10%" /&gt;
&lt;col width="30%" /&gt;
&lt;col width="60%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head"&gt;Time&lt;/th&gt;
&lt;th class="head"&gt;Speaker&lt;/th&gt;
&lt;th class="head"&gt;Title&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=bJmx0tcVubY&amp;amp;t=0m19s"&gt;0:19&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Sam Kitajima-Kimbrel&lt;/td&gt;
&lt;td&gt;You Aren't Facebook, and That's OK&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=bJmx0tcVubY&amp;amp;t=4m55s"&gt;4:55&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Jason King&lt;/td&gt;
&lt;td&gt;Don't do what I did&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=bJmx0tcVubY&amp;amp;t=9m55s"&gt;9:55&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Evan Kohilas&lt;/td&gt;
&lt;td&gt;Rubber Snaek&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=bJmx0tcVubY&amp;amp;t=12m13s"&gt;12:13&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Dr. Russell Keith-Magee&lt;/td&gt;
&lt;td&gt;Tools for Apiarists&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=bJmx0tcVubY&amp;amp;t=17m23s"&gt;17:23&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;William Brown&lt;/td&gt;
&lt;td&gt;Hard CPUs Make Multithreading&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=bJmx0tcVubY&amp;amp;t=21m54s"&gt;21:54&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Allen Rueben&lt;/td&gt;
&lt;td&gt;Joining the dots&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=bJmx0tcVubY&amp;amp;t=24m16s"&gt;24:16&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Malcolm Ramsay&lt;/td&gt;
&lt;td&gt;How I Reinvented Solarized&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=bJmx0tcVubY&amp;amp;t=26m47s"&gt;26:47&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Zac Hatfield-Dodds&lt;/td&gt;
&lt;td&gt;From REPL to reliable&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=bJmx0tcVubY&amp;amp;t=31m55s"&gt;31:55&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Daniel McCarthy&lt;/td&gt;
&lt;td&gt;Hexapod and MicroPython&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=bJmx0tcVubY&amp;amp;t=35m35s"&gt;35:35&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Lilly Ryan&lt;/td&gt;
&lt;td&gt;Towns I Wish I Could Visit&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=bJmx0tcVubY&amp;amp;t=41m00s"&gt;41:00&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Jeremy Rothstein&lt;/td&gt;
&lt;td&gt;I'm a mockoholic&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=bJmx0tcVubY&amp;amp;t=45m54s"&gt;45:54&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Nick Moore&lt;/td&gt;
&lt;td&gt;ESP32 and MicroPython&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=bJmx0tcVubY&amp;amp;t=48m38s"&gt;48:38&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Katie Bell&lt;/td&gt;
&lt;td&gt;Hello&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=bJmx0tcVubY&amp;amp;t=53m37s"&gt;53:37&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Peter Hall&lt;/td&gt;
&lt;td&gt;A Brief History of 'What is the Time?'&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</summary><category term="lightning talks"></category></entry><entry><title>Messy Sensor Data: A Programmer‚Äôs Cleaning Guide</title><link href="https://pyvideo.org/pycon-au-2017/messy-sensor-data-a-programmers-cleaning-guide.html" rel="alternate"></link><published>2017-08-06T00:00:00+00:00</published><updated>2017-08-06T00:00:00+00:00</updated><author><name>Xavier Ho</name></author><id>tag:pyvideo.org,2017-08-06:pycon-au-2017/messy-sensor-data-a-programmers-cleaning-guide.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Humans love to invent. From sundials to clocks, timers, and embedded computer sensors, humans have a symbiotic relationship with their creations. They create and maintain sensors like weather stations, and these sensors tell them what the weather is like outside. Inventions like the weather stations are so widely used that most people never imagine them to malfunction. Even worse, sensors might function correctly enough to record data, but also defective enough to record the wrong numbers. How do we make the best of our data? In this talk, we will discuss different ways to clean up inconsistent data formats and remove invalid samples, using weather station as an example. Then, we will present tools to efficiently snap our data points to a grid, and fill in gaps to tidy up our data. Finally, we will look at how to prepare and store data for use in data science. This article uses Python and open source packages, but the concept will be applicable to all general programming languages.&lt;/p&gt;
</summary></entry><entry><title>Passing the Baton: Succession planning for your project</title><link href="https://pyvideo.org/pycon-au-2017/passing-the-baton-succession-planning-for-your-project.html" rel="alternate"></link><published>2017-08-06T00:00:00+00:00</published><updated>2017-08-06T00:00:00+00:00</updated><author><name>VM (Vicky) Brasseur</name></author><id>tag:pyvideo.org,2017-08-06:pycon-au-2017/passing-the-baton-succession-planning-for-your-project.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;While sharing of and collaborating on software has been around as long as there's been code, the open source concept and movement only came into being in the late 1990s. There are many who remember a time before open source. Of those, most helped to shape the philosophy, laws, governance, and policies which are the foundation of the free and open source movement we enjoy today.&lt;/p&gt;
&lt;p&gt;But what happens when these people decide to retire? Who will carry the baton and lead the movement?&lt;/p&gt;
&lt;p&gt;Thankfully these people are still with us, helping to craft and lead FOSS, but there are very few younger individuals among their ranks. As we look at the next horizon for FOSS, we must consider who will take us there. While we have these founders in our midst, we must take the time to do succession planning for free and open source leadership.&lt;/p&gt;
&lt;p&gt;This talk will cover:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Succession planning: what it is &amp;amp; why we need it&lt;/li&gt;
&lt;li&gt;What new leaders must know &amp;amp; learn&lt;/li&gt;
&lt;li&gt;Steps we can take to develop the FOSS leaders of the future&lt;/li&gt;
&lt;/ul&gt;
</summary></entry><entry><title>Programming Lego Mindstorms robots with Python</title><link href="https://pyvideo.org/pycon-au-2017/programming-lego-mindstorms-robots-with-python.html" rel="alternate"></link><published>2017-08-06T00:00:00+00:00</published><updated>2017-08-06T00:00:00+00:00</updated><author><name>Stoyan Shopov</name></author><id>tag:pyvideo.org,2017-08-06:pycon-au-2017/programming-lego-mindstorms-robots-with-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;We love Python and we (most likely) love Lego, so what's not to love about programming Lego robots with Python?&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.lego.com/en-us/mindstorms"&gt;Lego Mindstorms EV3&lt;/a&gt; is the
latest programmable robotics kit released by Lego.
It comes with a controller brick, sensors, motors and Technic Lego parts.
There are tens of detailed official &lt;a class="reference external" href="https://www.lego.com/en-us/mindstorms/build-a-robot"&gt;projects&lt;/a&gt;
describing step by step how to build bots and program them.
There are hundreds more &lt;a class="reference external" href="https://www.lego.com/en-us/mindstorms/gallery"&gt;fan projects&lt;/a&gt;
available for inspiration.&lt;/p&gt;
&lt;p&gt;Officially Mindstorms are programmed in &lt;a class="reference external" href="http://www.ni.com/labview"&gt;LabVIEW&lt;/a&gt;.
LabVIEW is graphical programming language, which makes it easy for
non-programmers to write instructions for their bots.&lt;/p&gt;
&lt;p&gt;We are not &amp;quot;non-programmers&amp;quot;, so the good news is that the controller brick
can boot from a micro SD card, which allows us to run &lt;a class="reference external" href="http://www.ev3dev.org/"&gt;ev3dev&lt;/a&gt;,
a Debian Linux-based operating system. This is the key to running Python on Lego Mindstorms.&lt;/p&gt;
&lt;p&gt;In this presentation you will learn:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;what is possible to build with Lego Mindstorms&lt;/li&gt;
&lt;li&gt;how to run the ev3dev on your bot and how to connect to it&lt;/li&gt;
&lt;li&gt;how to control the motors and sensors with Python&lt;/li&gt;
&lt;li&gt;about popular third party suppliers&lt;/li&gt;
&lt;li&gt;how to extend your Python EV3 library to support new sensors&lt;/li&gt;
&lt;li&gt;how to run a Jupyter Notebook and control your bot remotely (don't ask about security).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Come and learn the basics, then program your bots and (optionally) take over the world.&lt;/p&gt;
</summary></entry><entry><title>Prototyping Python Microservices in Production</title><link href="https://pyvideo.org/pycon-au-2017/prototyping-python-microservices-in-production.html" rel="alternate"></link><published>2017-08-06T00:00:00+00:00</published><updated>2017-08-06T00:00:00+00:00</updated><author><name>Justin Akers</name></author><id>tag:pyvideo.org,2017-08-06:pycon-au-2017/prototyping-python-microservices-in-production.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Many of us have heard buzzwords like microservice but might not yet have had the time to dig deeper. This talk will:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;introduce general concepts around microservices&lt;/li&gt;
&lt;li&gt;describe and demonstrate thrift. One of the many RPC interfaces python has available&lt;/li&gt;
&lt;li&gt;step through building a sample thrift service&lt;/li&gt;
&lt;li&gt;discuss discoverability, reliability and capacity of the sample service and then introduce consul as a potential solution&lt;/li&gt;
&lt;li&gt;provide an intro to time series data stores such as berengei and prometheus&lt;/li&gt;
&lt;li&gt;quickly touch on measuring microservice latency&lt;/li&gt;
&lt;li&gt;demonstrate one popular method for visualizing and alerting on time series data&lt;/li&gt;
&lt;/ul&gt;
</summary></entry><entry><title>Python 3 for People Who Haven't Been Paying Attention</title><link href="https://pyvideo.org/pycon-au-2017/python-3-for-people-who-havent-been-paying-attention.html" rel="alternate"></link><published>2017-08-06T00:00:00+00:00</published><updated>2017-08-06T00:00:00+00:00</updated><author><name>Christopher Neugebauer</name></author><id>tag:pyvideo.org,2017-08-06:pycon-au-2017/python-3-for-people-who-havent-been-paying-attention.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In 2008 ‚Äî after years of threatening to do so ‚Äî the Python programming language was forked. Python 3 promised to improve a lot of inconsistency and difficulty in the language, and pave the way for performance improvements and new language features. It also broke backwards compatibility with Python 2.&lt;/p&gt;
&lt;p&gt;For years, Python 3 was a difficult language to adopt: bad porting advice meant that transitioning from Python 2 to Python 3 was difficult. Many key Python libraries also took an awfully long time to be ported to Python 3, which kept projects that depended upon them stuck using Python 2.&lt;/p&gt;
&lt;p&gt;In the last few years, however, Python 3 has finally reached the point where it‚Äôs the language that you should be using. Big projects like Django have made the switch and are now stable, which means it‚Äôs not only possible, but actually a good idea to start writing new code in Python 3.&lt;/p&gt;
&lt;p&gt;In this talk, we‚Äôll look at some early missteps in the transition process for Python 3 ‚Äî we‚Äôll look at language changes that got in the way of making porting to Python 3 an easy process. We‚Äôll look at why the original advice for how to adopt Python 3 was bad, and what the correct way to adopt Python 3 now looks like.&lt;/p&gt;
&lt;p&gt;We‚Äôll also look at the last 8 years of language features that have been added to Python 3, many of which make writing asynchronous code super-easy.&lt;/p&gt;
&lt;p&gt;Python 3 is new, shiny, and ready for you to use. Come and learn why now is the time to make the switch!&lt;/p&gt;
</summary></entry><entry><title>Python vs Punch Out</title><link href="https://pyvideo.org/pycon-au-2017/python-vs-punch-out.html" rel="alternate"></link><published>2017-08-06T00:00:00+00:00</published><updated>2017-08-06T00:00:00+00:00</updated><author><name>Greg Hahn</name></author><id>tag:pyvideo.org,2017-08-06:pycon-au-2017/python-vs-punch-out.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python has a wide array of A.I tools to handle all kinds of problems -- leading one Python enthusiast to wonder, &amp;quot;Can Python build a better video game player than me?&amp;quot;&lt;/p&gt;
&lt;p&gt;Greg Hahn will explore the use of NEAT-python, a neural-network focused module to see if it can learn to, and eventually master, the Nintendo game of Punch Out.&lt;/p&gt;
</summary></entry><entry><title>Secrets of a WSGI master.</title><link href="https://pyvideo.org/pycon-au-2017/secrets-of-a-wsgi-master.html" rel="alternate"></link><published>2017-08-06T00:00:00+00:00</published><updated>2017-08-06T00:00:00+00:00</updated><author><name>Graham Dumpleton</name></author><id>tag:pyvideo.org,2017-08-06:pycon-au-2017/secrets-of-a-wsgi-master.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The WSGI (Web Server Gateway Interface) specification for hosting Python web applications was created in 2003. Measured in Internet time, it is ancient. The oldest main stream implementation of the WSGI specification is mod_wsgi, for the Apache HTTPD server and it is 10 years old.&lt;/p&gt;
&lt;p&gt;WSGI is starting to be regarded as not up to the job, with technologies such as HTTP/2, web sockets and async dispatching being the way forward. Reality is that WSGI will be around for quite some time yet and for the majority of use cases is more than adequate.&lt;/p&gt;
&lt;p&gt;The real problem is not that we need to move to these new technologies, but that we aren't using the current WSGI servers to their best advantage. Moving to a new set of technologies will not necessarily make things better and will only create a new set of problems you have to solve.&lt;/p&gt;
&lt;p&gt;As one of the oldest WSGI server implementations, Apache and mod_wsgi may be regarded as boring and not cool, but it is still the most stable option for hosting WSGI applications available. It also hasn't been sitting still, with a considerable amount of development work being done on mod_wsgi in the last few years to make it even more robust and easier to use in a development environment as well as production, including in containerised environments.&lt;/p&gt;
&lt;p&gt;In this talk you will learn about many features of mod_wsgi which you probably didn't even know existed, features which can help towards ensuring your Python web application deployment performs to its best, is secure, and has a low maintenance burden.&lt;/p&gt;
&lt;p&gt;Topics which will be covered include:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Easy deployment of Python web applications using mod_wsgi-express.&lt;/li&gt;
&lt;li&gt;Integration of mod_wsgi-express with a Django web application.&lt;/li&gt;
&lt;li&gt;Using mod_wsgi-express in a development environment.&lt;/li&gt;
&lt;li&gt;How to make use of mod_wsgi-express in a production environment.&lt;/li&gt;
&lt;li&gt;Using mod_wsgi-express in a containerised runtime environment.&lt;/li&gt;
&lt;li&gt;Ensuring consistency between development and production environments using warpdrive.&lt;/li&gt;
&lt;li&gt;Using mod_wsgi-express to bootstrap a system Apache installation for hosting WSGI applications.&lt;/li&gt;
&lt;li&gt;Why you should be using daemon mode of mod_wsgi and not embedded mode.&lt;/li&gt;
&lt;li&gt;How to properly associate mod_wsgi with a Python virtual environment.&lt;/li&gt;
&lt;li&gt;Building a robust deployment that can recover from misbehaving application code, backend services, or request overloading.&lt;/li&gt;
&lt;li&gt;Using hooks provided by mod_wsgi to monitor the performance of your Python web application.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are a beginner, come learn why mod_wsgi is still a good option for deploying your Python web applications. If you are an old time user of mod_wsgi, find out about all the features you probably didn't know existed, revisit your current Python web application deployment and make it even better.&lt;/p&gt;
</summary></entry><entry><title>StarLAB: Developing a hardware based learning platform for students</title><link href="https://pyvideo.org/pycon-au-2017/starlab-developing-a-hardware-based-learning-platform-for-students.html" rel="alternate"></link><published>2017-08-06T00:00:00+00:00</published><updated>2017-08-06T00:00:00+00:00</updated><author><name>Clinton McKinnon</name></author><id>tag:pyvideo.org,2017-08-06:pycon-au-2017/starlab-developing-a-hardware-based-learning-platform-for-students.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The team at Obelisk Systems have developed a hardware coding platform with a companion online learning platform that introduces students to coding with Python and programming hardware. Unique features of the StarLAB platform allow multiple students to wirelessly connect to and run code on the StarLAB platform simultaneously, helping develop teamwork skills while not requiring students to huddle around a computer. We have partnered with the ME program to develop a series of courses available in an online platform to develop coding skills while meeting the outcomes of the BOSTES approved iSTEM curriculum. Students coding skills will be tested at the end of the year with a national Mars Rover Challenge.&lt;/p&gt;
</summary></entry><entry><title>State Machines</title><link href="https://pyvideo.org/pycon-au-2017/state-machines.html" rel="alternate"></link><published>2017-08-06T00:00:00+00:00</published><updated>2017-08-06T00:00:00+00:00</updated><author><name>Clinton Roy</name></author><id>tag:pyvideo.org,2017-08-06:pycon-au-2017/state-machines.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The programming world is full of state, lots and lots of state, dealing with it in a disciplined way provides benefits:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;makes reasoning about a program not only possible, but easy&lt;/li&gt;
&lt;li&gt;makes testing easier and more rigorous&lt;/li&gt;
&lt;li&gt;makes it easier to decompose a problem&lt;/li&gt;
&lt;li&gt;improves traceability from the specification down to the implementation.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The Automat project is a pythonic approach to state machines, in that the user describes all their  states, inputs and outputs using standard python idioms. The real advantage of Automat is that in encapsulates your use of a state machine, users of your state machine don't actually have to learn about state machines, or even know there's a state machine inside, all they call are standard python methods on an instance.&lt;/p&gt;
&lt;p&gt;By the end of this talk, you'll be able to recognise the state machines you're already writing, know some of the theory behind state machines, and be able to use that knowledge to write more rigorous state machines in future, and reap the rewards.&lt;/p&gt;
</summary></entry><entry><title>The Wizardry of Metaprogramming</title><link href="https://pyvideo.org/pycon-au-2017/the-wizardry-of-metaprogramming.html" rel="alternate"></link><published>2017-08-06T00:00:00+00:00</published><updated>2017-08-06T00:00:00+00:00</updated><author><name>Mike Leonard</name></author><id>tag:pyvideo.org,2017-08-06:pycon-au-2017/the-wizardry-of-metaprogramming.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;For those familiar with Python you may think you're comfortable with classes and types. But does &amp;quot;__init__&amp;quot; really create new objects? How can you construct classes dynamically without even using the &amp;quot;class&amp;quot; keyword? What is the type of &amp;quot;type&amp;quot;? What alternative patterns are there for invoking functions? And how does any of this work?&lt;/p&gt;
&lt;p&gt;In this introduction to Metaprogramming we will learn how it can be leveraged to achieve some Python &amp;quot;magic&amp;quot;. You will pick up some techniques and practices you can use yourself and will get an insight into how Django uses Metaprogramming in its ORM as a real-world example of its use. Hopefully you'll even learn a few new things about Python you didn't know were possible.&lt;/p&gt;
</summary></entry><entry><title>Time is an illusion</title><link href="https://pyvideo.org/pycon-au-2017/time-is-an-illusion.html" rel="alternate"></link><published>2017-08-06T00:00:00+00:00</published><updated>2017-08-06T00:00:00+00:00</updated><author><name>Dave Collins</name></author><id>tag:pyvideo.org,2017-08-06:pycon-au-2017/time-is-an-illusion.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Time is an illusion, lunch time doubly so.&lt;/p&gt;
&lt;p&gt;Have you ever wanted to know what goes on when you run datetime.datetime.utcnow().isoformat()?&lt;/p&gt;
&lt;p&gt;How does your computer know what UTC is?&lt;/p&gt;
&lt;p&gt;Why should you use UTC?&lt;/p&gt;
&lt;p&gt;Where should we go for lunch?&lt;/p&gt;
&lt;p&gt;This talk is about the use to date and time in computing.&lt;/p&gt;
&lt;p&gt;Covering precision from years to nanoseconds, discontinuities from Julian to Gregorian, day light savings and down to leap seconds. From measuring time with sundials to cesium atomic clocks.&lt;/p&gt;
&lt;p&gt;With practical tips on timezones, parsing, formatting, changing time for testing and packages to make your life easier.&lt;/p&gt;
</summary></entry><entry><title>Unit Testing with Requests</title><link href="https://pyvideo.org/pycon-au-2017/unit-testing-with-requests.html" rel="alternate"></link><published>2017-08-06T00:00:00+00:00</published><updated>2017-08-06T00:00:00+00:00</updated><author><name>Jamie Lennox</name></author><id>tag:pyvideo.org,2017-08-06:pycon-au-2017/unit-testing-with-requests.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;If you're working with APIs or the web in python you will (or should) have
heard of requests. The 'HTTP for Humans' library is one of python's most
popular and most downloaded libraries and is referenced by the urllib docs as
the recommended way to do HTTP requests in python.&lt;/p&gt;
&lt;p&gt;As strict unit testers of our code we need to assert that our projects are
making the expected HTTP requests however don't want to be making actual
network connections. Most people start with simply mocking this requests
interface but this is much more complex than it appears on first glance and
frequently ends up replicating large chunks of the interface or skipping mocked
out functions within your code.&lt;/p&gt;
&lt;p&gt;In this talk I'll cover two libraries that can help you mock out your HTTP
requests: requests-mock and betamax.&lt;/p&gt;
&lt;p&gt;requests-mock is the extended and more correct version of mocking out the
interface. It lets you ensure that the requests you expect are going over the
wire, but ensures that all the bytes/strings, json decoding and other helper
features that requests offers work, without your mocks becoming unmanageable.&lt;/p&gt;
&lt;p&gt;Betamax gives you functional style testing without the network connection. It
allows you to record real interactions through requests, store that to file,
and replay them later in testing.&lt;/p&gt;
&lt;p&gt;Between them we can assert our behaviour both against our local, constructed
responses, and real recorded responses our application has made.&lt;/p&gt;
&lt;p&gt;With a small example app I'll demonstrate how you can use these libraries, the
different benefits of each, and how to structure your tests to make the most
use of them.&lt;/p&gt;
</summary></entry><entry><title>Video recording conferences and user groups using Python</title><link href="https://pyvideo.org/pycon-au-2017/video-recording-conferences-and-user-groups-using-python.html" rel="alternate"></link><published>2017-08-06T00:00:00+00:00</published><updated>2017-08-06T00:00:00+00:00</updated><author><name>Ryan Verner</name></author><id>tag:pyvideo.org,2017-08-06:pycon-au-2017/video-recording-conferences-and-user-groups-using-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Ever wanted to video record a conference or user group - or attempted to, and groaned at how time consuming and error prone it seems to be? This talk will delve into some of the open-source Python automation and tools we've been using at events since 2009 (including Pycon Australia) to make this process much faster and easier, which allows video teams of volunteers to produce consistently high quality video.&lt;/p&gt;
&lt;p&gt;The systems we use cover everything from pre-event preparation (schedule data, etc), the technology used at the event to live-mix video, and the post-production automation we use for encoding and programmatic uploading of video.&lt;/p&gt;
&lt;p&gt;If you're interested in recording a local event near you, this talk will introduce you with some of the tools and processes we use to do the same.&lt;/p&gt;
</summary></entry><entry><title>What nobody tells you about documentation</title><link href="https://pyvideo.org/pycon-au-2017/what-nobody-tells-you-about-documentation.html" rel="alternate"></link><published>2017-08-06T00:00:00+00:00</published><updated>2017-08-06T00:00:00+00:00</updated><author><name>Daniele Procida</name></author><id>tag:pyvideo.org,2017-08-06:pycon-au-2017/what-nobody-tells-you-about-documentation.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Nearly everyone agrees that good documentation is important to the success of software projects, and yet very few projects actually have good documentation. Even successful projects often have barely adequate documentation.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Often, it's not for want of effort&lt;/em&gt; - the project's developers have worked hard on it - &lt;em&gt;nor for lack of documentation&lt;/em&gt; - the authors have produced a lot of it.&lt;/p&gt;
&lt;p&gt;It simply turns out to be not very good - not helpful enough for the users who should be able to rely on it, and a depressing chore for the authors who have to maintain it.&lt;/p&gt;
&lt;p&gt;The good news is that both these problems can be solved by understanding how documentation works, and what its four different functions are. Structuring documentation according to its four distinct functions helps ensure that each of them is adequately served. It also makes it far easier to write and maintain.&lt;/p&gt;
&lt;p&gt;Using real-life examples I'll draw out the key functions of documentation, and how they map onto different ways of writing it. Putting this into practice is simple when armed with some basic guidelines. The benefits are huge, and available with a minimum of effort.&lt;/p&gt;
&lt;p&gt;I won't be discussing documentation tools or software or other topics that have been covered amply elsewhere, but some neglected and poorly-understood aspects of documentation that &lt;strong&gt;will&lt;/strong&gt; make your software projects and teams more successful.&lt;/p&gt;
</summary></entry><entry><title>When Do We Belong?</title><link href="https://pyvideo.org/pycon-au-2017/when-do-we-belong.html" rel="alternate"></link><published>2017-08-06T00:00:00+00:00</published><updated>2017-08-06T00:00:00+00:00</updated><author><name>aurynn shaw</name></author><id>tag:pyvideo.org,2017-08-06:pycon-au-2017/when-do-we-belong.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Impostor syndrome and feelings of alienation are rampant in the tech communities, and it's hard to understand why, or how to fight it. Drawing on her DevOps background and using Contempt Culture as a lens, aurynn analyses how tech culture builds group membership and constructs outgroups, how these dynamics reinforce impostor syndrome, and what we can do about it.&lt;/p&gt;
</summary></entry><entry><title>A Really Gentle Introduction to Asyncio</title><link href="https://pyvideo.org/pycon-au-2017/a-really-gentle-introduction-to-asyncio.html" rel="alternate"></link><published>2017-08-05T00:00:00+00:00</published><updated>2017-08-05T00:00:00+00:00</updated><author><name>Gregory Saunders</name></author><id>tag:pyvideo.org,2017-08-05:pycon-au-2017/a-really-gentle-introduction-to-asyncio.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;I/O is slow (so very very slow) and waiting for it takes forever
(metaphorically speaking). In this session you'll learn how to use
all that waiting time productively with Python's asyncio module.&lt;/p&gt;
&lt;p&gt;First you'll find out how to make two things happen at the same time
without those pesky, error-prone, threads and you'll find out what's
going on under the hood with the event loop.&lt;/p&gt;
&lt;p&gt;Next you'll get a handle on the future with Futures (no, not the financial
kind!). Then learn how to move all your data around with transports and
how to communicate with protocols.&lt;/p&gt;
&lt;p&gt;Finally, put it all together and learn how to fire up a networked application
and system test it from all sides!&lt;/p&gt;
</summary></entry><entry><title>Analysing a TwitterBot using TextBlob, NLTK and Python</title><link href="https://pyvideo.org/pycon-au-2017/analysing-a-twitterbot-using-textblob-nltk-and-python.html" rel="alternate"></link><published>2017-08-05T00:00:00+00:00</published><updated>2017-08-05T00:00:00+00:00</updated><author><name>Lachlan Blackhall</name></author><id>tag:pyvideo.org,2017-08-05:pycon-au-2017/analysing-a-twitterbot-using-textblob-nltk-and-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&amp;#64;MagicRealismBot is a Twitter bot that randomly generates succinct story synopses that it can tweet. In this talk we will show how we can use TextBlob (and NLTK) to analyse the stories generated by &amp;#64;MagicRealismBot and extract the underlying patterns used to generate the tweets. We will show how TextBlob can be used to analyses the tweets (for example, by sentence extraction and part-of-speech tagging) allowing us to 'reverse engineer' the underlying patterns of the Twitter bot. We will also highlight the variety of other analyses that TextBlob can perform and touch on the state of natural language processing in Python, and elsewhere.&lt;/p&gt;
</summary></entry><entry><title>Automated Python Powered Turret</title><link href="https://pyvideo.org/pycon-au-2017/automated-python-powered-turret.html" rel="alternate"></link><published>2017-08-05T00:00:00+00:00</published><updated>2017-08-05T00:00:00+00:00</updated><author><name>Isaac McClure</name></author><id>tag:pyvideo.org,2017-08-05:pycon-au-2017/automated-python-powered-turret.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Our project began as a python based implementation of computer vision, with the purpose of increasing our own understanding. When we began to think of fun and interesting ways to apply this newfound knowledge, an automated sentry gun was the most exciting option. The turret was to recognize people, and calculate their distance with parallax between two cameras. The turret is composed of a micro-controller, controlled via serial ports by a python program, a Nerf gun, and motors.Using all it is equipped with, the turret is purposed to deliver a Nerf dart  to each person in it‚Äôs range.Thus the benefit to the ‚ÄúTarget‚Äù audience is a free Nerf dart. Using python Open CV libraries, the initial implementation was simple, and as we strove to have a better understanding, we tried to write as much of the code ourselves as possible. Because of this, Python delivered a much slower learning curve, which allowed us to make progress as we learnt. As a result of creating this project we have learned about programming in python, and using it to control electronics. We have a greater appreciation of the ever growing number of embedded systems in the world around us, and want to contribute and create more myself. This project has shown us a new side to programming and computer science, and we have really enjoyed exploring it. As opposed to other school projects, the open ended nature of this project has allowed me to explore our own  interests and learn in a way that suits us best. Not only has it taught us about computer science, it has also taught us valuable lessons in time and project management, and problem solving. Python‚Äôs simple nature has provided an optimal environment for this project. The completion of the project has opened up opportunities, most notably, the opportunity to potentially participate in Pycon!&lt;/p&gt;
</summary></entry><entry><title>Call a C API from Python becomes more enjoyable with CFFI</title><link href="https://pyvideo.org/pycon-au-2017/call-a-c-api-from-python-becomes-more-enjoyable-with-cffi.html" rel="alternate"></link><published>2017-08-05T00:00:00+00:00</published><updated>2017-08-05T00:00:00+00:00</updated><author><name>Jean-S√©bastien Bevilacqua</name></author><id>tag:pyvideo.org,2017-08-05:pycon-au-2017/call-a-c-api-from-python-becomes-more-enjoyable-with-cffi.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;em&gt;Python is slow ! Python can't access bare metal !&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;You often hear theses assumptions? Theses limitations can be surpassed
by Python extensions written in C. However, according to my personal
experience, doing this by leveraging C may yield to several issues
(e.g., memory management).&lt;/p&gt;
&lt;p&gt;C Foreign Function Interface for Python (a.k.a., CFFI) allows you to
easily write Python extensions. One of the main aims of CFFI is to
wrap C libraries. Along the same lines, it may also be used for
performance enhancement.&lt;/p&gt;
&lt;p&gt;I am firstly presenting CFFI and it's two modes of utilization: API level and ABI level.
Then I will share my own experience about wrapping &lt;a class="reference external" href="https://github.com/google/shaderc"&gt;shaderc&lt;/a&gt;
library in six hours (&lt;a class="reference external" href="https://github.com/realitix/pyshaderc"&gt;pyshaderc&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Next we are going to the next level, let's wrap all the Vulkan API!
Vulkan is the new 3D API and is not a piece of cake.
To see the real advantage of CFFI, a side by side comparison between two
Python modules is going to be presented:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;CVulkan&lt;/strong&gt; is a Vulkan wrapper written fully in C, it's a classic C extension for Python&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;vulkan&lt;/strong&gt; is its CFFI counterpart without any C written, only Python&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I have developed two versions of Vulkan wrapper (one in a pure C, and
the second by leveraging CFFI) and I can assure you that CFFI is
way better!&lt;/p&gt;
&lt;p&gt;Let's code!&lt;/p&gt;
</summary></entry><entry><title>Can they really do that? - You'll be amazed at what skills our future coders will bring to your team</title><link href="https://pyvideo.org/pycon-au-2017/can-they-really-do-that-youll-be-amazed-at-what-skills-our-future-coders-will-bring-to-your-team.html" rel="alternate"></link><published>2017-08-05T00:00:00+00:00</published><updated>2017-08-05T00:00:00+00:00</updated><author><name>Pip Cleaves</name></author><id>tag:pyvideo.org,2017-08-05:pycon-au-2017/can-they-really-do-that-youll-be-amazed-at-what-skills-our-future-coders-will-bring-to-your-team.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The new Australian Digital Technologies Curriculum brings new challenges to our classrooms, opportunities for students to develop digital literacy, and excitement for the digital innovation industry. Finally, we will see future coders enter the industry with a defined set of skills and attitudes. Exactly what skills are they bringing with them? What skills will they have tucked in their backpacks when they join your workplaces?&lt;/p&gt;
&lt;p&gt;Join me as I walk you through the learning journey of our future coders and digital disruptors as they traverse the new learning curve thrust upon them in their years at school and the impact this will have on your own teams and work environments.&lt;/p&gt;
</summary></entry><entry><title>Comprehensible Comprehensions</title><link href="https://pyvideo.org/pycon-au-2017/comprehensible-comprehensions.html" rel="alternate"></link><published>2017-08-05T00:00:00+00:00</published><updated>2017-08-05T00:00:00+00:00</updated><author><name>Trey Hunner</name></author><id>tag:pyvideo.org,2017-08-05:pycon-au-2017/comprehensible-comprehensions.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Finding list comprehensions incomprehensible? Having trouble figuring out when to use list comprehensions or just plain for loops?  Come to this talk and learn the how, when, and why of list comprehensions.&lt;/p&gt;
&lt;p&gt;Finding list comprehensions incomprehensible?  Having trouble figuring out when to use list comprehensions or just plain &lt;cite&gt;for&lt;/cite&gt; loops?&lt;/p&gt;
&lt;p&gt;If you find comprehensions tricky to write or perplexing to read, this talk is for you.&lt;/p&gt;
&lt;p&gt;We're going to learn:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;when and how to turn a &lt;cite&gt;for&lt;/cite&gt; loop into a comprehension&lt;/li&gt;
&lt;li&gt;why list comprehensions are often hard to read&lt;/li&gt;
&lt;li&gt;how to use list, set, an dictionary comprehensions as well as generator expressions&lt;/li&gt;
&lt;li&gt;how to make your comprehensions even more readable than your loops&lt;/li&gt;
&lt;li&gt;when and how not to use comprehensions&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You'll come away from this talk with a cheat sheet for helping you remember when and how to use comprehensions.&lt;/p&gt;
</summary></entry><entry><title>Concurrency and Parallelism From The Ground Up</title><link href="https://pyvideo.org/pycon-au-2017/concurrency-and-parallelism-from-the-ground-up.html" rel="alternate"></link><published>2017-08-05T00:00:00+00:00</published><updated>2017-08-05T00:00:00+00:00</updated><author><name>Amber Brown ("HawkOwl")</name></author><id>tag:pyvideo.org,2017-08-05:pycon-au-2017/concurrency-and-parallelism-from-the-ground-up.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;When writing an application, it is common to want to do many things at once. For web servers, this is serve multiple web requests, for GUI applications it's doing a background task whilst keeping the UI responsive. But how do we actually do that? This talk will go into how concurrency and parallelism work from the CPU, OS, and threads up, how state (data) is shared between them, and how this interacts with the functions that you, the programmer, write, and how you can write properly behaving concurrent or parallel software.&lt;/p&gt;
</summary></entry><entry><title>Covered in Bees! Deploying an app to 6 platforms in 20 minutes</title><link href="https://pyvideo.org/pycon-au-2017/covered-in-bees-deploying-an-app-to-6-platforms-in-20-minutes.html" rel="alternate"></link><published>2017-08-05T00:00:00+00:00</published><updated>2017-08-05T00:00:00+00:00</updated><author><name>Russell Keith-Magee</name></author><id>tag:pyvideo.org,2017-08-05:pycon-au-2017/covered-in-bees-deploying-an-app-to-6-platforms-in-20-minutes.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Have you ever wanted to write a GUI application you can run on your laptop? What about an app that you can run on your phone? Historically, these have been difficult to achieve with Python, and impossible to achieve without learning a different API for each platform. But no more.&lt;/p&gt;
&lt;p&gt;BeeWare is a collection of tools and libraries that allows you to build cross-platform native GUI applications in pure Python, targeting desktop, mobile and web platforms. In this talk, you'll be introduced to the BeeWare suite of tools and libraries, and see how you can use them to develop, from scratch, a simple GUI application that can be deployed as a standalone desktop application, a mobile phone application, and a single page webapp - without making any changes to the application's codebase.&lt;/p&gt;
</summary></entry><entry><title>Fighting the controls: madness and tragedy for programmers</title><link href="https://pyvideo.org/pycon-au-2017/fighting-the-controls-madness-and-tragedy-for-programmers.html" rel="alternate"></link><published>2017-08-05T00:00:00+00:00</published><updated>2017-08-05T00:00:00+00:00</updated><author><name>Daniele Procida</name></author><id>tag:pyvideo.org,2017-08-05:pycon-au-2017/fighting-the-controls-madness-and-tragedy-for-programmers.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;em&gt;Damn it, this can‚Äôt be happening!&lt;/em&gt; As programmers, we find ourselves time and again spiralling down into tighter loops of desperate troubleshooting, fighting the controls of our machinery and descending into what feels like a kind of madness. Later, when it's all over, we realise that the clues we needed to recover the situation were staring us in the face all along, but we somehow couldn't even see them.&lt;/p&gt;
&lt;p&gt;There's a reason for this: &lt;em&gt;the nature of debugging means that it quickly tips us into these states, and then very effectively keeps us there&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;In programming we have worked hard to improve some aspects of programmers' work, creating methodologies, development frameworks, paradigms, practices and thinking deeply about how to solve the problems of producing good code. We have done very little work to improve the way we &lt;strong&gt;debug&lt;/strong&gt; our code,&lt;/p&gt;
&lt;p&gt;The good news is that although programmers have not developed very adequate strategies or techniques for mitigating the risks that debugging draws us into, other industries, and in particular aviation, have. We can learn from their lessons without paying their price.&lt;/p&gt;
&lt;p&gt;This is a technical talk about processes and methodologies in software development, based on an analysis of programming as a creative craft. It uses analogies and parallels from other disciplines to illuminate aspects of programming that often remain obscure to programmers themselves, and draws upon the lessons of aviation to provide concrete, practical ways to improve the way programmers debug code.&lt;/p&gt;
</summary></entry><entry><title>Front-end integration testing with splinter</title><link href="https://pyvideo.org/pycon-au-2017/front-end-integration-testing-with-splinter.html" rel="alternate"></link><published>2017-08-05T00:00:00+00:00</published><updated>2017-08-05T00:00:00+00:00</updated><author><name>Nick Coghlan</name></author><id>tag:pyvideo.org,2017-08-05:pycon-au-2017/front-end-integration-testing-with-splinter.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;I like words. I vastly prefer writing an essay to drawing a picture, writing command line apps to writing GUI apps, and writing back-end API servers to writing front-end interactive web applications.&lt;/p&gt;
&lt;p&gt;But what we prefer to do and what we need to get done aren't always the same thing, and even back-end developers will sometimes need to put together a basic interactive front-end, and the related test cases to make sure it keeps working as intended.&lt;/p&gt;
&lt;p&gt;Fortunately for us, the &lt;cite&gt;splinter&lt;/cite&gt; web application testing library offers the necessary tools for even the most JavaScript-averse developer to get started writing automated tests for their front-end components, and this presentation will walk through the essentials of getting set up to write behavioural tests for an interactive front-end as easily as you do for your back-end API server.&lt;/p&gt;
</summary></entry><entry><title>GraphQL: how to make clients enjoy using your API</title><link href="https://pyvideo.org/pycon-au-2017/graphql-how-to-make-clients-enjoy-using-your-api.html" rel="alternate"></link><published>2017-08-05T00:00:00+00:00</published><updated>2017-08-05T00:00:00+00:00</updated><author><name>Tomasz Modrzy≈Ñski</name></author><id>tag:pyvideo.org,2017-08-05:pycon-au-2017/graphql-how-to-make-clients-enjoy-using-your-api.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Seemingly long gone are times where one monolith application on server was responsible for handling all the data. Likewise, nowaday releasing just web application without mobile counterpart does not seem like a good idea from business perspective - and those several client applications, although doing roughly the same thing, may have different business requirements. Couple that with separation of concerns on the server side, and a big headache is inevitable.&lt;/p&gt;
&lt;p&gt;During this talk, I will go through one, relatively new solution to above issues - GraphQL. Coming from Facebook, it makes working with the API a really pleasant experience for the clients, as communication with server is declarative, not imperative. It also helps keep things in check on the server's side by providing a schema language. We will cover basic concepts, see how querying looks like from client's side (and why it is so good), as well as look at example implementations for pure Python, Django and SQLAlchemy.&lt;/p&gt;
</summary></entry><entry><title>Harnessing the APIs you didn't know existed</title><link href="https://pyvideo.org/pycon-au-2017/harnessing-the-apis-you-didnt-know-existed.html" rel="alternate"></link><published>2017-08-05T00:00:00+00:00</published><updated>2017-08-05T00:00:00+00:00</updated><author><name>Katie Bell</name></author><id>tag:pyvideo.org,2017-08-05:pycon-au-2017/harnessing-the-apis-you-didnt-know-existed.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A surprising number of companies and services provide public APIs to access their data and services or interact with their application. This gives you, as a developer, a powerful set of tools to very simply build your own new apps and integrations. If you've learned some Python but aren't sure what to do next, then building small apps on public APIs is a great way to develop your skills further.&lt;/p&gt;
&lt;p&gt;We'll go through the setup that most public APIs require, getting keys and using OAuth to access the APIs, hosting the app somewhere. We'll use a Slack bot as an example, plus some more examples with cool APIs. Lastly, we'll go through list of available APIs (and links to more lists) to get your creative juices flowing. You never knew that these services had an API.&lt;/p&gt;
</summary></entry><entry><title>How Django helped us make a better conference website</title><link href="https://pyvideo.org/pycon-au-2017/how-django-helped-us-make-a-better-conference-website.html" rel="alternate"></link><published>2017-08-05T00:00:00+00:00</published><updated>2017-08-05T00:00:00+00:00</updated><author><name>Christopher Neugebauer</name></author><id>tag:pyvideo.org,2017-08-05:pycon-au-2017/how-django-helped-us-make-a-better-conference-website.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Over the last year, PyCon Australia and linux.conf.au have moved away from a monolithic conference management software package ‚Äì developed in-house over the course of several conferences ‚Äì to a suite of open source Django apps.&lt;/p&gt;
&lt;p&gt;Making the move to Django allowed linux.conf.au 2017 to pick existing apps that were a best fit for our conference‚Äôs needs, and let us focus on building up bespoke apps for the few remaining tasks that hadn‚Äôt been solved yet.&lt;/p&gt;
&lt;p&gt;We‚Äôll look at how the move went for linux.conf.au 2017, what went wrong, what went well, and how moving to Django helped us make a conference website that was easier for team members to contribute to, and solved long-standing problems that we couldn‚Äôt solve before.&lt;/p&gt;
&lt;p&gt;We‚Äôll also look at the open source projects that we‚Äôve launched and adopted, and show you where you can contribute to making next year‚Äôs PyCon AU website even better, or how to use our suite to help run your own conference.&lt;/p&gt;
</summary></entry><entry><title>How to write a container daemon in Python</title><link href="https://pyvideo.org/pycon-au-2017/how-to-write-a-container-daemon-in-python.html" rel="alternate"></link><published>2017-08-05T00:00:00+00:00</published><updated>2017-08-05T00:00:00+00:00</updated><author><name>Anthony Shaw</name></author><id>tag:pyvideo.org,2017-08-05:pycon-au-2017/how-to-write-a-container-daemon-in-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;When the authors of Docker first started, they wrote the Docker daemon in Python. This was later switching for Go, but why? This talk will cover mocker, a container runtime Anthony wrote to understand Docker by rewriting its basic functions in 100% Python. Anthony will walk through how to write a Docker daemon in Python whilst applying it to real problems. Whilst the tool might not be production ready, it demonstrates some patterns, libraries and ideas for working with Docker containers from Python.&lt;/p&gt;
</summary></entry><entry><title>Identity 2.0: the what, why and how of social and federated login</title><link href="https://pyvideo.org/pycon-au-2017/identity-20-the-what-why-and-how-of-social-and-federated-login.html" rel="alternate"></link><published>2017-08-05T00:00:00+00:00</published><updated>2017-08-05T00:00:00+00:00</updated><author><name>Fraser Tweedale</name></author><id>tag:pyvideo.org,2017-08-05:pycon-au-2017/identity-20-the-what-why-and-how-of-social-and-federated-login.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Whether you're developing public-facing web apps or deploying behind
the corporate firewall, the days of identity silos are over.  Social
auth (&lt;em&gt;log in with FooBookHub&lt;/em&gt;) and federated identity (&lt;em&gt;SAML&lt;/em&gt;,
&lt;em&gt;OpenID Connect&lt;/em&gt; and friends) are the new normal.  The advantages
are clear: developers and operators have less security-sensitive
code to write and deploy, while users experience less password/account fatigue, and
enjoy improved productivity through &lt;em&gt;single sign-on&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;But there's no such thing as a free lunch; like most things in technology there are
trade-offs.  Federated authentication protocols are inherently more
elaborate than plain old passwords; more moving parts means more
complex deployment and more points of failure.  Fortunately there are
tools to ease the burden and smooth the process of securing your applications.&lt;/p&gt;
&lt;p&gt;In this extended session for web developers and
administrators/operations folks, attendees will learn and experience
how to deploy and use federated auth, end-to-end from the identity
provider to the app.  The session will cover:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The basics of federated authentication including &lt;strong&gt;protocol
overviews&lt;/strong&gt; and comparisons.&lt;/li&gt;
&lt;li&gt;How to use &lt;strong&gt;social auth&lt;/strong&gt; providers for public-facing
applications, allowing users to log in with an account they
already have.&lt;/li&gt;
&lt;li&gt;How to leverage accounts in centralised identity management
systems (&lt;em&gt;FreeIPA&lt;/em&gt;, &lt;em&gt;Active Directory&lt;/em&gt;, &lt;em&gt;LDAP&lt;/em&gt;, etc) for &lt;strong&gt;single
sign-on&lt;/strong&gt; in an organisation.&lt;/li&gt;
&lt;li&gt;How &lt;strong&gt;identity brokers&lt;/strong&gt; like &lt;em&gt;Keycloak&lt;/em&gt; make it easy to use a
variety of external authentication providers, and provide a
consistent user experience across multiple applications.&lt;/li&gt;
&lt;li&gt;How to use external identities in your applications with the help
of your web server, focusing in particlar on popular &lt;strong&gt;Python web
frameworks&lt;/strong&gt; and Apache (though the principles are more widely
applicable).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Security&lt;/strong&gt; characteristics, and discussion of some challenging
scenarios including testing, account merging and single sign-out.&lt;/li&gt;
&lt;/ul&gt;
</summary></entry><entry><title>Introduction to profiling python performance with USDT</title><link href="https://pyvideo.org/pycon-au-2017/introduction-to-profiling-python-performance-with-usdt.html" rel="alternate"></link><published>2017-08-05T00:00:00+00:00</published><updated>2017-08-05T00:00:00+00:00</updated><author><name>Chris Miceli</name></author><id>tag:pyvideo.org,2017-08-05:pycon-au-2017/introduction-to-profiling-python-performance-with-usdt.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;As of Python3.6 SystemTap/DTrace probes&amp;nbsp;have been added to the python interpreter which mean that we have the ability to inspect GC pause, function entrance and exit and a few other internal procedures of the process. Using these markers, we can diagnose the most difficult of runtime issues with unprecedented access to the running state of the application, in particular allowing SysAdmins/DevOps/Production Engineers to better understand why a particular application is misbehaving.&lt;/p&gt;
&lt;p&gt;In this talk, I'll explain what these probes are, how it works and provide examples as to how you can leverage the SystemTap and BPF interface to debug some of the more complex systems. I will cover when these tools are the right thing to use and give insight to when you should be using something different and more appropriate.&lt;/p&gt;
</summary></entry><entry><title>Mocking: virtual reality for your Python tests</title><link href="https://pyvideo.org/pycon-au-2017/mocking-virtual-reality-for-your-python-tests.html" rel="alternate"></link><published>2017-08-05T00:00:00+00:00</published><updated>2017-08-05T00:00:00+00:00</updated><author><name>Raphael Merx</name></author><id>tag:pyvideo.org,2017-08-05:pycon-au-2017/mocking-virtual-reality-for-your-python-tests.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Unit tests: they are fast, easy to write and protect your code against future bugs. But what happens when unit tests depend on modules you don't want to test? Or even when they depend on external APIs you cannot use while testing? That's where mocking comes in. The &lt;cite&gt;unittest.mock&lt;/cite&gt; module lets you mimic behavior for your test dependencies. It also gives you tools to make sure your code calls its dependencies at the right places and with the right arguments.&lt;/p&gt;
&lt;p&gt;This talk will use a set of examples to showcase what the &lt;cite&gt;mock&lt;/cite&gt; module can do, and how to make use of it in your tests. We will cover mocking functions, objects and modules, as well as various caveats and recipes for mocking Python code.&lt;/p&gt;
</summary></entry><entry><title>One Data Pipeline to Rule Them All</title><link href="https://pyvideo.org/pycon-au-2017/one-data-pipeline-to-rule-them-all.html" rel="alternate"></link><published>2017-08-05T00:00:00+00:00</published><updated>2017-08-05T00:00:00+00:00</updated><author><name>Sam Kitajima-Kimbrel</name></author><id>tag:pyvideo.org,2017-08-05:pycon-au-2017/one-data-pipeline-to-rule-them-all.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;There are myriad data storage systems available for every use case imaginable, but letting application teams choose storage engines independently can lead to duplicated efforts and wheel reinvention. This talk will explore how to build a reusable data pipeline based on Kafka to support multiple applications, datasets, and use cases including archival, warehousing and analytics, stream and batch processing, and low-latency &amp;quot;hot&amp;quot; storage.&lt;/p&gt;
</summary></entry><entry><title>Organizing conferences for learners: How we made it work in Namibia</title><link href="https://pyvideo.org/pycon-au-2017/organizing-conferences-for-learners-how-we-made-it-work-in-namibia.html" rel="alternate"></link><published>2017-08-05T00:00:00+00:00</published><updated>2017-08-05T00:00:00+00:00</updated><author><name>Jessica Upani</name></author><id>tag:pyvideo.org,2017-08-05:pycon-au-2017/organizing-conferences-for-learners-how-we-made-it-work-in-namibia.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this talk I will focus on why it is important to have conferences for learners (especially in developing countries), compare how different it is to organizing a conference for adults, do‚Äôs and don‚Äôts of organizing such a conference, how to organize one and possible outcomes of such conferences.&lt;/p&gt;
</summary></entry><entry><title>PEP 498: The Monologue</title><link href="https://pyvideo.org/pycon-au-2017/pep-498-the-monologue.html" rel="alternate"></link><published>2017-08-05T00:00:00+00:00</published><updated>2017-08-05T00:00:00+00:00</updated><author><name>Mariatta Wijaya</name></author><id>tag:pyvideo.org,2017-08-05:pycon-au-2017/pep-498-the-monologue.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python 3.6 was released in December 2016, and it includes 16 new PEPs! In this talk, we will focus on PEP 498 - Literal String Interpolation, affectionately known as f-strings. Let's learn about f-strings. See some examples, and know the gotchas. You‚Äôll want to upgrade to Python 3.6 just for this!&lt;/p&gt;
</summary></entry><entry><title>Python: Ludicrous mode (with Django)</title><link href="https://pyvideo.org/pycon-au-2017/python-ludicrous-mode-with-django.html" rel="alternate"></link><published>2017-08-05T00:00:00+00:00</published><updated>2017-08-05T00:00:00+00:00</updated><author><name>Tyson Clugg</name></author><id>tag:pyvideo.org,2017-08-05:pycon-au-2017/python-ludicrous-mode-with-django.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Introducing the idea of appropriate data flows, query optimisation, and algorithm selections via the broader objective of reducing website latency.  The techniques taught are broadly applicable, not specific to websites in Django.&lt;/p&gt;
&lt;p&gt;The goal is to open audience members eyes to the broader concepts of appropriate tech stack selection by looking briefly at HTTP/2, caching (both local and global), infrastructure stack layout,  streaming responses, aggregate requests, lazy evaluation, and some thoughts on the future of low-latency web development.&lt;/p&gt;
</summary></entry><entry><title>Saturday PM Lightning Talks</title><link href="https://pyvideo.org/pycon-au-2017/saturday-pm-lightning-talks.html" rel="alternate"></link><published>2017-08-05T00:00:00+00:00</published><updated>2017-08-05T00:00:00+00:00</updated><author><name>Tim Ansell</name></author><id>tag:pyvideo.org,2017-08-05:pycon-au-2017/saturday-pm-lightning-talks.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Lightning Talks Saturday, August 05 2017 04 PM&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Tim Ansell - Python on FPGAs 1:15&lt;/li&gt;
&lt;li&gt;Nicky Ringland and Jim Mussared - National Computer Science School 6:28&lt;/li&gt;
&lt;li&gt;Clinton McKinnon - The Amazing StarLAB 11:11&lt;/li&gt;
&lt;li&gt;Josh Simmons - Open Source in Education 13:32&lt;/li&gt;
&lt;li&gt;Paul Weipa - Systematic Problem Solving 18:34&lt;/li&gt;
&lt;li&gt;Tim Leslie - PEP-628 The world's oldest bug 23:50&lt;/li&gt;
&lt;li&gt;Nick Moore - OMNICODE 29:08&lt;/li&gt;
&lt;li&gt;Andrew Lonsdale - FASTQE 33:22&lt;/li&gt;
&lt;li&gt;Tisham Dhar - Energy Monitor 37:29&lt;/li&gt;
&lt;li&gt;Rhydwyn McGuire - R 42:11&lt;/li&gt;
&lt;li&gt;Josh Driver - Faster PostgreSQL Text Search 44:26&lt;/li&gt;
&lt;li&gt;Fraser Tweedale - On naming things 49:49&lt;/li&gt;
&lt;li&gt;Mike Leonard - High Risk Demo Episode 2 55:28&lt;/li&gt;
&lt;li&gt;Ned Letcher - PyEnv 59:11&lt;/li&gt;
&lt;li&gt;Luke Deller - Garbage Collection Live demo 1:04:25&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="lightning talks"></category></entry><entry><title>Scaling Down: Running Large Sites Locally</title><link href="https://pyvideo.org/pycon-au-2017/scaling-down-running-large-sites-locally.html" rel="alternate"></link><published>2017-08-05T00:00:00+00:00</published><updated>2017-08-05T00:00:00+00:00</updated><author><name>Andrew Godwin</name></author><id>tag:pyvideo.org,2017-08-05:pycon-au-2017/scaling-down-running-large-sites-locally.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;At Eventbrite we have a moderately complex site - lots of different services, datastores, caches and other moving parts. It's all managed by our wonderful Ops team in production, and scaling up there is a problem we're working on, but what about scaling down? How do you get over a hundred moving parts to run on hundreds of developer laptops with limited RAM and big demands on productivity and development speed?&lt;/p&gt;
&lt;p&gt;We'll go through how we developed a custom development environment based around Docker containers and a Python-based tool called &lt;cite&gt;bay&lt;/cite&gt; that manages not only what containers to run but also how to interlink them, how changes propagate through the system, and how to keep up with all the changes streaming in from outside.&lt;/p&gt;
</summary></entry><entry><title>Syntax Hijacking: Genius or Evil?</title><link href="https://pyvideo.org/pycon-au-2017/syntax-hijacking-genius-or-evil.html" rel="alternate"></link><published>2017-08-05T00:00:00+00:00</published><updated>2017-08-05T00:00:00+00:00</updated><author><name>Tennessee Leeuwenburg</name></author><id>tag:pyvideo.org,2017-08-05:pycon-au-2017/syntax-hijacking-genius-or-evil.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Many Python developers will be familiar with Python's __dunder__ methods, which can be used to define how classes are intended to operate according to various infix operators. For example, the developer can easily control what happens when an object interacts with '+', '-', '[]'. A full list can be found here: &lt;a class="reference external" href="http://www.python-course.eu/python3_magic_methods.php"&gt;http://www.python-course.eu/python3_magic_methods.php&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This is used by some frameworks in a sympathetic way, such as matrix multiplication and addition, where the concepts extend very naturally to those classes. It can also be used for more advanced string and natural language processing, where the connection may be less clear. It is also possible to create utter confusion and havoc.&lt;/p&gt;
&lt;p&gt;What is the difference between elegant re-use, and a violation of standard expectations? Should you avoid re-implementing these methods so that basic operators always have reliable semantics, or is it reasonable to create your own object semantics for a domain specific problem?&lt;/p&gt;
&lt;p&gt;This talk will present some of the ways in which the magic methods can be used for ends either wonderful or terrible.&lt;/p&gt;
</summary></entry><entry><title>The Business of Community</title><link href="https://pyvideo.org/pycon-au-2017/the-business-of-community.html" rel="alternate"></link><published>2017-08-05T00:00:00+00:00</published><updated>2017-08-05T00:00:00+00:00</updated><author><name>VM (Vicky) Brasseur</name></author><id>tag:pyvideo.org,2017-08-05:pycon-au-2017/the-business-of-community.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;While community management and developer relations are gaining acceptance, many companies still don't know how these efforts can benefit not only the communities of the open source projects on which their business relies but also their productivity and profitability.&lt;/p&gt;
&lt;p&gt;In this talk, I'll look at community from a business perspective, including the effect community can have on an organization's bottom line. Although there are communities everywhere, I'll approach the topic‚Äîmeaning, communities, their members, and their contributors‚Äîfrom a free/open source perspective.&lt;/p&gt;
&lt;p&gt;In this talk I'll cover:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Business reasons for supporting a community&lt;/li&gt;
&lt;li&gt;Metrics for gauging community management success from the business' perspective&lt;/li&gt;
&lt;li&gt;Getting started in community management&lt;/li&gt;
&lt;li&gt;Risks of community management&lt;/li&gt;
&lt;/ul&gt;
</summary></entry><entry><title>The Importance of Design: maybe the users aren't wrong?</title><link href="https://pyvideo.org/pycon-au-2017/the-importance-of-design-maybe-the-users-arent-wrong.html" rel="alternate"></link><published>2017-08-05T00:00:00+00:00</published><updated>2017-08-05T00:00:00+00:00</updated><author><name>Charelle Collett</name></author><id>tag:pyvideo.org,2017-08-05:pycon-au-2017/the-importance-of-design-maybe-the-users-arent-wrong.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Educating users on how something works is hard.  What if you don't have to?&lt;/p&gt;
&lt;p&gt;Usability design isn't just about the UI. Making your software, docs, products, and systems intuitive to use reduces frustration, support requirements, makes them safer and more secure (no more weird workarounds). 'Human error' can often be avoided by designing around what users actually do, rather than educating them on how things are supposed to work.&lt;/p&gt;
&lt;p&gt;In this talk I will be covering Don Norman's design principles, and how you can (and should!) apply them to everything, including software, documentation, error messages and even doors. Have you ever felt stupid pushing on a 'pull' door? Maybe it wasn't your fault!&lt;/p&gt;
</summary></entry><entry><title>We're no strangers to VoIP: Building the National Rick Astley Hotline</title><link href="https://pyvideo.org/pycon-au-2017/were-no-strangers-to-voip-building-the-national-rick-astley-hotline.html" rel="alternate"></link><published>2017-08-05T00:00:00+00:00</published><updated>2017-08-05T00:00:00+00:00</updated><author><name>Paul '@pjf' Fenwick</name></author><id>tag:pyvideo.org,2017-08-05:pycon-au-2017/were-no-strangers-to-voip-building-the-national-rick-astley-hotline.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;We're no strangers to VoIP
You know XML, and so do I
A full implementation's what I'm thinking of
You wouldn't get this from any other talk&lt;/p&gt;
&lt;p&gt;I just gotta tell you how to code this
Gotta make you understand&lt;/p&gt;
&lt;p&gt;Learn how to set VoIP up
Learn how to tear calls down
Learn how to run high availability, and stateless
Learn how tech makes you cry
Learn how to make upgrades on the fly
Learn how your call will be monitored for quality assurance and training purposes&lt;/p&gt;
&lt;p&gt;We've known VoIP exists for so long
You've got an idea but
You're too shy to code it
Inside we know it's just a SMOC
We know the rules and we're gonna code it&lt;/p&gt;
&lt;p&gt;And if you ask me how I'm feeling
I'll cover status APIs&lt;/p&gt;
&lt;p&gt;Learn how to set VoIP up
Learn how to tear calls down
Learn how to run high availability, and stateless
Learn how tech makes you cry
Learn how to make upgrades on the fly
Learn how your call is important to us and will be answered shortly&lt;/p&gt;
</summary></entry><entry><title>Wordsmiths - Operational Transformation in Python</title><link href="https://pyvideo.org/pycon-au-2017/wordsmiths-operational-transformation-in-python.html" rel="alternate"></link><published>2017-08-05T00:00:00+00:00</published><updated>2017-08-05T00:00:00+00:00</updated><author><name>Dion Misic</name></author><id>tag:pyvideo.org,2017-08-05:pycon-au-2017/wordsmiths-operational-transformation-in-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Wordsmiths is an open-source project written by Dion Misic in Python to understand and pave a path toward an improved understanding of Operational Transformation, the algorithm behind collaborative editing in Google Docs. The project is built on the Flask micro-framework and uses Python to perform Operational Transformation so multiple users can collaborate on a shared document in real time in high latency environments such as the web.&lt;/p&gt;
&lt;p&gt;The model-view-controller architecture of Flask allows web applications to be manageable, dynamic and scalable - all desirable features for publishing a collaborative system with Operational Transformation to the web. Subsequently, the simplicity of Python and Flask allow the algorithms documentation to be simpler and easier to comprehend for people who are new to the topic. The limitations of using Python is that technologies such as Javascript and Ajax need to be implemented in addition to open communication between the server and the client; as Python is a server scripting language.&lt;/p&gt;
&lt;p&gt;As a high school student, this project has allowed me to implement complex algorithms, measure their algorithmic efficiency, create relational databases and explore new programming paradigms which can be used in real-world applications outside the confines of school. Despite having no prior knowledge of web development, this project has allowed me to understand web development in greater depth and how a client and server can work together to manipulate and store data. I will share my experiences with Python, the shortcomings of Python and how I managed to develop my project using Flask.&lt;/p&gt;
</summary></entry><entry><title>Bowerbirds of Technology: Architecture and Operations at Less-Than-Facebook Scale</title><link href="https://pyvideo.org/pycon-au-2017/bowerbirds-of-technology-architecture-and-operations-at-less-than-facebook-scale.html" rel="alternate"></link><published>2017-08-04T00:00:00+00:00</published><updated>2017-08-04T00:00:00+00:00</updated><author><name>Sam Kitajima-Kimbrel</name></author><id>tag:pyvideo.org,2017-08-04:pycon-au-2017/bowerbirds-of-technology-architecture-and-operations-at-less-than-facebook-scale.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Facebook, Google, Uber, LinkedIn, and friends are the rarefied heights of software engineering. They encounter and solve problems at scales shared by few others, and as a result, their priorities in production engineering and architecture are just a bit different from the rest of us down here in the other 99% of services. Even as a lead engineer for Twilio, I rarely deal with the same uncharted territories of scale explored by these truly massive systems. Through deconstructing a few blog posts from these giants, we‚Äôll evaluate just what is it that they‚Äôre thinking about when they build systems, why they make the choices they do, and whether any of those choices are relevant to those of us operating at high scale yet still something less than millions of requests per second.&lt;/p&gt;
&lt;p&gt;This talk will go into depth on how to evaluate, choose, and deploy technology to meet your customers‚Äô requirements without requiring a small army of engineers to answer 2 AM pages. We‚Äôll go through what you should think about when picking open-source systems (as well as hosted PaaS/IaaS/SaaS providers) to meet your needs: maintainership, extensibility, security, stability, and more.&lt;/p&gt;
&lt;p&gt;We‚Äôll also talk about how to pick realistic goals for your project and business: what are the implications of claiming five nines for the person carrying the pager? How will you communicate with your customers when you‚Äôre throwing errors and breaking SLAs? What does disaster recovery mean for your systems, and how much effort will it require to implement and test your DR plan (ahead of time!)?&lt;/p&gt;
&lt;p&gt;With these guidelines in mind, you should be better equipped to say no (or yes!) the next time your team‚Äôs software hipster proposes moving everything to the Next Big Thing.&lt;/p&gt;
</summary></entry><entry><title>Building the next-generation Conversational AI with Python and Deep Learning</title><link href="https://pyvideo.org/pycon-au-2017/building-the-next-generation-conversational-ai-with-python-and-deep-learning.html" rel="alternate"></link><published>2017-08-04T00:00:00+00:00</published><updated>2017-08-04T00:00:00+00:00</updated><author><name>David Low Jia Wei</name></author><id>tag:pyvideo.org,2017-08-04:pycon-au-2017/building-the-next-generation-conversational-ai-with-python-and-deep-learning.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In this fast-paced world, customers demand ease and efficiency when they talk to a company. Here comes Chatbot, an automated conversational agent which conducts conversations via text or voice. Its main purpose is to strealine interactions between people and services around-the-clock. Chatbots are beneficial for both parties: developing chatbots is cheaper than training and hiring human customer service agents for the company, and customers often prefer a brisk mobile interaction over talking with someone in person or with the call center. From Apple's Siri to Amazon's Alexa, chatbots are making appearance everywhere. However, there are plenty of 'dumb' chatbots in the market that utilised rather straight-forward pattern matching or rule-based approaches.&lt;/p&gt;
&lt;p&gt;For this talk, I will be starting with the current state of &lt;strong&gt;Conversational Intelligence&lt;/strong&gt; and some common Python libraries used in building chatbots. Various approaches of building conversation engine such as &lt;strong&gt;pattern matching&lt;/strong&gt;, &lt;strong&gt;word embedding&lt;/strong&gt; and &lt;strong&gt;long short-term memory (LSTM)&lt;/strong&gt; models will be discussed. At the same time, I would present the next generation of &lt;strong&gt;Conversational AI&lt;/strong&gt; that focuses on &lt;strong&gt;Question Answering&lt;/strong&gt; and perform a live-demo of such system. After the demo, the inner workings will be explained and relevant resources (incl a Python framework for conversational AI research and datasets) will be introduced to the participants. Lastly, I would also share my experience launching commercial chatbots with Fortune 500 clients and a few pitfalls one should be aware of before concluding the talk.&lt;/p&gt;
</summary></entry><entry><title>Django &amp; JavaScript: A long and complicated friendship</title><link href="https://pyvideo.org/pycon-au-2017/django-javascript-a-long-and-complicated-friendship.html" rel="alternate"></link><published>2017-08-04T00:00:00+00:00</published><updated>2017-08-04T00:00:00+00:00</updated><author><name>Jen Zajac</name></author><id>tag:pyvideo.org,2017-08-04:pycon-au-2017/django-javascript-a-long-and-complicated-friendship.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Django and JavaScript have co-existed happily for a very long time, with the first JS being added to the Django codebase happening way, way back in July 2005 - with the addition of some JS to make the admin middleware (yep, it wasn't an app yet!) more interactive.&lt;/p&gt;
&lt;p&gt;In the years since, JavaScript's ubiquity on the web has been well established, and the ways in which we think about how to use JS in combination with Django have evolved. We've gone from enhancing our templates with a bit of jQuery, through to not even using Django's templating at all. Instead we can use Django's popular REST framework to communicate to a decoupled JS single page web application.&lt;/p&gt;
&lt;p&gt;We'll take a tour through that history, learning from the good and the bad alike. We'll consider what the future holds for that longstanding relationship, and think about what the arrival of Node.js as a potential competitor on the backend heralds.&lt;/p&gt;
</summary></entry><entry><title>Finding Currajong - Fuzzy string searches in Python</title><link href="https://pyvideo.org/pycon-au-2017/finding-currajong-fuzzy-string-searches-in-python.html" rel="alternate"></link><published>2017-08-04T00:00:00+00:00</published><updated>2017-08-04T00:00:00+00:00</updated><author><name>Martin Schweitzer</name></author><id>tag:pyvideo.org,2017-08-04:pycon-au-2017/finding-currajong-fuzzy-string-searches-in-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;With the advent of Big Data, data scrubbing (finding matches in imperfect data) becomes an important issue.  In this talk I will look at several algorithms for doing partial matches on strings and names and compare some strengths and weaknesses of each approach.  We will also look at Python code and libraries for this work.&lt;/p&gt;
</summary></entry><entry><title>From PyPI to Production: Shipping Software Responsibly.</title><link href="https://pyvideo.org/pycon-au-2017/from-pypi-to-production-shipping-software-responsibly.html" rel="alternate"></link><published>2017-08-04T00:00:00+00:00</published><updated>2017-08-04T00:00:00+00:00</updated><author><name>Thomi Richards</name></author><id>tag:pyvideo.org,2017-08-04:pycon-au-2017/from-pypi-to-production-shipping-software-responsibly.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Most, if not all, Python developers know how to create a wheel on PyPI - however, that's just the first step in delivering a product in a responsible manner to your users. As a publisher, it is your responsibility to ensure that you are able to deliver software updates to your users quickly, safely, and reliably.&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;How will users who have installed your application know to update when there's a critical security bug that needs to be fixed?&lt;/li&gt;
&lt;li&gt;How do you manage users that want to install a beta version of your application, effectively trading stability for the latest features?&lt;/li&gt;
&lt;li&gt;How do you handle multiple stable release series simultaneously?&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;When faced with these and similar issues, most Python developers will quickly come to the realisation that PyPI is simply not suitable for releasing applications to users. Fortunately there's a solution: Using snap packages you too can ship Python-based software in a responsible manner. Starting from a simple Python application I will demonstrate the following:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;How snap packages can be created and shipped to users.&lt;/li&gt;
&lt;li&gt;How snap packages make automated software updates easy.&lt;/li&gt;
&lt;li&gt;How users can pick the level of risk they're willing to take when using your software.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;Shipping Python-based applications has always been painful. Snap packages make it easy. Come and see how!&lt;/p&gt;
</summary></entry><entry><title>Horrors of Distributed Systems</title><link href="https://pyvideo.org/pycon-au-2017/horrors-of-distributed-systems.html" rel="alternate"></link><published>2017-08-04T00:00:00+00:00</published><updated>2017-08-04T00:00:00+00:00</updated><author><name>Andrew Godwin</name></author><id>tag:pyvideo.org,2017-08-04:pycon-au-2017/horrors-of-distributed-systems.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Many projects grow to the point where distributed systems are needed - or even more excitingly, plunge into it headfirst my adopting microservices - but along with the obvious challenges of more servers and more storage, there's all sorts of hidden dangers that you might never even have planned for.&lt;/p&gt;
&lt;p&gt;Learn about the wonders of hardware issues, networks that can't even fail correctly, delivery tradeoffs, cosmic rays and problems with time itself, and how you can be a bit more prepared for these sorts of challenges in the future - even if you're still a small project.&lt;/p&gt;
</summary></entry><entry><title>hunter2: A Symphony of Password Horror</title><link href="https://pyvideo.org/pycon-au-2017/hunter2-a-symphony-of-password-horror.html" rel="alternate"></link><published>2017-08-04T00:00:00+00:00</published><updated>2017-08-04T00:00:00+00:00</updated><author><name>Lilly Ryan</name></author><id>tag:pyvideo.org,2017-08-04:pycon-au-2017/hunter2-a-symphony-of-password-horror.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The year is 2017. We have hoverboards, jetpacks, solar-powered cars, and also so many awful passwords that it‚Äôs become trivial for pretty much anyone to have their accounts compromised. We‚Äôve got passwords for our passwords. Eight-year-olds with a dictionary and a set of dice can generate mathematically stronger passwords than most corporations that have your credit card details. We spend our days wandering through endless forests of requirements to come up with something that contains no more than twelve letters, a special character, the eye of a newt, and at least one uppercase letter, only to be emailed it back in plaintext if you forget it. And then it goes on a Post-It note on a monitor.&lt;/p&gt;
&lt;p&gt;Do not despair - this talk is here to help!&lt;/p&gt;
&lt;p&gt;From beginners to experts, all technical folk have the power to build a post-password future. Lilly, an engineer and historian, will guide you through the history of how we got ourselves into this state, and explain why major companies still think that the best way to keep your stuff secure is to poke their heads out of the tree-house and ask you for the secret word. She will then hand you strong technical tools to help your clients and colleagues understand why there are better things out there than ‚ÄúWelcome1!‚Äù, and help you work together to bring a small ray of sunshine into our password-saturated world.&lt;/p&gt;
</summary></entry><entry><title>Improving PySpark Performance: Spark performance beyond the JVM</title><link href="https://pyvideo.org/pycon-au-2017/improving-pyspark-performance-spark-performance-beyond-the-jvm.html" rel="alternate"></link><published>2017-08-04T00:00:00+00:00</published><updated>2017-08-04T00:00:00+00:00</updated><author><name>Holden Karau</name></author><id>tag:pyvideo.org,2017-08-04:pycon-au-2017/improving-pyspark-performance-spark-performance-beyond-the-jvm.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk assumes you have a basic understanding of Spark (if not check out one of the intro videos on youtube - &lt;a class="reference external" href="http://bit.ly/hkPySpark"&gt;http://bit.ly/hkPySpark&lt;/a&gt; ) and takes us beyond the standard intro to explore what makes PySpark fast and how to best scale our PySpark jobs. If you are using Python and Spark together and want to get faster jobs - this is the talk for you.&lt;/p&gt;
&lt;p&gt;This talk covers a number of important topics for making scalable Apache Spark programs - from RDD re-use to considerations for working with Key/Value data, why avoiding groupByKey is important and more. We also include Python specific considerations, like the difference between DataFrames/Datasets and traditional RDDs with Python. We also explore some tricks to intermix Python and JVM code for cases where the performance overhead is too high.&lt;/p&gt;
</summary></entry><entry><title>iPad App Development with Python</title><link href="https://pyvideo.org/pycon-au-2017/ipad-app-development-with-python.html" rel="alternate"></link><published>2017-08-04T00:00:00+00:00</published><updated>2017-08-04T00:00:00+00:00</updated><author><name>Chris Robinson</name></author><id>tag:pyvideo.org,2017-08-04:pycon-au-2017/ipad-app-development-with-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;This talk is based around using the Pythonista iPad app to prototype and develop apps and games using the powerful and easy to learn Python language. Aimed at beginners, this talk will explore the work I am currently doing at Aberfoyle Park High School; enabling beginner students with no programming experience to learn the basics of the Python language, create their own games and apps using only their iPads and reaching the end goal of publishing their creations to the App Store. This content would be suitable for Year 6 students and above.&lt;/p&gt;
</summary></entry><entry><title>Learn by Doing: Getting Students into FOSS</title><link href="https://pyvideo.org/pycon-au-2017/learn-by-doing-getting-students-into-foss.html" rel="alternate"></link><published>2017-08-04T00:00:00+00:00</published><updated>2017-08-04T00:00:00+00:00</updated><author><name>Josh Simmons</name></author><id>tag:pyvideo.org,2017-08-04:pycon-au-2017/learn-by-doing-getting-students-into-foss.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Getting students involved with free and open source projects is a great way to provide them with real world development experience while contributing to the common good, but making that first contribution is difficult even for students already confident in their skills. This is where the Google Open Source team‚Äôs student programs, Google Summer of Code and Google Code-in, come into play.&lt;/p&gt;
&lt;p&gt;We‚Äôve been partnering with open source projects for 12 years to provide students with structure, mentorship, and real world experience. Through participation in these programs, students learn how to work on existing codebases, communicate across timezones, run test suites, use version control systems, and ultimately end up making contributions that are nearly professional quality.&lt;/p&gt;
&lt;p&gt;In this session I‚Äôll share more information about these programs and other opportunities for students to learn by doing in open source.&lt;/p&gt;
</summary></entry><entry><title>Learn You a PyTorch!</title><link href="https://pyvideo.org/pycon-au-2017/learn-you-a-pytorch.html" rel="alternate"></link><published>2017-08-04T00:00:00+00:00</published><updated>2017-08-04T00:00:00+00:00</updated><author><name>Kendrick Tan</name></author><id>tag:pyvideo.org,2017-08-04:pycon-au-2017/learn-you-a-pytorch.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Have a basic understanding of machine learning, but have yet to build a neural network / want to build neural networks faster? Don‚Äôt sweat it, &lt;em&gt;Learn You a PyTorch&lt;/em&gt; is here! Whether you‚Äôre using machine learning in production, or for your own pet projects, PyTorch is a great choice to be considered.&lt;/p&gt;
&lt;p&gt;This talk will consist of the features PyTorch has to offer, and if time permits, a live coding of the MNIST classification task using PyTorch.&lt;/p&gt;
</summary></entry><entry><title>Let's Run Python on a Supercomputer!</title><link href="https://pyvideo.org/pycon-au-2017/lets-run-python-on-a-supercomputer.html" rel="alternate"></link><published>2017-08-04T00:00:00+00:00</published><updated>2017-08-04T00:00:00+00:00</updated><author><name>David Perry</name></author><id>tag:pyvideo.org,2017-08-04:pycon-au-2017/lets-run-python-on-a-supercomputer.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Once upon a time, coding for supercomputers meant lots of Fortran. Users were invariably physicists, engineers and mathematicians who already knew how to code. Today, almost all fields of research have big data and ever more complex analysis, necessitating a move from the desktop to large-scale compute. Now there's far more diversity, and happily, much Python being run on supercomputers across the world.&lt;/p&gt;
&lt;p&gt;I'm going to talk about the general architecture for supercomputers, the parallel programming patterns to suit them, and how to implement them in Python. This includes the traditional message-passing approaches, as well as modern tools like numpy, dask, cython and numba which mean we can squeeze out performance that's competitive with low-level languages, but a whole lot more fun to write.&lt;/p&gt;
&lt;p&gt;Supercomputers are usually managed multi-user environments, and so setting up the environment and packages needed for your code takes some thought. You can use what's pre-installed for you, install your own packages in a virtual environment, or go all-out and put everything in a container. We'll go over what's involved, and the trade-offs of each approach.&lt;/p&gt;
&lt;p&gt;Finally, while academics might have ready access to a supercomputer, most of us do not. Never fear! I'll go over how to build your own in the cloud that costs a couple bucks an hour to run.&lt;/p&gt;
</summary></entry><entry><title>Loop better: a deeper look at iteration in Python</title><link href="https://pyvideo.org/pycon-au-2017/loop-better-a-deeper-look-at-iteration-in-python.html" rel="alternate"></link><published>2017-08-04T00:00:00+00:00</published><updated>2017-08-04T00:00:00+00:00</updated><author><name>Trey Hunner</name></author><id>tag:pyvideo.org,2017-08-04:pycon-au-2017/loop-better-a-deeper-look-at-iteration-in-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;What's the difference between an iterable, an iterator, and a generator?  Do you know how to create infinitely long iterables?
Come to this talk to learn some of Python's slightly more advanced looping techniques.&lt;/p&gt;
&lt;p&gt;Iterables are a very big deal in Python and they became even more important in Python 3.  There's quite a bit beyond the basics when it comes to loops and looping in Python.  Let's learn some of Python's slightly more advanced looping techniques!&lt;/p&gt;
&lt;p&gt;In this session, we'll take a step back and learn about how looping actually works in Python.  We'll then learn about a number of Python looping techniques that you've probably overlooked.&lt;/p&gt;
&lt;p&gt;We'll learn about the difference between sequences, iterables, and iterators.  We'll also reveal the iterator protocol that powers for loops in Python.&lt;/p&gt;
&lt;p&gt;After we learn the basics, we'll learn some techniques for working with infinite infinite iterables, generators, and generator expressions.&lt;/p&gt;
&lt;p&gt;Attendees will walk away from this session with specific actionable recommendations for refactoring their own code as well as a wealth of new topics to look deeper into after the session.&lt;/p&gt;
</summary></entry><entry><title>MicroPython Energy Monitoring</title><link href="https://pyvideo.org/pycon-au-2017/micropython-energy-monitoring.html" rel="alternate"></link><published>2017-08-04T00:00:00+00:00</published><updated>2017-08-04T00:00:00+00:00</updated><author><name>Joel Stanley</name></author><id>tag:pyvideo.org,2017-08-04:pycon-au-2017/micropython-energy-monitoring.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Energy consumption is an important topic for many. Reducing carbon emissions, saving money on the power bill, and reducing waste are ideas that sound good. But how to go about it?&lt;/p&gt;
&lt;p&gt;Home energy monitoring is achievable with a minimal investment in hardware. In fact, hobbyists in our own back yard are running crowdfunding campaigns for it. I got my hands on one and decided to take a look at the insides.&lt;/p&gt;
&lt;p&gt;Inside was a small ARM microcontroller, and some electronics for measuring the power. The reference firmware, freely available on Github, was written in the Arduino world. My talk describes the challenges, benefits and pitfalls of starting from scratch with MicroPython. You will leave with an understanding of how to use MicroPython for your next Internet of Things project.&lt;/p&gt;
</summary></entry><entry><title>MicroPython for ESP32</title><link href="https://pyvideo.org/pycon-au-2017/micropython-for-esp32.html" rel="alternate"></link><published>2017-08-04T00:00:00+00:00</published><updated>2017-08-04T00:00:00+00:00</updated><author><name>Nick Moore</name></author><id>tag:pyvideo.org,2017-08-04:pycon-au-2017/micropython-for-esp32.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;MicroPython has a new port, to the ESP32 WiFi SoC.&lt;/p&gt;
&lt;p&gt;We'll look at the new SoC, how the port is progressing, how to get started programming in MicroPython and what you can do to contribute to the MicroPython project's future.&lt;/p&gt;
</summary></entry><entry><title>Multitenant applications: how and why</title><link href="https://pyvideo.org/pycon-au-2017/multitenant-applications-how-and-why.html" rel="alternate"></link><published>2017-08-04T00:00:00+00:00</published><updated>2017-08-04T00:00:00+00:00</updated><author><name>Filipe de Alencar Ximenes</name></author><id>tag:pyvideo.org,2017-08-04:pycon-au-2017/multitenant-applications-how-and-why.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Multitenancy is system architecture model where a single instance of software serves multiple clients [tenants]. Each has its own context and data set isolated from the others. There are 3 main approaches to build this kind of application. Each uses different strategies to spread data in a database [or multiple databases]. In this talk, you will understand the architecture of each of these approaches, how to query data, its advantages, and downsides.&lt;/p&gt;
</summary></entry><entry><title>Offline Django with Service Workers</title><link href="https://pyvideo.org/pycon-au-2017/offline-django-with-service-workers.html" rel="alternate"></link><published>2017-08-04T00:00:00+00:00</published><updated>2017-08-04T00:00:00+00:00</updated><author><name>Raphael Merx</name></author><id>tag:pyvideo.org,2017-08-04:pycon-au-2017/offline-django-with-service-workers.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;So you wish your Django application would work in the most remote places, even when no Internet is available? With service workers, that's possible. They extend browser caching to all requests, including the initial HTML request. When offline, your users can access a fully functioning web application instead of landing on the &amp;quot;You are offline&amp;quot; page.&lt;/p&gt;
&lt;p&gt;This talk will cover:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;What service workers are&lt;/li&gt;
&lt;li&gt;How to initialise and manage them&lt;/li&gt;
&lt;li&gt;What caching strategies to use&lt;/li&gt;
&lt;li&gt;How to integrate service workers with Django&lt;/li&gt;
&lt;/ul&gt;
</summary></entry><entry><title>Oh, I Found a Security Issue</title><link href="https://pyvideo.org/pycon-au-2017/oh-i-found-a-security-issue.html" rel="alternate"></link><published>2017-08-04T00:00:00+00:00</published><updated>2017-08-04T00:00:00+00:00</updated><author><name>Markus Holtermann</name></author><id>tag:pyvideo.org,2017-08-04:pycon-au-2017/oh-i-found-a-security-issue.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Ever thought about what happens when somebody finds a security issue in Django? How does one responsibly disclose the issue? What happens after that? How does the Django team work on it? What happens until a Django security release is published? What comes afterwards?&lt;/p&gt;
&lt;p&gt;Also, Django is ‚Äúreassuringly secure‚Äù. Let‚Äôs look at the history üòâ&lt;/p&gt;
</summary></entry><entry><title>Program all the things - How to develop IoT devices using MicroPython</title><link href="https://pyvideo.org/pycon-au-2017/program-all-the-things-how-to-develop-iot-devices-using-micropython.html" rel="alternate"></link><published>2017-08-04T00:00:00+00:00</published><updated>2017-08-04T00:00:00+00:00</updated><author><name>Anna Gerber</name></author><id>tag:pyvideo.org,2017-08-04:pycon-au-2017/program-all-the-things-how-to-develop-iot-devices-using-micropython.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;We hear a lot of hype around the Internet of Things - how that myriad of interconnected smart devices monitoring and actuating our everyday activities will transform our lives toward a blissful state of automation.  But when IoT rules the world, do you want to have to rely on third parties to provide all of these devices and to define all of the features available within your connected life? Being able to develop your own IoT devices as well as customize existing devices and applications is becoming a critical skill.&lt;/p&gt;
&lt;p&gt;MicroPython is a Free, Open Source implementation of Python 3.x that is designed to run on microcontrollers - the tiny embedded computers at the heart of many IoT devices. MicroPython is a valuable tool for rapidly prototyping device functionality and is a great way to get started with developing for the Internet of Things.&lt;/p&gt;
&lt;p&gt;In this session, we'll walk through the steps you'll need to follow to take your IoT ideas and make them into reality using MicroPython, including:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;selecting hardware and developing circuits to connect sensors and actuators,&lt;/li&gt;
&lt;li&gt;getting your microcontroller set up with MicroPython on-board,&lt;/li&gt;
&lt;li&gt;developing MicroPython programs to read from sensors and control actuators,&lt;/li&gt;
&lt;li&gt;connecting your device and getting it talking with other devices and services over MQTT, and&lt;/li&gt;
&lt;li&gt;how to integrate your device within a wider IoT context, for example, integrating with popular IoT frameworks.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The examples covered in the session are drawn from a healthy habits tracking companion example project developed by the speaker. This custom IoT device acts as a personal assistant that helps to track and transform personal habits like keeping fit.&lt;/p&gt;
</summary></entry><entry><title>Programming, Python, and Student-Directed Projects</title><link href="https://pyvideo.org/pycon-au-2017/programming-python-and-student-directed-projects.html" rel="alternate"></link><published>2017-08-04T00:00:00+00:00</published><updated>2017-08-04T00:00:00+00:00</updated><author><name>Edwin Griffin</name></author><id>tag:pyvideo.org,2017-08-04:pycon-au-2017/programming-python-and-student-directed-projects.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The Advanced Programming unit in the ACT Senior Secondary Curriculum provides students with an opportunity to encounter computer science concepts usually reserved for first and second year tertiary education. The implementation of this course at Gungahlin College has focused on providing students with a spattering of these concepts (such as recursion, regex and big-o notation), and then allowing the students to identify a field of computer science to dive into. This is spaced out over a semester, requiring the students to research their chosen computer science concept, and go through the experience of writing a python application capable of providing a practical implementation of that concept.
Each year, these projects are reviewed by a panel of tertiary education lecturers and representatives, and have consistently been deemed as equivalent to projects delivered by second or third year IT undergraduates.
A lot of the success of this programme can be attributed to the approaches taken with the delivery of the subject, as well as the adoption of Python as the language of choice.
This presentation will overview the classroom environment, and how using Python and systems like Grok Learning have enabled a far more student directed approach.
The students from this programme will then be given the opportunity to demonstrate their findings and discuss the impacts this approach has had on their education.&lt;/p&gt;
</summary></entry><entry><title>Python in Primary School</title><link href="https://pyvideo.org/pycon-au-2017/python-in-primary-school.html" rel="alternate"></link><published>2017-08-04T00:00:00+00:00</published><updated>2017-08-04T00:00:00+00:00</updated><author><name>Emily de la Pena</name></author><id>tag:pyvideo.org,2017-08-04:pycon-au-2017/python-in-primary-school.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The Digital Technologies subject is one of the two new Technologies subjects in the Australian primary school, F-6, curriculum. The Technologies subjects are now mandatory in Queensland State Schools, with other states soon to follow. These two subjects are not bolt-on subjects, but are to be integrated into the existing curriculum.&lt;/p&gt;
&lt;p&gt;Let‚Äôs have a look at how we introduced Python into primary schools. We‚Äôll go through how we take students on a journey from learning fundamental skills in a structured lesson to creative freedom, within limits, in building their own Python projects. We‚Äôll have a look at how to delivery two projects that achieve Digital Technologies learning outcomes. One project is integrated with English learning outcomes and the other with Science.&lt;/p&gt;
&lt;p&gt;Each term that we have implemented our Python program in primary schools we have learned many lessons. With quarterly feedback we refine our Python program regularly and learn from how our students respond to our lesson structure, discussions and activities. We are continually updating and refining our lesson plans. These lessons learned will be shared and explored.&lt;/p&gt;
</summary></entry><entry><title>Python to the (Little) People: teaching 300,000 students Python through the DT Curriculum</title><link href="https://pyvideo.org/pycon-au-2017/python-to-the-little-people-teaching-300000-students-python-through-the-dt-curriculum.html" rel="alternate"></link><published>2017-08-04T00:00:00+00:00</published><updated>2017-08-04T00:00:00+00:00</updated><author><name>Amanda Hogan</name></author><id>tag:pyvideo.org,2017-08-04:pycon-au-2017/python-to-the-little-people-teaching-300000-students-python-through-the-dt-curriculum.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;There are thousands of resources online teaching computing, technology and programming, - too many for teachers to filter. On the other hand, the curriculum is, at times, rather obtuse, and it's not always clear whether a resource actually covers an objective. On the other, resources online aren't always pitched at the right level for school students, or sometimes even correct. We've worked with the Digital Technologies Hub, Scootle and other content providers to map everything* on the internet in the big concepts that are covered by the curriculum, and provide them to teachers so they can see what's right for them in their classrooms. But what about the gaps in the available resources and teacher PD and how can teachers be supported to teach something that they may not be confident in?&lt;/p&gt;
&lt;p&gt;The Australian Computing Academy (ACA), part of the University of Sydney, will provide resources, professional development, and a community to support educators delivering the Australian Curriculum: Digital Technologies. We'll facilitate the teaching of Python to every student in year 7 - roughly 300,000 per year - through free resources and teacher training. We'll be reaching down into Primary schools too, to make a progression that will lead them there. Every year 5 student will have access to resources teaching &amp;quot;Foundational Pre-Python&amp;quot; via Blockly to prep kids so they're ready to tackle what is a very challenging curriculum.&lt;/p&gt;
&lt;p&gt;We're excited about the opportunities the DT curriculum provides. It‚Äôs a challenging curriculum but it also a fantastic way to engage students with hard problems and real solutions. Our intent is to use Python to show students and teachers that coding is awesome whether it‚Äôs finding patterns in DNA, solving your maths homework, or entertaining your friends with a generated poetry slam bot.&lt;/p&gt;
</summary></entry><entry><title>Rapid GUI development for IOT systems</title><link href="https://pyvideo.org/pycon-au-2017/rapid-gui-development-for-iot-systems.html" rel="alternate"></link><published>2017-08-04T00:00:00+00:00</published><updated>2017-08-04T00:00:00+00:00</updated><author><name>David Tulloh</name></author><id>tag:pyvideo.org,2017-08-04:pycon-au-2017/rapid-gui-development-for-iot-systems.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Making GUIs sucks. Working with constrained hardware makes it suck more.
Making webpages sucks less.  And gives full access to the jHipster ecosystem.
Using webpages as an interface to embedded hardware is one of those mythical cases that combines the advantages of both while smashing the disadvantages.&lt;/p&gt;
&lt;p&gt;The demonstrated system will use a stripped down web browser for the front end.
Python's Tornado framework to do the work.
Transport is by majestic single horned galloping websockets.&lt;/p&gt;
&lt;p&gt;The structure allows for rapid development, considerable flexibility and expansion, and network based control is almost free.&lt;/p&gt;
</summary></entry><entry><title>Red User, Blue User, MyUser, auth.User</title><link href="https://pyvideo.org/pycon-au-2017/red-user-blue-user-myuser-authuser.html" rel="alternate"></link><published>2017-08-04T00:00:00+00:00</published><updated>2017-08-04T00:00:00+00:00</updated><author><name>Russell Keith-Magee</name></author><id>tag:pyvideo.org,2017-08-04:pycon-au-2017/red-user-blue-user-myuser-authuser.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Django's contrib.auth framework allows to you specify a custom user model. Why does this matter? When should you use a custom user model? And how do you live with it once you've got one?&lt;/p&gt;
&lt;p&gt;Django's contrib.auth is a key part of most Django websites. However, there are some important details you need to understand if you're going to make good use of custom user models. Some of these details are technical - for example, custom user models require some special consideration when interacting with migrations.&lt;/p&gt;
&lt;p&gt;But even more important are the details about why custom user models are important in the first place. Custom User models were neccessary to break some really common anti-patterns about user identity - anti-patterns that are baked into Django's default user model, and are extraordinarily common in the wider web development world.&lt;/p&gt;
&lt;p&gt;In this talk, you'll learn about user identity: what it means, and what you have to think about when you're developing the user modelling parts of your Django project. You'll also learn how to use Django's custom user model in practice.&lt;/p&gt;
</summary></entry><entry><title>Reflections on the Use of Python and Pygame in Senior IT</title><link href="https://pyvideo.org/pycon-au-2017/reflections-on-the-use-of-python-and-pygame-in-senior-it.html" rel="alternate"></link><published>2017-08-04T00:00:00+00:00</published><updated>2017-08-04T00:00:00+00:00</updated><author><name>Jim Lloyd</name></author><id>tag:pyvideo.org,2017-08-04:pycon-au-2017/reflections-on-the-use-of-python-and-pygame-in-senior-it.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Earlier this year, girls from Brisbane's Clayfield College in Year 12 Information Technology Systems class used Python 3 and the Pygame module for their assessment piece; making an arcade-style game to a prototype standard. The new environment replaced the previous use of Adobe Flash and Actionscript 3.0, and presented an interesting change in workflow. The presentation will reflect on why the choice was made to shift to Python, some of the complications that arose, and the emergence of Python in secondary schools as the language of choice. The presentation is done from the perspective of an all-girls school context.&lt;/p&gt;
</summary></entry><entry><title>Remote DNA Sequencing and Analysis; Nanopore sequencing, FPGA boards and a fortunate Epiphany</title><link href="https://pyvideo.org/pycon-au-2017/remote-dna-sequencing-and-analysis-nanopore-sequencing-fpga-boards-and-a-fortunate-epiphany.html" rel="alternate"></link><published>2017-08-04T00:00:00+00:00</published><updated>2017-08-04T00:00:00+00:00</updated><author><name>Alexis Lucattini</name></author><id>tag:pyvideo.org,2017-08-04:pycon-au-2017/remote-dna-sequencing-and-analysis-nanopore-sequencing-fpga-boards-and-a-fortunate-epiphany.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;What is a MinION?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Oxford Nanopore's MinION is a 91g portable sequencing device, which has been a huge talking point in the sequencing community since entering the market in 2014. First thought of as having potential, it's now recognised as a valuable asset of any genomic laboratory.
The MinION can deliver long-read yields as great as its competitor PacBio. This is due to its yield per flowcell increasing 10-fold in the past 18 months, which has created much delight to the community albeit some problems for researchers (and ONT themselves) when it comes to data handling and analysis.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Current Restrictions&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The raw output from a MinION is an electrical signal over-time which must be put through a computationally-intensive RNN to infer the nucleotides of a given DNA strand -  this process is known as basecalling. If one were to do this on a normal laptop, it would take over a week to complete all the reads from a 48-hour run, which hinders the real-time component of the MinION technology. In order to keep the basecall processing at the same rate as the throughput, the MinION output needs to be transferred to a high powered server, which hinders on the MinION's portability.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How to overcome this?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Running reads simultaneously through this basecalling processing is a must when it comes to real-time Nanopore sequencing, which is why we combine ONT with another start-up project, Adapteva's Parallela board, a credit card sized micro-server with an in-built FPGA board, ideal for parallel processing. We explore the compatability of the Parallela and the MinION, with the aim of performing both sequencing and analysis in a remote environment.&lt;/p&gt;
</summary></entry><entry><title>Software for the Murchison Widefield Array radio telescope</title><link href="https://pyvideo.org/pycon-au-2017/software-for-the-murchison-widefield-array-radio-telescope.html" rel="alternate"></link><published>2017-08-04T00:00:00+00:00</published><updated>2017-08-04T00:00:00+00:00</updated><author><name>Andrew Williams</name></author><id>tag:pyvideo.org,2017-08-04:pycon-au-2017/software-for-the-murchison-widefield-array-radio-telescope.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The Murchison Widefield Array (MWA) is a low frequency telescope (80-300 MHz - same as TV and radio) in the Murchison region 800 km NE of Perth. It has been running full time since mid 2013, and has collected around 13 Pbytes of data so far. The MWA has no moving parts, making it a 'software only' telescope, and this talk will describe the software. Apart from the low-level data processing (two programs written in C/C++ and CUDA), almost all of the MWA software is in Python. In total there are hundreds of processes running on dozens of machines, ranging from hardware control via digital IO and I2C on embedded Linux machines through to user interface and status/diagnostics pages using Django.&lt;/p&gt;
</summary></entry><entry><title>Teaching MicroPython with the BBC micro:bit at NCSS</title><link href="https://pyvideo.org/pycon-au-2017/teaching-micropython-with-the-bbc-microbit-at-ncss.html" rel="alternate"></link><published>2017-08-04T00:00:00+00:00</published><updated>2017-08-04T00:00:00+00:00</updated><author><name>Jim Mussared</name></author><id>tag:pyvideo.org,2017-08-04:pycon-au-2017/teaching-micropython-with-the-bbc-microbit-at-ncss.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The National Computer Science School is a 10-day residential summer school for Australian high school students that runs in January each year. It runs two streams - Python web development, and embedded electronics.&lt;/p&gt;
&lt;p&gt;This year we updated the embedded stream to use the BBC micro:bit and MicroPython. It was a tremendous success, we learned a lot, and we're excited to share our experiences.&lt;/p&gt;
</summary></entry><entry><title>Teaching Object-Oriented Programming with Python</title><link href="https://pyvideo.org/pycon-au-2017/teaching-object-oriented-programming-with-python.html" rel="alternate"></link><published>2017-08-04T00:00:00+00:00</published><updated>2017-08-04T00:00:00+00:00</updated><author><name>Bruce Fuda</name></author><id>tag:pyvideo.org,2017-08-04:pycon-au-2017/teaching-object-oriented-programming-with-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;From 2018, most teachers across Australian will be required to report against the Australian Curriculum: Digital Technologies. There are many resources available on the Internet to help teachers, but when it comes to Object-Oriented programming, there are few accessible examples that dive into fundamental concepts such as inheritance, encapsulation and polymorphism. Considering the lack of experience and confidence in some teachers, particularly in regional areas or where forma training in computer science is minimal, it‚Äôs no surprise there is some trepidation about how effectively schools will deliver on the promises of the curriculum.&lt;/p&gt;
&lt;p&gt;If we want students to properly understand the key ideas of the paradigm, it is imperative we provide relevant and meaningful activities for students to engage with. Since I began my teaching career in 2005, I‚Äôve tried a number of different approaches with students in years 9-12 to introduce OO concepts, with my most recent successes realised through a simple game inventory system.&lt;/p&gt;
&lt;p&gt;In this talk I‚Äôll demonstrate the approach we‚Äôve used, and how we ensure students grasp the fundamental concepts of the OO paradigm. I will explain how students are able to explore these ideas further through their own investigations, and share the assessment task I‚Äôve used to evaluate student understanding. I‚Äôll also showcase some student work, and point to a couple of useful online resources that have been effective in a primarily student-driven environment.&lt;/p&gt;
&lt;p&gt;Python is an ideal language for this not only due to its ease of syntax and readability, but because students who have been using it as a scripting language and written simple functions already understand most of the language structures needed to implement objects. This allows the focus to be on conceptual understanding, not the specifics of the language. The breadth of adoption of Python in different domains such as web development and data analysis also means that students can use this knowledge in a variety of contexts, such as allowing them to implement dynamic websites using an MVC architecture.&lt;/p&gt;
</summary></entry><entry><title>Teaching Python: Adapting to Diversity</title><link href="https://pyvideo.org/pycon-au-2017/teaching-python-adapting-to-diversity.html" rel="alternate"></link><published>2017-08-04T00:00:00+00:00</published><updated>2017-08-04T00:00:00+00:00</updated><author><name>Margot Phillipps</name></author><id>tag:pyvideo.org,2017-08-04:pycon-au-2017/teaching-python-adapting-to-diversity.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Discovering one size does not fit all when teaching programming using Python was more of a shock than it should have been. Unfortunately, the end point has to be the same for all students (pass the Standard!) and the time to get there is usually invariant.
This talk will cover my different experiences in teaching different genders and different socio-economic groups over a three year period in Auckland schools. The classes shared only a few things in common ‚Äì classes were after school, one day a week, I was there for a term and I had some help in the form of tutors from a local IT company. The interesting part is the ways in which the classes varied and as a consequence, how I had to adapt teaching.&lt;/p&gt;
</summary></entry><entry><title>Teaching Python Online to Primary Students</title><link href="https://pyvideo.org/pycon-au-2017/teaching-python-online-to-primary-students.html" rel="alternate"></link><published>2017-08-04T00:00:00+00:00</published><updated>2017-08-04T00:00:00+00:00</updated><author><name>Marg Meijers</name></author><id>tag:pyvideo.org,2017-08-04:pycon-au-2017/teaching-python-online-to-primary-students.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Marg has been teaching programming online to students for many years, starting with 'Klik and Play' in 1996. Although now semi-retired, she works from home, teaching programming online to students in years 4-8 from schools across Tasmania, as part of the Department of Education's GO! Gifted Online program. Marg has designed the courses, and classroom teachers across the state nominate up to 5 students each to participate in 'Python4WhipSnakes' and 'Python JumpStart'.  These students are then allocated up to an hour a week of classtime to participate in the courses, and many also choose to spend much of their own time working on the program.
In this talk Marg will outline why these courses are needed, how they operate, how the students are kept engaged and motivated through elements of gamification, and highlight some of the positive aspects and successes of this style of teaching, as well as some of the challenges.&lt;/p&gt;
</summary></entry><entry><title>The Messaging of Things</title><link href="https://pyvideo.org/pycon-au-2017/the-messaging-of-things.html" rel="alternate"></link><published>2017-08-04T00:00:00+00:00</published><updated>2017-08-04T00:00:00+00:00</updated><author><name>Mike Leonard</name></author><id>tag:pyvideo.org,2017-08-04:pycon-au-2017/the-messaging-of-things.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Just as we find more and more &amp;quot;things&amp;quot; on the internet, so do we find more and more options for messaging. What are they? How do they compare? And which should I use?&lt;/p&gt;
&lt;p&gt;MQTT is being used by AWS but how does this compare to the newly emerging gRPC; how does the tried and tested Avro compare to Protocol Buffers or even using the familiar JSON with HTTP and Websockets?&lt;/p&gt;
&lt;p&gt;This talk aims to provide an subjective comparison of serialisation and communication formats that can be used with IoT devices with a focus on performance.&lt;/p&gt;
</summary></entry><entry><title>Tracking Land Conversion with the Eye in the Sky</title><link href="https://pyvideo.org/pycon-au-2017/tracking-land-conversion-with-the-eye-in-the-sky.html" rel="alternate"></link><published>2017-08-04T00:00:00+00:00</published><updated>2017-08-04T00:00:00+00:00</updated><author><name>Byron Allen</name></author><id>tag:pyvideo.org,2017-08-04:pycon-au-2017/tracking-land-conversion-with-the-eye-in-the-sky.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Deforestation is a classic example of land conversion. The world‚Äôs forests have in the past absorbed as much as 30% of annual global anthropogenic CO2 emissions, a similar amount as the oceans, so we can say land conversion harms human ability to fight climate change. But how do we track this issue to know what we should do about it?&lt;/p&gt;
&lt;p&gt;Unfortunately, there is only one year‚Äôs worth of land conversion data in the U.S. available to the public. That is a huge problem if you want to ask, for example, ‚ÄòIs the ethanol industry driving land conversion, making it a less viable source of renewable energy?‚Äô or ‚ÄòAre laws around the use of natural lands being broken?‚Äô&lt;/p&gt;
&lt;p&gt;Thankfully, there is an alternative: to create that public record using machine learning techniques and satellite images.&lt;/p&gt;
</summary></entry><entry><title>Tuning In with SDR &amp; Python</title><link href="https://pyvideo.org/pycon-au-2017/tuning-in-with-sdr-python.html" rel="alternate"></link><published>2017-08-04T00:00:00+00:00</published><updated>2017-08-04T00:00:00+00:00</updated><author><name>Jim Mussared</name></author><id>tag:pyvideo.org,2017-08-04:pycon-au-2017/tuning-in-with-sdr-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;From AM/FM radio and TV to WiFi and Bluetooth, it's kind of magical that our devices can talk to each other without wires. Wouldn't it be great to be able to explore this magic?&lt;/p&gt;
&lt;p&gt;Until recently, this was out of reach of a hobbyist and required a wide range of skills from analog electronics to signal processing. However, software-defined radio (SDR) has changed all this and playing with radio is now in the reach of more people than ever before. Better yet, you can use Python for the &amp;quot;software-defined&amp;quot; bit!&lt;/p&gt;
&lt;p&gt;This talk is a brief introduction to radio theory, software-radio, GNU Radio and other Python-based tools, why you might be interested, how to get started, and some demos. We'll also look at exploring some basic FMCW radar concepts using MicroPython.&lt;/p&gt;
&lt;p&gt;No prior radio or electronics experience necessary!&lt;/p&gt;
</summary></entry><entry><title>Using MicroPython in the wild</title><link href="https://pyvideo.org/pycon-au-2017/using-micropython-in-the-wild.html" rel="alternate"></link><published>2017-08-04T00:00:00+00:00</published><updated>2017-08-04T00:00:00+00:00</updated><author><name>Damien George</name></author><id>tag:pyvideo.org,2017-08-04:pycon-au-2017/using-micropython-in-the-wild.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;MicroPython is a complete reimplementation of Python that runs on small devices like microcontrollers.  It enables users to build cool stuff - like Internet of Things devices - by combining their existing Python knowledge with a little bit of hands-on hardware hacking.  In this talk I will start with a brief overview of MicroPython, how it works, how you can try it out, and how you can use it.  I will then discuss some of the technical advances in the MicroPython software that have occurred over the past 12 months.  Finally, I will talk about some of the things MicroPython is being used for, from robotics to IoT.&lt;/p&gt;
</summary></entry><entry><title>Using Python For Creating Hardware To Record FOSS Conferences</title><link href="https://pyvideo.org/pycon-au-2017/using-python-for-creating-hardware-to-record-foss-conferences.html" rel="alternate"></link><published>2017-08-04T00:00:00+00:00</published><updated>2017-08-04T00:00:00+00:00</updated><author><name>Tim 'mithro' Ansell</name></author><id>tag:pyvideo.org,2017-08-04:pycon-au-2017/using-python-for-creating-hardware-to-record-foss-conferences.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python is generally considered a high level language a long way from hardware, this very fact actually makes it an awesome tool for helping out with the design and creation of hardware!&lt;/p&gt;
&lt;p&gt;Python was essential in developing the HDMI2USB.tv open source firmware and hardware for video capture. The system has been in use since late 2015 and used at numerous conferences such as Linux.conf.au, DebConf and numerous PyCon conferences around the world.&lt;/p&gt;
&lt;p&gt;This talk will hopefully cover;&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Python hardware description languages (HDLs) for creating &amp;quot;gateware&amp;quot; for FPGA chips or even real IC design.&lt;/li&gt;
&lt;li&gt;Python scripting for hardware schematic layout and design rule checking.&lt;/li&gt;
&lt;li&gt;Python tools for deploying, programming and debugging embedded systems.&lt;/li&gt;
&lt;li&gt;Some cool projects like HDMI2USB.tv project.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;This talk will focus on open source tools.&lt;/p&gt;
</summary></entry><entry><title>Using Python in a Data Hackathon</title><link href="https://pyvideo.org/pycon-au-2017/using-python-in-a-data-hackathon.html" rel="alternate"></link><published>2017-08-04T00:00:00+00:00</published><updated>2017-08-04T00:00:00+00:00</updated><author><name>Tennessee Leeuwenburg</name></author><id>tag:pyvideo.org,2017-08-04:pycon-au-2017/using-python-in-a-data-hackathon.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;So, you've seen a lot of buzz around hackathons and datathons. Machine learning and data science are all the rage, and the photos of the events on twitter just look amazing. Not to mention free coffee and pastries, if you're lucky. Getting to grips with one of these events can be stressful, particularly when you slam into the reality of trying to get something done in practise.&lt;/p&gt;
&lt;p&gt;This talk provides a basic set of techniques to make sure you're set up ahead of time so you don't lose precious hours downloading packages over an overloaded and shaky WiFi connection, and gets you straight into the fastest way to start working with whatever unwashed dataset the sponsors have decided to throw your way.&lt;/p&gt;
&lt;p&gt;Topics include: setting up your tools, loading large data, working with data subsets, convenience functions for data processing and making pretty pictures&lt;/p&gt;
</summary></entry><entry><title>Visualising data with Python</title><link href="https://pyvideo.org/pycon-au-2017/visualising-data-with-python.html" rel="alternate"></link><published>2017-08-04T00:00:00+00:00</published><updated>2017-08-04T00:00:00+00:00</updated><author><name>Clare Sloggett</name></author><id>tag:pyvideo.org,2017-08-04:pycon-au-2017/visualising-data-with-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;It's not just Matplotlib any more... there are more options than ever for creating graphs and visualisations in Python. Libraries now come with beautiful styling, data-friendly colour schemes, interactive plots, Jupyter integration, online hosting and more. Seaborn, ggplot, bokeh, plotly.... where should a newbie start? Is it worth the effort of switching from your current favourite to something new? In this talk I'll outline the strengths and capabilities of some popular libraries.&lt;/p&gt;
</summary></entry></feed>