<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/tag_metaclasses.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2019-08-24T00:00:00+00:00</updated><entry><title>I'm So Meta Even This Acronym...</title><link href="https://pyvideo.org/kiwi-pycon-2019/im-so-meta-even-this-acronym.html" rel="alternate"></link><published>2019-08-24T00:00:00+00:00</published><updated>2019-08-24T00:00:00+00:00</updated><author><name>Curtis Maloney</name></author><id>tag:pyvideo.org,2019-08-24:kiwi-pycon-2019/im-so-meta-even-this-acronym.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Ever wanted to better understand metaclasses?&lt;/p&gt;
</summary><category term="metaclass"></category><category term="metaclasses"></category></entry><entry><title>Mi primera metaclase: un ejemplo práctico</title><link href="https://pyvideo.org/pyday-galicia-2016/mi-primera-metaclase-un-ejemplo-practico.html" rel="alternate"></link><published>2016-09-17T00:00:00+00:00</published><updated>2016-09-17T00:00:00+00:00</updated><author><name>Miguel González Álvarez</name></author><id>tag:pyvideo.org,2016-09-17:pyday-galicia-2016/mi-primera-metaclase-un-ejemplo-practico.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Aproximación práctica y simplificada al porqué son necesarias y como se construyen las metaclases.&lt;/p&gt;
</summary><category term="metaclasses"></category></entry><entry><title>What Is and What Can Be: An Exploration from `type` to Metaclasses</title><link href="https://pyvideo.org/pycon-us-2016/dustin-ingram-what-is-and-what-can-be-an-exploration-from-type-to-metaclasses-pycon-2016.html" rel="alternate"></link><published>2016-05-31T00:00:00+00:00</published><updated>2016-05-31T00:00:00+00:00</updated><author><name>Dustin Ingram</name></author><id>tag:pyvideo.org,2016-05-31:pycon-us-2016/dustin-ingram-what-is-and-what-can-be-an-exploration-from-type-to-metaclasses-pycon-2016.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Speaker: Dustin Ingram&lt;/p&gt;
&lt;p&gt;Most of us use &lt;cite&gt;type&lt;/cite&gt; every day, but few can say they know it well. This talk explores &lt;cite&gt;type&lt;/cite&gt; and along the way, reveals how it relates to &lt;cite&gt;object&lt;/cite&gt;, &lt;cite&gt;class&lt;/cite&gt; and more, eventually arriving at deeper understanding of metaclasses in Python.&lt;/p&gt;
&lt;p&gt;Slides can be found at: &lt;a class="reference external" href="https://speakerdeck.com/pycon2016"&gt;https://speakerdeck.com/pycon2016&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/PyCon/2016-slides"&gt;https://github.com/PyCon/2016-slides&lt;/a&gt;&lt;/p&gt;
</summary><category term="metaclasses"></category><category term="metaprogramming"></category><category term="types"></category></entry><entry><title>Praktische Anwendung von Metaklassen</title><link href="https://pyvideo.org/pycon-de-2012/praktische-anwendung-von-metaklassen.html" rel="alternate"></link><published>2012-10-30T00:00:00+00:00</published><updated>2012-10-30T00:00:00+00:00</updated><author><name>Mirko Dziadzka</name></author><id>tag:pyvideo.org,2012-10-30:pycon-de-2012/praktische-anwendung-von-metaklassen.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Metaklassen (metaclasses) in Python werden oft als exotische
Spracheigenschaft betrachtet. Der Vortrag zeigt anhand konkreter
Beispiele, wie sich Metaklassen in realen Projekten zum Debuggen und zum
Code vereinfachen einsetzen lassen.&lt;/p&gt;
&lt;div class="section" id="praktische-anwendungen-von-metaklassen"&gt;
&lt;h4&gt;Praktische Anwendungen von Metaklassen&lt;/h4&gt;
&lt;p&gt;Python besitzt mit den Metaklassen ein sehr mächtiges Werkzeug, um
orthogonale Eigenschaften eines Programms zu Implementieren. Das
Stichwort dazu lautet &amp;quot;aspektorientiertes Programmieren&amp;quot;. Leider werden
Metaklassen aber oft als komplex und schwierig angesehen.&lt;/p&gt;
&lt;p&gt;Der Vortrag zeigt an einem konkreten Beispiel, wie sich durch die
Verwendung von Metaklassen Programmentwicklung vereinfachen kann.
Konkret wird die Implementation eines einfachen Debug- und Trace
Frameworks vorgestellt.&lt;/p&gt;
&lt;p&gt;Dieses erlaubt das nachträgliche instrumentieren von Klassen-Methoden,
um eine selektive Ablaufverfolgung von Methodenaufrufen auf Objekten
ermöglicht. Dies wird erreicht, ohne das diese Debug Aufrufe im normalen
Quellcode erscheinen oder bei nicht Benutzung Performance Auswirkungen
haben.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="debugging"></category><category term="metaclasses"></category></entry></feed>