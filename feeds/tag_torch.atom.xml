<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/tag_torch.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2017-10-25T00:00:00+00:00</updated><entry><title>The Mustache Movement</title><link href="https://pyvideo.org/pycon-de-2017/the-mustache-movement.html" rel="alternate"></link><published>2017-10-25T00:00:00+00:00</published><updated>2017-10-25T00:00:00+00:00</updated><author><name>Heidi Thorpe</name></author><id>tag:pyvideo.org,2017-10-25:pycon-de-2017/the-mustache-movement.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Heidi Thorpe&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Heidi graduated with Honors in Chemistry from the University of Leeds before taking up a position as an Industrial Chemist with ICI (ORICA). This led to a career in software development working in UK, Aus and USA. In 2000 she became an author by the publication by Addison Wesley of Oracle8i tuning and administration: the essential reference ASIN: B007EIZGOG this was a sales success and translated into German. In her spare time she uses python to write software that allows her to train object classifiers to steal mens' mustaches and put them on the face of Taylor Swift. For this talk she will give a simple introduction to Generative Adversarial Networks using learned &amp;quot;mustache-ness&amp;quot; as an example, implemented with existing python modules&lt;/p&gt;
&lt;p&gt;PyconAu 2016 and PyconHK 2016 is her speaking experience &lt;a class="reference external" href="https://www.youtube.com/watch?v=70JAm03IBFI"&gt;https://www.youtube.com/watch?v=70JAm03IBFI&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Generative Adversarial Networks (GANs) are a class of neural networks which are powerful and flexible tools. A common application is image generation. I would like to give a simple introduction to GANs using existing python modules and an example of how &amp;quot;mustache-ness&amp;quot; can be learned and applied.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The objective is to showcase the power and flexibility of combining preexisting python modules and applying them to the field of image processing and machine learning. Learning what constitutes &amp;quot;Mustache-ness&amp;quot; in a straight forward and fun example of applying the technology in a 30 min presentation&lt;/p&gt;
&lt;p&gt;Attendees will learn tips on image processing, as well as training their own neural network.&lt;/p&gt;
&lt;p&gt;An analogy can be considered as a relation between forger and detective. The task of the forger is to create fake examples of original paintings by famous artists. If the fake can pass as an original the the forger can exchange the fake for money. The task of the detective is to catch the forgers. He does this by knowing what are the properties that set the original artist apart and what sort of picture he would create. The detective uses this knowledge to determine whether or not the image is real or fake. From an introduction of what a Generative Adversarial Network is, how they work and how they can be used to generate fake images of mustaches by determining what constitutes &amp;quot;mustache-ness&amp;quot;&lt;/p&gt;
&lt;p&gt;You will learn that there are two main components of a GAN â€“ Generator Neural Network and Discriminator Neural Network.&lt;/p&gt;
&lt;p&gt;The Generator Network takes an random input and tries to generate a sample of data.&lt;/p&gt;
&lt;p&gt;It then generates data which is subsequently fed into a discriminator network D(x). The task of Discriminator Network is to take input either from the real data or from the generator and try to predict whether the input is real or generated.&lt;/p&gt;
&lt;p&gt;D(x) solves a binary classification problem using sigmoid function giving output in the range 0 to 1.&lt;/p&gt;
&lt;p&gt;You will learn how to define the problem. Do you want to generate fake images or fake text. Having defined the problem you can then collect data for it. You will define how your GAN should look. In our example of &amp;quot;mustache-ness&amp;quot; you will choose a convolutional neural network.&lt;/p&gt;
&lt;p&gt;You will see the effect of training the Discriminator on real data for n epochs. Using examples of real mustaches we will generate fake ones. We will see generated fake inputs for the generator and the effect of training the discriminator on fake data. The discriminator will correctly predict them as fake. Subsequently we will see how to train the generator with the output of discriminator. Now we can see a trained generator that can fool the discriminator. Generating fake mustaches that are indistinguishable from real.&lt;/p&gt;
&lt;p&gt;Attendees will learn tips on image processing, as well as training your own convolutional neural network.&lt;/p&gt;
&lt;p&gt;Showcasing the power of python in a fun, lighthearted way. Hopefully, being informative and entertaining&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Recorded at&lt;/strong&gt; PyCon.DE 2017 Karlsruhe: &lt;a class="reference external" href="https://de.pycon.org/"&gt;https://de.pycon.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Video editing&lt;/strong&gt;: Sebastian Neubauer &amp;amp; Andrei Dan&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Tools&lt;/strong&gt;: Blender, Avidemux &amp;amp; Sonic Pi&lt;/p&gt;
</summary><category term="python"></category><category term="machine learning"></category><category term="torch"></category><category term="scikit-learn"></category><category term="numpy"></category><category term="neural networks"></category></entry></feed>