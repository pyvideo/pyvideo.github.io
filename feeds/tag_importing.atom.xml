<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/tag_importing.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2011-07-13T00:00:00+00:00</updated><entry><title>Making use of OpenStreetMap data with Python</title><link href="https://pyvideo.org/europython-2011/making-use-of-openstreetmap-data-with-python.html" rel="alternate"></link><published>2011-07-13T00:00:00+00:00</published><updated>2011-07-13T00:00:00+00:00</updated><author><name>Andrii Mishkovskyi</name></author><id>tag:pyvideo.org,2011-07-13:europython-2011/making-use-of-openstreetmap-data-with-python.html</id><summary type="html">&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;[EuroPython 2011] Andrii Mishkovskyi - 22 June 2011 in &amp;quot;Track Lasagne&amp;quot;&lt;/p&gt;
&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Ever wondered how web maps are created? Ever wondered if you could build
something like Google Maps over a weekend? You probably can't, but this
talk will show you the basics of what you need to know, such as
importing data, rendering maps and even building simple routes. And all
of this in Python!&lt;/p&gt;
&lt;p&gt;Abstract: * Learning how OSM data looks * Parsing and importing the
data * Rendering maps with Mapnik * Bits of code required to build
geocoder * Building simple router with Python and PostGIS * And anything
else I forgot to mention in this abstract but will talk about&lt;/p&gt;
&lt;p&gt;Definitions: OpenStreetMap - the so-called &amp;quot;Wikipedia of maps&amp;quot; project,
with thousands of contributors who edit the map data of the whole world.
Unlike similar projects, the map data is completely free (both as in
beer and as in speech) and thus anyone can make use of it. Mapnik -
rendering framework, created specifically for OpenStreetMap, written in
C++ and Python. PostGIS - an extension of PostgreSQL database, with
support for many useful GIS features.&lt;/p&gt;
</summary><category term="gis"></category><category term="google"></category><category term="importing"></category><category term="learning"></category><category term="maps"></category><category term="parsing"></category><category term="postgresql"></category><category term="web"></category></entry><entry><title>Import this, that, and the other thing: custom importers (#9)</title><link href="https://pyvideo.org/pycon-us-2010/pycon-2010--import-this--that--and-the-other-thin.html" rel="alternate"></link><published>2010-02-19T00:00:00+00:00</published><updated>2010-02-19T00:00:00+00:00</updated><author><name>Brett Cannon</name></author><id>tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--import-this--that--and-the-other-thin.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Import this, that, and the other thing. Custom importers&lt;/p&gt;
&lt;p&gt;Presented by Brett Cannon&lt;/p&gt;
&lt;p&gt;Since Python 2.3, the ability has existed to customize the import
process so that one can support code stored in alternative formats, e.g.
zipimport and its support of importing code from a zip file. The aim of
this talk is to make sure you understand how the custom import mechanism
works and how to write your own custom importers using importlib from
Python 3.1.&lt;/p&gt;
</summary><category term="import"></category><category term="importers"></category><category term="importing"></category><category term="pycon"></category><category term="pycon2010"></category></entry></feed>