<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_christopher-e-ball.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2012-07-19T00:00:00+00:00</updated><entry><title>Param: Declarative programming using Parameters</title><link href="https://pyvideo.org/scipy-2012/param-declarative-programming-using-parameters.html" rel="alternate"></link><published>2012-07-19T00:00:00+00:00</published><updated>2012-07-19T00:00:00+00:00</updated><author><name>Christopher E. Ball</name></author><id>tag:pyvideo.org,2012-07-19:scipy-2012/param-declarative-programming-using-parameters.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;As a scientific Python application grows, it can be increasingly
difficult to use and maintain, because of implicit assumptions made when
writing each component. Users can pass any possible data type for any
argument, so code either fills up with assertions and tests to see what
type of data has been supplied, or else has undefined behavior for some
datatypes or values. Once software is exchanged with other users,
obscure error messages or even incorrect results are the likely outcome.
Programming languages that require types to be declared alleviate some
of these issues, but are inflexible and difficult to use, both in
general and when specifying details of types (such as ranges of allowed
values). Luckily, Python metaobjects make it possible to extend the
Python language to offer flexible declarative typing, offering the best
of both worlds.&lt;/p&gt;
&lt;p&gt;The Param module provides a clean, low-dependency, pure-Python
implementation of declarative parameters for Python objects and
functions, allowing library and program developers to specify precisely
what types of arguments or values are allowed. A Parameter is a special
type of class attribute that supports type declarations (based on
subtypes of a specified class, support for specified methods (duck
typing), or any other criterion that can be tested), ranges, bounds,
units, constant values, and enumerations. A Parameter has a docstring
(visible at the command line or in generated documentation), inherits
its default value, documentation, etc. along the class hierarchy, and
can be set to dynamic values that generate a stream of numbers for use
in controlling scientific code. In essence, a Parameter is a Python
attribute extended to support clean, simple, robust, maintainable, and
declarative scientific programming.&lt;/p&gt;
&lt;p&gt;Param has been under continuous development and use since 2002 as part
of the Topographica simulator (topographica.org), but is now being
released as a separate package due to demand from users who want similar
functionality in their own code. Param is very similar in spirit to the
Enthought Traits library, despite having been developed independently,
and offers much of the same functionality. Param is particularly useful
for people who find that Traits is difficult to integrate into their
work flow, since it consists of only two pure Python files with no
dependencies outside the standard library. Param is also useful for
people building Tk applications, and provides an optional Tk
property-sheet interface that can automatically generate a GUI window
for viewing and editing an object's Parameters.&lt;/p&gt;
&lt;p&gt;Param is freely available under a BSD license from:
&lt;a class="reference external" href="http://ioam.github.com/param/"&gt;http://ioam.github.com/param/&lt;/a&gt;&lt;/p&gt;
</summary><category term="General"></category></entry></feed>