<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Sat, 04 May 2019 00:00:00 +0000</lastBuildDate><item><title>Basta problemi con tensorflow usando Docker &amp; Nvidia Docker</title><link>https://pyvideo.org/pycon-italia-2019/basta-problemi-con-tensorflow-usando-docker-nvidia-docker.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Di sicuro vi sarà capitato che condividendo o effettuando un progetto
tensorflow questo non funzioni correttamente. Soprattutto non riesco a
far scalare la mia app perchè non ho abbastanza macchine con GPU e
eseguire lo scale su macchine con solo CPU è costoso per poi ottenere
scarsi benefici. La soluzione è utilizzare Docker e Nvidia Docker.
Vedremo perchè Docker è migliore di una macchina virtuale e come
cambiano le prestazioni rispetto ad andare direttamente sulla macchina.
Vedremo trucchi su come strutturare dei docker-compose file senza
duplicazione per poter sviluppare agilmente sia con GPU che senza, poter
effettuare un deploy con tranquillità e poter scalare facilmente anche
senza GPU. Slide Link: &amp;lt;&lt;a class="reference external" href="https://www.slideshare.net/NicolaLandro/basta"&gt;https://www.slideshare.net/NicolaLandro/basta&lt;/a&gt;-
problemicontensorflowusandodockernvidiadocker&amp;gt;&lt;/p&gt;
&lt;p&gt;Feedback form: &lt;a class="reference external" href="https://python.it/feedback-1528"&gt;https://python.it/feedback-1528&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;Saturday 4 May&lt;/strong&gt; at 10:45 &lt;a class="reference external" href="/en/sprints/schedule/pycon10/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nicola Landro</dc:creator><pubDate>Sat, 04 May 2019 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-05-04:pycon-italia-2019/basta-problemi-con-tensorflow-usando-docker-nvidia-docker.html</guid><category>OSX</category><category>windows</category><category>devops</category><category>Machine Learning</category><category>GNU/Linux</category><category>cuda</category><category>tensorflow</category><category>docker</category></item><item><title>Pacchettizzare applicazioni python in un singolo file binario</title><link>https://pyvideo.org/pycon-italia-2018/pacchettizzare-applicazioni-python-in-un-singolo-file-binario.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Uno dei pochi svantaggi di python è la difficoltà di distribuire
applicazioni stand alone binarie sviluppate in python. In questa talk
mostreremo come è possibile pachettizzare applicazioni python generando
un singolo file eseguibile per ciascuna piattaforma desktop: windows,
linux e mac. Partiremo da un semplice hello world, fino ad arrivare ad
applicazioni sempre più complesse. Verranno introdotti i tool a
disposizione per python per la combinazione di più file in un unico
script (stickytape), l’offuscamento e la minificazione (pyminifier,
Nuitka), la compilazione in un singolo file (PyInstaller, cx_Freeze).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Prerequisiti&lt;/strong&gt; : Conoscenza base di python e virtualenv&lt;/p&gt;
&lt;p&gt;in __on &lt;strong&gt;domenica 22 aprile&lt;/strong&gt; at 11:15 &lt;a class="reference external" href="/p3/schedule/pycon9/"&gt;**See
schedule**&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Gabriele Franch</dc:creator><pubDate>Sun, 22 Apr 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-04-22:pycon-italia-2018/pacchettizzare-applicazioni-python-in-un-singolo-file-binario.html</guid><category>windows</category><category>OSX</category><category>GNU/Linux</category><category>PyQt</category><category>interpreter</category></item></channel></rss>