<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/tag_cmd2.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2011-07-30T00:00:00+00:00</updated><entry><title>PyOhio 2011: Interactive command-line interpreters with cmd and cmd2</title><link href="https://pyvideo.org/pyohio-2011/pyohio-2011--interactive-command-line-interpreter.html" rel="alternate"></link><published>2011-07-30T00:00:00+00:00</published><updated>2011-07-30T00:00:00+00:00</updated><author><name>Catherine Devlin</name></author><id>tag:pyvideo.org,2011-07-30:pyohio-2011/pyohio-2011--interactive-command-line-interpreter.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Interactive command-line interpreters with cmd and cmd2&lt;/p&gt;
&lt;p&gt;Presented by Catherine Devlin&lt;/p&gt;
&lt;p&gt;How should your Python program receive commands and deliver results? If
an interactive command-line interpreter is right for you, you're in luck
- Python's got some great batteries included for you.&lt;/p&gt;
</summary><category term="cmd"></category><category term="cmd2"></category><category term="commandline"></category><category term="interpreters"></category><category term="pyohio"></category><category term="pyohio2011"></category></entry><entry><title>Easy command-line applications with cmd and cmd2 (#153)</title><link href="https://pyvideo.org/pycon-us-2010/pycon-2010--easy-command-line-applications-with-c.html" rel="alternate"></link><published>2010-02-19T00:00:00+00:00</published><updated>2010-02-19T00:00:00+00:00</updated><author><name>Catherine Devlin</name></author><id>tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--easy-command-line-applications-with-c.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Easy command-line applications with cmd and cmd2&lt;/p&gt;
&lt;p&gt;Presented by Catherine Devlin (IntelliTech Systems)&lt;/p&gt;
&lt;p&gt;The Python Standard Library's cmd module makes it absurdly simple to
write command-line interpreters - non-graphical programs that
communicate with users interactively through a simple text interface.
The third-party cmd2 module adds high-powered &amp;quot;batteries&amp;quot; to
applications written for cmd.&lt;/p&gt;
&lt;p&gt;This presentation teaches attendees how to easily make their own
powerful command-line interpreters with cmd and cmd2. It also describes
the tricks cmd2 uses for some of its more interesting functionality so
that they can implement them in their own programs (even unrelated
ones). It ends with a brief demonstration of sqlpython, a cmd2-based
application that improves on existing ad-hoc SQL applications.&lt;/p&gt;
</summary><category term="cmd"></category><category term="cmd2"></category><category term="pycon"></category><category term="pycon2010"></category></entry></feed>