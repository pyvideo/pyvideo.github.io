<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org - Virtual Env</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/tag_virtual-env.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2020-07-23T00:00:00+00:00</updated><subtitle></subtitle><entry><title>status quo of virtual environments</title><link href="https://pyvideo.org/europython-2019/status-quo-of-virtual-environments.html" rel="alternate"></link><published>2019-07-12T00:00:00+00:00</published><updated>2019-07-12T00:00:00+00:00</updated><author><name>Bernat Gabor</name></author><id>tag:pyvideo.org,2019-07-12:/europython-2019/status-quo-of-virtual-environments.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python is easy to learn and use programming language; however, managing
dependencies and package versions for it are nowhere as pleasant. One of
the basic building block created to help with this is virtual
environments. Join me in understanding how virtual environments work
from within (by one of the …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python is easy to learn and use programming language; however, managing
dependencies and package versions for it are nowhere as pleasant. One of
the basic building block created to help with this is virtual
environments. Join me in understanding how virtual environments work
from within (by one of the project maintainers); also, to find out if
the good old virtualenv project has any place left, now that Python 3.4+
contains venv.&lt;/p&gt;
&lt;p&gt;This talk is aimed to be a bit more technical in its first parts,
presenting in technical details what a virtualenv is. The target
audience is anyone who used virtual environments and wants to understand
how they tick from within. I’ll also emphasise diversity and inclusion
at Python interpreter level by highlighting other interpreters than
CPython: Jython, PyPy or Iron Python. A concise outline goes as follows:&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;What is a virtual environment?&lt;/div&gt;
&lt;div class="line"&gt;- why we need it&lt;/div&gt;
&lt;div class="line"&gt;- what we use it for&lt;/div&gt;
&lt;div class="line"&gt;- demo - virtualenv vs system env&lt;/div&gt;
&lt;div class="line"&gt;How do we build a virtual environment (CPython)&lt;/div&gt;
&lt;div class="line"&gt;- technical workflow of venv creation&lt;/div&gt;
&lt;div class="line"&gt;- activation&lt;/div&gt;
&lt;div class="line"&gt;-- bash&lt;/div&gt;
&lt;div class="line"&gt;-- powershell&lt;/div&gt;
&lt;div class="line"&gt;-- cmd.bat&lt;/div&gt;
&lt;div class="line"&gt;Other interpreters&lt;/div&gt;
&lt;div class="line"&gt;- why other than CPython?&lt;/div&gt;
&lt;div class="line"&gt;- PyPy&lt;/div&gt;
&lt;div class="line"&gt;- Jython&lt;/div&gt;
&lt;div class="line"&gt;- virtualenv&lt;/div&gt;
&lt;div class="line"&gt;- all Python support&lt;/div&gt;
&lt;div class="line"&gt;- extra activation -&amp;gt; xonosh&lt;/div&gt;
&lt;div class="line"&gt;Summary and q/a&lt;/div&gt;
&lt;/div&gt;
</content><category term="EuroPython 2019"></category><category term="Virtual Env"></category></entry><entry><title>Building reproducible distributed applications at scale</title><link href="https://pyvideo.org/europython-2020/building-reproducible-distributed-applications-at-scale.html" rel="alternate"></link><published>2020-07-23T00:00:00+00:00</published><updated>2020-07-23T00:00:00+00:00</updated><author><name>Fabian Höring</name></author><id>tag:pyvideo.org,2020-07-23:/europython-2020/building-reproducible-distributed-applications-at-scale.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Packaging in Python is hard. Packaging is particularly hard when code needs to run in a distributed computing environment where it is difficult to know what runs where and which parts of the code are available to run there.&lt;/p&gt;
&lt;p&gt;In this talk we will present different ways to ship …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Packaging in Python is hard. Packaging is particularly hard when code needs to run in a distributed computing environment where it is difficult to know what runs where and which parts of the code are available to run there.&lt;/p&gt;
&lt;p&gt;In this talk we will present different ways to ship Python code to a compute cluster, what Python's &amp;quot;pickling&amp;quot; feature has to do with this, what self contained executables are and the challenges we met when shipping Python code to a cluster with 1000s of nodes running 1000s of jobs like TensorFlow or Spark.&lt;/p&gt;
&lt;p&gt;As an example, we will show how one can run a PySpark job on top of S3 storage using PEX as a self contained executable artifact. Finally we will explain how those ideas generalize for different Jobs (like Tensorflow, Dask), different virtual environments (like Anaconda or vanilla Python virtual envs) and different distributed storage's (like S3 or HDFS).&lt;/p&gt;
&lt;p&gt;The auditor will get an overview of the challenges of Python packaging for distributed applications and see code samples that can be applied in his own project.&lt;/p&gt;
</content><category term="EuroPython 2020"></category><category term="europython"></category><category term="europython-2020"></category><category term="europython-online"></category><category term="Big Data"></category><category term="Distributed Systems"></category><category term="Packaging"></category><category term="Virtual Env"></category></entry><entry><title>Difficulties of Python code development:packages,virtualenvs and package mangers</title><link href="https://pyvideo.org/europython-2020/difficulties-of-python-code-developmentpackagesvirtualenvs-and-package-mangers.html" rel="alternate"></link><published>2020-07-23T00:00:00+00:00</published><updated>2020-07-23T00:00:00+00:00</updated><author><name>Michał Wodyński</name></author><id>tag:pyvideo.org,2020-07-23:/europython-2020/difficulties-of-python-code-developmentpackagesvirtualenvs-and-package-mangers.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Develop your code effectively with well chosen tools&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;In this presentation I will show different packages that are used in Python. I will point out differences and explain the prons and cons of using them during code development.&lt;/dt&gt;
&lt;dd&gt;After that we will jump to the topic of virtualenvs and …&lt;/dd&gt;&lt;/dl&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Develop your code effectively with well chosen tools&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;In this presentation I will show different packages that are used in Python. I will point out differences and explain the prons and cons of using them during code development.&lt;/dt&gt;
&lt;dd&gt;After that we will jump to the topic of virtualenvs and  popular tools that are used for managing them. I will explain what is purpose of the virtualenvs in Python and why we should use them.
Finally we will focus on the most important topic without which development is not possible – package mangers. Package managers it is wide topic in Python world. There is many package mangers and  currently we have tools like pip, pipenv or poetry but it is not obvious which of them we should use in first place. Which of them are recommended to use? What are prons and cons of certain package mangers? Is there any other not well known packages mangers? How package mangers are packaging Python code? Which of the package mangers are good for data scientists? Is your package manger is resolving dependencies?
This questions can appear especially when you are beginner and just to want start working with Python. Unfortunately form the beginning you must face the problem which of the package manger you should use. In this presentation I will answer all of this questions. I will list popular package mangers and some not known. I will show differences and which of them are best for which case. Also I will explain differences between packages that are used by different packages mangers. If you are interested in code development and package mangers or you are just confused which of them you should use this presentation is definitely for you. During this presentation I will answer all questions and I will wipe out all doubts about packages, package mangers and virtualenvs.&lt;/dd&gt;
&lt;/dl&gt;
</content><category term="EuroPython 2020"></category><category term="europython"></category><category term="europython-2020"></category><category term="europython-online"></category><category term="Beginners"></category><category term="Conda / conda forge"></category><category term="Development"></category><category term="Packaging"></category><category term="Virtual Env"></category></entry><entry><title>Lessons from the Trenches: rewriting and re-releasing virtualenv</title><link href="https://pyvideo.org/europython-2020/lessons-from-the-trenches-rewriting-and-re-releasing-virtualenv.html" rel="alternate"></link><published>2020-07-23T00:00:00+00:00</published><updated>2020-07-23T00:00:00+00:00</updated><author><name>Bernat Gabor</name></author><id>tag:pyvideo.org,2020-07-23:/europython-2020/lessons-from-the-trenches-rewriting-and-re-releasing-virtualenv.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;virtualenv is a tool that builds virtual environments for Python. It was first created in September 2007 and lived most of its life being a single file project with an increasing amount of (scary) workarounds within. It managed to grow until it was 2,700 lines of code. Maintaining …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;virtualenv is a tool that builds virtual environments for Python. It was first created in September 2007 and lived most of its life being a single file project with an increasing amount of (scary) workarounds within. It managed to grow until it was 2,700 lines of code. Maintaining this project became increasingly more troublesome, to the point where, we had more than 500 open issues at one point. In July 2019, I started working from scratch on a rewrite, with the goal of not just increasing the project's maintainability, but also to make it faster and add some new features that were just impossible or too hard to do in the existing code base. Fast forward six months to January 2020, when we released the first beta, with the first full release coming out on 10th February. It took a bit more than a month to squash all the open bugs tickets, but April started without any remaining open bug tickets. This talk will cover the lessons I've learned while on this journey.&lt;/p&gt;
</content><category term="EuroPython 2020"></category><category term="europython"></category><category term="europython-2020"></category><category term="europython-online"></category><category term="Packaging"></category><category term="Virtual Env"></category><category term="python"></category></entry></feed>