<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org - William Woodruff</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_william-woodruff.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2025-05-17T00:00:00+00:00</updated><subtitle></subtitle><entry><title>Lightning Talks - Day 2 PM</title><link href="https://pyvideo.org/pycon-us-2022/lightning-talks-day-2-pm.html" rel="alternate"></link><published>2022-04-27T00:00:00+00:00</published><updated>2022-04-27T00:00:00+00:00</updated><author><name>Christian Maureia Fredes</name></author><id>tag:pyvideo.org,2022-04-27:/pycon-us-2022/lightning-talks-day-2-pm.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Lightning talks are a ~ 5 minutes long, on any topic of interest to other Python people. It doesn't have to be about something that you wrote, it can be something that you learned, or a technique you think other people will be interested in.&lt;/p&gt;
&lt;p&gt;Speakers:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;00:35 - Christian Maureia …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Lightning talks are a ~ 5 minutes long, on any topic of interest to other Python people. It doesn't have to be about something that you wrote, it can be something that you learned, or a technique you think other people will be interested in.&lt;/p&gt;
&lt;p&gt;Speakers:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;00:35 - Christian Maureia Fredes - Python en Espanol&lt;/li&gt;
&lt;li&gt;05:35 - Mario Munoz - My First Pycon: Reflections&lt;/li&gt;
&lt;li&gt;10:20 - Georgi Ker - Open source is a walk in the park&lt;/li&gt;
&lt;li&gt;14:30 - Bence Nagy - Lint your code, repo, playlist, and fashion sense&lt;/li&gt;
&lt;li&gt;19:49 - Mark Shannon - Help us speed up Python with benchmarks&lt;/li&gt;
&lt;li&gt;23:35 - Larry Hastings - Correlate your data with Correlate&lt;/li&gt;
&lt;li&gt;27:39 - Rich Taggart - The importance of effective concise communication&lt;/li&gt;
&lt;li&gt;35:38 - William Woodruff - Securing your PyPI account&lt;/li&gt;
&lt;li&gt;40:18 - Alexa Lindberg - Generating recipes w/ GPT-2 &amp;amp; Python&lt;/li&gt;
&lt;li&gt;20:53 - Srinivas Bontula - Managing transitive dependencies for Django&lt;/li&gt;
&lt;li&gt;50:25 - Adrian - When to rewrite in rust&lt;/li&gt;
&lt;/ul&gt;
</content><category term="PyCon US 2022"></category><category term="lightning talks"></category></entry><entry><title>Ergonomic codesigning for the Python ecosystem with Sigstore</title><link href="https://pyvideo.org/pycon-us-2023/ergonomic-codesigning-for-the-python-ecosystem-with-sigstore.html" rel="alternate"></link><published>2023-04-21T00:00:00+00:00</published><updated>2023-04-21T00:00:00+00:00</updated><author><name>William Woodruff</name></author><id>tag:pyvideo.org,2023-04-21:/pycon-us-2023/ergonomic-codesigning-for-the-python-ecosystem-with-sigstore.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Code signing is coming to the Python packaging ecosystem, in the form of
&lt;a class="reference external" href="https://www.sigstore.dev/"&gt;Sigstore&lt;/a&gt;: individual package maintainers
and users will be able to sign for and verify the authenticity of their
Python packages, respectively, without the historical and technical
baggage of PGP.&lt;/p&gt;
&lt;p&gt;This talk will serve two purposes: (1 …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Code signing is coming to the Python packaging ecosystem, in the form of
&lt;a class="reference external" href="https://www.sigstore.dev/"&gt;Sigstore&lt;/a&gt;: individual package maintainers
and users will be able to sign for and verify the authenticity of their
Python packages, respectively, without the historical and technical
baggage of PGP.&lt;/p&gt;
&lt;p&gt;This talk will serve two purposes: (1) as a introduction to Sigstore,
and its security model, to Python developers, and (2) as a technical
overview of ongoing efforts to integrate Sigstore into Python packaging.&lt;/p&gt;
&lt;p&gt;Attendees will be introduced to the cryptographic fundamentals of
codesigning, how Sigstore accomplishes codesigning without long-term key
material (a critical downside to PGP), as well as the guarantees they
can derive from strong codesigning in the Python packaging ecosystem.
They'll also be introduced to the technical aspects of Sigstore's
integration into Python packaging, including a peek behind the scenes at
the standardization process and other foundational efforts required to
introduce a new codesigning format to one of the world's largest
packaging ecosystems.&lt;/p&gt;
</content><category term="PyCon US 2023"></category></entry><entry><title>Building a Rusty path validation library for PyCA Cryptography</title><link href="https://pyvideo.org/pycon-us-2024/building-a-rusty-path-validation-library-for-pyca-cryptography.html" rel="alternate"></link><published>2024-05-18T00:00:00+00:00</published><updated>2024-05-18T00:00:00+00:00</updated><author><name>William Woodruff</name></author><id>tag:pyvideo.org,2024-05-18:/pycon-us-2024/building-a-rusty-path-validation-library-for-pyca-cryptography.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The Python ecosystem has historically relied on OpenSSL (and its myriad
forks) to provide an implementation of X.509 path validation, a
little-known but essential component of every secure HTTPS connection
made on the modern Internet. This has brought technical debt, developer
frustration (due to OpenSSL's poorly documented implementation …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The Python ecosystem has historically relied on OpenSSL (and its myriad
forks) to provide an implementation of X.509 path validation, a
little-known but essential component of every secure HTTPS connection
made on the modern Internet. This has brought technical debt, developer
frustration (due to OpenSSL's poorly documented implementation quirks),
and a mottled security history.&lt;/p&gt;
&lt;p&gt;This talk introduces an alternative, developed over the past year: a new
implementation of X.509 path validation, written from the ground-up in a
memory-safe language with standards conformance as a priority, newly
integrated into &lt;a class="reference external" href="https://cryptography.io/en/latest/"&gt;PyCA
Cryptography&lt;/a&gt;, Python's most
popular cryptographic library. We'll cover the work's implementation
details, strategies applied for reducing complexity, technical decisions
and tradeoffs made in its Rust components, as well as the work's impact
on the millions of Python developers that depend on &lt;a class="reference external" href="https://cryptography.io/en/latest/"&gt;PyCA
Cryptography&lt;/a&gt; and &lt;a class="reference external" href="https://www.pyopenssl.org/en/latest/"&gt;PyCA
pyOpenSSL&lt;/a&gt;. Particular
attention will be dedicated to the work's critical security scope and
accompanying testing philosophy, including developed strategies for
reaching perfect test coverage and avoiding vulnerability classes that
have historically afflicted X.509 path validation implementations.&lt;/p&gt;
&lt;p&gt;The audience is expected to have an intermediate familiarity with
general Python development, including a high-level familiarity with
SSL/TLS and HTTPS (but not X.509 or X.509 path validation). Audience
members will leave the talk with a more complete understanding of the
modern Internet's security model, as well as how the Python ecosystem is
maturing to accomodate modern cryptographic best practices in networked
settings.&lt;/p&gt;
</content><category term="PyCon US 2024"></category></entry><entry><title>Attestations: a new generation of signatures on PyPI</title><link href="https://pyvideo.org/pycon-us-2025/attestations-a-new-generation-of-signatures-on-pypi.html" rel="alternate"></link><published>2025-05-17T00:00:00+00:00</published><updated>2025-05-17T00:00:00+00:00</updated><author><name>William Woodruff</name></author><id>tag:pyvideo.org,2025-05-17:/pycon-us-2025/attestations-a-new-generation-of-signatures-on-pypi.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;End-to-end signing and verification is one of the hardest technical and social challenges in open source packaging: it rests at the fault lines of error- and misuse-prone cryptography, long-term secret management, and identity/trust bootstrapping. These challenges have stymied past attempts to do large-scale end-user signing in the Python …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;End-to-end signing and verification is one of the hardest technical and social challenges in open source packaging: it rests at the fault lines of error- and misuse-prone cryptography, long-term secret management, and identity/trust bootstrapping. These challenges have stymied past attempts to do large-scale end-user signing in the Python ecosystem, including PyPI's former (now disabled) support for PGP signature uploads.&lt;/p&gt;
&lt;p&gt;Over the past year, PyPI has designed, developed, and deployed a new approach to package signing, one that aims to break the iron triangle of end-user signing: digital attestations, as standardized in PEP 740.&lt;/p&gt;
&lt;p&gt;This talk will cover the architectural details of attestations, how attestations were implemented on PyPI and on the client (uploading side), their security properties (including transparency) and advantages, as well as how PyPI was able to enable signing by default for a large swath of the ecosystem without requiring maintainers to change anything about their packaging processes. The talk will also cover the future of attestations, including pieces of the puzzle that are currently missing (like large-scale verification of attestations by parties other than PyPI itself).&lt;/p&gt;
&lt;p&gt;The audience is expected to have an intermediate familiarity with Python packaging, including PyPI. No specific familiarity with cryptography is required. Audience members will leave the talk with an improved understanding of the challenges latent in end-user signing, how PEP 740's design and PyPI's implementation overcome those challenges, and how they can both produce and consume attestations today.&lt;/p&gt;
</content><category term="PyCon US 2025"></category></entry><entry><title>Improving PyPI's security with Two Factor Authentication</title><link href="https://pyvideo.org/pygotham-2019/improving-pypis-security-with-two-factor-authentication.html" rel="alternate"></link><published>2019-10-05T00:00:00+00:00</published><updated>2019-10-05T00:00:00+00:00</updated><author><name>William Woodruff</name></author><id>tag:pyvideo.org,2019-10-05:/pygotham-2019/improving-pypis-security-with-two-factor-authentication.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Since March, [Trail of Bits](&lt;a class="reference external" href="https://www.trailofbits.com"&gt;https://www.trailofbits.com&lt;/a&gt;) has worked with
the PSF to implement and land major security improvements in
[Warehouse](&lt;a class="reference external" href="https://github.com/pypa/warehouse/"&gt;https://github.com/pypa/warehouse/&lt;/a&gt;), the codebase that drives
[PyPI](&lt;a class="reference external" href="https://pypi.org"&gt;https://pypi.org&lt;/a&gt;). This talk will cover just one of those
improvements: the addition of two …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Since March, [Trail of Bits](&lt;a class="reference external" href="https://www.trailofbits.com"&gt;https://www.trailofbits.com&lt;/a&gt;) has worked with
the PSF to implement and land major security improvements in
[Warehouse](&lt;a class="reference external" href="https://github.com/pypa/warehouse/"&gt;https://github.com/pypa/warehouse/&lt;/a&gt;), the codebase that drives
[PyPI](&lt;a class="reference external" href="https://pypi.org"&gt;https://pypi.org&lt;/a&gt;). This talk will cover just one of those
improvements: the addition of two factor authentication to user logins.
Attendees will learn about the technical details of two factor schemes, the
security properties they can (and can not) provide, and the process for
making major changes to core Python infrastructure.&lt;/p&gt;
</content><category term="PyGotham 2019"></category></entry></feed>