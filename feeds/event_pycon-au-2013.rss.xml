<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Sun, 07 Jul 2013 00:00:00 +0000</lastBuildDate><item><title>Big Data Deduplication and data matching using Python</title><link>https://pyvideo.org/pycon-au-2013/big-data-deduplication-and-data-matching-using-py.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Andrew Rowe will present the lessons learnt and techniques used to
process very large amounts of data from the ABS Census. The Australian
Bureau of Statistics used Python to investigate data from the 2006
Australian Census. Python is an integral part of ABS systems to
determine duplicated entries and link people in the Census to other ABS
collections. You will learn about: * Handling large data. * Dealing
with confidentiality. * Multiprocessing techniques. * Performance tips
and tricks. * Difference between if( 1 &amp;lt; 2 ) and if 1 &amp;lt; 2.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrew Rowe</dc:creator><pubDate>Sun, 07 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-07:pycon-au-2013/big-data-deduplication-and-data-matching-using-py.html</guid></item><item><title>Build your infrastructure - with Python!</title><link>https://pyvideo.org/pycon-au-2013/build-your-infrastructure-with-python.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Cloud computing is changing the way that businesses think about their
computing requirements. Instead of ordering hardware, waiting for
delivery, allocating space in a data center, installing and wiring it
up, and then configuring each piece of the system, you can now do the
equivalent with a few clicks on a control panel, but that gets tedious.
What's much more interesting is to do all of this programmatically,
using our favorite language: Python!&lt;/p&gt;
&lt;p&gt;This session will deep-dive into this topic by using pyrax, the Python
SDK for the OpenStack and Rackspace Clouds. It will cover the following:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Getting your cloud account and credentials&lt;/li&gt;
&lt;li&gt;Installing pyrax&lt;/li&gt;
&lt;li&gt;Creating servers&lt;/li&gt;
&lt;li&gt;Saving a customized server as a template image&lt;/li&gt;
&lt;li&gt;Creating more servers on demand from your template images.&lt;/li&gt;
&lt;li&gt;Creating, attaching, and imaging Block Storage volumes.&lt;/li&gt;
&lt;li&gt;Using private networks to create a bastion host setup&lt;/li&gt;
&lt;li&gt;Managing these servers with a Load Balancer&lt;/li&gt;
&lt;li&gt;Creating and managing Cloud Databases&lt;/li&gt;
&lt;li&gt;Using pyrax to manage your DNS&lt;/li&gt;
&lt;li&gt;Object storage and management using pyrax&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ed Leafe</dc:creator><pubDate>Sun, 07 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-07:pycon-au-2013/build-your-infrastructure-with-python.html</guid></item><item><title>Buildbots Rollout!</title><link>https://pyvideo.org/pycon-au-2013/buildbots-rollout.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;A Continuous Integration (CI) server is an essential tool for any
developer, but with so many different servers out there its hard to
choose which one to use. Buildbot has a pretty steep learning curve, but
rewards with a very light footprint and amazing flexibility and
configurability. In this talk I will walk through the build(ing) blocks
and concepts required to put together a simple CI server based upon
buildbot, and also suggest some more advanced features.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mark Lakewood</dc:creator><pubDate>Sun, 07 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-07:pycon-au-2013/buildbots-rollout.html</guid></item><item><title>Building data flows with Celery and SQLAlchemy</title><link>https://pyvideo.org/pycon-au-2013/building-data-flows-with-celery-and-sqlalchemy.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Reporting and analysis systems rely on coherent and reliable data, often
from disparate sources. To that end, a series of well established data
warehousing practices have emerged to extract data and produce a
consistent data store.&lt;/p&gt;
&lt;p&gt;This talk will look at some options for composing workflows using
Python. In particular, we'll explore beyond Celery's asynchronous task
processing functionality into its workflow (aka Canvas) system and how
it can be used in conjunction with SQLAlchemy's architecture to provide
the building blocks for data stream processing.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Roger Barnes</dc:creator><pubDate>Sun, 07 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-07:pycon-au-2013/building-data-flows-with-celery-and-sqlalchemy.html</guid></item><item><title>Conference Close</title><link>https://pyvideo.org/pycon-au-2013/conference-close.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Unknown</dc:creator><pubDate>Sun, 07 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-07:pycon-au-2013/conference-close.html</guid></item><item><title>Don't Do This</title><link>https://pyvideo.org/pycon-au-2013/dont-do-this.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;In which Richard will tell you about some things you should never
(probably ever) do to or in Python. Warranties may be voided.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Richard Jones</dc:creator><pubDate>Sun, 07 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-07:pycon-au-2013/dont-do-this.html</guid></item><item><title>Dynamic visualisation in the IPython Notebook</title><link>https://pyvideo.org/pycon-au-2013/dynamic-visualisation-in-the-ipython-notebook.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;The IPython Notebook is a powerful web app for exploring ideas and data
sets with Python. It has excellent integration with Matplotlib, giving
the user highly customisable static plots with ease. But for larger data
sets, a static plot may not be ideal - the ability to pan, zoom, choose
dynamic layers and sample the data at particular points would be nice.
This talk will demonstrate just how easy it is to integrate a Web Map
Service/client such as Pydap/Leaflet.js into the IPython Notebook.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Brianna Laugher</dc:creator><pubDate>Sun, 07 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-07:pycon-au-2013/dynamic-visualisation-in-the-ipython-notebook.html</guid></item><item><title>Getting the most out of Stack Overflow</title><link>https://pyvideo.org/pycon-au-2013/getting-the-most-out-of-stack-overflow.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Stack Overflow is the single greatest repository of coding knowledge in
the world. Now approaching five years old, its community-moderated,
strict Q&amp;amp;A format has made it far more useful than other similar sites.&lt;/p&gt;
&lt;p&gt;Contributing to it, however, can be intimidating. The questions of new
users are often voted down or closed with little comment, or edited by
the community in was the original poster doesn't understand. Answering
is even worse. How do other people manage to post a detailed answer to a
specific question in minutes, or even seconds? How could I possibly know
so much about such a broad range of topics, even within a single
programming language or framework?&lt;/p&gt;
&lt;p&gt;Over the past three years, I've learned a lot from contributing to Stack
Overflow. It has honed my research, technical writing, and rapid
prototyping skills, as well as greatly expanded my knowledge of the
Python ecosystem, standard library, and CPython internals.&lt;/p&gt;
&lt;p&gt;I'll share not only how to use the site to learn, but also how to
compete effectively with the thousands of other programmers who answer
questions there on a daily basis -- we all like to win. I'll talk about
what goes into a good answer, as well as a good question. I'll also talk
about how contributing to Stack Overflow is like contributing to any
other open source project in many ways -- in what you gain, as well as
what the community gains, partly because of the CC-by-SA licensing used
by the Stack Exchange network of sites.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Adam Forsyth</dc:creator><pubDate>Sun, 07 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-07:pycon-au-2013/getting-the-most-out-of-stack-overflow.html</guid></item><item><title>Growing Open Source Seeds</title><link>https://pyvideo.org/pycon-au-2013/growing-open-source-seeds.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;This talk will be an in-depth review of the stages that most open source
projects go though, and the decisions their maintainers face. Requests
will be used as an example — lessons learned and best practices will be
covered.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Kenneth Reitz</dc:creator><pubDate>Sun, 07 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-07:pycon-au-2013/growing-open-source-seeds.html</guid></item><item><title>Making games in pygame</title><link>https://pyvideo.org/pycon-au-2013/making-games-in-pygame.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Have you ever wanted to write a game? This talk will give you all the
stuff that you will need to make a game using the pygame game making
library. Come to this talk so you don't make all the mistakes that I
did. This talk will cover all kinds of awesome things that your game
will need like images, music, sound effects, drawing, and all the vital
things you will need to know. And I will show you how to do it right!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Cody Lovett</dc:creator><pubDate>Sun, 07 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-07:pycon-au-2013/making-games-in-pygame.html</guid></item><item><title>Making Python More Fun for Everyone</title><link>https://pyvideo.org/pycon-au-2013/making-python-more-fun-for-everyone.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;We spent the first part of our careers developing products and managing
software teams at IBM, Dell, and Texas Instruments. After moving to
Singapore, we each found are way into the education space and found
ourselves teaching Python to a variety of audiences. We developed our
first Python game for a friend of ours who was teaching computer science
in a local high school. Since then, it has been a continual journey to
see how fun we could make learning python before our now 10-year old
daughter was ready to pickup the keyboard and start helping out. In this
talk, we will talk about where our journey started, where we are today,
and where we hope to be in the near future. We will discuss the
Tournament-based Teaching methodology that we developed to increase
student preparation, in-class engagement, and peer-based learning. Then
we will talk about our research in to using mobile devices such as the
iPad to help students practice reading and working with python to gain
confidence before moving on to writing code. We will discuss our latest
family project where we have worked with our children to create a fun
python quest to encourage learners around the world to practice their
python for just a few minutes more each week. Then looking forward, we
will talk about our latest research in to pair-based programming
assignments, pair-programming tournaments, team-based logic
competitions, encouraging more girls to try programming, and the goal to
frame programming as a very healthy habit. Our hope is that this talk
will be interesting for educators looking to increase student engagement
and interest, for managers looking for fun ways to increase the
productivity of their development teams, and for parents looking for
additional ways to enable their children to experiment with python.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Chris Boesch</dc:creator><pubDate>Sun, 07 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-07:pycon-au-2013/making-python-more-fun-for-everyone.html</guid></item><item><title>Managing scientific simulations with Python with RQ (Redis Queue)</title><link>https://pyvideo.org/pycon-au-2013/managing-scientific-simulations-with-python-with.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Writing scientific software in support of experimentation and simulation
is a challenging task. It is even more challenging in cases where such
software must be distributed across multiple machines. Existing methods
for addressing this problem can require either significant effort to
maintain and extend. Alternative approaches such as message queues can
be incredibly difficult to install for novices.&lt;/p&gt;
&lt;p&gt;This presentation will demonstrate a quick and easy approach to solving
this problem using the redis-queue module. This approach makes it easy
to make efficient use of multiple cores and multiple machines, with only
minimal dependence on external packages.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andrew Walker</dc:creator><pubDate>Sun, 07 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-07:pycon-au-2013/managing-scientific-simulations-with-python-with.html</guid></item><item><title>Modern scientific computing and big data analytics in Python</title><link>https://pyvideo.org/pycon-au-2013/modern-scientific-computing-and-big-data-analytic.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;This is a tutorial on using the latest and most exciting tools in Python
for scientific and engineering applications in 2013, with a focus on
'big data' applications. Using real-world data sets and a fully Python 3
environment, it will walk you through what's possible with modern tools
like the machine-learning package scikit-learn, the image-processing
package scikit-image, the Pandas toolkit for data analysis, and
IPython-parallel. It will also review the upcoming generation of tools
like Numba and Blaze.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Edward Schofield</dc:creator><pubDate>Sun, 07 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-07:pycon-au-2013/modern-scientific-computing-and-big-data-analytic.html</guid></item><item><title>My big gay adventure. Making, releasing and selling an indie game made in python.</title><link>https://pyvideo.org/pycon-au-2013/my-big-gay-adventure-making-releasing-and-selli.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Indie game developer Luke Miller presents a brief overview on making
point-and-click adventure games using the open source pyvida gaming
engine and uses his commercially released gay-themed adventure game &amp;quot;My
Ex-Boyfriend the Space Tyrant!&amp;quot; as a tutorial on developing, packaging,
releasing and selling a python game for Windows, Mac and Linux.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Luke Miller</dc:creator><pubDate>Sun, 07 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-07:pycon-au-2013/my-big-gay-adventure-making-releasing-and-selli.html</guid></item><item><title>PiDoorbell - Instantaneous Video Notifications with Arduino &amp; RaspberryPi</title><link>https://pyvideo.org/pycon-au-2013/pidoorbell-instantaneous-video-notifications-wi.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Have you ever found yourself obsessively checking the UPS or FedEx
tracking site to see if your package finally got delivered at your
doorstep? Or wondered when your contractor/gardener showed up to do
their job? Or if your neighbor came looking for you on an urgent matter
while you were out?&lt;/p&gt;
&lt;p&gt;In this talk, I will show you how you can relax and rely on your
handy-dandy smartphone to let you know when these events happen along
with video snippets of what happened and who showed up!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Rupa Dachere</dc:creator><pubDate>Sun, 07 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-07:pycon-au-2013/pidoorbell-instantaneous-video-notifications-wi.html</guid></item><item><title>Python? Ruby? Go? Oh My!</title><link>https://pyvideo.org/pycon-au-2013/python-ruby-go-oh-my.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Brett covers the things that excite him about each of Python, Ruby and
Go. He covers some of cool stuff he's seen lately, some of the lessons
learned from different ecosystems, and more specifically where he thinks
Python could improve, or what it excels at.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Brett Wilkins</dc:creator><pubDate>Sun, 07 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-07:pycon-au-2013/python-ruby-go-oh-my.html</guid></item><item><title>Solving problems by sharing them... with Python!</title><link>https://pyvideo.org/pycon-au-2013/solving-problems-by-sharing-them-with-python.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;By using a variety of techniques and technologies, you can tap into the
expert knowledge of others more effectively. Revision control and code
reviews are great for software quality, but not everyone is going to
work that way. Tools such as ipython notebook, sharing gists,
demonstration sessions and screencasts are a great way to get others
involved in problem solving. Knowing how to use these tools quickly and
effectively can also be a great way to explain problems to management,
or to walk them through a complex requirement.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Tennessee J Leeuwenburg</dc:creator><pubDate>Sun, 07 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-07:pycon-au-2013/solving-problems-by-sharing-them-with-python.html</guid></item><item><title>Sunday Lightning Talks</title><link>https://pyvideo.org/pycon-au-2013/sunday-lightning-talks.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Various speakers</dc:creator><pubDate>Sun, 07 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-07:pycon-au-2013/sunday-lightning-talks.html</guid><category>lightning talks</category></item><item><title>The Framework Framework</title><link>https://pyvideo.org/pycon-au-2013/the-framework-framework.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;For when things should be pluggable... for when you want users to be
able to extend your app... what should you do? &amp;quot;I will write a
framework!&amp;quot;, I hear you say. No need to invent your own pluggable system
- use Component Architecture! The framework for frameworks (tested on
animals).&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Adam Terrey</dc:creator><pubDate>Sun, 07 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-07:pycon-au-2013/the-framework-framework.html</guid></item><item><title>The ultimate CMS vs Framework showdown</title><link>https://pyvideo.org/pycon-au-2013/the-ultimate-cms-vs-framework-showdown.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Is Django a CMS? Is Plone a Framework? For years I've seen developers
stumble over the same problem, when should I use a CMS like Plone,
Drupal or Wordpress, and when should I use a framework like Django?
Covering real case studies of projects gone horribly wrong through the
use of the wrong technology. The audience will be left with several
solid rules to follow to guide their future development.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dylan Jay</dc:creator><pubDate>Sun, 07 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-07:pycon-au-2013/the-ultimate-cms-vs-framework-showdown.html</guid></item><item><title>Tinkering with Tkinter</title><link>https://pyvideo.org/pycon-au-2013/tinkering-with-tkinter.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Tkinter - the Python wrapper to the Tk graphics library - has been part
of the Python standard library since very early on. However, that
inclusion hasn't translated into extensive use.&lt;/p&gt;
&lt;p&gt;There was a very good reason for this. Tk's documentation was beyond
awful. And if you managed to get over that hurdle, Tkinter apps looked
awful - they had a woefully inadequate set of widgets, styled with the
very best of mid 1990's open source graphic skill.&lt;/p&gt;
&lt;p&gt;And then, the world got obsessed with web frameworks, and the desktop
was declared as dead.&lt;/p&gt;
&lt;p&gt;However, in the last few years, many of the reasons Tkinter was ignored
have been quietly fixed. Tk 8.4 massively improved the visual appearance
of Tk. tkdocs.com has emerged, addressing many of the problems with Tk
documentation.&lt;/p&gt;
&lt;p&gt;In this talk, you'll get a re-introduction to an old friend, and an
explanation of why, in a web and mobile world, you should care.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Russell Keith-Magee</dc:creator><pubDate>Sun, 07 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-07:pycon-au-2013/tinkering-with-tkinter.html</guid></item><item><title>Using Python to drive Australian water availability forecasting</title><link>https://pyvideo.org/pycon-au-2013/using-python-to-drive-australian-water-availabili.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;With Andrew MacDonald and Daehyok Shin&lt;/p&gt;
&lt;p&gt;The Australian Bureau of Meteorology provides water availability
forecasts to the public and to key stakeholders at different time-scales
across the nation. A number of the systems driving these forecasts make
extensive use of Python. Python is used throughout the forecasting
process - from data ingestion and management, to hydrological modelling
and data analysis through to graphical product generation. A wide
variety of packages are used heavily. These include NumPy, SciPy,
Matplotlib, PyTables and Pandas. Such a suite of scientific computing
packages for Python enables us to complete the development of fully
automated systems quickly even with limited resources.&lt;/p&gt;
&lt;p&gt;This presentation will give an overview of the systems used by the
Bureau in the generation of water availability forecasts and highlight
the wide variety of tasks and processes enabled by Python. In
particular, we will introduce the Hydrologic Reference Stations (HRS)
toolkit and the Water Availability Forecasts for Australian Rivers
(WAFARi) system. The HRS toolkit analyses time-series of streamflow data
and produces a huge number of products describing mean state, trends and
variability in that data, which are released at
&lt;a class="reference external" href="http://bom.gov.au/water/hrs"&gt;http://bom.gov.au/water/hrs&lt;/a&gt;. WAFARi is used to generate probabilistic
seasonal streamflow forecasts along with a suite of graphical products
for each of those forecasts. The system is being used to update
streamflow forecasts available at &lt;a class="reference external" href="http://bom/gov.au/water/ssf"&gt;http://bom/gov.au/water/ssf&lt;/a&gt; every
month.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">David Kent</dc:creator><pubDate>Sun, 07 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-07:pycon-au-2013/using-python-to-drive-australian-water-availabili.html</guid></item><item><title>Web testing for Ninjas with Splinter</title><link>https://pyvideo.org/pycon-au-2013/web-testing-for-ninjas-with-splinter.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Everyone knows that Testing is Good. But what about testing your web
applications, javascript and all? Selenium is good but can be verbose
and clunky. Kill off test bloat and make your tests elegant and deadly,
with Splinter.&lt;/p&gt;
&lt;p&gt;Splinter is a DSL for writing web app integration tests. It wraps
Selenium Webdriver or Zope Testdriver, supports Javascript and AJAX,
supports css and xpath selectors and provides a clean, easily read API.&lt;/p&gt;
&lt;p&gt;In this talk we'll look at installing, configuring and using Splinter.
We'll cover common tasks, selectors and executing javascript. Suitable
for those new to selenium and those who are frustrated by it, this talk
aims to get you interested and remove one of the excuses for not testing
more.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dylan Lacey</dc:creator><pubDate>Sun, 07 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-07:pycon-au-2013/web-testing-for-ninjas-with-splinter.html</guid></item><item><title>Building secure web apps: Python vs the OWASP Top 10</title><link>https://pyvideo.org/pycon-au-2013/building-secure-web-apps-python-vs-the-owasp-top.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;The web is a scary place, and building secure web applications is
difficult. Luckily, you've got Python! The Python web community tends to
take security seriously, so most popular Python web frameworks have
defenses available. This talk looks at the list of the top 10 security
vulnerabilities, as ranked by The Open Web Application Security Project
(OWASP). We'll talk about what each attack is, and look at how to defend
against them using three popular Python web frameworks -- Django,
Pyramid, and Flask.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Jacob Kaplan-Moss</dc:creator><pubDate>Sat, 06 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-06:pycon-au-2013/building-secure-web-apps-python-vs-the-owasp-top.html</guid></item><item><title>Computer Science, Software Engineering, and the Scientific Method</title><link>https://pyvideo.org/pycon-au-2013/computer-science-software-engineering-and-the-s.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Classifying what type of job programmers do can be a challenge. Are we
engineers? Are we scientists? Craftspeople? Something else entirely? Are
software engineers, software developers, software architects, and
programmers all really the same thing? This talk explores the nature of
our work, and its relationship to the scientific method, including a
dive into epistemology.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alex Gaynor</dc:creator><pubDate>Sat, 06 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-06:pycon-au-2013/computer-science-software-engineering-and-the-s.html</guid></item><item><title>Conference Opening &amp; Housekeeping</title><link>https://pyvideo.org/pycon-au-2013/conference-opening-housekeeping.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Unknown</dc:creator><pubDate>Sat, 06 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-06:pycon-au-2013/conference-opening-housekeeping.html</guid></item><item><title>Exploring Science on Twitter with IPython Notebook and Python Pandas</title><link>https://pyvideo.org/pycon-au-2013/exploring-science-on-twitter-with-ipython-noteboo.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Starting with 13.5 million tweets from 2011 containing the word science:
How I’ve explored the way people use ‘science’ on Twitter. The IPython
notebook (&lt;a class="reference external" href="http://ipython.org/notebook.html"&gt;http://ipython.org/notebook.html&lt;/a&gt;) is a great tool for
research, allowing me to keep notes about my research interleaved with
the python code. In addition, the Pandas python data analysis library
(&lt;a class="reference external" href="http://pandas.pydata.org/"&gt;http://pandas.pydata.org/&lt;/a&gt;) supports working with large data tables with
excellent support for time series data.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Brenda Moon</dc:creator><pubDate>Sat, 06 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-06:pycon-au-2013/exploring-science-on-twitter-with-ipython-noteboo.html</guid></item><item><title>Learning Parseltongue: Wizardry in Python</title><link>https://pyvideo.org/pycon-au-2013/learning-parseltongue-wizardry-in-python.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;A guide to metaprogramming &amp;amp; magic methods -- we will look at practical
examples from open source software, understand common patterns and learn
to yield such powerful constructs to our advantage, instead of fearing
them.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Gaurav Dadhania</dc:creator><pubDate>Sat, 06 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-06:pycon-au-2013/learning-parseltongue-wizardry-in-python.html</guid></item><item><title>Limiting Execution Time Through Interrupt Driven Programming</title><link>https://pyvideo.org/pycon-au-2013/limiting-execution-time-through-interrupt-driven.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;This talk explores the challenges of ensuring responsiveness of
applications under varying conditions like suddenly increased load, code
regressions and problematic user data that reveal code paths with
unusually high time complexity.&lt;/p&gt;
&lt;p&gt;I'll be looking at interrupt-driven techniques to help bring the 95
percentile of the response times of your application closer to the
(usually much lower) mean.&lt;/p&gt;
&lt;p&gt;In this talk, we'll go beyond traditional tricks like caching, sharding
and data denormalization and instead look at tools that can interrupt
execution of overly expensive code paths, such that you can guarantee an
upper bound in response time.&lt;/p&gt;
&lt;p&gt;Interruptingcow and django-timelimit will be some of the tools that will
be covered in this talk.&lt;/p&gt;
&lt;p&gt;The context for most of this is web applications, and I'll be drawing
many examples from our ongoing experiences with running and scaling
Bitbucket, which is entirely written in Python.&lt;/p&gt;
&lt;p&gt;Having said that though, many of the tools and techniques demonstrates
will apply just as well to other types of applications and situations.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Erik van Zijst</dc:creator><pubDate>Sat, 06 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-06:pycon-au-2013/limiting-execution-time-through-interrupt-driven.html</guid></item><item><title>Modules 101: how to avoid spaghetti, big balls of mud and houses of straw!</title><link>https://pyvideo.org/pycon-au-2013/modules-101-how-to-avoid-spaghetti-big-balls-of.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;This introductory tutorial will teach you how to effectively use modules
and packages so your code is easier to read, test, package, deploy,
reuse and maintain.&lt;/p&gt;
&lt;p&gt;We will cover the basics of structuring your code with modules and
packages, ways of using the import statement, how to document modules
and packages, and a number of tips to ensure your code is less likely to
end up a tangled mess that collapses when you need to modify or extend
it.&lt;/p&gt;
&lt;p&gt;This talk is compatible with Python 2 and 3.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dr. Graeme Cross</dc:creator><pubDate>Sat, 06 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-06:pycon-au-2013/modules-101-how-to-avoid-spaghetti-big-balls-of.html</guid></item><item><title>Nobody Expects the Python Packaging Authority</title><link>https://pyvideo.org/pycon-au-2013/nobody-expects-the-python-packaging-authority.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;These are interesting times for the Python packaging ecosystem, with the
Python Packaging Authority (creators of the popular pip and virtualenv
tools) emerging as the umbrella brand for a suite of related tools that
will bring support for updated packaging standards to both the upcoming
Python 3.4 and to existing versions of Python.&lt;/p&gt;
&lt;p&gt;This talk will cover some of the history of Python's packaging tools and
systems, where we are now, and where we aim to go in the future.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Nick Coghlan</dc:creator><pubDate>Sat, 06 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-06:pycon-au-2013/nobody-expects-the-python-packaging-authority.html</guid></item><item><title>Python 102 - a recap and a bit more.</title><link>https://pyvideo.org/pycon-au-2013/python-102-a-recap-and-a-bit-more.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Self taught in Python? Think you missed a bit? This 90 minutes will fix
everything. From a really quick recap of the bare-bones essentials,
you'll get a good grasp and the core of Python. Want to know more about
classes, objects and more? This is for you. Also suitable for beginners
who need a quick start. * Recap of the essentials * Understanding the
object model * Everything you've ever wanted to know about dictionaries
* Building on types * Creating your own types - Object Oriented
Programming * Important elements from the Standard Library And lots of
time for questions.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Peter Lovett</dc:creator><pubDate>Sat, 06 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-06:pycon-au-2013/python-102-a-recap-and-a-bit-more.html</guid></item><item><title>Pythonic iterators and generators</title><link>https://pyvideo.org/pycon-au-2013/pythonic-iterators-and-generators.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;One of the first things you learn in programming is to apply a series of
instructions to a set of elements.&lt;/p&gt;
&lt;p&gt;Given it's ubiquitous nature and given the culture of python to simplify
such tasks, decades of development and thought has gone into making this
as convenient as possible for all possible use cases. While the
functional ways of iterating like map, reduce and filter exist,
list-comprehensions and the functions in itertools module enable several
pythonic imperative alternatives that cover a gamut of possible use
cases.&lt;/p&gt;
&lt;p&gt;This talk is an interactive exercise using iPython notebook to cover
many of these use cases to enable better iteration including writing of
your own iterators and generators and when you would want to do such a
thing.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lakshman  Prasad</dc:creator><pubDate>Sat, 06 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-06:pycon-au-2013/pythonic-iterators-and-generators.html</guid></item><item><title>Salt: How to be Truly Lazy</title><link>https://pyvideo.org/pycon-au-2013/salt-how-to-be-truly-lazy.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;In the immortal words of that modern day philosopher Homer Jay Simpson:
&amp;quot;Can't Someone Else Do It?&amp;quot;&lt;/p&gt;
&lt;p&gt;If you're too lazy to configure your own servers: let Salt do it for
you. Salt is an open source configuration management tool like Chef or
Puppet but written in Python using ZeroMQ.&lt;/p&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;If you're too lazy to login to your servers to run commands: let Salt
do it for you. Salt is also a remote execution system. A single command
run from the &amp;quot;master&amp;quot; salt server can call tens, hundreds, or&lt;/div&gt;
&lt;div class="line"&gt;thousands of remote servers.&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;And if you're too lazy to install both an OS and Salt itself: let Salt
do it for you. Salt Cloud can spin up new boxes for you in the cloud,
install Salt on them, and introduce them to the &amp;quot;master&amp;quot; salt server.&lt;/p&gt;
&lt;p&gt;Salty vagrants, masters, minions, states, pillars, grains, salt clouds,
parallel execution: I'll attempt to touch on them all in this talk.&lt;/p&gt;
&lt;p&gt;You can also be expected to be &amp;quot;assaulted&amp;quot; with a barrage of terrible
salt themed puns.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Lex Hider</dc:creator><pubDate>Sat, 06 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-06:pycon-au-2013/salt-how-to-be-truly-lazy.html</guid></item><item><title>Saturday Lightning Talks</title><link>https://pyvideo.org/pycon-au-2013/saturday-lightning-talks.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Various speakers</dc:creator><pubDate>Sat, 06 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-06:pycon-au-2013/saturday-lightning-talks.html</guid><category>lightning talks</category></item><item><title>Schemas for the Real World</title><link>https://pyvideo.org/pycon-au-2013/schemas-for-the-real-world.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Social app development challenges us to code for users’ personal world.
Users are giving push-back to ill-fitted assumptions about their own
identity — name, gender, sexual orientation, important relationships,
and many other attributes that are individually meaningful.&lt;/p&gt;
&lt;p&gt;How can we balance users’ realities with an app’s business requirements?&lt;/p&gt;
&lt;p&gt;Facebook, Google+, and others are struggling with these questions.
Resilient approaches arise from an app’s own foundation. Discover how
our earliest choices influence codebase, UX, and development itself.
Learn how we can use that knowledge to both inspire the people who use
our apps, and to generate the data that need as developers.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Carina C. Zona</dc:creator><pubDate>Sat, 06 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-06:pycon-au-2013/schemas-for-the-real-world.html</guid></item><item><title>scikit-learn, machine learning and cybercrime attribution</title><link>https://pyvideo.org/pycon-au-2013/scikit-learn-machine-learning-and-cybercrime-att.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;The scikit-learn library is a rapidly growing open source toolkit for
machine learning in python. It allows for practitioners and researchers
to apply machine learning in a variety of applications and is used by
companies worldwide. Developed by programmers from around the world, the
project has a large (and increasing) number of machine learning
algorithms, a very useful set of utility functions and has also spawned
a set of detailed tutorials. Written in python with the aid of numpy,
scipy and cython, this library is featured, fast and extensible.&lt;/p&gt;
&lt;p&gt;In this talk, I will introduce scikit-learn, giving an overview of the
library, its features and how to use it for a number of different
applications. Next talk about some of the tutorials that are actively
being developed for learning machine learning and scikit-learn and also
how to contribute. Through this, I'll introduce some key machine
learning concepts and how you can apply them to a variety of tasks. The
focus will be on practical uses, rather than theoretical advances.&lt;/p&gt;
&lt;p&gt;To end the presentation, I'll briefly overview the research I perform at
the Internet Commerce Security Laboratory (University of Ballarat) in
cybercrime attribution, where I work with our industry partners to
disrupt cybercrime. While it can be very difficult to do direct network
based attribution, indirect methods through criminal profiling may
assist in stopping crimes such as phishing or online fraud. I'll walk
through some of our results in identifying the size and scope of the
operations behind some of these attacks.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Robert Layton</dc:creator><pubDate>Sat, 06 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-06:pycon-au-2013/scikit-learn-machine-learning-and-cybercrime-att.html</guid></item><item><title>Software Carpentry arrives Down Under!</title><link>https://pyvideo.org/pycon-au-2013/software-carpentry-arrives-down-under.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Scientists are required to do more and more programming these days,
however they are almost always self-taught. They spend a large
percentage of their time wrestling with software, reinvent a lot of
wheels, and still don’t know if their results are reliable. For
proficient software developers, particularly those employed to assist
these scientists, this computational illiteracy is easy to identify, but
much harder to remedy. What do you teach a scientist, given their time
constraints, background knowledge and work requirements? This
presentation will give an answer to that question, by describing what
gets taught at a Software Carpentry boot camp.&lt;/p&gt;
&lt;p&gt;Software Carpentry is a volunteer organisation that has been teaching
basic software development to scientists for over a decade. Supported by
the Sloan Foundation and Mozilla, Software Carpentry has refined its
teaching methods over time and has recently settled on a model centred
around the delivery of intensive short courses known as “boot camps”.
Institutions such as Oxford University, MIT, University of California
Berkeley and the International Centre for Theoretical Physics have all
hosted boot camps in the past 12 months.&lt;/p&gt;
&lt;p&gt;Dr. Greg Wilson, the founder of Software Carpentry, flew out to
Australia in February 2013 to host a series of two day boot camps with
the Genes to Geoscience Research Centre in Sydney and the Australian
Meteorological and Oceanographic Society (AMOS) and ARC Centre for
Excellence in Climate System Science in Melbourne. These two events were
the first ever boot camps held outside of North America and Europe, were
booked out in a matter of days, and received rave reviews from
participants. Given this success, there are already plans afoot to host
a pair of boot camps for the bioinformatics community in Brisbane and
Adelaide later this year, plus another for the weather/climate community
in Hobart.&lt;/p&gt;
&lt;p&gt;This presentation will describe what gets taught at a Software Carpentry
boot camp (hint: there's lots of Python), how it's taught and why it's
so effective (hint: we take an evidence-based approach to teaching). All
Software Carpentry teaching materials can be freely re-used under open
access licenses, so at the conclusion of the talk you can take anything
you've learned and apply it to your own work and/or teaching. Better
still, you'll find out how to join the Australian Software Carpentry
team, so that you can organise and/or teach a boot camp for your own
discipline.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Damien Irving</dc:creator><pubDate>Sat, 06 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-06:pycon-au-2013/software-carpentry-arrives-down-under.html</guid></item><item><title>Testing: Choose Your Weapons</title><link>https://pyvideo.org/pycon-au-2013/testing-choose-your-weapons.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;A good suite of tests is a programmer's best friend. But a poorly
designed testing strategy can result in tests that are unwieldy,
fragile, and above all no fun to write or maintain.&lt;/p&gt;
&lt;p&gt;This talk will offer a smorgasbord of testing ideas, ranging from simple
tips and tricks to fully-fledged testing frameworks for Python. We will
touch on automation, table-based testing, round-trip testing, UI
testing, property checking, testing Twisted Python applications, and
more. Be prepared to think outside the box, as we will see that testing
is an area where creativity and pragmatism pay off better than following
a rigid set of rules.&lt;/p&gt;
&lt;p&gt;Everyone should come away with a few new ideas, and renewed enthusiasm
for test-driven development!&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Todd Owen</dc:creator><pubDate>Sat, 06 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-06:pycon-au-2013/testing-choose-your-weapons.html</guid></item><item><title>Testing for Graceful Failure with Vaurien and Marteau</title><link>https://pyvideo.org/pycon-au-2013/testing-for-graceful-failure-with-vaurien-and-mar.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;So you've built an awesome webapp, put it through its paces, and assured
yourself that it does what it's supposed to do. Great! Now how does it
behave when things start to go wrong?&lt;/p&gt;
&lt;p&gt;This talk will demonstrate how the Mozilla Services team tests for
failure scenarios in our web services, focusing on two key python-based
tools: Marteau, a web-based frontend for easily running load-tests and
analyzing the results, and Vaurien, a misbehaving TCP proxy that can
simulate a variety of backend failure modes.&lt;/p&gt;
&lt;p&gt;Used together, these tools can help ensure that a web service will not
only scale up to meet its expected demand, but will fail gracefully when
it finally reaches breaking point.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ryan Kelly</dc:creator><pubDate>Sat, 06 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-06:pycon-au-2013/testing-for-graceful-failure-with-vaurien-and-mar.html</guid></item><item><title>The life of a web request - techniques for measuring and improving Django application performance</title><link>https://pyvideo.org/pycon-au-2013/the-life-of-a-web-request-techniques-for-measur.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;The connection between sub-second web application performance and
revenue is becoming more and more apparent with established companies
regularly reporting the benefits of reducing page load times.&lt;/p&gt;
&lt;p&gt;This talk will cover: * Designing for performance * Approaches to
instrumenting and measuring application performance * Areas of focus
for both front-end and back-end improvement * Techniques, tools and
modules available in Django-land for improving performance * New and
emerging technologies, for example SPDY protocol and Django 1.5's
StreamingHttpResponse&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Roger Barnes</dc:creator><pubDate>Sat, 06 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-06:pycon-au-2013/the-life-of-a-web-request-techniques-for-measur.html</guid></item><item><title>Transitioning from PHP to Django on the sly</title><link>https://pyvideo.org/pycon-au-2013/transitioning-from-php-to-django-on-the-sly.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;You know that Python and Django is the way forward for your client, but
with a mountain of legacy PHP code, where do you start?&lt;/p&gt;
&lt;p&gt;Ben spent the last 3 years working with a thriving charity organisation
to migrate their large PHP system to Django. He'd like to share some
survival strategies.&lt;/p&gt;
&lt;p&gt;This talk covers:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;explaining the transition to your client&lt;/li&gt;
&lt;li&gt;first steps and initial experiments&lt;/li&gt;
&lt;li&gt;running PHP and Django in parallel&lt;/li&gt;
&lt;li&gt;why incremental migration beats the &amp;quot;big switch&amp;quot;&lt;/li&gt;
&lt;li&gt;sharing databases and authentication&lt;/li&gt;
&lt;li&gt;making the experience seamless for visitors and staff&lt;/li&gt;
&lt;li&gt;strategies for converting the code&lt;/li&gt;
&lt;/ul&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ben Sturmfels</dc:creator><pubDate>Sat, 06 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-06:pycon-au-2013/transitioning-from-php-to-django-on-the-sly.html</guid></item><item><title>Using Cython for distributed-multiprocess steganographic md5sum-collision generation</title><link>https://pyvideo.org/pycon-au-2013/using-cython-for-distributed-multiprocess-stegano.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Cython is brilliant, it looks like Python but compiles to native C. It
can be used as a simple way of writing lightning-fast C extensions for
Python, or for a simple means of hooking into already-existing C
libraries. If you are writing CPU intensive applications, like, say,
hypothetically, cracking one-way cryptographic functions, Cython is a
perfect mixture of simple expressiveness while making sure the 'inner
loop' of your code is running as close to the bare metal as possible.&lt;/p&gt;
&lt;p&gt;And that's all this talk will be about, honest.&lt;/p&gt;
&lt;p&gt;Why are you looking at me like that?&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Tom Eastman</dc:creator><pubDate>Sat, 06 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-06:pycon-au-2013/using-cython-for-distributed-multiprocess-stegano.html</guid></item><item><title>Using Python to design, configure, and measure large-scale networks</title><link>https://pyvideo.org/pycon-au-2013/using-python-to-design-configure-and-measure-la.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;AutoNetkit is an open-source project to automatically build network
configuration files for routers including Quagga, Cisco and Juniper,
with complicated protocol configurations, all from a simple input graph
--- which could even be drawn in a program such as yEd.&lt;/p&gt;
&lt;p&gt;AutoNetkit was started at the University of Adelaide, and developed
further at Cisco, with collaborators from both research and industry. It
is being used at major router vendors, by network operators, and in
university teaching, and in research publications including experiments
with over 800 virtual routers --- nearly impossible to configure by
hand.&lt;/p&gt;
&lt;p&gt;This is all powered by Python, and we make significant use of the
excellent packages available.&lt;/p&gt;
&lt;p&gt;This talk will present a brief overview of what the AutoNetkit project
is about and why we chose Python.&lt;/p&gt;
&lt;p&gt;I will give an over view of our data model, and how methods such as
&lt;strong&gt;lt&lt;/strong&gt; &lt;strong&gt;eq&lt;/strong&gt; &lt;strong&gt;contains&lt;/strong&gt; &lt;strong&gt;getattr&lt;/strong&gt; &lt;strong&gt;setattr&lt;/strong&gt; and &lt;strong&gt;iter&lt;/strong&gt; allow
elegant yet expressive network design, such as using list
comprehensions.&lt;/p&gt;
&lt;p&gt;I will cover how we use the various modules, including: - NetworkX
graphs - Netaddr IP addressing - Mako Templates - Exscript for scripting
deployment - TextFSM parsing of measurement - Tornado to serve a
browser-based d3.js visualisation framework - Using IPython notebooks
for interactive tutorials&lt;/p&gt;
&lt;p&gt;We've spent quite a bit of time with Python on this project. This talk
will pass on the our favourite Python language features and package
we've found along the way. It will be both a case study in using Python
for a large-scale project, and an overview of useful packages.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Simon Knight</dc:creator><pubDate>Sat, 06 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-06:pycon-au-2013/using-python-to-design-configure-and-measure-la.html</guid></item><item><title>Why I use py.test and maybe you should too</title><link>https://pyvideo.org/pycon-au-2013/why-i-use-pytest-and-maybe-you-should-too.html</link><description>&lt;h3&gt;Summary&lt;/h3&gt;&lt;p&gt;Have you tried unit testing? Always meant to add tests to your project
but didn't know where to start? This presentation will provide a gentle
introduction to unit testing your module, package or entire project.&lt;/p&gt;
&lt;p&gt;The standard library comes with the unit test module but a great
alternative is py.test. Py.test makes starting to test your project as
easy as possible. When you need them it has a full set of tools and
testing capabilities.&lt;/p&gt;
&lt;p&gt;This presentation will provide an overview of unit testing and then show
how easy it is to get started using py.test.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Andy Todd</dc:creator><pubDate>Sat, 06 Jul 2013 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2013-07-06:pycon-au-2013/why-i-use-pytest-and-maybe-you-should-too.html</guid></item></channel></rss>