<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org - PyCascades 2024</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/event_pycascades-2024.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2024-04-07T00:00:00+00:00</updated><subtitle></subtitle><entry><title>Building GraphQL microservices using FastAPI</title><link href="https://pyvideo.org/pycascades-2024/building-graphql-microservices-using-fastapi.html" rel="alternate"></link><published>2024-04-07T00:00:00+00:00</published><updated>2024-04-07T00:00:00+00:00</updated><author><name>Aby M Joseph</name></author><id>tag:pyvideo.org,2024-04-07:/pycascades-2024/building-graphql-microservices-using-fastapi.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;FastAPI is a Python web framework built on top of the ASGI standard. The fusion of GraphQL and FastAPI emerges as a pivotal approach for constructing agile and scalable microservices. This talk delves into the symbiotic relationship between GraphQL's query flexibility and FastAPI's high-performance capabilities. Attendees will gain insights …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;FastAPI is a Python web framework built on top of the ASGI standard. The fusion of GraphQL and FastAPI emerges as a pivotal approach for constructing agile and scalable microservices. This talk delves into the symbiotic relationship between GraphQL's query flexibility and FastAPI's high-performance capabilities. Attendees will gain insights into seamless integration techniques, leveraging FastAPI's asynchronous framework, dependency injection, and GraphQL's expressive querying.&lt;/p&gt;
</content><category term="PyCascades 2024"></category></entry><entry><title>Containerizing Python: Crafting Better and Efficient Containers</title><link href="https://pyvideo.org/pycascades-2024/containerizing-python-crafting-better-and-efficient-containers.html" rel="alternate"></link><published>2024-04-07T00:00:00+00:00</published><updated>2024-04-07T00:00:00+00:00</updated><author><name>Avik Basu</name></author><id>tag:pyvideo.org,2024-04-07:/pycascades-2024/containerizing-python-crafting-better-and-efficient-containers.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Containerization, particularly with tools like Docker, has become a cornerstone in deploying applications efficiently. Building a Docker image for Python applications is generally uncomplicated, yet optimizing these images requires extra work. Notably, many of these optimizations are uniquely tailored to Python.&lt;/p&gt;
&lt;p&gt;This talk focuses on techniques and best practices …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Containerization, particularly with tools like Docker, has become a cornerstone in deploying applications efficiently. Building a Docker image for Python applications is generally uncomplicated, yet optimizing these images requires extra work. Notably, many of these optimizations are uniquely tailored to Python.&lt;/p&gt;
&lt;p&gt;This talk focuses on techniques and best practices to build more efficient Docker images for Python in order to generate reproducible and quicker builds while reducing the image sizes at the same time.&lt;/p&gt;
</content><category term="PyCascades 2024"></category></entry><entry><title>Cutting the USB cord: wirelessly programming CircuitPython</title><link href="https://pyvideo.org/pycascades-2024/cutting-the-usb-cord-wirelessly-programming-circuitpython.html" rel="alternate"></link><published>2024-04-07T00:00:00+00:00</published><updated>2024-04-07T00:00:00+00:00</updated><author><name>Scott Shawcroft</name></author><id>tag:pyvideo.org,2024-04-07:/pycascades-2024/cutting-the-usb-cord-wirelessly-programming-circuitpython.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Come learn how to program CircuitPython wirelessly over Bluetooth and WiFi. CircuitPython is a version of Python designed for small computers used in electronics projects called microcontrollers. Bluetooth is great for connecting devices to a phone or tablet on the go. At home, WiFi simplifies connecting to a multitude …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Come learn how to program CircuitPython wirelessly over Bluetooth and WiFi. CircuitPython is a version of Python designed for small computers used in electronics projects called microcontrollers. Bluetooth is great for connecting devices to a phone or tablet on the go. At home, WiFi simplifies connecting to a multitude of devices without needing to plug into them directly. Both are also great for devices that are hard to access.&lt;/p&gt;
</content><category term="PyCascades 2024"></category></entry><entry><title>Designing a Human-Friendly CLI for API-Driven Infrastructure</title><link href="https://pyvideo.org/pycascades-2024/designing-a-human-friendly-cli-for-api-driven-infrastructure.html" rel="alternate"></link><published>2024-04-07T00:00:00+00:00</published><updated>2024-04-07T00:00:00+00:00</updated><author><name>Oliver Rew</name></author><id>tag:pyvideo.org,2024-04-07:/pycascades-2024/designing-a-human-friendly-cli-for-api-driven-infrastructure.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;As Bloomberg’s infrastructure grows and evolves, the tools we use to manage it are becoming increasingly important. To streamline infrastructure management, our team set out to design a REST API and constituent CLI (Command Line Interface) that would comprise a single interface for both programmatic and human interaction …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;As Bloomberg’s infrastructure grows and evolves, the tools we use to manage it are becoming increasingly important. To streamline infrastructure management, our team set out to design a REST API and constituent CLI (Command Line Interface) that would comprise a single interface for both programmatic and human interaction with our infrastructure. Traditionally, building a CLI that is tightly coupled to an API requires maintaining a separate codebase, which is tedious and error-prone. Instead, we designed a CLI that dynamically generates commands based on the OpenAPI JSON documentation. However, since APIs are designed for computer interaction, we designed our API to include the information needed to implement a human-friendly CLI. Leveraging Python, FastAPI, and numerous other open source projects, we built a stable, extensible tool that greatly improves how we interact with our infrastructure.&lt;/p&gt;
</content><category term="PyCascades 2024"></category></entry><entry><title>Lightning Talks</title><link href="https://pyvideo.org/pycascades-2024/lightning-talks.html" rel="alternate"></link><published>2024-04-07T00:00:00+00:00</published><updated>2024-04-07T00:00:00+00:00</updated><author><name>Unknown</name></author><id>tag:pyvideo.org,2024-04-07:/pycascades-2024/lightning-talks.html</id><content type="html"></content><category term="PyCascades 2024"></category></entry><entry><title>Notably Inaccessible -- Data Driven Understanding of Jupyter Notebook Inaccessibility</title><link href="https://pyvideo.org/pycascades-2024/notably-inaccessible-data-driven-understanding-of-jupyter-notebook-inaccessibility.html" rel="alternate"></link><published>2024-04-07T00:00:00+00:00</published><updated>2024-04-07T00:00:00+00:00</updated><author><name>Venkatesh P</name></author><id>tag:pyvideo.org,2024-04-07:/pycascades-2024/notably-inaccessible-data-driven-understanding-of-jupyter-notebook-inaccessibility.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Speaker: Venkatesh Potluri&lt;/p&gt;
&lt;p&gt;Jupyter notebooks are versatile tools that open up rich storytelling possibilities by providing the means to interleave code, data and text together. Notebooks are widely adopted in a variety of expert domains such as data science, machine learning, and astronomy making the ability to create and …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Speaker: Venkatesh Potluri&lt;/p&gt;
&lt;p&gt;Jupyter notebooks are versatile tools that open up rich storytelling possibilities by providing the means to interleave code, data and text together. Notebooks are widely adopted in a variety of expert domains such as data science, machine learning, and astronomy making the ability to create and consume them a critical requirement to participate in these professional domains. Notebooks and notebook software (tools and infrastructure to create and share notebooks) however are inaccessible resulting in barriers preventing blind or visually impaired (BVI) experts from participating in these professions.&lt;/p&gt;
&lt;p&gt;In this talk, I will draw from our systematic large scale analysis on 100000 Jupyter notebooks and provide a broad understanding of why these notebooks are inaccessible, and exactly how inaccessible these notebooks really are. I will close with recommendations to infrastructures that drive the notebook pipeline and authoring practices to create and share truly accessible notebooks. It is imperative that we contribute to accessible notebook artifacts and software to make high-skilled work accessible!&lt;/p&gt;
</content><category term="PyCascades 2024"></category></entry><entry><title>PyLadies Panel: Talking about experiences and roles within the Python community</title><link href="https://pyvideo.org/pycascades-2024/pyladies-panel-talking-about-experiences-and-roles-within-the-python-community.html" rel="alternate"></link><published>2024-04-07T00:00:00+00:00</published><updated>2024-04-07T00:00:00+00:00</updated><author><name>Lynn Root</name></author><id>tag:pyvideo.org,2024-04-07:/pycascades-2024/pyladies-panel-talking-about-experiences-and-roles-within-the-python-community.html</id><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Panelists: Christy Heaton, Mariatta, Lynn Root, Luciana Abud&lt;/p&gt;
</content><category term="PyCascades 2024"></category></entry><entry><title>Rest Easy with Jupyrest: Deploy notebooks as web services</title><link href="https://pyvideo.org/pycascades-2024/rest-easy-with-jupyrest-deploy-notebooks-as-web-services.html" rel="alternate"></link><published>2024-04-07T00:00:00+00:00</published><updated>2024-04-07T00:00:00+00:00</updated><author><name>Koushik Krishnan</name></author><id>tag:pyvideo.org,2024-04-07:/pycascades-2024/rest-easy-with-jupyrest-deploy-notebooks-as-web-services.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Jupyter notebooks are awesome! However, a notebook on its own is not a product or a service. Bridging this gap usually involves a complete rewrite into a web service that leaves behind all the awesome-ness of the notebook. What if we didn't have to do this? That's where Jupyrest …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Jupyter notebooks are awesome! However, a notebook on its own is not a product or a service. Bridging this gap usually involves a complete rewrite into a web service that leaves behind all the awesome-ness of the notebook. What if we didn't have to do this? That's where Jupyrest comes in! Jupyrest is a library I created to solve this exact problem for my team at Microsoft. In this talk I'll show you how you can turn your Jupyter notebooks into a web service without any modifications to it. Jupyrest is being used at Microsoft by data scientists to deploy hundreds of microservices.&lt;/p&gt;
</content><category term="PyCascades 2024"></category></entry><entry><title>Testing your web app with Playwright</title><link href="https://pyvideo.org/pycascades-2024/testing-your-web-app-with-playwright.html" rel="alternate"></link><published>2024-04-07T00:00:00+00:00</published><updated>2024-04-07T00:00:00+00:00</updated><author><name>Sheena O'Connell</name></author><id>tag:pyvideo.org,2024-04-07:/pycascades-2024/testing-your-web-app-with-playwright.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Once upon a time, if you wanted a truly modern web frontend experience for your Python web app you would have limited options in how to pull it off. A lot of people would reach for heavy frontend tools and frameworks such as React, Vue or one of their …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Once upon a time, if you wanted a truly modern web frontend experience for your Python web app you would have limited options in how to pull it off. A lot of people would reach for heavy frontend tools and frameworks such as React, Vue or one of their many, many competitors. And those tools generally have their recommendations around testing.&lt;/p&gt;
&lt;p&gt;Things are shifting a bit - tools like HTMX and AlpineJS are taking Python Web dev by storm and simplifying the creation of modern frontends. A Python web app can now take on the full responsibility of producing a modern frontend. So it would be good to test them in Python as well.&lt;/p&gt;
&lt;p&gt;This is where Playwright comes in. It promises to enable reliable end-to-end testing for modern web apps. And it has Python bindings. &lt;em&gt;swoon&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;In this talk, I'll give you a little tour of Playwright and how to use it in your app. I'll demo some workflows, patterns, tips, and tricks.&lt;/p&gt;
</content><category term="PyCascades 2024"></category></entry><entry><title>The Rising Sea</title><link href="https://pyvideo.org/pycascades-2024/the-rising-sea.html" rel="alternate"></link><published>2024-04-07T00:00:00+00:00</published><updated>2024-04-07T00:00:00+00:00</updated><author><name>Matthew Drury</name></author><id>tag:pyvideo.org,2024-04-07:/pycascades-2024/the-rising-sea.html</id><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;We discuss the pleasure of problem solving by dissolution.&lt;/p&gt;
</content><category term="PyCascades 2024"></category></entry><entry><title>Embracing MLOps: Bridging the Gap Between Machine Learning and DevOps</title><link href="https://pyvideo.org/pycascades-2024/embracing-mlops-bridging-the-gap-between-machine-learning-and-devops.html" rel="alternate"></link><published>2024-04-06T00:00:00+00:00</published><updated>2024-04-06T00:00:00+00:00</updated><author><name>Mayank Jindal</name></author><id>tag:pyvideo.org,2024-04-06:/pycascades-2024/embracing-mlops-bridging-the-gap-between-machine-learning-and-devops.html</id><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In the dynamic field of machine learning, MLOps (Machine Learning Operations) has emerged as a crucial discipline combining aspects of machine learning, data science and operations. This talk aims to demystify MLOps differentiating it from traditional DevOps practices and highlighting its growing importance.&lt;/p&gt;
</content><category term="PyCascades 2024"></category></entry><entry><title>I declare an environment! - Reproducibility with and without Docker</title><link href="https://pyvideo.org/pycascades-2024/i-declare-an-environment-reproducibility-with-and-without-docker.html" rel="alternate"></link><published>2024-04-06T00:00:00+00:00</published><updated>2024-04-06T00:00:00+00:00</updated><author><name>Sarah Kaiser</name></author><id>tag:pyvideo.org,2024-04-06:/pycascades-2024/i-declare-an-environment-reproducibility-with-and-without-docker.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A software project being called &amp;quot;reproducible&amp;quot; can mean a lot of things, but usually includes a description of how and where the code in your project can be run. Often this means including Python virtual environment, a Conda environment, or even a Docker container to help others replicate your …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A software project being called &amp;quot;reproducible&amp;quot; can mean a lot of things, but usually includes a description of how and where the code in your project can be run. Often this means including Python virtual environment, a Conda environment, or even a Docker container to help others replicate your work. In this talk I will introduce some of the most common ways the scientific Python community approaches reproducibility, and what are the advantages and disadvantages of the approaches. I will also share a new way that you can make not only your Python code but your development machine reproducible without Docker containers with a tool called Nix. I will also show an example of using a Nix defined operating system (NixOS) with Docker containers to run my home lab.&lt;/p&gt;
</content><category term="PyCascades 2024"></category></entry><entry><title>Intro to Introspection</title><link href="https://pyvideo.org/pycascades-2024/intro-to-introspection.html" rel="alternate"></link><published>2024-04-06T00:00:00+00:00</published><updated>2024-04-06T00:00:00+00:00</updated><author><name>Jeremiah Paige</name></author><id>tag:pyvideo.org,2024-04-06:/pycascades-2024/intro-to-introspection.html</id><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python holds no secrets about your code; except perhaps how to access that information. in this talk you'll find out how to discover almost any information about running python code.&lt;/p&gt;
</content><category term="PyCascades 2024"></category></entry><entry><title>Kandinsky: Using KMeans (and friends) to play with the colors of photograph(s)</title><link href="https://pyvideo.org/pycascades-2024/kandinsky-using-kmeans-and-friends-to-play-with-the-colors-of-photographs.html" rel="alternate"></link><published>2024-04-06T00:00:00+00:00</published><updated>2024-04-06T00:00:00+00:00</updated><author><name>Shaurya Agarwal</name></author><id>tag:pyvideo.org,2024-04-06:/pycascades-2024/kandinsky-using-kmeans-and-friends-to-play-with-the-colors-of-photographs.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Clustering is tricky yet absolutely essential for many a Machine Learning initiative. The what, the how and the why confound each time we look at the data, whether it is customer segmentation (or cohort) analysis or it is finding centers of influence or breaking down a population into groups …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Clustering is tricky yet absolutely essential for many a Machine Learning initiative. The what, the how and the why confound each time we look at the data, whether it is customer segmentation (or cohort) analysis or it is finding centers of influence or breaking down a population into groups to build different models for each.&lt;/p&gt;
&lt;p&gt;Studying clustering algorithms like KMeans using toy datasets is insufficient (and often tedious) because it does not let you experience real-world problems. For e.g. the problem when the centroids don't settle, or situations where we have too many or too few clusters. Which distance measure to use and when? How to prepare (normalize? standardize?) the dataset for clustering?&lt;/p&gt;
&lt;p&gt;Also, not too many real-world scenarios are &amp;quot;visual&amp;quot;, unless we plot a graph or two, and that fails when we deal with higher dimensions.&lt;/p&gt;
&lt;p&gt;What if we could use a non-trivial but visual data source? Like the colors and pixels of a photograph, where we could see the data that went in and the resultant output clusters?&lt;/p&gt;
&lt;p&gt;The obvious &lt;strong&gt;takeaways of this talk&lt;/strong&gt;, in my experience, are that &lt;em&gt;Data Science and Data Engineering practitioners&lt;/em&gt; gain a deeper understanding of what's going on in the clustering algorithms in a fun, very &amp;quot;visual&amp;quot; and engaging manner; and also build a better intuition about the best approach to take for solving a problem.&lt;/p&gt;
</content><category term="PyCascades 2024"></category></entry><entry><title>Next Level Python Applications with PyScript</title><link href="https://pyvideo.org/pycascades-2024/next-level-python-applications-with-pyscript.html" rel="alternate"></link><published>2024-04-06T00:00:00+00:00</published><updated>2024-04-06T00:00:00+00:00</updated><author><name>Fabio Pliger</name></author><id>tag:pyvideo.org,2024-04-06:/pycascades-2024/next-level-python-applications-with-pyscript.html</id><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Zero Installation, massive scalability, mobile support and more. This talk is going to cover the super powers of running Python in the Browser and how to best use PyScript.&lt;/p&gt;
</content><category term="PyCascades 2024"></category></entry><entry><title>Oh the (Methods) You Can (Make): By Dunder Seuss</title><link href="https://pyvideo.org/pycascades-2024/oh-the-methods-you-can-make-by-dunder-seuss.html" rel="alternate"></link><published>2024-04-06T00:00:00+00:00</published><updated>2024-04-06T00:00:00+00:00</updated><author><name>Joshua Cannon</name></author><id>tag:pyvideo.org,2024-04-06:/pycascades-2024/oh-the-methods-you-can-make-by-dunder-seuss.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;You can make many methods&lt;/p&gt;
&lt;p&gt;Over 100 to be exact&lt;/p&gt;
&lt;p&gt;That start with two underscores&lt;/p&gt;
&lt;p&gt;What do you think of that?&lt;/p&gt;
&lt;p&gt;The runtime, it calls these&lt;/p&gt;
&lt;p&gt;At points A or B&lt;/p&gt;
&lt;p&gt;To do special magic&lt;/p&gt;
&lt;p&gt;At runtime, you see.&lt;/p&gt;
&lt;p&gt;You may have seen &lt;cite&gt;__getattr__&lt;/cite&gt; or &lt;cite&gt;__init__&lt;/cite&gt;&lt;/p&gt;
&lt;p&gt;But &lt;cite&gt;__rfloordiv__&lt;/cite&gt;? What …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;You can make many methods&lt;/p&gt;
&lt;p&gt;Over 100 to be exact&lt;/p&gt;
&lt;p&gt;That start with two underscores&lt;/p&gt;
&lt;p&gt;What do you think of that?&lt;/p&gt;
&lt;p&gt;The runtime, it calls these&lt;/p&gt;
&lt;p&gt;At points A or B&lt;/p&gt;
&lt;p&gt;To do special magic&lt;/p&gt;
&lt;p&gt;At runtime, you see.&lt;/p&gt;
&lt;p&gt;You may have seen &lt;cite&gt;__getattr__&lt;/cite&gt; or &lt;cite&gt;__init__&lt;/cite&gt;&lt;/p&gt;
&lt;p&gt;But &lt;cite&gt;__rfloordiv__&lt;/cite&gt;? What’s the point of it?&lt;/p&gt;
</content><category term="PyCascades 2024"></category></entry><entry><title>Pythonic Play: Crafting Interactive Worlds with Python in Game Development</title><link href="https://pyvideo.org/pycascades-2024/pythonic-play-crafting-interactive-worlds-with-python-in-game-development.html" rel="alternate"></link><published>2024-04-06T00:00:00+00:00</published><updated>2024-04-06T00:00:00+00:00</updated><author><name>Drishti Jain</name></author><id>tag:pyvideo.org,2024-04-06:/pycascades-2024/pythonic-play-crafting-interactive-worlds-with-python-in-game-development.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Embark on a thrilling journey into the realm of game development where the elegance of Python meets the excitement of interactive experiences! In this talk, I will unravel the captivating world of Python game development, exploring the tools, techniques, and creative possibilities that make Python a formidable language for …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Embark on a thrilling journey into the realm of game development where the elegance of Python meets the excitement of interactive experiences! In this talk, I will unravel the captivating world of Python game development, exploring the tools, techniques, and creative possibilities that make Python a formidable language for crafting immersive games.&lt;/p&gt;
</content><category term="PyCascades 2024"></category></entry><entry><title>The Best Language to Write Python In Is Rust</title><link href="https://pyvideo.org/pycascades-2024/the-best-language-to-write-python-in-is-rust.html" rel="alternate"></link><published>2024-04-06T00:00:00+00:00</published><updated>2024-04-06T00:00:00+00:00</updated><author><name>Trent H</name></author><id>tag:pyvideo.org,2024-04-06:/pycascades-2024/the-best-language-to-write-python-in-is-rust.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python is an excellent language, in part because of how accessible it is. This accessibility means that professionals in finance, science, marketing, etc, often can make use of it for their goals. This also means that for programmers who write tools for these users, Rust can make an excellent …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python is an excellent language, in part because of how accessible it is. This accessibility means that professionals in finance, science, marketing, etc, often can make use of it for their goals. This also means that for programmers who write tools for these users, Rust can make an excellent language to deliver a fast, stable experience. In this talk we'll discuss more about why you might consider augmenting your Python code with Rust and walk through a case study for how to achieve it.&lt;/p&gt;
</content><category term="PyCascades 2024"></category></entry><entry><title>The Stories Of the Most Infamous Bugs</title><link href="https://pyvideo.org/pycascades-2024/the-stories-of-the-most-infamous-bugs.html" rel="alternate"></link><published>2024-04-06T00:00:00+00:00</published><updated>2024-04-06T00:00:00+00:00</updated><author><name>Ian Zelikman</name></author><id>tag:pyvideo.org,2024-04-06:/pycascades-2024/the-stories-of-the-most-infamous-bugs.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Whenever we write code we eventually make mistakes and have “bugs”. We employ many techniques including testing and reviews to avoid them but some mistakes still make it into production. But what are the most famous &amp;quot;bugs&amp;quot;? How they happened and is there something common we can learn from …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Whenever we write code we eventually make mistakes and have “bugs”. We employ many techniques including testing and reviews to avoid them but some mistakes still make it into production. But what are the most famous &amp;quot;bugs&amp;quot;? How they happened and is there something common we can learn from them?&lt;/p&gt;
</content><category term="PyCascades 2024"></category></entry><entry><title>Types, In My Python?!</title><link href="https://pyvideo.org/pycascades-2024/types-in-my-python.html" rel="alternate"></link><published>2024-04-06T00:00:00+00:00</published><updated>2024-04-06T00:00:00+00:00</updated><author><name>Piper Thunstrom</name></author><id>tag:pyvideo.org,2024-04-06:/pycascades-2024/types-in-my-python.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;It's more likely than you think!&lt;/p&gt;
&lt;p&gt;Types, In My Python? is an analysis of Python's unique relationship to typing systems.&lt;/p&gt;
&lt;p&gt;I will start by examining Python's strange dual nature:&lt;/p&gt;
&lt;p&gt;A dynamically typed scripting language that more or less works as expected.&lt;/p&gt;
&lt;p&gt;A strongly typed language with strict limits on …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;It's more likely than you think!&lt;/p&gt;
&lt;p&gt;Types, In My Python? is an analysis of Python's unique relationship to typing systems.&lt;/p&gt;
&lt;p&gt;I will start by examining Python's strange dual nature:&lt;/p&gt;
&lt;p&gt;A dynamically typed scripting language that more or less works as expected.&lt;/p&gt;
&lt;p&gt;A strongly typed language with strict limits on what you can do with an object,&lt;/p&gt;
&lt;p&gt;and now able to statically analyze your usages to make sure you're doing things right.&lt;/p&gt;
&lt;p&gt;Following that, I will examine some of the concepts we talk about as a community in more detail.&lt;/p&gt;
&lt;p&gt;What do we mean by &amp;quot;duck typing&amp;quot;, and how does it apply in light of Python's dual nature?&lt;/p&gt;
&lt;p&gt;Why is it static analysis, and not static typing?&lt;/p&gt;
&lt;p&gt;To end, I will make a proposal regarding the best method to use both sides of Python's type system.&lt;/p&gt;
&lt;p&gt;The goal is to accelerate your development and reduce tedium.&lt;/p&gt;
&lt;p&gt;Is there a happy middle ground between strict static typing and a dynamic free-for-all?&lt;/p&gt;
</content><category term="PyCascades 2024"></category></entry></feed>