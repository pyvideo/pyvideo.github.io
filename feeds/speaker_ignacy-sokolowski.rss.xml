<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org - Ignacy Sokołowski</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Sat, 15 Oct 2016 00:00:00 +0000</lastBuildDate><item><title>SOLID Python</title><link>https://pyvideo.org/pycon-pl-2015/solid-python.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;SOLID is an acronym for five basic principles of Object Oriented Programming. The principles intend to make software entities easy to understand, maintain, unittest and reuse in different contexts. They are mostly used in strongly typed languages such as Java or C++. Probably that's why Python developers don't follow them too often or they do but didn't ever realize it. I'd like to talk about my experience in following the SOLID principles in Python. I will show you how they apply to Python as a dynamic language and what problems did they solve for me.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ignacy Sokołowski</dc:creator><pubDate>Fri, 16 Oct 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-10-16:/pycon-pl-2015/solid-python.html</guid><category>PyCon PL 2015</category></item><item><title>Clean application architecture</title><link>https://pyvideo.org/pycon-pl-2016/clean-application-architecture.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In Python, we don't talk much about design and architecture. Instead, we
focus on frameworks and libraries. We let them define the architecture
of our applications and leak into the business logic and tests. Rather
than putting them aside, we couple to them so much that when we decide
to change them, we need to rewrite almost all of the code base from
scratch. We do the same with database, putting it in the center of the
architecture, which makes the tests hard to write, fragile and either
very slow or littered with monkey- patching.In this talk, I will show
you how to design architecture which will make your code much easier to
test and maintain. You will learn how to decouple the infrastructure
from business logic and be prepared for future changes.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ignacy Sokołowski</dc:creator><pubDate>Sat, 15 Oct 2016 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2016-10-15:/pycon-pl-2016/clean-application-architecture.html</guid><category>PyCon PL 2016</category></item><item><title>Single Responsibility Principle</title><link>https://pyvideo.org/pywaw-summit-2015/single-responsibility-principle.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Talk: Single Responsibility Principle&lt;/p&gt;
&lt;p&gt;How to write clean, reusable, maintainable and testable Python code following the Single Responsibility Principle.What is &amp;quot;single&amp;quot;, why is it so important, how to determine whether your code follows the SRP and how to refactor it.&lt;/p&gt;
&lt;p&gt;Speaker: Ignacy Sokołowski. I am a Python Developer at Webinterpret. I love simplicity, clean code, fast unit tests and good documentation.&lt;/p&gt;
&lt;p&gt;Slides: &lt;a class="reference external" href="http://ignacysokolowski.github.io/single-responsibility-principle-talk/"&gt;http://ignacysokolowski.github.io/single-responsibility-principle-talk/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;License: For reuse of this video under a more permissive license please get in touch with us. The speakers retain the copyright for their performances.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://summit.pywaw.org"&gt;http://summit.pywaw.org&lt;/a&gt;&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Ignacy Sokołowski</dc:creator><pubDate>Mon, 02 Nov 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-11-02:/pywaw-summit-2015/single-responsibility-principle.html</guid><category>PyWaw Summit 2015</category><category>SRP</category></item></channel></rss>