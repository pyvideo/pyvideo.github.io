<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_amber-brown-hawkowl.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2018-05-13T00:00:00+00:00</updated><entry><title>How We Do Identity Wrong</title><link href="https://pyvideo.org/pycon-us-2018/how-we-do-identity-wrong.html" rel="alternate"></link><published>2018-05-13T00:00:00+00:00</published><updated>2018-05-13T00:00:00+00:00</updated><author><name>Amber Brown ("HawkOwl")</name></author><id>tag:pyvideo.org,2018-05-13:pycon-us-2018/how-we-do-identity-wrong.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Most software has a user. Depending on the software, the user may need to provide various details about themselves for proper operation -- their name, their date of birth, where they live. However, it is quite common for software systems such as these to ask the wrong questions, collect too much data, and when it comes down to it, serialise the parts of the user's identity wrongly. This talk will discuss common ways that real-world systems store identity wrong, what questions you shouldn't ask, and how you can fix it in your own projects.&lt;/p&gt;
</summary></entry><entry><title>Concurrency and Parallelism From The Ground Up</title><link href="https://pyvideo.org/pycon-au-2017/concurrency-and-parallelism-from-the-ground-up.html" rel="alternate"></link><published>2017-08-05T00:00:00+00:00</published><updated>2017-08-05T00:00:00+00:00</updated><author><name>Amber Brown ("HawkOwl")</name></author><id>tag:pyvideo.org,2017-08-05:pycon-au-2017/concurrency-and-parallelism-from-the-ground-up.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;When writing an application, it is common to want to do many things at once. For web servers, this is serve multiple web requests, for GUI applications it's doing a background task whilst keeping the UI responsive. But how do we actually do that? This talk will go into how concurrency and parallelism work from the CPU, OS, and threads up, how state (data) is shared between them, and how this interacts with the functions that you, the programmer, write, and how you can write properly behaving concurrent or parallel software.&lt;/p&gt;
</summary></entry><entry><title>Lightning talks May 20th 2017 Morning session</title><link href="https://pyvideo.org/pycon-us-2017/lightning-talks-may-20th-2017-morning-session.html" rel="alternate"></link><published>2017-05-20T00:00:00+00:00</published><updated>2017-05-20T00:00:00+00:00</updated><author><name>James Powell</name></author><id>tag:pyvideo.org,2017-05-20:pycon-us-2017/lightning-talks-may-20th-2017-morning-session.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Lightning Talks 2017-05-20 Morning&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="12%" /&gt;
&lt;col width="23%" /&gt;
&lt;col width="65%" /&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head" rowspan="2"&gt;Start&lt;/th&gt;
&lt;th class="head" rowspan="2"&gt;Speakers&lt;/th&gt;
&lt;th class="head" rowspan="2"&gt;Subject&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td rowspan="3"&gt;0:15&lt;/td&gt;
&lt;td rowspan="3"&gt;James Powell&lt;/td&gt;
&lt;td rowspan="3"&gt;&lt;strong&gt;penv:  a stupid (but useful?) tool&lt;/strong&gt;
- A teaser for a script to replace virtualenv.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td rowspan="6"&gt;5:45&lt;/td&gt;
&lt;td rowspan="6"&gt;Amber Brown&lt;/td&gt;
&lt;td rowspan="6"&gt;&lt;strong&gt;Falsehoods Developers Have About Identity&lt;/strong&gt;
- Human identities have complexities, including
changing names, different forms and surname orders,
changing timezones and country names.  Developers
should not make assumptions.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td rowspan="5"&gt;11:15&lt;/td&gt;
&lt;td rowspan="5"&gt;Jelle Zijlstra&lt;/td&gt;
&lt;td rowspan="5"&gt;&lt;strong&gt;Fun with Type Annotations&lt;/strong&gt;
- Python has type annotations, which aids
documentation and restructuring and also provides an
oportunity to contribute to open source.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td rowspan="3"&gt;14:15&lt;/td&gt;
&lt;td rowspan="3"&gt;Mark Kohdev&lt;/td&gt;
&lt;td rowspan="3"&gt;&lt;strong&gt;Music Data, Metadata, and Morrrreeeee&lt;/strong&gt;
- Spotify has a lot of free metadata about music.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td rowspan="4"&gt;18:45&lt;/td&gt;
&lt;td rowspan="4"&gt;Nate Smith&lt;/td&gt;
&lt;td rowspan="4"&gt;&lt;strong&gt;Tildetown&lt;/strong&gt;
- tilde.town is an intentional digital community
accessible over SSH.   Non-commercial.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td rowspan="6"&gt;24:00&lt;/td&gt;
&lt;td rowspan="6"&gt;Patrick Laban&lt;/td&gt;
&lt;td rowspan="6"&gt;&lt;strong&gt;What do we hate?  Time Zones!&lt;/strong&gt;
- Time zones are weirdly set up, e.g., daylight
savings, Indian reservations, China, offsets by crazed
weasels, and strange compromises. They are insane -
don't roll your own timezone code.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</summary><category term="lightning talks"></category></entry><entry><title>Implementing Concurrency and Parallelism From The Ground Up</title><link href="https://pyvideo.org/pycon-us-2017/implementing-concurrency-and-parallelism-from-the-ground-up.html" rel="alternate"></link><published>2017-05-19T00:00:00+00:00</published><updated>2017-05-19T00:00:00+00:00</updated><author><name>Amber Brown ("HawkOwl")</name></author><id>tag:pyvideo.org,2017-05-19:pycon-us-2017/implementing-concurrency-and-parallelism-from-the-ground-up.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;When writing an application, it is common to want to do many things at
once. For web servers, this is serve multiple web requests, for GUI
applications it's doing a background task whilst keeping the UI
responsive. But how do we actually do that? This talk will go into how
concurrency and parallelism work from the CPU, OS, and threads up, how
state (data) is shared between them, and how this interacts with the
functions that you, the programmer, write, and how you can write
properly behaving concurrent or parallel software.&lt;/p&gt;
</summary></entry><entry><title>Releasing Calendar-Versioned Software</title><link href="https://pyvideo.org/pycon-au-2016/releasing-calendar-versioned-software.html" rel="alternate"></link><published>2016-08-15T00:00:00+00:00</published><updated>2016-08-15T00:00:00+00:00</updated><author><name>Amber Brown ("HawkOwl")</name></author><id>tag:pyvideo.org,2016-08-15:pycon-au-2016/releasing-calendar-versioned-software.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Amber Brown
&lt;a class="reference external" href="https://2016.pycon-au.org/schedule/144/view_talk"&gt;https://2016.pycon-au.org/schedule/144/view_talk&lt;/a&gt;
Calendar-versioned software (or “calver”), in contrast to semantically versioned software (or “semver”), is released on regular intervals, rather than on the occurrence of features, bug fixes, or backwards compatibility breaking changes. This method of releasing software, notably used by Twisted and various related projects, eschews the “major.minor.patchlevel” format and the guarantees of a semver regime and instead focuses on providing robust backwards compatibility, clear deprecation cycles, and frequent but smaller releases. This talk discusses some of the trials and tribulations of the release process of such a project, Twisted, and the ways that it makes it work, as well as what tools are available to make the process easier if you wish to implement it yourself.&lt;/p&gt;
</summary></entry><entry><title>The Report Of Twisted’s Death</title><link href="https://pyvideo.org/europython-2016/the-report-of-twisteds-death.html" rel="alternate"></link><published>2016-08-05T00:00:00+00:00</published><updated>2016-08-05T00:00:00+00:00</updated><author><name>Amber Brown ("HawkOwl")</name></author><id>tag:pyvideo.org,2016-08-05:europython-2016/the-report-of-twisteds-death.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Amber Brown - The Report Of Twisted’s Death
[EuroPython 2016]
[18 July 2016]
[Bilbao, Euskadi, Spain]
(&lt;a class="reference external" href="https://ep2016.europython.eu//conference/talks/the-report-of-twisteds-death"&gt;https://ep2016.europython.eu//conference/talks/the-report-of-twisteds-death&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;This talk will teach you how Twisted or Tornado supplement asyncio,
how asyncio can/is integrated with these frameworks, and makes a case
for the continued development of new and existing selector-loop based
frameworks. It will also paint a picture of the future direction of
Twisted, why the original plan of asyncio as a standard API has not
come to complete fruition, and what can be done about it.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;Historically, there has been no “standard way” of doing asynchronous
I/O in Python. A variety of solutions, from using threads (WSGI),
processes (multiprocessing), green threads (gevent), or selector loops
(Tornado, Twisted) have all been used to similar degrees, but apart
from the (now deprecated) standard library asyncore/asynchat, Python
itself did not have a blessed option.&lt;/p&gt;
&lt;p&gt;PEP 3156, or “the asyncio PEP”, introduced in Python 3.4, provides
this blessed option, choosing a standard selector loop approach (or
“reactor”, in Twisted parlance). The role of asyncio may seem muddled
in the eyes of developers new to asynchronous programming, or those
that may not understand the technical details of asyncio nor the
political environment in which it was created. This talk will teach
you how Twisted or Tornado supplement asyncio, how asyncio can/is
integrated with these frameworks, and makes a case for the continued
development of new and existing selector-loop based frameworks. It
will also paint a picture of the future direction of Twisted, why the
original plan of asyncio as a standard API has not come to complete
fruition, and what can be done about it.&lt;/p&gt;
</summary></entry><entry><title>The Report Of Twisted’s Death or: Why Twisted and Tornado Are Relevant In The Asyncio Age</title><link href="https://pyvideo.org/pycon-us-2016/the-report-of-twisteds-death-or-why-twisted-and-tornado-are-relevant-in-the-asyncio-age.html" rel="alternate"></link><published>2016-05-31T00:00:00+00:00</published><updated>2016-05-31T00:00:00+00:00</updated><author><name>Amber Brown ("HawkOwl")</name></author><id>tag:pyvideo.org,2016-05-31:pycon-us-2016/the-report-of-twisteds-death-or-why-twisted-and-tornado-are-relevant-in-the-asyncio-age.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Speaker: Amber Brown&lt;/p&gt;
&lt;p&gt;With asyncio on the scene, the question has been asked: is there any point in having Twisted or Tornado around?&lt;/p&gt;
&lt;p&gt;Slides can be found at: &lt;a class="reference external" href="https://speakerdeck.com/pycon2016"&gt;https://speakerdeck.com/pycon2016&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/PyCon/2016-slides"&gt;https://github.com/PyCon/2016-slides&lt;/a&gt;&lt;/p&gt;
</summary></entry><entry><title>Building Better Web APIs by HawkOwl</title><link href="https://pyvideo.org/pycon-au-2014/building-better-web-apis-by-hawkowl.html" rel="alternate"></link><published>2014-08-11T00:00:00+00:00</published><updated>2014-08-11T00:00:00+00:00</updated><author><name>Amber Brown ("HawkOwl")</name></author><id>tag:pyvideo.org,2014-08-11:pycon-au-2014/building-better-web-apis-by-hawkowl.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Web APIs are how much of the modern web speaks - services speaking HTTP
and JSON are ubiquitous, and nearly everything from your phone to your
TV interacts with one of them. We'll go over how APIs are structured and
versioned, why you should validate your data, and why you should have
them in the first place -- and what other best practices are when
creating them.&lt;/p&gt;
</summary></entry><entry><title>Lightning talks</title><link href="https://pyvideo.org/pycon-au-2015/lightning-talks-19.html" rel="alternate"></link><published>2015-08-04T00:00:00+00:00</published><updated>2015-08-04T00:00:00+00:00</updated><author><name>Marcus Holterman</name></author><id>tag:pyvideo.org,2015-08-04:pycon-au-2015/lightning-talks-19.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;00:00 Introduction 01:10 Marcus Holterman - Django Logging Canary 02:54
Tim Ansell - Tim (still) has too many projects 08:24 Russell
Keith-Magee - I am a doctor 12:51 Steven Joeseph - Async IO TLDR
edition 20:20 Chris Beevan - Bit ID Authentication 25:21 Xuanyi Chew -
More stuff you probably didn't know about 27:18 Aimee Marie Forsstrom -
Cyber Terrorism or Terrible Code 31:42 Rhys Elsmore - What Postgres can
teach us about JavaScript 34:38 Roman Juce - zc.buildout for repeatible
builds 38:10 Quentin Lovett - Building Robots 41:06 Amber 'Hawkie' Brown
- Just use PyPy&lt;/p&gt;
</summary><category term="lightning talks"></category></entry><entry><title>Slow Down, Compose Yourself</title><link href="https://pyvideo.org/pycon-au-2015/slow-down-compose-yourself.html" rel="alternate"></link><published>2015-08-04T00:00:00+00:00</published><updated>2015-08-04T00:00:00+00:00</updated><author><name>Amber Brown ("HawkOwl")</name></author><id>tag:pyvideo.org,2015-08-04:pycon-au-2015/slow-down-compose-yourself.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;As your codebase grows, you will have instances where you have code that
needs to be reused. Then you think, I can do this with subclassing! Now
you have a diamond-tree of problems.&lt;/p&gt;
&lt;p&gt;Here, we’ll talk about a better way of code reuse and introducing
alternate behaviour into existing classes — composition. It’ll improve
how you test your code — making your test runs faster, making it easier
to test exceptional cases, and making everything easier to understand.&lt;/p&gt;
</summary></entry><entry><title>What Django can learn from Twisted</title><link href="https://pyvideo.org/pycon-au-2015/what-django-can-learn-from-twisted.html" rel="alternate"></link><published>2015-08-04T00:00:00+00:00</published><updated>2015-08-04T00:00:00+00:00</updated><author><name>Amber Brown ("HawkOwl")</name></author><id>tag:pyvideo.org,2015-08-04:pycon-au-2015/what-django-can-learn-from-twisted.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Web frameworks like Django are designed around the traditional
request-response cycle — a request comes in, a response is generated,
and that is delivered to the client. In the day of “single page”
applications, where only sections of the page are updated through
requests, doing real-time can be clunky. Twisted, and things that build
off it, like Django Channels, might be worth thinking about, and this is
what this talk will be about.&lt;/p&gt;
</summary></entry></feed>