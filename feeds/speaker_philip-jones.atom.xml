<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org - Philip Jones</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_philip-jones.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2020-07-23T00:00:00+00:00</updated><subtitle></subtitle><entry><title>Quart a asyncio alternative to Flask</title><link href="https://pyvideo.org/europython-2018/quart-a-asyncio-alternative-to-flask.html" rel="alternate"></link><published>2018-07-27T00:00:00+00:00</published><updated>2018-07-27T00:00:00+00:00</updated><author><name>Philip Jones</name></author><id>tag:pyvideo.org,2018-07-27:/europython-2018/quart-a-asyncio-alternative-to-flask.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Flask is a great web mirco-framework, that is best utilised with
event-loop concurrency. Sadly with Flask the event-loop framework can’t
be asyncio, although some extensions (Flask-Aiohttp) have tried. Quart
is the solution as it shares the Flask API and is based on asyncio. In
addition Quart goes beyond …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Flask is a great web mirco-framework, that is best utilised with
event-loop concurrency. Sadly with Flask the event-loop framework can’t
be asyncio, although some extensions (Flask-Aiohttp) have tried. Quart
is the solution as it shares the Flask API and is based on asyncio. In
addition Quart goes beyond Flask adding HTTP/2 and websockets.&lt;/p&gt;
&lt;p&gt;This talk will outline why event-loop concurrency is a good choice for
web servers, why asyncio is a good choice and then give an overview of
Quart, demonstrating features that go beyond the Flask framework.&lt;/p&gt;
</content><category term="EuroPython 2018"></category></entry><entry><title>An ASGI Server from scratch</title><link href="https://pyvideo.org/europython-2020/an-asgi-server-from-scratch.html" rel="alternate"></link><published>2020-07-23T00:00:00+00:00</published><updated>2020-07-23T00:00:00+00:00</updated><author><name>Philip Jones</name></author><id>tag:pyvideo.org,2020-07-23:/europython-2020/an-asgi-server-from-scratch.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Echo server to a basic ASGI server in a talk&lt;/p&gt;
&lt;p&gt;I intend for this to be a fairly advanced talk that shows the steps required to go from a TCP echo server to a basic HTTP/1 ASGI server using asyncio for the IO. This is aimed at people …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Echo server to a basic ASGI server in a talk&lt;/p&gt;
&lt;p&gt;I intend for this to be a fairly advanced talk that shows the steps required to go from a TCP echo server to a basic HTTP/1 ASGI server using asyncio for the IO. This is aimed at people who've read about asyncio, coroutines, etc and want to see them used in practice.&lt;/p&gt;
&lt;p&gt;This is a tutorial on how to build a HTTP/1 ASGI server using asyncio. I plan to start by building a TCP echo server and then add HTTP parsing and ASGI compliance.&lt;/p&gt;
</content><category term="EuroPython 2020"></category><category term="europython"></category><category term="europython-2020"></category><category term="europython-online"></category><category term="ASYNC / Concurreny"></category><category term="Web"></category><category term="Web Protocols"></category><category term="Web Servers and MicroFWs (Flask/Tornado/Nginx/...)"></category></entry><entry><title>Async Flask, an introduction to Quart</title><link href="https://pyvideo.org/flaskcon-2020/async-flask-an-introduction-to-quart.html" rel="alternate"></link><published>2020-07-05T00:00:00+00:00</published><updated>2020-07-05T00:00:00+00:00</updated><author><name>Philip Jones</name></author><id>tag:pyvideo.org,2020-07-05:/flaskcon-2020/async-flask-an-introduction-to-quart.html</id><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Quart is the Flask API re-implemented in async/await. This talk will introduce Quart and explain how it relates to Flask. Then I'll talk about potential async support in Flask and discuss the future relationship between the Quart and Flask.&lt;/p&gt;
</content><category term="FlaskCon 2020"></category><category term="Flask"></category><category term="FlaskCon"></category></entry><entry><title>An introduction to ASGI, Asynchronous Server Gateway Interface</title><link href="https://pyvideo.org/pylondinium-2019/an-introduction-to-asgi-asynchronous-server-gateway-interface.html" rel="alternate"></link><published>2019-06-15T00:00:00+00:00</published><updated>2019-06-15T00:00:00+00:00</updated><author><name>Philip Jones</name></author><id>tag:pyvideo.org,2019-06-15:/pylondinium-2019/an-introduction-to-asgi-asynchronous-server-gateway-interface.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;If you develop web appliations in Python you will almost certainly be
doing so using WSGI, with the most popular frameworks, Django and Flask,
as well as the majority of others being based upon it. WSGI specifies
the interface between servers and applications, simplified this
interface is,&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;application …&lt;/span&gt;&lt;/pre&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;If you develop web appliations in Python you will almost certainly be
doing so using WSGI, with the most popular frameworks, Django and Flask,
as well as the majority of others being based upon it. WSGI specifies
the interface between servers and applications, simplified this
interface is,&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;application&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start_response&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;    &lt;span class="n"&gt;start_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;200 OK&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Content-Type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;text/plain&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="sa"&gt;b&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hello, World&amp;quot;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;with the &lt;tt class="docutils literal"&gt;application&lt;/tt&gt; called on each request. The request description
and environment is specified in the &lt;tt class="docutils literal"&gt;environ&lt;/tt&gt; dict and the
&lt;tt class="docutils literal"&gt;start_response&lt;/tt&gt; is called to send the response status code and
headers before the body, which is returned by the &lt;tt class="docutils literal"&gt;application&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;ASGI also aims to specify the interface between servers and
applications, only using the async/await syntax, the interface can be
simplified to&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;application&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scope&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;receive&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http.response.start&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;status&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;headers&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="sa"&gt;b&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Content-Type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;text/plain&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)]})&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http.response.body&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;body&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="sa"&gt;b&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hello World&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;with the &lt;tt class="docutils literal"&gt;application&lt;/tt&gt; awaited on each request and &lt;tt class="docutils literal"&gt;scope&lt;/tt&gt;
fulfilling a similar role to &lt;tt class="docutils literal"&gt;environ&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;In this talk I'll explain the above and how it limits WSGI and why ASGI
is the solution. I'll also introduce the current ASGI ecosystem and
features.&lt;/p&gt;
&lt;p&gt;Outline&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Introduction to WSGI (basic code)&lt;/li&gt;
&lt;li&gt;WSGI ecosystem servers (Gunicorn, uWSGI, mod_wsgi) and frameworks (Flask, Django)&lt;/li&gt;
&lt;li&gt;WSGI limitations e.g. Websockets&lt;/li&gt;
&lt;li&gt;ASGI Introduction (basic code)&lt;/li&gt;
&lt;li&gt;ASGI development and history&lt;/li&gt;
&lt;li&gt;ASGI features, websockets, HTTP/2&lt;/li&gt;
&lt;li&gt;ASGI ecosystem servers (Hypercorn, Daphne, Uvicorn) and frameworks (Starlette, Django, Quart).&lt;/li&gt;
&lt;/ul&gt;
</content><category term="PyLondinium 2019"></category></entry></feed>