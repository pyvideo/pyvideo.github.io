<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org - Anna Jaruga</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Thu, 02 May 2019 09:00:00 +0000</lastBuildDate><item><title>To trust or to test?: Automated testing of scientific projects with pytest</title><link>https://pyvideo.org/pycon-us-2019/to-trust-or-to-test-automated-testing-of-scientific-projects-with-pytest.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Many researchers rely strongly on numerical computations. Unfortunately,
testing scientific code is a hard task. Often there is no ground truth
available for comparison and the end result of the simulation is unknown
even to the code developer herself/himself. Often the user-base of the
scientific code is small and the work environment does not provide
incentives for testing.&lt;/p&gt;
&lt;p&gt;However, there are always parts of the code that are relatively easy to
cover by Unit Tests. Scientific pipelines could and should have
Regressions Tests, which ensure that previously developed software still
performs after changes in the code, or in external libraries and
computational environment. An automatic test suite should not be a
burden and can become a game-changer even for a small programming
project.&lt;/p&gt;
&lt;p&gt;This tutorial is meant to be an introduction to testing in general and
to pytest library. Pytest is a full feature tool to test the Python
code, it offers a simple way to get started and scales from simple unit
testing to complex functional testing. We will begin with simple assert
statements and finish with pytest.fixture and pytest.parametrization.
The tutorial will also cover a simple integration of the tests suit with
Continuous Integration platforms using GitHub and Travis/CircleCI.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Audience:&lt;/strong&gt; The tutorial is designed for scientist and data scientists
who would like incorporate testing to their everyday work. We expect
that people know basic Python and NumPy, and are familiar with simple
shell commands. Basic knowledge of Git/GitHub will be useful in the
second half of the tutorial.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Dorota Jarecka</dc:creator><pubDate>Thu, 02 May 2019 09:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2019-05-02:/pycon-us-2019/to-trust-or-to-test-automated-testing-of-scientific-projects-with-pytest.html</guid><category>PyCon US 2019</category><category>tutorial</category></item><item><title>The quest for scientific credit for software documentation</title><link>https://pyvideo.org/write-the-docs-europe-2015/the-quest-for-scientific-credit-for-software-documentation.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Modern geoscientific research relies heavily on numerical computations
involving complex software developed by physicists or chemists. It would
seem that scientists should be well versed in ways of documenting and
explaining their research. Yet, when it comes to the documentation of
scientific software projects, one soon realises that scientific wisdom
is spread mostly by LaTeX and that the word 'documentation' starts to
mean something completely different.&lt;/p&gt;
&lt;p&gt;Writing a documentation for a scientific project can be quite
challenging. There are not that many examples of well-documented
open-source geoscientific numerical modelling software projects to drew
the inspiration from. Even though the scientific results should be
reproducible, mechanisms that reward those who deliver well documented
software are still to become widespread. The scientists are judged
basing on the number of peer-reviewed papers they publish, therefore
investing the time solely to offer the documentation is difficult. The
documentation should include the actual mathematical equations and
theory behind the software, figures documenting the scientific results
as well as code listings and usage examples. The target audience may
have a strong background in science, computer science, both or neither.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Anna Jaruga</dc:creator><pubDate>Mon, 31 Aug 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2015-08-31:/write-the-docs-europe-2015/the-quest-for-scientific-credit-for-software-documentation.html</guid><category>Write the Docs Europe 2015</category></item></channel></rss>