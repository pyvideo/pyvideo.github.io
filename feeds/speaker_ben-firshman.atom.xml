<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_ben-firshman.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2010-09-09T00:00:00+00:00</updated><entry><title>Alternative views</title><link href="https://pyvideo.org/djangocon-us-2010/djangocon-2010--alternative-views.html" rel="alternate"></link><published>2010-09-09T00:00:00+00:00</published><updated>2010-09-09T00:00:00+00:00</updated><author><name>Ben Firshman</name></author><id>tag:pyvideo.org,2010-09-09:djangocon-us-2010/djangocon-2010--alternative-views.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Exploring the power of class-based views, their current status and how
the concepts behind them can be applied to other areas.&lt;/p&gt;
&lt;p&gt;Abstract&lt;/p&gt;
&lt;p&gt;Generic views are quickly outgrown for all but the most simple of
applications. They are often rewritten from scratch just to make small
changes to functionality.&lt;/p&gt;
&lt;p&gt;If you use class-based views, code can be reused by inheriting from more
abstract views. They are provided with many reusable applications, but
all implemented in slightly different ways. It has been suggested a set
of views be supplied with Django to standardise the API.&lt;/p&gt;
&lt;p&gt;I will present some of the advantages and disadvantages of using
class-based views, and how they can help you develop more flexible
applications in less time.&lt;/p&gt;
</summary><category term="djangocon"></category><category term="djangocon2010"></category><category term="views"></category></entry></feed>