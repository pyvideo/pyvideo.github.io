<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/tag_api-framework.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2019-12-07T00:00:00+00:00</updated><entry><title>metadsl: separating API from execution</title><link href="https://pyvideo.org/pydata-austin-2019/metadsl-separating-api-from-execution.html" rel="alternate"></link><published>2019-12-07T00:00:00+00:00</published><updated>2019-12-07T00:00:00+00:00</updated><author><name>Saul Shanabrook</name></author><id>tag:pyvideo.org,2019-12-07:pydata-austin-2019/metadsl-separating-api-from-execution.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;metadsl is a Python framework for writing APIs that are detached from how they are executed. With it we can be framework agnostic definitions of concepts like 'arrays' and compile them to backends like Tensorflow or LLVM. In this talk, we will use metadsl to build high performance scientific computing libraries.&lt;/p&gt;
</summary><category term="metadsl"></category><category term="api framework"></category></entry><entry><title>Pico: Rethinking how we build HTTP APIs</title><link href="https://pyvideo.org/pycon-ireland-2017/pico-rethinking-how-we-build-http-apis.html" rel="alternate"></link><published>2017-10-21T00:00:00+00:00</published><updated>2017-10-21T00:00:00+00:00</updated><author><name>Fergal Walsh</name></author><id>tag:pyvideo.org,2017-10-21:pycon-ireland-2017/pico-rethinking-how-we-build-http-apis.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The Python universe is overflowing with web frameworks, from full featured batteries included frameworks like Django to micro frameworks like Bottle or Flask. They each have their own specific features but in the end they are all very similar in their core functionality of processing requests and generating responses. In this talk I will discuss why I felt the need to create yet another framework, a pico framework, that specifically focuses on the task of building HTTP based APIs for the web. Pico, as it is aptly called, doesn't do templating, ORM, custom routing, authentication, validation, caching, or a million other things. Instead it helps you write clean APIs using simple functions and modules with minimal boilerplate. Pico is both opinionated and flexible in equal measures so you can focus on what matters; your API logic. Pico helps you to write code that that is simple to get started, trivial to test, and easy to maintain as your project grows. APIs built with Pico are self describing so client code can automatically/dynamically be created. Pico includes both a Python &amp;amp; Javascript client but it is also very simple to interact with your API with plain old cURL/Requests/jQuery/etc. It is just a HTTP API after all. Having recently released Pico 2.0, this talk will outline the evolution of this framework over the past 7 years and discuss some lessons learnt along the way about building HTTP APIs and frameworks.&lt;/p&gt;
</summary><category term="pico"></category><category term="api framework"></category></entry></feed>