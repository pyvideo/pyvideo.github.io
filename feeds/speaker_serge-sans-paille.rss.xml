<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>PyVideo.org - Serge Sans Paille</title><link>https://pyvideo.org/</link><description></description><lastBuildDate>Thu, 23 Jul 2020 00:00:00 +0000</lastBuildDate><item><title>Tooling for Static Analysis of Python Programs</title><link>https://pyvideo.org/europython-2020/tooling-for-static-analysis-of-python-programs.html</link><description>&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;In spite of the dynamic nature of their favorite language, some Python developer have a huge desire to statically analyse it. This can indeed be useful for linters, type inference, auto-completion and all the tooling some developers expect from modern IDE.
We all know that lazy binding prevents even the simplest function call or attribute lookup to be reliably analyzed. Yet we try. And Python as this fabulous &lt;tt class="docutils literal"&gt;ast&lt;/tt&gt; module, saving us from writing a parser! Isn't that a strong incentive to do static analysis?&lt;/p&gt;
&lt;p&gt;This talk presents two modules developers can build upon to build such analyzers:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;gast, a generalization of the Python AST that provides a common API for all the variant of the Python AST, from python 2.7 to Python 3.8&lt;/li&gt;
&lt;li&gt;beniget, an analyzer of the Python AST (built upon gast) that provides a useful and well-known abstraction to understand programs: use-def chains&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;Built upon these two modules, memestra is a static analyzer of deprecated function calls, developed in partnership with QuantStack. A tool which, given a module, reports any use of deprecated APIs. Let's explore how such a module can be built and unveil the mysteries of static analysis.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Serge Sans Paille</dc:creator><pubDate>Thu, 23 Jul 2020 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2020-07-23:/europython-2020/tooling-for-static-analysis-of-python-programs.html</guid><category>EuroPython 2020</category><category>europython</category><category>europython-2020</category><category>europython-online</category><category>Compiler and Interpreters</category></item><item><title>Crossing the native code frontier</title><link>https://pyvideo.org/pyparis-2018/crossing-the-native-code-frontier.html</link><description></description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Serge sans Paille</dc:creator><pubDate>Wed, 14 Nov 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:pyvideo.org,2018-11-14:/pyparis-2018/crossing-the-native-code-frontier.html</guid><category>PyParis 2018</category></item></channel></rss>