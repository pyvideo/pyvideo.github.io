<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/tag_python-advanced.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2010-02-19T00:00:00+00:00</updated><entry><title>Mindblowing Python GIL</title><link href="https://pyvideo.org/chipy/mindblowing-python-gil.html" rel="alternate"></link><published>2009-06-11T00:00:00+00:00</published><updated>2009-06-11T00:00:00+00:00</updated><author><name>David Beazley</name></author><id>tag:pyvideo.org,2009-06-11:chipy/mindblowing-python-gil.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Mindblowing Python GIL&lt;/p&gt;
&lt;p&gt;Presented by David Beazley at ChiPy on June 11, 2009&lt;/p&gt;
&lt;p&gt;David Beazley: mind-blowing presentation about how the Python GIL
actually works and why it's even worse than most people even imagine.&lt;/p&gt;
&lt;p&gt;Slides: &lt;a class="reference external" href="http://www.dabeaz.com/python/GIL.pdf"&gt;http://www.dabeaz.com/python/GIL.pdf&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[VIDEO HAS PROBLEMS: audio is fuzzy]&lt;/p&gt;
</summary><category term="chipy"></category><category term="gil"></category><category term="python-advanced"></category></entry><entry><title>PyCon 2009: A Curious Course on Coroutines and Concurrency (Part 3 of 3)</title><link href="https://pyvideo.org/pycon-us-2009/pycon-2009--a-curious-course-on-coroutines-and-c0.html" rel="alternate"></link><published>2009-02-17T00:00:00+00:00</published><updated>2009-02-17T00:00:00+00:00</updated><author><name>David Beazley</name></author><id>tag:pyvideo.org,2009-02-17:pycon-us-2009/pycon-2009--a-curious-course-on-coroutines-and-c0.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A Curious Course on Coroutines and Concurrency (part 3 of 3)&lt;/p&gt;
&lt;p&gt;Presented at PyCon 2009 by David Beazley&lt;/p&gt;
&lt;p&gt;If you are a programmer who cares about Python and concurrency, then you
should also care about Python coroutines. Although they were first
introduced in Python 2.5, coroutines remain one of Python's most
overlooked features--- often vaguely described as a curious &amp;quot;extension&amp;quot;
of generator functions with little insight as to how they might be
applied to real-world problems. This tutorial examines coroutines in a
more practical light by showing how they are actually a very elegant way
to implement a processing &amp;quot;task.&amp;quot; Using this task abstraction, it is
possible to use coroutines to implement processing pipelines, event
handling systems, and programs based on cooperative multitasking.
Moreover, if you define tasks using coroutines, they can be easily
incorporated into more traditional concurrent programs that utilize
threads or message passing.&lt;/p&gt;
&lt;p&gt;[VIDEO HAS ISSUES: bit of clipping start to finish.]&lt;/p&gt;
</summary><category term="concurrency"></category><category term="coroutines"></category><category term="generator"></category><category term="pycon"></category><category term="pycon2009"></category><category term="python-advanced"></category></entry><entry><title>PyCon 2009: A Curious Course on Coroutines and Concurrency (Part 2 of 3)</title><link href="https://pyvideo.org/pycon-us-2009/pycon-2009--a-curious-course-on-coroutines-and-c1.html" rel="alternate"></link><published>2009-02-17T00:00:00+00:00</published><updated>2009-02-17T00:00:00+00:00</updated><author><name>David Beazley</name></author><id>tag:pyvideo.org,2009-02-17:pycon-us-2009/pycon-2009--a-curious-course-on-coroutines-and-c1.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A Curious Course on Coroutines and Concurrency (part 2 of 3)&lt;/p&gt;
&lt;p&gt;Presented at PyCon 2009 by David Beazley&lt;/p&gt;
&lt;p&gt;If you are a programmer who cares about Python and concurrency, then you
should also care about Python coroutines. Although they were first
introduced in Python 2.5, coroutines remain one of Python's most
overlooked features--- often vaguely described as a curious &amp;quot;extension&amp;quot;
of generator functions with little insight as to how they might be
applied to real-world problems. This tutorial examines coroutines in a
more practical light by showing how they are actually a very elegant way
to implement a processing &amp;quot;task.&amp;quot; Using this task abstraction, it is
possible to use coroutines to implement processing pipelines, event
handling systems, and programs based on cooperative multitasking.
Moreover, if you define tasks using coroutines, they can be easily
incorporated into more traditional concurrent programs that utilize
threads or message passing.&lt;/p&gt;
&lt;p&gt;[VIDEO HAS ISSUES: bit of clipping start to finish.]&lt;/p&gt;
</summary><category term="concurrency"></category><category term="coroutines"></category><category term="generator"></category><category term="pycon"></category><category term="pycon2009"></category><category term="python-advanced"></category></entry><entry><title>PyCon 2009: A Curious Course on Coroutines and Concurrency (Part 1 of 3)</title><link href="https://pyvideo.org/pycon-us-2009/pycon-2009--a-curious-course-on-coroutines-and-co.html" rel="alternate"></link><published>2009-02-17T00:00:00+00:00</published><updated>2009-02-17T00:00:00+00:00</updated><author><name>David Beazley</name></author><id>tag:pyvideo.org,2009-02-17:pycon-us-2009/pycon-2009--a-curious-course-on-coroutines-and-co.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;A Curious Course on Coroutines and Concurrency (part 1 of 3)&lt;/p&gt;
&lt;p&gt;Presented at PyCon 2009 by David Beazley&lt;/p&gt;
&lt;p&gt;If you are a programmer who cares about Python and concurrency, then you
should also care about Python coroutines. Although they were first
introduced in Python 2.5, coroutines remain one of Python's most
overlooked features--- often vaguely described as a curious &amp;quot;extension&amp;quot;
of generator functions with little insight as to how they might be
applied to real-world problems. This tutorial examines coroutines in a
more practical light by showing how they are actually a very elegant way
to implement a processing &amp;quot;task.&amp;quot; Using this task abstraction, it is
possible to use coroutines to implement processing pipelines, event
handling systems, and programs based on cooperative multitasking.
Moreover, if you define tasks using coroutines, they can be easily
incorporated into more traditional concurrent programs that utilize
threads or message passing.&lt;/p&gt;
&lt;p&gt;[VIDEO HAS ISSUES: bit of clipping start to finish.]&lt;/p&gt;
</summary><category term="concurrency"></category><category term="coroutines"></category><category term="generator"></category><category term="pycon"></category><category term="pycon2009"></category><category term="python-advanced"></category></entry><entry><title>PyCon 2009: A Whirlwind Excursion through Writing a C Extension (#68)</title><link href="https://pyvideo.org/pycon-us-2009/pycon-2009--a-whirlwind-excursion-through-writing.html" rel="alternate"></link><published>2009-02-17T00:00:00+00:00</published><updated>2009-02-17T00:00:00+00:00</updated><author><name>Ned Batchelder</name></author><id>tag:pyvideo.org,2009-02-17:pycon-us-2009/pycon-2009--a-whirlwind-excursion-through-writing.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;[VIDEO HAS ISSUES: Ambient mic used, some echoing] Everyone's heard of C
extensions to Python, but few have ventured into those murky depths.
This is a quick overview of how to write a C extension, complete with
highlights of the C API, memory management, error handling, and type
creation. Whether you want to speed up your Python, integrate with
legacy code, contribute to Python's core, or just learn a little about
how it all works under the covers, you will enjoy this trip through
unfamiliar territory. I guarantee you will return safely.&lt;/p&gt;
</summary><category term="extensions"></category><category term="pycon"></category><category term="pycon2009"></category><category term="python-advanced"></category></entry><entry><title>PyCon 2009: About Python Namespaces (and Code Objects) (#46)</title><link href="https://pyvideo.org/pycon-us-2009/pycon-2009--about-python-namespaces--and-code-obj.html" rel="alternate"></link><published>2009-02-17T00:00:00+00:00</published><updated>2009-02-17T00:00:00+00:00</updated><author><name>Unknown</name></author><id>tag:pyvideo.org,2009-02-17:pycon-us-2009/pycon-2009--about-python-namespaces--and-code-obj.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;About Python Namespaces (and Code Objects)&lt;/p&gt;
&lt;p&gt;Presented at PyCon 2009&lt;/p&gt;
&lt;p&gt;An explanation of some of the underlying concepts of Python, come learn
about names and values placed in namespaces, modified by code objects
and collected into modules. We'll explore namespaces using the Python
interactive prompt, with graphical display of object trees using
Graphviz. Also explained will be the namespace concepts of closures and
early binding; how to define new objects without subclassing via use of
default/curried arguments and closures.&lt;/p&gt;
&lt;p&gt;[VIDEO HAS ISSUES: Audio buzzing, missing beginning, talk is only 15
mins (may be cut)]&lt;/p&gt;
</summary><category term="codeobjects"></category><category term="namespaces"></category><category term="pycon"></category><category term="pycon2009"></category><category term="python-advanced"></category></entry><entry><title>PyCon 2009: Faster Python Programs through Optimization (Part 1 of 3)</title><link href="https://pyvideo.org/pycon-us-2009/pycon-2009--faster-python-programs-through-optim0.html" rel="alternate"></link><published>2009-02-17T00:00:00+00:00</published><updated>2009-02-17T00:00:00+00:00</updated><author><name>Unknown</name></author><id>tag:pyvideo.org,2009-02-17:pycon-us-2009/pycon-2009--faster-python-programs-through-optim0.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;[VIDEO HAS ISSUES: vga blurry] Although Python programs may be slow for
certain types of tasks, there are many different ways to improve
performance. This tutorial will introduce optimization strategies and
demonstrate techniques to implement them. Another of the objectives of
this course is to give participants the ability to decide what might be
the optimal solution for a certain performance problem. Participants are
strongly recommended to bring laptops because all techniques are
introduced with examples and exercises.&lt;/p&gt;
</summary><category term="optimization"></category><category term="pycon"></category><category term="pycon2009"></category><category term="python-advanced"></category></entry><entry><title>PyCon 2009: Faster Python Programs through Optimization (Part 3 of 3)</title><link href="https://pyvideo.org/pycon-us-2009/pycon-2009--faster-python-programs-through-optim1.html" rel="alternate"></link><published>2009-02-17T00:00:00+00:00</published><updated>2009-02-17T00:00:00+00:00</updated><author><name>Unknown</name></author><id>tag:pyvideo.org,2009-02-17:pycon-us-2009/pycon-2009--faster-python-programs-through-optim1.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;[VIDEO HAS ISSUES: vga blurry] Although Python programs may be slow for
certain types of tasks, there are many different ways to improve
performance. This tutorial will introduce optimization strategies and
demonstrate techniques to implement them. Another of the objectives of
this course is to give participants the ability to decide what might be
the optimal solution for a certain performance problem. Participants are
strongly recommended to bring laptops because all techniques are
introduced with examples and exercises.&lt;/p&gt;
</summary><category term="optimization"></category><category term="pycon"></category><category term="pycon2009"></category><category term="python-advanced"></category></entry><entry><title>PyCon 2009: Faster Python Programs through Optimization (Part 2 of 3)</title><link href="https://pyvideo.org/pycon-us-2009/pycon-2009--faster-python-programs-through-optimi.html" rel="alternate"></link><published>2009-02-17T00:00:00+00:00</published><updated>2009-02-17T00:00:00+00:00</updated><author><name>Unknown</name></author><id>tag:pyvideo.org,2009-02-17:pycon-us-2009/pycon-2009--faster-python-programs-through-optimi.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;[VIDEO HAS ISSUES: vga blurry] Although Python programs may be slow for
certain types of tasks, there are many different ways to improve
performance. This tutorial will introduce optimization strategies and
demonstrate techniques to implement them. Another of the objectives of
this course is to give participants the ability to decide what might be
the optimal solution for a certain performance problem. Participants are
strongly recommended to bring laptops because all techniques are
introduced with examples and exercises.&lt;/p&gt;
</summary><category term="optimization"></category><category term="pycon"></category><category term="pycon2009"></category><category term="python-advanced"></category></entry><entry><title>PyCon 2009: Python 401: Some Advanced Topics (Part 1 of 3)</title><link href="https://pyvideo.org/pycon-us-2009/pycon-2009--python-401--some-advanced-topics--pa0.html" rel="alternate"></link><published>2009-02-17T00:00:00+00:00</published><updated>2009-02-17T00:00:00+00:00</updated><author><name>Unknown</name></author><id>tag:pyvideo.org,2009-02-17:pycon-us-2009/pycon-2009--python-401--some-advanced-topics--pa0.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python 401: Some Advanced Topics&lt;/p&gt;
&lt;p&gt;Steve Holden challenges you to find new and interesting applications for
some of the less heavily utilized features of Python including generator
expressions, string interpolation, iteration and metaclasses.&lt;/p&gt;
</summary><category term="pycon"></category><category term="pycon2009"></category><category term="python-advanced"></category></entry><entry><title>PyCon 2009: Python 401: Some Advanced Topics (Part 2 of 3)</title><link href="https://pyvideo.org/pycon-us-2009/pycon-2009--python-401--some-advanced-topics--pa1.html" rel="alternate"></link><published>2009-02-17T00:00:00+00:00</published><updated>2009-02-17T00:00:00+00:00</updated><author><name>Unknown</name></author><id>tag:pyvideo.org,2009-02-17:pycon-us-2009/pycon-2009--python-401--some-advanced-topics--pa1.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python 401: Some Advanced Topics (Part 2 of 3)&lt;/p&gt;
&lt;p&gt;Steve Holden challenges you to find new and interesting applications for
some of the less heavily utilized features of Python including generator
expressions, string interpolation, iteration and metaclasses.&lt;/p&gt;
</summary><category term="pycon"></category><category term="pycon2009"></category><category term="python-advanced"></category></entry><entry><title>PyCon 2009: Python 401: Some Advanced Topics (Part 3 of 3)</title><link href="https://pyvideo.org/pycon-us-2009/pycon-2009--python-401--some-advanced-topics--par.html" rel="alternate"></link><published>2009-02-17T00:00:00+00:00</published><updated>2009-02-17T00:00:00+00:00</updated><author><name>Unknown</name></author><id>tag:pyvideo.org,2009-02-17:pycon-us-2009/pycon-2009--python-401--some-advanced-topics--par.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python 401: Some Advanced Topics (Part 3 of 3)&lt;/p&gt;
&lt;p&gt;Steve Holden challenges you to find new and interesting applications for
some of the less heavily utilized features of Python including generator
expressions, string interpolation, iteration and metaclasses.&lt;/p&gt;
</summary><category term="pycon"></category><category term="pycon2009"></category><category term="python-advanced"></category></entry><entry><title>Powerful Pythonic Patterns (#186)</title><link href="https://pyvideo.org/pycon-us-2010/pycon-2010--powerful-pythonic-patterns---186.html" rel="alternate"></link><published>2010-02-19T00:00:00+00:00</published><updated>2010-02-19T00:00:00+00:00</updated><author><name>Alex Martelli</name></author><id>tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--powerful-pythonic-patterns---186.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Powerful Pythonic Patterns video&lt;/p&gt;
&lt;p&gt;Presented by Alex Martelli&lt;/p&gt;
&lt;p&gt;An extremely misguided meme is going around: that Python doesn't have,
or need, any Design Patterns. Maybe the meme springs from not realizing
what the Gang Of Four state so plainly in their historical &amp;quot;Design
Patterns&amp;quot; book: which design patterns are useful DOES depend on the
programming language one targets -- design is NOT independent of
implementation, as the epic-fail &amp;quot;Waterfall&amp;quot; Methodology Pattern would
suggest. If you examine a &amp;quot;classic DP&amp;quot; that's basically a workaround for
some other language's lack of garbage collection, or for a clumsy
static-typing system, it may indeed be worthless for Python. But many
other DPs are still perfectly useful and applicable, and indeed Python's
strengths as a language afford riffing on them to develop highly
Pythonic, powerful, productive variants.&lt;/p&gt;
&lt;p&gt;In this talk, I analyze some of my favorite pattern families -- e.g.,
Template Method and its variants, Dependency Injection and its ilk,
Callback and friends -- in a highly Pythonic context. Non-pattern
Idioms, and Patterns that aren't really Design Patterns but rather
Architecture or Methodology ones, also make cameo appearances.&lt;/p&gt;
</summary><category term="designpatterns"></category><category term="pycon"></category><category term="pycon2010"></category><category term="python-advanced"></category></entry><entry><title>The Meaty Parts of Python: Closures, Decorators, List Comprehension, and Functional Constructs</title><link href="https://pyvideo.org/pycon-us-2010/pycon-2010--the-meaty-parts-of-python--closures--.html" rel="alternate"></link><published>2010-02-19T00:00:00+00:00</published><updated>2010-02-19T00:00:00+00:00</updated><author><name>Matt Harrison</name></author><id>tag:pyvideo.org,2010-02-19:pycon-us-2010/pycon-2010--the-meaty-parts-of-python--closures--.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The Meaty Parts of Python: Closures, Decorators, List Comprehension, and
Functional Constructs&lt;/p&gt;
&lt;p&gt;Presented by Matt Harrison&lt;/p&gt;
&lt;p&gt;Are you new to Python and want to learn how to step it up to the next
level? Have you wondered about functional programming, closures,
decorators, generators or list comprehensions and when you should use
them? This hands-on tutorial will cover these intermediate subjects in
detail, by explaining the theory behind them then walking through
examples. It will also cover how to test such programs. The session will
conclude with some basic problems to work through.&lt;/p&gt;
&lt;p&gt;Outline:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Testing (45 min)&lt;ul&gt;
&lt;li&gt;unittest&lt;/li&gt;
&lt;li&gt;doctest&lt;/li&gt;
&lt;li&gt;brief code coverage intro&lt;/li&gt;
&lt;li&gt;other testing tools&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Functional Programming (15 min)&lt;ul&gt;
&lt;li&gt;lambda&lt;/li&gt;
&lt;li&gt;map&lt;/li&gt;
&lt;li&gt;reduce&lt;/li&gt;
&lt;li&gt;filter&lt;/li&gt;
&lt;li&gt;Substitutes for above constructs&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Functions (20 min)&lt;ul&gt;
&lt;li&gt;callables&lt;/li&gt;
&lt;li&gt;arguments (args, kw)&lt;/li&gt;
&lt;li&gt;mutable parameters&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Scoping (10 min)&lt;/li&gt;
&lt;li&gt;Closures (5 min)&lt;/li&gt;
&lt;li&gt;Decorators (20 min)&lt;ul&gt;
&lt;li&gt;Simple decorators&lt;/li&gt;
&lt;li&gt;parameterized decorators&lt;/li&gt;
&lt;li&gt;mangling&lt;/li&gt;
&lt;li&gt;templates for decorators&lt;/li&gt;
&lt;li&gt;classmethod staticmethod&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Properties (5 min)&lt;/li&gt;
&lt;li&gt;List comprehensions (10 min)&lt;/li&gt;
&lt;li&gt;Iterator pattern (5 min)&lt;/li&gt;
&lt;li&gt;Generators (15 min )&lt;/li&gt;
&lt;li&gt;Hands-on application (50 min)&lt;/li&gt;
&lt;/ul&gt;
</summary><category term="callables"></category><category term="closures"></category><category term="decorators"></category><category term="functionalprogramming"></category><category term="functions"></category><category term="generators"></category><category term="iterators"></category><category term="listcomprehensions"></category><category term="pycon"></category><category term="pycon2010"></category><category term="python-advanced"></category></entry></feed>