<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org - Jonathan Helmus</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_jonathan-helmus.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2022-04-27T00:00:00+00:00</updated><subtitle></subtitle><entry><title>Speeding Up Python Data Analysis Using Cython</title><link href="https://pyvideo.org/depy-2015/speeding-up-python-data-analysis-using-cython.html" rel="alternate"></link><published>2015-05-29T00:00:00+00:00</published><updated>2015-05-29T00:00:00+00:00</updated><author><name>Jonathan Helmus</name></author><id>tag:pyvideo.org,2015-05-29:/depy-2015/speeding-up-python-data-analysis-using-cython.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python is an ideal language for developing software for the analysis of
scientific data. Although packages such as NumPy, SciPy, and pandas can
offer execution speeds similar to those possible using statically typed,
compiled languages, oftentimes Python code is too slow for the task at
hand. Cython is a …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Python is an ideal language for developing software for the analysis of
scientific data. Although packages such as NumPy, SciPy, and pandas can
offer execution speeds similar to those possible using statically typed,
compiled languages, oftentimes Python code is too slow for the task at
hand. Cython is a static compiler for Python which, with the addition of
a few type declarations, allows Python code to execute at significantly
faster speeds. This talk will detail how to use Cython to optimize the
run time of Python code for analysis of scientific data with examples
taken from the development of algorithms in the Python ARM Radar Toolkit
(Py-ART), an open source library for working with weather radar data in
Python.&lt;/p&gt;
</content><category term="DePy 2015"></category></entry><entry><title>Building and Distributing Python Software with Conda</title><link href="https://pyvideo.org/depy-2016/building-and-distributing-python-software-with-conda.html" rel="alternate"></link><published>2016-05-07T00:00:00+00:00</published><updated>2016-05-07T00:00:00+00:00</updated><author><name>Jonathan Helmus</name></author><id>tag:pyvideo.org,2016-05-07:/depy-2016/building-and-distributing-python-software-with-conda.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Conda is a cross platform, package management system widely used in the scientific and data science Python communities. Conda can be used to package and distribute software written in any language but has first class support for Python packages. This talk will briefly cover how to use conda to …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Conda is a cross platform, package management system widely used in the scientific and data science Python communities. Conda can be used to package and distribute software written in any language but has first class support for Python packages. This talk will briefly cover how to use conda to install and manage data science packages as well as how conda can be used to create isolated computing environments. The main focus of the talk will be an in-depth look at how to easily and reproducibly create conda packages for your own Python software, and options for how to share these packages with others. Finally, combining a collection of conda packages into custom cross-platform installable conda-based Python distributions will be explored.&lt;/p&gt;
</content><category term="DePy 2016"></category></entry><entry><title>Lightning Talks - Day 3</title><link href="https://pyvideo.org/pycon-us-2022/lightning-talks-day-3.html" rel="alternate"></link><published>2022-04-27T00:00:00+00:00</published><updated>2022-04-27T00:00:00+00:00</updated><author><name>Pandy Knight</name></author><id>tag:pyvideo.org,2022-04-27:/pycon-us-2022/lightning-talks-day-3.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Lightning talks are a ~ 5 minutes long, on any topic of interest to other Python people. It doesn't have to be about something that you wrote, it can be something that you learned, or a technique you think other people will be interested in.&lt;/p&gt;
&lt;p&gt;Speakers:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;00:23 - Pandy Knight …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Lightning talks are a ~ 5 minutes long, on any topic of interest to other Python people. It doesn't have to be about something that you wrote, it can be something that you learned, or a technique you think other people will be interested in.&lt;/p&gt;
&lt;p&gt;Speakers:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;00:23 - Pandy Knight - How to write a test case&lt;/li&gt;
&lt;li&gt;05:09 - Shreya Batra - The Effects of Computational THinking&lt;/li&gt;
&lt;li&gt;09:36 - Patrick Arminio - The fastest way to fetch the latest python version&lt;/li&gt;
&lt;li&gt;11:57 - Ray McLendon - Not all data is created equal&lt;/li&gt;
&lt;li&gt;16:24 - Geir Arne Hjelle - Reading PEPs&lt;/li&gt;
&lt;li&gt;21:30 - Jonathan Helmus - Pip install Python?&lt;/li&gt;
&lt;li&gt;26:07 - Jelle Zijlstra - PEP 688: Typing for the buffer protocol&lt;/li&gt;
&lt;li&gt;29:30 - Nick Muoh - Post pandemic meetuup&lt;/li&gt;
&lt;li&gt;33:25 - multiple speakers talking about Regional Python Conferences&lt;/li&gt;
&lt;/ul&gt;
</content><category term="PyCon US 2022"></category><category term="lightning talks"></category></entry><entry><title>Exploring Open Access Weather Radar with the Python ARM Toolkit</title><link href="https://pyvideo.org/scipy-2015/exploring-open-access-weather-radar-with-the-python-arm-toolkit.html" rel="alternate"></link><published>2015-07-10T00:00:00+00:00</published><updated>2015-07-10T00:00:00+00:00</updated><author><name>Jonathan Helmus</name></author><id>tag:pyvideo.org,2015-07-10:/scipy-2015/exploring-open-access-weather-radar-with-the-python-arm-toolkit.html</id><content type="html"></content><category term="SciPy 2015"></category></entry><entry><title>Berryconda Scientific Python on the Raspberry Pi</title><link href="https://pyvideo.org/scipy-2017/berryconda-scientific-python-on-the-raspberry-pi.html" rel="alternate"></link><published>2017-07-17T00:00:00+00:00</published><updated>2017-07-17T00:00:00+00:00</updated><author><name>Jonathan Helmus</name></author><id>tag:pyvideo.org,2017-07-17:/scipy-2017/berryconda-scientific-python-on-the-raspberry-pi.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The Raspberry Pi is a series of low cost single-board computers widely used for teaching computer science and popular with the robotics community. Although Python has been a target programming language on the Pi, the selection of scientific Python packages available in the default Raspbian operating system is often …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;The Raspberry Pi is a series of low cost single-board computers widely used for teaching computer science and popular with the robotics community. Although Python has been a target programming language on the Pi, the selection of scientific Python packages available in the default Raspbian operating system is often limited. Many of the popular newer libraries are missing, and only older versions of many of the core packages are available. Users wanting a wider and more up-to-date selection of packages are left to compile the software themselves or to use an alternative operating system.     The berryconda project aims to address these limitations. Berryconda is a conda based Python distribution for the Raspberry Pi. With it, you can install and manage a scientific python stack on your Raspberry Pi using conda, an open-source package and environment management system.&lt;/p&gt;
</content><category term="SciPy 2017"></category></entry><entry><title>The Sheer Joy of Packaging</title><link href="https://pyvideo.org/scipy-2018/the-sheer-joy-of-packaging.html" rel="alternate"></link><published>2018-07-10T00:00:00+00:00</published><updated>2018-07-10T00:00:00+00:00</updated><author><name>Michael Sarahan</name></author><id>tag:pyvideo.org,2018-07-10:/scipy-2018/the-sheer-joy-of-packaging.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Building packages in Python used to be hard, especially the ones
including compiled extensions. Fortunately, it is getting easier thanks
to efforts in the scientific Python community. However, there are still
a lot of challenges and complexities facing the package builder.There
are at least two major packaging systems …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Building packages in Python used to be hard, especially the ones
including compiled extensions. Fortunately, it is getting easier thanks
to efforts in the scientific Python community. However, there are still
a lot of challenges and complexities facing the package builder.There
are at least two major packaging systems (pip/wheel and conda), and lots
of different ways to do work with these systems. This tutorial will
cover packaging from start to finish for both PyPI and conda, including
setup.py, flit, wheels, twine, conda-build, scikit-build, anaconda
cloud, and conda-forge. Particular attention will be paid to critical
details, such as binary compatibility and platform
differences.Presenter(s): Speaker: Michael Sarahan, Anaconda, Inc.
Speaker: Matthew McCormick, Kitware, Inc. Speaker: Jean-Christophe
Fillion-Robin, Kitware, Inc. Speaker: Filipe Fernandes, SECOORA Speaker:
Chris Barker, NOAA Speaker: Matt Craig, Minnesota State University
Moorhead Speaker: Jonathan Helmus, Anaconda, Inc. Speaker: Ray Donnelly,
Anaconda, Inc.&lt;/p&gt;
</content><category term="SciPy 2018"></category><category term="tutorial"></category></entry></feed>