<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>PyVideo.org</title><link href="https://pyvideo.org/" rel="alternate"></link><link href="https://pyvideo.org/feeds/speaker_sever-banesiu.atom.xml" rel="self"></link><id>https://pyvideo.org/</id><updated>2015-08-06T00:00:00+00:00</updated><entry><title>Distributed Workflows with Flowy</title><link href="https://pyvideo.org/europython-2015/distributed-workflows-with-flowy.html" rel="alternate"></link><published>2015-08-06T00:00:00+00:00</published><updated>2015-08-06T00:00:00+00:00</updated><author><name>Sever Banesiu</name></author><id>tag:pyvideo.org,2015-08-06:europython-2015/distributed-workflows-with-flowy.html</id><summary type="html">&lt;h3&gt;Description&lt;/h3&gt;&lt;p&gt;Sever Banesiu - Distributed Workflows with Flowy
[EuroPython 2015]
[20 July 2015]
[Bilbao, Euskadi, Spain]&lt;/p&gt;
&lt;p&gt;This presentation introduces Flowy, a library for building and running
distributed, asynchronous workflows built on top of different backends
(such as Amazonâ€™s SWF). Flowy deals away with the spaghetti code that
often crops up from orchestrating complex workflows. It is ideal for
applications that do multi-phased batch processing, media encoding,
long-running tasks, and/or background processing.&lt;/p&gt;
&lt;p&gt;We'll start by discussing Flowy's unique execution model and see how
different execution topologies can be implemented on top of it. During
the talk we'll run and visualize workflows using a local backend.
We'll then take a look at what it takes to scale beyond a single
machine by using an external service like SWF.&lt;/p&gt;
</summary></entry></feed>